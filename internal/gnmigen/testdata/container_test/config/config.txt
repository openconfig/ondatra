package telemetry

// This file contains generated telemetry method augmentations for the
// generated path structs, which makes use of their gNMI paths for making
// ONDATRA telemetry calls.

import (
	"fmt"
	"reflect"
	"sort"
	"strconv"
	"testing"
	"time"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
	"github.com/openconfig/ondatra/internal/gnmigen/genutil/genutil"

	gpb "github.com/openconfig/gnmi/proto/gnmi"
)

// WithReplica adds the replica number to the context metadata of the gNMI
// server query.
func (n *RootPath) WithReplica(replica int) *RootPath {
	genutil.PutReplica(n, replica)
	return n
}

// WithSubscriptionMode specifies the subscription mode in the underlying gNMI
// subscribe.
func (n *RootPath) WithSubscriptionMode(mode gpb.SubscriptionMode) *RootPath {
	genutil.PutSubscriptionMode(n, mode)
	return n
}

// WithClient allows the user to provide a gNMI client. This allows for creation
// of tests for multiple gNMI clients to a single DUT.
func (n *RootPath) WithClient(c gpb.GNMIClient) *RootPath {
	genutil.PutClient(n, c)
	return n
}

// NewBatch returns a newly instantiated SetRequestBatch object for batching set requests.
func (d *RootPath) NewBatch() *SetRequestBatch {
	return NewSetBatch(d)
}

// Lookup fetches the value at /openconfig-simple/parent with a ONCE subscription.
// It returns nil if there is no value present at the path.
func (n *ParentPath) Lookup(t testing.TB) *QualifiedParent {
	t.Helper()
	goStruct := &Parent{}
	md, ok := Lookup(t, n, "Parent", goStruct, false, false)
	if ok {
		return (&QualifiedParent{
			Metadata: md,
		}).SetVal(goStruct)
	}
	return nil
}

// Get fetches the value at /openconfig-simple/parent with a ONCE subscription,
// failing the test fatally if no value is present at the path.
// To avoid a fatal test failure, use the Lookup method instead.
func (n *ParentPath) Get(t testing.TB) *Parent {
	t.Helper()
	return n.Lookup(t).Val(t)
}

// Lookup fetches the values at /openconfig-simple/parent with a ONCE subscription.
// It returns an empty list if no values are present at the path.
func (n *ParentPathAny) Lookup(t testing.TB) []*QualifiedParent {
	t.Helper()
	datapoints, queryPath := genutil.MustGet(t, n)
	datapointGroups, sortedPrefixes := genutil.BundleDatapoints(t, datapoints, uint(len(queryPath.Elem)))

	var data []*QualifiedParent
	for _, prefix := range sortedPrefixes {
		goStruct := &Parent{}
		md, ok := genutil.MustUnmarshal(t, datapointGroups[prefix], GetSchema(), "Parent", goStruct, queryPath, false, false)
		if !ok {
			continue
		}
		qv := (&QualifiedParent{
			Metadata: md,
		}).SetVal(goStruct)
		data = append(data, qv)
	}
	return data
}

// Get fetches the values at /openconfig-simple/parent with a ONCE subscription.
func (n *ParentPathAny) Get(t testing.TB) []*Parent {
	t.Helper()
	fulldata := n.Lookup(t)
	var data []*Parent
	for _, full := range fulldata {
		data = append(data, full.Val(t))
	}
	return data
}

// Delete deletes the configuration at /openconfig-simple/parent.
func (n *ParentPath) Delete(t testing.TB) *gpb.SetResponse {
	t.Helper()
	return genutil.Delete(t, n)
}

// BatchDelete buffers a config delete operation at /openconfig-simple/parent in the given batch object.
func (n *ParentPath) BatchDelete(t testing.TB, b *SetRequestBatch) {
	t.Helper()
	b.BatchDelete(t, n)
}

// Replace replaces the configuration at /openconfig-simple/parent.
func (n *ParentPath) Replace(t testing.TB, val *Parent) *gpb.SetResponse {
	t.Helper()
	return genutil.Replace(t, n, val)
}

// BatchReplace buffers a config replace operation at /openconfig-simple/parent in the given batch object.
func (n *ParentPath) BatchReplace(t testing.TB, b *SetRequestBatch, val *Parent) {
	t.Helper()
	b.BatchReplace(t, n, val)
}

// Update updates the configuration at /openconfig-simple/parent.
func (n *ParentPath) Update(t testing.TB, val *Parent) *gpb.SetResponse {
	t.Helper()
	return genutil.Update(t, n, val)
}

// BatchUpdate buffers a config update operation at /openconfig-simple/parent in the given batch object.
func (n *ParentPath) BatchUpdate(t testing.TB, b *SetRequestBatch, val *Parent) {
	t.Helper()
	b.BatchUpdate(t, n, val)
}

// Lookup fetches the value at /openconfig-simple/parent/child with a ONCE subscription.
// It returns nil if there is no value present at the path.
func (n *Parent_ChildPath) Lookup(t testing.TB) *QualifiedParent_Child {
	t.Helper()
	goStruct := &Parent_Child{}
	md, ok := Lookup(t, n, "Parent_Child", goStruct, false, false)
	if ok {
		return (&QualifiedParent_Child{
			Metadata: md,
		}).SetVal(goStruct)
	}
	return nil
}

// Get fetches the value at /openconfig-simple/parent/child with a ONCE subscription,
// failing the test fatally if no value is present at the path.
// To avoid a fatal test failure, use the Lookup method instead.
func (n *Parent_ChildPath) Get(t testing.TB) *Parent_Child {
	t.Helper()
	return n.Lookup(t).Val(t)
}

// Lookup fetches the values at /openconfig-simple/parent/child with a ONCE subscription.
// It returns an empty list if no values are present at the path.
func (n *Parent_ChildPathAny) Lookup(t testing.TB) []*QualifiedParent_Child {
	t.Helper()
	datapoints, queryPath := genutil.MustGet(t, n)
	datapointGroups, sortedPrefixes := genutil.BundleDatapoints(t, datapoints, uint(len(queryPath.Elem)))

	var data []*QualifiedParent_Child
	for _, prefix := range sortedPrefixes {
		goStruct := &Parent_Child{}
		md, ok := genutil.MustUnmarshal(t, datapointGroups[prefix], GetSchema(), "Parent_Child", goStruct, queryPath, false, false)
		if !ok {
			continue
		}
		qv := (&QualifiedParent_Child{
			Metadata: md,
		}).SetVal(goStruct)
		data = append(data, qv)
	}
	return data
}

// Get fetches the values at /openconfig-simple/parent/child with a ONCE subscription.
func (n *Parent_ChildPathAny) Get(t testing.TB) []*Parent_Child {
	t.Helper()
	fulldata := n.Lookup(t)
	var data []*Parent_Child
	for _, full := range fulldata {
		data = append(data, full.Val(t))
	}
	return data
}

// Delete deletes the configuration at /openconfig-simple/parent/child.
func (n *Parent_ChildPath) Delete(t testing.TB) *gpb.SetResponse {
	t.Helper()
	return genutil.Delete(t, n)
}

// BatchDelete buffers a config delete operation at /openconfig-simple/parent/child in the given batch object.
func (n *Parent_ChildPath) BatchDelete(t testing.TB, b *SetRequestBatch) {
	t.Helper()
	b.BatchDelete(t, n)
}

// Replace replaces the configuration at /openconfig-simple/parent/child.
func (n *Parent_ChildPath) Replace(t testing.TB, val *Parent_Child) *gpb.SetResponse {
	t.Helper()
	return genutil.Replace(t, n, val)
}

// BatchReplace buffers a config replace operation at /openconfig-simple/parent/child in the given batch object.
func (n *Parent_ChildPath) BatchReplace(t testing.TB, b *SetRequestBatch, val *Parent_Child) {
	t.Helper()
	b.BatchReplace(t, n, val)
}

// Update updates the configuration at /openconfig-simple/parent/child.
func (n *Parent_ChildPath) Update(t testing.TB, val *Parent_Child) *gpb.SetResponse {
	t.Helper()
	return genutil.Update(t, n, val)
}

// BatchUpdate buffers a config update operation at /openconfig-simple/parent/child in the given batch object.
func (n *Parent_ChildPath) BatchUpdate(t testing.TB, b *SetRequestBatch, val *Parent_Child) {
	t.Helper()
	b.BatchUpdate(t, n, val)
}

// Lookup fetches the value at /openconfig-simple/parent/child/config/five with a ONCE subscription.
// It returns nil if there is no value present at the path.
func (n *Parent_Child_FivePath) Lookup(t testing.TB) *QualifiedBinary {
	t.Helper()
	goStruct := &Parent_Child{}
	md, ok := Lookup(t, n, "Parent_Child", goStruct, true, false)
	if ok {
		return convertParent_Child_FivePath(t, md, goStruct)
	}
	return nil
}

// Get fetches the value at /openconfig-simple/parent/child/config/five with a ONCE subscription,
// failing the test fatally if no value is present at the path.
// To avoid a fatal test failure, use the Lookup method instead.
func (n *Parent_Child_FivePath) Get(t testing.TB) Binary {
	t.Helper()
	return n.Lookup(t).Val(t)
}

// Lookup fetches the values at /openconfig-simple/parent/child/config/five with a ONCE subscription.
// It returns an empty list if no values are present at the path.
func (n *Parent_Child_FivePathAny) Lookup(t testing.TB) []*QualifiedBinary {
	t.Helper()
	datapoints, queryPath := genutil.MustGet(t, n)
	datapointGroups, sortedPrefixes := genutil.BundleDatapoints(t, datapoints, uint(len(queryPath.Elem)))

	var data []*QualifiedBinary
	for _, prefix := range sortedPrefixes {
		goStruct := &Parent_Child{}
		md, ok := genutil.MustUnmarshal(t, datapointGroups[prefix], GetSchema(), "Parent_Child", goStruct, queryPath, true, false)
		if !ok {
			continue
		}
		qv := convertParent_Child_FivePath(t, md, goStruct)
		data = append(data, qv)
	}
	return data
}

// Get fetches the values at /openconfig-simple/parent/child/config/five with a ONCE subscription.
func (n *Parent_Child_FivePathAny) Get(t testing.TB) []Binary {
	t.Helper()
	fulldata := n.Lookup(t)
	var data []Binary
	for _, full := range fulldata {
		data = append(data, full.Val(t))
	}
	return data
}

// Delete deletes the configuration at /openconfig-simple/parent/child/config/five.
func (n *Parent_Child_FivePath) Delete(t testing.TB) *gpb.SetResponse {
	t.Helper()
	return genutil.Delete(t, n)
}

// BatchDelete buffers a config delete operation at /openconfig-simple/parent/child/config/five in the given batch object.
func (n *Parent_Child_FivePath) BatchDelete(t testing.TB, b *SetRequestBatch) {
	t.Helper()
	b.BatchDelete(t, n)
}

// Replace replaces the configuration at /openconfig-simple/parent/child/config/five.
func (n *Parent_Child_FivePath) Replace(t testing.TB, val Binary) *gpb.SetResponse {
	t.Helper()
	return genutil.Replace(t, n, val)
}

// BatchReplace buffers a config replace operation at /openconfig-simple/parent/child/config/five in the given batch object.
func (n *Parent_Child_FivePath) BatchReplace(t testing.TB, b *SetRequestBatch, val Binary) {
	t.Helper()
	b.BatchReplace(t, n, val)
}

// Update updates the configuration at /openconfig-simple/parent/child/config/five.
func (n *Parent_Child_FivePath) Update(t testing.TB, val Binary) *gpb.SetResponse {
	t.Helper()
	return genutil.Update(t, n, val)
}

// BatchUpdate buffers a config update operation at /openconfig-simple/parent/child/config/five in the given batch object.
func (n *Parent_Child_FivePath) BatchUpdate(t testing.TB, b *SetRequestBatch, val Binary) {
	t.Helper()
	b.BatchUpdate(t, n, val)
}

// convertParent_Child_FivePath extracts the value of the leaf Five from its parent Parent_Child
// and combines the update with an existing Metadata to return a *QualifiedBinary.
func convertParent_Child_FivePath(t testing.TB, md *genutil.Metadata, parent *Parent_Child) *QualifiedBinary {
	t.Helper()
	qv := &QualifiedBinary{
		Metadata: md,
	}
	val := parent.Five
	if !reflect.ValueOf(val).IsZero() {
		qv.SetVal(val)
	}
	return qv
}

// Lookup fetches the value at /openconfig-simple/parent/child/config/four with a ONCE subscription.
// It returns nil if there is no value present at the path.
func (n *Parent_Child_FourPath) Lookup(t testing.TB) *QualifiedBinary {
	t.Helper()
	goStruct := &Parent_Child{}
	md, ok := Lookup(t, n, "Parent_Child", goStruct, true, false)
	if ok {
		return convertParent_Child_FourPath(t, md, goStruct)
	}
	return nil
}

// Get fetches the value at /openconfig-simple/parent/child/config/four with a ONCE subscription,
// failing the test fatally if no value is present at the path.
// To avoid a fatal test failure, use the Lookup method instead.
func (n *Parent_Child_FourPath) Get(t testing.TB) Binary {
	t.Helper()
	return n.Lookup(t).Val(t)
}

// Lookup fetches the values at /openconfig-simple/parent/child/config/four with a ONCE subscription.
// It returns an empty list if no values are present at the path.
func (n *Parent_Child_FourPathAny) Lookup(t testing.TB) []*QualifiedBinary {
	t.Helper()
	datapoints, queryPath := genutil.MustGet(t, n)
	datapointGroups, sortedPrefixes := genutil.BundleDatapoints(t, datapoints, uint(len(queryPath.Elem)))

	var data []*QualifiedBinary
	for _, prefix := range sortedPrefixes {
		goStruct := &Parent_Child{}
		md, ok := genutil.MustUnmarshal(t, datapointGroups[prefix], GetSchema(), "Parent_Child", goStruct, queryPath, true, false)
		if !ok {
			continue
		}
		qv := convertParent_Child_FourPath(t, md, goStruct)
		data = append(data, qv)
	}
	return data
}

// Get fetches the values at /openconfig-simple/parent/child/config/four with a ONCE subscription.
func (n *Parent_Child_FourPathAny) Get(t testing.TB) []Binary {
	t.Helper()
	fulldata := n.Lookup(t)
	var data []Binary
	for _, full := range fulldata {
		data = append(data, full.Val(t))
	}
	return data
}

// Delete deletes the configuration at /openconfig-simple/parent/child/config/four.
func (n *Parent_Child_FourPath) Delete(t testing.TB) *gpb.SetResponse {
	t.Helper()
	return genutil.Delete(t, n)
}

// BatchDelete buffers a config delete operation at /openconfig-simple/parent/child/config/four in the given batch object.
func (n *Parent_Child_FourPath) BatchDelete(t testing.TB, b *SetRequestBatch) {
	t.Helper()
	b.BatchDelete(t, n)
}

// Replace replaces the configuration at /openconfig-simple/parent/child/config/four.
func (n *Parent_Child_FourPath) Replace(t testing.TB, val Binary) *gpb.SetResponse {
	t.Helper()
	return genutil.Replace(t, n, val)
}

// BatchReplace buffers a config replace operation at /openconfig-simple/parent/child/config/four in the given batch object.
func (n *Parent_Child_FourPath) BatchReplace(t testing.TB, b *SetRequestBatch, val Binary) {
	t.Helper()
	b.BatchReplace(t, n, val)
}

// Update updates the configuration at /openconfig-simple/parent/child/config/four.
func (n *Parent_Child_FourPath) Update(t testing.TB, val Binary) *gpb.SetResponse {
	t.Helper()
	return genutil.Update(t, n, val)
}

// BatchUpdate buffers a config update operation at /openconfig-simple/parent/child/config/four in the given batch object.
func (n *Parent_Child_FourPath) BatchUpdate(t testing.TB, b *SetRequestBatch, val Binary) {
	t.Helper()
	b.BatchUpdate(t, n, val)
}

// convertParent_Child_FourPath extracts the value of the leaf Four from its parent Parent_Child
// and combines the update with an existing Metadata to return a *QualifiedBinary.
func convertParent_Child_FourPath(t testing.TB, md *genutil.Metadata, parent *Parent_Child) *QualifiedBinary {
	t.Helper()
	qv := &QualifiedBinary{
		Metadata: md,
	}
	val := parent.Four
	if !reflect.ValueOf(val).IsZero() {
		qv.SetVal(val)
	}
	return qv
}

// Lookup fetches the value at /openconfig-simple/parent/child/config/one with a ONCE subscription.
// It returns nil if there is no value present at the path.
func (n *Parent_Child_OnePath) Lookup(t testing.TB) *QualifiedString {
	t.Helper()
	goStruct := &Parent_Child{}
	md, ok := Lookup(t, n, "Parent_Child", goStruct, true, false)
	if ok {
		return convertParent_Child_OnePath(t, md, goStruct)
	}
	return nil
}

// Get fetches the value at /openconfig-simple/parent/child/config/one with a ONCE subscription,
// failing the test fatally if no value is present at the path.
// To avoid a fatal test failure, use the Lookup method instead.
func (n *Parent_Child_OnePath) Get(t testing.TB) string {
	t.Helper()
	return n.Lookup(t).Val(t)
}

// Lookup fetches the values at /openconfig-simple/parent/child/config/one with a ONCE subscription.
// It returns an empty list if no values are present at the path.
func (n *Parent_Child_OnePathAny) Lookup(t testing.TB) []*QualifiedString {
	t.Helper()
	datapoints, queryPath := genutil.MustGet(t, n)
	datapointGroups, sortedPrefixes := genutil.BundleDatapoints(t, datapoints, uint(len(queryPath.Elem)))

	var data []*QualifiedString
	for _, prefix := range sortedPrefixes {
		goStruct := &Parent_Child{}
		md, ok := genutil.MustUnmarshal(t, datapointGroups[prefix], GetSchema(), "Parent_Child", goStruct, queryPath, true, false)
		if !ok {
			continue
		}
		qv := convertParent_Child_OnePath(t, md, goStruct)
		data = append(data, qv)
	}
	return data
}

// Get fetches the values at /openconfig-simple/parent/child/config/one with a ONCE subscription.
func (n *Parent_Child_OnePathAny) Get(t testing.TB) []string {
	t.Helper()
	fulldata := n.Lookup(t)
	var data []string
	for _, full := range fulldata {
		data = append(data, full.Val(t))
	}
	return data
}

// Delete deletes the configuration at /openconfig-simple/parent/child/config/one.
func (n *Parent_Child_OnePath) Delete(t testing.TB) *gpb.SetResponse {
	t.Helper()
	return genutil.Delete(t, n)
}

// BatchDelete buffers a config delete operation at /openconfig-simple/parent/child/config/one in the given batch object.
func (n *Parent_Child_OnePath) BatchDelete(t testing.TB, b *SetRequestBatch) {
	t.Helper()
	b.BatchDelete(t, n)
}

// Replace replaces the configuration at /openconfig-simple/parent/child/config/one.
func (n *Parent_Child_OnePath) Replace(t testing.TB, val string) *gpb.SetResponse {
	t.Helper()
	return genutil.Replace(t, n, &val)
}

// BatchReplace buffers a config replace operation at /openconfig-simple/parent/child/config/one in the given batch object.
func (n *Parent_Child_OnePath) BatchReplace(t testing.TB, b *SetRequestBatch, val string) {
	t.Helper()
	b.BatchReplace(t, n, &val)
}

// Update updates the configuration at /openconfig-simple/parent/child/config/one.
func (n *Parent_Child_OnePath) Update(t testing.TB, val string) *gpb.SetResponse {
	t.Helper()
	return genutil.Update(t, n, &val)
}

// BatchUpdate buffers a config update operation at /openconfig-simple/parent/child/config/one in the given batch object.
func (n *Parent_Child_OnePath) BatchUpdate(t testing.TB, b *SetRequestBatch, val string) {
	t.Helper()
	b.BatchUpdate(t, n, &val)
}

// convertParent_Child_OnePath extracts the value of the leaf One from its parent Parent_Child
// and combines the update with an existing Metadata to return a *QualifiedString.
func convertParent_Child_OnePath(t testing.TB, md *genutil.Metadata, parent *Parent_Child) *QualifiedString {
	t.Helper()
	qv := &QualifiedString{
		Metadata: md,
	}
	val := parent.One
	if !reflect.ValueOf(val).IsZero() {
		qv.SetVal(*val)
	}
	return qv
}

// Lookup fetches the value at /openconfig-simple/parent/child/config/three with a ONCE subscription.
// It returns nil if there is no value present at the path.
func (n *Parent_Child_ThreePath) Lookup(t testing.TB) *QualifiedE_Child_Three {
	t.Helper()
	goStruct := &Parent_Child{}
	md, ok := Lookup(t, n, "Parent_Child", goStruct, true, false)
	if ok {
		return convertParent_Child_ThreePath(t, md, goStruct)
	}
	return nil
}

// Get fetches the value at /openconfig-simple/parent/child/config/three with a ONCE subscription,
// failing the test fatally if no value is present at the path.
// To avoid a fatal test failure, use the Lookup method instead.
func (n *Parent_Child_ThreePath) Get(t testing.TB) E_Child_Three {
	t.Helper()
	return n.Lookup(t).Val(t)
}

// Lookup fetches the values at /openconfig-simple/parent/child/config/three with a ONCE subscription.
// It returns an empty list if no values are present at the path.
func (n *Parent_Child_ThreePathAny) Lookup(t testing.TB) []*QualifiedE_Child_Three {
	t.Helper()
	datapoints, queryPath := genutil.MustGet(t, n)
	datapointGroups, sortedPrefixes := genutil.BundleDatapoints(t, datapoints, uint(len(queryPath.Elem)))

	var data []*QualifiedE_Child_Three
	for _, prefix := range sortedPrefixes {
		goStruct := &Parent_Child{}
		md, ok := genutil.MustUnmarshal(t, datapointGroups[prefix], GetSchema(), "Parent_Child", goStruct, queryPath, true, false)
		if !ok {
			continue
		}
		qv := convertParent_Child_ThreePath(t, md, goStruct)
		data = append(data, qv)
	}
	return data
}

// Get fetches the values at /openconfig-simple/parent/child/config/three with a ONCE subscription.
func (n *Parent_Child_ThreePathAny) Get(t testing.TB) []E_Child_Three {
	t.Helper()
	fulldata := n.Lookup(t)
	var data []E_Child_Three
	for _, full := range fulldata {
		data = append(data, full.Val(t))
	}
	return data
}

// Delete deletes the configuration at /openconfig-simple/parent/child/config/three.
func (n *Parent_Child_ThreePath) Delete(t testing.TB) *gpb.SetResponse {
	t.Helper()
	return genutil.Delete(t, n)
}

// BatchDelete buffers a config delete operation at /openconfig-simple/parent/child/config/three in the given batch object.
func (n *Parent_Child_ThreePath) BatchDelete(t testing.TB, b *SetRequestBatch) {
	t.Helper()
	b.BatchDelete(t, n)
}

// Replace replaces the configuration at /openconfig-simple/parent/child/config/three.
func (n *Parent_Child_ThreePath) Replace(t testing.TB, val E_Child_Three) *gpb.SetResponse {
	t.Helper()
	return genutil.Replace(t, n, val)
}

// BatchReplace buffers a config replace operation at /openconfig-simple/parent/child/config/three in the given batch object.
func (n *Parent_Child_ThreePath) BatchReplace(t testing.TB, b *SetRequestBatch, val E_Child_Three) {
	t.Helper()
	b.BatchReplace(t, n, val)
}

// Update updates the configuration at /openconfig-simple/parent/child/config/three.
func (n *Parent_Child_ThreePath) Update(t testing.TB, val E_Child_Three) *gpb.SetResponse {
	t.Helper()
	return genutil.Update(t, n, val)
}

// BatchUpdate buffers a config update operation at /openconfig-simple/parent/child/config/three in the given batch object.
func (n *Parent_Child_ThreePath) BatchUpdate(t testing.TB, b *SetRequestBatch, val E_Child_Three) {
	t.Helper()
	b.BatchUpdate(t, n, val)
}

// convertParent_Child_ThreePath extracts the value of the leaf Three from its parent Parent_Child
// and combines the update with an existing Metadata to return a *QualifiedE_Child_Three.
func convertParent_Child_ThreePath(t testing.TB, md *genutil.Metadata, parent *Parent_Child) *QualifiedE_Child_Three {
	t.Helper()
	qv := &QualifiedE_Child_Three{
		Metadata: md,
	}
	val := parent.Three
	if !reflect.ValueOf(val).IsZero() {
		qv.SetVal(val)
	}
	return qv
}

// Lookup fetches the value at /openconfig-simple/parent/child/state/two with a ONCE subscription.
// It returns nil if there is no value present at the path.
func (n *Parent_Child_TwoPath) Lookup(t testing.TB) *QualifiedString {
	t.Helper()
	goStruct := &Parent_Child{}
	md, ok := Lookup(t, n, "Parent_Child", goStruct, true, false)
	if ok {
		return convertParent_Child_TwoPath(t, md, goStruct)
	}
	return nil
}

// Get fetches the value at /openconfig-simple/parent/child/state/two with a ONCE subscription,
// failing the test fatally if no value is present at the path.
// To avoid a fatal test failure, use the Lookup method instead.
func (n *Parent_Child_TwoPath) Get(t testing.TB) string {
	t.Helper()
	return n.Lookup(t).Val(t)
}

// Lookup fetches the values at /openconfig-simple/parent/child/state/two with a ONCE subscription.
// It returns an empty list if no values are present at the path.
func (n *Parent_Child_TwoPathAny) Lookup(t testing.TB) []*QualifiedString {
	t.Helper()
	datapoints, queryPath := genutil.MustGet(t, n)
	datapointGroups, sortedPrefixes := genutil.BundleDatapoints(t, datapoints, uint(len(queryPath.Elem)))

	var data []*QualifiedString
	for _, prefix := range sortedPrefixes {
		goStruct := &Parent_Child{}
		md, ok := genutil.MustUnmarshal(t, datapointGroups[prefix], GetSchema(), "Parent_Child", goStruct, queryPath, true, false)
		if !ok {
			continue
		}
		qv := convertParent_Child_TwoPath(t, md, goStruct)
		data = append(data, qv)
	}
	return data
}

// Get fetches the values at /openconfig-simple/parent/child/state/two with a ONCE subscription.
func (n *Parent_Child_TwoPathAny) Get(t testing.TB) []string {
	t.Helper()
	fulldata := n.Lookup(t)
	var data []string
	for _, full := range fulldata {
		data = append(data, full.Val(t))
	}
	return data
}

// Delete deletes the configuration at /openconfig-simple/parent/child/state/two.
func (n *Parent_Child_TwoPath) Delete(t testing.TB) *gpb.SetResponse {
	t.Helper()
	return genutil.Delete(t, n)
}

// BatchDelete buffers a config delete operation at /openconfig-simple/parent/child/state/two in the given batch object.
func (n *Parent_Child_TwoPath) BatchDelete(t testing.TB, b *SetRequestBatch) {
	t.Helper()
	b.BatchDelete(t, n)
}

// Replace replaces the configuration at /openconfig-simple/parent/child/state/two.
func (n *Parent_Child_TwoPath) Replace(t testing.TB, val string) *gpb.SetResponse {
	t.Helper()
	return genutil.Replace(t, n, &val)
}

// BatchReplace buffers a config replace operation at /openconfig-simple/parent/child/state/two in the given batch object.
func (n *Parent_Child_TwoPath) BatchReplace(t testing.TB, b *SetRequestBatch, val string) {
	t.Helper()
	b.BatchReplace(t, n, &val)
}

// Update updates the configuration at /openconfig-simple/parent/child/state/two.
func (n *Parent_Child_TwoPath) Update(t testing.TB, val string) *gpb.SetResponse {
	t.Helper()
	return genutil.Update(t, n, &val)
}

// BatchUpdate buffers a config update operation at /openconfig-simple/parent/child/state/two in the given batch object.
func (n *Parent_Child_TwoPath) BatchUpdate(t testing.TB, b *SetRequestBatch, val string) {
	t.Helper()
	b.BatchUpdate(t, n, &val)
}

// convertParent_Child_TwoPath extracts the value of the leaf Two from its parent Parent_Child
// and combines the update with an existing Metadata to return a *QualifiedString.
func convertParent_Child_TwoPath(t testing.TB, md *genutil.Metadata, parent *Parent_Child) *QualifiedString {
	t.Helper()
	qv := &QualifiedString{
		Metadata: md,
	}
	val := parent.Two
	if !reflect.ValueOf(val).IsZero() {
		qv.SetVal(*val)
	}
	return qv
}

// Lookup fetches the value at /openconfig-simple/remote-container with a ONCE subscription.
// It returns nil if there is no value present at the path.
func (n *RemoteContainerPath) Lookup(t testing.TB) *QualifiedRemoteContainer {
	t.Helper()
	goStruct := &RemoteContainer{}
	md, ok := Lookup(t, n, "RemoteContainer", goStruct, false, false)
	if ok {
		return (&QualifiedRemoteContainer{
			Metadata: md,
		}).SetVal(goStruct)
	}
	return nil
}

// Get fetches the value at /openconfig-simple/remote-container with a ONCE subscription,
// failing the test fatally if no value is present at the path.
// To avoid a fatal test failure, use the Lookup method instead.
func (n *RemoteContainerPath) Get(t testing.TB) *RemoteContainer {
	t.Helper()
	return n.Lookup(t).Val(t)
}

// Lookup fetches the values at /openconfig-simple/remote-container with a ONCE subscription.
// It returns an empty list if no values are present at the path.
func (n *RemoteContainerPathAny) Lookup(t testing.TB) []*QualifiedRemoteContainer {
	t.Helper()
	datapoints, queryPath := genutil.MustGet(t, n)
	datapointGroups, sortedPrefixes := genutil.BundleDatapoints(t, datapoints, uint(len(queryPath.Elem)))

	var data []*QualifiedRemoteContainer
	for _, prefix := range sortedPrefixes {
		goStruct := &RemoteContainer{}
		md, ok := genutil.MustUnmarshal(t, datapointGroups[prefix], GetSchema(), "RemoteContainer", goStruct, queryPath, false, false)
		if !ok {
			continue
		}
		qv := (&QualifiedRemoteContainer{
			Metadata: md,
		}).SetVal(goStruct)
		data = append(data, qv)
	}
	return data
}

// Get fetches the values at /openconfig-simple/remote-container with a ONCE subscription.
func (n *RemoteContainerPathAny) Get(t testing.TB) []*RemoteContainer {
	t.Helper()
	fulldata := n.Lookup(t)
	var data []*RemoteContainer
	for _, full := range fulldata {
		data = append(data, full.Val(t))
	}
	return data
}

// Delete deletes the configuration at /openconfig-simple/remote-container.
func (n *RemoteContainerPath) Delete(t testing.TB) *gpb.SetResponse {
	t.Helper()
	return genutil.Delete(t, n)
}

// BatchDelete buffers a config delete operation at /openconfig-simple/remote-container in the given batch object.
func (n *RemoteContainerPath) BatchDelete(t testing.TB, b *SetRequestBatch) {
	t.Helper()
	b.BatchDelete(t, n)
}

// Replace replaces the configuration at /openconfig-simple/remote-container.
func (n *RemoteContainerPath) Replace(t testing.TB, val *RemoteContainer) *gpb.SetResponse {
	t.Helper()
	return genutil.Replace(t, n, val)
}

// BatchReplace buffers a config replace operation at /openconfig-simple/remote-container in the given batch object.
func (n *RemoteContainerPath) BatchReplace(t testing.TB, b *SetRequestBatch, val *RemoteContainer) {
	t.Helper()
	b.BatchReplace(t, n, val)
}

// Update updates the configuration at /openconfig-simple/remote-container.
func (n *RemoteContainerPath) Update(t testing.TB, val *RemoteContainer) *gpb.SetResponse {
	t.Helper()
	return genutil.Update(t, n, val)
}

// BatchUpdate buffers a config update operation at /openconfig-simple/remote-container in the given batch object.
func (n *RemoteContainerPath) BatchUpdate(t testing.TB, b *SetRequestBatch, val *RemoteContainer) {
	t.Helper()
	b.BatchUpdate(t, n, val)
}

// Lookup fetches the value at /openconfig-simple/remote-container/config/a-leaf with a ONCE subscription.
// It returns nil if there is no value present at the path.
func (n *RemoteContainer_ALeafPath) Lookup(t testing.TB) *QualifiedString {
	t.Helper()
	goStruct := &RemoteContainer{}
	md, ok := Lookup(t, n, "RemoteContainer", goStruct, true, false)
	if ok {
		return convertRemoteContainer_ALeafPath(t, md, goStruct)
	}
	return nil
}

// Get fetches the value at /openconfig-simple/remote-container/config/a-leaf with a ONCE subscription,
// failing the test fatally if no value is present at the path.
// To avoid a fatal test failure, use the Lookup method instead.
func (n *RemoteContainer_ALeafPath) Get(t testing.TB) string {
	t.Helper()
	return n.Lookup(t).Val(t)
}

// Lookup fetches the values at /openconfig-simple/remote-container/config/a-leaf with a ONCE subscription.
// It returns an empty list if no values are present at the path.
func (n *RemoteContainer_ALeafPathAny) Lookup(t testing.TB) []*QualifiedString {
	t.Helper()
	datapoints, queryPath := genutil.MustGet(t, n)
	datapointGroups, sortedPrefixes := genutil.BundleDatapoints(t, datapoints, uint(len(queryPath.Elem)))

	var data []*QualifiedString
	for _, prefix := range sortedPrefixes {
		goStruct := &RemoteContainer{}
		md, ok := genutil.MustUnmarshal(t, datapointGroups[prefix], GetSchema(), "RemoteContainer", goStruct, queryPath, true, false)
		if !ok {
			continue
		}
		qv := convertRemoteContainer_ALeafPath(t, md, goStruct)
		data = append(data, qv)
	}
	return data
}

// Get fetches the values at /openconfig-simple/remote-container/config/a-leaf with a ONCE subscription.
func (n *RemoteContainer_ALeafPathAny) Get(t testing.TB) []string {
	t.Helper()
	fulldata := n.Lookup(t)
	var data []string
	for _, full := range fulldata {
		data = append(data, full.Val(t))
	}
	return data
}

// Delete deletes the configuration at /openconfig-simple/remote-container/config/a-leaf.
func (n *RemoteContainer_ALeafPath) Delete(t testing.TB) *gpb.SetResponse {
	t.Helper()
	return genutil.Delete(t, n)
}

// BatchDelete buffers a config delete operation at /openconfig-simple/remote-container/config/a-leaf in the given batch object.
func (n *RemoteContainer_ALeafPath) BatchDelete(t testing.TB, b *SetRequestBatch) {
	t.Helper()
	b.BatchDelete(t, n)
}

// Replace replaces the configuration at /openconfig-simple/remote-container/config/a-leaf.
func (n *RemoteContainer_ALeafPath) Replace(t testing.TB, val string) *gpb.SetResponse {
	t.Helper()
	return genutil.Replace(t, n, &val)
}

// BatchReplace buffers a config replace operation at /openconfig-simple/remote-container/config/a-leaf in the given batch object.
func (n *RemoteContainer_ALeafPath) BatchReplace(t testing.TB, b *SetRequestBatch, val string) {
	t.Helper()
	b.BatchReplace(t, n, &val)
}

// Update updates the configuration at /openconfig-simple/remote-container/config/a-leaf.
func (n *RemoteContainer_ALeafPath) Update(t testing.TB, val string) *gpb.SetResponse {
	t.Helper()
	return genutil.Update(t, n, &val)
}

// BatchUpdate buffers a config update operation at /openconfig-simple/remote-container/config/a-leaf in the given batch object.
func (n *RemoteContainer_ALeafPath) BatchUpdate(t testing.TB, b *SetRequestBatch, val string) {
	t.Helper()
	b.BatchUpdate(t, n, &val)
}

// convertRemoteContainer_ALeafPath extracts the value of the leaf ALeaf from its parent RemoteContainer
// and combines the update with an existing Metadata to return a *QualifiedString.
func convertRemoteContainer_ALeafPath(t testing.TB, md *genutil.Metadata, parent *RemoteContainer) *QualifiedString {
	t.Helper()
	qv := &QualifiedString{
		Metadata: md,
	}
	val := parent.ALeaf
	if !reflect.ValueOf(val).IsZero() {
		qv.SetVal(*val)
	}
	return qv
}

// Lookup fetches the value at / with a ONCE subscription.
// It returns nil if there is no value present at the path.
func (n *RootPath) Lookup(t testing.TB) *QualifiedRoot {
	t.Helper()
	goStruct := &Root{}
	md, ok := Lookup(t, n, "Root", goStruct, false, false)
	if ok {
		return (&QualifiedRoot{
			Metadata: md,
		}).SetVal(goStruct)
	}
	return nil
}

// Get fetches the value at / with a ONCE subscription,
// failing the test fatally if no value is present at the path.
// To avoid a fatal test failure, use the Lookup method instead.
func (n *RootPath) Get(t testing.TB) *Root {
	t.Helper()
	return n.Lookup(t).Val(t)
}

// Delete deletes the configuration at /.
func (n *RootPath) Delete(t testing.TB) *gpb.SetResponse {
	t.Helper()
	return genutil.Delete(t, n)
}

// BatchDelete buffers a config delete operation at / in the given batch object.
func (n *RootPath) BatchDelete(t testing.TB, b *SetRequestBatch) {
	t.Helper()
	b.BatchDelete(t, n)
}

// Replace replaces the configuration at /.
func (n *RootPath) Replace(t testing.TB, val *Root) *gpb.SetResponse {
	t.Helper()
	return genutil.Replace(t, n, val)
}

// BatchReplace buffers a config replace operation at / in the given batch object.
func (n *RootPath) BatchReplace(t testing.TB, b *SetRequestBatch, val *Root) {
	t.Helper()
	b.BatchReplace(t, n, val)
}

// Update updates the configuration at /.
func (n *RootPath) Update(t testing.TB, val *Root) *gpb.SetResponse {
	t.Helper()
	return genutil.Update(t, n, val)
}

// BatchUpdate buffers a config update operation at / in the given batch object.
func (n *RootPath) BatchUpdate(t testing.TB, b *SetRequestBatch, val *Root) {
	t.Helper()
	b.BatchUpdate(t, n, val)
}

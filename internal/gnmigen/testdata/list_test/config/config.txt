package telemetry

// This file contains generated telemetry method augmentations for the
// generated path structs, which makes use of their gNMI paths for making
// ONDATRA telemetry calls.

import (
	"fmt"
	"reflect"
	"sort"
	"strconv"
	"testing"
	"time"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
	"github.com/openconfig/ondatra/internal/gnmigen/genutil/genutil"

	gpb "github.com/openconfig/gnmi/proto/gnmi"
)

// WithReplica adds the replica number to the context metadata of the gNMI
// server query.
func (n *RootPath) WithReplica(replica int) *RootPath {
	genutil.PutReplica(n, replica)
	return n
}

// WithSubscriptionMode specifies the subscription mode in the underlying gNMI
// subscribe.
func (n *RootPath) WithSubscriptionMode(mode gpb.SubscriptionMode) *RootPath {
	genutil.PutSubscriptionMode(n, mode)
	return n
}

// WithClient allows the user to provide a gNMI client. This allows for creation
// of tests for multiple gNMI clients to a single DUT.
func (n *RootPath) WithClient(c gpb.GNMIClient) *RootPath {
	genutil.PutClient(n, c)
	return n
}

// NewBatch returns a newly instantiated SetRequestBatch object for batching set requests.
func (d *RootPath) NewBatch() *SetRequestBatch {
	return NewSetBatch(d)
}

// Lookup fetches the value at /openconfig-withlist/model with a ONCE subscription.
// It returns nil if there is no value present at the path.
func (n *ModelPath) Lookup(t testing.TB) *QualifiedModel {
	t.Helper()
	goStruct := &Model{}
	md, ok := Lookup(t, n, "Model", goStruct, false, false)
	if ok {
		return (&QualifiedModel{
			Metadata: md,
		}).SetVal(goStruct)
	}
	return nil
}

// Get fetches the value at /openconfig-withlist/model with a ONCE subscription,
// failing the test fatally if no value is present at the path.
// To avoid a fatal test failure, use the Lookup method instead.
func (n *ModelPath) Get(t testing.TB) *Model {
	t.Helper()
	return n.Lookup(t).Val(t)
}

// Lookup fetches the values at /openconfig-withlist/model with a ONCE subscription.
// It returns an empty list if no values are present at the path.
func (n *ModelPathAny) Lookup(t testing.TB) []*QualifiedModel {
	t.Helper()
	datapoints, queryPath := genutil.MustGet(t, n)
	datapointGroups, sortedPrefixes := genutil.BundleDatapoints(t, datapoints, uint(len(queryPath.Elem)))

	var data []*QualifiedModel
	for _, prefix := range sortedPrefixes {
		goStruct := &Model{}
		md, ok := genutil.MustUnmarshal(t, datapointGroups[prefix], GetSchema(), "Model", goStruct, queryPath, false, false)
		if !ok {
			continue
		}
		qv := (&QualifiedModel{
			Metadata: md,
		}).SetVal(goStruct)
		data = append(data, qv)
	}
	return data
}

// Get fetches the values at /openconfig-withlist/model with a ONCE subscription.
func (n *ModelPathAny) Get(t testing.TB) []*Model {
	t.Helper()
	fulldata := n.Lookup(t)
	var data []*Model
	for _, full := range fulldata {
		data = append(data, full.Val(t))
	}
	return data
}

// Delete deletes the configuration at /openconfig-withlist/model.
func (n *ModelPath) Delete(t testing.TB) *gpb.SetResponse {
	t.Helper()
	return genutil.Delete(t, n)
}

// BatchDelete buffers a config delete operation at /openconfig-withlist/model in the given batch object.
func (n *ModelPath) BatchDelete(t testing.TB, b *SetRequestBatch) {
	t.Helper()
	b.BatchDelete(t, n)
}

// Replace replaces the configuration at /openconfig-withlist/model.
func (n *ModelPath) Replace(t testing.TB, val *Model) *gpb.SetResponse {
	t.Helper()
	return genutil.Replace(t, n, val)
}

// BatchReplace buffers a config replace operation at /openconfig-withlist/model in the given batch object.
func (n *ModelPath) BatchReplace(t testing.TB, b *SetRequestBatch, val *Model) {
	t.Helper()
	b.BatchReplace(t, n, val)
}

// Update updates the configuration at /openconfig-withlist/model.
func (n *ModelPath) Update(t testing.TB, val *Model) *gpb.SetResponse {
	t.Helper()
	return genutil.Update(t, n, val)
}

// BatchUpdate buffers a config update operation at /openconfig-withlist/model in the given batch object.
func (n *ModelPath) BatchUpdate(t testing.TB, b *SetRequestBatch, val *Model) {
	t.Helper()
	b.BatchUpdate(t, n, val)
}

// Lookup fetches the value at /openconfig-withlist/model/b/multi-key with a ONCE subscription.
// It returns nil if there is no value present at the path.
func (n *Model_MultiKeyPath) Lookup(t testing.TB) *QualifiedModel_MultiKey {
	t.Helper()
	goStruct := &Model_MultiKey{}
	md, ok := Lookup(t, n, "Model_MultiKey", goStruct, false, false)
	if ok {
		return (&QualifiedModel_MultiKey{
			Metadata: md,
		}).SetVal(goStruct)
	}
	return nil
}

// Get fetches the value at /openconfig-withlist/model/b/multi-key with a ONCE subscription,
// failing the test fatally if no value is present at the path.
// To avoid a fatal test failure, use the Lookup method instead.
func (n *Model_MultiKeyPath) Get(t testing.TB) *Model_MultiKey {
	t.Helper()
	return n.Lookup(t).Val(t)
}

// Lookup fetches the values at /openconfig-withlist/model/b/multi-key with a ONCE subscription.
// It returns an empty list if no values are present at the path.
func (n *Model_MultiKeyPathAny) Lookup(t testing.TB) []*QualifiedModel_MultiKey {
	t.Helper()
	datapoints, queryPath := genutil.MustGet(t, n)
	datapointGroups, sortedPrefixes := genutil.BundleDatapoints(t, datapoints, uint(len(queryPath.Elem)))

	var data []*QualifiedModel_MultiKey
	for _, prefix := range sortedPrefixes {
		goStruct := &Model_MultiKey{}
		md, ok := genutil.MustUnmarshal(t, datapointGroups[prefix], GetSchema(), "Model_MultiKey", goStruct, queryPath, false, false)
		if !ok {
			continue
		}
		qv := (&QualifiedModel_MultiKey{
			Metadata: md,
		}).SetVal(goStruct)
		data = append(data, qv)
	}
	return data
}

// Get fetches the values at /openconfig-withlist/model/b/multi-key with a ONCE subscription.
func (n *Model_MultiKeyPathAny) Get(t testing.TB) []*Model_MultiKey {
	t.Helper()
	fulldata := n.Lookup(t)
	var data []*Model_MultiKey
	for _, full := range fulldata {
		data = append(data, full.Val(t))
	}
	return data
}

// Delete deletes the configuration at /openconfig-withlist/model/b/multi-key.
func (n *Model_MultiKeyPath) Delete(t testing.TB) *gpb.SetResponse {
	t.Helper()
	return genutil.Delete(t, n)
}

// BatchDelete buffers a config delete operation at /openconfig-withlist/model/b/multi-key in the given batch object.
func (n *Model_MultiKeyPath) BatchDelete(t testing.TB, b *SetRequestBatch) {
	t.Helper()
	b.BatchDelete(t, n)
}

// Replace replaces the configuration at /openconfig-withlist/model/b/multi-key.
func (n *Model_MultiKeyPath) Replace(t testing.TB, val *Model_MultiKey) *gpb.SetResponse {
	t.Helper()
	return genutil.Replace(t, n, val)
}

// BatchReplace buffers a config replace operation at /openconfig-withlist/model/b/multi-key in the given batch object.
func (n *Model_MultiKeyPath) BatchReplace(t testing.TB, b *SetRequestBatch, val *Model_MultiKey) {
	t.Helper()
	b.BatchReplace(t, n, val)
}

// Update updates the configuration at /openconfig-withlist/model/b/multi-key.
func (n *Model_MultiKeyPath) Update(t testing.TB, val *Model_MultiKey) *gpb.SetResponse {
	t.Helper()
	return genutil.Update(t, n, val)
}

// BatchUpdate buffers a config update operation at /openconfig-withlist/model/b/multi-key in the given batch object.
func (n *Model_MultiKeyPath) BatchUpdate(t testing.TB, b *SetRequestBatch, val *Model_MultiKey) {
	t.Helper()
	b.BatchUpdate(t, n, val)
}

// Lookup fetches the value at /openconfig-withlist/model/b/multi-key/config/key1 with a ONCE subscription.
// It returns nil if there is no value present at the path.
func (n *Model_MultiKey_Key1Path) Lookup(t testing.TB) *QualifiedUint32 {
	t.Helper()
	goStruct := &Model_MultiKey{}
	md, ok := Lookup(t, n, "Model_MultiKey", goStruct, true, false)
	if ok {
		return convertModel_MultiKey_Key1Path(t, md, goStruct)
	}
	return nil
}

// Get fetches the value at /openconfig-withlist/model/b/multi-key/config/key1 with a ONCE subscription,
// failing the test fatally if no value is present at the path.
// To avoid a fatal test failure, use the Lookup method instead.
func (n *Model_MultiKey_Key1Path) Get(t testing.TB) uint32 {
	t.Helper()
	return n.Lookup(t).Val(t)
}

// Lookup fetches the values at /openconfig-withlist/model/b/multi-key/config/key1 with a ONCE subscription.
// It returns an empty list if no values are present at the path.
func (n *Model_MultiKey_Key1PathAny) Lookup(t testing.TB) []*QualifiedUint32 {
	t.Helper()
	datapoints, queryPath := genutil.MustGet(t, n)
	datapointGroups, sortedPrefixes := genutil.BundleDatapoints(t, datapoints, uint(len(queryPath.Elem)))

	var data []*QualifiedUint32
	for _, prefix := range sortedPrefixes {
		goStruct := &Model_MultiKey{}
		md, ok := genutil.MustUnmarshal(t, datapointGroups[prefix], GetSchema(), "Model_MultiKey", goStruct, queryPath, true, false)
		if !ok {
			continue
		}
		qv := convertModel_MultiKey_Key1Path(t, md, goStruct)
		data = append(data, qv)
	}
	return data
}

// Get fetches the values at /openconfig-withlist/model/b/multi-key/config/key1 with a ONCE subscription.
func (n *Model_MultiKey_Key1PathAny) Get(t testing.TB) []uint32 {
	t.Helper()
	fulldata := n.Lookup(t)
	var data []uint32
	for _, full := range fulldata {
		data = append(data, full.Val(t))
	}
	return data
}

// Delete deletes the configuration at /openconfig-withlist/model/b/multi-key/config/key1.
func (n *Model_MultiKey_Key1Path) Delete(t testing.TB) *gpb.SetResponse {
	t.Helper()
	return genutil.Delete(t, n)
}

// BatchDelete buffers a config delete operation at /openconfig-withlist/model/b/multi-key/config/key1 in the given batch object.
func (n *Model_MultiKey_Key1Path) BatchDelete(t testing.TB, b *SetRequestBatch) {
	t.Helper()
	b.BatchDelete(t, n)
}

// Replace replaces the configuration at /openconfig-withlist/model/b/multi-key/config/key1.
func (n *Model_MultiKey_Key1Path) Replace(t testing.TB, val uint32) *gpb.SetResponse {
	t.Helper()
	return genutil.Replace(t, n, &val)
}

// BatchReplace buffers a config replace operation at /openconfig-withlist/model/b/multi-key/config/key1 in the given batch object.
func (n *Model_MultiKey_Key1Path) BatchReplace(t testing.TB, b *SetRequestBatch, val uint32) {
	t.Helper()
	b.BatchReplace(t, n, &val)
}

// Update updates the configuration at /openconfig-withlist/model/b/multi-key/config/key1.
func (n *Model_MultiKey_Key1Path) Update(t testing.TB, val uint32) *gpb.SetResponse {
	t.Helper()
	return genutil.Update(t, n, &val)
}

// BatchUpdate buffers a config update operation at /openconfig-withlist/model/b/multi-key/config/key1 in the given batch object.
func (n *Model_MultiKey_Key1Path) BatchUpdate(t testing.TB, b *SetRequestBatch, val uint32) {
	t.Helper()
	b.BatchUpdate(t, n, &val)
}

// convertModel_MultiKey_Key1Path extracts the value of the leaf Key1 from its parent Model_MultiKey
// and combines the update with an existing Metadata to return a *QualifiedUint32.
func convertModel_MultiKey_Key1Path(t testing.TB, md *genutil.Metadata, parent *Model_MultiKey) *QualifiedUint32 {
	t.Helper()
	qv := &QualifiedUint32{
		Metadata: md,
	}
	val := parent.Key1
	if !reflect.ValueOf(val).IsZero() {
		qv.SetVal(*val)
	}
	return qv
}

// Lookup fetches the value at /openconfig-withlist/model/b/multi-key/config/key2 with a ONCE subscription.
// It returns nil if there is no value present at the path.
func (n *Model_MultiKey_Key2Path) Lookup(t testing.TB) *QualifiedUint64 {
	t.Helper()
	goStruct := &Model_MultiKey{}
	md, ok := Lookup(t, n, "Model_MultiKey", goStruct, true, false)
	if ok {
		return convertModel_MultiKey_Key2Path(t, md, goStruct)
	}
	return nil
}

// Get fetches the value at /openconfig-withlist/model/b/multi-key/config/key2 with a ONCE subscription,
// failing the test fatally if no value is present at the path.
// To avoid a fatal test failure, use the Lookup method instead.
func (n *Model_MultiKey_Key2Path) Get(t testing.TB) uint64 {
	t.Helper()
	return n.Lookup(t).Val(t)
}

// Lookup fetches the values at /openconfig-withlist/model/b/multi-key/config/key2 with a ONCE subscription.
// It returns an empty list if no values are present at the path.
func (n *Model_MultiKey_Key2PathAny) Lookup(t testing.TB) []*QualifiedUint64 {
	t.Helper()
	datapoints, queryPath := genutil.MustGet(t, n)
	datapointGroups, sortedPrefixes := genutil.BundleDatapoints(t, datapoints, uint(len(queryPath.Elem)))

	var data []*QualifiedUint64
	for _, prefix := range sortedPrefixes {
		goStruct := &Model_MultiKey{}
		md, ok := genutil.MustUnmarshal(t, datapointGroups[prefix], GetSchema(), "Model_MultiKey", goStruct, queryPath, true, false)
		if !ok {
			continue
		}
		qv := convertModel_MultiKey_Key2Path(t, md, goStruct)
		data = append(data, qv)
	}
	return data
}

// Get fetches the values at /openconfig-withlist/model/b/multi-key/config/key2 with a ONCE subscription.
func (n *Model_MultiKey_Key2PathAny) Get(t testing.TB) []uint64 {
	t.Helper()
	fulldata := n.Lookup(t)
	var data []uint64
	for _, full := range fulldata {
		data = append(data, full.Val(t))
	}
	return data
}

// Delete deletes the configuration at /openconfig-withlist/model/b/multi-key/config/key2.
func (n *Model_MultiKey_Key2Path) Delete(t testing.TB) *gpb.SetResponse {
	t.Helper()
	return genutil.Delete(t, n)
}

// BatchDelete buffers a config delete operation at /openconfig-withlist/model/b/multi-key/config/key2 in the given batch object.
func (n *Model_MultiKey_Key2Path) BatchDelete(t testing.TB, b *SetRequestBatch) {
	t.Helper()
	b.BatchDelete(t, n)
}

// Replace replaces the configuration at /openconfig-withlist/model/b/multi-key/config/key2.
func (n *Model_MultiKey_Key2Path) Replace(t testing.TB, val uint64) *gpb.SetResponse {
	t.Helper()
	return genutil.Replace(t, n, &val)
}

// BatchReplace buffers a config replace operation at /openconfig-withlist/model/b/multi-key/config/key2 in the given batch object.
func (n *Model_MultiKey_Key2Path) BatchReplace(t testing.TB, b *SetRequestBatch, val uint64) {
	t.Helper()
	b.BatchReplace(t, n, &val)
}

// Update updates the configuration at /openconfig-withlist/model/b/multi-key/config/key2.
func (n *Model_MultiKey_Key2Path) Update(t testing.TB, val uint64) *gpb.SetResponse {
	t.Helper()
	return genutil.Update(t, n, &val)
}

// BatchUpdate buffers a config update operation at /openconfig-withlist/model/b/multi-key/config/key2 in the given batch object.
func (n *Model_MultiKey_Key2Path) BatchUpdate(t testing.TB, b *SetRequestBatch, val uint64) {
	t.Helper()
	b.BatchUpdate(t, n, &val)
}

// convertModel_MultiKey_Key2Path extracts the value of the leaf Key2 from its parent Model_MultiKey
// and combines the update with an existing Metadata to return a *QualifiedUint64.
func convertModel_MultiKey_Key2Path(t testing.TB, md *genutil.Metadata, parent *Model_MultiKey) *QualifiedUint64 {
	t.Helper()
	qv := &QualifiedUint64{
		Metadata: md,
	}
	val := parent.Key2
	if !reflect.ValueOf(val).IsZero() {
		qv.SetVal(*val)
	}
	return qv
}

// Lookup fetches the value at /openconfig-withlist/model/a/single-key with a ONCE subscription.
// It returns nil if there is no value present at the path.
func (n *Model_SingleKeyPath) Lookup(t testing.TB) *QualifiedModel_SingleKey {
	t.Helper()
	goStruct := &Model_SingleKey{}
	md, ok := Lookup(t, n, "Model_SingleKey", goStruct, false, false)
	if ok {
		return (&QualifiedModel_SingleKey{
			Metadata: md,
		}).SetVal(goStruct)
	}
	return nil
}

// Get fetches the value at /openconfig-withlist/model/a/single-key with a ONCE subscription,
// failing the test fatally if no value is present at the path.
// To avoid a fatal test failure, use the Lookup method instead.
func (n *Model_SingleKeyPath) Get(t testing.TB) *Model_SingleKey {
	t.Helper()
	return n.Lookup(t).Val(t)
}

// Lookup fetches the values at /openconfig-withlist/model/a/single-key with a ONCE subscription.
// It returns an empty list if no values are present at the path.
func (n *Model_SingleKeyPathAny) Lookup(t testing.TB) []*QualifiedModel_SingleKey {
	t.Helper()
	datapoints, queryPath := genutil.MustGet(t, n)
	datapointGroups, sortedPrefixes := genutil.BundleDatapoints(t, datapoints, uint(len(queryPath.Elem)))

	var data []*QualifiedModel_SingleKey
	for _, prefix := range sortedPrefixes {
		goStruct := &Model_SingleKey{}
		md, ok := genutil.MustUnmarshal(t, datapointGroups[prefix], GetSchema(), "Model_SingleKey", goStruct, queryPath, false, false)
		if !ok {
			continue
		}
		qv := (&QualifiedModel_SingleKey{
			Metadata: md,
		}).SetVal(goStruct)
		data = append(data, qv)
	}
	return data
}

// Get fetches the values at /openconfig-withlist/model/a/single-key with a ONCE subscription.
func (n *Model_SingleKeyPathAny) Get(t testing.TB) []*Model_SingleKey {
	t.Helper()
	fulldata := n.Lookup(t)
	var data []*Model_SingleKey
	for _, full := range fulldata {
		data = append(data, full.Val(t))
	}
	return data
}

// Delete deletes the configuration at /openconfig-withlist/model/a/single-key.
func (n *Model_SingleKeyPath) Delete(t testing.TB) *gpb.SetResponse {
	t.Helper()
	return genutil.Delete(t, n)
}

// BatchDelete buffers a config delete operation at /openconfig-withlist/model/a/single-key in the given batch object.
func (n *Model_SingleKeyPath) BatchDelete(t testing.TB, b *SetRequestBatch) {
	t.Helper()
	b.BatchDelete(t, n)
}

// Replace replaces the configuration at /openconfig-withlist/model/a/single-key.
func (n *Model_SingleKeyPath) Replace(t testing.TB, val *Model_SingleKey) *gpb.SetResponse {
	t.Helper()
	return genutil.Replace(t, n, val)
}

// BatchReplace buffers a config replace operation at /openconfig-withlist/model/a/single-key in the given batch object.
func (n *Model_SingleKeyPath) BatchReplace(t testing.TB, b *SetRequestBatch, val *Model_SingleKey) {
	t.Helper()
	b.BatchReplace(t, n, val)
}

// Update updates the configuration at /openconfig-withlist/model/a/single-key.
func (n *Model_SingleKeyPath) Update(t testing.TB, val *Model_SingleKey) *gpb.SetResponse {
	t.Helper()
	return genutil.Update(t, n, val)
}

// BatchUpdate buffers a config update operation at /openconfig-withlist/model/a/single-key in the given batch object.
func (n *Model_SingleKeyPath) BatchUpdate(t testing.TB, b *SetRequestBatch, val *Model_SingleKey) {
	t.Helper()
	b.BatchUpdate(t, n, val)
}

// Lookup fetches the value at /openconfig-withlist/model/a/single-key/config/key with a ONCE subscription.
// It returns nil if there is no value present at the path.
func (n *Model_SingleKey_KeyPath) Lookup(t testing.TB) *QualifiedUint32 {
	t.Helper()
	goStruct := &Model_SingleKey{}
	md, ok := Lookup(t, n, "Model_SingleKey", goStruct, true, false)
	if ok {
		return convertModel_SingleKey_KeyPath(t, md, goStruct)
	}
	return nil
}

// Get fetches the value at /openconfig-withlist/model/a/single-key/config/key with a ONCE subscription,
// failing the test fatally if no value is present at the path.
// To avoid a fatal test failure, use the Lookup method instead.
func (n *Model_SingleKey_KeyPath) Get(t testing.TB) uint32 {
	t.Helper()
	return n.Lookup(t).Val(t)
}

// Lookup fetches the values at /openconfig-withlist/model/a/single-key/config/key with a ONCE subscription.
// It returns an empty list if no values are present at the path.
func (n *Model_SingleKey_KeyPathAny) Lookup(t testing.TB) []*QualifiedUint32 {
	t.Helper()
	datapoints, queryPath := genutil.MustGet(t, n)
	datapointGroups, sortedPrefixes := genutil.BundleDatapoints(t, datapoints, uint(len(queryPath.Elem)))

	var data []*QualifiedUint32
	for _, prefix := range sortedPrefixes {
		goStruct := &Model_SingleKey{}
		md, ok := genutil.MustUnmarshal(t, datapointGroups[prefix], GetSchema(), "Model_SingleKey", goStruct, queryPath, true, false)
		if !ok {
			continue
		}
		qv := convertModel_SingleKey_KeyPath(t, md, goStruct)
		data = append(data, qv)
	}
	return data
}

// Get fetches the values at /openconfig-withlist/model/a/single-key/config/key with a ONCE subscription.
func (n *Model_SingleKey_KeyPathAny) Get(t testing.TB) []uint32 {
	t.Helper()
	fulldata := n.Lookup(t)
	var data []uint32
	for _, full := range fulldata {
		data = append(data, full.Val(t))
	}
	return data
}

// Delete deletes the configuration at /openconfig-withlist/model/a/single-key/config/key.
func (n *Model_SingleKey_KeyPath) Delete(t testing.TB) *gpb.SetResponse {
	t.Helper()
	return genutil.Delete(t, n)
}

// BatchDelete buffers a config delete operation at /openconfig-withlist/model/a/single-key/config/key in the given batch object.
func (n *Model_SingleKey_KeyPath) BatchDelete(t testing.TB, b *SetRequestBatch) {
	t.Helper()
	b.BatchDelete(t, n)
}

// Replace replaces the configuration at /openconfig-withlist/model/a/single-key/config/key.
func (n *Model_SingleKey_KeyPath) Replace(t testing.TB, val uint32) *gpb.SetResponse {
	t.Helper()
	return genutil.Replace(t, n, &val)
}

// BatchReplace buffers a config replace operation at /openconfig-withlist/model/a/single-key/config/key in the given batch object.
func (n *Model_SingleKey_KeyPath) BatchReplace(t testing.TB, b *SetRequestBatch, val uint32) {
	t.Helper()
	b.BatchReplace(t, n, &val)
}

// Update updates the configuration at /openconfig-withlist/model/a/single-key/config/key.
func (n *Model_SingleKey_KeyPath) Update(t testing.TB, val uint32) *gpb.SetResponse {
	t.Helper()
	return genutil.Update(t, n, &val)
}

// BatchUpdate buffers a config update operation at /openconfig-withlist/model/a/single-key/config/key in the given batch object.
func (n *Model_SingleKey_KeyPath) BatchUpdate(t testing.TB, b *SetRequestBatch, val uint32) {
	t.Helper()
	b.BatchUpdate(t, n, &val)
}

// convertModel_SingleKey_KeyPath extracts the value of the leaf Key from its parent Model_SingleKey
// and combines the update with an existing Metadata to return a *QualifiedUint32.
func convertModel_SingleKey_KeyPath(t testing.TB, md *genutil.Metadata, parent *Model_SingleKey) *QualifiedUint32 {
	t.Helper()
	qv := &QualifiedUint32{
		Metadata: md,
	}
	val := parent.Key
	if !reflect.ValueOf(val).IsZero() {
		qv.SetVal(*val)
	}
	return qv
}

// Lookup fetches the value at / with a ONCE subscription.
// It returns nil if there is no value present at the path.
func (n *RootPath) Lookup(t testing.TB) *QualifiedRoot {
	t.Helper()
	goStruct := &Root{}
	md, ok := Lookup(t, n, "Root", goStruct, false, false)
	if ok {
		return (&QualifiedRoot{
			Metadata: md,
		}).SetVal(goStruct)
	}
	return nil
}

// Get fetches the value at / with a ONCE subscription,
// failing the test fatally if no value is present at the path.
// To avoid a fatal test failure, use the Lookup method instead.
func (n *RootPath) Get(t testing.TB) *Root {
	t.Helper()
	return n.Lookup(t).Val(t)
}

// Delete deletes the configuration at /.
func (n *RootPath) Delete(t testing.TB) *gpb.SetResponse {
	t.Helper()
	return genutil.Delete(t, n)
}

// BatchDelete buffers a config delete operation at / in the given batch object.
func (n *RootPath) BatchDelete(t testing.TB, b *SetRequestBatch) {
	t.Helper()
	b.BatchDelete(t, n)
}

// Replace replaces the configuration at /.
func (n *RootPath) Replace(t testing.TB, val *Root) *gpb.SetResponse {
	t.Helper()
	return genutil.Replace(t, n, val)
}

// BatchReplace buffers a config replace operation at / in the given batch object.
func (n *RootPath) BatchReplace(t testing.TB, b *SetRequestBatch, val *Root) {
	t.Helper()
	b.BatchReplace(t, n, val)
}

// Update updates the configuration at /.
func (n *RootPath) Update(t testing.TB, val *Root) *gpb.SetResponse {
	t.Helper()
	return genutil.Update(t, n, val)
}

// BatchUpdate buffers a config update operation at / in the given batch object.
func (n *RootPath) BatchUpdate(t testing.TB, b *SetRequestBatch, val *Root) {
	t.Helper()
	b.BatchUpdate(t, n, val)
}

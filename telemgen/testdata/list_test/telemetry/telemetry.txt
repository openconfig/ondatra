package telemetry

// This file contains generated telemetry method augmentations for the
// generated path structs, which makes use of their gNMI paths for making
// ONDATRA telemetry calls.

import (
	"fmt"
	"reflect"
	"sort"
	"strconv"
	"testing"
	"time"

	"google.golang.org/protobuf/proto"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
	"github.com/openconfig/ondatra/telemgen/telemgo"

	gpb "github.com/openconfig/gnmi/proto/gnmi"
)

// WithReplica adds the replica number to the context metadata of the gNMI
// server query.
func (n *RootPath) WithReplica(replica int) *RootPath {
	telemgo.PutReplica(n, replica)
	return n
}

// WithSubscriptionMode specifies the subscription mode in the underlying gNMI
// subscribe.
func (n *RootPath) WithSubscriptionMode(mode gpb.SubscriptionMode) *RootPath {
	telemgo.PutSubscriptionMode(n, mode)
	return n
}

// WithClient allows the user to provide a gNMI client. This allows for creation
// of tests for multiple gNMI clients to a single DUT.
func (n *RootPath) WithClient(c gpb.GNMIClient) *RootPath {
	telemgo.PutClient(n, c)
	return n
}

func binarySliceToFloat32(in []Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// getFull uses gNMI Get to fill the input GoStruct with values at the input path.
func getFull(t testing.TB, n ygot.PathStruct, goStructName string, gs ygot.GoStruct, isLeaf bool) *telemgo.QualifiedType {
	datapoints, queryPath := telemgo.Get(t, n, isLeaf)
	qv, err := telemgo.Unmarshal(t, datapoints, getSchema(), goStructName, gs, queryPath, isLeaf, false)
	if err != nil {
		t.Fatal(err)
	}
	return qv
}

// getSchema return the generated ytypes schema used for unmarshaling datapoints.
func getSchema() *ytypes.Schema {
	return &ytypes.Schema{
		Root:       &Root{},
		SchemaTree: SchemaTree,
		Unmarshal:  Unmarshal,
	}
}

// QualifiedModel is a *Model with a corresponding timestamp.
type QualifiedModel struct {
	*telemgo.QualifiedType
	val *Model // val is the sample value.
}

func (q *QualifiedModel) String() string {
	return telemgo.QualifiedTypeString(q.val, q.QualifiedType)
}

// Val returns the value of the *Model sample, erroring out if not present.
func (q *QualifiedModel) Val(t testing.TB) *Model {
	t.Helper()
	if !q.Present {
		pathStr, err := ygot.PathToString(q.Path)
		if err != nil {
			pathStr = fmt.Sprintf("%v", q.Path.GetElem())
		}
		t.Fatalf("No value present at path %s", pathStr)
	}
	return q.val
}

// SetVal sets the value of the *Model sample.
func (q *QualifiedModel) SetVal(v *Model) *QualifiedModel {
	q.val = v
	return q
}


// QualifiedModel_MultiKey is a *Model_MultiKey with a corresponding timestamp.
type QualifiedModel_MultiKey struct {
	*telemgo.QualifiedType
	val *Model_MultiKey // val is the sample value.
}

func (q *QualifiedModel_MultiKey) String() string {
	return telemgo.QualifiedTypeString(q.val, q.QualifiedType)
}

// Val returns the value of the *Model_MultiKey sample, erroring out if not present.
func (q *QualifiedModel_MultiKey) Val(t testing.TB) *Model_MultiKey {
	t.Helper()
	if !q.Present {
		pathStr, err := ygot.PathToString(q.Path)
		if err != nil {
			pathStr = fmt.Sprintf("%v", q.Path.GetElem())
		}
		t.Fatalf("No value present at path %s", pathStr)
	}
	return q.val
}

// SetVal sets the value of the *Model_MultiKey sample.
func (q *QualifiedModel_MultiKey) SetVal(v *Model_MultiKey) *QualifiedModel_MultiKey {
	q.val = v
	return q
}


// QualifiedModel_SingleKey is a *Model_SingleKey with a corresponding timestamp.
type QualifiedModel_SingleKey struct {
	*telemgo.QualifiedType
	val *Model_SingleKey // val is the sample value.
}

func (q *QualifiedModel_SingleKey) String() string {
	return telemgo.QualifiedTypeString(q.val, q.QualifiedType)
}

// Val returns the value of the *Model_SingleKey sample, erroring out if not present.
func (q *QualifiedModel_SingleKey) Val(t testing.TB) *Model_SingleKey {
	t.Helper()
	if !q.Present {
		pathStr, err := ygot.PathToString(q.Path)
		if err != nil {
			pathStr = fmt.Sprintf("%v", q.Path.GetElem())
		}
		t.Fatalf("No value present at path %s", pathStr)
	}
	return q.val
}

// SetVal sets the value of the *Model_SingleKey sample.
func (q *QualifiedModel_SingleKey) SetVal(v *Model_SingleKey) *QualifiedModel_SingleKey {
	q.val = v
	return q
}


// QualifiedRoot is a *Root with a corresponding timestamp.
type QualifiedRoot struct {
	*telemgo.QualifiedType
	val *Root // val is the sample value.
}

func (q *QualifiedRoot) String() string {
	return telemgo.QualifiedTypeString(q.val, q.QualifiedType)
}

// Val returns the value of the *Root sample, erroring out if not present.
func (q *QualifiedRoot) Val(t testing.TB) *Root {
	t.Helper()
	if !q.Present {
		pathStr, err := ygot.PathToString(q.Path)
		if err != nil {
			pathStr = fmt.Sprintf("%v", q.Path.GetElem())
		}
		t.Fatalf("No value present at path %s", pathStr)
	}
	return q.val
}

// SetVal sets the value of the *Root sample.
func (q *QualifiedRoot) SetVal(v *Root) *QualifiedRoot {
	q.val = v
	return q
}


// QualifiedUint32 is a uint32 with a corresponding timestamp.
type QualifiedUint32 struct {
	*telemgo.QualifiedType
	val uint32 // val is the sample value.
}

func (q *QualifiedUint32) String() string {
	return telemgo.QualifiedTypeString(q.val, q.QualifiedType)
}

// Val returns the value of the uint32 sample, erroring out if not present.
func (q *QualifiedUint32) Val(t testing.TB) uint32 {
	t.Helper()
	if !q.Present {
		pathStr, err := ygot.PathToString(q.Path)
		if err != nil {
			pathStr = fmt.Sprintf("%v", q.Path.GetElem())
		}
		t.Fatalf("No value present at path %s", pathStr)
	}
	return q.val
}

// SetVal sets the value of the uint32 sample.
func (q *QualifiedUint32) SetVal(v uint32) *QualifiedUint32 {
	q.val = v
	return q
}


// CollectionUint32 is a telemetry Collection whose Await method returns a slice of uint32 samples.
type CollectionUint32 struct {
	c *CollectionUntilUint32
}

// Await blocks for the telemetry collection to be complete, and then returns the slice of samples received.
func (u *CollectionUint32) Await(t testing.TB) []*QualifiedUint32 {
	t.Helper()
	data, _ := u.c.Await(t)
	return data
}

// CollectionUntilUint32 is a telemetry Collection whose Await method returns a slice of uint32 samples.
type CollectionUntilUint32 struct {
	c *telemgo.Collection
}

// Await blocks for the telemetry collection to be complete or the predicate to be true whichever is first.
// The received data and the status of the predicate are returned.
func (u *CollectionUntilUint32) Await(t testing.TB) ([]*QualifiedUint32, bool) {
	t.Helper()
	var ret []*QualifiedUint32
	updates, predTrue := u.c.Await(t)
	for _, upd := range updates {
		ret = append(ret, upd.(*QualifiedUint32))
	}
	return ret, predTrue
}

// QualifiedUint64 is a uint64 with a corresponding timestamp.
type QualifiedUint64 struct {
	*telemgo.QualifiedType
	val uint64 // val is the sample value.
}

func (q *QualifiedUint64) String() string {
	return telemgo.QualifiedTypeString(q.val, q.QualifiedType)
}

// Val returns the value of the uint64 sample, erroring out if not present.
func (q *QualifiedUint64) Val(t testing.TB) uint64 {
	t.Helper()
	if !q.Present {
		pathStr, err := ygot.PathToString(q.Path)
		if err != nil {
			pathStr = fmt.Sprintf("%v", q.Path.GetElem())
		}
		t.Fatalf("No value present at path %s", pathStr)
	}
	return q.val
}

// SetVal sets the value of the uint64 sample.
func (q *QualifiedUint64) SetVal(v uint64) *QualifiedUint64 {
	q.val = v
	return q
}


// CollectionUint64 is a telemetry Collection whose Await method returns a slice of uint64 samples.
type CollectionUint64 struct {
	c *CollectionUntilUint64
}

// Await blocks for the telemetry collection to be complete, and then returns the slice of samples received.
func (u *CollectionUint64) Await(t testing.TB) []*QualifiedUint64 {
	t.Helper()
	data, _ := u.c.Await(t)
	return data
}

// CollectionUntilUint64 is a telemetry Collection whose Await method returns a slice of uint64 samples.
type CollectionUntilUint64 struct {
	c *telemgo.Collection
}

// Await blocks for the telemetry collection to be complete or the predicate to be true whichever is first.
// The received data and the status of the predicate are returned.
func (u *CollectionUntilUint64) Await(t testing.TB) ([]*QualifiedUint64, bool) {
	t.Helper()
	var ret []*QualifiedUint64
	updates, predTrue := u.c.Await(t)
	for _, upd := range updates {
		ret = append(ret, upd.(*QualifiedUint64))
	}
	return ret, predTrue
}

// GetFull retrieves a sample for /openconfig-withlist/model.
func (n *ModelPath) GetFull(t testing.TB) *QualifiedModel {
	t.Helper()
	goStruct := &Model{}
	ret := &QualifiedModel{
		QualifiedType: getFull(t, n, "Model", goStruct, false),
	}
	if ret.IsPresent() {
		ret.SetVal(goStruct)
	}
	return ret
}

// Get retrieves a value sample for /openconfig-withlist/model, erroring out if it is not present.
func (n *ModelPath) Get(t testing.TB) *Model {
	t.Helper()
	return n.GetFull(t).Val(t)
}

// GetFull retrieves a list of samples for /openconfig-withlist/model.
func (n *ModelPathAny) GetFull(t testing.TB) []*QualifiedModel {
	t.Helper()
	datapoints, queryPath := telemgo.Get(t, n, false)
	datapointGroups, sortedPrefixes := telemgo.BundleDatapoints(t, datapoints, uint(len(queryPath.Elem)), false)

	var data []*QualifiedModel
	for _, prefix := range sortedPrefixes {
		goStruct := &Model{}
		qt, err := telemgo.Unmarshal(t, datapointGroups[prefix], getSchema(), "Model", goStruct, queryPath, false, false)
		if err != nil {
			t.Fatal(err)
		}
		if !qt.IsPresent() {
			continue
		}
		qv := (&QualifiedModel{
			QualifiedType: qt,
		}).SetVal(goStruct)
		data = append(data, qv)
	}
	return data
}

// Get retrieves a list of value samples for /openconfig-withlist/model.
func (n *ModelPathAny) Get(t testing.TB) []*Model {
	t.Helper()
	fulldata := n.GetFull(t)
	var data []*Model
	for _, full := range fulldata {
		data = append(data, full.Val(t))
	}
	return data
}

// GetFull retrieves a sample for /openconfig-withlist/model/b/multi-key.
func (n *Model_MultiKeyPath) GetFull(t testing.TB) *QualifiedModel_MultiKey {
	t.Helper()
	goStruct := &Model_MultiKey{}
	ret := &QualifiedModel_MultiKey{
		QualifiedType: getFull(t, n, "Model_MultiKey", goStruct, false),
	}
	if ret.IsPresent() {
		ret.SetVal(goStruct)
	}
	return ret
}

// Get retrieves a value sample for /openconfig-withlist/model/b/multi-key, erroring out if it is not present.
func (n *Model_MultiKeyPath) Get(t testing.TB) *Model_MultiKey {
	t.Helper()
	return n.GetFull(t).Val(t)
}

// GetFull retrieves a list of samples for /openconfig-withlist/model/b/multi-key.
func (n *Model_MultiKeyPathAny) GetFull(t testing.TB) []*QualifiedModel_MultiKey {
	t.Helper()
	datapoints, queryPath := telemgo.Get(t, n, false)
	datapointGroups, sortedPrefixes := telemgo.BundleDatapoints(t, datapoints, uint(len(queryPath.Elem)), false)

	var data []*QualifiedModel_MultiKey
	for _, prefix := range sortedPrefixes {
		goStruct := &Model_MultiKey{}
		qt, err := telemgo.Unmarshal(t, datapointGroups[prefix], getSchema(), "Model_MultiKey", goStruct, queryPath, false, false)
		if err != nil {
			t.Fatal(err)
		}
		if !qt.IsPresent() {
			continue
		}
		qv := (&QualifiedModel_MultiKey{
			QualifiedType: qt,
		}).SetVal(goStruct)
		data = append(data, qv)
	}
	return data
}

// Get retrieves a list of value samples for /openconfig-withlist/model/b/multi-key.
func (n *Model_MultiKeyPathAny) Get(t testing.TB) []*Model_MultiKey {
	t.Helper()
	fulldata := n.GetFull(t)
	var data []*Model_MultiKey
	for _, full := range fulldata {
		data = append(data, full.Val(t))
	}
	return data
}

// GetFull retrieves a sample for /openconfig-withlist/model/b/multi-key/state/key1.
func (n *Model_MultiKey_Key1Path) GetFull(t testing.TB) *QualifiedUint32 {
	t.Helper()
	goStruct := &Model_MultiKey{}
	ret := &QualifiedUint32{
		QualifiedType: getFull(t, n, "Model_MultiKey", goStruct, true),
	}
	return convertModel_MultiKey_Key1Path(t, ret.QualifiedType, goStruct)
}

// Get retrieves a value sample for /openconfig-withlist/model/b/multi-key/state/key1, erroring out if it is not present.
func (n *Model_MultiKey_Key1Path) Get(t testing.TB) uint32 {
	t.Helper()
	return n.GetFull(t).Val(t)
}

// GetFull retrieves a list of samples for /openconfig-withlist/model/b/multi-key/state/key1.
func (n *Model_MultiKey_Key1PathAny) GetFull(t testing.TB) []*QualifiedUint32 {
	t.Helper()
	datapoints, queryPath := telemgo.Get(t, n, false)
	datapointGroups, sortedPrefixes := telemgo.BundleDatapoints(t, datapoints, uint(len(queryPath.Elem)), true)

	var data []*QualifiedUint32
	for _, prefix := range sortedPrefixes {
		goStruct := &Model_MultiKey{}
		qt, err := telemgo.Unmarshal(t, datapointGroups[prefix], getSchema(), "Model_MultiKey", goStruct, queryPath, true, false)
		if err != nil {
			t.Fatal(err)
		}
		qv := convertModel_MultiKey_Key1Path(t, qt, goStruct)
		data = append(data, qv)
	}
	return data
}

// Get retrieves a list of value samples for /openconfig-withlist/model/b/multi-key/state/key1.
func (n *Model_MultiKey_Key1PathAny) Get(t testing.TB) []uint32 {
	t.Helper()
	fulldata := n.GetFull(t)
	var data []uint32
	for _, full := range fulldata {
		data = append(data, full.Val(t))
	}
	return data
}

// Collect retrieves a Collection sample for /openconfig-withlist/model/b/multi-key/state/key1.
func (n *Model_MultiKey_Key1Path) Collect(t testing.TB, duration time.Duration) *CollectionUint32 {
	t.Helper()
	return &CollectionUint32{
		c: n.CollectUntil(t, duration, func(*QualifiedUint32) bool { return false }),
	}
}

// CollectUntil retrieves a Collection sample for /openconfig-withlist/model/b/multi-key/state/key1 and evaluates the predicate on all samples.
func (n *Model_MultiKey_Key1Path) CollectUntil(t testing.TB, duration time.Duration, predicate func(val *QualifiedUint32) bool) *CollectionUntilUint32 {
	t.Helper()
	return &CollectionUntilUint32{
		c: telemgo.CollectUntil(t, n, duration, func(upd *telemgo.DataPoint) (telemgo.QualifiedValue, error) {
			parentPtr := &Model_MultiKey{}
			// queryPath is not needed on leaves because full gNMI path is always returned.
			qv, err := telemgo.Unmarshal(t, []*telemgo.DataPoint{upd}, getSchema(), "Model_MultiKey", parentPtr, nil, true, false)
			if err != nil || qv.ComplianceErrors != nil {
				return nil, fmt.Errorf("unmarshal err: %v, complianceErrs: %v", err, qv.ComplianceErrors)
			}
			return convertModel_MultiKey_Key1Path(t, qv, parentPtr), nil
		},
		func(qualVal telemgo.QualifiedValue) bool {
			val, ok := qualVal.(*QualifiedUint32)
			return ok && predicate(val)
		}),
	}
}

// Await waits until /openconfig-withlist/model/b/multi-key/state/key1 is deep-equal to the val and returns all received values.
// If the timeout is exceeded, the test fails fatally.
// To avoid a fatal failure or wait for a generic predicate, use CollectUntil.
func (n *Model_MultiKey_Key1Path) Await(t testing.TB, duration time.Duration, val uint32) []*QualifiedUint32 {
	t.Helper()
	vals, success := n.CollectUntil(t, duration, func(data *QualifiedUint32) bool {
		return data.IsPresent() && reflect.DeepEqual(data.Val(t), val)
	}).Await(t)
	if !success {
		if len(vals) == 0 {
			t.Fatalf("Await() at /openconfig-withlist/model/b/multi-key/state/key1 failed: no values received")
		}
		t.Fatalf("Await() at /openconfig-withlist/model/b/multi-key/state/key1 failed: want %v, last got %v", val, vals[len(vals) - 1])
	}
	return vals
}

// Collect retrieves a Collection sample for /openconfig-withlist/model/b/multi-key/state/key1.
func (n *Model_MultiKey_Key1PathAny) Collect(t testing.TB, duration time.Duration) *CollectionUint32 {
	t.Helper()
	return &CollectionUint32{
		c: n.CollectUntil(t, duration, func(*QualifiedUint32) bool { return false }),
	}
}

// CollectUntil retrieves a Collection sample for /openconfig-withlist/model/b/multi-key/state/key1 and evaluates the predicate on all samples.
func (n *Model_MultiKey_Key1PathAny) CollectUntil(t testing.TB, duration time.Duration, predicate func(val *QualifiedUint32) bool) *CollectionUntilUint32 {
	t.Helper()
	return &CollectionUntilUint32{
		c: telemgo.CollectUntil(t, n, duration, func(upd *telemgo.DataPoint) (telemgo.QualifiedValue, error) {
			parentPtr := &Model_MultiKey{}
			// queryPath is not needed on leaves because full gNMI path is always returned.
			qv, err := telemgo.Unmarshal(t, []*telemgo.DataPoint{upd}, getSchema(), "Model_MultiKey", parentPtr, nil, true, false)
			if err != nil || qv.ComplianceErrors != nil {
				return nil, fmt.Errorf("unmarshal err: %v, complianceErrs: %v", err, qv.ComplianceErrors)
			}
			return convertModel_MultiKey_Key1Path(t, qv, parentPtr), nil
		},
		func(qualVal telemgo.QualifiedValue) bool {
			val, ok := qualVal.(*QualifiedUint32)
			return ok && predicate(val)
		}),
	}
}

// convertModel_MultiKey_Key1Path extracts the value of the leaf Key1 from its parent Model_MultiKey
// and combines the update with an existing QualifiedType to return a *QualifiedUint32.
func convertModel_MultiKey_Key1Path(t testing.TB, qt *telemgo.QualifiedType, parent *Model_MultiKey) *QualifiedUint32 {
	t.Helper()
	if qt.ComplianceErrors != nil {
		t.Fatal(qt.ComplianceErrors)
	}
	qv := &QualifiedUint32{
		QualifiedType: qt,
	}
	val := parent.Key1
	if !reflect.ValueOf(val).IsZero() {
		qv.Present = true
		qv.SetVal(*val)
	} else {
		qv.Present = false
	}
	return qv
}

// GetFull retrieves a sample for /openconfig-withlist/model/b/multi-key/state/key2.
func (n *Model_MultiKey_Key2Path) GetFull(t testing.TB) *QualifiedUint64 {
	t.Helper()
	goStruct := &Model_MultiKey{}
	ret := &QualifiedUint64{
		QualifiedType: getFull(t, n, "Model_MultiKey", goStruct, true),
	}
	return convertModel_MultiKey_Key2Path(t, ret.QualifiedType, goStruct)
}

// Get retrieves a value sample for /openconfig-withlist/model/b/multi-key/state/key2, erroring out if it is not present.
func (n *Model_MultiKey_Key2Path) Get(t testing.TB) uint64 {
	t.Helper()
	return n.GetFull(t).Val(t)
}

// GetFull retrieves a list of samples for /openconfig-withlist/model/b/multi-key/state/key2.
func (n *Model_MultiKey_Key2PathAny) GetFull(t testing.TB) []*QualifiedUint64 {
	t.Helper()
	datapoints, queryPath := telemgo.Get(t, n, false)
	datapointGroups, sortedPrefixes := telemgo.BundleDatapoints(t, datapoints, uint(len(queryPath.Elem)), true)

	var data []*QualifiedUint64
	for _, prefix := range sortedPrefixes {
		goStruct := &Model_MultiKey{}
		qt, err := telemgo.Unmarshal(t, datapointGroups[prefix], getSchema(), "Model_MultiKey", goStruct, queryPath, true, false)
		if err != nil {
			t.Fatal(err)
		}
		qv := convertModel_MultiKey_Key2Path(t, qt, goStruct)
		data = append(data, qv)
	}
	return data
}

// Get retrieves a list of value samples for /openconfig-withlist/model/b/multi-key/state/key2.
func (n *Model_MultiKey_Key2PathAny) Get(t testing.TB) []uint64 {
	t.Helper()
	fulldata := n.GetFull(t)
	var data []uint64
	for _, full := range fulldata {
		data = append(data, full.Val(t))
	}
	return data
}

// Collect retrieves a Collection sample for /openconfig-withlist/model/b/multi-key/state/key2.
func (n *Model_MultiKey_Key2Path) Collect(t testing.TB, duration time.Duration) *CollectionUint64 {
	t.Helper()
	return &CollectionUint64{
		c: n.CollectUntil(t, duration, func(*QualifiedUint64) bool { return false }),
	}
}

// CollectUntil retrieves a Collection sample for /openconfig-withlist/model/b/multi-key/state/key2 and evaluates the predicate on all samples.
func (n *Model_MultiKey_Key2Path) CollectUntil(t testing.TB, duration time.Duration, predicate func(val *QualifiedUint64) bool) *CollectionUntilUint64 {
	t.Helper()
	return &CollectionUntilUint64{
		c: telemgo.CollectUntil(t, n, duration, func(upd *telemgo.DataPoint) (telemgo.QualifiedValue, error) {
			parentPtr := &Model_MultiKey{}
			// queryPath is not needed on leaves because full gNMI path is always returned.
			qv, err := telemgo.Unmarshal(t, []*telemgo.DataPoint{upd}, getSchema(), "Model_MultiKey", parentPtr, nil, true, false)
			if err != nil || qv.ComplianceErrors != nil {
				return nil, fmt.Errorf("unmarshal err: %v, complianceErrs: %v", err, qv.ComplianceErrors)
			}
			return convertModel_MultiKey_Key2Path(t, qv, parentPtr), nil
		},
		func(qualVal telemgo.QualifiedValue) bool {
			val, ok := qualVal.(*QualifiedUint64)
			return ok && predicate(val)
		}),
	}
}

// Await waits until /openconfig-withlist/model/b/multi-key/state/key2 is deep-equal to the val and returns all received values.
// If the timeout is exceeded, the test fails fatally.
// To avoid a fatal failure or wait for a generic predicate, use CollectUntil.
func (n *Model_MultiKey_Key2Path) Await(t testing.TB, duration time.Duration, val uint64) []*QualifiedUint64 {
	t.Helper()
	vals, success := n.CollectUntil(t, duration, func(data *QualifiedUint64) bool {
		return data.IsPresent() && reflect.DeepEqual(data.Val(t), val)
	}).Await(t)
	if !success {
		if len(vals) == 0 {
			t.Fatalf("Await() at /openconfig-withlist/model/b/multi-key/state/key2 failed: no values received")
		}
		t.Fatalf("Await() at /openconfig-withlist/model/b/multi-key/state/key2 failed: want %v, last got %v", val, vals[len(vals) - 1])
	}
	return vals
}

// Collect retrieves a Collection sample for /openconfig-withlist/model/b/multi-key/state/key2.
func (n *Model_MultiKey_Key2PathAny) Collect(t testing.TB, duration time.Duration) *CollectionUint64 {
	t.Helper()
	return &CollectionUint64{
		c: n.CollectUntil(t, duration, func(*QualifiedUint64) bool { return false }),
	}
}

// CollectUntil retrieves a Collection sample for /openconfig-withlist/model/b/multi-key/state/key2 and evaluates the predicate on all samples.
func (n *Model_MultiKey_Key2PathAny) CollectUntil(t testing.TB, duration time.Duration, predicate func(val *QualifiedUint64) bool) *CollectionUntilUint64 {
	t.Helper()
	return &CollectionUntilUint64{
		c: telemgo.CollectUntil(t, n, duration, func(upd *telemgo.DataPoint) (telemgo.QualifiedValue, error) {
			parentPtr := &Model_MultiKey{}
			// queryPath is not needed on leaves because full gNMI path is always returned.
			qv, err := telemgo.Unmarshal(t, []*telemgo.DataPoint{upd}, getSchema(), "Model_MultiKey", parentPtr, nil, true, false)
			if err != nil || qv.ComplianceErrors != nil {
				return nil, fmt.Errorf("unmarshal err: %v, complianceErrs: %v", err, qv.ComplianceErrors)
			}
			return convertModel_MultiKey_Key2Path(t, qv, parentPtr), nil
		},
		func(qualVal telemgo.QualifiedValue) bool {
			val, ok := qualVal.(*QualifiedUint64)
			return ok && predicate(val)
		}),
	}
}

// convertModel_MultiKey_Key2Path extracts the value of the leaf Key2 from its parent Model_MultiKey
// and combines the update with an existing QualifiedType to return a *QualifiedUint64.
func convertModel_MultiKey_Key2Path(t testing.TB, qt *telemgo.QualifiedType, parent *Model_MultiKey) *QualifiedUint64 {
	t.Helper()
	if qt.ComplianceErrors != nil {
		t.Fatal(qt.ComplianceErrors)
	}
	qv := &QualifiedUint64{
		QualifiedType: qt,
	}
	val := parent.Key2
	if !reflect.ValueOf(val).IsZero() {
		qv.Present = true
		qv.SetVal(*val)
	} else {
		qv.Present = false
	}
	return qv
}

// GetFull retrieves a sample for /openconfig-withlist/model/a/single-key.
func (n *Model_SingleKeyPath) GetFull(t testing.TB) *QualifiedModel_SingleKey {
	t.Helper()
	goStruct := &Model_SingleKey{}
	ret := &QualifiedModel_SingleKey{
		QualifiedType: getFull(t, n, "Model_SingleKey", goStruct, false),
	}
	if ret.IsPresent() {
		ret.SetVal(goStruct)
	}
	return ret
}

// Get retrieves a value sample for /openconfig-withlist/model/a/single-key, erroring out if it is not present.
func (n *Model_SingleKeyPath) Get(t testing.TB) *Model_SingleKey {
	t.Helper()
	return n.GetFull(t).Val(t)
}

// GetFull retrieves a list of samples for /openconfig-withlist/model/a/single-key.
func (n *Model_SingleKeyPathAny) GetFull(t testing.TB) []*QualifiedModel_SingleKey {
	t.Helper()
	datapoints, queryPath := telemgo.Get(t, n, false)
	datapointGroups, sortedPrefixes := telemgo.BundleDatapoints(t, datapoints, uint(len(queryPath.Elem)), false)

	var data []*QualifiedModel_SingleKey
	for _, prefix := range sortedPrefixes {
		goStruct := &Model_SingleKey{}
		qt, err := telemgo.Unmarshal(t, datapointGroups[prefix], getSchema(), "Model_SingleKey", goStruct, queryPath, false, false)
		if err != nil {
			t.Fatal(err)
		}
		if !qt.IsPresent() {
			continue
		}
		qv := (&QualifiedModel_SingleKey{
			QualifiedType: qt,
		}).SetVal(goStruct)
		data = append(data, qv)
	}
	return data
}

// Get retrieves a list of value samples for /openconfig-withlist/model/a/single-key.
func (n *Model_SingleKeyPathAny) Get(t testing.TB) []*Model_SingleKey {
	t.Helper()
	fulldata := n.GetFull(t)
	var data []*Model_SingleKey
	for _, full := range fulldata {
		data = append(data, full.Val(t))
	}
	return data
}

// GetFull retrieves a sample for /openconfig-withlist/model/a/single-key/state/key.
func (n *Model_SingleKey_KeyPath) GetFull(t testing.TB) *QualifiedUint32 {
	t.Helper()
	goStruct := &Model_SingleKey{}
	ret := &QualifiedUint32{
		QualifiedType: getFull(t, n, "Model_SingleKey", goStruct, true),
	}
	return convertModel_SingleKey_KeyPath(t, ret.QualifiedType, goStruct)
}

// Get retrieves a value sample for /openconfig-withlist/model/a/single-key/state/key, erroring out if it is not present.
func (n *Model_SingleKey_KeyPath) Get(t testing.TB) uint32 {
	t.Helper()
	return n.GetFull(t).Val(t)
}

// GetFull retrieves a list of samples for /openconfig-withlist/model/a/single-key/state/key.
func (n *Model_SingleKey_KeyPathAny) GetFull(t testing.TB) []*QualifiedUint32 {
	t.Helper()
	datapoints, queryPath := telemgo.Get(t, n, false)
	datapointGroups, sortedPrefixes := telemgo.BundleDatapoints(t, datapoints, uint(len(queryPath.Elem)), true)

	var data []*QualifiedUint32
	for _, prefix := range sortedPrefixes {
		goStruct := &Model_SingleKey{}
		qt, err := telemgo.Unmarshal(t, datapointGroups[prefix], getSchema(), "Model_SingleKey", goStruct, queryPath, true, false)
		if err != nil {
			t.Fatal(err)
		}
		qv := convertModel_SingleKey_KeyPath(t, qt, goStruct)
		data = append(data, qv)
	}
	return data
}

// Get retrieves a list of value samples for /openconfig-withlist/model/a/single-key/state/key.
func (n *Model_SingleKey_KeyPathAny) Get(t testing.TB) []uint32 {
	t.Helper()
	fulldata := n.GetFull(t)
	var data []uint32
	for _, full := range fulldata {
		data = append(data, full.Val(t))
	}
	return data
}

// Collect retrieves a Collection sample for /openconfig-withlist/model/a/single-key/state/key.
func (n *Model_SingleKey_KeyPath) Collect(t testing.TB, duration time.Duration) *CollectionUint32 {
	t.Helper()
	return &CollectionUint32{
		c: n.CollectUntil(t, duration, func(*QualifiedUint32) bool { return false }),
	}
}

// CollectUntil retrieves a Collection sample for /openconfig-withlist/model/a/single-key/state/key and evaluates the predicate on all samples.
func (n *Model_SingleKey_KeyPath) CollectUntil(t testing.TB, duration time.Duration, predicate func(val *QualifiedUint32) bool) *CollectionUntilUint32 {
	t.Helper()
	return &CollectionUntilUint32{
		c: telemgo.CollectUntil(t, n, duration, func(upd *telemgo.DataPoint) (telemgo.QualifiedValue, error) {
			parentPtr := &Model_SingleKey{}
			// queryPath is not needed on leaves because full gNMI path is always returned.
			qv, err := telemgo.Unmarshal(t, []*telemgo.DataPoint{upd}, getSchema(), "Model_SingleKey", parentPtr, nil, true, false)
			if err != nil || qv.ComplianceErrors != nil {
				return nil, fmt.Errorf("unmarshal err: %v, complianceErrs: %v", err, qv.ComplianceErrors)
			}
			return convertModel_SingleKey_KeyPath(t, qv, parentPtr), nil
		},
		func(qualVal telemgo.QualifiedValue) bool {
			val, ok := qualVal.(*QualifiedUint32)
			return ok && predicate(val)
		}),
	}
}

// Await waits until /openconfig-withlist/model/a/single-key/state/key is deep-equal to the val and returns all received values.
// If the timeout is exceeded, the test fails fatally.
// To avoid a fatal failure or wait for a generic predicate, use CollectUntil.
func (n *Model_SingleKey_KeyPath) Await(t testing.TB, duration time.Duration, val uint32) []*QualifiedUint32 {
	t.Helper()
	vals, success := n.CollectUntil(t, duration, func(data *QualifiedUint32) bool {
		return data.IsPresent() && reflect.DeepEqual(data.Val(t), val)
	}).Await(t)
	if !success {
		if len(vals) == 0 {
			t.Fatalf("Await() at /openconfig-withlist/model/a/single-key/state/key failed: no values received")
		}
		t.Fatalf("Await() at /openconfig-withlist/model/a/single-key/state/key failed: want %v, last got %v", val, vals[len(vals) - 1])
	}
	return vals
}

// Collect retrieves a Collection sample for /openconfig-withlist/model/a/single-key/state/key.
func (n *Model_SingleKey_KeyPathAny) Collect(t testing.TB, duration time.Duration) *CollectionUint32 {
	t.Helper()
	return &CollectionUint32{
		c: n.CollectUntil(t, duration, func(*QualifiedUint32) bool { return false }),
	}
}

// CollectUntil retrieves a Collection sample for /openconfig-withlist/model/a/single-key/state/key and evaluates the predicate on all samples.
func (n *Model_SingleKey_KeyPathAny) CollectUntil(t testing.TB, duration time.Duration, predicate func(val *QualifiedUint32) bool) *CollectionUntilUint32 {
	t.Helper()
	return &CollectionUntilUint32{
		c: telemgo.CollectUntil(t, n, duration, func(upd *telemgo.DataPoint) (telemgo.QualifiedValue, error) {
			parentPtr := &Model_SingleKey{}
			// queryPath is not needed on leaves because full gNMI path is always returned.
			qv, err := telemgo.Unmarshal(t, []*telemgo.DataPoint{upd}, getSchema(), "Model_SingleKey", parentPtr, nil, true, false)
			if err != nil || qv.ComplianceErrors != nil {
				return nil, fmt.Errorf("unmarshal err: %v, complianceErrs: %v", err, qv.ComplianceErrors)
			}
			return convertModel_SingleKey_KeyPath(t, qv, parentPtr), nil
		},
		func(qualVal telemgo.QualifiedValue) bool {
			val, ok := qualVal.(*QualifiedUint32)
			return ok && predicate(val)
		}),
	}
}

// convertModel_SingleKey_KeyPath extracts the value of the leaf Key from its parent Model_SingleKey
// and combines the update with an existing QualifiedType to return a *QualifiedUint32.
func convertModel_SingleKey_KeyPath(t testing.TB, qt *telemgo.QualifiedType, parent *Model_SingleKey) *QualifiedUint32 {
	t.Helper()
	if qt.ComplianceErrors != nil {
		t.Fatal(qt.ComplianceErrors)
	}
	qv := &QualifiedUint32{
		QualifiedType: qt,
	}
	val := parent.Key
	if !reflect.ValueOf(val).IsZero() {
		qv.Present = true
		qv.SetVal(*val)
	} else {
		qv.Present = false
	}
	return qv
}

// GetFull retrieves a sample for /.
func (n *RootPath) GetFull(t testing.TB) *QualifiedRoot {
	t.Helper()
	goStruct := &Root{}
	ret := &QualifiedRoot{
		QualifiedType: getFull(t, n, "Root", goStruct, false),
	}
	if ret.IsPresent() {
		ret.SetVal(goStruct)
	}
	return ret
}

// Get retrieves a value sample for /, erroring out if it is not present.
func (n *RootPath) Get(t testing.TB) *Root {
	t.Helper()
	return n.GetFull(t).Val(t)
}

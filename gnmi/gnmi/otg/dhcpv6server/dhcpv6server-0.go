/*
Package dhcpv6server is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.20)
using the following YANG input files:
  - models-yang/models/bgp/open-traffic-generator-bgp.yang
  - models-yang/models/dhcp/v4client/open-traffic-generator-dhcpv4client.yang
  - models-yang/models/dhcp/v4server/open-traffic-generator-dhcpv4server.yang
  - models-yang/models/dhcp/v6client/open-traffic-generator-dhcpv6client.yang
  - models-yang/models/dhcp/v6server/open-traffic-generator-dhcpv6server.yang
  - models-yang/models/discovery/open-traffic-generator-discovery.yang
  - models-yang/models/discovery/open-traffic-generator-discovery-interfaces.yang
  - models-yang/models/flow/open-traffic-generator-flow.yang
  - models-yang/models/interface/open-traffic-generator-port.yang
  - models-yang/models/isis/open-traffic-generator-isis.yang
  - models-yang/models/lacp/open-traffic-generator-lacp.yang
  - models-yang/models/lag/open-traffic-generator-lag.yang
  - models-yang/models/lldp/open-traffic-generator-lldp.yang
  - models-yang/models/ospfv2/open-traffic-generator-ospfv2.yang
  - models-yang/models/ospfv3/open-traffic-generator-ospfv3.yang
  - models-yang/models/platform/open-traffic-generator-platform.yang
  - models-yang/models/rsvp/open-traffic-generator-rsvp.yang
  - models-yang/models/types/open-traffic-generator-types.yang

Imported modules were sourced from:
  - models-yang/models/...
*/
package dhcpv6server

import (
	oc "github.com/openconfig/ondatra/gnmi/otg"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Dhcpv6Server_NamePath represents the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/name YANG schema element.
type Dhcpv6Server_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv6Server_NamePathAny represents the wildcard version of the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/name YANG schema element.
type Dhcpv6Server_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "state/name"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/name"
func (n *Dhcpv6Server_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Dhcpv6Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Dhcpv6Server).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "state/name"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/name"
func (n *Dhcpv6Server_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Dhcpv6Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Dhcpv6Server).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *Dhcpv6Server_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Dhcpv6Server",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Dhcpv6Server).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *Dhcpv6Server_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Dhcpv6Server",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Dhcpv6Server).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv6ServerPath represents the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server YANG schema element.
type Dhcpv6ServerPath struct {
	*ygnmi.NodePath
}

// Dhcpv6ServerPathAny represents the wildcard version of the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server YANG schema element.
type Dhcpv6ServerPathAny struct {
	*ygnmi.NodePath
}

// Dhcpv6ServerPathMap represents the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server YANG schema element.
type Dhcpv6ServerPathMap struct {
	*ygnmi.NodePath
}

// Dhcpv6ServerPathMapAny represents the wildcard version of the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server YANG schema element.
type Dhcpv6ServerPathMapAny struct {
	*ygnmi.NodePath
}

// Counters (container): Counters of an individual DHCPv6 session.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "state/counters"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters"
func (n *Dhcpv6ServerPath) Counters() *Dhcpv6Server_CountersPath {
	ps := &Dhcpv6Server_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Counters of an individual DHCPv6 session.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "state/counters"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters"
func (n *Dhcpv6ServerPathAny) Counters() *Dhcpv6Server_CountersPathAny {
	ps := &Dhcpv6Server_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Leases (container): This sub-module describes a YANG model for
// the Host allocated status of a DHCPv6 Server
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "state/leases"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/leases"
func (n *Dhcpv6ServerPath) Leases() *Dhcpv6Server_LeasesPath {
	ps := &Dhcpv6Server_LeasesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "leases"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Leases (container): This sub-module describes a YANG model for
// the Host allocated status of a DHCPv6 Server
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "state/leases"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/leases"
func (n *Dhcpv6ServerPathAny) Leases() *Dhcpv6Server_LeasesPathAny {
	ps := &Dhcpv6Server_LeasesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "leases"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Name (leaf): An arbitrary name of the DHCPv6 Server determined by the OTG
// configuration.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "*/name"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/*/name"
func (n *Dhcpv6ServerPath) Name() *Dhcpv6Server_NamePath {
	ps := &Dhcpv6Server_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): An arbitrary name of the DHCPv6 Server determined by the OTG
// configuration.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "*/name"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/*/name"
func (n *Dhcpv6ServerPathAny) Name() *Dhcpv6Server_NamePathAny {
	ps := &Dhcpv6Server_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *Dhcpv6ServerPath) State() ygnmi.SingletonQuery[*oc.Dhcpv6Server] {
	return ygnmi.NewSingletonQuery[*oc.Dhcpv6Server](
		"Dhcpv6Server",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Dhcpv6ServerPathAny) State() ygnmi.WildcardQuery[*oc.Dhcpv6Server] {
	return ygnmi.NewWildcardQuery[*oc.Dhcpv6Server](
		"Dhcpv6Server",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv6Server_Counters_AdvertisementsSentPath represents the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/counters/advertisements-sent YANG schema element.
type Dhcpv6Server_Counters_AdvertisementsSentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv6Server_Counters_AdvertisementsSentPathAny represents the wildcard version of the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/counters/advertisements-sent YANG schema element.
type Dhcpv6Server_Counters_AdvertisementsSentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "advertisements-sent"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/advertisements-sent"
func (n *Dhcpv6Server_Counters_AdvertisementsSentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Dhcpv6Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"advertisements-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv6Server_Counters).AdvertisementsSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "advertisements-sent"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/advertisements-sent"
func (n *Dhcpv6Server_Counters_AdvertisementsSentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Dhcpv6Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"advertisements-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv6Server_Counters).AdvertisementsSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv6Server_Counters_ConfirmsReceivedPath represents the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/counters/confirms-received YANG schema element.
type Dhcpv6Server_Counters_ConfirmsReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv6Server_Counters_ConfirmsReceivedPathAny represents the wildcard version of the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/counters/confirms-received YANG schema element.
type Dhcpv6Server_Counters_ConfirmsReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "confirms-received"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/confirms-received"
func (n *Dhcpv6Server_Counters_ConfirmsReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Dhcpv6Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"confirms-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv6Server_Counters).ConfirmsReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "confirms-received"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/confirms-received"
func (n *Dhcpv6Server_Counters_ConfirmsReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Dhcpv6Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"confirms-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv6Server_Counters).ConfirmsReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv6Server_Counters_DeclinesReceivedPath represents the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/counters/declines-received YANG schema element.
type Dhcpv6Server_Counters_DeclinesReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv6Server_Counters_DeclinesReceivedPathAny represents the wildcard version of the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/counters/declines-received YANG schema element.
type Dhcpv6Server_Counters_DeclinesReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "declines-received"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/declines-received"
func (n *Dhcpv6Server_Counters_DeclinesReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Dhcpv6Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"declines-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv6Server_Counters).DeclinesReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "declines-received"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/declines-received"
func (n *Dhcpv6Server_Counters_DeclinesReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Dhcpv6Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"declines-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv6Server_Counters).DeclinesReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv6Server_Counters_InformationRequestsReceivedPath represents the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/counters/information-requests-received YANG schema element.
type Dhcpv6Server_Counters_InformationRequestsReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv6Server_Counters_InformationRequestsReceivedPathAny represents the wildcard version of the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/counters/information-requests-received YANG schema element.
type Dhcpv6Server_Counters_InformationRequestsReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "information-requests-received"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/information-requests-received"
func (n *Dhcpv6Server_Counters_InformationRequestsReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Dhcpv6Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"information-requests-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv6Server_Counters).InformationRequestsReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "information-requests-received"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/information-requests-received"
func (n *Dhcpv6Server_Counters_InformationRequestsReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Dhcpv6Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"information-requests-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv6Server_Counters).InformationRequestsReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv6Server_Counters_NacksSentPath represents the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/counters/nacks-sent YANG schema element.
type Dhcpv6Server_Counters_NacksSentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv6Server_Counters_NacksSentPathAny represents the wildcard version of the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/counters/nacks-sent YANG schema element.
type Dhcpv6Server_Counters_NacksSentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "nacks-sent"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/nacks-sent"
func (n *Dhcpv6Server_Counters_NacksSentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Dhcpv6Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"nacks-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv6Server_Counters).NacksSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "nacks-sent"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/nacks-sent"
func (n *Dhcpv6Server_Counters_NacksSentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Dhcpv6Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"nacks-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv6Server_Counters).NacksSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv6Server_Counters_RebindsReceivedPath represents the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/counters/rebinds-received YANG schema element.
type Dhcpv6Server_Counters_RebindsReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv6Server_Counters_RebindsReceivedPathAny represents the wildcard version of the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/counters/rebinds-received YANG schema element.
type Dhcpv6Server_Counters_RebindsReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "rebinds-received"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/rebinds-received"
func (n *Dhcpv6Server_Counters_RebindsReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Dhcpv6Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"rebinds-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv6Server_Counters).RebindsReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "rebinds-received"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/rebinds-received"
func (n *Dhcpv6Server_Counters_RebindsReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Dhcpv6Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"rebinds-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv6Server_Counters).RebindsReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv6Server_Counters_ReconfiguresSentPath represents the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/counters/reconfigures-sent YANG schema element.
type Dhcpv6Server_Counters_ReconfiguresSentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv6Server_Counters_ReconfiguresSentPathAny represents the wildcard version of the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/counters/reconfigures-sent YANG schema element.
type Dhcpv6Server_Counters_ReconfiguresSentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "reconfigures-sent"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/reconfigures-sent"
func (n *Dhcpv6Server_Counters_ReconfiguresSentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Dhcpv6Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"reconfigures-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv6Server_Counters).ReconfiguresSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "reconfigures-sent"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/reconfigures-sent"
func (n *Dhcpv6Server_Counters_ReconfiguresSentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Dhcpv6Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"reconfigures-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv6Server_Counters).ReconfiguresSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv6Server_Counters_RelayForwardsReceivedPath represents the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/counters/relay-forwards-received YANG schema element.
type Dhcpv6Server_Counters_RelayForwardsReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv6Server_Counters_RelayForwardsReceivedPathAny represents the wildcard version of the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/counters/relay-forwards-received YANG schema element.
type Dhcpv6Server_Counters_RelayForwardsReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "relay-forwards-received"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/relay-forwards-received"
func (n *Dhcpv6Server_Counters_RelayForwardsReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Dhcpv6Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"relay-forwards-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv6Server_Counters).RelayForwardsReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "relay-forwards-received"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/relay-forwards-received"
func (n *Dhcpv6Server_Counters_RelayForwardsReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Dhcpv6Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"relay-forwards-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv6Server_Counters).RelayForwardsReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv6Server_Counters_RelayRepliesSentPath represents the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/counters/relay-replies-sent YANG schema element.
type Dhcpv6Server_Counters_RelayRepliesSentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv6Server_Counters_RelayRepliesSentPathAny represents the wildcard version of the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/counters/relay-replies-sent YANG schema element.
type Dhcpv6Server_Counters_RelayRepliesSentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "relay-replies-sent"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/relay-replies-sent"
func (n *Dhcpv6Server_Counters_RelayRepliesSentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Dhcpv6Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"relay-replies-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv6Server_Counters).RelayRepliesSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "relay-replies-sent"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/relay-replies-sent"
func (n *Dhcpv6Server_Counters_RelayRepliesSentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Dhcpv6Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"relay-replies-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv6Server_Counters).RelayRepliesSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv6Server_Counters_ReleasesReceivedPath represents the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/counters/releases-received YANG schema element.
type Dhcpv6Server_Counters_ReleasesReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv6Server_Counters_ReleasesReceivedPathAny represents the wildcard version of the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/counters/releases-received YANG schema element.
type Dhcpv6Server_Counters_ReleasesReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "releases-received"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/releases-received"
func (n *Dhcpv6Server_Counters_ReleasesReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Dhcpv6Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"releases-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv6Server_Counters).ReleasesReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "releases-received"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/releases-received"
func (n *Dhcpv6Server_Counters_ReleasesReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Dhcpv6Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"releases-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv6Server_Counters).ReleasesReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv6Server_Counters_RenewalsReceivedPath represents the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/counters/renewals-received YANG schema element.
type Dhcpv6Server_Counters_RenewalsReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv6Server_Counters_RenewalsReceivedPathAny represents the wildcard version of the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/counters/renewals-received YANG schema element.
type Dhcpv6Server_Counters_RenewalsReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "renewals-received"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/renewals-received"
func (n *Dhcpv6Server_Counters_RenewalsReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Dhcpv6Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"renewals-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv6Server_Counters).RenewalsReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "renewals-received"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/renewals-received"
func (n *Dhcpv6Server_Counters_RenewalsReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Dhcpv6Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"renewals-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv6Server_Counters).RenewalsReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv6Server_Counters_RepliesSentPath represents the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/counters/replies-sent YANG schema element.
type Dhcpv6Server_Counters_RepliesSentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv6Server_Counters_RepliesSentPathAny represents the wildcard version of the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/counters/replies-sent YANG schema element.
type Dhcpv6Server_Counters_RepliesSentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "replies-sent"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/replies-sent"
func (n *Dhcpv6Server_Counters_RepliesSentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Dhcpv6Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"replies-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv6Server_Counters).RepliesSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "replies-sent"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/replies-sent"
func (n *Dhcpv6Server_Counters_RepliesSentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Dhcpv6Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"replies-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv6Server_Counters).RepliesSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv6Server_Counters_RequestsReceivedPath represents the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/counters/requests-received YANG schema element.
type Dhcpv6Server_Counters_RequestsReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv6Server_Counters_RequestsReceivedPathAny represents the wildcard version of the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/counters/requests-received YANG schema element.
type Dhcpv6Server_Counters_RequestsReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "requests-received"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/requests-received"
func (n *Dhcpv6Server_Counters_RequestsReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Dhcpv6Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"requests-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv6Server_Counters).RequestsReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "requests-received"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/requests-received"
func (n *Dhcpv6Server_Counters_RequestsReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Dhcpv6Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"requests-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv6Server_Counters).RequestsReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv6Server_Counters_SolicitsIgnoredPath represents the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/counters/solicits-ignored YANG schema element.
type Dhcpv6Server_Counters_SolicitsIgnoredPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv6Server_Counters_SolicitsIgnoredPathAny represents the wildcard version of the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/counters/solicits-ignored YANG schema element.
type Dhcpv6Server_Counters_SolicitsIgnoredPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "solicits-ignored"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/solicits-ignored"
func (n *Dhcpv6Server_Counters_SolicitsIgnoredPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Dhcpv6Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"solicits-ignored"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv6Server_Counters).SolicitsIgnored
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "solicits-ignored"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/solicits-ignored"
func (n *Dhcpv6Server_Counters_SolicitsIgnoredPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Dhcpv6Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"solicits-ignored"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv6Server_Counters).SolicitsIgnored
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv6Server_Counters_SolicitsReceivedPath represents the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/counters/solicits-received YANG schema element.
type Dhcpv6Server_Counters_SolicitsReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv6Server_Counters_SolicitsReceivedPathAny represents the wildcard version of the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/counters/solicits-received YANG schema element.
type Dhcpv6Server_Counters_SolicitsReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "solicits-received"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/solicits-received"
func (n *Dhcpv6Server_Counters_SolicitsReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Dhcpv6Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"solicits-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv6Server_Counters).SolicitsReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "solicits-received"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/solicits-received"
func (n *Dhcpv6Server_Counters_SolicitsReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Dhcpv6Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"solicits-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv6Server_Counters).SolicitsReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv6Server_CountersPath represents the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/counters YANG schema element.
type Dhcpv6Server_CountersPath struct {
	*ygnmi.NodePath
}

// Dhcpv6Server_CountersPathAny represents the wildcard version of the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/counters YANG schema element.
type Dhcpv6Server_CountersPathAny struct {
	*ygnmi.NodePath
}

// AdvertisementsSent (leaf): Number of DHCP Advertise messages sent.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "advertisements-sent"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/advertisements-sent"
func (n *Dhcpv6Server_CountersPath) AdvertisementsSent() *Dhcpv6Server_Counters_AdvertisementsSentPath {
	ps := &Dhcpv6Server_Counters_AdvertisementsSentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"advertisements-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdvertisementsSent (leaf): Number of DHCP Advertise messages sent.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "advertisements-sent"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/advertisements-sent"
func (n *Dhcpv6Server_CountersPathAny) AdvertisementsSent() *Dhcpv6Server_Counters_AdvertisementsSentPathAny {
	ps := &Dhcpv6Server_Counters_AdvertisementsSentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"advertisements-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConfirmsReceived (leaf): Number of DHCP Confirm messages received.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "confirms-received"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/confirms-received"
func (n *Dhcpv6Server_CountersPath) ConfirmsReceived() *Dhcpv6Server_Counters_ConfirmsReceivedPath {
	ps := &Dhcpv6Server_Counters_ConfirmsReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"confirms-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConfirmsReceived (leaf): Number of DHCP Confirm messages received.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "confirms-received"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/confirms-received"
func (n *Dhcpv6Server_CountersPathAny) ConfirmsReceived() *Dhcpv6Server_Counters_ConfirmsReceivedPathAny {
	ps := &Dhcpv6Server_Counters_ConfirmsReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"confirms-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DeclinesReceived (leaf): Number of DHCPDECLINE messages received.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "declines-received"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/declines-received"
func (n *Dhcpv6Server_CountersPath) DeclinesReceived() *Dhcpv6Server_Counters_DeclinesReceivedPath {
	ps := &Dhcpv6Server_Counters_DeclinesReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"declines-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DeclinesReceived (leaf): Number of DHCPDECLINE messages received.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "declines-received"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/declines-received"
func (n *Dhcpv6Server_CountersPathAny) DeclinesReceived() *Dhcpv6Server_Counters_DeclinesReceivedPathAny {
	ps := &Dhcpv6Server_Counters_DeclinesReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"declines-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InformationRequestsReceived (leaf): Number of DHCPINFOREQUEST messages received.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "information-requests-received"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/information-requests-received"
func (n *Dhcpv6Server_CountersPath) InformationRequestsReceived() *Dhcpv6Server_Counters_InformationRequestsReceivedPath {
	ps := &Dhcpv6Server_Counters_InformationRequestsReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"information-requests-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InformationRequestsReceived (leaf): Number of DHCPINFOREQUEST messages received.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "information-requests-received"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/information-requests-received"
func (n *Dhcpv6Server_CountersPathAny) InformationRequestsReceived() *Dhcpv6Server_Counters_InformationRequestsReceivedPathAny {
	ps := &Dhcpv6Server_Counters_InformationRequestsReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"information-requests-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NacksSent (leaf): Number of nacks sent for DHCPREQUEST messages.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "nacks-sent"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/nacks-sent"
func (n *Dhcpv6Server_CountersPath) NacksSent() *Dhcpv6Server_Counters_NacksSentPath {
	ps := &Dhcpv6Server_Counters_NacksSentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"nacks-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NacksSent (leaf): Number of nacks sent for DHCPREQUEST messages.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "nacks-sent"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/nacks-sent"
func (n *Dhcpv6Server_CountersPathAny) NacksSent() *Dhcpv6Server_Counters_NacksSentPathAny {
	ps := &Dhcpv6Server_Counters_NacksSentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"nacks-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RebindsReceived (leaf): Number of DHCP Rebind messages received.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "rebinds-received"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/rebinds-received"
func (n *Dhcpv6Server_CountersPath) RebindsReceived() *Dhcpv6Server_Counters_RebindsReceivedPath {
	ps := &Dhcpv6Server_Counters_RebindsReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"rebinds-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RebindsReceived (leaf): Number of DHCP Rebind messages received.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "rebinds-received"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/rebinds-received"
func (n *Dhcpv6Server_CountersPathAny) RebindsReceived() *Dhcpv6Server_Counters_RebindsReceivedPathAny {
	ps := &Dhcpv6Server_Counters_RebindsReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"rebinds-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReconfiguresSent (leaf): Number of DHCP Reconfigure messages sent.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "reconfigures-sent"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/reconfigures-sent"
func (n *Dhcpv6Server_CountersPath) ReconfiguresSent() *Dhcpv6Server_Counters_ReconfiguresSentPath {
	ps := &Dhcpv6Server_Counters_ReconfiguresSentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"reconfigures-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReconfiguresSent (leaf): Number of DHCP Reconfigure messages sent.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "reconfigures-sent"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/reconfigures-sent"
func (n *Dhcpv6Server_CountersPathAny) ReconfiguresSent() *Dhcpv6Server_Counters_ReconfiguresSentPathAny {
	ps := &Dhcpv6Server_Counters_ReconfiguresSentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"reconfigures-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RelayForwardsReceived (leaf): Number of DHCP relay agent forward  messages received.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "relay-forwards-received"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/relay-forwards-received"
func (n *Dhcpv6Server_CountersPath) RelayForwardsReceived() *Dhcpv6Server_Counters_RelayForwardsReceivedPath {
	ps := &Dhcpv6Server_Counters_RelayForwardsReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"relay-forwards-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RelayForwardsReceived (leaf): Number of DHCP relay agent forward  messages received.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "relay-forwards-received"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/relay-forwards-received"
func (n *Dhcpv6Server_CountersPathAny) RelayForwardsReceived() *Dhcpv6Server_Counters_RelayForwardsReceivedPathAny {
	ps := &Dhcpv6Server_Counters_RelayForwardsReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"relay-forwards-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RelayRepliesSent (leaf): Number of DHCP Reply messages sent to relay agent.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "relay-replies-sent"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/relay-replies-sent"
func (n *Dhcpv6Server_CountersPath) RelayRepliesSent() *Dhcpv6Server_Counters_RelayRepliesSentPath {
	ps := &Dhcpv6Server_Counters_RelayRepliesSentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"relay-replies-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RelayRepliesSent (leaf): Number of DHCP Reply messages sent to relay agent.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "relay-replies-sent"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/relay-replies-sent"
func (n *Dhcpv6Server_CountersPathAny) RelayRepliesSent() *Dhcpv6Server_Counters_RelayRepliesSentPathAny {
	ps := &Dhcpv6Server_Counters_RelayRepliesSentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"relay-replies-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReleasesReceived (leaf): Number of DHCPRELEASE messages received.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "releases-received"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/releases-received"
func (n *Dhcpv6Server_CountersPath) ReleasesReceived() *Dhcpv6Server_Counters_ReleasesReceivedPath {
	ps := &Dhcpv6Server_Counters_ReleasesReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"releases-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReleasesReceived (leaf): Number of DHCPRELEASE messages received.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "releases-received"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/releases-received"
func (n *Dhcpv6Server_CountersPathAny) ReleasesReceived() *Dhcpv6Server_Counters_ReleasesReceivedPathAny {
	ps := &Dhcpv6Server_Counters_ReleasesReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"releases-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RenewalsReceived (leaf): Number of DHCP Renewal messages received.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "renewals-received"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/renewals-received"
func (n *Dhcpv6Server_CountersPath) RenewalsReceived() *Dhcpv6Server_Counters_RenewalsReceivedPath {
	ps := &Dhcpv6Server_Counters_RenewalsReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"renewals-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RenewalsReceived (leaf): Number of DHCP Renewal messages received.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "renewals-received"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/renewals-received"
func (n *Dhcpv6Server_CountersPathAny) RenewalsReceived() *Dhcpv6Server_Counters_RenewalsReceivedPathAny {
	ps := &Dhcpv6Server_Counters_RenewalsReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"renewals-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RepliesSent (leaf): Number of DHCP Reply messages sent.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "replies-sent"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/replies-sent"
func (n *Dhcpv6Server_CountersPath) RepliesSent() *Dhcpv6Server_Counters_RepliesSentPath {
	ps := &Dhcpv6Server_Counters_RepliesSentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"replies-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RepliesSent (leaf): Number of DHCP Reply messages sent.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "replies-sent"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/replies-sent"
func (n *Dhcpv6Server_CountersPathAny) RepliesSent() *Dhcpv6Server_Counters_RepliesSentPathAny {
	ps := &Dhcpv6Server_Counters_RepliesSentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"replies-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RequestsReceived (leaf): Number of DHCPREQUEST messages received.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "requests-received"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/requests-received"
func (n *Dhcpv6Server_CountersPath) RequestsReceived() *Dhcpv6Server_Counters_RequestsReceivedPath {
	ps := &Dhcpv6Server_Counters_RequestsReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"requests-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RequestsReceived (leaf): Number of DHCPREQUEST messages received.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "requests-received"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/requests-received"
func (n *Dhcpv6Server_CountersPathAny) RequestsReceived() *Dhcpv6Server_Counters_RequestsReceivedPathAny {
	ps := &Dhcpv6Server_Counters_RequestsReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"requests-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SolicitsIgnored (leaf): Number of DHCPSOLICIT messages ignored.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "solicits-ignored"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/solicits-ignored"
func (n *Dhcpv6Server_CountersPath) SolicitsIgnored() *Dhcpv6Server_Counters_SolicitsIgnoredPath {
	ps := &Dhcpv6Server_Counters_SolicitsIgnoredPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"solicits-ignored"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SolicitsIgnored (leaf): Number of DHCPSOLICIT messages ignored.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "solicits-ignored"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/solicits-ignored"
func (n *Dhcpv6Server_CountersPathAny) SolicitsIgnored() *Dhcpv6Server_Counters_SolicitsIgnoredPathAny {
	ps := &Dhcpv6Server_Counters_SolicitsIgnoredPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"solicits-ignored"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SolicitsReceived (leaf): Number of DHCPSOLICIT messages received.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "solicits-received"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/solicits-received"
func (n *Dhcpv6Server_CountersPath) SolicitsReceived() *Dhcpv6Server_Counters_SolicitsReceivedPath {
	ps := &Dhcpv6Server_Counters_SolicitsReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"solicits-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SolicitsReceived (leaf): Number of DHCPSOLICIT messages received.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "solicits-received"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/counters/solicits-received"
func (n *Dhcpv6Server_CountersPathAny) SolicitsReceived() *Dhcpv6Server_Counters_SolicitsReceivedPathAny {
	ps := &Dhcpv6Server_Counters_SolicitsReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"solicits-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Dhcpv6Server_CountersPath) State() ygnmi.SingletonQuery[*oc.Dhcpv6Server_Counters] {
	return ygnmi.NewSingletonQuery[*oc.Dhcpv6Server_Counters](
		"Dhcpv6Server_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Dhcpv6Server_CountersPathAny) State() ygnmi.WildcardQuery[*oc.Dhcpv6Server_Counters] {
	return ygnmi.NewWildcardQuery[*oc.Dhcpv6Server_Counters](
		"Dhcpv6Server_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv6Server_LeasesPath represents the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/leases YANG schema element.
type Dhcpv6Server_LeasesPath struct {
	*ygnmi.NodePath
}

// Dhcpv6Server_LeasesPathAny represents the wildcard version of the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/leases YANG schema element.
type Dhcpv6Server_LeasesPathAny struct {
	*ygnmi.NodePath
}

// HostsAny (list): The IPv6 address associated with this lease for the Host
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "leases-states/hosts"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts"
func (n *Dhcpv6Server_LeasesPath) HostsAny() *Dhcpv6Server_Leases_HostsPathAny {
	ps := &Dhcpv6Server_Leases_HostsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"leases-states", "hosts"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
	return ps
}

// HostsAny (list): The IPv6 address associated with this lease for the Host
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "leases-states/hosts"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts"
func (n *Dhcpv6Server_LeasesPathAny) HostsAny() *Dhcpv6Server_Leases_HostsPathAny {
	ps := &Dhcpv6Server_Leases_HostsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"leases-states", "hosts"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
	return ps
}

// Hosts (list): The IPv6 address associated with this lease for the Host
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "leases-states/hosts"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts"
//
//	Address: string
func (n *Dhcpv6Server_LeasesPath) Hosts(Address string) *Dhcpv6Server_Leases_HostsPath {
	ps := &Dhcpv6Server_Leases_HostsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"leases-states", "hosts"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
	return ps
}

// Hosts (list): The IPv6 address associated with this lease for the Host
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "leases-states/hosts"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts"
//
//	Address: string
func (n *Dhcpv6Server_LeasesPathAny) Hosts(Address string) *Dhcpv6Server_Leases_HostsPathAny {
	ps := &Dhcpv6Server_Leases_HostsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"leases-states", "hosts"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Dhcpv6Server_LeasesPath) State() ygnmi.SingletonQuery[*oc.Dhcpv6Server_Leases] {
	return ygnmi.NewSingletonQuery[*oc.Dhcpv6Server_Leases](
		"Dhcpv6Server_Leases",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Dhcpv6Server_LeasesPathAny) State() ygnmi.WildcardQuery[*oc.Dhcpv6Server_Leases] {
	return ygnmi.NewWildcardQuery[*oc.Dhcpv6Server_Leases](
		"Dhcpv6Server_Leases",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv6Server_Leases_Hosts_AddressPath represents the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/address YANG schema element.
type Dhcpv6Server_Leases_Hosts_AddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv6Server_Leases_Hosts_AddressPathAny represents the wildcard version of the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/address YANG schema element.
type Dhcpv6Server_Leases_Hosts_AddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "state/address"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/address"
func (n *Dhcpv6Server_Leases_Hosts_AddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Dhcpv6Server_Leases_Hosts",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Dhcpv6Server_Leases_Hosts).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Leases_Hosts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "state/address"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/address"
func (n *Dhcpv6Server_Leases_Hosts_AddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Dhcpv6Server_Leases_Hosts",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Dhcpv6Server_Leases_Hosts).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Leases_Hosts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "address"
//	Path from root:       ""
func (n *Dhcpv6Server_Leases_Hosts_AddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Dhcpv6Server_Leases_Hosts",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Dhcpv6Server_Leases_Hosts).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Leases_Hosts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "address"
//	Path from root:       ""
func (n *Dhcpv6Server_Leases_Hosts_AddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Dhcpv6Server_Leases_Hosts",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Dhcpv6Server_Leases_Hosts).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Leases_Hosts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv6Server_Leases_Hosts_ClientIdPath represents the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/client-id YANG schema element.
type Dhcpv6Server_Leases_Hosts_ClientIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv6Server_Leases_Hosts_ClientIdPathAny represents the wildcard version of the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/client-id YANG schema element.
type Dhcpv6Server_Leases_Hosts_ClientIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "state/client-id"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/client-id"
func (n *Dhcpv6Server_Leases_Hosts_ClientIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Dhcpv6Server_Leases_Hosts",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "client-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Dhcpv6Server_Leases_Hosts).ClientId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Leases_Hosts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "state/client-id"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/client-id"
func (n *Dhcpv6Server_Leases_Hosts_ClientIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Dhcpv6Server_Leases_Hosts",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "client-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Dhcpv6Server_Leases_Hosts).ClientId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Leases_Hosts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv6Server_Leases_Hosts_InterfaceIdPath represents the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/interface-id YANG schema element.
type Dhcpv6Server_Leases_Hosts_InterfaceIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv6Server_Leases_Hosts_InterfaceIdPathAny represents the wildcard version of the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/interface-id YANG schema element.
type Dhcpv6Server_Leases_Hosts_InterfaceIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/interface-id"
func (n *Dhcpv6Server_Leases_Hosts_InterfaceIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Dhcpv6Server_Leases_Hosts",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Dhcpv6Server_Leases_Hosts).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Leases_Hosts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/interface-id"
func (n *Dhcpv6Server_Leases_Hosts_InterfaceIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Dhcpv6Server_Leases_Hosts",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Dhcpv6Server_Leases_Hosts).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Leases_Hosts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv6Server_Leases_Hosts_PreferredTimePath represents the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/preferred-time YANG schema element.
type Dhcpv6Server_Leases_Hosts_PreferredTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv6Server_Leases_Hosts_PreferredTimePathAny represents the wildcard version of the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/preferred-time YANG schema element.
type Dhcpv6Server_Leases_Hosts_PreferredTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "state/preferred-time"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/preferred-time"
func (n *Dhcpv6Server_Leases_Hosts_PreferredTimePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Dhcpv6Server_Leases_Hosts",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preferred-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Dhcpv6Server_Leases_Hosts).PreferredTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Leases_Hosts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "state/preferred-time"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/preferred-time"
func (n *Dhcpv6Server_Leases_Hosts_PreferredTimePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Dhcpv6Server_Leases_Hosts",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preferred-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Dhcpv6Server_Leases_Hosts).PreferredTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Leases_Hosts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv6Server_Leases_Hosts_RebindTimePath represents the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/rebind-time YANG schema element.
type Dhcpv6Server_Leases_Hosts_RebindTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv6Server_Leases_Hosts_RebindTimePathAny represents the wildcard version of the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/rebind-time YANG schema element.
type Dhcpv6Server_Leases_Hosts_RebindTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "state/rebind-time"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/rebind-time"
func (n *Dhcpv6Server_Leases_Hosts_RebindTimePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Dhcpv6Server_Leases_Hosts",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "rebind-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Dhcpv6Server_Leases_Hosts).RebindTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Leases_Hosts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "state/rebind-time"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/rebind-time"
func (n *Dhcpv6Server_Leases_Hosts_RebindTimePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Dhcpv6Server_Leases_Hosts",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "rebind-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Dhcpv6Server_Leases_Hosts).RebindTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Leases_Hosts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv6Server_Leases_Hosts_RemoteIdPath represents the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/remote-id YANG schema element.
type Dhcpv6Server_Leases_Hosts_RemoteIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv6Server_Leases_Hosts_RemoteIdPathAny represents the wildcard version of the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/remote-id YANG schema element.
type Dhcpv6Server_Leases_Hosts_RemoteIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "state/remote-id"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/remote-id"
func (n *Dhcpv6Server_Leases_Hosts_RemoteIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Dhcpv6Server_Leases_Hosts",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Dhcpv6Server_Leases_Hosts).RemoteId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Leases_Hosts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "state/remote-id"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/remote-id"
func (n *Dhcpv6Server_Leases_Hosts_RemoteIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Dhcpv6Server_Leases_Hosts",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Dhcpv6Server_Leases_Hosts).RemoteId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Leases_Hosts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv6Server_Leases_Hosts_RenewTimePath represents the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/renew-time YANG schema element.
type Dhcpv6Server_Leases_Hosts_RenewTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv6Server_Leases_Hosts_RenewTimePathAny represents the wildcard version of the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/renew-time YANG schema element.
type Dhcpv6Server_Leases_Hosts_RenewTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "state/renew-time"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/renew-time"
func (n *Dhcpv6Server_Leases_Hosts_RenewTimePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Dhcpv6Server_Leases_Hosts",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "renew-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Dhcpv6Server_Leases_Hosts).RenewTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Leases_Hosts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "state/renew-time"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/renew-time"
func (n *Dhcpv6Server_Leases_Hosts_RenewTimePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Dhcpv6Server_Leases_Hosts",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "renew-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Dhcpv6Server_Leases_Hosts).RenewTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Leases_Hosts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv6Server_Leases_Hosts_ValidTimePath represents the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/valid-time YANG schema element.
type Dhcpv6Server_Leases_Hosts_ValidTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv6Server_Leases_Hosts_ValidTimePathAny represents the wildcard version of the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/valid-time YANG schema element.
type Dhcpv6Server_Leases_Hosts_ValidTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "state/valid-time"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/valid-time"
func (n *Dhcpv6Server_Leases_Hosts_ValidTimePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Dhcpv6Server_Leases_Hosts",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "valid-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Dhcpv6Server_Leases_Hosts).ValidTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Leases_Hosts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "state/valid-time"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/valid-time"
func (n *Dhcpv6Server_Leases_Hosts_ValidTimePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Dhcpv6Server_Leases_Hosts",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "valid-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Dhcpv6Server_Leases_Hosts).ValidTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv6Server_Leases_Hosts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv6Server_Leases_HostsPath represents the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts YANG schema element.
type Dhcpv6Server_Leases_HostsPath struct {
	*ygnmi.NodePath
}

// Dhcpv6Server_Leases_HostsPathAny represents the wildcard version of the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts YANG schema element.
type Dhcpv6Server_Leases_HostsPathAny struct {
	*ygnmi.NodePath
}

// Dhcpv6Server_Leases_HostsPathMap represents the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts YANG schema element.
type Dhcpv6Server_Leases_HostsPathMap struct {
	*ygnmi.NodePath
}

// Dhcpv6Server_Leases_HostsPathMapAny represents the wildcard version of the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts YANG schema element.
type Dhcpv6Server_Leases_HostsPathMapAny struct {
	*ygnmi.NodePath
}

// Address (leaf): The IPv6 address associated with this DHCP Client session.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "*/address"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/*/leases/leases-states/hosts/*/address"
func (n *Dhcpv6Server_Leases_HostsPath) Address() *Dhcpv6Server_Leases_Hosts_AddressPath {
	ps := &Dhcpv6Server_Leases_Hosts_AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Address (leaf): The IPv6 address associated with this DHCP Client session.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "*/address"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/*/leases/leases-states/hosts/*/address"
func (n *Dhcpv6Server_Leases_HostsPathAny) Address() *Dhcpv6Server_Leases_Hosts_AddressPathAny {
	ps := &Dhcpv6Server_Leases_Hosts_AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ClientId (leaf): The ID of the DHCPv6 client holding this lease.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "state/client-id"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/client-id"
func (n *Dhcpv6Server_Leases_HostsPath) ClientId() *Dhcpv6Server_Leases_Hosts_ClientIdPath {
	ps := &Dhcpv6Server_Leases_Hosts_ClientIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "client-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ClientId (leaf): The ID of the DHCPv6 client holding this lease.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "state/client-id"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/client-id"
func (n *Dhcpv6Server_Leases_HostsPathAny) ClientId() *Dhcpv6Server_Leases_Hosts_ClientIdPathAny {
	ps := &Dhcpv6Server_Leases_Hosts_ClientIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "client-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceId (leaf): The Interface ID option found in the last request message
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/interface-id"
func (n *Dhcpv6Server_Leases_HostsPath) InterfaceId() *Dhcpv6Server_Leases_Hosts_InterfaceIdPath {
	ps := &Dhcpv6Server_Leases_Hosts_InterfaceIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceId (leaf): The Interface ID option found in the last request message
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/interface-id"
func (n *Dhcpv6Server_Leases_HostsPathAny) InterfaceId() *Dhcpv6Server_Leases_Hosts_InterfaceIdPathAny {
	ps := &Dhcpv6Server_Leases_Hosts_InterfaceIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreferredTime (leaf): The time in seconds, elapsed time since address has been renewed.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "state/preferred-time"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/preferred-time"
func (n *Dhcpv6Server_Leases_HostsPath) PreferredTime() *Dhcpv6Server_Leases_Hosts_PreferredTimePath {
	ps := &Dhcpv6Server_Leases_Hosts_PreferredTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "preferred-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreferredTime (leaf): The time in seconds, elapsed time since address has been renewed.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "state/preferred-time"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/preferred-time"
func (n *Dhcpv6Server_Leases_HostsPathAny) PreferredTime() *Dhcpv6Server_Leases_Hosts_PreferredTimePathAny {
	ps := &Dhcpv6Server_Leases_Hosts_PreferredTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "preferred-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RebindTime (leaf): Time in seconds until the DHCPv4 client starts rebinding.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "state/rebind-time"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/rebind-time"
func (n *Dhcpv6Server_Leases_HostsPath) RebindTime() *Dhcpv6Server_Leases_Hosts_RebindTimePath {
	ps := &Dhcpv6Server_Leases_Hosts_RebindTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "rebind-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RebindTime (leaf): Time in seconds until the DHCPv4 client starts rebinding.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "state/rebind-time"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/rebind-time"
func (n *Dhcpv6Server_Leases_HostsPathAny) RebindTime() *Dhcpv6Server_Leases_Hosts_RebindTimePathAny {
	ps := &Dhcpv6Server_Leases_Hosts_RebindTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "rebind-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RemoteId (leaf): The Remote ID option found in the last request message
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "state/remote-id"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/remote-id"
func (n *Dhcpv6Server_Leases_HostsPath) RemoteId() *Dhcpv6Server_Leases_Hosts_RemoteIdPath {
	ps := &Dhcpv6Server_Leases_Hosts_RemoteIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "remote-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RemoteId (leaf): The Remote ID option found in the last request message
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "state/remote-id"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/remote-id"
func (n *Dhcpv6Server_Leases_HostsPathAny) RemoteId() *Dhcpv6Server_Leases_Hosts_RemoteIdPathAny {
	ps := &Dhcpv6Server_Leases_Hosts_RemoteIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "remote-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RenewTime (leaf): Time in seconds until the DHCPv4 client starts renewing the lease.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "state/renew-time"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/renew-time"
func (n *Dhcpv6Server_Leases_HostsPath) RenewTime() *Dhcpv6Server_Leases_Hosts_RenewTimePath {
	ps := &Dhcpv6Server_Leases_Hosts_RenewTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "renew-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RenewTime (leaf): Time in seconds until the DHCPv4 client starts renewing the lease.
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "state/renew-time"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/renew-time"
func (n *Dhcpv6Server_Leases_HostsPathAny) RenewTime() *Dhcpv6Server_Leases_Hosts_RenewTimePathAny {
	ps := &Dhcpv6Server_Leases_Hosts_RenewTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "renew-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ValidTime (leaf): The time in seconds, IP address lease will expire
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "state/valid-time"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/valid-time"
func (n *Dhcpv6Server_Leases_HostsPath) ValidTime() *Dhcpv6Server_Leases_Hosts_ValidTimePath {
	ps := &Dhcpv6Server_Leases_Hosts_ValidTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "valid-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ValidTime (leaf): The time in seconds, IP address lease will expire
//
//	Defining module:      "open-traffic-generator-dhcpv6server"
//	Instantiating module: "open-traffic-generator-dhcpv6server"
//	Path from parent:     "state/valid-time"
//	Path from root:       "/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts/state/valid-time"
func (n *Dhcpv6Server_Leases_HostsPathAny) ValidTime() *Dhcpv6Server_Leases_Hosts_ValidTimePathAny {
	ps := &Dhcpv6Server_Leases_Hosts_ValidTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "valid-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Dhcpv6Server_Leases_HostsPath) State() ygnmi.SingletonQuery[*oc.Dhcpv6Server_Leases_Hosts] {
	return ygnmi.NewSingletonQuery[*oc.Dhcpv6Server_Leases_Hosts](
		"Dhcpv6Server_Leases_Hosts",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Dhcpv6Server_Leases_HostsPathAny) State() ygnmi.WildcardQuery[*oc.Dhcpv6Server_Leases_Hosts] {
	return ygnmi.NewWildcardQuery[*oc.Dhcpv6Server_Leases_Hosts](
		"Dhcpv6Server_Leases_Hosts",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

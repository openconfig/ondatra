/*
Package lldp is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.20)
using the following YANG input files:
  - models-yang/models/bgp/open-traffic-generator-bgp.yang
  - models-yang/models/dhcp/v4client/open-traffic-generator-dhcpv4client.yang
  - models-yang/models/dhcp/v4server/open-traffic-generator-dhcpv4server.yang
  - models-yang/models/dhcp/v6client/open-traffic-generator-dhcpv6client.yang
  - models-yang/models/dhcp/v6server/open-traffic-generator-dhcpv6server.yang
  - models-yang/models/discovery/open-traffic-generator-discovery.yang
  - models-yang/models/discovery/open-traffic-generator-discovery-interfaces.yang
  - models-yang/models/flow/open-traffic-generator-flow.yang
  - models-yang/models/interface/open-traffic-generator-port.yang
  - models-yang/models/isis/open-traffic-generator-isis.yang
  - models-yang/models/lacp/open-traffic-generator-lacp.yang
  - models-yang/models/lag/open-traffic-generator-lag.yang
  - models-yang/models/lldp/open-traffic-generator-lldp.yang
  - models-yang/models/ospfv2/open-traffic-generator-ospfv2.yang
  - models-yang/models/ospfv3/open-traffic-generator-ospfv3.yang
  - models-yang/models/platform/open-traffic-generator-platform.yang
  - models-yang/models/rsvp/open-traffic-generator-rsvp.yang
  - models-yang/models/types/open-traffic-generator-types.yang

Imported modules were sourced from:
  - models-yang/models/...
*/
package lldp

import (
	"reflect"

	oc "github.com/openconfig/ondatra/gnmi/otg"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// LldpInterface_NamePath represents the /open-traffic-generator-lldp/lldps/lldp-interface/state/name YANG schema element.
type LldpInterface_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// LldpInterface_NamePathAny represents the wildcard version of the /open-traffic-generator-lldp/lldps/lldp-interface/state/name YANG schema element.
type LldpInterface_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/name"
//	Path from root:       "/lldps/lldp-interface/state/name"
func (n *LldpInterface_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"LldpInterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.LldpInterface).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/name"
//	Path from root:       "/lldps/lldp-interface/state/name"
func (n *LldpInterface_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"LldpInterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.LldpInterface).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *LldpInterface_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"LldpInterface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.LldpInterface).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *LldpInterface_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"LldpInterface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.LldpInterface).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// LldpInterfacePath represents the /open-traffic-generator-lldp/lldps/lldp-interface YANG schema element.
type LldpInterfacePath struct {
	*ygnmi.NodePath
}

// LldpInterfacePathAny represents the wildcard version of the /open-traffic-generator-lldp/lldps/lldp-interface YANG schema element.
type LldpInterfacePathAny struct {
	*ygnmi.NodePath
}

// LldpInterfacePathMap represents the /open-traffic-generator-lldp/lldps/lldp-interface YANG schema element.
type LldpInterfacePathMap struct {
	*ygnmi.NodePath
}

// LldpInterfacePathMapAny represents the wildcard version of the /open-traffic-generator-lldp/lldps/lldp-interface YANG schema element.
type LldpInterfacePathMapAny struct {
	*ygnmi.NodePath
}

// Counters (container): Counters of an individual LLDP interface.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/counters"
//	Path from root:       "/lldps/lldp-interface/state/counters"
func (n *LldpInterfacePath) Counters() *LldpInterface_CountersPath {
	ps := &LldpInterface_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Counters of an individual LLDP interface.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/counters"
//	Path from root:       "/lldps/lldp-interface/state/counters"
func (n *LldpInterfacePathAny) Counters() *LldpInterface_CountersPathAny {
	ps := &LldpInterface_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LldpNeighborDatabase (container): Discovered neighbors of an individual LLDP interface.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/lldp-neighbor-database"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database"
func (n *LldpInterfacePath) LldpNeighborDatabase() *LldpInterface_LldpNeighborDatabasePath {
	ps := &LldpInterface_LldpNeighborDatabasePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "lldp-neighbor-database"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LldpNeighborDatabase (container): Discovered neighbors of an individual LLDP interface.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/lldp-neighbor-database"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database"
func (n *LldpInterfacePathAny) LldpNeighborDatabase() *LldpInterface_LldpNeighborDatabasePathAny {
	ps := &LldpInterface_LldpNeighborDatabasePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "lldp-neighbor-database"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Name (leaf): An arbitrary name of the LLDP interface determined by the ATE
// configuration.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "*/name"
//	Path from root:       "/lldps/lldp-interface/*/name"
func (n *LldpInterfacePath) Name() *LldpInterface_NamePath {
	ps := &LldpInterface_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): An arbitrary name of the LLDP interface determined by the ATE
// configuration.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "*/name"
//	Path from root:       "/lldps/lldp-interface/*/name"
func (n *LldpInterfacePathAny) Name() *LldpInterface_NamePathAny {
	ps := &LldpInterface_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *LldpInterfacePath) State() ygnmi.SingletonQuery[*oc.LldpInterface] {
	return ygnmi.NewSingletonQuery[*oc.LldpInterface](
		"LldpInterface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *LldpInterfacePathAny) State() ygnmi.WildcardQuery[*oc.LldpInterface] {
	return ygnmi.NewWildcardQuery[*oc.LldpInterface](
		"LldpInterface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// LldpInterface_Counters_FrameDiscardPath represents the /open-traffic-generator-lldp/lldps/lldp-interface/state/counters/frame-discard YANG schema element.
type LldpInterface_Counters_FrameDiscardPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// LldpInterface_Counters_FrameDiscardPathAny represents the wildcard version of the /open-traffic-generator-lldp/lldps/lldp-interface/state/counters/frame-discard YANG schema element.
type LldpInterface_Counters_FrameDiscardPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "frame-discard"
//	Path from root:       "/lldps/lldp-interface/state/counters/frame-discard"
func (n *LldpInterface_Counters_FrameDiscardPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"LldpInterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-discard"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.LldpInterface_Counters).FrameDiscard
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "frame-discard"
//	Path from root:       "/lldps/lldp-interface/state/counters/frame-discard"
func (n *LldpInterface_Counters_FrameDiscardPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"LldpInterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-discard"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.LldpInterface_Counters).FrameDiscard
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// LldpInterface_Counters_FrameErrorInPath represents the /open-traffic-generator-lldp/lldps/lldp-interface/state/counters/frame-error-in YANG schema element.
type LldpInterface_Counters_FrameErrorInPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// LldpInterface_Counters_FrameErrorInPathAny represents the wildcard version of the /open-traffic-generator-lldp/lldps/lldp-interface/state/counters/frame-error-in YANG schema element.
type LldpInterface_Counters_FrameErrorInPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "frame-error-in"
//	Path from root:       "/lldps/lldp-interface/state/counters/frame-error-in"
func (n *LldpInterface_Counters_FrameErrorInPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"LldpInterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-error-in"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.LldpInterface_Counters).FrameErrorIn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "frame-error-in"
//	Path from root:       "/lldps/lldp-interface/state/counters/frame-error-in"
func (n *LldpInterface_Counters_FrameErrorInPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"LldpInterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-error-in"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.LldpInterface_Counters).FrameErrorIn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// LldpInterface_Counters_FrameInPath represents the /open-traffic-generator-lldp/lldps/lldp-interface/state/counters/frame-in YANG schema element.
type LldpInterface_Counters_FrameInPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// LldpInterface_Counters_FrameInPathAny represents the wildcard version of the /open-traffic-generator-lldp/lldps/lldp-interface/state/counters/frame-in YANG schema element.
type LldpInterface_Counters_FrameInPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "frame-in"
//	Path from root:       "/lldps/lldp-interface/state/counters/frame-in"
func (n *LldpInterface_Counters_FrameInPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"LldpInterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-in"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.LldpInterface_Counters).FrameIn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "frame-in"
//	Path from root:       "/lldps/lldp-interface/state/counters/frame-in"
func (n *LldpInterface_Counters_FrameInPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"LldpInterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-in"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.LldpInterface_Counters).FrameIn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// LldpInterface_Counters_FrameOutPath represents the /open-traffic-generator-lldp/lldps/lldp-interface/state/counters/frame-out YANG schema element.
type LldpInterface_Counters_FrameOutPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// LldpInterface_Counters_FrameOutPathAny represents the wildcard version of the /open-traffic-generator-lldp/lldps/lldp-interface/state/counters/frame-out YANG schema element.
type LldpInterface_Counters_FrameOutPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "frame-out"
//	Path from root:       "/lldps/lldp-interface/state/counters/frame-out"
func (n *LldpInterface_Counters_FrameOutPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"LldpInterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-out"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.LldpInterface_Counters).FrameOut
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "frame-out"
//	Path from root:       "/lldps/lldp-interface/state/counters/frame-out"
func (n *LldpInterface_Counters_FrameOutPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"LldpInterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-out"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.LldpInterface_Counters).FrameOut
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// LldpInterface_Counters_TlvDiscardPath represents the /open-traffic-generator-lldp/lldps/lldp-interface/state/counters/tlv-discard YANG schema element.
type LldpInterface_Counters_TlvDiscardPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// LldpInterface_Counters_TlvDiscardPathAny represents the wildcard version of the /open-traffic-generator-lldp/lldps/lldp-interface/state/counters/tlv-discard YANG schema element.
type LldpInterface_Counters_TlvDiscardPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "tlv-discard"
//	Path from root:       "/lldps/lldp-interface/state/counters/tlv-discard"
func (n *LldpInterface_Counters_TlvDiscardPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"LldpInterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"tlv-discard"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.LldpInterface_Counters).TlvDiscard
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "tlv-discard"
//	Path from root:       "/lldps/lldp-interface/state/counters/tlv-discard"
func (n *LldpInterface_Counters_TlvDiscardPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"LldpInterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"tlv-discard"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.LldpInterface_Counters).TlvDiscard
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// LldpInterface_Counters_TlvUnknownPath represents the /open-traffic-generator-lldp/lldps/lldp-interface/state/counters/tlv-unknown YANG schema element.
type LldpInterface_Counters_TlvUnknownPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// LldpInterface_Counters_TlvUnknownPathAny represents the wildcard version of the /open-traffic-generator-lldp/lldps/lldp-interface/state/counters/tlv-unknown YANG schema element.
type LldpInterface_Counters_TlvUnknownPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "tlv-unknown"
//	Path from root:       "/lldps/lldp-interface/state/counters/tlv-unknown"
func (n *LldpInterface_Counters_TlvUnknownPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"LldpInterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"tlv-unknown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.LldpInterface_Counters).TlvUnknown
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "tlv-unknown"
//	Path from root:       "/lldps/lldp-interface/state/counters/tlv-unknown"
func (n *LldpInterface_Counters_TlvUnknownPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"LldpInterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"tlv-unknown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.LldpInterface_Counters).TlvUnknown
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// LldpInterface_CountersPath represents the /open-traffic-generator-lldp/lldps/lldp-interface/state/counters YANG schema element.
type LldpInterface_CountersPath struct {
	*ygnmi.NodePath
}

// LldpInterface_CountersPathAny represents the wildcard version of the /open-traffic-generator-lldp/lldps/lldp-interface/state/counters YANG schema element.
type LldpInterface_CountersPathAny struct {
	*ygnmi.NodePath
}

// FrameDiscard (leaf): The total number of LLDP frames discarded.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "frame-discard"
//	Path from root:       "/lldps/lldp-interface/state/counters/frame-discard"
func (n *LldpInterface_CountersPath) FrameDiscard() *LldpInterface_Counters_FrameDiscardPath {
	ps := &LldpInterface_Counters_FrameDiscardPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-discard"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameDiscard (leaf): The total number of LLDP frames discarded.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "frame-discard"
//	Path from root:       "/lldps/lldp-interface/state/counters/frame-discard"
func (n *LldpInterface_CountersPathAny) FrameDiscard() *LldpInterface_Counters_FrameDiscardPathAny {
	ps := &LldpInterface_Counters_FrameDiscardPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-discard"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameErrorIn (leaf): The total number of LLDP frames received having errors.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "frame-error-in"
//	Path from root:       "/lldps/lldp-interface/state/counters/frame-error-in"
func (n *LldpInterface_CountersPath) FrameErrorIn() *LldpInterface_Counters_FrameErrorInPath {
	ps := &LldpInterface_Counters_FrameErrorInPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-error-in"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameErrorIn (leaf): The total number of LLDP frames received having errors.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "frame-error-in"
//	Path from root:       "/lldps/lldp-interface/state/counters/frame-error-in"
func (n *LldpInterface_CountersPathAny) FrameErrorIn() *LldpInterface_Counters_FrameErrorInPathAny {
	ps := &LldpInterface_Counters_FrameErrorInPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-error-in"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameIn (leaf): The total number of LLDP frames received.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "frame-in"
//	Path from root:       "/lldps/lldp-interface/state/counters/frame-in"
func (n *LldpInterface_CountersPath) FrameIn() *LldpInterface_Counters_FrameInPath {
	ps := &LldpInterface_Counters_FrameInPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-in"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameIn (leaf): The total number of LLDP frames received.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "frame-in"
//	Path from root:       "/lldps/lldp-interface/state/counters/frame-in"
func (n *LldpInterface_CountersPathAny) FrameIn() *LldpInterface_Counters_FrameInPathAny {
	ps := &LldpInterface_Counters_FrameInPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-in"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameOut (leaf): The total number of LLDP frames transmitted.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "frame-out"
//	Path from root:       "/lldps/lldp-interface/state/counters/frame-out"
func (n *LldpInterface_CountersPath) FrameOut() *LldpInterface_Counters_FrameOutPath {
	ps := &LldpInterface_Counters_FrameOutPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-out"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameOut (leaf): The total number of LLDP frames transmitted.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "frame-out"
//	Path from root:       "/lldps/lldp-interface/state/counters/frame-out"
func (n *LldpInterface_CountersPathAny) FrameOut() *LldpInterface_Counters_FrameOutPathAny {
	ps := &LldpInterface_Counters_FrameOutPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-out"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TlvDiscard (leaf): The total number of LLDP tlvs discarded.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "tlv-discard"
//	Path from root:       "/lldps/lldp-interface/state/counters/tlv-discard"
func (n *LldpInterface_CountersPath) TlvDiscard() *LldpInterface_Counters_TlvDiscardPath {
	ps := &LldpInterface_Counters_TlvDiscardPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"tlv-discard"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TlvDiscard (leaf): The total number of LLDP tlvs discarded.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "tlv-discard"
//	Path from root:       "/lldps/lldp-interface/state/counters/tlv-discard"
func (n *LldpInterface_CountersPathAny) TlvDiscard() *LldpInterface_Counters_TlvDiscardPathAny {
	ps := &LldpInterface_Counters_TlvDiscardPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tlv-discard"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TlvUnknown (leaf): The total number of LLDP unknown tlvs received.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "tlv-unknown"
//	Path from root:       "/lldps/lldp-interface/state/counters/tlv-unknown"
func (n *LldpInterface_CountersPath) TlvUnknown() *LldpInterface_Counters_TlvUnknownPath {
	ps := &LldpInterface_Counters_TlvUnknownPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"tlv-unknown"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TlvUnknown (leaf): The total number of LLDP unknown tlvs received.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "tlv-unknown"
//	Path from root:       "/lldps/lldp-interface/state/counters/tlv-unknown"
func (n *LldpInterface_CountersPathAny) TlvUnknown() *LldpInterface_Counters_TlvUnknownPathAny {
	ps := &LldpInterface_Counters_TlvUnknownPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tlv-unknown"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *LldpInterface_CountersPath) State() ygnmi.SingletonQuery[*oc.LldpInterface_Counters] {
	return ygnmi.NewSingletonQuery[*oc.LldpInterface_Counters](
		"LldpInterface_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *LldpInterface_CountersPathAny) State() ygnmi.WildcardQuery[*oc.LldpInterface_Counters] {
	return ygnmi.NewWildcardQuery[*oc.LldpInterface_Counters](
		"LldpInterface_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// LldpInterface_LldpNeighborDatabasePath represents the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database YANG schema element.
type LldpInterface_LldpNeighborDatabasePath struct {
	*ygnmi.NodePath
}

// LldpInterface_LldpNeighborDatabasePathAny represents the wildcard version of the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database YANG schema element.
type LldpInterface_LldpNeighborDatabasePathAny struct {
	*ygnmi.NodePath
}

// LldpNeighborAny (list): A list of LLDP neighbors.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "lldp-neighbors/lldp-neighbor"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor"
func (n *LldpInterface_LldpNeighborDatabasePath) LldpNeighborAny() *LldpInterface_LldpNeighborDatabase_LldpNeighborPathAny {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lldp-neighbors", "lldp-neighbor"},
			map[string]interface{}{"neighbor_id": "*"},
			n,
		),
	}
	return ps
}

// LldpNeighborAny (list): A list of LLDP neighbors.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "lldp-neighbors/lldp-neighbor"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor"
func (n *LldpInterface_LldpNeighborDatabasePathAny) LldpNeighborAny() *LldpInterface_LldpNeighborDatabase_LldpNeighborPathAny {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lldp-neighbors", "lldp-neighbor"},
			map[string]interface{}{"neighbor_id": "*"},
			n,
		),
	}
	return ps
}

// LldpNeighbor (list): A list of LLDP neighbors.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "lldp-neighbors/lldp-neighbor"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor"
//
//	NeighborId: string
func (n *LldpInterface_LldpNeighborDatabasePath) LldpNeighbor(NeighborId string) *LldpInterface_LldpNeighborDatabase_LldpNeighborPath {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighborPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"lldp-neighbors", "lldp-neighbor"},
			map[string]interface{}{"neighbor_id": NeighborId},
			n,
		),
	}
	return ps
}

// LldpNeighbor (list): A list of LLDP neighbors.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "lldp-neighbors/lldp-neighbor"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor"
//
//	NeighborId: string
func (n *LldpInterface_LldpNeighborDatabasePathAny) LldpNeighbor(NeighborId string) *LldpInterface_LldpNeighborDatabase_LldpNeighborPathAny {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lldp-neighbors", "lldp-neighbor"},
			map[string]interface{}{"neighbor_id": NeighborId},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *LldpInterface_LldpNeighborDatabasePath) State() ygnmi.SingletonQuery[*oc.LldpInterface_LldpNeighborDatabase] {
	return ygnmi.NewSingletonQuery[*oc.LldpInterface_LldpNeighborDatabase](
		"LldpInterface_LldpNeighborDatabase",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *LldpInterface_LldpNeighborDatabasePathAny) State() ygnmi.WildcardQuery[*oc.LldpInterface_LldpNeighborDatabase] {
	return ygnmi.NewWildcardQuery[*oc.LldpInterface_LldpNeighborDatabase](
		"LldpInterface_LldpNeighborDatabase",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_AgePath represents the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/age YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_AgePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_AgePathAny represents the wildcard version of the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/age YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_AgePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/age"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/age"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_AgePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "age"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor).Age
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/age"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/age"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_AgePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "age"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor).Age
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_ChassisIdPath represents the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/chassis-id YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_ChassisIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_ChassisIdPathAny represents the wildcard version of the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/chassis-id YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_ChassisIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/chassis-id"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/chassis-id"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_ChassisIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "chassis-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor).ChassisId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/chassis-id"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/chassis-id"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_ChassisIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "chassis-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor).ChassisId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_ChassisIdTypePath represents the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/chassis-id-type YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_ChassisIdTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_ChassisIdTypePathAny represents the wildcard version of the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/chassis-id-type YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_ChassisIdTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/chassis-id-type"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/chassis-id-type"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_ChassisIdTypePath) State() ygnmi.SingletonQuery[oc.E_LldpNeighbor_ChassisIdType] {
	return ygnmi.NewSingletonQuery[oc.E_LldpNeighbor_ChassisIdType](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "chassis-id-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_LldpNeighbor_ChassisIdType, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor).ChassisIdType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/chassis-id-type"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/chassis-id-type"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_ChassisIdTypePathAny) State() ygnmi.WildcardQuery[oc.E_LldpNeighbor_ChassisIdType] {
	return ygnmi.NewWildcardQuery[oc.E_LldpNeighbor_ChassisIdType](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "chassis-id-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_LldpNeighbor_ChassisIdType, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor).ChassisIdType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_LastUpdatePath represents the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/last_update YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_LastUpdatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_LastUpdatePathAny represents the wildcard version of the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/last_update YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_LastUpdatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/last_update"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/last_update"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_LastUpdatePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last_update"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor).LastUpdate
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/last_update"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/last_update"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_LastUpdatePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last_update"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor).LastUpdate
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_ManagementAddressPath represents the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/management-address YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_ManagementAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_ManagementAddressPathAny represents the wildcard version of the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/management-address YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_ManagementAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/management-address"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/management-address"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_ManagementAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "management-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor).ManagementAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/management-address"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/management-address"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_ManagementAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "management-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor).ManagementAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_ManagementAddressTypePath represents the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/management-address-type YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_ManagementAddressTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_ManagementAddressTypePathAny represents the wildcard version of the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/management-address-type YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_ManagementAddressTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/management-address-type"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/management-address-type"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_ManagementAddressTypePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "management-address-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor).ManagementAddressType
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/management-address-type"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/management-address-type"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_ManagementAddressTypePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "management-address-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor).ManagementAddressType
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_NeighborIdPath represents the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/neighbor_id YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_NeighborIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_NeighborIdPathAny represents the wildcard version of the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/neighbor_id YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_NeighborIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/neighbor_id"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/neighbor_id"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_NeighborIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "neighbor_id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor).NeighborId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/neighbor_id"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/neighbor_id"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_NeighborIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "neighbor_id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor).NeighborId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "neighbor_id"
//	Path from root:       ""
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_NeighborIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"neighbor_id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor).NeighborId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "neighbor_id"
//	Path from root:       ""
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_NeighborIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"neighbor_id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor).NeighborId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_PortDescriptionPath represents the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/port-description YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_PortDescriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_PortDescriptionPathAny represents the wildcard version of the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/port-description YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_PortDescriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/port-description"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/port-description"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_PortDescriptionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "port-description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor).PortDescription
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/port-description"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/port-description"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_PortDescriptionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "port-description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor).PortDescription
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_PortIdPath represents the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/port-id YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_PortIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_PortIdPathAny represents the wildcard version of the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/port-id YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_PortIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/port-id"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/port-id"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_PortIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "port-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor).PortId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/port-id"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/port-id"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_PortIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "port-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor).PortId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_PortIdTypePath represents the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/port-id-type YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_PortIdTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_PortIdTypePathAny represents the wildcard version of the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/port-id-type YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_PortIdTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/port-id-type"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/port-id-type"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_PortIdTypePath) State() ygnmi.SingletonQuery[oc.E_LldpNeighbor_PortIdType] {
	return ygnmi.NewSingletonQuery[oc.E_LldpNeighbor_PortIdType](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "port-id-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_LldpNeighbor_PortIdType, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor).PortIdType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/port-id-type"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/port-id-type"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_PortIdTypePathAny) State() ygnmi.WildcardQuery[oc.E_LldpNeighbor_PortIdType] {
	return ygnmi.NewWildcardQuery[oc.E_LldpNeighbor_PortIdType](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "port-id-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_LldpNeighbor_PortIdType, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor).PortIdType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_SystemDescriptionPath represents the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/system-description YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_SystemDescriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_SystemDescriptionPathAny represents the wildcard version of the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/system-description YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_SystemDescriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/system-description"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/system-description"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_SystemDescriptionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "system-description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor).SystemDescription
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/system-description"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/system-description"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_SystemDescriptionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "system-description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor).SystemDescription
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_SystemNamePath represents the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/system-name YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_SystemNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_SystemNamePathAny represents the wildcard version of the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/system-name YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_SystemNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/system-name"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/system-name"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_SystemNamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "system-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor).SystemName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/system-name"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/system-name"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_SystemNamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "system-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor).SystemName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_TtlPath represents the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/ttl YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_TtlPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_TtlPathAny represents the wildcard version of the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/ttl YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_TtlPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/ttl"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/ttl"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_TtlPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ttl"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor).Ttl
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/ttl"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/ttl"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_TtlPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ttl"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor).Ttl
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// LldpInterface_LldpNeighborDatabase_LldpNeighborPath represents the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighborPath struct {
	*ygnmi.NodePath
}

// LldpInterface_LldpNeighborDatabase_LldpNeighborPathAny represents the wildcard version of the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighborPathAny struct {
	*ygnmi.NodePath
}

// LldpInterface_LldpNeighborDatabase_LldpNeighborPathMap represents the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighborPathMap struct {
	*ygnmi.NodePath
}

// LldpInterface_LldpNeighborDatabase_LldpNeighborPathMapAny represents the wildcard version of the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighborPathMapAny struct {
	*ygnmi.NodePath
}

// Age (leaf): Age since discovery in seconds.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/age"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/age"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighborPath) Age() *LldpInterface_LldpNeighborDatabase_LldpNeighbor_AgePath {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_AgePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "age"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Age (leaf): Age since discovery in seconds.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/age"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/age"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighborPathAny) Age() *LldpInterface_LldpNeighborDatabase_LldpNeighbor_AgePathAny {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_AgePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "age"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CapabilitiesAny (list): The list of capabilities of a LLDP neighbor.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "capabilities"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/capabilities"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighborPath) CapabilitiesAny() *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CapabilitiesPathAny {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_CapabilitiesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"capabilities"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// CapabilitiesAny (list): The list of capabilities of a LLDP neighbor.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "capabilities"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/capabilities"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighborPathAny) CapabilitiesAny() *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CapabilitiesPathAny {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_CapabilitiesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"capabilities"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Capabilities (list): The list of capabilities of a LLDP neighbor.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "capabilities"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/capabilities"
//
//	Name: oc.E_Capabilities_Name
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighborPath) Capabilities(Name oc.E_Capabilities_Name) *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CapabilitiesPath {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_CapabilitiesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"capabilities"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Capabilities (list): The list of capabilities of a LLDP neighbor.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "capabilities"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/capabilities"
//
//	Name: oc.E_Capabilities_Name
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighborPathAny) Capabilities(Name oc.E_Capabilities_Name) *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CapabilitiesPathAny {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_CapabilitiesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"capabilities"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// ChassisId (leaf): The Chassis ID is a mandatory TLV which identifies the chassis component of
// the endpoint identifier associated with the transmitting LLDP agent.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/chassis-id"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/chassis-id"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighborPath) ChassisId() *LldpInterface_LldpNeighborDatabase_LldpNeighbor_ChassisIdPath {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_ChassisIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "chassis-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ChassisId (leaf): The Chassis ID is a mandatory TLV which identifies the chassis component of
// the endpoint identifier associated with the transmitting LLDP agent.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/chassis-id"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/chassis-id"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighborPathAny) ChassisId() *LldpInterface_LldpNeighborDatabase_LldpNeighbor_ChassisIdPathAny {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_ChassisIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "chassis-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ChassisIdType (leaf): This field identifies the format and source of the chassis identifier string.
// It is an enumerator defined by the LldpChassisIdSubtype object from IEEE 802.1AB MIB.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/chassis-id-type"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/chassis-id-type"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighborPath) ChassisIdType() *LldpInterface_LldpNeighborDatabase_LldpNeighbor_ChassisIdTypePath {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_ChassisIdTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "chassis-id-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ChassisIdType (leaf): This field identifies the format and source of the chassis identifier string.
// It is an enumerator defined by the LldpChassisIdSubtype object from IEEE 802.1AB MIB.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/chassis-id-type"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/chassis-id-type"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighborPathAny) ChassisIdType() *LldpInterface_LldpNeighborDatabase_LldpNeighbor_ChassisIdTypePathAny {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_ChassisIdTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "chassis-id-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CustomTlvAny (list): The list of custom tlvs from a LLDP neighbor.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "custom-tlv"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/custom-tlv"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighborPath) CustomTlvAny() *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlvPathAny {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"custom-tlv"},
			map[string]interface{}{"custom-type": "*", "oui": "*", "oui-subtype": "*"},
			n,
		),
	}
	return ps
}

// CustomTlvAny (list): The list of custom tlvs from a LLDP neighbor.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "custom-tlv"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/custom-tlv"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighborPathAny) CustomTlvAny() *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlvPathAny {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"custom-tlv"},
			map[string]interface{}{"custom-type": "*", "oui": "*", "oui-subtype": "*"},
			n,
		),
	}
	return ps
}

// WithCustomType sets LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlvPathAny's key "custom-type" to the specified value.
// CustomType: uint32
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlvPathAny) WithCustomType(CustomType uint32) *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlvPathAny {
	ygnmi.ModifyKey(n.NodePath, "custom-type", CustomType)
	return n
}

// WithOui sets LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlvPathAny's key "oui" to the specified value.
// Oui: string
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlvPathAny) WithOui(Oui string) *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlvPathAny {
	ygnmi.ModifyKey(n.NodePath, "oui", Oui)
	return n
}

// WithOuiSubtype sets LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlvPathAny's key "oui-subtype" to the specified value.
// OuiSubtype: uint32
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlvPathAny) WithOuiSubtype(OuiSubtype uint32) *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlvPathAny {
	ygnmi.ModifyKey(n.NodePath, "oui-subtype", OuiSubtype)
	return n
}

// CustomTlv (list): The list of custom tlvs from a LLDP neighbor.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "custom-tlv"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/custom-tlv"
//
//	CustomType: uint32
//	Oui: string
//	OuiSubtype: uint32
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighborPath) CustomTlv(CustomType uint32, Oui string, OuiSubtype uint32) *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlvPath {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlvPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"custom-tlv"},
			map[string]interface{}{"custom-type": CustomType, "oui": Oui, "oui-subtype": OuiSubtype},
			n,
		),
	}
	return ps
}

// CustomTlv (list): The list of custom tlvs from a LLDP neighbor.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "custom-tlv"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/custom-tlv"
//
//	CustomType: uint32
//	Oui: string
//	OuiSubtype: uint32
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighborPathAny) CustomTlv(CustomType uint32, Oui string, OuiSubtype uint32) *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlvPathAny {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"custom-tlv"},
			map[string]interface{}{"custom-type": CustomType, "oui": Oui, "oui-subtype": OuiSubtype},
			n,
		),
	}
	return ps
}

// LastUpdate (leaf): Seconds since last update received.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/last_update"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/last_update"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighborPath) LastUpdate() *LldpInterface_LldpNeighborDatabase_LldpNeighbor_LastUpdatePath {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_LastUpdatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last_update"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastUpdate (leaf): Seconds since last update received.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/last_update"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/last_update"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighborPathAny) LastUpdate() *LldpInterface_LldpNeighborDatabase_LldpNeighbor_LastUpdatePathAny {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_LastUpdatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last_update"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ManagementAddress (leaf): The Management Address is a mandatory TLV which identifies a network address associated with the
// local LLDP agent, which can be used to reach the agent on the port identified in the Port ID TLV.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/management-address"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/management-address"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighborPath) ManagementAddress() *LldpInterface_LldpNeighborDatabase_LldpNeighbor_ManagementAddressPath {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_ManagementAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "management-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ManagementAddress (leaf): The Management Address is a mandatory TLV which identifies a network address associated with the
// local LLDP agent, which can be used to reach the agent on the port identified in the Port ID TLV.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/management-address"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/management-address"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighborPathAny) ManagementAddress() *LldpInterface_LldpNeighborDatabase_LldpNeighbor_ManagementAddressPathAny {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_ManagementAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "management-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ManagementAddressType (leaf): The enumerated value for the network address type identified in this TLV. This enumeration is
// defined in the 'Assigned Numbers' RFC [RFC3232] and the ianaAddressFamilyNumbers object.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/management-address-type"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/management-address-type"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighborPath) ManagementAddressType() *LldpInterface_LldpNeighborDatabase_LldpNeighbor_ManagementAddressTypePath {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_ManagementAddressTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "management-address-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ManagementAddressType (leaf): The enumerated value for the network address type identified in this TLV. This enumeration is
// defined in the 'Assigned Numbers' RFC [RFC3232] and the ianaAddressFamilyNumbers object.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/management-address-type"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/management-address-type"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighborPathAny) ManagementAddressType() *LldpInterface_LldpNeighborDatabase_LldpNeighbor_ManagementAddressTypePathAny {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_ManagementAddressTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "management-address-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborId (leaf): System generated identifier for the neighbor on the interface.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "*/neighbor_id"
//	Path from root:       "/lldps/lldp-interface/*/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/*/neighbor_id"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighborPath) NeighborId() *LldpInterface_LldpNeighborDatabase_LldpNeighbor_NeighborIdPath {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_NeighborIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "neighbor_id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborId (leaf): System generated identifier for the neighbor on the interface.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "*/neighbor_id"
//	Path from root:       "/lldps/lldp-interface/*/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/*/neighbor_id"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighborPathAny) NeighborId() *LldpInterface_LldpNeighborDatabase_LldpNeighbor_NeighborIdPathAny {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_NeighborIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "neighbor_id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PortDescription (leaf): The binary string containing the actual port identifier for the port which this LLDP PDU was
// transmitted. The source and format of this field is defined by PtopoPortId from RFC2922.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/port-description"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/port-description"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighborPath) PortDescription() *LldpInterface_LldpNeighborDatabase_LldpNeighbor_PortDescriptionPath {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_PortDescriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "port-description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PortDescription (leaf): The binary string containing the actual port identifier for the port which this LLDP PDU was
// transmitted. The source and format of this field is defined by PtopoPortId from RFC2922.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/port-description"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/port-description"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighborPathAny) PortDescription() *LldpInterface_LldpNeighborDatabase_LldpNeighbor_PortDescriptionPathAny {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_PortDescriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "port-description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PortId (leaf): The Port ID is a mandatory TLV which identifies the port component of the endpoint identifier associated
// with the transmitting LLDP agent. If the specified port is an IEEE 802.3 Repeater port, then this TLV
// is optional.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/port-id"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/port-id"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighborPath) PortId() *LldpInterface_LldpNeighborDatabase_LldpNeighbor_PortIdPath {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_PortIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "port-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PortId (leaf): The Port ID is a mandatory TLV which identifies the port component of the endpoint identifier associated
// with the transmitting LLDP agent. If the specified port is an IEEE 802.3 Repeater port, then this TLV
// is optional.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/port-id"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/port-id"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighborPathAny) PortId() *LldpInterface_LldpNeighborDatabase_LldpNeighbor_PortIdPathAny {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_PortIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "port-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PortIdType (leaf): This field identifies the format and source of the port identifier string. It is an
// enumerator defined by the PtopoPortIdType object from RFC2922.This field identifies the
// format and source of the chassis identifier string.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/port-id-type"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/port-id-type"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighborPath) PortIdType() *LldpInterface_LldpNeighborDatabase_LldpNeighbor_PortIdTypePath {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_PortIdTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "port-id-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PortIdType (leaf): This field identifies the format and source of the port identifier string. It is an
// enumerator defined by the PtopoPortIdType object from RFC2922.This field identifies the
// format and source of the chassis identifier string.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/port-id-type"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/port-id-type"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighborPathAny) PortIdType() *LldpInterface_LldpNeighborDatabase_LldpNeighbor_PortIdTypePathAny {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_PortIdTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "port-id-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SystemDescription (leaf): The system description field shall contain an alpha-numeric string that
// is the textual description of the network entity. The system description
// should include the full name and version identification of the system's
// hardware type, software operating system, and networking software. If
// implementations support IETF RFC 3418, the sysDescr object should be used
// for this field.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/system-description"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/system-description"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighborPath) SystemDescription() *LldpInterface_LldpNeighborDatabase_LldpNeighbor_SystemDescriptionPath {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_SystemDescriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "system-description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SystemDescription (leaf): The system description field shall contain an alpha-numeric string that
// is the textual description of the network entity. The system description
// should include the full name and version identification of the system's
// hardware type, software operating system, and networking software. If
// implementations support IETF RFC 3418, the sysDescr object should be used
// for this field.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/system-description"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/system-description"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighborPathAny) SystemDescription() *LldpInterface_LldpNeighborDatabase_LldpNeighbor_SystemDescriptionPathAny {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_SystemDescriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "system-description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SystemName (leaf): The system name field shall contain an alpha-numeric string that
// indicates the system's administratively assigned name. The system name
// should be the system's fully qualified domain name. If implementations
// support IETF RFC 3418, the sysName object should be used for this field.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/system-name"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/system-name"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighborPath) SystemName() *LldpInterface_LldpNeighborDatabase_LldpNeighbor_SystemNamePath {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_SystemNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "system-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SystemName (leaf): The system name field shall contain an alpha-numeric string that
// indicates the system's administratively assigned name. The system name
// should be the system's fully qualified domain name. If implementations
// support IETF RFC 3418, the sysName object should be used for this field.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/system-name"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/system-name"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighborPathAny) SystemName() *LldpInterface_LldpNeighborDatabase_LldpNeighbor_SystemNamePathAny {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_SystemNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "system-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ttl (leaf): The time-to-live (TTL) is a mandatory TLV which indicates how long information from the neighbor
// should be considered valid.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/ttl"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/ttl"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighborPath) Ttl() *LldpInterface_LldpNeighborDatabase_LldpNeighbor_TtlPath {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_TtlPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ttl"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ttl (leaf): The time-to-live (TTL) is a mandatory TLV which indicates how long information from the neighbor
// should be considered valid.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/ttl"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/state/ttl"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighborPathAny) Ttl() *LldpInterface_LldpNeighborDatabase_LldpNeighbor_TtlPathAny {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_TtlPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ttl"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighborPath) State() ygnmi.SingletonQuery[*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor] {
	return ygnmi.NewSingletonQuery[*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighborPathAny) State() ygnmi.WildcardQuery[*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor] {
	return ygnmi.NewWildcardQuery[*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities_EnabledPath represents the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/capabilities/state/enabled YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities_EnabledPathAny represents the wildcard version of the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/capabilities/state/enabled YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/enabled"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/capabilities/state/enabled"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/enabled"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/capabilities/state/enabled"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities_NamePath represents the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/capabilities/state/name YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities_NamePathAny represents the wildcard version of the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/capabilities/state/name YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/name"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/capabilities/state/name"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities_NamePath) State() ygnmi.SingletonQuery[oc.E_Capabilities_Name] {
	return ygnmi.NewSingletonQuery[oc.E_Capabilities_Name](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Capabilities_Name, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities).Name
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/name"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/capabilities/state/name"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities_NamePathAny) State() ygnmi.WildcardQuery[oc.E_Capabilities_Name] {
	return ygnmi.NewWildcardQuery[oc.E_Capabilities_Name](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Capabilities_Name, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities).Name
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities_NamePath) Config() ygnmi.ConfigQuery[oc.E_Capabilities_Name] {
	return ygnmi.NewConfigQuery[oc.E_Capabilities_Name](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Capabilities_Name, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities).Name
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities_NamePathAny) Config() ygnmi.WildcardQuery[oc.E_Capabilities_Name] {
	return ygnmi.NewWildcardQuery[oc.E_Capabilities_Name](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Capabilities_Name, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities).Name
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_CapabilitiesPath represents the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/capabilities YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_CapabilitiesPath struct {
	*ygnmi.NodePath
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_CapabilitiesPathAny represents the wildcard version of the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/capabilities YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_CapabilitiesPathAny struct {
	*ygnmi.NodePath
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_CapabilitiesPathMap represents the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/capabilities YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_CapabilitiesPathMap struct {
	*ygnmi.NodePath
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_CapabilitiesPathMapAny represents the wildcard version of the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/capabilities YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_CapabilitiesPathMapAny struct {
	*ygnmi.NodePath
}

// Enabled (leaf): Indicates whether the corresponding system capability is enabled on the neighbor.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/enabled"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/capabilities/state/enabled"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CapabilitiesPath) Enabled() *LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities_EnabledPath {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Indicates whether the corresponding system capability is enabled on the neighbor.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/enabled"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/capabilities/state/enabled"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CapabilitiesPathAny) Enabled() *LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities_EnabledPathAny {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): The integer value identifying the type of information contained in the value field.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "*/name"
//	Path from root:       "/lldps/lldp-interface/*/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/capabilities/*/name"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CapabilitiesPath) Name() *LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities_NamePath {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): The integer value identifying the type of information contained in the value field.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "*/name"
//	Path from root:       "/lldps/lldp-interface/*/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/capabilities/*/name"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CapabilitiesPathAny) Name() *LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities_NamePathAny {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CapabilitiesPath) State() ygnmi.SingletonQuery[*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities] {
	return ygnmi.NewSingletonQuery[*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CapabilitiesPathAny) State() ygnmi.WildcardQuery[*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities] {
	return ygnmi.NewWildcardQuery[*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_CustomTypePath represents the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/custom-tlv/state/custom-type YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_CustomTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_CustomTypePathAny represents the wildcard version of the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/custom-tlv/state/custom-type YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_CustomTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/custom-type"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/custom-tlv/state/custom-type"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_CustomTypePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "custom-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv).CustomType
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/custom-type"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/custom-tlv/state/custom-type"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_CustomTypePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "custom-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv).CustomType
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "custom-type"
//	Path from root:       ""
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_CustomTypePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"custom-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv).CustomType
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "custom-type"
//	Path from root:       ""
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_CustomTypePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"custom-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv).CustomType
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_OuiPath represents the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/custom-tlv/state/oui YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_OuiPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_OuiPathAny represents the wildcard version of the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/custom-tlv/state/oui YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_OuiPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/oui"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/custom-tlv/state/oui"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_OuiPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oui"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv).Oui
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/oui"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/custom-tlv/state/oui"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_OuiPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oui"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv).Oui
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "oui"
//	Path from root:       ""
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_OuiPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"oui"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv).Oui
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "oui"
//	Path from root:       ""
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_OuiPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"oui"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv).Oui
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_OuiSubtypePath represents the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/custom-tlv/state/oui-subtype YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_OuiSubtypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_OuiSubtypePathAny represents the wildcard version of the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/custom-tlv/state/oui-subtype YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_OuiSubtypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/oui-subtype"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/custom-tlv/state/oui-subtype"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_OuiSubtypePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oui-subtype"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv).OuiSubtype
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "state/oui-subtype"
//	Path from root:       "/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/custom-tlv/state/oui-subtype"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_OuiSubtypePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oui-subtype"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv).OuiSubtype
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "oui-subtype"
//	Path from root:       ""
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_OuiSubtypePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"oui-subtype"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv).OuiSubtype
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "oui-subtype"
//	Path from root:       ""
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_OuiSubtypePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"oui-subtype"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv).OuiSubtype
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlvPath represents the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/custom-tlv YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlvPath struct {
	*ygnmi.NodePath
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlvPathAny represents the wildcard version of the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/custom-tlv YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlvPathAny struct {
	*ygnmi.NodePath
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlvPathMap represents the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/custom-tlv YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlvPathMap struct {
	*ygnmi.NodePath
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlvPathMapAny represents the wildcard version of the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/custom-tlv YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlvPathMapAny struct {
	*ygnmi.NodePath
}

// CustomType (leaf): The integer value identifying the type of information contained in the value field.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "*/custom-type"
//	Path from root:       "/lldps/lldp-interface/*/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/custom-tlv/*/custom-type"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlvPath) CustomType() *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_CustomTypePath {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_CustomTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "custom-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CustomType (leaf): The integer value identifying the type of information contained in the value field.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "*/custom-type"
//	Path from root:       "/lldps/lldp-interface/*/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/custom-tlv/*/custom-type"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlvPathAny) CustomType() *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_CustomTypePathAny {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_CustomTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "custom-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Oui (leaf): The organizationally unique identifier field shall contain the organization's OUI as defined
// in Clause 9 of IEEE Std 802. The high-order octet is 0 and the low-order 3 octets are the SMI
// Network Management Private Enterprise Code of the Vendor in network byte order, as defined in
// the 'Assigned Numbers' RFC [RFC3232].
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "*/oui"
//	Path from root:       "/lldps/lldp-interface/*/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/custom-tlv/*/oui"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlvPath) Oui() *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_OuiPath {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_OuiPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "oui"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Oui (leaf): The organizationally unique identifier field shall contain the organization's OUI as defined
// in Clause 9 of IEEE Std 802. The high-order octet is 0 and the low-order 3 octets are the SMI
// Network Management Private Enterprise Code of the Vendor in network byte order, as defined in
// the 'Assigned Numbers' RFC [RFC3232].
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "*/oui"
//	Path from root:       "/lldps/lldp-interface/*/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/custom-tlv/*/oui"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlvPathAny) Oui() *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_OuiPathAny {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_OuiPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "oui"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OuiSubtype (leaf): The organizationally defined subtype field shall contain a unique subtype value assigned by the
// defining organization.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "*/oui-subtype"
//	Path from root:       "/lldps/lldp-interface/*/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/custom-tlv/*/oui-subtype"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlvPath) OuiSubtype() *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_OuiSubtypePath {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_OuiSubtypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "oui-subtype"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OuiSubtype (leaf): The organizationally defined subtype field shall contain a unique subtype value assigned by the
// defining organization.
//
//	Defining module:      "open-traffic-generator-lldp"
//	Instantiating module: "open-traffic-generator-lldp"
//	Path from parent:     "*/oui-subtype"
//	Path from root:       "/lldps/lldp-interface/*/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/custom-tlv/*/oui-subtype"
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlvPathAny) OuiSubtype() *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_OuiSubtypePathAny {
	ps := &LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_OuiSubtypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "oui-subtype"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlvPath) State() ygnmi.SingletonQuery[*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv] {
	return ygnmi.NewSingletonQuery[*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlvPathAny) State() ygnmi.WildcardQuery[*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv] {
	return ygnmi.NewWildcardQuery[*oc.LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv](
		"LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

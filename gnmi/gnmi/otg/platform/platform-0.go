/*
Package platform is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.20)
using the following YANG input files:
  - models-yang/models/bgp/open-traffic-generator-bgp.yang
  - models-yang/models/dhcp/v4client/open-traffic-generator-dhcpv4client.yang
  - models-yang/models/dhcp/v4server/open-traffic-generator-dhcpv4server.yang
  - models-yang/models/dhcp/v6client/open-traffic-generator-dhcpv6client.yang
  - models-yang/models/dhcp/v6server/open-traffic-generator-dhcpv6server.yang
  - models-yang/models/discovery/open-traffic-generator-discovery.yang
  - models-yang/models/discovery/open-traffic-generator-discovery-interfaces.yang
  - models-yang/models/flow/open-traffic-generator-flow.yang
  - models-yang/models/interface/open-traffic-generator-port.yang
  - models-yang/models/isis/open-traffic-generator-isis.yang
  - models-yang/models/lacp/open-traffic-generator-lacp.yang
  - models-yang/models/lag/open-traffic-generator-lag.yang
  - models-yang/models/lldp/open-traffic-generator-lldp.yang
  - models-yang/models/ospfv2/open-traffic-generator-ospfv2.yang
  - models-yang/models/ospfv3/open-traffic-generator-ospfv3.yang
  - models-yang/models/platform/open-traffic-generator-platform.yang
  - models-yang/models/rsvp/open-traffic-generator-rsvp.yang
  - models-yang/models/types/open-traffic-generator-types.yang

Imported modules were sourced from:
  - models-yang/models/...
*/
package platform

import (
	"reflect"

	oc "github.com/openconfig/ondatra/gnmi/otg"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Component_NamePath represents the /open-traffic-generator-platform/components/component/state/name YANG schema element.
type Component_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_NamePathAny represents the wildcard version of the /open-traffic-generator-platform/components/component/state/name YANG schema element.
type Component_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-platform"
//	Instantiating module: "open-traffic-generator-platform"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/state/name"
func (n *Component_NamePath) State() ygnmi.SingletonQuery[oc.E_Component_Name] {
	return ygnmi.NewSingletonQuery[oc.E_Component_Name](
		"Component",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Component_Name, bool) {
			ret := gs.(*oc.Component).Name
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-platform"
//	Instantiating module: "open-traffic-generator-platform"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/state/name"
func (n *Component_NamePathAny) State() ygnmi.WildcardQuery[oc.E_Component_Name] {
	return ygnmi.NewWildcardQuery[oc.E_Component_Name](
		"Component",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Component_Name, bool) {
			ret := gs.(*oc.Component).Name
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-platform"
//	Instantiating module: "open-traffic-generator-platform"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *Component_NamePath) Config() ygnmi.ConfigQuery[oc.E_Component_Name] {
	return ygnmi.NewConfigQuery[oc.E_Component_Name](
		"Component",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Component_Name, bool) {
			ret := gs.(*oc.Component).Name
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-platform"
//	Instantiating module: "open-traffic-generator-platform"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *Component_NamePathAny) Config() ygnmi.WildcardQuery[oc.E_Component_Name] {
	return ygnmi.NewWildcardQuery[oc.E_Component_Name](
		"Component",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Component_Name, bool) {
			ret := gs.(*oc.Component).Name
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_SdkVersionPath represents the /open-traffic-generator-platform/components/component/state/sdk-version YANG schema element.
type Component_SdkVersionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_SdkVersionPathAny represents the wildcard version of the /open-traffic-generator-platform/components/component/state/sdk-version YANG schema element.
type Component_SdkVersionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-platform"
//	Instantiating module: "open-traffic-generator-platform"
//	Path from parent:     "state/sdk-version"
//	Path from root:       "/components/component/state/sdk-version"
func (n *Component_SdkVersionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sdk-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).SdkVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-platform"
//	Instantiating module: "open-traffic-generator-platform"
//	Path from parent:     "state/sdk-version"
//	Path from root:       "/components/component/state/sdk-version"
func (n *Component_SdkVersionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sdk-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).SdkVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_SoftwareVersionPath represents the /open-traffic-generator-platform/components/component/state/software-version YANG schema element.
type Component_SoftwareVersionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_SoftwareVersionPathAny represents the wildcard version of the /open-traffic-generator-platform/components/component/state/software-version YANG schema element.
type Component_SoftwareVersionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-platform"
//	Instantiating module: "open-traffic-generator-platform"
//	Path from parent:     "state/software-version"
//	Path from root:       "/components/component/state/software-version"
func (n *Component_SoftwareVersionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "software-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).SoftwareVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-platform"
//	Instantiating module: "open-traffic-generator-platform"
//	Path from parent:     "state/software-version"
//	Path from root:       "/components/component/state/software-version"
func (n *Component_SoftwareVersionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "software-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).SoftwareVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// ComponentPath represents the /open-traffic-generator-platform/components/component YANG schema element.
type ComponentPath struct {
	*ygnmi.NodePath
}

// ComponentPathAny represents the wildcard version of the /open-traffic-generator-platform/components/component YANG schema element.
type ComponentPathAny struct {
	*ygnmi.NodePath
}

// ComponentPathMap represents the /open-traffic-generator-platform/components/component YANG schema element.
type ComponentPathMap struct {
	*ygnmi.NodePath
}

// ComponentPathMapAny represents the wildcard version of the /open-traffic-generator-platform/components/component YANG schema element.
type ComponentPathMapAny struct {
	*ygnmi.NodePath
}

// Name (leaf): The name of the OTG component
//
//	Defining module:      "open-traffic-generator-platform"
//	Instantiating module: "open-traffic-generator-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/*/name"
func (n *ComponentPath) Name() *Component_NamePath {
	ps := &Component_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): The name of the OTG component
//
//	Defining module:      "open-traffic-generator-platform"
//	Instantiating module: "open-traffic-generator-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/*/name"
func (n *ComponentPathAny) Name() *Component_NamePathAny {
	ps := &Component_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SdkVersion (leaf): snappi/gosnappi version information of an OTG component
//
//	Defining module:      "open-traffic-generator-platform"
//	Instantiating module: "open-traffic-generator-platform"
//	Path from parent:     "state/sdk-version"
//	Path from root:       "/components/component/state/sdk-version"
func (n *ComponentPath) SdkVersion() *Component_SdkVersionPath {
	ps := &Component_SdkVersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sdk-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SdkVersion (leaf): snappi/gosnappi version information of an OTG component
//
//	Defining module:      "open-traffic-generator-platform"
//	Instantiating module: "open-traffic-generator-platform"
//	Path from parent:     "state/sdk-version"
//	Path from root:       "/components/component/state/sdk-version"
func (n *ComponentPathAny) SdkVersion() *Component_SdkVersionPathAny {
	ps := &Component_SdkVersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sdk-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SoftwareVersion (leaf): Software version information of an OTG component
//
//	Defining module:      "open-traffic-generator-platform"
//	Instantiating module: "open-traffic-generator-platform"
//	Path from parent:     "state/software-version"
//	Path from root:       "/components/component/state/software-version"
func (n *ComponentPath) SoftwareVersion() *Component_SoftwareVersionPath {
	ps := &Component_SoftwareVersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "software-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SoftwareVersion (leaf): Software version information of an OTG component
//
//	Defining module:      "open-traffic-generator-platform"
//	Instantiating module: "open-traffic-generator-platform"
//	Path from parent:     "state/software-version"
//	Path from root:       "/components/component/state/software-version"
func (n *ComponentPathAny) SoftwareVersion() *Component_SoftwareVersionPathAny {
	ps := &Component_SoftwareVersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "software-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *ComponentPath) State() ygnmi.SingletonQuery[*oc.Component] {
	return ygnmi.NewSingletonQuery[*oc.Component](
		"Component",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *ComponentPathAny) State() ygnmi.WildcardQuery[*oc.Component] {
	return ygnmi.NewWildcardQuery[*oc.Component](
		"Component",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

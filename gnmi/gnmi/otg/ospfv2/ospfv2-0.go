/*
Package ospfv2 is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.20)
using the following YANG input files:
  - models-yang/models/bgp/open-traffic-generator-bgp.yang
  - models-yang/models/dhcp/v4client/open-traffic-generator-dhcpv4client.yang
  - models-yang/models/dhcp/v4server/open-traffic-generator-dhcpv4server.yang
  - models-yang/models/dhcp/v6client/open-traffic-generator-dhcpv6client.yang
  - models-yang/models/dhcp/v6server/open-traffic-generator-dhcpv6server.yang
  - models-yang/models/discovery/open-traffic-generator-discovery.yang
  - models-yang/models/discovery/open-traffic-generator-discovery-interfaces.yang
  - models-yang/models/flow/open-traffic-generator-flow.yang
  - models-yang/models/interface/open-traffic-generator-port.yang
  - models-yang/models/isis/open-traffic-generator-isis.yang
  - models-yang/models/lacp/open-traffic-generator-lacp.yang
  - models-yang/models/lag/open-traffic-generator-lag.yang
  - models-yang/models/lldp/open-traffic-generator-lldp.yang
  - models-yang/models/ospfv2/open-traffic-generator-ospfv2.yang
  - models-yang/models/ospfv3/open-traffic-generator-ospfv3.yang
  - models-yang/models/platform/open-traffic-generator-platform.yang
  - models-yang/models/rsvp/open-traffic-generator-rsvp.yang
  - models-yang/models/types/open-traffic-generator-types.yang

Imported modules were sourced from:
  - models-yang/models/...
*/
package ospfv2

import (
	"reflect"

	oc "github.com/openconfig/ondatra/gnmi/otg"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Ospfv2Router_NamePath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/name YANG schema element.
type Ospfv2Router_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_NamePathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/name YANG schema element.
type Ospfv2Router_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/name"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/name"
func (n *Ospfv2Router_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Ospfv2Router",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/name"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/name"
func (n *Ospfv2Router_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Ospfv2Router",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *Ospfv2Router_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Ospfv2Router",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *Ospfv2Router_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Ospfv2Router",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2RouterPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router YANG schema element.
type Ospfv2RouterPath struct {
	*ygnmi.NodePath
}

// Ospfv2RouterPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router YANG schema element.
type Ospfv2RouterPathAny struct {
	*ygnmi.NodePath
}

// Ospfv2RouterPathMap represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router YANG schema element.
type Ospfv2RouterPathMap struct {
	*ygnmi.NodePath
}

// Ospfv2RouterPathMapAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router YANG schema element.
type Ospfv2RouterPathMapAny struct {
	*ygnmi.NodePath
}

// Counters (container): Counters of an individual OSPFv2 router.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/counters"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters"
func (n *Ospfv2RouterPath) Counters() *Ospfv2Router_CountersPath {
	ps := &Ospfv2Router_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Counters of an individual OSPFv2 router.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/counters"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters"
func (n *Ospfv2RouterPathAny) Counters() *Ospfv2Router_CountersPathAny {
	ps := &Ospfv2Router_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LinkStateDatabase (container): This sub-module describes a YANG model for the OSPF Link State
// Database (LSDB).
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/link-state-database"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database"
func (n *Ospfv2RouterPath) LinkStateDatabase() *Ospfv2Router_LinkStateDatabasePath {
	ps := &Ospfv2Router_LinkStateDatabasePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "link-state-database"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LinkStateDatabase (container): This sub-module describes a YANG model for the OSPF Link State
// Database (LSDB).
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/link-state-database"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database"
func (n *Ospfv2RouterPathAny) LinkStateDatabase() *Ospfv2Router_LinkStateDatabasePathAny {
	ps := &Ospfv2Router_LinkStateDatabasePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "link-state-database"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Name (leaf): An arbitrary name of the OSPFv2 router determined by
// the OTG configuration.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "*/name"
//	Path from root:       "/ospfv2-routers/ospfv2-router/*/name"
func (n *Ospfv2RouterPath) Name() *Ospfv2Router_NamePath {
	ps := &Ospfv2Router_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): An arbitrary name of the OSPFv2 router determined by
// the OTG configuration.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "*/name"
//	Path from root:       "/ospfv2-routers/ospfv2-router/*/name"
func (n *Ospfv2RouterPathAny) Name() *Ospfv2Router_NamePathAny {
	ps := &Ospfv2Router_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *Ospfv2RouterPath) State() ygnmi.SingletonQuery[*oc.Ospfv2Router] {
	return ygnmi.NewSingletonQuery[*oc.Ospfv2Router](
		"Ospfv2Router",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Ospfv2RouterPathAny) State() ygnmi.WildcardQuery[*oc.Ospfv2Router] {
	return ygnmi.NewWildcardQuery[*oc.Ospfv2Router](
		"Ospfv2Router",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_Counters_InDbdsPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/in-dbds YANG schema element.
type Ospfv2Router_Counters_InDbdsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_Counters_InDbdsPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/in-dbds YANG schema element.
type Ospfv2Router_Counters_InDbdsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-dbds"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-dbds"
func (n *Ospfv2Router_Counters_InDbdsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-dbds"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).InDbds
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-dbds"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-dbds"
func (n *Ospfv2Router_Counters_InDbdsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-dbds"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).InDbds
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_Counters_InExternalLsasPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/in-external-lsas YANG schema element.
type Ospfv2Router_Counters_InExternalLsasPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_Counters_InExternalLsasPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/in-external-lsas YANG schema element.
type Ospfv2Router_Counters_InExternalLsasPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-external-lsas"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-external-lsas"
func (n *Ospfv2Router_Counters_InExternalLsasPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-external-lsas"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).InExternalLsas
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-external-lsas"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-external-lsas"
func (n *Ospfv2Router_Counters_InExternalLsasPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-external-lsas"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).InExternalLsas
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_Counters_InHellosPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/in-hellos YANG schema element.
type Ospfv2Router_Counters_InHellosPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_Counters_InHellosPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/in-hellos YANG schema element.
type Ospfv2Router_Counters_InHellosPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-hellos"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-hellos"
func (n *Ospfv2Router_Counters_InHellosPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-hellos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).InHellos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-hellos"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-hellos"
func (n *Ospfv2Router_Counters_InHellosPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-hellos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).InHellos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_Counters_InLsAcksPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/in-ls-acks YANG schema element.
type Ospfv2Router_Counters_InLsAcksPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_Counters_InLsAcksPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/in-ls-acks YANG schema element.
type Ospfv2Router_Counters_InLsAcksPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-ls-acks"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-ls-acks"
func (n *Ospfv2Router_Counters_InLsAcksPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-ls-acks"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).InLsAcks
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-ls-acks"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-ls-acks"
func (n *Ospfv2Router_Counters_InLsAcksPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-ls-acks"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).InLsAcks
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_Counters_InLsRequestsPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/in-ls-requests YANG schema element.
type Ospfv2Router_Counters_InLsRequestsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_Counters_InLsRequestsPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/in-ls-requests YANG schema element.
type Ospfv2Router_Counters_InLsRequestsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-ls-requests"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-ls-requests"
func (n *Ospfv2Router_Counters_InLsRequestsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-ls-requests"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).InLsRequests
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-ls-requests"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-ls-requests"
func (n *Ospfv2Router_Counters_InLsRequestsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-ls-requests"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).InLsRequests
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_Counters_InLsUpdatesPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/in-ls-updates YANG schema element.
type Ospfv2Router_Counters_InLsUpdatesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_Counters_InLsUpdatesPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/in-ls-updates YANG schema element.
type Ospfv2Router_Counters_InLsUpdatesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-ls-updates"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-ls-updates"
func (n *Ospfv2Router_Counters_InLsUpdatesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-ls-updates"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).InLsUpdates
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-ls-updates"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-ls-updates"
func (n *Ospfv2Router_Counters_InLsUpdatesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-ls-updates"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).InLsUpdates
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_Counters_InLsaAcksPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/in-lsa-acks YANG schema element.
type Ospfv2Router_Counters_InLsaAcksPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_Counters_InLsaAcksPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/in-lsa-acks YANG schema element.
type Ospfv2Router_Counters_InLsaAcksPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-lsa-acks"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-lsa-acks"
func (n *Ospfv2Router_Counters_InLsaAcksPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-lsa-acks"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).InLsaAcks
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-lsa-acks"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-lsa-acks"
func (n *Ospfv2Router_Counters_InLsaAcksPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-lsa-acks"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).InLsaAcks
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_Counters_InLsasPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/in-lsas YANG schema element.
type Ospfv2Router_Counters_InLsasPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_Counters_InLsasPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/in-lsas YANG schema element.
type Ospfv2Router_Counters_InLsasPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-lsas"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-lsas"
func (n *Ospfv2Router_Counters_InLsasPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-lsas"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).InLsas
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-lsas"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-lsas"
func (n *Ospfv2Router_Counters_InLsasPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-lsas"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).InLsas
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_Counters_InNssaLsasPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/in-nssa-lsas YANG schema element.
type Ospfv2Router_Counters_InNssaLsasPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_Counters_InNssaLsasPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/in-nssa-lsas YANG schema element.
type Ospfv2Router_Counters_InNssaLsasPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-nssa-lsas"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-nssa-lsas"
func (n *Ospfv2Router_Counters_InNssaLsasPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-nssa-lsas"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).InNssaLsas
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-nssa-lsas"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-nssa-lsas"
func (n *Ospfv2Router_Counters_InNssaLsasPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-nssa-lsas"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).InNssaLsas
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_Counters_InRouterLsasPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/in-router-lsas YANG schema element.
type Ospfv2Router_Counters_InRouterLsasPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_Counters_InRouterLsasPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/in-router-lsas YANG schema element.
type Ospfv2Router_Counters_InRouterLsasPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-router-lsas"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-router-lsas"
func (n *Ospfv2Router_Counters_InRouterLsasPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-router-lsas"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).InRouterLsas
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-router-lsas"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-router-lsas"
func (n *Ospfv2Router_Counters_InRouterLsasPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-router-lsas"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).InRouterLsas
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_Counters_InSummaryLsasPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/in-summary-lsas YANG schema element.
type Ospfv2Router_Counters_InSummaryLsasPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_Counters_InSummaryLsasPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/in-summary-lsas YANG schema element.
type Ospfv2Router_Counters_InSummaryLsasPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-summary-lsas"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-summary-lsas"
func (n *Ospfv2Router_Counters_InSummaryLsasPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-summary-lsas"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).InSummaryLsas
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-summary-lsas"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-summary-lsas"
func (n *Ospfv2Router_Counters_InSummaryLsasPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-summary-lsas"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).InSummaryLsas
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_Counters_OutDbdsPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/out-dbds YANG schema element.
type Ospfv2Router_Counters_OutDbdsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_Counters_OutDbdsPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/out-dbds YANG schema element.
type Ospfv2Router_Counters_OutDbdsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-dbds"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-dbds"
func (n *Ospfv2Router_Counters_OutDbdsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-dbds"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).OutDbds
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-dbds"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-dbds"
func (n *Ospfv2Router_Counters_OutDbdsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-dbds"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).OutDbds
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_Counters_OutExternalLsasPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/out-external-lsas YANG schema element.
type Ospfv2Router_Counters_OutExternalLsasPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_Counters_OutExternalLsasPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/out-external-lsas YANG schema element.
type Ospfv2Router_Counters_OutExternalLsasPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-external-lsas"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-external-lsas"
func (n *Ospfv2Router_Counters_OutExternalLsasPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-external-lsas"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).OutExternalLsas
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-external-lsas"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-external-lsas"
func (n *Ospfv2Router_Counters_OutExternalLsasPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-external-lsas"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).OutExternalLsas
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_Counters_OutHellosPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/out-hellos YANG schema element.
type Ospfv2Router_Counters_OutHellosPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_Counters_OutHellosPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/out-hellos YANG schema element.
type Ospfv2Router_Counters_OutHellosPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-hellos"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-hellos"
func (n *Ospfv2Router_Counters_OutHellosPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-hellos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).OutHellos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-hellos"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-hellos"
func (n *Ospfv2Router_Counters_OutHellosPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-hellos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).OutHellos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_Counters_OutLsAcksPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/out-ls-acks YANG schema element.
type Ospfv2Router_Counters_OutLsAcksPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_Counters_OutLsAcksPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/out-ls-acks YANG schema element.
type Ospfv2Router_Counters_OutLsAcksPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-ls-acks"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-ls-acks"
func (n *Ospfv2Router_Counters_OutLsAcksPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-ls-acks"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).OutLsAcks
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-ls-acks"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-ls-acks"
func (n *Ospfv2Router_Counters_OutLsAcksPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-ls-acks"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).OutLsAcks
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_Counters_OutLsRequestsPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/out-ls-requests YANG schema element.
type Ospfv2Router_Counters_OutLsRequestsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_Counters_OutLsRequestsPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/out-ls-requests YANG schema element.
type Ospfv2Router_Counters_OutLsRequestsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-ls-requests"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-ls-requests"
func (n *Ospfv2Router_Counters_OutLsRequestsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-ls-requests"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).OutLsRequests
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-ls-requests"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-ls-requests"
func (n *Ospfv2Router_Counters_OutLsRequestsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-ls-requests"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).OutLsRequests
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_Counters_OutLsUpdatesPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/out-ls-updates YANG schema element.
type Ospfv2Router_Counters_OutLsUpdatesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_Counters_OutLsUpdatesPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/out-ls-updates YANG schema element.
type Ospfv2Router_Counters_OutLsUpdatesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-ls-updates"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-ls-updates"
func (n *Ospfv2Router_Counters_OutLsUpdatesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-ls-updates"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).OutLsUpdates
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-ls-updates"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-ls-updates"
func (n *Ospfv2Router_Counters_OutLsUpdatesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-ls-updates"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).OutLsUpdates
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_Counters_OutLsaAcksPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/out-lsa-acks YANG schema element.
type Ospfv2Router_Counters_OutLsaAcksPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_Counters_OutLsaAcksPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/out-lsa-acks YANG schema element.
type Ospfv2Router_Counters_OutLsaAcksPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-lsa-acks"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-lsa-acks"
func (n *Ospfv2Router_Counters_OutLsaAcksPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-lsa-acks"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).OutLsaAcks
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-lsa-acks"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-lsa-acks"
func (n *Ospfv2Router_Counters_OutLsaAcksPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-lsa-acks"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).OutLsaAcks
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_Counters_OutLsasPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/out-lsas YANG schema element.
type Ospfv2Router_Counters_OutLsasPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_Counters_OutLsasPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/out-lsas YANG schema element.
type Ospfv2Router_Counters_OutLsasPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-lsas"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-lsas"
func (n *Ospfv2Router_Counters_OutLsasPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-lsas"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).OutLsas
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-lsas"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-lsas"
func (n *Ospfv2Router_Counters_OutLsasPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-lsas"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).OutLsas
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_Counters_OutNssaLsasPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/out-nssa-lsas YANG schema element.
type Ospfv2Router_Counters_OutNssaLsasPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_Counters_OutNssaLsasPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/out-nssa-lsas YANG schema element.
type Ospfv2Router_Counters_OutNssaLsasPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-nssa-lsas"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-nssa-lsas"
func (n *Ospfv2Router_Counters_OutNssaLsasPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-nssa-lsas"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).OutNssaLsas
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-nssa-lsas"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-nssa-lsas"
func (n *Ospfv2Router_Counters_OutNssaLsasPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-nssa-lsas"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).OutNssaLsas
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_Counters_OutRouterLsasPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/out-router-lsas YANG schema element.
type Ospfv2Router_Counters_OutRouterLsasPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_Counters_OutRouterLsasPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/out-router-lsas YANG schema element.
type Ospfv2Router_Counters_OutRouterLsasPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-router-lsas"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-router-lsas"
func (n *Ospfv2Router_Counters_OutRouterLsasPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-router-lsas"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).OutRouterLsas
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-router-lsas"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-router-lsas"
func (n *Ospfv2Router_Counters_OutRouterLsasPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-router-lsas"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).OutRouterLsas
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_Counters_OutSummaryLsasPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/out-summary-lsas YANG schema element.
type Ospfv2Router_Counters_OutSummaryLsasPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_Counters_OutSummaryLsasPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/out-summary-lsas YANG schema element.
type Ospfv2Router_Counters_OutSummaryLsasPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-summary-lsas"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-summary-lsas"
func (n *Ospfv2Router_Counters_OutSummaryLsasPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-summary-lsas"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).OutSummaryLsas
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-summary-lsas"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-summary-lsas"
func (n *Ospfv2Router_Counters_OutSummaryLsasPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-summary-lsas"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).OutSummaryLsas
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_Counters_SessionsDownPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/sessions-down YANG schema element.
type Ospfv2Router_Counters_SessionsDownPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_Counters_SessionsDownPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/sessions-down YANG schema element.
type Ospfv2Router_Counters_SessionsDownPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "sessions-down"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/sessions-down"
func (n *Ospfv2Router_Counters_SessionsDownPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sessions-down"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).SessionsDown
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "sessions-down"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/sessions-down"
func (n *Ospfv2Router_Counters_SessionsDownPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sessions-down"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).SessionsDown
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_Counters_SessionsFlapPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/sessions-flap YANG schema element.
type Ospfv2Router_Counters_SessionsFlapPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_Counters_SessionsFlapPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/sessions-flap YANG schema element.
type Ospfv2Router_Counters_SessionsFlapPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "sessions-flap"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/sessions-flap"
func (n *Ospfv2Router_Counters_SessionsFlapPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sessions-flap"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).SessionsFlap
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "sessions-flap"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/sessions-flap"
func (n *Ospfv2Router_Counters_SessionsFlapPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sessions-flap"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).SessionsFlap
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_Counters_SessionsUpPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/sessions-up YANG schema element.
type Ospfv2Router_Counters_SessionsUpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_Counters_SessionsUpPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters/sessions-up YANG schema element.
type Ospfv2Router_Counters_SessionsUpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "sessions-up"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/sessions-up"
func (n *Ospfv2Router_Counters_SessionsUpPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sessions-up"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).SessionsUp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "sessions-up"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/sessions-up"
func (n *Ospfv2Router_Counters_SessionsUpPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Ospfv2Router_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sessions-up"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Ospfv2Router_Counters).SessionsUp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_CountersPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters YANG schema element.
type Ospfv2Router_CountersPath struct {
	*ygnmi.NodePath
}

// Ospfv2Router_CountersPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters YANG schema element.
type Ospfv2Router_CountersPathAny struct {
	*ygnmi.NodePath
}

// InDbds (leaf): The total number of DBD messages received.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-dbds"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-dbds"
func (n *Ospfv2Router_CountersPath) InDbds() *Ospfv2Router_Counters_InDbdsPath {
	ps := &Ospfv2Router_Counters_InDbdsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-dbds"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InDbds (leaf): The total number of DBD messages received.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-dbds"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-dbds"
func (n *Ospfv2Router_CountersPathAny) InDbds() *Ospfv2Router_Counters_InDbdsPathAny {
	ps := &Ospfv2Router_Counters_InDbdsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-dbds"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InExternalLsas (leaf): The total number of OSPFv2 External (Type 5) LSAs received.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-external-lsas"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-external-lsas"
func (n *Ospfv2Router_CountersPath) InExternalLsas() *Ospfv2Router_Counters_InExternalLsasPath {
	ps := &Ospfv2Router_Counters_InExternalLsasPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-external-lsas"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InExternalLsas (leaf): The total number of OSPFv2 External (Type 5) LSAs received.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-external-lsas"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-external-lsas"
func (n *Ospfv2Router_CountersPathAny) InExternalLsas() *Ospfv2Router_Counters_InExternalLsasPathAny {
	ps := &Ospfv2Router_Counters_InExternalLsasPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-external-lsas"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InHellos (leaf): The total number of HELLO messages received.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-hellos"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-hellos"
func (n *Ospfv2Router_CountersPath) InHellos() *Ospfv2Router_Counters_InHellosPath {
	ps := &Ospfv2Router_Counters_InHellosPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-hellos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InHellos (leaf): The total number of HELLO messages received.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-hellos"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-hellos"
func (n *Ospfv2Router_CountersPathAny) InHellos() *Ospfv2Router_Counters_InHellosPathAny {
	ps := &Ospfv2Router_Counters_InHellosPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-hellos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InLsAcks (leaf): The total number of LS Ack messages received.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-ls-acks"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-ls-acks"
func (n *Ospfv2Router_CountersPath) InLsAcks() *Ospfv2Router_Counters_InLsAcksPath {
	ps := &Ospfv2Router_Counters_InLsAcksPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-ls-acks"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InLsAcks (leaf): The total number of LS Ack messages received.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-ls-acks"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-ls-acks"
func (n *Ospfv2Router_CountersPathAny) InLsAcks() *Ospfv2Router_Counters_InLsAcksPathAny {
	ps := &Ospfv2Router_Counters_InLsAcksPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-ls-acks"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InLsRequests (leaf): The total number of LS Request messages received.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-ls-requests"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-ls-requests"
func (n *Ospfv2Router_CountersPath) InLsRequests() *Ospfv2Router_Counters_InLsRequestsPath {
	ps := &Ospfv2Router_Counters_InLsRequestsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-ls-requests"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InLsRequests (leaf): The total number of LS Request messages received.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-ls-requests"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-ls-requests"
func (n *Ospfv2Router_CountersPathAny) InLsRequests() *Ospfv2Router_Counters_InLsRequestsPathAny {
	ps := &Ospfv2Router_Counters_InLsRequestsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-ls-requests"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InLsUpdates (leaf): The total number of LS Update messages received.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-ls-updates"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-ls-updates"
func (n *Ospfv2Router_CountersPath) InLsUpdates() *Ospfv2Router_Counters_InLsUpdatesPath {
	ps := &Ospfv2Router_Counters_InLsUpdatesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-ls-updates"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InLsUpdates (leaf): The total number of LS Update messages received.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-ls-updates"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-ls-updates"
func (n *Ospfv2Router_CountersPathAny) InLsUpdates() *Ospfv2Router_Counters_InLsUpdatesPathAny {
	ps := &Ospfv2Router_Counters_InLsUpdatesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-ls-updates"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InLsaAcks (leaf): The total number of LSA Ack messages received.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-lsa-acks"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-lsa-acks"
func (n *Ospfv2Router_CountersPath) InLsaAcks() *Ospfv2Router_Counters_InLsaAcksPath {
	ps := &Ospfv2Router_Counters_InLsaAcksPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-lsa-acks"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InLsaAcks (leaf): The total number of LSA Ack messages received.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-lsa-acks"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-lsa-acks"
func (n *Ospfv2Router_CountersPathAny) InLsaAcks() *Ospfv2Router_Counters_InLsaAcksPathAny {
	ps := &Ospfv2Router_Counters_InLsaAcksPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-lsa-acks"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InLsas (leaf): The total number of link state protocol data units (LSAs)
// received.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-lsas"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-lsas"
func (n *Ospfv2Router_CountersPath) InLsas() *Ospfv2Router_Counters_InLsasPath {
	ps := &Ospfv2Router_Counters_InLsasPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-lsas"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InLsas (leaf): The total number of link state protocol data units (LSAs)
// received.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-lsas"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-lsas"
func (n *Ospfv2Router_CountersPathAny) InLsas() *Ospfv2Router_Counters_InLsasPathAny {
	ps := &Ospfv2Router_Counters_InLsasPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-lsas"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InNssaLsas (leaf): The total number of OSPFv2 NSSA (Type 7) LSAs received.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-nssa-lsas"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-nssa-lsas"
func (n *Ospfv2Router_CountersPath) InNssaLsas() *Ospfv2Router_Counters_InNssaLsasPath {
	ps := &Ospfv2Router_Counters_InNssaLsasPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-nssa-lsas"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InNssaLsas (leaf): The total number of OSPFv2 NSSA (Type 7) LSAs received.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-nssa-lsas"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-nssa-lsas"
func (n *Ospfv2Router_CountersPathAny) InNssaLsas() *Ospfv2Router_Counters_InNssaLsasPathAny {
	ps := &Ospfv2Router_Counters_InNssaLsasPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-nssa-lsas"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InRouterLsas (leaf): The total number of OSPFv2 Router (Type 1) LSAs received.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-router-lsas"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-router-lsas"
func (n *Ospfv2Router_CountersPath) InRouterLsas() *Ospfv2Router_Counters_InRouterLsasPath {
	ps := &Ospfv2Router_Counters_InRouterLsasPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-router-lsas"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InRouterLsas (leaf): The total number of OSPFv2 Router (Type 1) LSAs received.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-router-lsas"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-router-lsas"
func (n *Ospfv2Router_CountersPathAny) InRouterLsas() *Ospfv2Router_Counters_InRouterLsasPathAny {
	ps := &Ospfv2Router_Counters_InRouterLsasPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-router-lsas"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InSummaryLsas (leaf): The total number of OSPFv2 Summary IP (Type 3) LSAs received.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-summary-lsas"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-summary-lsas"
func (n *Ospfv2Router_CountersPath) InSummaryLsas() *Ospfv2Router_Counters_InSummaryLsasPath {
	ps := &Ospfv2Router_Counters_InSummaryLsasPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-summary-lsas"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InSummaryLsas (leaf): The total number of OSPFv2 Summary IP (Type 3) LSAs received.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "in-summary-lsas"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/in-summary-lsas"
func (n *Ospfv2Router_CountersPathAny) InSummaryLsas() *Ospfv2Router_Counters_InSummaryLsasPathAny {
	ps := &Ospfv2Router_Counters_InSummaryLsasPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-summary-lsas"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutDbds (leaf): The total number of DBD messages sent.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-dbds"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-dbds"
func (n *Ospfv2Router_CountersPath) OutDbds() *Ospfv2Router_Counters_OutDbdsPath {
	ps := &Ospfv2Router_Counters_OutDbdsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-dbds"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutDbds (leaf): The total number of DBD messages sent.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-dbds"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-dbds"
func (n *Ospfv2Router_CountersPathAny) OutDbds() *Ospfv2Router_Counters_OutDbdsPathAny {
	ps := &Ospfv2Router_Counters_OutDbdsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-dbds"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutExternalLsas (leaf): The total number of OSPFv2 External (Type 5) LSAs sent.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-external-lsas"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-external-lsas"
func (n *Ospfv2Router_CountersPath) OutExternalLsas() *Ospfv2Router_Counters_OutExternalLsasPath {
	ps := &Ospfv2Router_Counters_OutExternalLsasPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-external-lsas"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutExternalLsas (leaf): The total number of OSPFv2 External (Type 5) LSAs sent.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-external-lsas"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-external-lsas"
func (n *Ospfv2Router_CountersPathAny) OutExternalLsas() *Ospfv2Router_Counters_OutExternalLsasPathAny {
	ps := &Ospfv2Router_Counters_OutExternalLsasPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-external-lsas"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutHellos (leaf): The total number of HELLO messages sent.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-hellos"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-hellos"
func (n *Ospfv2Router_CountersPath) OutHellos() *Ospfv2Router_Counters_OutHellosPath {
	ps := &Ospfv2Router_Counters_OutHellosPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-hellos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutHellos (leaf): The total number of HELLO messages sent.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-hellos"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-hellos"
func (n *Ospfv2Router_CountersPathAny) OutHellos() *Ospfv2Router_Counters_OutHellosPathAny {
	ps := &Ospfv2Router_Counters_OutHellosPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-hellos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLsAcks (leaf): The total number of LS Ack messages sent.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-ls-acks"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-ls-acks"
func (n *Ospfv2Router_CountersPath) OutLsAcks() *Ospfv2Router_Counters_OutLsAcksPath {
	ps := &Ospfv2Router_Counters_OutLsAcksPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-ls-acks"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLsAcks (leaf): The total number of LS Ack messages sent.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-ls-acks"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-ls-acks"
func (n *Ospfv2Router_CountersPathAny) OutLsAcks() *Ospfv2Router_Counters_OutLsAcksPathAny {
	ps := &Ospfv2Router_Counters_OutLsAcksPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-ls-acks"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLsRequests (leaf): The total number of LS Request messages sent.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-ls-requests"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-ls-requests"
func (n *Ospfv2Router_CountersPath) OutLsRequests() *Ospfv2Router_Counters_OutLsRequestsPath {
	ps := &Ospfv2Router_Counters_OutLsRequestsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-ls-requests"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLsRequests (leaf): The total number of LS Request messages sent.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-ls-requests"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-ls-requests"
func (n *Ospfv2Router_CountersPathAny) OutLsRequests() *Ospfv2Router_Counters_OutLsRequestsPathAny {
	ps := &Ospfv2Router_Counters_OutLsRequestsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-ls-requests"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLsUpdates (leaf): The total number of LS Update messages sent.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-ls-updates"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-ls-updates"
func (n *Ospfv2Router_CountersPath) OutLsUpdates() *Ospfv2Router_Counters_OutLsUpdatesPath {
	ps := &Ospfv2Router_Counters_OutLsUpdatesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-ls-updates"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLsUpdates (leaf): The total number of LS Update messages sent.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-ls-updates"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-ls-updates"
func (n *Ospfv2Router_CountersPathAny) OutLsUpdates() *Ospfv2Router_Counters_OutLsUpdatesPathAny {
	ps := &Ospfv2Router_Counters_OutLsUpdatesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-ls-updates"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLsaAcks (leaf): The total number of LSA Ack messages sent.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-lsa-acks"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-lsa-acks"
func (n *Ospfv2Router_CountersPath) OutLsaAcks() *Ospfv2Router_Counters_OutLsaAcksPath {
	ps := &Ospfv2Router_Counters_OutLsaAcksPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-lsa-acks"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLsaAcks (leaf): The total number of LSA Ack messages sent.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-lsa-acks"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-lsa-acks"
func (n *Ospfv2Router_CountersPathAny) OutLsaAcks() *Ospfv2Router_Counters_OutLsaAcksPathAny {
	ps := &Ospfv2Router_Counters_OutLsaAcksPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-lsa-acks"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLsas (leaf): The total number of link state protocol data units (LSAs)
// sent.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-lsas"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-lsas"
func (n *Ospfv2Router_CountersPath) OutLsas() *Ospfv2Router_Counters_OutLsasPath {
	ps := &Ospfv2Router_Counters_OutLsasPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-lsas"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLsas (leaf): The total number of link state protocol data units (LSAs)
// sent.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-lsas"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-lsas"
func (n *Ospfv2Router_CountersPathAny) OutLsas() *Ospfv2Router_Counters_OutLsasPathAny {
	ps := &Ospfv2Router_Counters_OutLsasPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-lsas"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutNssaLsas (leaf): The total number of OSPFv2 NSSA (Type 7) LSAs sent.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-nssa-lsas"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-nssa-lsas"
func (n *Ospfv2Router_CountersPath) OutNssaLsas() *Ospfv2Router_Counters_OutNssaLsasPath {
	ps := &Ospfv2Router_Counters_OutNssaLsasPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-nssa-lsas"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutNssaLsas (leaf): The total number of OSPFv2 NSSA (Type 7) LSAs sent.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-nssa-lsas"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-nssa-lsas"
func (n *Ospfv2Router_CountersPathAny) OutNssaLsas() *Ospfv2Router_Counters_OutNssaLsasPathAny {
	ps := &Ospfv2Router_Counters_OutNssaLsasPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-nssa-lsas"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutRouterLsas (leaf): The total number of OSPFv2 Router (Type 1) LSAs sent.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-router-lsas"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-router-lsas"
func (n *Ospfv2Router_CountersPath) OutRouterLsas() *Ospfv2Router_Counters_OutRouterLsasPath {
	ps := &Ospfv2Router_Counters_OutRouterLsasPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-router-lsas"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutRouterLsas (leaf): The total number of OSPFv2 Router (Type 1) LSAs sent.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-router-lsas"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-router-lsas"
func (n *Ospfv2Router_CountersPathAny) OutRouterLsas() *Ospfv2Router_Counters_OutRouterLsasPathAny {
	ps := &Ospfv2Router_Counters_OutRouterLsasPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-router-lsas"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutSummaryLsas (leaf): The total number of OSPFv2 Summary IP (Type 3) LSAs sent.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-summary-lsas"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-summary-lsas"
func (n *Ospfv2Router_CountersPath) OutSummaryLsas() *Ospfv2Router_Counters_OutSummaryLsasPath {
	ps := &Ospfv2Router_Counters_OutSummaryLsasPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-summary-lsas"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutSummaryLsas (leaf): The total number of OSPFv2 Summary IP (Type 3) LSAs sent.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "out-summary-lsas"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/out-summary-lsas"
func (n *Ospfv2Router_CountersPathAny) OutSummaryLsas() *Ospfv2Router_Counters_OutSummaryLsasPathAny {
	ps := &Ospfv2Router_Counters_OutSummaryLsasPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-summary-lsas"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SessionsDown (leaf): The total number of sessions that are down.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "sessions-down"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/sessions-down"
func (n *Ospfv2Router_CountersPath) SessionsDown() *Ospfv2Router_Counters_SessionsDownPath {
	ps := &Ospfv2Router_Counters_SessionsDownPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"sessions-down"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SessionsDown (leaf): The total number of sessions that are down.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "sessions-down"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/sessions-down"
func (n *Ospfv2Router_CountersPathAny) SessionsDown() *Ospfv2Router_Counters_SessionsDownPathAny {
	ps := &Ospfv2Router_Counters_SessionsDownPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sessions-down"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SessionsFlap (leaf): The total number of sessions flap.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "sessions-flap"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/sessions-flap"
func (n *Ospfv2Router_CountersPath) SessionsFlap() *Ospfv2Router_Counters_SessionsFlapPath {
	ps := &Ospfv2Router_Counters_SessionsFlapPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"sessions-flap"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SessionsFlap (leaf): The total number of sessions flap.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "sessions-flap"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/sessions-flap"
func (n *Ospfv2Router_CountersPathAny) SessionsFlap() *Ospfv2Router_Counters_SessionsFlapPathAny {
	ps := &Ospfv2Router_Counters_SessionsFlapPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sessions-flap"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SessionsUp (leaf): The total number of sessions that are fully up.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "sessions-up"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/sessions-up"
func (n *Ospfv2Router_CountersPath) SessionsUp() *Ospfv2Router_Counters_SessionsUpPath {
	ps := &Ospfv2Router_Counters_SessionsUpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"sessions-up"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SessionsUp (leaf): The total number of sessions that are fully up.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "sessions-up"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/counters/sessions-up"
func (n *Ospfv2Router_CountersPathAny) SessionsUp() *Ospfv2Router_Counters_SessionsUpPathAny {
	ps := &Ospfv2Router_Counters_SessionsUpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sessions-up"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Ospfv2Router_CountersPath) State() ygnmi.SingletonQuery[*oc.Ospfv2Router_Counters] {
	return ygnmi.NewSingletonQuery[*oc.Ospfv2Router_Counters](
		"Ospfv2Router_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Ospfv2Router_CountersPathAny) State() ygnmi.WildcardQuery[*oc.Ospfv2Router_Counters] {
	return ygnmi.NewWildcardQuery[*oc.Ospfv2Router_Counters](
		"Ospfv2Router_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabasePath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database YANG schema element.
type Ospfv2Router_LinkStateDatabasePath struct {
	*ygnmi.NodePath
}

// Ospfv2Router_LinkStateDatabasePathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database YANG schema element.
type Ospfv2Router_LinkStateDatabasePathAny struct {
	*ygnmi.NodePath
}

// LsaStates (container): Container of OSPFv2 LSA state information.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "lsa-states"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states"
func (n *Ospfv2Router_LinkStateDatabasePath) LsaStates() *Ospfv2Router_LinkStateDatabase_LsaStatesPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStatesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"lsa-states"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LsaStates (container): Container of OSPFv2 LSA state information.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "lsa-states"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states"
func (n *Ospfv2Router_LinkStateDatabasePathAny) LsaStates() *Ospfv2Router_LinkStateDatabase_LsaStatesPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStatesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lsa-states"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Ospfv2Router_LinkStateDatabasePath) State() ygnmi.SingletonQuery[*oc.Ospfv2Router_LinkStateDatabase] {
	return ygnmi.NewSingletonQuery[*oc.Ospfv2Router_LinkStateDatabase](
		"Ospfv2Router_LinkStateDatabase",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Ospfv2Router_LinkStateDatabasePathAny) State() ygnmi.WildcardQuery[*oc.Ospfv2Router_LinkStateDatabase] {
	return ygnmi.NewWildcardQuery[*oc.Ospfv2Router_LinkStateDatabase](
		"Ospfv2Router_LinkStateDatabase",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStatesPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStatesPath struct {
	*ygnmi.NodePath
}

// Ospfv2Router_LinkStateDatabase_LsaStatesPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStatesPathAny struct {
	*ygnmi.NodePath
}

// ExternalAsLsaAny (list): Contents of the AS External LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "external-as-lsa"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa"
func (n *Ospfv2Router_LinkStateDatabase_LsaStatesPath) ExternalAsLsaAny() *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsaPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsaPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"external-as-lsa"},
			map[string]interface{}{"link-state-id": "*"},
			n,
		),
	}
	return ps
}

// ExternalAsLsaAny (list): Contents of the AS External LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "external-as-lsa"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa"
func (n *Ospfv2Router_LinkStateDatabase_LsaStatesPathAny) ExternalAsLsaAny() *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsaPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsaPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"external-as-lsa"},
			map[string]interface{}{"link-state-id": "*"},
			n,
		),
	}
	return ps
}

// ExternalAsLsa (list): Contents of the AS External LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "external-as-lsa"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa"
//
//	LinkStateId: string
func (n *Ospfv2Router_LinkStateDatabase_LsaStatesPath) ExternalAsLsa(LinkStateId string) *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsaPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsaPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"external-as-lsa"},
			map[string]interface{}{"link-state-id": LinkStateId},
			n,
		),
	}
	return ps
}

// ExternalAsLsa (list): Contents of the AS External LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "external-as-lsa"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa"
//
//	LinkStateId: string
func (n *Ospfv2Router_LinkStateDatabase_LsaStatesPathAny) ExternalAsLsa(LinkStateId string) *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsaPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsaPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"external-as-lsa"},
			map[string]interface{}{"link-state-id": LinkStateId},
			n,
		),
	}
	return ps
}

// NetworkLsaAny (list): Contents of the network LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "network-lsa"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa"
func (n *Ospfv2Router_LinkStateDatabase_LsaStatesPath) NetworkLsaAny() *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsaPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsaPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"network-lsa"},
			map[string]interface{}{"link-state-id": "*"},
			n,
		),
	}
	return ps
}

// NetworkLsaAny (list): Contents of the network LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "network-lsa"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa"
func (n *Ospfv2Router_LinkStateDatabase_LsaStatesPathAny) NetworkLsaAny() *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsaPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsaPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"network-lsa"},
			map[string]interface{}{"link-state-id": "*"},
			n,
		),
	}
	return ps
}

// NetworkLsa (list): Contents of the network LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "network-lsa"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa"
//
//	LinkStateId: string
func (n *Ospfv2Router_LinkStateDatabase_LsaStatesPath) NetworkLsa(LinkStateId string) *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsaPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsaPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"network-lsa"},
			map[string]interface{}{"link-state-id": LinkStateId},
			n,
		),
	}
	return ps
}

// NetworkLsa (list): Contents of the network LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "network-lsa"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa"
//
//	LinkStateId: string
func (n *Ospfv2Router_LinkStateDatabase_LsaStatesPathAny) NetworkLsa(LinkStateId string) *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsaPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsaPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"network-lsa"},
			map[string]interface{}{"link-state-id": LinkStateId},
			n,
		),
	}
	return ps
}

// NetworkSummaryLsaAny (list): Contents of the network summary LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "network-summary-lsa"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa"
func (n *Ospfv2Router_LinkStateDatabase_LsaStatesPath) NetworkSummaryLsaAny() *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsaPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsaPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"network-summary-lsa"},
			map[string]interface{}{"link-state-id": "*"},
			n,
		),
	}
	return ps
}

// NetworkSummaryLsaAny (list): Contents of the network summary LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "network-summary-lsa"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa"
func (n *Ospfv2Router_LinkStateDatabase_LsaStatesPathAny) NetworkSummaryLsaAny() *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsaPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsaPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"network-summary-lsa"},
			map[string]interface{}{"link-state-id": "*"},
			n,
		),
	}
	return ps
}

// NetworkSummaryLsa (list): Contents of the network summary LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "network-summary-lsa"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa"
//
//	LinkStateId: string
func (n *Ospfv2Router_LinkStateDatabase_LsaStatesPath) NetworkSummaryLsa(LinkStateId string) *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsaPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsaPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"network-summary-lsa"},
			map[string]interface{}{"link-state-id": LinkStateId},
			n,
		),
	}
	return ps
}

// NetworkSummaryLsa (list): Contents of the network summary LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "network-summary-lsa"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa"
//
//	LinkStateId: string
func (n *Ospfv2Router_LinkStateDatabase_LsaStatesPathAny) NetworkSummaryLsa(LinkStateId string) *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsaPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsaPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"network-summary-lsa"},
			map[string]interface{}{"link-state-id": LinkStateId},
			n,
		),
	}
	return ps
}

// NssaLsaAny (list): Contents of the NSSA LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "nssa-lsa"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa"
func (n *Ospfv2Router_LinkStateDatabase_LsaStatesPath) NssaLsaAny() *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsaPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsaPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"nssa-lsa"},
			map[string]interface{}{"link-state-id": "*"},
			n,
		),
	}
	return ps
}

// NssaLsaAny (list): Contents of the NSSA LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "nssa-lsa"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa"
func (n *Ospfv2Router_LinkStateDatabase_LsaStatesPathAny) NssaLsaAny() *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsaPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsaPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"nssa-lsa"},
			map[string]interface{}{"link-state-id": "*"},
			n,
		),
	}
	return ps
}

// NssaLsa (list): Contents of the NSSA LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "nssa-lsa"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa"
//
//	LinkStateId: string
func (n *Ospfv2Router_LinkStateDatabase_LsaStatesPath) NssaLsa(LinkStateId string) *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsaPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsaPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"nssa-lsa"},
			map[string]interface{}{"link-state-id": LinkStateId},
			n,
		),
	}
	return ps
}

// NssaLsa (list): Contents of the NSSA LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "nssa-lsa"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa"
//
//	LinkStateId: string
func (n *Ospfv2Router_LinkStateDatabase_LsaStatesPathAny) NssaLsa(LinkStateId string) *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsaPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsaPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"nssa-lsa"},
			map[string]interface{}{"link-state-id": LinkStateId},
			n,
		),
	}
	return ps
}

// OpaqueLsaAny (list): Contents of the Opaque LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "opaque-lsa"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/opaque-lsa"
func (n *Ospfv2Router_LinkStateDatabase_LsaStatesPath) OpaqueLsaAny() *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsaPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsaPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"opaque-lsa"},
			map[string]interface{}{"link-state-id": "*"},
			n,
		),
	}
	return ps
}

// OpaqueLsaAny (list): Contents of the Opaque LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "opaque-lsa"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/opaque-lsa"
func (n *Ospfv2Router_LinkStateDatabase_LsaStatesPathAny) OpaqueLsaAny() *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsaPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsaPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"opaque-lsa"},
			map[string]interface{}{"link-state-id": "*"},
			n,
		),
	}
	return ps
}

// OpaqueLsa (list): Contents of the Opaque LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "opaque-lsa"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/opaque-lsa"
//
//	LinkStateId: string
func (n *Ospfv2Router_LinkStateDatabase_LsaStatesPath) OpaqueLsa(LinkStateId string) *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsaPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsaPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"opaque-lsa"},
			map[string]interface{}{"link-state-id": LinkStateId},
			n,
		),
	}
	return ps
}

// OpaqueLsa (list): Contents of the Opaque LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "opaque-lsa"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/opaque-lsa"
//
//	LinkStateId: string
func (n *Ospfv2Router_LinkStateDatabase_LsaStatesPathAny) OpaqueLsa(LinkStateId string) *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsaPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsaPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"opaque-lsa"},
			map[string]interface{}{"link-state-id": LinkStateId},
			n,
		),
	}
	return ps
}

// RouterLsaAny (list): Contents of the router LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "router-lsa"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa"
func (n *Ospfv2Router_LinkStateDatabase_LsaStatesPath) RouterLsaAny() *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsaPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsaPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"router-lsa"},
			map[string]interface{}{"link-state-id": "*"},
			n,
		),
	}
	return ps
}

// RouterLsaAny (list): Contents of the router LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "router-lsa"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa"
func (n *Ospfv2Router_LinkStateDatabase_LsaStatesPathAny) RouterLsaAny() *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsaPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsaPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"router-lsa"},
			map[string]interface{}{"link-state-id": "*"},
			n,
		),
	}
	return ps
}

// RouterLsa (list): Contents of the router LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "router-lsa"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa"
//
//	LinkStateId: string
func (n *Ospfv2Router_LinkStateDatabase_LsaStatesPath) RouterLsa(LinkStateId string) *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsaPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsaPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"router-lsa"},
			map[string]interface{}{"link-state-id": LinkStateId},
			n,
		),
	}
	return ps
}

// RouterLsa (list): Contents of the router LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "router-lsa"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa"
//
//	LinkStateId: string
func (n *Ospfv2Router_LinkStateDatabase_LsaStatesPathAny) RouterLsa(LinkStateId string) *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsaPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsaPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"router-lsa"},
			map[string]interface{}{"link-state-id": LinkStateId},
			n,
		),
	}
	return ps
}

// SummaryAsLsaAny (list): Contents of the Autonomous System Boundary Router (ASBR)
// summary LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "summary-as-lsa"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa"
func (n *Ospfv2Router_LinkStateDatabase_LsaStatesPath) SummaryAsLsaAny() *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsaPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsaPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"summary-as-lsa"},
			map[string]interface{}{"link-state-id": "*"},
			n,
		),
	}
	return ps
}

// SummaryAsLsaAny (list): Contents of the Autonomous System Boundary Router (ASBR)
// summary LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "summary-as-lsa"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa"
func (n *Ospfv2Router_LinkStateDatabase_LsaStatesPathAny) SummaryAsLsaAny() *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsaPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsaPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"summary-as-lsa"},
			map[string]interface{}{"link-state-id": "*"},
			n,
		),
	}
	return ps
}

// SummaryAsLsa (list): Contents of the Autonomous System Boundary Router (ASBR)
// summary LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "summary-as-lsa"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa"
//
//	LinkStateId: string
func (n *Ospfv2Router_LinkStateDatabase_LsaStatesPath) SummaryAsLsa(LinkStateId string) *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsaPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsaPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"summary-as-lsa"},
			map[string]interface{}{"link-state-id": LinkStateId},
			n,
		),
	}
	return ps
}

// SummaryAsLsa (list): Contents of the Autonomous System Boundary Router (ASBR)
// summary LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "summary-as-lsa"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa"
//
//	LinkStateId: string
func (n *Ospfv2Router_LinkStateDatabase_LsaStatesPathAny) SummaryAsLsa(LinkStateId string) *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsaPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsaPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"summary-as-lsa"},
			map[string]interface{}{"link-state-id": LinkStateId},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Ospfv2Router_LinkStateDatabase_LsaStatesPath) State() ygnmi.SingletonQuery[*oc.Ospfv2Router_LinkStateDatabase_LsaStates] {
	return ygnmi.NewSingletonQuery[*oc.Ospfv2Router_LinkStateDatabase_LsaStates](
		"Ospfv2Router_LinkStateDatabase_LsaStates",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Ospfv2Router_LinkStateDatabase_LsaStatesPathAny) State() ygnmi.WildcardQuery[*oc.Ospfv2Router_LinkStateDatabase_LsaStates] {
	return ygnmi.NewWildcardQuery[*oc.Ospfv2Router_LinkStateDatabase_LsaStates](
		"Ospfv2Router_LinkStateDatabase_LsaStates",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_AdvertisingRouterPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/advertising-router YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_AdvertisingRouterPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_AdvertisingRouterPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/advertising-router YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_AdvertisingRouterPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/advertising-router"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/advertising-router"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_AdvertisingRouterPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "advertising-router"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa).AdvertisingRouter
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/advertising-router"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/advertising-router"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_AdvertisingRouterPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "advertising-router"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa).AdvertisingRouter
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_AgePath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/age YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_AgePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_AgePathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/age YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_AgePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/age"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/age"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_AgePath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "age"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa).Age
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/age"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/age"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_AgePathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "age"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa).Age
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_LinkStateIdPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/link-state-id YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_LinkStateIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_LinkStateIdPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/link-state-id YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_LinkStateIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/link-state-id"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/link-state-id"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_LinkStateIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "link-state-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa).LinkStateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/link-state-id"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/link-state-id"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_LinkStateIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "link-state-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa).LinkStateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "link-state-id"
//	Path from root:       ""
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_LinkStateIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"link-state-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa).LinkStateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "link-state-id"
//	Path from root:       ""
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_LinkStateIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"link-state-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa).LinkStateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_MetricPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/metric YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_MetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_MetricPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/metric YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_MetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/metric"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/metric"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_MetricPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa).Metric
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/metric"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/metric"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_MetricPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa).Metric
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_MetricTypePath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/metric-type YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_MetricTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_MetricTypePathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/metric-type YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_MetricTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/metric-type"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/metric-type"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_MetricTypePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa).MetricType
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/metric-type"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/metric-type"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_MetricTypePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa).MetricType
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_NetworkMaskPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/network-mask YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_NetworkMaskPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_NetworkMaskPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/network-mask YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_NetworkMaskPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/network-mask"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/network-mask"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_NetworkMaskPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "network-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa).NetworkMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/network-mask"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/network-mask"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_NetworkMaskPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "network-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa).NetworkMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_OptionBitsPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/option-bits YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_OptionBitsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_OptionBitsPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/option-bits YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_OptionBitsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/option-bits"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/option-bits"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_OptionBitsPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "option-bits"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa).OptionBits
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/option-bits"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/option-bits"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_OptionBitsPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "option-bits"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa).OptionBits
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_SequenceNumberPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/sequence-number YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_SequenceNumberPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_SequenceNumberPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/sequence-number YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_SequenceNumberPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/sequence-number"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/sequence-number"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_SequenceNumberPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sequence-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa).SequenceNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/sequence-number"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/sequence-number"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_SequenceNumberPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sequence-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa).SequenceNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsaPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsaPath struct {
	*ygnmi.NodePath
}

// Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsaPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsaPathAny struct {
	*ygnmi.NodePath
}

// Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsaPathMap represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsaPathMap struct {
	*ygnmi.NodePath
}

// Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsaPathMapAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsaPathMapAny struct {
	*ygnmi.NodePath
}

// AdvertisingRouter (leaf): The router ID of the router that originated the LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/advertising-router"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/advertising-router"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsaPath) AdvertisingRouter() *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_AdvertisingRouterPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_AdvertisingRouterPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "advertising-router"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdvertisingRouter (leaf): The router ID of the router that originated the LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/advertising-router"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/advertising-router"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsaPathAny) AdvertisingRouter() *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_AdvertisingRouterPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_AdvertisingRouterPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "advertising-router"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Age (leaf): The time since the LSA's generation in seconds.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/age"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/age"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsaPath) Age() *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_AgePath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_AgePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "age"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Age (leaf): The time since the LSA's generation in seconds.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/age"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/age"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsaPathAny) Age() *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_AgePathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_AgePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "age"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LinkStateId (leaf): The Link State ID for the specified LSA type.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "*/link-state-id"
//	Path from root:       "/ospfv2-routers/ospfv2-router/*/link-state-database/lsa-states/external-as-lsa/*/link-state-id"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsaPath) LinkStateId() *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_LinkStateIdPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_LinkStateIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "link-state-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LinkStateId (leaf): The Link State ID for the specified LSA type.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "*/link-state-id"
//	Path from root:       "/ospfv2-routers/ospfv2-router/*/link-state-database/lsa-states/external-as-lsa/*/link-state-id"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsaPathAny) LinkStateId() *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_LinkStateIdPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_LinkStateIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "link-state-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): The cost of the summary route TOS level 0 and all
// unspecified levels.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/metric"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/metric"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsaPath) Metric() *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_MetricPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_MetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): The cost of the summary route TOS level 0 and all
// unspecified levels.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/metric"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/metric"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsaPathAny) Metric() *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_MetricPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_MetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MetricType (leaf): The type of metric included within the AS External LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/metric-type"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/metric-type"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsaPath) MetricType() *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_MetricTypePath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_MetricTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "metric-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MetricType (leaf): The type of metric included within the AS External LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/metric-type"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/metric-type"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsaPathAny) MetricType() *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_MetricTypePathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_MetricTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "metric-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NetworkMask (leaf): The IPv4 address mask for the network.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/network-mask"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/network-mask"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsaPath) NetworkMask() *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_NetworkMaskPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_NetworkMaskPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "network-mask"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NetworkMask (leaf): The IPv4 address mask for the network.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/network-mask"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/network-mask"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsaPathAny) NetworkMask() *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_NetworkMaskPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_NetworkMaskPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "network-mask"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OptionBits (leaf): The optional bits.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/option-bits"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/option-bits"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsaPath) OptionBits() *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_OptionBitsPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_OptionBitsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "option-bits"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OptionBits (leaf): The optional bits.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/option-bits"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/option-bits"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsaPathAny) OptionBits() *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_OptionBitsPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_OptionBitsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "option-bits"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SequenceNumber (leaf): Sequence number to detect old and duplicate LSAs.
// The greater the sequence number the more recent the LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/sequence-number"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/sequence-number"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsaPath) SequenceNumber() *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_SequenceNumberPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_SequenceNumberPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sequence-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SequenceNumber (leaf): Sequence number to detect old and duplicate LSAs.
// The greater the sequence number the more recent the LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/sequence-number"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa/state/sequence-number"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsaPathAny) SequenceNumber() *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_SequenceNumberPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa_SequenceNumberPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sequence-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsaPath) State() ygnmi.SingletonQuery[*oc.Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa] {
	return ygnmi.NewSingletonQuery[*oc.Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa](
		"Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsaPathAny) State() ygnmi.WildcardQuery[*oc.Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa] {
	return ygnmi.NewWildcardQuery[*oc.Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa](
		"Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_AdvertisingRouterPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa/state/advertising-router YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_AdvertisingRouterPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_AdvertisingRouterPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa/state/advertising-router YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_AdvertisingRouterPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/advertising-router"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa/state/advertising-router"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_AdvertisingRouterPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "advertising-router"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa).AdvertisingRouter
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/advertising-router"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa/state/advertising-router"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_AdvertisingRouterPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "advertising-router"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa).AdvertisingRouter
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_AgePath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa/state/age YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_AgePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_AgePathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa/state/age YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_AgePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/age"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa/state/age"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_AgePath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "age"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa).Age
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/age"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa/state/age"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_AgePathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "age"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa).Age
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_AttachedRouterPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa/state/attached-router YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_AttachedRouterPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_AttachedRouterPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa/state/attached-router YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_AttachedRouterPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/attached-router"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa/state/attached-router"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_AttachedRouterPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "attached-router"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa).AttachedRouter
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/attached-router"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa/state/attached-router"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_AttachedRouterPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "attached-router"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa).AttachedRouter
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_LinkStateIdPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa/state/link-state-id YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_LinkStateIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_LinkStateIdPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa/state/link-state-id YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_LinkStateIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/link-state-id"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa/state/link-state-id"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_LinkStateIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "link-state-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa).LinkStateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/link-state-id"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa/state/link-state-id"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_LinkStateIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "link-state-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa).LinkStateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "link-state-id"
//	Path from root:       ""
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_LinkStateIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"link-state-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa).LinkStateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "link-state-id"
//	Path from root:       ""
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_LinkStateIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"link-state-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa).LinkStateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_NetworkMaskPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa/state/network-mask YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_NetworkMaskPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_NetworkMaskPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa/state/network-mask YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_NetworkMaskPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/network-mask"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa/state/network-mask"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_NetworkMaskPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "network-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa).NetworkMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/network-mask"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa/state/network-mask"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_NetworkMaskPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "network-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa).NetworkMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_OptionBitsPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa/state/option-bits YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_OptionBitsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_OptionBitsPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa/state/option-bits YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_OptionBitsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/option-bits"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa/state/option-bits"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_OptionBitsPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "option-bits"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa).OptionBits
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/option-bits"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa/state/option-bits"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_OptionBitsPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "option-bits"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa).OptionBits
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_SequenceNumberPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa/state/sequence-number YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_SequenceNumberPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_SequenceNumberPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa/state/sequence-number YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_SequenceNumberPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/sequence-number"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa/state/sequence-number"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_SequenceNumberPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sequence-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa).SequenceNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/sequence-number"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa/state/sequence-number"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_SequenceNumberPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sequence-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa).SequenceNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsaPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsaPath struct {
	*ygnmi.NodePath
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsaPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsaPathAny struct {
	*ygnmi.NodePath
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsaPathMap represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsaPathMap struct {
	*ygnmi.NodePath
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsaPathMapAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsaPathMapAny struct {
	*ygnmi.NodePath
}

// AdvertisingRouter (leaf): The router ID of the router that originated the LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/advertising-router"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa/state/advertising-router"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsaPath) AdvertisingRouter() *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_AdvertisingRouterPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_AdvertisingRouterPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "advertising-router"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdvertisingRouter (leaf): The router ID of the router that originated the LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/advertising-router"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa/state/advertising-router"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsaPathAny) AdvertisingRouter() *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_AdvertisingRouterPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_AdvertisingRouterPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "advertising-router"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Age (leaf): The time since the LSA's generation in seconds.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/age"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa/state/age"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsaPath) Age() *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_AgePath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_AgePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "age"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Age (leaf): The time since the LSA's generation in seconds.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/age"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa/state/age"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsaPathAny) Age() *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_AgePathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_AgePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "age"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AttachedRouter (leaf-list): A list of the router ID of the routers that are attached to
// the network described by the Network LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/attached-router"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa/state/attached-router"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsaPath) AttachedRouter() *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_AttachedRouterPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_AttachedRouterPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "attached-router"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AttachedRouter (leaf-list): A list of the router ID of the routers that are attached to
// the network described by the Network LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/attached-router"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa/state/attached-router"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsaPathAny) AttachedRouter() *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_AttachedRouterPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_AttachedRouterPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "attached-router"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LinkStateId (leaf): The Link State ID for the specified LSA type.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "*/link-state-id"
//	Path from root:       "/ospfv2-routers/ospfv2-router/*/link-state-database/lsa-states/network-lsa/*/link-state-id"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsaPath) LinkStateId() *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_LinkStateIdPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_LinkStateIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "link-state-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LinkStateId (leaf): The Link State ID for the specified LSA type.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "*/link-state-id"
//	Path from root:       "/ospfv2-routers/ospfv2-router/*/link-state-database/lsa-states/network-lsa/*/link-state-id"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsaPathAny) LinkStateId() *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_LinkStateIdPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_LinkStateIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "link-state-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NetworkMask (leaf): The IPv4 address mask for the network.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/network-mask"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa/state/network-mask"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsaPath) NetworkMask() *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_NetworkMaskPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_NetworkMaskPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "network-mask"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NetworkMask (leaf): The IPv4 address mask for the network.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/network-mask"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa/state/network-mask"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsaPathAny) NetworkMask() *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_NetworkMaskPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_NetworkMaskPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "network-mask"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OptionBits (leaf): The optional bits.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/option-bits"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa/state/option-bits"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsaPath) OptionBits() *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_OptionBitsPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_OptionBitsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "option-bits"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OptionBits (leaf): The optional bits.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/option-bits"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa/state/option-bits"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsaPathAny) OptionBits() *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_OptionBitsPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_OptionBitsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "option-bits"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SequenceNumber (leaf): Sequence number to detect old and duplicate LSAs.
// The greater the sequence number the more recent the LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/sequence-number"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa/state/sequence-number"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsaPath) SequenceNumber() *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_SequenceNumberPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_SequenceNumberPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sequence-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SequenceNumber (leaf): Sequence number to detect old and duplicate LSAs.
// The greater the sequence number the more recent the LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/sequence-number"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa/state/sequence-number"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsaPathAny) SequenceNumber() *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_SequenceNumberPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa_SequenceNumberPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sequence-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsaPath) State() ygnmi.SingletonQuery[*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa] {
	return ygnmi.NewSingletonQuery[*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsaPathAny) State() ygnmi.WildcardQuery[*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa] {
	return ygnmi.NewWildcardQuery[*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_AdvertisingRouterPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa/state/advertising-router YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_AdvertisingRouterPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_AdvertisingRouterPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa/state/advertising-router YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_AdvertisingRouterPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/advertising-router"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa/state/advertising-router"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_AdvertisingRouterPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "advertising-router"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa).AdvertisingRouter
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/advertising-router"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa/state/advertising-router"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_AdvertisingRouterPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "advertising-router"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa).AdvertisingRouter
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_AgePath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa/state/age YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_AgePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_AgePathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa/state/age YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_AgePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/age"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa/state/age"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_AgePath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "age"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa).Age
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/age"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa/state/age"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_AgePathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "age"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa).Age
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_LinkStateIdPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa/state/link-state-id YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_LinkStateIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_LinkStateIdPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa/state/link-state-id YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_LinkStateIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/link-state-id"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa/state/link-state-id"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_LinkStateIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "link-state-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa).LinkStateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/link-state-id"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa/state/link-state-id"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_LinkStateIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "link-state-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa).LinkStateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "link-state-id"
//	Path from root:       ""
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_LinkStateIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"link-state-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa).LinkStateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "link-state-id"
//	Path from root:       ""
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_LinkStateIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"link-state-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa).LinkStateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_MetricPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa/state/metric YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_MetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_MetricPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa/state/metric YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_MetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/metric"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa/state/metric"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_MetricPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa).Metric
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/metric"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa/state/metric"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_MetricPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa).Metric
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_NetworkMaskPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa/state/network-mask YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_NetworkMaskPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_NetworkMaskPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa/state/network-mask YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_NetworkMaskPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/network-mask"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa/state/network-mask"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_NetworkMaskPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "network-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa).NetworkMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/network-mask"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa/state/network-mask"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_NetworkMaskPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "network-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa).NetworkMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_OptionBitsPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa/state/option-bits YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_OptionBitsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_OptionBitsPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa/state/option-bits YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_OptionBitsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/option-bits"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa/state/option-bits"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_OptionBitsPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "option-bits"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa).OptionBits
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/option-bits"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa/state/option-bits"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_OptionBitsPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "option-bits"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa).OptionBits
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_SequenceNumberPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa/state/sequence-number YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_SequenceNumberPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_SequenceNumberPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa/state/sequence-number YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_SequenceNumberPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/sequence-number"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa/state/sequence-number"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_SequenceNumberPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sequence-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa).SequenceNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/sequence-number"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa/state/sequence-number"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_SequenceNumberPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sequence-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa).SequenceNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsaPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsaPath struct {
	*ygnmi.NodePath
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsaPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsaPathAny struct {
	*ygnmi.NodePath
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsaPathMap represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsaPathMap struct {
	*ygnmi.NodePath
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsaPathMapAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsaPathMapAny struct {
	*ygnmi.NodePath
}

// AdvertisingRouter (leaf): The router ID of the router that originated the LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/advertising-router"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa/state/advertising-router"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsaPath) AdvertisingRouter() *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_AdvertisingRouterPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_AdvertisingRouterPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "advertising-router"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdvertisingRouter (leaf): The router ID of the router that originated the LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/advertising-router"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa/state/advertising-router"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsaPathAny) AdvertisingRouter() *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_AdvertisingRouterPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_AdvertisingRouterPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "advertising-router"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Age (leaf): The time since the LSA's generation in seconds.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/age"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa/state/age"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsaPath) Age() *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_AgePath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_AgePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "age"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Age (leaf): The time since the LSA's generation in seconds.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/age"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa/state/age"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsaPathAny) Age() *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_AgePathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_AgePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "age"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LinkStateId (leaf): The Link State ID for the specified LSA type.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "*/link-state-id"
//	Path from root:       "/ospfv2-routers/ospfv2-router/*/link-state-database/lsa-states/network-summary-lsa/*/link-state-id"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsaPath) LinkStateId() *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_LinkStateIdPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_LinkStateIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "link-state-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LinkStateId (leaf): The Link State ID for the specified LSA type.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "*/link-state-id"
//	Path from root:       "/ospfv2-routers/ospfv2-router/*/link-state-database/lsa-states/network-summary-lsa/*/link-state-id"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsaPathAny) LinkStateId() *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_LinkStateIdPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_LinkStateIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "link-state-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): The cost of the summary route TOS level 0 and all
// unspecified levels.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/metric"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa/state/metric"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsaPath) Metric() *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_MetricPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_MetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): The cost of the summary route TOS level 0 and all
// unspecified levels.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/metric"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa/state/metric"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsaPathAny) Metric() *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_MetricPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_MetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NetworkMask (leaf): The IPv4 address mask for the network.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/network-mask"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa/state/network-mask"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsaPath) NetworkMask() *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_NetworkMaskPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_NetworkMaskPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "network-mask"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NetworkMask (leaf): The IPv4 address mask for the network.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/network-mask"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa/state/network-mask"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsaPathAny) NetworkMask() *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_NetworkMaskPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_NetworkMaskPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "network-mask"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OptionBits (leaf): The optional bits.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/option-bits"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa/state/option-bits"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsaPath) OptionBits() *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_OptionBitsPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_OptionBitsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "option-bits"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OptionBits (leaf): The optional bits.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/option-bits"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa/state/option-bits"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsaPathAny) OptionBits() *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_OptionBitsPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_OptionBitsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "option-bits"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SequenceNumber (leaf): Sequence number to detect old and duplicate LSAs.
// The greater the sequence number the more recent the LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/sequence-number"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa/state/sequence-number"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsaPath) SequenceNumber() *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_SequenceNumberPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_SequenceNumberPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sequence-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SequenceNumber (leaf): Sequence number to detect old and duplicate LSAs.
// The greater the sequence number the more recent the LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/sequence-number"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa/state/sequence-number"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsaPathAny) SequenceNumber() *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_SequenceNumberPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa_SequenceNumberPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sequence-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsaPath) State() ygnmi.SingletonQuery[*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa] {
	return ygnmi.NewSingletonQuery[*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsaPathAny) State() ygnmi.WildcardQuery[*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa] {
	return ygnmi.NewWildcardQuery[*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_AdvertisingRouterPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/advertising-router YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_AdvertisingRouterPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_AdvertisingRouterPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/advertising-router YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_AdvertisingRouterPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/advertising-router"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/advertising-router"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_AdvertisingRouterPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "advertising-router"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa).AdvertisingRouter
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/advertising-router"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/advertising-router"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_AdvertisingRouterPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "advertising-router"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa).AdvertisingRouter
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_AgePath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/age YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_AgePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_AgePathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/age YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_AgePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/age"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/age"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_AgePath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "age"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa).Age
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/age"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/age"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_AgePathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "age"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa).Age
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_ForwardingAddressPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/forwarding-address YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_ForwardingAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_ForwardingAddressPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/forwarding-address YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_ForwardingAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/forwarding-address"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/forwarding-address"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_ForwardingAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "forwarding-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa).ForwardingAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/forwarding-address"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/forwarding-address"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_ForwardingAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "forwarding-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa).ForwardingAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_LinkStateIdPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/link-state-id YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_LinkStateIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_LinkStateIdPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/link-state-id YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_LinkStateIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/link-state-id"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/link-state-id"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_LinkStateIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "link-state-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa).LinkStateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/link-state-id"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/link-state-id"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_LinkStateIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "link-state-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa).LinkStateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "link-state-id"
//	Path from root:       ""
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_LinkStateIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"link-state-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa).LinkStateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "link-state-id"
//	Path from root:       ""
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_LinkStateIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"link-state-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa).LinkStateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_MetricPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/metric YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_MetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_MetricPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/metric YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_MetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/metric"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/metric"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_MetricPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa).Metric
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/metric"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/metric"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_MetricPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa).Metric
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_MetricTypePath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/metric-type YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_MetricTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_MetricTypePathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/metric-type YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_MetricTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/metric-type"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/metric-type"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_MetricTypePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa).MetricType
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/metric-type"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/metric-type"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_MetricTypePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa).MetricType
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_NetworkMaskPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/network-mask YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_NetworkMaskPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_NetworkMaskPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/network-mask YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_NetworkMaskPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/network-mask"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/network-mask"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_NetworkMaskPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "network-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa).NetworkMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/network-mask"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/network-mask"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_NetworkMaskPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "network-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa).NetworkMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_OptionBitsPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/option-bits YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_OptionBitsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_OptionBitsPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/option-bits YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_OptionBitsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/option-bits"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/option-bits"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_OptionBitsPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "option-bits"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa).OptionBits
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/option-bits"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/option-bits"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_OptionBitsPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "option-bits"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa).OptionBits
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_SequenceNumberPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/sequence-number YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_SequenceNumberPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_SequenceNumberPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/sequence-number YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_SequenceNumberPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/sequence-number"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/sequence-number"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_SequenceNumberPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sequence-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa).SequenceNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/sequence-number"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/sequence-number"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_SequenceNumberPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sequence-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa).SequenceNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsaPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsaPath struct {
	*ygnmi.NodePath
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsaPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsaPathAny struct {
	*ygnmi.NodePath
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsaPathMap represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsaPathMap struct {
	*ygnmi.NodePath
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsaPathMapAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsaPathMapAny struct {
	*ygnmi.NodePath
}

// AdvertisingRouter (leaf): The router ID of the router that originated the LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/advertising-router"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/advertising-router"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsaPath) AdvertisingRouter() *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_AdvertisingRouterPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_AdvertisingRouterPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "advertising-router"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdvertisingRouter (leaf): The router ID of the router that originated the LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/advertising-router"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/advertising-router"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsaPathAny) AdvertisingRouter() *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_AdvertisingRouterPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_AdvertisingRouterPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "advertising-router"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Age (leaf): The time since the LSA's generation in seconds.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/age"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/age"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsaPath) Age() *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_AgePath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_AgePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "age"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Age (leaf): The time since the LSA's generation in seconds.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/age"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/age"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsaPathAny) Age() *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_AgePathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_AgePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "age"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ForwardingAddress (leaf): IPv4 Forwarding address.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/forwarding-address"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/forwarding-address"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsaPath) ForwardingAddress() *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_ForwardingAddressPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_ForwardingAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "forwarding-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ForwardingAddress (leaf): IPv4 Forwarding address.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/forwarding-address"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/forwarding-address"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsaPathAny) ForwardingAddress() *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_ForwardingAddressPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_ForwardingAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "forwarding-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LinkStateId (leaf): The Link State ID for the specified LSA type.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "*/link-state-id"
//	Path from root:       "/ospfv2-routers/ospfv2-router/*/link-state-database/lsa-states/nssa-lsa/*/link-state-id"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsaPath) LinkStateId() *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_LinkStateIdPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_LinkStateIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "link-state-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LinkStateId (leaf): The Link State ID for the specified LSA type.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "*/link-state-id"
//	Path from root:       "/ospfv2-routers/ospfv2-router/*/link-state-database/lsa-states/nssa-lsa/*/link-state-id"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsaPathAny) LinkStateId() *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_LinkStateIdPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_LinkStateIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "link-state-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): The cost of the summary route TOS level 0 and all
// unspecified levels.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/metric"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/metric"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsaPath) Metric() *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_MetricPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_MetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): The cost of the summary route TOS level 0 and all
// unspecified levels.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/metric"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/metric"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsaPathAny) Metric() *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_MetricPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_MetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MetricType (leaf): The type of metric included within the AS External LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/metric-type"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/metric-type"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsaPath) MetricType() *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_MetricTypePath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_MetricTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "metric-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MetricType (leaf): The type of metric included within the AS External LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/metric-type"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/metric-type"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsaPathAny) MetricType() *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_MetricTypePathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_MetricTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "metric-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NetworkMask (leaf): The IPv4 address mask for the network.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/network-mask"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/network-mask"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsaPath) NetworkMask() *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_NetworkMaskPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_NetworkMaskPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "network-mask"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NetworkMask (leaf): The IPv4 address mask for the network.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/network-mask"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/network-mask"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsaPathAny) NetworkMask() *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_NetworkMaskPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_NetworkMaskPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "network-mask"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OptionBits (leaf): The optional bits.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/option-bits"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/option-bits"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsaPath) OptionBits() *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_OptionBitsPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_OptionBitsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "option-bits"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OptionBits (leaf): The optional bits.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/option-bits"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/option-bits"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsaPathAny) OptionBits() *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_OptionBitsPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_OptionBitsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "option-bits"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SequenceNumber (leaf): Sequence number to detect old and duplicate LSAs.
// The greater the sequence number the more recent the LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/sequence-number"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/sequence-number"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsaPath) SequenceNumber() *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_SequenceNumberPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_SequenceNumberPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sequence-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SequenceNumber (leaf): Sequence number to detect old and duplicate LSAs.
// The greater the sequence number the more recent the LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/sequence-number"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa/state/sequence-number"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsaPathAny) SequenceNumber() *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_SequenceNumberPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa_SequenceNumberPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sequence-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsaPath) State() ygnmi.SingletonQuery[*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa] {
	return ygnmi.NewSingletonQuery[*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsaPathAny) State() ygnmi.WildcardQuery[*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa] {
	return ygnmi.NewWildcardQuery[*oc.Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa](
		"Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_AdvertisingRouterPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/opaque-lsa/state/advertising-router YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_AdvertisingRouterPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_AdvertisingRouterPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/opaque-lsa/state/advertising-router YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_AdvertisingRouterPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/advertising-router"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/opaque-lsa/state/advertising-router"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_AdvertisingRouterPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "advertising-router"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa).AdvertisingRouter
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/advertising-router"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/opaque-lsa/state/advertising-router"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_AdvertisingRouterPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "advertising-router"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa).AdvertisingRouter
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_AgePath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/opaque-lsa/state/age YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_AgePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_AgePathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/opaque-lsa/state/age YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_AgePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/age"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/opaque-lsa/state/age"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_AgePath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "age"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa).Age
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/age"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/opaque-lsa/state/age"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_AgePathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "age"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa).Age
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_LinkStateIdPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/opaque-lsa/state/link-state-id YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_LinkStateIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_LinkStateIdPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/opaque-lsa/state/link-state-id YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_LinkStateIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/link-state-id"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/opaque-lsa/state/link-state-id"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_LinkStateIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "link-state-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa).LinkStateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/link-state-id"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/opaque-lsa/state/link-state-id"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_LinkStateIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "link-state-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa).LinkStateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "link-state-id"
//	Path from root:       ""
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_LinkStateIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"link-state-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa).LinkStateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "link-state-id"
//	Path from root:       ""
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_LinkStateIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"link-state-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa).LinkStateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_OptionBitsPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/opaque-lsa/state/option-bits YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_OptionBitsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_OptionBitsPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/opaque-lsa/state/option-bits YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_OptionBitsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/option-bits"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/opaque-lsa/state/option-bits"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_OptionBitsPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "option-bits"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa).OptionBits
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/option-bits"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/opaque-lsa/state/option-bits"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_OptionBitsPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "option-bits"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa).OptionBits
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_SequenceNumberPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/opaque-lsa/state/sequence-number YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_SequenceNumberPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_SequenceNumberPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/opaque-lsa/state/sequence-number YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_SequenceNumberPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/sequence-number"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/opaque-lsa/state/sequence-number"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_SequenceNumberPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sequence-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa).SequenceNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/sequence-number"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/opaque-lsa/state/sequence-number"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_SequenceNumberPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sequence-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa).SequenceNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_TypePath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/opaque-lsa/state/type YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_TypePathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/opaque-lsa/state/type YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/type"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/opaque-lsa/state/type"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_TypePath) State() ygnmi.SingletonQuery[oc.E_OpaqueLsa_Type] {
	return ygnmi.NewSingletonQuery[oc.E_OpaqueLsa_Type](
		"Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_OpaqueLsa_Type, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/type"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/opaque-lsa/state/type"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_TypePathAny) State() ygnmi.WildcardQuery[oc.E_OpaqueLsa_Type] {
	return ygnmi.NewWildcardQuery[oc.E_OpaqueLsa_Type](
		"Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_OpaqueLsa_Type, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsaPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/opaque-lsa YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsaPath struct {
	*ygnmi.NodePath
}

// Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsaPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/opaque-lsa YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsaPathAny struct {
	*ygnmi.NodePath
}

// Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsaPathMap represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/opaque-lsa YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsaPathMap struct {
	*ygnmi.NodePath
}

// Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsaPathMapAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/opaque-lsa YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsaPathMapAny struct {
	*ygnmi.NodePath
}

// AdvertisingRouter (leaf): The router ID of the router that originated the LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/advertising-router"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/opaque-lsa/state/advertising-router"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsaPath) AdvertisingRouter() *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_AdvertisingRouterPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_AdvertisingRouterPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "advertising-router"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdvertisingRouter (leaf): The router ID of the router that originated the LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/advertising-router"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/opaque-lsa/state/advertising-router"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsaPathAny) AdvertisingRouter() *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_AdvertisingRouterPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_AdvertisingRouterPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "advertising-router"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Age (leaf): The time since the LSA's generation in seconds.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/age"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/opaque-lsa/state/age"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsaPath) Age() *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_AgePath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_AgePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "age"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Age (leaf): The time since the LSA's generation in seconds.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/age"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/opaque-lsa/state/age"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsaPathAny) Age() *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_AgePathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_AgePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "age"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LinkStateId (leaf): The Link State ID for the specified LSA type.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "*/link-state-id"
//	Path from root:       "/ospfv2-routers/ospfv2-router/*/link-state-database/lsa-states/opaque-lsa/*/link-state-id"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsaPath) LinkStateId() *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_LinkStateIdPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_LinkStateIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "link-state-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LinkStateId (leaf): The Link State ID for the specified LSA type.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "*/link-state-id"
//	Path from root:       "/ospfv2-routers/ospfv2-router/*/link-state-database/lsa-states/opaque-lsa/*/link-state-id"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsaPathAny) LinkStateId() *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_LinkStateIdPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_LinkStateIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "link-state-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OptionBits (leaf): The optional bits.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/option-bits"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/opaque-lsa/state/option-bits"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsaPath) OptionBits() *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_OptionBitsPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_OptionBitsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "option-bits"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OptionBits (leaf): The optional bits.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/option-bits"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/opaque-lsa/state/option-bits"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsaPathAny) OptionBits() *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_OptionBitsPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_OptionBitsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "option-bits"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SequenceNumber (leaf): Sequence number to detect old and duplicate LSAs.
// The greater the sequence number the more recent the LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/sequence-number"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/opaque-lsa/state/sequence-number"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsaPath) SequenceNumber() *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_SequenceNumberPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_SequenceNumberPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sequence-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SequenceNumber (leaf): Sequence number to detect old and duplicate LSAs.
// The greater the sequence number the more recent the LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/sequence-number"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/opaque-lsa/state/sequence-number"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsaPathAny) SequenceNumber() *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_SequenceNumberPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_SequenceNumberPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sequence-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The data associated with the link type.
// The value is dependent upon the subtype of the LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/type"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/opaque-lsa/state/type"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsaPath) Type() *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_TypePath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The data associated with the link type.
// The value is dependent upon the subtype of the LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/type"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/opaque-lsa/state/type"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsaPathAny) Type() *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_TypePathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsaPath) State() ygnmi.SingletonQuery[*oc.Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa] {
	return ygnmi.NewSingletonQuery[*oc.Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa](
		"Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsaPathAny) State() ygnmi.WildcardQuery[*oc.Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa] {
	return ygnmi.NewWildcardQuery[*oc.Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa](
		"Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_AdvertisingRouterPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/advertising-router YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_AdvertisingRouterPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_AdvertisingRouterPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/advertising-router YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_AdvertisingRouterPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/advertising-router"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/advertising-router"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_AdvertisingRouterPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "advertising-router"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa).AdvertisingRouter
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/advertising-router"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/advertising-router"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_AdvertisingRouterPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "advertising-router"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa).AdvertisingRouter
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_AgePath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/age YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_AgePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_AgePathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/age YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_AgePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/age"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/age"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_AgePath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "age"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa).Age
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/age"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/age"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_AgePathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "age"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa).Age
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_LinkStateIdPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/link-state-id YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_LinkStateIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_LinkStateIdPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/link-state-id YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_LinkStateIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/link-state-id"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/link-state-id"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_LinkStateIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "link-state-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa).LinkStateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/link-state-id"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/link-state-id"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_LinkStateIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "link-state-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa).LinkStateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "link-state-id"
//	Path from root:       ""
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_LinkStateIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"link-state-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa).LinkStateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "link-state-id"
//	Path from root:       ""
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_LinkStateIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"link-state-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa).LinkStateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_OptionBitsPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/option-bits YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_OptionBitsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_OptionBitsPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/option-bits YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_OptionBitsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/option-bits"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/option-bits"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_OptionBitsPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "option-bits"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa).OptionBits
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/option-bits"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/option-bits"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_OptionBitsPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "option-bits"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa).OptionBits
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_SequenceNumberPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/sequence-number YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_SequenceNumberPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_SequenceNumberPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/sequence-number YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_SequenceNumberPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/sequence-number"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/sequence-number"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_SequenceNumberPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sequence-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa).SequenceNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/sequence-number"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/sequence-number"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_SequenceNumberPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sequence-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa).SequenceNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsaPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsaPath struct {
	*ygnmi.NodePath
}

// Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsaPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsaPathAny struct {
	*ygnmi.NodePath
}

// Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsaPathMap represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsaPathMap struct {
	*ygnmi.NodePath
}

// Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsaPathMapAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsaPathMapAny struct {
	*ygnmi.NodePath
}

// AdvertisingRouter (leaf): The router ID of the router that originated the LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/advertising-router"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/advertising-router"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsaPath) AdvertisingRouter() *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_AdvertisingRouterPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_AdvertisingRouterPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "advertising-router"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdvertisingRouter (leaf): The router ID of the router that originated the LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/advertising-router"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/advertising-router"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsaPathAny) AdvertisingRouter() *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_AdvertisingRouterPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_AdvertisingRouterPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "advertising-router"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Age (leaf): The time since the LSA's generation in seconds.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/age"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/age"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsaPath) Age() *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_AgePath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_AgePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "age"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Age (leaf): The time since the LSA's generation in seconds.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/age"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/age"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsaPathAny) Age() *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_AgePathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_AgePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "age"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LinkAny (list): OSPFv2 link attributes.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/link"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/link"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsaPath) LinkAny() *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_LinkPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_LinkPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "link"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// LinkAny (list): OSPFv2 link attributes.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/link"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/link"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsaPathAny) LinkAny() *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_LinkPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_LinkPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "link"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// Link (list): OSPFv2 link attributes.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/link"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/link"
//
//	Id: string
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsaPath) Link(Id string) *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_LinkPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_LinkPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "link"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// Link (list): OSPFv2 link attributes.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/link"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/link"
//
//	Id: string
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsaPathAny) Link(Id string) *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_LinkPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_LinkPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "link"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// LinkStateId (leaf): The Link State ID for the specified LSA type.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "*/link-state-id"
//	Path from root:       "/ospfv2-routers/ospfv2-router/*/link-state-database/lsa-states/router-lsa/*/link-state-id"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsaPath) LinkStateId() *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_LinkStateIdPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_LinkStateIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "link-state-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LinkStateId (leaf): The Link State ID for the specified LSA type.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "*/link-state-id"
//	Path from root:       "/ospfv2-routers/ospfv2-router/*/link-state-database/lsa-states/router-lsa/*/link-state-id"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsaPathAny) LinkStateId() *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_LinkStateIdPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_LinkStateIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "link-state-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OptionBits (leaf): The optional bits.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/option-bits"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/option-bits"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsaPath) OptionBits() *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_OptionBitsPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_OptionBitsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "option-bits"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OptionBits (leaf): The optional bits.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/option-bits"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/option-bits"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsaPathAny) OptionBits() *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_OptionBitsPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_OptionBitsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "option-bits"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SequenceNumber (leaf): Sequence number to detect old and duplicate LSAs.
// The greater the sequence number the more recent the LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/sequence-number"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/sequence-number"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsaPath) SequenceNumber() *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_SequenceNumberPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_SequenceNumberPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sequence-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SequenceNumber (leaf): Sequence number to detect old and duplicate LSAs.
// The greater the sequence number the more recent the LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/sequence-number"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/sequence-number"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsaPathAny) SequenceNumber() *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_SequenceNumberPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_SequenceNumberPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sequence-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsaPath) State() ygnmi.SingletonQuery[*oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa] {
	return ygnmi.NewSingletonQuery[*oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa](
		"Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsaPathAny) State() ygnmi.WildcardQuery[*oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa] {
	return ygnmi.NewWildcardQuery[*oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa](
		"Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link_DataPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/link/state/data YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link_DataPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link_DataPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/link/state/data YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link_DataPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/data"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/link/state/data"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link_DataPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "data"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link).Data
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/data"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/link/state/data"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link_DataPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "data"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link).Data
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link_IdPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/link/state/id YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link_IdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link_IdPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/link/state/id YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link_IdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/id"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/link/state/id"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link_IdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/id"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/link/state/id"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link_IdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "id"
//	Path from root:       ""
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link_IdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "id"
//	Path from root:       ""
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link_IdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link_MetricPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/link/state/metric YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link_MetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link_MetricPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/link/state/metric YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link_MetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/metric"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/link/state/metric"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link_MetricPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link).Metric
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/metric"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/link/state/metric"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link_MetricPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link).Metric
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link_TypePath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/link/state/type YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link_TypePathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/link/state/type YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/type"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/link/state/type"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link_TypePath) State() ygnmi.SingletonQuery[oc.E_Link_Type] {
	return ygnmi.NewSingletonQuery[oc.E_Link_Type](
		"Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Link_Type, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/type"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/link/state/type"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link_TypePathAny) State() ygnmi.WildcardQuery[oc.E_Link_Type] {
	return ygnmi.NewWildcardQuery[oc.E_Link_Type](
		"Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Link_Type, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_LinkPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/link YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_LinkPath struct {
	*ygnmi.NodePath
}

// Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_LinkPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/link YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_LinkPathAny struct {
	*ygnmi.NodePath
}

// Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_LinkPathMap represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/link YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_LinkPathMap struct {
	*ygnmi.NodePath
}

// Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_LinkPathMapAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/link YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_LinkPathMapAny struct {
	*ygnmi.NodePath
}

// Data (leaf): The data associated with the link type. The value is
// dependent upon the subtype of the LSA. When the connection is
// to a stub network it represents the mask; for p2p connections
// that are unnumbered it represents the ifIndex value of the
// router's interface; for all other connections it represents
// the local system's IP address.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/data"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/link/state/data"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_LinkPath) Data() *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link_DataPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link_DataPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "data"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Data (leaf): The data associated with the link type. The value is
// dependent upon the subtype of the LSA. When the connection is
// to a stub network it represents the mask; for p2p connections
// that are unnumbered it represents the ifIndex value of the
// router's interface; for all other connections it represents
// the local system's IP address.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/data"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/link/state/data"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_LinkPathAny) Data() *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link_DataPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link_DataPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "data"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): The identifier for the link specified. The value of the link
// identifier is dependent upon the type of the LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "*/id"
//	Path from root:       "/ospfv2-routers/ospfv2-router/*/link-state-database/lsa-states/router-lsa/*/link/*/id"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_LinkPath) Id() *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link_IdPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link_IdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): The identifier for the link specified. The value of the link
// identifier is dependent upon the type of the LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "*/id"
//	Path from root:       "/ospfv2-routers/ospfv2-router/*/link-state-database/lsa-states/router-lsa/*/link/*/id"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_LinkPathAny) Id() *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link_IdPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link_IdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): The cost of utilising the link specified independent of TOS.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/metric"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/link/state/metric"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_LinkPath) Metric() *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link_MetricPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link_MetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): The cost of utilising the link specified independent of TOS.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/metric"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/link/state/metric"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_LinkPathAny) Metric() *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link_MetricPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link_MetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The data associated with the link type.
// The value is dependent upon the subtype of the LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/type"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/link/state/type"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_LinkPath) Type() *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link_TypePath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The data associated with the link type.
// The value is dependent upon the subtype of the LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/type"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/link/state/type"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_LinkPathAny) Type() *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link_TypePathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_LinkPath) State() ygnmi.SingletonQuery[*oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link] {
	return ygnmi.NewSingletonQuery[*oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link](
		"Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_LinkPathAny) State() ygnmi.WildcardQuery[*oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link] {
	return ygnmi.NewWildcardQuery[*oc.Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link](
		"Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_AdvertisingRouterPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa/state/advertising-router YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_AdvertisingRouterPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_AdvertisingRouterPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa/state/advertising-router YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_AdvertisingRouterPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/advertising-router"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa/state/advertising-router"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_AdvertisingRouterPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "advertising-router"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa).AdvertisingRouter
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/advertising-router"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa/state/advertising-router"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_AdvertisingRouterPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "advertising-router"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa).AdvertisingRouter
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_AgePath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa/state/age YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_AgePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_AgePathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa/state/age YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_AgePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/age"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa/state/age"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_AgePath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "age"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa).Age
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/age"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa/state/age"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_AgePathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "age"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa).Age
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_LinkStateIdPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa/state/link-state-id YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_LinkStateIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_LinkStateIdPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa/state/link-state-id YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_LinkStateIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/link-state-id"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa/state/link-state-id"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_LinkStateIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "link-state-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa).LinkStateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/link-state-id"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa/state/link-state-id"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_LinkStateIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "link-state-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa).LinkStateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "link-state-id"
//	Path from root:       ""
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_LinkStateIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"link-state-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa).LinkStateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "link-state-id"
//	Path from root:       ""
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_LinkStateIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"link-state-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa).LinkStateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_MetricPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa/state/metric YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_MetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_MetricPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa/state/metric YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_MetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/metric"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa/state/metric"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_MetricPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa).Metric
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/metric"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa/state/metric"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_MetricPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa).Metric
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_NetworkMaskPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa/state/network-mask YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_NetworkMaskPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_NetworkMaskPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa/state/network-mask YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_NetworkMaskPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/network-mask"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa/state/network-mask"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_NetworkMaskPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "network-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa).NetworkMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/network-mask"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa/state/network-mask"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_NetworkMaskPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "network-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa).NetworkMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_OptionBitsPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa/state/option-bits YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_OptionBitsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_OptionBitsPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa/state/option-bits YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_OptionBitsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/option-bits"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa/state/option-bits"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_OptionBitsPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "option-bits"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa).OptionBits
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/option-bits"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa/state/option-bits"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_OptionBitsPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "option-bits"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa).OptionBits
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_SequenceNumberPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa/state/sequence-number YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_SequenceNumberPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_SequenceNumberPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa/state/sequence-number YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_SequenceNumberPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/sequence-number"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa/state/sequence-number"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_SequenceNumberPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sequence-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa).SequenceNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/sequence-number"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa/state/sequence-number"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_SequenceNumberPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sequence-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa).SequenceNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsaPath represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsaPath struct {
	*ygnmi.NodePath
}

// Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsaPathAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsaPathAny struct {
	*ygnmi.NodePath
}

// Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsaPathMap represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsaPathMap struct {
	*ygnmi.NodePath
}

// Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsaPathMapAny represents the wildcard version of the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsaPathMapAny struct {
	*ygnmi.NodePath
}

// AdvertisingRouter (leaf): The router ID of the router that originated the LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/advertising-router"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa/state/advertising-router"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsaPath) AdvertisingRouter() *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_AdvertisingRouterPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_AdvertisingRouterPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "advertising-router"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdvertisingRouter (leaf): The router ID of the router that originated the LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/advertising-router"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa/state/advertising-router"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsaPathAny) AdvertisingRouter() *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_AdvertisingRouterPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_AdvertisingRouterPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "advertising-router"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Age (leaf): The time since the LSA's generation in seconds.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/age"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa/state/age"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsaPath) Age() *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_AgePath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_AgePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "age"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Age (leaf): The time since the LSA's generation in seconds.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/age"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa/state/age"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsaPathAny) Age() *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_AgePathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_AgePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "age"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LinkStateId (leaf): The Link State ID for the specified LSA type.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "*/link-state-id"
//	Path from root:       "/ospfv2-routers/ospfv2-router/*/link-state-database/lsa-states/summary-as-lsa/*/link-state-id"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsaPath) LinkStateId() *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_LinkStateIdPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_LinkStateIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "link-state-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LinkStateId (leaf): The Link State ID for the specified LSA type.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "*/link-state-id"
//	Path from root:       "/ospfv2-routers/ospfv2-router/*/link-state-database/lsa-states/summary-as-lsa/*/link-state-id"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsaPathAny) LinkStateId() *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_LinkStateIdPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_LinkStateIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "link-state-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): The cost of the summary route TOS level 0 and all
// unspecified levels.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/metric"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa/state/metric"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsaPath) Metric() *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_MetricPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_MetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): The cost of the summary route TOS level 0 and all
// unspecified levels.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/metric"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa/state/metric"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsaPathAny) Metric() *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_MetricPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_MetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NetworkMask (leaf): The IPv4 address mask for the network.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/network-mask"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa/state/network-mask"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsaPath) NetworkMask() *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_NetworkMaskPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_NetworkMaskPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "network-mask"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NetworkMask (leaf): The IPv4 address mask for the network.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/network-mask"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa/state/network-mask"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsaPathAny) NetworkMask() *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_NetworkMaskPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_NetworkMaskPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "network-mask"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OptionBits (leaf): The optional bits.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/option-bits"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa/state/option-bits"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsaPath) OptionBits() *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_OptionBitsPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_OptionBitsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "option-bits"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OptionBits (leaf): The optional bits.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/option-bits"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa/state/option-bits"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsaPathAny) OptionBits() *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_OptionBitsPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_OptionBitsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "option-bits"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SequenceNumber (leaf): Sequence number to detect old and duplicate LSAs.
// The greater the sequence number the more recent the LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/sequence-number"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa/state/sequence-number"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsaPath) SequenceNumber() *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_SequenceNumberPath {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_SequenceNumberPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sequence-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SequenceNumber (leaf): Sequence number to detect old and duplicate LSAs.
// The greater the sequence number the more recent the LSA.
//
//	Defining module:      "open-traffic-generator-ospfv2"
//	Instantiating module: "open-traffic-generator-ospfv2"
//	Path from parent:     "state/sequence-number"
//	Path from root:       "/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa/state/sequence-number"
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsaPathAny) SequenceNumber() *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_SequenceNumberPathAny {
	ps := &Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa_SequenceNumberPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sequence-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsaPath) State() ygnmi.SingletonQuery[*oc.Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa] {
	return ygnmi.NewSingletonQuery[*oc.Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa](
		"Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsaPathAny) State() ygnmi.WildcardQuery[*oc.Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa] {
	return ygnmi.NewWildcardQuery[*oc.Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa](
		"Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

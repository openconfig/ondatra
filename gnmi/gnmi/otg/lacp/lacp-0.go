/*
Package lacp is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.20)
using the following YANG input files:
  - models-yang/models/bgp/open-traffic-generator-bgp.yang
  - models-yang/models/dhcp/v4client/open-traffic-generator-dhcpv4client.yang
  - models-yang/models/dhcp/v4server/open-traffic-generator-dhcpv4server.yang
  - models-yang/models/dhcp/v6client/open-traffic-generator-dhcpv6client.yang
  - models-yang/models/dhcp/v6server/open-traffic-generator-dhcpv6server.yang
  - models-yang/models/discovery/open-traffic-generator-discovery.yang
  - models-yang/models/discovery/open-traffic-generator-discovery-interfaces.yang
  - models-yang/models/flow/open-traffic-generator-flow.yang
  - models-yang/models/interface/open-traffic-generator-port.yang
  - models-yang/models/isis/open-traffic-generator-isis.yang
  - models-yang/models/lacp/open-traffic-generator-lacp.yang
  - models-yang/models/lag/open-traffic-generator-lag.yang
  - models-yang/models/lldp/open-traffic-generator-lldp.yang
  - models-yang/models/ospfv2/open-traffic-generator-ospfv2.yang
  - models-yang/models/ospfv3/open-traffic-generator-ospfv3.yang
  - models-yang/models/platform/open-traffic-generator-platform.yang
  - models-yang/models/rsvp/open-traffic-generator-rsvp.yang
  - models-yang/models/types/open-traffic-generator-types.yang

Imported modules were sourced from:
  - models-yang/models/...
*/
package lacp

import (
	"reflect"

	oc "github.com/openconfig/ondatra/gnmi/otg"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// LacpPath represents the /open-traffic-generator-lacp/lacp YANG schema element.
type LacpPath struct {
	*ygnmi.NodePath
}

// LacpPathAny represents the wildcard version of the /open-traffic-generator-lacp/lacp YANG schema element.
type LacpPathAny struct {
	*ygnmi.NodePath
}

// LagMemberAny (list): Each LAG member (port) is identified by an arbitrary string
// identifier.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "lag-members/lag-member"
//	Path from root:       "/lacp/lag-members/lag-member"
func (n *LacpPath) LagMemberAny() *Lacp_LagMemberPathAny {
	ps := &Lacp_LagMemberPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lag-members", "lag-member"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// LagMemberAny (list): Each LAG member (port) is identified by an arbitrary string
// identifier.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "lag-members/lag-member"
//	Path from root:       "/lacp/lag-members/lag-member"
func (n *LacpPathAny) LagMemberAny() *Lacp_LagMemberPathAny {
	ps := &Lacp_LagMemberPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lag-members", "lag-member"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// LagMember (list): Each LAG member (port) is identified by an arbitrary string
// identifier.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "lag-members/lag-member"
//	Path from root:       "/lacp/lag-members/lag-member"
//
//	Name: string
func (n *LacpPath) LagMember(Name string) *Lacp_LagMemberPath {
	ps := &Lacp_LagMemberPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"lag-members", "lag-member"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// LagMember (list): Each LAG member (port) is identified by an arbitrary string
// identifier.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "lag-members/lag-member"
//	Path from root:       "/lacp/lag-members/lag-member"
//
//	Name: string
func (n *LacpPathAny) LagMember(Name string) *Lacp_LagMemberPathAny {
	ps := &Lacp_LagMemberPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lag-members", "lag-member"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *LacpPath) State() ygnmi.SingletonQuery[*oc.Lacp] {
	return ygnmi.NewSingletonQuery[*oc.Lacp](
		"Lacp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *LacpPathAny) State() ygnmi.WildcardQuery[*oc.Lacp] {
	return ygnmi.NewWildcardQuery[*oc.Lacp](
		"Lacp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_LagMember_ActivityPath represents the /open-traffic-generator-lacp/lacp/lag-members/lag-member/state/activity YANG schema element.
type Lacp_LagMember_ActivityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_LagMember_ActivityPathAny represents the wildcard version of the /open-traffic-generator-lacp/lacp/lag-members/lag-member/state/activity YANG schema element.
type Lacp_LagMember_ActivityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/activity"
//	Path from root:       "/lacp/lag-members/lag-member/state/activity"
func (n *Lacp_LagMember_ActivityPath) State() ygnmi.SingletonQuery[oc.E_Lacp_LacpActivityType] {
	return ygnmi.NewSingletonQuery[oc.E_Lacp_LacpActivityType](
		"Lacp_LagMember",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "activity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Lacp_LacpActivityType, bool) {
			ret := gs.(*oc.Lacp_LagMember).Activity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_LagMember) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/activity"
//	Path from root:       "/lacp/lag-members/lag-member/state/activity"
func (n *Lacp_LagMember_ActivityPathAny) State() ygnmi.WildcardQuery[oc.E_Lacp_LacpActivityType] {
	return ygnmi.NewWildcardQuery[oc.E_Lacp_LacpActivityType](
		"Lacp_LagMember",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "activity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Lacp_LacpActivityType, bool) {
			ret := gs.(*oc.Lacp_LagMember).Activity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_LagMember) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_LagMember_AggregatablePath represents the /open-traffic-generator-lacp/lacp/lag-members/lag-member/state/aggregatable YANG schema element.
type Lacp_LagMember_AggregatablePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_LagMember_AggregatablePathAny represents the wildcard version of the /open-traffic-generator-lacp/lacp/lag-members/lag-member/state/aggregatable YANG schema element.
type Lacp_LagMember_AggregatablePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/aggregatable"
//	Path from root:       "/lacp/lag-members/lag-member/state/aggregatable"
func (n *Lacp_LagMember_AggregatablePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Lacp_LagMember",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "aggregatable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Lacp_LagMember).Aggregatable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_LagMember) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/aggregatable"
//	Path from root:       "/lacp/lag-members/lag-member/state/aggregatable"
func (n *Lacp_LagMember_AggregatablePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Lacp_LagMember",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "aggregatable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Lacp_LagMember).Aggregatable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_LagMember) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_LagMember_CollectingPath represents the /open-traffic-generator-lacp/lacp/lag-members/lag-member/state/collecting YANG schema element.
type Lacp_LagMember_CollectingPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_LagMember_CollectingPathAny represents the wildcard version of the /open-traffic-generator-lacp/lacp/lag-members/lag-member/state/collecting YANG schema element.
type Lacp_LagMember_CollectingPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/collecting"
//	Path from root:       "/lacp/lag-members/lag-member/state/collecting"
func (n *Lacp_LagMember_CollectingPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Lacp_LagMember",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "collecting"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Lacp_LagMember).Collecting
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_LagMember) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/collecting"
//	Path from root:       "/lacp/lag-members/lag-member/state/collecting"
func (n *Lacp_LagMember_CollectingPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Lacp_LagMember",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "collecting"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Lacp_LagMember).Collecting
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_LagMember) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_LagMember_DistributingPath represents the /open-traffic-generator-lacp/lacp/lag-members/lag-member/state/distributing YANG schema element.
type Lacp_LagMember_DistributingPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_LagMember_DistributingPathAny represents the wildcard version of the /open-traffic-generator-lacp/lacp/lag-members/lag-member/state/distributing YANG schema element.
type Lacp_LagMember_DistributingPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/distributing"
//	Path from root:       "/lacp/lag-members/lag-member/state/distributing"
func (n *Lacp_LagMember_DistributingPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Lacp_LagMember",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "distributing"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Lacp_LagMember).Distributing
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_LagMember) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/distributing"
//	Path from root:       "/lacp/lag-members/lag-member/state/distributing"
func (n *Lacp_LagMember_DistributingPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Lacp_LagMember",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "distributing"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Lacp_LagMember).Distributing
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_LagMember) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_LagMember_NamePath represents the /open-traffic-generator-lacp/lacp/lag-members/lag-member/state/name YANG schema element.
type Lacp_LagMember_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_LagMember_NamePathAny represents the wildcard version of the /open-traffic-generator-lacp/lacp/lag-members/lag-member/state/name YANG schema element.
type Lacp_LagMember_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/name"
//	Path from root:       "/lacp/lag-members/lag-member/state/name"
func (n *Lacp_LagMember_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Lacp_LagMember",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lacp_LagMember).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_LagMember) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/name"
//	Path from root:       "/lacp/lag-members/lag-member/state/name"
func (n *Lacp_LagMember_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Lacp_LagMember",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lacp_LagMember).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_LagMember) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *Lacp_LagMember_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Lacp_LagMember",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lacp_LagMember).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_LagMember) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *Lacp_LagMember_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Lacp_LagMember",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lacp_LagMember).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_LagMember) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_LagMember_OperKeyPath represents the /open-traffic-generator-lacp/lacp/lag-members/lag-member/state/oper-key YANG schema element.
type Lacp_LagMember_OperKeyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_LagMember_OperKeyPathAny represents the wildcard version of the /open-traffic-generator-lacp/lacp/lag-members/lag-member/state/oper-key YANG schema element.
type Lacp_LagMember_OperKeyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/oper-key"
//	Path from root:       "/lacp/lag-members/lag-member/state/oper-key"
func (n *Lacp_LagMember_OperKeyPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Lacp_LagMember",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oper-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Lacp_LagMember).OperKey
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_LagMember) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/oper-key"
//	Path from root:       "/lacp/lag-members/lag-member/state/oper-key"
func (n *Lacp_LagMember_OperKeyPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Lacp_LagMember",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oper-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Lacp_LagMember).OperKey
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_LagMember) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_LagMember_PartnerIdPath represents the /open-traffic-generator-lacp/lacp/lag-members/lag-member/state/partner-id YANG schema element.
type Lacp_LagMember_PartnerIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_LagMember_PartnerIdPathAny represents the wildcard version of the /open-traffic-generator-lacp/lacp/lag-members/lag-member/state/partner-id YANG schema element.
type Lacp_LagMember_PartnerIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/partner-id"
//	Path from root:       "/lacp/lag-members/lag-member/state/partner-id"
func (n *Lacp_LagMember_PartnerIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Lacp_LagMember",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "partner-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lacp_LagMember).PartnerId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_LagMember) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/partner-id"
//	Path from root:       "/lacp/lag-members/lag-member/state/partner-id"
func (n *Lacp_LagMember_PartnerIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Lacp_LagMember",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "partner-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lacp_LagMember).PartnerId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_LagMember) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_LagMember_PartnerKeyPath represents the /open-traffic-generator-lacp/lacp/lag-members/lag-member/state/partner-key YANG schema element.
type Lacp_LagMember_PartnerKeyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_LagMember_PartnerKeyPathAny represents the wildcard version of the /open-traffic-generator-lacp/lacp/lag-members/lag-member/state/partner-key YANG schema element.
type Lacp_LagMember_PartnerKeyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/partner-key"
//	Path from root:       "/lacp/lag-members/lag-member/state/partner-key"
func (n *Lacp_LagMember_PartnerKeyPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Lacp_LagMember",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "partner-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Lacp_LagMember).PartnerKey
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_LagMember) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/partner-key"
//	Path from root:       "/lacp/lag-members/lag-member/state/partner-key"
func (n *Lacp_LagMember_PartnerKeyPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Lacp_LagMember",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "partner-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Lacp_LagMember).PartnerKey
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_LagMember) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_LagMember_PartnerPortNumPath represents the /open-traffic-generator-lacp/lacp/lag-members/lag-member/state/partner-port-num YANG schema element.
type Lacp_LagMember_PartnerPortNumPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_LagMember_PartnerPortNumPathAny represents the wildcard version of the /open-traffic-generator-lacp/lacp/lag-members/lag-member/state/partner-port-num YANG schema element.
type Lacp_LagMember_PartnerPortNumPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/partner-port-num"
//	Path from root:       "/lacp/lag-members/lag-member/state/partner-port-num"
func (n *Lacp_LagMember_PartnerPortNumPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Lacp_LagMember",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "partner-port-num"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Lacp_LagMember).PartnerPortNum
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_LagMember) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/partner-port-num"
//	Path from root:       "/lacp/lag-members/lag-member/state/partner-port-num"
func (n *Lacp_LagMember_PartnerPortNumPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Lacp_LagMember",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "partner-port-num"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Lacp_LagMember).PartnerPortNum
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_LagMember) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_LagMember_PortNumPath represents the /open-traffic-generator-lacp/lacp/lag-members/lag-member/state/port-num YANG schema element.
type Lacp_LagMember_PortNumPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_LagMember_PortNumPathAny represents the wildcard version of the /open-traffic-generator-lacp/lacp/lag-members/lag-member/state/port-num YANG schema element.
type Lacp_LagMember_PortNumPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/port-num"
//	Path from root:       "/lacp/lag-members/lag-member/state/port-num"
func (n *Lacp_LagMember_PortNumPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Lacp_LagMember",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "port-num"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Lacp_LagMember).PortNum
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_LagMember) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/port-num"
//	Path from root:       "/lacp/lag-members/lag-member/state/port-num"
func (n *Lacp_LagMember_PortNumPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Lacp_LagMember",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "port-num"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Lacp_LagMember).PortNum
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_LagMember) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_LagMember_SynchronizationPath represents the /open-traffic-generator-lacp/lacp/lag-members/lag-member/state/synchronization YANG schema element.
type Lacp_LagMember_SynchronizationPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_LagMember_SynchronizationPathAny represents the wildcard version of the /open-traffic-generator-lacp/lacp/lag-members/lag-member/state/synchronization YANG schema element.
type Lacp_LagMember_SynchronizationPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/synchronization"
//	Path from root:       "/lacp/lag-members/lag-member/state/synchronization"
func (n *Lacp_LagMember_SynchronizationPath) State() ygnmi.SingletonQuery[oc.E_Lacp_LacpSynchronizationType] {
	return ygnmi.NewSingletonQuery[oc.E_Lacp_LacpSynchronizationType](
		"Lacp_LagMember",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "synchronization"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Lacp_LacpSynchronizationType, bool) {
			ret := gs.(*oc.Lacp_LagMember).Synchronization
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_LagMember) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/synchronization"
//	Path from root:       "/lacp/lag-members/lag-member/state/synchronization"
func (n *Lacp_LagMember_SynchronizationPathAny) State() ygnmi.WildcardQuery[oc.E_Lacp_LacpSynchronizationType] {
	return ygnmi.NewWildcardQuery[oc.E_Lacp_LacpSynchronizationType](
		"Lacp_LagMember",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "synchronization"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Lacp_LacpSynchronizationType, bool) {
			ret := gs.(*oc.Lacp_LagMember).Synchronization
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_LagMember) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_LagMember_SystemIdPath represents the /open-traffic-generator-lacp/lacp/lag-members/lag-member/state/system-id YANG schema element.
type Lacp_LagMember_SystemIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_LagMember_SystemIdPathAny represents the wildcard version of the /open-traffic-generator-lacp/lacp/lag-members/lag-member/state/system-id YANG schema element.
type Lacp_LagMember_SystemIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/system-id"
//	Path from root:       "/lacp/lag-members/lag-member/state/system-id"
func (n *Lacp_LagMember_SystemIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Lacp_LagMember",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "system-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lacp_LagMember).SystemId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_LagMember) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/system-id"
//	Path from root:       "/lacp/lag-members/lag-member/state/system-id"
func (n *Lacp_LagMember_SystemIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Lacp_LagMember",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "system-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lacp_LagMember).SystemId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_LagMember) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_LagMember_TimeoutPath represents the /open-traffic-generator-lacp/lacp/lag-members/lag-member/state/timeout YANG schema element.
type Lacp_LagMember_TimeoutPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_LagMember_TimeoutPathAny represents the wildcard version of the /open-traffic-generator-lacp/lacp/lag-members/lag-member/state/timeout YANG schema element.
type Lacp_LagMember_TimeoutPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/timeout"
//	Path from root:       "/lacp/lag-members/lag-member/state/timeout"
func (n *Lacp_LagMember_TimeoutPath) State() ygnmi.SingletonQuery[oc.E_Lacp_LacpTimeoutType] {
	return ygnmi.NewSingletonQuery[oc.E_Lacp_LacpTimeoutType](
		"Lacp_LagMember",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "timeout"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Lacp_LacpTimeoutType, bool) {
			ret := gs.(*oc.Lacp_LagMember).Timeout
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_LagMember) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/timeout"
//	Path from root:       "/lacp/lag-members/lag-member/state/timeout"
func (n *Lacp_LagMember_TimeoutPathAny) State() ygnmi.WildcardQuery[oc.E_Lacp_LacpTimeoutType] {
	return ygnmi.NewWildcardQuery[oc.E_Lacp_LacpTimeoutType](
		"Lacp_LagMember",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "timeout"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Lacp_LacpTimeoutType, bool) {
			ret := gs.(*oc.Lacp_LagMember).Timeout
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_LagMember) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_LagMemberPath represents the /open-traffic-generator-lacp/lacp/lag-members/lag-member YANG schema element.
type Lacp_LagMemberPath struct {
	*ygnmi.NodePath
}

// Lacp_LagMemberPathAny represents the wildcard version of the /open-traffic-generator-lacp/lacp/lag-members/lag-member YANG schema element.
type Lacp_LagMemberPathAny struct {
	*ygnmi.NodePath
}

// Lacp_LagMemberPathMap represents the /open-traffic-generator-lacp/lacp/lag-members/lag-member YANG schema element.
type Lacp_LagMemberPathMap struct {
	*ygnmi.NodePath
}

// Lacp_LagMemberPathMapAny represents the wildcard version of the /open-traffic-generator-lacp/lacp/lag-members/lag-member YANG schema element.
type Lacp_LagMemberPathMapAny struct {
	*ygnmi.NodePath
}

// Activity (leaf): Indicates participant is active or passive
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/activity"
//	Path from root:       "/lacp/lag-members/lag-member/state/activity"
func (n *Lacp_LagMemberPath) Activity() *Lacp_LagMember_ActivityPath {
	ps := &Lacp_LagMember_ActivityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "activity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Activity (leaf): Indicates participant is active or passive
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/activity"
//	Path from root:       "/lacp/lag-members/lag-member/state/activity"
func (n *Lacp_LagMemberPathAny) Activity() *Lacp_LagMember_ActivityPathAny {
	ps := &Lacp_LagMember_ActivityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "activity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Aggregatable (leaf): A true value indicates that the participant will allow
// the link to be used as part of the aggregate. A false
// value indicates the link should be used as an individual
// link
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/aggregatable"
//	Path from root:       "/lacp/lag-members/lag-member/state/aggregatable"
func (n *Lacp_LagMemberPath) Aggregatable() *Lacp_LagMember_AggregatablePath {
	ps := &Lacp_LagMember_AggregatablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "aggregatable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Aggregatable (leaf): A true value indicates that the participant will allow
// the link to be used as part of the aggregate. A false
// value indicates the link should be used as an individual
// link
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/aggregatable"
//	Path from root:       "/lacp/lag-members/lag-member/state/aggregatable"
func (n *Lacp_LagMemberPathAny) Aggregatable() *Lacp_LagMember_AggregatablePathAny {
	ps := &Lacp_LagMember_AggregatablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "aggregatable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Collecting (leaf): If true, the participant is collecting incoming frames
// on the link, otherwise false
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/collecting"
//	Path from root:       "/lacp/lag-members/lag-member/state/collecting"
func (n *Lacp_LagMemberPath) Collecting() *Lacp_LagMember_CollectingPath {
	ps := &Lacp_LagMember_CollectingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "collecting"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Collecting (leaf): If true, the participant is collecting incoming frames
// on the link, otherwise false
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/collecting"
//	Path from root:       "/lacp/lag-members/lag-member/state/collecting"
func (n *Lacp_LagMemberPathAny) Collecting() *Lacp_LagMember_CollectingPathAny {
	ps := &Lacp_LagMember_CollectingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "collecting"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Counters (container): Counters of an individual LACP peer.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/counters"
//	Path from root:       "/lacp/lag-members/lag-member/state/counters"
func (n *Lacp_LagMemberPath) Counters() *Lacp_LagMember_CountersPath {
	ps := &Lacp_LagMember_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Counters of an individual LACP peer.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/counters"
//	Path from root:       "/lacp/lag-members/lag-member/state/counters"
func (n *Lacp_LagMemberPathAny) Counters() *Lacp_LagMember_CountersPathAny {
	ps := &Lacp_LagMember_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Distributing (leaf): When true, the participant is distributing outgoing
// frames; when false, distribution is disabled
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/distributing"
//	Path from root:       "/lacp/lag-members/lag-member/state/distributing"
func (n *Lacp_LagMemberPath) Distributing() *Lacp_LagMember_DistributingPath {
	ps := &Lacp_LagMember_DistributingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "distributing"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Distributing (leaf): When true, the participant is distributing outgoing
// frames; when false, distribution is disabled
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/distributing"
//	Path from root:       "/lacp/lag-members/lag-member/state/distributing"
func (n *Lacp_LagMemberPathAny) Distributing() *Lacp_LagMember_DistributingPathAny {
	ps := &Lacp_LagMember_DistributingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "distributing"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): An arbitrary name of the LACP peer determined by the ATE
// configuration.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "*/name"
//	Path from root:       "/lacp/lag-members/lag-member/*/name"
func (n *Lacp_LagMemberPath) Name() *Lacp_LagMember_NamePath {
	ps := &Lacp_LagMember_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): An arbitrary name of the LACP peer determined by the ATE
// configuration.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "*/name"
//	Path from root:       "/lacp/lag-members/lag-member/*/name"
func (n *Lacp_LagMemberPathAny) Name() *Lacp_LagMember_NamePathAny {
	ps := &Lacp_LagMember_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OperKey (leaf): Current operational value of the key for the aggregate
// interface
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/oper-key"
//	Path from root:       "/lacp/lag-members/lag-member/state/oper-key"
func (n *Lacp_LagMemberPath) OperKey() *Lacp_LagMember_OperKeyPath {
	ps := &Lacp_LagMember_OperKeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oper-key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OperKey (leaf): Current operational value of the key for the aggregate
// interface
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/oper-key"
//	Path from root:       "/lacp/lag-members/lag-member/state/oper-key"
func (n *Lacp_LagMemberPathAny) OperKey() *Lacp_LagMember_OperKeyPathAny {
	ps := &Lacp_LagMember_OperKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oper-key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PartnerId (leaf): MAC address representing the protocol partner's interface
// system ID
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/partner-id"
//	Path from root:       "/lacp/lag-members/lag-member/state/partner-id"
func (n *Lacp_LagMemberPath) PartnerId() *Lacp_LagMember_PartnerIdPath {
	ps := &Lacp_LagMember_PartnerIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "partner-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PartnerId (leaf): MAC address representing the protocol partner's interface
// system ID
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/partner-id"
//	Path from root:       "/lacp/lag-members/lag-member/state/partner-id"
func (n *Lacp_LagMemberPathAny) PartnerId() *Lacp_LagMember_PartnerIdPathAny {
	ps := &Lacp_LagMember_PartnerIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "partner-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PartnerKey (leaf): Operational value of the protocol partner's key
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/partner-key"
//	Path from root:       "/lacp/lag-members/lag-member/state/partner-key"
func (n *Lacp_LagMemberPath) PartnerKey() *Lacp_LagMember_PartnerKeyPath {
	ps := &Lacp_LagMember_PartnerKeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "partner-key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PartnerKey (leaf): Operational value of the protocol partner's key
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/partner-key"
//	Path from root:       "/lacp/lag-members/lag-member/state/partner-key"
func (n *Lacp_LagMemberPathAny) PartnerKey() *Lacp_LagMember_PartnerKeyPathAny {
	ps := &Lacp_LagMember_PartnerKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "partner-key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PartnerPortNum (leaf): Port number of the partner (remote) port for this member
// port
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/partner-port-num"
//	Path from root:       "/lacp/lag-members/lag-member/state/partner-port-num"
func (n *Lacp_LagMemberPath) PartnerPortNum() *Lacp_LagMember_PartnerPortNumPath {
	ps := &Lacp_LagMember_PartnerPortNumPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "partner-port-num"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PartnerPortNum (leaf): Port number of the partner (remote) port for this member
// port
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/partner-port-num"
//	Path from root:       "/lacp/lag-members/lag-member/state/partner-port-num"
func (n *Lacp_LagMemberPathAny) PartnerPortNum() *Lacp_LagMember_PartnerPortNumPathAny {
	ps := &Lacp_LagMember_PartnerPortNumPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "partner-port-num"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PortNum (leaf): Port number of the local (actor) aggregation member
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/port-num"
//	Path from root:       "/lacp/lag-members/lag-member/state/port-num"
func (n *Lacp_LagMemberPath) PortNum() *Lacp_LagMember_PortNumPath {
	ps := &Lacp_LagMember_PortNumPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "port-num"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PortNum (leaf): Port number of the local (actor) aggregation member
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/port-num"
//	Path from root:       "/lacp/lag-members/lag-member/state/port-num"
func (n *Lacp_LagMemberPathAny) PortNum() *Lacp_LagMember_PortNumPathAny {
	ps := &Lacp_LagMember_PortNumPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "port-num"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Synchronization (leaf): Indicates whether the participant is in-sync or
// out-of-sync
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/synchronization"
//	Path from root:       "/lacp/lag-members/lag-member/state/synchronization"
func (n *Lacp_LagMemberPath) Synchronization() *Lacp_LagMember_SynchronizationPath {
	ps := &Lacp_LagMember_SynchronizationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "synchronization"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Synchronization (leaf): Indicates whether the participant is in-sync or
// out-of-sync
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/synchronization"
//	Path from root:       "/lacp/lag-members/lag-member/state/synchronization"
func (n *Lacp_LagMemberPathAny) Synchronization() *Lacp_LagMember_SynchronizationPathAny {
	ps := &Lacp_LagMember_SynchronizationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "synchronization"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SystemId (leaf): MAC address that defines the local system ID for the
// aggregate interface
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/system-id"
//	Path from root:       "/lacp/lag-members/lag-member/state/system-id"
func (n *Lacp_LagMemberPath) SystemId() *Lacp_LagMember_SystemIdPath {
	ps := &Lacp_LagMember_SystemIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "system-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SystemId (leaf): MAC address that defines the local system ID for the
// aggregate interface
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/system-id"
//	Path from root:       "/lacp/lag-members/lag-member/state/system-id"
func (n *Lacp_LagMemberPathAny) SystemId() *Lacp_LagMember_SystemIdPathAny {
	ps := &Lacp_LagMember_SystemIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "system-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Timeout (leaf): The timeout type (short or long) used by the
// participant
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/timeout"
//	Path from root:       "/lacp/lag-members/lag-member/state/timeout"
func (n *Lacp_LagMemberPath) Timeout() *Lacp_LagMember_TimeoutPath {
	ps := &Lacp_LagMember_TimeoutPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "timeout"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Timeout (leaf): The timeout type (short or long) used by the
// participant
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "state/timeout"
//	Path from root:       "/lacp/lag-members/lag-member/state/timeout"
func (n *Lacp_LagMemberPathAny) Timeout() *Lacp_LagMember_TimeoutPathAny {
	ps := &Lacp_LagMember_TimeoutPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "timeout"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Lacp_LagMemberPath) State() ygnmi.SingletonQuery[*oc.Lacp_LagMember] {
	return ygnmi.NewSingletonQuery[*oc.Lacp_LagMember](
		"Lacp_LagMember",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Lacp_LagMemberPathAny) State() ygnmi.WildcardQuery[*oc.Lacp_LagMember] {
	return ygnmi.NewWildcardQuery[*oc.Lacp_LagMember](
		"Lacp_LagMember",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_LagMember_Counters_LacpInPktsPath represents the /open-traffic-generator-lacp/lacp/lag-members/lag-member/state/counters/lacp-in-pkts YANG schema element.
type Lacp_LagMember_Counters_LacpInPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_LagMember_Counters_LacpInPktsPathAny represents the wildcard version of the /open-traffic-generator-lacp/lacp/lag-members/lag-member/state/counters/lacp-in-pkts YANG schema element.
type Lacp_LagMember_Counters_LacpInPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "lacp-in-pkts"
//	Path from root:       "/lacp/lag-members/lag-member/state/counters/lacp-in-pkts"
func (n *Lacp_LagMember_Counters_LacpInPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Lacp_LagMember_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"lacp-in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lacp_LagMember_Counters).LacpInPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_LagMember_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "lacp-in-pkts"
//	Path from root:       "/lacp/lag-members/lag-member/state/counters/lacp-in-pkts"
func (n *Lacp_LagMember_Counters_LacpInPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Lacp_LagMember_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"lacp-in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lacp_LagMember_Counters).LacpInPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_LagMember_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_LagMember_Counters_LacpOutPktsPath represents the /open-traffic-generator-lacp/lacp/lag-members/lag-member/state/counters/lacp-out-pkts YANG schema element.
type Lacp_LagMember_Counters_LacpOutPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_LagMember_Counters_LacpOutPktsPathAny represents the wildcard version of the /open-traffic-generator-lacp/lacp/lag-members/lag-member/state/counters/lacp-out-pkts YANG schema element.
type Lacp_LagMember_Counters_LacpOutPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "lacp-out-pkts"
//	Path from root:       "/lacp/lag-members/lag-member/state/counters/lacp-out-pkts"
func (n *Lacp_LagMember_Counters_LacpOutPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Lacp_LagMember_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"lacp-out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lacp_LagMember_Counters).LacpOutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_LagMember_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "lacp-out-pkts"
//	Path from root:       "/lacp/lag-members/lag-member/state/counters/lacp-out-pkts"
func (n *Lacp_LagMember_Counters_LacpOutPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Lacp_LagMember_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"lacp-out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lacp_LagMember_Counters).LacpOutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_LagMember_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_LagMember_Counters_LacpRxErrorsPath represents the /open-traffic-generator-lacp/lacp/lag-members/lag-member/state/counters/lacp-rx-errors YANG schema element.
type Lacp_LagMember_Counters_LacpRxErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_LagMember_Counters_LacpRxErrorsPathAny represents the wildcard version of the /open-traffic-generator-lacp/lacp/lag-members/lag-member/state/counters/lacp-rx-errors YANG schema element.
type Lacp_LagMember_Counters_LacpRxErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "lacp-rx-errors"
//	Path from root:       "/lacp/lag-members/lag-member/state/counters/lacp-rx-errors"
func (n *Lacp_LagMember_Counters_LacpRxErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Lacp_LagMember_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"lacp-rx-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lacp_LagMember_Counters).LacpRxErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_LagMember_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "lacp-rx-errors"
//	Path from root:       "/lacp/lag-members/lag-member/state/counters/lacp-rx-errors"
func (n *Lacp_LagMember_Counters_LacpRxErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Lacp_LagMember_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"lacp-rx-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lacp_LagMember_Counters).LacpRxErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_LagMember_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_LagMember_CountersPath represents the /open-traffic-generator-lacp/lacp/lag-members/lag-member/state/counters YANG schema element.
type Lacp_LagMember_CountersPath struct {
	*ygnmi.NodePath
}

// Lacp_LagMember_CountersPathAny represents the wildcard version of the /open-traffic-generator-lacp/lacp/lag-members/lag-member/state/counters YANG schema element.
type Lacp_LagMember_CountersPathAny struct {
	*ygnmi.NodePath
}

// LacpInPkts (leaf): The total number of LACPDUs received.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "lacp-in-pkts"
//	Path from root:       "/lacp/lag-members/lag-member/state/counters/lacp-in-pkts"
func (n *Lacp_LagMember_CountersPath) LacpInPkts() *Lacp_LagMember_Counters_LacpInPktsPath {
	ps := &Lacp_LagMember_Counters_LacpInPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"lacp-in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LacpInPkts (leaf): The total number of LACPDUs received.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "lacp-in-pkts"
//	Path from root:       "/lacp/lag-members/lag-member/state/counters/lacp-in-pkts"
func (n *Lacp_LagMember_CountersPathAny) LacpInPkts() *Lacp_LagMember_Counters_LacpInPktsPathAny {
	ps := &Lacp_LagMember_Counters_LacpInPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lacp-in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LacpOutPkts (leaf): The total number of LACPDUs transmitted.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "lacp-out-pkts"
//	Path from root:       "/lacp/lag-members/lag-member/state/counters/lacp-out-pkts"
func (n *Lacp_LagMember_CountersPath) LacpOutPkts() *Lacp_LagMember_Counters_LacpOutPktsPath {
	ps := &Lacp_LagMember_Counters_LacpOutPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"lacp-out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LacpOutPkts (leaf): The total number of LACPDUs transmitted.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "lacp-out-pkts"
//	Path from root:       "/lacp/lag-members/lag-member/state/counters/lacp-out-pkts"
func (n *Lacp_LagMember_CountersPathAny) LacpOutPkts() *Lacp_LagMember_Counters_LacpOutPktsPathAny {
	ps := &Lacp_LagMember_Counters_LacpOutPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lacp-out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LacpRxErrors (leaf): The total number of LACPDUs receive packet errors.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "lacp-rx-errors"
//	Path from root:       "/lacp/lag-members/lag-member/state/counters/lacp-rx-errors"
func (n *Lacp_LagMember_CountersPath) LacpRxErrors() *Lacp_LagMember_Counters_LacpRxErrorsPath {
	ps := &Lacp_LagMember_Counters_LacpRxErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"lacp-rx-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LacpRxErrors (leaf): The total number of LACPDUs receive packet errors.
//
//	Defining module:      "open-traffic-generator-lacp"
//	Instantiating module: "open-traffic-generator-lacp"
//	Path from parent:     "lacp-rx-errors"
//	Path from root:       "/lacp/lag-members/lag-member/state/counters/lacp-rx-errors"
func (n *Lacp_LagMember_CountersPathAny) LacpRxErrors() *Lacp_LagMember_Counters_LacpRxErrorsPathAny {
	ps := &Lacp_LagMember_Counters_LacpRxErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lacp-rx-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Lacp_LagMember_CountersPath) State() ygnmi.SingletonQuery[*oc.Lacp_LagMember_Counters] {
	return ygnmi.NewSingletonQuery[*oc.Lacp_LagMember_Counters](
		"Lacp_LagMember_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Lacp_LagMember_CountersPathAny) State() ygnmi.WildcardQuery[*oc.Lacp_LagMember_Counters] {
	return ygnmi.NewWildcardQuery[*oc.Lacp_LagMember_Counters](
		"Lacp_LagMember_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

/*
Package dhcpv4client is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.20)
using the following YANG input files:
  - models-yang/models/bgp/open-traffic-generator-bgp.yang
  - models-yang/models/dhcp/v4client/open-traffic-generator-dhcpv4client.yang
  - models-yang/models/dhcp/v4server/open-traffic-generator-dhcpv4server.yang
  - models-yang/models/dhcp/v6client/open-traffic-generator-dhcpv6client.yang
  - models-yang/models/dhcp/v6server/open-traffic-generator-dhcpv6server.yang
  - models-yang/models/discovery/open-traffic-generator-discovery.yang
  - models-yang/models/discovery/open-traffic-generator-discovery-interfaces.yang
  - models-yang/models/flow/open-traffic-generator-flow.yang
  - models-yang/models/interface/open-traffic-generator-port.yang
  - models-yang/models/isis/open-traffic-generator-isis.yang
  - models-yang/models/lacp/open-traffic-generator-lacp.yang
  - models-yang/models/lag/open-traffic-generator-lag.yang
  - models-yang/models/lldp/open-traffic-generator-lldp.yang
  - models-yang/models/ospfv2/open-traffic-generator-ospfv2.yang
  - models-yang/models/ospfv3/open-traffic-generator-ospfv3.yang
  - models-yang/models/platform/open-traffic-generator-platform.yang
  - models-yang/models/rsvp/open-traffic-generator-rsvp.yang
  - models-yang/models/types/open-traffic-generator-types.yang

Imported modules were sourced from:
  - models-yang/models/...
*/
package dhcpv4client

import (
	oc "github.com/openconfig/ondatra/gnmi/otg"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Dhcpv4Client_NamePath represents the /open-traffic-generator-dhcpv4client/dhcpv4-clients/dhcpv4-client/state/name YANG schema element.
type Dhcpv4Client_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv4Client_NamePathAny represents the wildcard version of the /open-traffic-generator-dhcpv4client/dhcpv4-clients/dhcpv4-client/state/name YANG schema element.
type Dhcpv4Client_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "state/name"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/name"
func (n *Dhcpv4Client_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Dhcpv4Client",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Dhcpv4Client).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Client) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "state/name"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/name"
func (n *Dhcpv4Client_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Dhcpv4Client",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Dhcpv4Client).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Client) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *Dhcpv4Client_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Dhcpv4Client",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Dhcpv4Client).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Client) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *Dhcpv4Client_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Dhcpv4Client",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Dhcpv4Client).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Client) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv4ClientPath represents the /open-traffic-generator-dhcpv4client/dhcpv4-clients/dhcpv4-client YANG schema element.
type Dhcpv4ClientPath struct {
	*ygnmi.NodePath
}

// Dhcpv4ClientPathAny represents the wildcard version of the /open-traffic-generator-dhcpv4client/dhcpv4-clients/dhcpv4-client YANG schema element.
type Dhcpv4ClientPathAny struct {
	*ygnmi.NodePath
}

// Dhcpv4ClientPathMap represents the /open-traffic-generator-dhcpv4client/dhcpv4-clients/dhcpv4-client YANG schema element.
type Dhcpv4ClientPathMap struct {
	*ygnmi.NodePath
}

// Dhcpv4ClientPathMapAny represents the wildcard version of the /open-traffic-generator-dhcpv4client/dhcpv4-clients/dhcpv4-client YANG schema element.
type Dhcpv4ClientPathMapAny struct {
	*ygnmi.NodePath
}

// Counters (container): Counters of an indivdual DHCPv4 session.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "state/counters"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/counters"
func (n *Dhcpv4ClientPath) Counters() *Dhcpv4Client_CountersPath {
	ps := &Dhcpv4Client_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Counters of an indivdual DHCPv4 session.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "state/counters"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/counters"
func (n *Dhcpv4ClientPathAny) Counters() *Dhcpv4Client_CountersPathAny {
	ps := &Dhcpv4Client_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Interface (container): Information about address learned by an indivdual DHCPv4 session.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "state/interface"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/interface"
func (n *Dhcpv4ClientPath) Interface() *Dhcpv4Client_InterfacePath {
	ps := &Dhcpv4Client_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Interface (container): Information about address learned by an indivdual DHCPv4 session.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "state/interface"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/interface"
func (n *Dhcpv4ClientPathAny) Interface() *Dhcpv4Client_InterfacePathAny {
	ps := &Dhcpv4Client_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Name (leaf): An arbitrary name of the DHCPv4 Client determined by the OTG
// configuration.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "*/name"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/*/name"
func (n *Dhcpv4ClientPath) Name() *Dhcpv4Client_NamePath {
	ps := &Dhcpv4Client_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): An arbitrary name of the DHCPv4 Client determined by the OTG
// configuration.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "*/name"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/*/name"
func (n *Dhcpv4ClientPathAny) Name() *Dhcpv4Client_NamePathAny {
	ps := &Dhcpv4Client_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *Dhcpv4ClientPath) State() ygnmi.SingletonQuery[*oc.Dhcpv4Client] {
	return ygnmi.NewSingletonQuery[*oc.Dhcpv4Client](
		"Dhcpv4Client",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Dhcpv4ClientPathAny) State() ygnmi.WildcardQuery[*oc.Dhcpv4Client] {
	return ygnmi.NewWildcardQuery[*oc.Dhcpv4Client](
		"Dhcpv4Client",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv4Client_Counters_AcksReceivedPath represents the /open-traffic-generator-dhcpv4client/dhcpv4-clients/dhcpv4-client/state/counters/acks-received YANG schema element.
type Dhcpv4Client_Counters_AcksReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv4Client_Counters_AcksReceivedPathAny represents the wildcard version of the /open-traffic-generator-dhcpv4client/dhcpv4-clients/dhcpv4-client/state/counters/acks-received YANG schema element.
type Dhcpv4Client_Counters_AcksReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "acks-received"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/counters/acks-received"
func (n *Dhcpv4Client_Counters_AcksReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Dhcpv4Client_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"acks-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv4Client_Counters).AcksReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Client_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "acks-received"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/counters/acks-received"
func (n *Dhcpv4Client_Counters_AcksReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Dhcpv4Client_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"acks-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv4Client_Counters).AcksReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Client_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv4Client_Counters_DeclinesSentPath represents the /open-traffic-generator-dhcpv4client/dhcpv4-clients/dhcpv4-client/state/counters/declines-sent YANG schema element.
type Dhcpv4Client_Counters_DeclinesSentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv4Client_Counters_DeclinesSentPathAny represents the wildcard version of the /open-traffic-generator-dhcpv4client/dhcpv4-clients/dhcpv4-client/state/counters/declines-sent YANG schema element.
type Dhcpv4Client_Counters_DeclinesSentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "declines-sent"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/counters/declines-sent"
func (n *Dhcpv4Client_Counters_DeclinesSentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Dhcpv4Client_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"declines-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv4Client_Counters).DeclinesSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Client_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "declines-sent"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/counters/declines-sent"
func (n *Dhcpv4Client_Counters_DeclinesSentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Dhcpv4Client_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"declines-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv4Client_Counters).DeclinesSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Client_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv4Client_Counters_DiscoversSentPath represents the /open-traffic-generator-dhcpv4client/dhcpv4-clients/dhcpv4-client/state/counters/discovers-sent YANG schema element.
type Dhcpv4Client_Counters_DiscoversSentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv4Client_Counters_DiscoversSentPathAny represents the wildcard version of the /open-traffic-generator-dhcpv4client/dhcpv4-clients/dhcpv4-client/state/counters/discovers-sent YANG schema element.
type Dhcpv4Client_Counters_DiscoversSentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "discovers-sent"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/counters/discovers-sent"
func (n *Dhcpv4Client_Counters_DiscoversSentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Dhcpv4Client_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"discovers-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv4Client_Counters).DiscoversSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Client_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "discovers-sent"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/counters/discovers-sent"
func (n *Dhcpv4Client_Counters_DiscoversSentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Dhcpv4Client_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"discovers-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv4Client_Counters).DiscoversSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Client_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv4Client_Counters_NacksReceivedPath represents the /open-traffic-generator-dhcpv4client/dhcpv4-clients/dhcpv4-client/state/counters/nacks-received YANG schema element.
type Dhcpv4Client_Counters_NacksReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv4Client_Counters_NacksReceivedPathAny represents the wildcard version of the /open-traffic-generator-dhcpv4client/dhcpv4-clients/dhcpv4-client/state/counters/nacks-received YANG schema element.
type Dhcpv4Client_Counters_NacksReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "nacks-received"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/counters/nacks-received"
func (n *Dhcpv4Client_Counters_NacksReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Dhcpv4Client_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"nacks-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv4Client_Counters).NacksReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Client_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "nacks-received"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/counters/nacks-received"
func (n *Dhcpv4Client_Counters_NacksReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Dhcpv4Client_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"nacks-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv4Client_Counters).NacksReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Client_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv4Client_Counters_OffersReceivedPath represents the /open-traffic-generator-dhcpv4client/dhcpv4-clients/dhcpv4-client/state/counters/offers-received YANG schema element.
type Dhcpv4Client_Counters_OffersReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv4Client_Counters_OffersReceivedPathAny represents the wildcard version of the /open-traffic-generator-dhcpv4client/dhcpv4-clients/dhcpv4-client/state/counters/offers-received YANG schema element.
type Dhcpv4Client_Counters_OffersReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "offers-received"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/counters/offers-received"
func (n *Dhcpv4Client_Counters_OffersReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Dhcpv4Client_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"offers-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv4Client_Counters).OffersReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Client_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "offers-received"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/counters/offers-received"
func (n *Dhcpv4Client_Counters_OffersReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Dhcpv4Client_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"offers-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv4Client_Counters).OffersReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Client_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv4Client_Counters_ReleasesSentPath represents the /open-traffic-generator-dhcpv4client/dhcpv4-clients/dhcpv4-client/state/counters/releases-sent YANG schema element.
type Dhcpv4Client_Counters_ReleasesSentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv4Client_Counters_ReleasesSentPathAny represents the wildcard version of the /open-traffic-generator-dhcpv4client/dhcpv4-clients/dhcpv4-client/state/counters/releases-sent YANG schema element.
type Dhcpv4Client_Counters_ReleasesSentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "releases-sent"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/counters/releases-sent"
func (n *Dhcpv4Client_Counters_ReleasesSentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Dhcpv4Client_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"releases-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv4Client_Counters).ReleasesSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Client_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "releases-sent"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/counters/releases-sent"
func (n *Dhcpv4Client_Counters_ReleasesSentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Dhcpv4Client_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"releases-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv4Client_Counters).ReleasesSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Client_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv4Client_Counters_RequestsSentPath represents the /open-traffic-generator-dhcpv4client/dhcpv4-clients/dhcpv4-client/state/counters/requests-sent YANG schema element.
type Dhcpv4Client_Counters_RequestsSentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv4Client_Counters_RequestsSentPathAny represents the wildcard version of the /open-traffic-generator-dhcpv4client/dhcpv4-clients/dhcpv4-client/state/counters/requests-sent YANG schema element.
type Dhcpv4Client_Counters_RequestsSentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "requests-sent"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/counters/requests-sent"
func (n *Dhcpv4Client_Counters_RequestsSentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Dhcpv4Client_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"requests-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv4Client_Counters).RequestsSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Client_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "requests-sent"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/counters/requests-sent"
func (n *Dhcpv4Client_Counters_RequestsSentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Dhcpv4Client_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"requests-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv4Client_Counters).RequestsSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Client_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv4Client_CountersPath represents the /open-traffic-generator-dhcpv4client/dhcpv4-clients/dhcpv4-client/state/counters YANG schema element.
type Dhcpv4Client_CountersPath struct {
	*ygnmi.NodePath
}

// Dhcpv4Client_CountersPathAny represents the wildcard version of the /open-traffic-generator-dhcpv4client/dhcpv4-clients/dhcpv4-client/state/counters YANG schema element.
type Dhcpv4Client_CountersPathAny struct {
	*ygnmi.NodePath
}

// AcksReceived (leaf): Number of DHCPACKS messages received.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "acks-received"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/counters/acks-received"
func (n *Dhcpv4Client_CountersPath) AcksReceived() *Dhcpv4Client_Counters_AcksReceivedPath {
	ps := &Dhcpv4Client_Counters_AcksReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"acks-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AcksReceived (leaf): Number of DHCPACKS messages received.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "acks-received"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/counters/acks-received"
func (n *Dhcpv4Client_CountersPathAny) AcksReceived() *Dhcpv4Client_Counters_AcksReceivedPathAny {
	ps := &Dhcpv4Client_Counters_AcksReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"acks-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DeclinesSent (leaf): Number of DHCPDECLINE messages sent.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "declines-sent"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/counters/declines-sent"
func (n *Dhcpv4Client_CountersPath) DeclinesSent() *Dhcpv4Client_Counters_DeclinesSentPath {
	ps := &Dhcpv4Client_Counters_DeclinesSentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"declines-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DeclinesSent (leaf): Number of DHCPDECLINE messages sent.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "declines-sent"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/counters/declines-sent"
func (n *Dhcpv4Client_CountersPathAny) DeclinesSent() *Dhcpv4Client_Counters_DeclinesSentPathAny {
	ps := &Dhcpv4Client_Counters_DeclinesSentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"declines-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DiscoversSent (leaf): Number of DHCPDISCOVER messages sent.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "discovers-sent"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/counters/discovers-sent"
func (n *Dhcpv4Client_CountersPath) DiscoversSent() *Dhcpv4Client_Counters_DiscoversSentPath {
	ps := &Dhcpv4Client_Counters_DiscoversSentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"discovers-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DiscoversSent (leaf): Number of DHCPDISCOVER messages sent.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "discovers-sent"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/counters/discovers-sent"
func (n *Dhcpv4Client_CountersPathAny) DiscoversSent() *Dhcpv4Client_Counters_DiscoversSentPathAny {
	ps := &Dhcpv4Client_Counters_DiscoversSentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"discovers-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NacksReceived (leaf): Number of DHCPNACKS messages received.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "nacks-received"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/counters/nacks-received"
func (n *Dhcpv4Client_CountersPath) NacksReceived() *Dhcpv4Client_Counters_NacksReceivedPath {
	ps := &Dhcpv4Client_Counters_NacksReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"nacks-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NacksReceived (leaf): Number of DHCPNACKS messages received.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "nacks-received"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/counters/nacks-received"
func (n *Dhcpv4Client_CountersPathAny) NacksReceived() *Dhcpv4Client_Counters_NacksReceivedPathAny {
	ps := &Dhcpv4Client_Counters_NacksReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"nacks-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OffersReceived (leaf): Number of DHCPOFFER messages received.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "offers-received"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/counters/offers-received"
func (n *Dhcpv4Client_CountersPath) OffersReceived() *Dhcpv4Client_Counters_OffersReceivedPath {
	ps := &Dhcpv4Client_Counters_OffersReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"offers-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OffersReceived (leaf): Number of DHCPOFFER messages received.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "offers-received"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/counters/offers-received"
func (n *Dhcpv4Client_CountersPathAny) OffersReceived() *Dhcpv4Client_Counters_OffersReceivedPathAny {
	ps := &Dhcpv4Client_Counters_OffersReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"offers-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReleasesSent (leaf): Number of DHCPRELEASE messages sent.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "releases-sent"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/counters/releases-sent"
func (n *Dhcpv4Client_CountersPath) ReleasesSent() *Dhcpv4Client_Counters_ReleasesSentPath {
	ps := &Dhcpv4Client_Counters_ReleasesSentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"releases-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReleasesSent (leaf): Number of DHCPRELEASE messages sent.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "releases-sent"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/counters/releases-sent"
func (n *Dhcpv4Client_CountersPathAny) ReleasesSent() *Dhcpv4Client_Counters_ReleasesSentPathAny {
	ps := &Dhcpv4Client_Counters_ReleasesSentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"releases-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RequestsSent (leaf): Number of DHCPREQUEST messages sent.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "requests-sent"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/counters/requests-sent"
func (n *Dhcpv4Client_CountersPath) RequestsSent() *Dhcpv4Client_Counters_RequestsSentPath {
	ps := &Dhcpv4Client_Counters_RequestsSentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"requests-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RequestsSent (leaf): Number of DHCPREQUEST messages sent.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "requests-sent"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/counters/requests-sent"
func (n *Dhcpv4Client_CountersPathAny) RequestsSent() *Dhcpv4Client_Counters_RequestsSentPathAny {
	ps := &Dhcpv4Client_Counters_RequestsSentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"requests-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Dhcpv4Client_CountersPath) State() ygnmi.SingletonQuery[*oc.Dhcpv4Client_Counters] {
	return ygnmi.NewSingletonQuery[*oc.Dhcpv4Client_Counters](
		"Dhcpv4Client_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Dhcpv4Client_CountersPathAny) State() ygnmi.WildcardQuery[*oc.Dhcpv4Client_Counters] {
	return ygnmi.NewWildcardQuery[*oc.Dhcpv4Client_Counters](
		"Dhcpv4Client_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv4Client_Interface_AddressPath represents the /open-traffic-generator-dhcpv4client/dhcpv4-clients/dhcpv4-client/state/interface/address YANG schema element.
type Dhcpv4Client_Interface_AddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv4Client_Interface_AddressPathAny represents the wildcard version of the /open-traffic-generator-dhcpv4client/dhcpv4-clients/dhcpv4-client/state/interface/address YANG schema element.
type Dhcpv4Client_Interface_AddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "address"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/interface/address"
func (n *Dhcpv4Client_Interface_AddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Dhcpv4Client_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Dhcpv4Client_Interface).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Client_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "address"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/interface/address"
func (n *Dhcpv4Client_Interface_AddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Dhcpv4Client_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Dhcpv4Client_Interface).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Client_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv4Client_Interface_GatewayAddressPath represents the /open-traffic-generator-dhcpv4client/dhcpv4-clients/dhcpv4-client/state/interface/gateway_address YANG schema element.
type Dhcpv4Client_Interface_GatewayAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv4Client_Interface_GatewayAddressPathAny represents the wildcard version of the /open-traffic-generator-dhcpv4client/dhcpv4-clients/dhcpv4-client/state/interface/gateway_address YANG schema element.
type Dhcpv4Client_Interface_GatewayAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "gateway_address"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/interface/gateway_address"
func (n *Dhcpv4Client_Interface_GatewayAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Dhcpv4Client_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"gateway_address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Dhcpv4Client_Interface).GatewayAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Client_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "gateway_address"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/interface/gateway_address"
func (n *Dhcpv4Client_Interface_GatewayAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Dhcpv4Client_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"gateway_address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Dhcpv4Client_Interface).GatewayAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Client_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv4Client_Interface_LeaseTimePath represents the /open-traffic-generator-dhcpv4client/dhcpv4-clients/dhcpv4-client/state/interface/lease_time YANG schema element.
type Dhcpv4Client_Interface_LeaseTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv4Client_Interface_LeaseTimePathAny represents the wildcard version of the /open-traffic-generator-dhcpv4client/dhcpv4-clients/dhcpv4-client/state/interface/lease_time YANG schema element.
type Dhcpv4Client_Interface_LeaseTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "lease_time"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/interface/lease_time"
func (n *Dhcpv4Client_Interface_LeaseTimePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Dhcpv4Client_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"lease_time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Dhcpv4Client_Interface).LeaseTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Client_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "lease_time"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/interface/lease_time"
func (n *Dhcpv4Client_Interface_LeaseTimePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Dhcpv4Client_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"lease_time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Dhcpv4Client_Interface).LeaseTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Client_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv4Client_Interface_PrefixLengthPath represents the /open-traffic-generator-dhcpv4client/dhcpv4-clients/dhcpv4-client/state/interface/prefix-length YANG schema element.
type Dhcpv4Client_Interface_PrefixLengthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv4Client_Interface_PrefixLengthPathAny represents the wildcard version of the /open-traffic-generator-dhcpv4client/dhcpv4-clients/dhcpv4-client/state/interface/prefix-length YANG schema element.
type Dhcpv4Client_Interface_PrefixLengthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "prefix-length"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/interface/prefix-length"
func (n *Dhcpv4Client_Interface_PrefixLengthPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Dhcpv4Client_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Dhcpv4Client_Interface).PrefixLength
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Client_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "prefix-length"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/interface/prefix-length"
func (n *Dhcpv4Client_Interface_PrefixLengthPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Dhcpv4Client_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Dhcpv4Client_Interface).PrefixLength
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Client_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv4Client_Interface_RebindTimePath represents the /open-traffic-generator-dhcpv4client/dhcpv4-clients/dhcpv4-client/state/interface/rebind_time YANG schema element.
type Dhcpv4Client_Interface_RebindTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv4Client_Interface_RebindTimePathAny represents the wildcard version of the /open-traffic-generator-dhcpv4client/dhcpv4-clients/dhcpv4-client/state/interface/rebind_time YANG schema element.
type Dhcpv4Client_Interface_RebindTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "rebind_time"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/interface/rebind_time"
func (n *Dhcpv4Client_Interface_RebindTimePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Dhcpv4Client_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"rebind_time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Dhcpv4Client_Interface).RebindTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Client_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "rebind_time"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/interface/rebind_time"
func (n *Dhcpv4Client_Interface_RebindTimePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Dhcpv4Client_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"rebind_time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Dhcpv4Client_Interface).RebindTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Client_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv4Client_Interface_RenewTimePath represents the /open-traffic-generator-dhcpv4client/dhcpv4-clients/dhcpv4-client/state/interface/renew_time YANG schema element.
type Dhcpv4Client_Interface_RenewTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv4Client_Interface_RenewTimePathAny represents the wildcard version of the /open-traffic-generator-dhcpv4client/dhcpv4-clients/dhcpv4-client/state/interface/renew_time YANG schema element.
type Dhcpv4Client_Interface_RenewTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "renew_time"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/interface/renew_time"
func (n *Dhcpv4Client_Interface_RenewTimePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Dhcpv4Client_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"renew_time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Dhcpv4Client_Interface).RenewTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Client_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "renew_time"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/interface/renew_time"
func (n *Dhcpv4Client_Interface_RenewTimePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Dhcpv4Client_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"renew_time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Dhcpv4Client_Interface).RenewTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Client_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv4Client_InterfacePath represents the /open-traffic-generator-dhcpv4client/dhcpv4-clients/dhcpv4-client/state/interface YANG schema element.
type Dhcpv4Client_InterfacePath struct {
	*ygnmi.NodePath
}

// Dhcpv4Client_InterfacePathAny represents the wildcard version of the /open-traffic-generator-dhcpv4client/dhcpv4-clients/dhcpv4-client/state/interface YANG schema element.
type Dhcpv4Client_InterfacePathAny struct {
	*ygnmi.NodePath
}

// Address (leaf): The IPv4 address associated with this DHCP Client session.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "address"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/interface/address"
func (n *Dhcpv4Client_InterfacePath) Address() *Dhcpv4Client_Interface_AddressPath {
	ps := &Dhcpv4Client_Interface_AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Address (leaf): The IPv4 address associated with this DHCP Client session.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "address"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/interface/address"
func (n *Dhcpv4Client_InterfacePathAny) Address() *Dhcpv4Client_Interface_AddressPathAny {
	ps := &Dhcpv4Client_Interface_AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// GatewayAddress (leaf): The Gateway address associated with the DHCP Client session.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "gateway_address"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/interface/gateway_address"
func (n *Dhcpv4Client_InterfacePath) GatewayAddress() *Dhcpv4Client_Interface_GatewayAddressPath {
	ps := &Dhcpv4Client_Interface_GatewayAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"gateway_address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// GatewayAddress (leaf): The Gateway address associated with the DHCP Client session.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "gateway_address"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/interface/gateway_address"
func (n *Dhcpv4Client_InterfacePathAny) GatewayAddress() *Dhcpv4Client_Interface_GatewayAddressPathAny {
	ps := &Dhcpv4Client_Interface_GatewayAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"gateway_address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LeaseTime (leaf): The duration of the IP address lease, in seconds.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "lease_time"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/interface/lease_time"
func (n *Dhcpv4Client_InterfacePath) LeaseTime() *Dhcpv4Client_Interface_LeaseTimePath {
	ps := &Dhcpv4Client_Interface_LeaseTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"lease_time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LeaseTime (leaf): The duration of the IP address lease, in seconds.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "lease_time"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/interface/lease_time"
func (n *Dhcpv4Client_InterfacePathAny) LeaseTime() *Dhcpv4Client_Interface_LeaseTimePathAny {
	ps := &Dhcpv4Client_Interface_LeaseTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lease_time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLength (leaf): The length of the prefix
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "prefix-length"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/interface/prefix-length"
func (n *Dhcpv4Client_InterfacePath) PrefixLength() *Dhcpv4Client_Interface_PrefixLengthPath {
	ps := &Dhcpv4Client_Interface_PrefixLengthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLength (leaf): The length of the prefix
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "prefix-length"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/interface/prefix-length"
func (n *Dhcpv4Client_InterfacePathAny) PrefixLength() *Dhcpv4Client_Interface_PrefixLengthPathAny {
	ps := &Dhcpv4Client_Interface_PrefixLengthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RebindTime (leaf): Time in seconds until the DHCPv4 client starts rebinding.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "rebind_time"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/interface/rebind_time"
func (n *Dhcpv4Client_InterfacePath) RebindTime() *Dhcpv4Client_Interface_RebindTimePath {
	ps := &Dhcpv4Client_Interface_RebindTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"rebind_time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RebindTime (leaf): Time in seconds until the DHCPv4 client starts rebinding.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "rebind_time"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/interface/rebind_time"
func (n *Dhcpv4Client_InterfacePathAny) RebindTime() *Dhcpv4Client_Interface_RebindTimePathAny {
	ps := &Dhcpv4Client_Interface_RebindTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"rebind_time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RenewTime (leaf): Time in seconds until the DHCPv4 client starts renewing the lease.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "renew_time"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/interface/renew_time"
func (n *Dhcpv4Client_InterfacePath) RenewTime() *Dhcpv4Client_Interface_RenewTimePath {
	ps := &Dhcpv4Client_Interface_RenewTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"renew_time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RenewTime (leaf): Time in seconds until the DHCPv4 client starts renewing the lease.
//
//	Defining module:      "open-traffic-generator-dhcpv4client"
//	Instantiating module: "open-traffic-generator-dhcpv4client"
//	Path from parent:     "renew_time"
//	Path from root:       "/dhcpv4-clients/dhcpv4-client/state/interface/renew_time"
func (n *Dhcpv4Client_InterfacePathAny) RenewTime() *Dhcpv4Client_Interface_RenewTimePathAny {
	ps := &Dhcpv4Client_Interface_RenewTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"renew_time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Dhcpv4Client_InterfacePath) State() ygnmi.SingletonQuery[*oc.Dhcpv4Client_Interface] {
	return ygnmi.NewSingletonQuery[*oc.Dhcpv4Client_Interface](
		"Dhcpv4Client_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Dhcpv4Client_InterfacePathAny) State() ygnmi.WildcardQuery[*oc.Dhcpv4Client_Interface] {
	return ygnmi.NewWildcardQuery[*oc.Dhcpv4Client_Interface](
		"Dhcpv4Client_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

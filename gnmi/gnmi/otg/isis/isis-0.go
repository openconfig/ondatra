/*
Package isis is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.20)
using the following YANG input files:
  - models-yang/models/bgp/open-traffic-generator-bgp.yang
  - models-yang/models/discovery/open-traffic-generator-discovery.yang
  - models-yang/models/dhcp/v4client/open-traffic-generator-dhcpv4client.yang
  - models-yang/models/dhcp/v4server/open-traffic-generator-dhcpv4server.yang
  - models-yang/models/dhcp/v6client/open-traffic-generator-dhcpv6client.yang
  - models-yang/models/dhcp/v6server/open-traffic-generator-dhcpv6server.yang
  - models-yang/models/flow/open-traffic-generator-flow.yang
  - models-yang/models/interface/open-traffic-generator-port.yang
  - models-yang/models/isis/open-traffic-generator-isis.yang
  - models-yang/models/lacp/open-traffic-generator-lacp.yang
  - models-yang/models/lag/open-traffic-generator-lag.yang
  - models-yang/models/lldp/open-traffic-generator-lldp.yang
  - models-yang/models/ospfv2/open-traffic-generator-ospfv2.yang
  - models-yang/models/platform/open-traffic-generator-platform.yang
  - models-yang/models/rsvp/open-traffic-generator-rsvp.yang
  - models-yang/models/types/open-traffic-generator-types.yang

Imported modules were sourced from:
  - models-yang/models/...
*/
package isis

import (
	"reflect"

	oc "github.com/openconfig/ondatra/gnmi/otg"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// IsisRouter_NamePath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/name YANG schema element.
type IsisRouter_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_NamePathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/name YANG schema element.
type IsisRouter_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/name"
//	Path from root:       "/isis-routers/isis-router/state/name"
func (n *IsisRouter_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"IsisRouter",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.IsisRouter).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/name"
//	Path from root:       "/isis-routers/isis-router/state/name"
func (n *IsisRouter_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"IsisRouter",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.IsisRouter).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *IsisRouter_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"IsisRouter",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.IsisRouter).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *IsisRouter_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"IsisRouter",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.IsisRouter).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouterPath represents the /open-traffic-generator-isis/isis-routers/isis-router YANG schema element.
type IsisRouterPath struct {
	*ygnmi.NodePath
}

// IsisRouterPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router YANG schema element.
type IsisRouterPathAny struct {
	*ygnmi.NodePath
}

// IsisRouterPathMap represents the /open-traffic-generator-isis/isis-routers/isis-router YANG schema element.
type IsisRouterPathMap struct {
	*ygnmi.NodePath
}

// IsisRouterPathMapAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router YANG schema element.
type IsisRouterPathMapAny struct {
	*ygnmi.NodePath
}

// Counters (container): Level counters of the ISIS router.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/counters"
//	Path from root:       "/isis-routers/isis-router/state/counters"
func (n *IsisRouterPath) Counters() *IsisRouter_CountersPath {
	ps := &IsisRouter_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Level counters of the ISIS router.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/counters"
//	Path from root:       "/isis-routers/isis-router/state/counters"
func (n *IsisRouterPathAny) Counters() *IsisRouter_CountersPathAny {
	ps := &IsisRouter_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LinkStateDatabase (container): This sub-module describes a YANG model for the IS-IS Link State
// Database (LSDB)
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/link-state-database"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database"
func (n *IsisRouterPath) LinkStateDatabase() *IsisRouter_LinkStateDatabasePath {
	ps := &IsisRouter_LinkStateDatabasePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "link-state-database"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LinkStateDatabase (container): This sub-module describes a YANG model for the IS-IS Link State
// Database (LSDB)
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/link-state-database"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database"
func (n *IsisRouterPathAny) LinkStateDatabase() *IsisRouter_LinkStateDatabasePathAny {
	ps := &IsisRouter_LinkStateDatabasePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "link-state-database"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Name (leaf): An arbitrary name of the ISIS router determined by the OTG
// configuration.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "*/name"
//	Path from root:       "/isis-routers/isis-router/*/name"
func (n *IsisRouterPath) Name() *IsisRouter_NamePath {
	ps := &IsisRouter_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): An arbitrary name of the ISIS router determined by the OTG
// configuration.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "*/name"
//	Path from root:       "/isis-routers/isis-router/*/name"
func (n *IsisRouterPathAny) Name() *IsisRouter_NamePathAny {
	ps := &IsisRouter_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouterPath) State() ygnmi.SingletonQuery[*oc.IsisRouter] {
	return ygnmi.NewSingletonQuery[*oc.IsisRouter](
		"IsisRouter",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouterPathAny) State() ygnmi.WildcardQuery[*oc.IsisRouter] {
	return ygnmi.NewWildcardQuery[*oc.IsisRouter](
		"IsisRouter",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_CountersPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters YANG schema element.
type IsisRouter_CountersPath struct {
	*ygnmi.NodePath
}

// IsisRouter_CountersPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters YANG schema element.
type IsisRouter_CountersPathAny struct {
	*ygnmi.NodePath
}

// Level1 (container): Level1 counters of the ISIS router.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "level1"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1"
func (n *IsisRouter_CountersPath) Level1() *IsisRouter_Counters_Level1Path {
	ps := &IsisRouter_Counters_Level1Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"level1"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Level1 (container): Level1 counters of the ISIS router.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "level1"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1"
func (n *IsisRouter_CountersPathAny) Level1() *IsisRouter_Counters_Level1PathAny {
	ps := &IsisRouter_Counters_Level1PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"level1"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Level2 (container): Level2 counters of the ISIS router.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "level2"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2"
func (n *IsisRouter_CountersPath) Level2() *IsisRouter_Counters_Level2Path {
	ps := &IsisRouter_Counters_Level2Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"level2"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Level2 (container): Level2 counters of the ISIS router.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "level2"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2"
func (n *IsisRouter_CountersPathAny) Level2() *IsisRouter_Counters_Level2PathAny {
	ps := &IsisRouter_Counters_Level2PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"level2"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_CountersPath) State() ygnmi.SingletonQuery[*oc.IsisRouter_Counters] {
	return ygnmi.NewSingletonQuery[*oc.IsisRouter_Counters](
		"IsisRouter_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_CountersPathAny) State() ygnmi.WildcardQuery[*oc.IsisRouter_Counters] {
	return ygnmi.NewWildcardQuery[*oc.IsisRouter_Counters](
		"IsisRouter_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_Counters_Level1_DatabaseSizePath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/database-size YANG schema element.
type IsisRouter_Counters_Level1_DatabaseSizePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level1_DatabaseSizePathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/database-size YANG schema element.
type IsisRouter_Counters_Level1_DatabaseSizePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "database-size"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/database-size"
func (n *IsisRouter_Counters_Level1_DatabaseSizePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"database-size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).DatabaseSize
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "database-size"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/database-size"
func (n *IsisRouter_Counters_Level1_DatabaseSizePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"database-size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).DatabaseSize
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_Counters_Level1_InBcastHellosPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/in-bcast-hellos YANG schema element.
type IsisRouter_Counters_Level1_InBcastHellosPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level1_InBcastHellosPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/in-bcast-hellos YANG schema element.
type IsisRouter_Counters_Level1_InBcastHellosPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-bcast-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/in-bcast-hellos"
func (n *IsisRouter_Counters_Level1_InBcastHellosPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-bcast-hellos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).InBcastHellos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-bcast-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/in-bcast-hellos"
func (n *IsisRouter_Counters_Level1_InBcastHellosPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-bcast-hellos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).InBcastHellos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_Counters_Level1_InCsnpPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/in-csnp YANG schema element.
type IsisRouter_Counters_Level1_InCsnpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level1_InCsnpPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/in-csnp YANG schema element.
type IsisRouter_Counters_Level1_InCsnpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-csnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/in-csnp"
func (n *IsisRouter_Counters_Level1_InCsnpPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-csnp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).InCsnp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-csnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/in-csnp"
func (n *IsisRouter_Counters_Level1_InCsnpPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-csnp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).InCsnp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_Counters_Level1_InLspPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/in-lsp YANG schema element.
type IsisRouter_Counters_Level1_InLspPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level1_InLspPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/in-lsp YANG schema element.
type IsisRouter_Counters_Level1_InLspPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-lsp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/in-lsp"
func (n *IsisRouter_Counters_Level1_InLspPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-lsp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).InLsp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-lsp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/in-lsp"
func (n *IsisRouter_Counters_Level1_InLspPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-lsp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).InLsp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_Counters_Level1_InP2PHellosPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/in-p2p-hellos YANG schema element.
type IsisRouter_Counters_Level1_InP2PHellosPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level1_InP2PHellosPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/in-p2p-hellos YANG schema element.
type IsisRouter_Counters_Level1_InP2PHellosPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-p2p-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/in-p2p-hellos"
func (n *IsisRouter_Counters_Level1_InP2PHellosPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-p2p-hellos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).InP2PHellos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-p2p-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/in-p2p-hellos"
func (n *IsisRouter_Counters_Level1_InP2PHellosPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-p2p-hellos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).InP2PHellos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_Counters_Level1_InPsnpPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/in-psnp YANG schema element.
type IsisRouter_Counters_Level1_InPsnpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level1_InPsnpPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/in-psnp YANG schema element.
type IsisRouter_Counters_Level1_InPsnpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-psnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/in-psnp"
func (n *IsisRouter_Counters_Level1_InPsnpPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-psnp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).InPsnp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-psnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/in-psnp"
func (n *IsisRouter_Counters_Level1_InPsnpPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-psnp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).InPsnp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_Counters_Level1_OutBcastHellosPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/out-bcast-hellos YANG schema element.
type IsisRouter_Counters_Level1_OutBcastHellosPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level1_OutBcastHellosPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/out-bcast-hellos YANG schema element.
type IsisRouter_Counters_Level1_OutBcastHellosPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-bcast-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/out-bcast-hellos"
func (n *IsisRouter_Counters_Level1_OutBcastHellosPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-bcast-hellos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).OutBcastHellos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-bcast-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/out-bcast-hellos"
func (n *IsisRouter_Counters_Level1_OutBcastHellosPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-bcast-hellos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).OutBcastHellos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_Counters_Level1_OutCsnpPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/out-csnp YANG schema element.
type IsisRouter_Counters_Level1_OutCsnpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level1_OutCsnpPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/out-csnp YANG schema element.
type IsisRouter_Counters_Level1_OutCsnpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-csnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/out-csnp"
func (n *IsisRouter_Counters_Level1_OutCsnpPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-csnp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).OutCsnp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-csnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/out-csnp"
func (n *IsisRouter_Counters_Level1_OutCsnpPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-csnp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).OutCsnp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_Counters_Level1_OutLspPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/out-lsp YANG schema element.
type IsisRouter_Counters_Level1_OutLspPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level1_OutLspPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/out-lsp YANG schema element.
type IsisRouter_Counters_Level1_OutLspPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-lsp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/out-lsp"
func (n *IsisRouter_Counters_Level1_OutLspPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-lsp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).OutLsp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-lsp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/out-lsp"
func (n *IsisRouter_Counters_Level1_OutLspPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-lsp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).OutLsp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_Counters_Level1_OutP2PHellosPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/out-p2p-hellos YANG schema element.
type IsisRouter_Counters_Level1_OutP2PHellosPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level1_OutP2PHellosPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/out-p2p-hellos YANG schema element.
type IsisRouter_Counters_Level1_OutP2PHellosPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-p2p-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/out-p2p-hellos"
func (n *IsisRouter_Counters_Level1_OutP2PHellosPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-p2p-hellos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).OutP2PHellos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-p2p-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/out-p2p-hellos"
func (n *IsisRouter_Counters_Level1_OutP2PHellosPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-p2p-hellos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).OutP2PHellos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_Counters_Level1_OutPsnpPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/out-psnp YANG schema element.
type IsisRouter_Counters_Level1_OutPsnpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level1_OutPsnpPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/out-psnp YANG schema element.
type IsisRouter_Counters_Level1_OutPsnpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-psnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/out-psnp"
func (n *IsisRouter_Counters_Level1_OutPsnpPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-psnp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).OutPsnp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-psnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/out-psnp"
func (n *IsisRouter_Counters_Level1_OutPsnpPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-psnp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).OutPsnp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_Counters_Level1_SessionsFlapPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/sessions-flap YANG schema element.
type IsisRouter_Counters_Level1_SessionsFlapPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level1_SessionsFlapPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/sessions-flap YANG schema element.
type IsisRouter_Counters_Level1_SessionsFlapPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "sessions-flap"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/sessions-flap"
func (n *IsisRouter_Counters_Level1_SessionsFlapPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sessions-flap"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).SessionsFlap
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "sessions-flap"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/sessions-flap"
func (n *IsisRouter_Counters_Level1_SessionsFlapPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sessions-flap"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).SessionsFlap
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_Counters_Level1_SessionsUpPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/sessions-up YANG schema element.
type IsisRouter_Counters_Level1_SessionsUpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level1_SessionsUpPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/sessions-up YANG schema element.
type IsisRouter_Counters_Level1_SessionsUpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "sessions-up"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/sessions-up"
func (n *IsisRouter_Counters_Level1_SessionsUpPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sessions-up"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).SessionsUp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "sessions-up"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/sessions-up"
func (n *IsisRouter_Counters_Level1_SessionsUpPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sessions-up"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).SessionsUp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_Counters_Level1Path represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1 YANG schema element.
type IsisRouter_Counters_Level1Path struct {
	*ygnmi.NodePath
}

// IsisRouter_Counters_Level1PathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1 YANG schema element.
type IsisRouter_Counters_Level1PathAny struct {
	*ygnmi.NodePath
}

// DatabaseSize (leaf): The total number of link stOTG updOTGs (LSPs) in the LSP
// databases.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "database-size"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/database-size"
func (n *IsisRouter_Counters_Level1Path) DatabaseSize() *IsisRouter_Counters_Level1_DatabaseSizePath {
	ps := &IsisRouter_Counters_Level1_DatabaseSizePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"database-size"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DatabaseSize (leaf): The total number of link stOTG updOTGs (LSPs) in the LSP
// databases.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "database-size"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/database-size"
func (n *IsisRouter_Counters_Level1PathAny) DatabaseSize() *IsisRouter_Counters_Level1_DatabaseSizePathAny {
	ps := &IsisRouter_Counters_Level1_DatabaseSizePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"database-size"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InBcastHellos (leaf): The total number of broacast HELLO messages received.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-bcast-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/in-bcast-hellos"
func (n *IsisRouter_Counters_Level1Path) InBcastHellos() *IsisRouter_Counters_Level1_InBcastHellosPath {
	ps := &IsisRouter_Counters_Level1_InBcastHellosPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-bcast-hellos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InBcastHellos (leaf): The total number of broacast HELLO messages received.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-bcast-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/in-bcast-hellos"
func (n *IsisRouter_Counters_Level1PathAny) InBcastHellos() *IsisRouter_Counters_Level1_InBcastHellosPathAny {
	ps := &IsisRouter_Counters_Level1_InBcastHellosPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-bcast-hellos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InCsnp (leaf): The total number of complete sequence number packet (CSNPs)
// messages received.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-csnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/in-csnp"
func (n *IsisRouter_Counters_Level1Path) InCsnp() *IsisRouter_Counters_Level1_InCsnpPath {
	ps := &IsisRouter_Counters_Level1_InCsnpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-csnp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InCsnp (leaf): The total number of complete sequence number packet (CSNPs)
// messages received.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-csnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/in-csnp"
func (n *IsisRouter_Counters_Level1PathAny) InCsnp() *IsisRouter_Counters_Level1_InCsnpPathAny {
	ps := &IsisRouter_Counters_Level1_InCsnpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-csnp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InLsp (leaf): The total number of link state protocol data units (LSPs)
// received.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-lsp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/in-lsp"
func (n *IsisRouter_Counters_Level1Path) InLsp() *IsisRouter_Counters_Level1_InLspPath {
	ps := &IsisRouter_Counters_Level1_InLspPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-lsp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InLsp (leaf): The total number of link state protocol data units (LSPs)
// received.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-lsp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/in-lsp"
func (n *IsisRouter_Counters_Level1PathAny) InLsp() *IsisRouter_Counters_Level1_InLspPathAny {
	ps := &IsisRouter_Counters_Level1_InLspPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-lsp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InP2PHellos (leaf): The total number of point to point (P2P) HELLO messages
// received.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-p2p-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/in-p2p-hellos"
func (n *IsisRouter_Counters_Level1Path) InP2PHellos() *IsisRouter_Counters_Level1_InP2PHellosPath {
	ps := &IsisRouter_Counters_Level1_InP2PHellosPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-p2p-hellos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InP2PHellos (leaf): The total number of point to point (P2P) HELLO messages
// received.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-p2p-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/in-p2p-hellos"
func (n *IsisRouter_Counters_Level1PathAny) InP2PHellos() *IsisRouter_Counters_Level1_InP2PHellosPathAny {
	ps := &IsisRouter_Counters_Level1_InP2PHellosPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-p2p-hellos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPsnp (leaf): The total number of partial sequence number packet (PSNPs)
// messages received.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-psnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/in-psnp"
func (n *IsisRouter_Counters_Level1Path) InPsnp() *IsisRouter_Counters_Level1_InPsnpPath {
	ps := &IsisRouter_Counters_Level1_InPsnpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-psnp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPsnp (leaf): The total number of partial sequence number packet (PSNPs)
// messages received.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-psnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/in-psnp"
func (n *IsisRouter_Counters_Level1PathAny) InPsnp() *IsisRouter_Counters_Level1_InPsnpPathAny {
	ps := &IsisRouter_Counters_Level1_InPsnpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-psnp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutBcastHellos (leaf): The total number of broadcast HELLO messages sent.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-bcast-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/out-bcast-hellos"
func (n *IsisRouter_Counters_Level1Path) OutBcastHellos() *IsisRouter_Counters_Level1_OutBcastHellosPath {
	ps := &IsisRouter_Counters_Level1_OutBcastHellosPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-bcast-hellos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutBcastHellos (leaf): The total number of broadcast HELLO messages sent.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-bcast-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/out-bcast-hellos"
func (n *IsisRouter_Counters_Level1PathAny) OutBcastHellos() *IsisRouter_Counters_Level1_OutBcastHellosPathAny {
	ps := &IsisRouter_Counters_Level1_OutBcastHellosPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-bcast-hellos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutCsnp (leaf): The total number of complete sequence number packet (CSNPs)
// messages sent.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-csnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/out-csnp"
func (n *IsisRouter_Counters_Level1Path) OutCsnp() *IsisRouter_Counters_Level1_OutCsnpPath {
	ps := &IsisRouter_Counters_Level1_OutCsnpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-csnp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutCsnp (leaf): The total number of complete sequence number packet (CSNPs)
// messages sent.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-csnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/out-csnp"
func (n *IsisRouter_Counters_Level1PathAny) OutCsnp() *IsisRouter_Counters_Level1_OutCsnpPathAny {
	ps := &IsisRouter_Counters_Level1_OutCsnpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-csnp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLsp (leaf): The total number of link state protocol data units (LSPs)
// sent.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-lsp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/out-lsp"
func (n *IsisRouter_Counters_Level1Path) OutLsp() *IsisRouter_Counters_Level1_OutLspPath {
	ps := &IsisRouter_Counters_Level1_OutLspPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-lsp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLsp (leaf): The total number of link state protocol data units (LSPs)
// sent.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-lsp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/out-lsp"
func (n *IsisRouter_Counters_Level1PathAny) OutLsp() *IsisRouter_Counters_Level1_OutLspPathAny {
	ps := &IsisRouter_Counters_Level1_OutLspPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-lsp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutP2PHellos (leaf): The total number of point to point (P2P) HELLO messages
// sent.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-p2p-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/out-p2p-hellos"
func (n *IsisRouter_Counters_Level1Path) OutP2PHellos() *IsisRouter_Counters_Level1_OutP2PHellosPath {
	ps := &IsisRouter_Counters_Level1_OutP2PHellosPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-p2p-hellos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutP2PHellos (leaf): The total number of point to point (P2P) HELLO messages
// sent.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-p2p-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/out-p2p-hellos"
func (n *IsisRouter_Counters_Level1PathAny) OutP2PHellos() *IsisRouter_Counters_Level1_OutP2PHellosPathAny {
	ps := &IsisRouter_Counters_Level1_OutP2PHellosPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-p2p-hellos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPsnp (leaf): The total number of partial sequence number packet (PSNPs)
// messages sent.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-psnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/out-psnp"
func (n *IsisRouter_Counters_Level1Path) OutPsnp() *IsisRouter_Counters_Level1_OutPsnpPath {
	ps := &IsisRouter_Counters_Level1_OutPsnpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-psnp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPsnp (leaf): The total number of partial sequence number packet (PSNPs)
// messages sent.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-psnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/out-psnp"
func (n *IsisRouter_Counters_Level1PathAny) OutPsnp() *IsisRouter_Counters_Level1_OutPsnpPathAny {
	ps := &IsisRouter_Counters_Level1_OutPsnpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-psnp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SessionsFlap (leaf): The total number of sessions flap.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "sessions-flap"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/sessions-flap"
func (n *IsisRouter_Counters_Level1Path) SessionsFlap() *IsisRouter_Counters_Level1_SessionsFlapPath {
	ps := &IsisRouter_Counters_Level1_SessionsFlapPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"sessions-flap"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SessionsFlap (leaf): The total number of sessions flap.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "sessions-flap"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/sessions-flap"
func (n *IsisRouter_Counters_Level1PathAny) SessionsFlap() *IsisRouter_Counters_Level1_SessionsFlapPathAny {
	ps := &IsisRouter_Counters_Level1_SessionsFlapPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sessions-flap"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SessionsUp (leaf): The total number of sessions that are fully up.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "sessions-up"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/sessions-up"
func (n *IsisRouter_Counters_Level1Path) SessionsUp() *IsisRouter_Counters_Level1_SessionsUpPath {
	ps := &IsisRouter_Counters_Level1_SessionsUpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"sessions-up"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SessionsUp (leaf): The total number of sessions that are fully up.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "sessions-up"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/sessions-up"
func (n *IsisRouter_Counters_Level1PathAny) SessionsUp() *IsisRouter_Counters_Level1_SessionsUpPathAny {
	ps := &IsisRouter_Counters_Level1_SessionsUpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sessions-up"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_Counters_Level1Path) State() ygnmi.SingletonQuery[*oc.IsisRouter_Counters_Level1] {
	return ygnmi.NewSingletonQuery[*oc.IsisRouter_Counters_Level1](
		"IsisRouter_Counters_Level1",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_Counters_Level1PathAny) State() ygnmi.WildcardQuery[*oc.IsisRouter_Counters_Level1] {
	return ygnmi.NewWildcardQuery[*oc.IsisRouter_Counters_Level1](
		"IsisRouter_Counters_Level1",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_Counters_Level2_DatabaseSizePath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/database-size YANG schema element.
type IsisRouter_Counters_Level2_DatabaseSizePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level2_DatabaseSizePathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/database-size YANG schema element.
type IsisRouter_Counters_Level2_DatabaseSizePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "database-size"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/database-size"
func (n *IsisRouter_Counters_Level2_DatabaseSizePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"database-size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).DatabaseSize
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "database-size"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/database-size"
func (n *IsisRouter_Counters_Level2_DatabaseSizePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"database-size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).DatabaseSize
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_Counters_Level2_InBcastHellosPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/in-bcast-hellos YANG schema element.
type IsisRouter_Counters_Level2_InBcastHellosPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level2_InBcastHellosPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/in-bcast-hellos YANG schema element.
type IsisRouter_Counters_Level2_InBcastHellosPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-bcast-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/in-bcast-hellos"
func (n *IsisRouter_Counters_Level2_InBcastHellosPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-bcast-hellos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).InBcastHellos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-bcast-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/in-bcast-hellos"
func (n *IsisRouter_Counters_Level2_InBcastHellosPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-bcast-hellos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).InBcastHellos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_Counters_Level2_InCsnpPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/in-csnp YANG schema element.
type IsisRouter_Counters_Level2_InCsnpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level2_InCsnpPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/in-csnp YANG schema element.
type IsisRouter_Counters_Level2_InCsnpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-csnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/in-csnp"
func (n *IsisRouter_Counters_Level2_InCsnpPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-csnp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).InCsnp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-csnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/in-csnp"
func (n *IsisRouter_Counters_Level2_InCsnpPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-csnp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).InCsnp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_Counters_Level2_InLspPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/in-lsp YANG schema element.
type IsisRouter_Counters_Level2_InLspPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level2_InLspPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/in-lsp YANG schema element.
type IsisRouter_Counters_Level2_InLspPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-lsp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/in-lsp"
func (n *IsisRouter_Counters_Level2_InLspPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-lsp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).InLsp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-lsp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/in-lsp"
func (n *IsisRouter_Counters_Level2_InLspPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-lsp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).InLsp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_Counters_Level2_InP2PHellosPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/in-p2p-hellos YANG schema element.
type IsisRouter_Counters_Level2_InP2PHellosPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level2_InP2PHellosPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/in-p2p-hellos YANG schema element.
type IsisRouter_Counters_Level2_InP2PHellosPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-p2p-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/in-p2p-hellos"
func (n *IsisRouter_Counters_Level2_InP2PHellosPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-p2p-hellos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).InP2PHellos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-p2p-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/in-p2p-hellos"
func (n *IsisRouter_Counters_Level2_InP2PHellosPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-p2p-hellos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).InP2PHellos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_Counters_Level2_InPsnpPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/in-psnp YANG schema element.
type IsisRouter_Counters_Level2_InPsnpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level2_InPsnpPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/in-psnp YANG schema element.
type IsisRouter_Counters_Level2_InPsnpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-psnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/in-psnp"
func (n *IsisRouter_Counters_Level2_InPsnpPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-psnp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).InPsnp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-psnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/in-psnp"
func (n *IsisRouter_Counters_Level2_InPsnpPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-psnp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).InPsnp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_Counters_Level2_OutBcastHellosPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/out-bcast-hellos YANG schema element.
type IsisRouter_Counters_Level2_OutBcastHellosPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level2_OutBcastHellosPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/out-bcast-hellos YANG schema element.
type IsisRouter_Counters_Level2_OutBcastHellosPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-bcast-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/out-bcast-hellos"
func (n *IsisRouter_Counters_Level2_OutBcastHellosPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-bcast-hellos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).OutBcastHellos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-bcast-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/out-bcast-hellos"
func (n *IsisRouter_Counters_Level2_OutBcastHellosPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-bcast-hellos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).OutBcastHellos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_Counters_Level2_OutCsnpPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/out-csnp YANG schema element.
type IsisRouter_Counters_Level2_OutCsnpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level2_OutCsnpPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/out-csnp YANG schema element.
type IsisRouter_Counters_Level2_OutCsnpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-csnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/out-csnp"
func (n *IsisRouter_Counters_Level2_OutCsnpPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-csnp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).OutCsnp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-csnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/out-csnp"
func (n *IsisRouter_Counters_Level2_OutCsnpPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-csnp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).OutCsnp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_Counters_Level2_OutLspPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/out-lsp YANG schema element.
type IsisRouter_Counters_Level2_OutLspPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level2_OutLspPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/out-lsp YANG schema element.
type IsisRouter_Counters_Level2_OutLspPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-lsp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/out-lsp"
func (n *IsisRouter_Counters_Level2_OutLspPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-lsp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).OutLsp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-lsp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/out-lsp"
func (n *IsisRouter_Counters_Level2_OutLspPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-lsp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).OutLsp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_Counters_Level2_OutP2PHellosPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/out-p2p-hellos YANG schema element.
type IsisRouter_Counters_Level2_OutP2PHellosPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level2_OutP2PHellosPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/out-p2p-hellos YANG schema element.
type IsisRouter_Counters_Level2_OutP2PHellosPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-p2p-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/out-p2p-hellos"
func (n *IsisRouter_Counters_Level2_OutP2PHellosPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-p2p-hellos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).OutP2PHellos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-p2p-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/out-p2p-hellos"
func (n *IsisRouter_Counters_Level2_OutP2PHellosPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-p2p-hellos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).OutP2PHellos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_Counters_Level2_OutPsnpPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/out-psnp YANG schema element.
type IsisRouter_Counters_Level2_OutPsnpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level2_OutPsnpPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/out-psnp YANG schema element.
type IsisRouter_Counters_Level2_OutPsnpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-psnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/out-psnp"
func (n *IsisRouter_Counters_Level2_OutPsnpPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-psnp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).OutPsnp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-psnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/out-psnp"
func (n *IsisRouter_Counters_Level2_OutPsnpPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-psnp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).OutPsnp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_Counters_Level2_SessionsFlapPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/sessions-flap YANG schema element.
type IsisRouter_Counters_Level2_SessionsFlapPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level2_SessionsFlapPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/sessions-flap YANG schema element.
type IsisRouter_Counters_Level2_SessionsFlapPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "sessions-flap"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/sessions-flap"
func (n *IsisRouter_Counters_Level2_SessionsFlapPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sessions-flap"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).SessionsFlap
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "sessions-flap"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/sessions-flap"
func (n *IsisRouter_Counters_Level2_SessionsFlapPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sessions-flap"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).SessionsFlap
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_Counters_Level2_SessionsUpPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/sessions-up YANG schema element.
type IsisRouter_Counters_Level2_SessionsUpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level2_SessionsUpPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/sessions-up YANG schema element.
type IsisRouter_Counters_Level2_SessionsUpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "sessions-up"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/sessions-up"
func (n *IsisRouter_Counters_Level2_SessionsUpPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sessions-up"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).SessionsUp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "sessions-up"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/sessions-up"
func (n *IsisRouter_Counters_Level2_SessionsUpPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sessions-up"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).SessionsUp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_Counters_Level2Path represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2 YANG schema element.
type IsisRouter_Counters_Level2Path struct {
	*ygnmi.NodePath
}

// IsisRouter_Counters_Level2PathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2 YANG schema element.
type IsisRouter_Counters_Level2PathAny struct {
	*ygnmi.NodePath
}

// DatabaseSize (leaf): The total number of link stOTG updOTGs (LSPs) in the LSP
// databases.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "database-size"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/database-size"
func (n *IsisRouter_Counters_Level2Path) DatabaseSize() *IsisRouter_Counters_Level2_DatabaseSizePath {
	ps := &IsisRouter_Counters_Level2_DatabaseSizePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"database-size"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DatabaseSize (leaf): The total number of link stOTG updOTGs (LSPs) in the LSP
// databases.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "database-size"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/database-size"
func (n *IsisRouter_Counters_Level2PathAny) DatabaseSize() *IsisRouter_Counters_Level2_DatabaseSizePathAny {
	ps := &IsisRouter_Counters_Level2_DatabaseSizePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"database-size"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InBcastHellos (leaf): The total number of broacast HELLO messages received.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-bcast-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/in-bcast-hellos"
func (n *IsisRouter_Counters_Level2Path) InBcastHellos() *IsisRouter_Counters_Level2_InBcastHellosPath {
	ps := &IsisRouter_Counters_Level2_InBcastHellosPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-bcast-hellos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InBcastHellos (leaf): The total number of broacast HELLO messages received.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-bcast-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/in-bcast-hellos"
func (n *IsisRouter_Counters_Level2PathAny) InBcastHellos() *IsisRouter_Counters_Level2_InBcastHellosPathAny {
	ps := &IsisRouter_Counters_Level2_InBcastHellosPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-bcast-hellos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InCsnp (leaf): The total number of complete sequence number packet (CSNPs)
// messages received.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-csnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/in-csnp"
func (n *IsisRouter_Counters_Level2Path) InCsnp() *IsisRouter_Counters_Level2_InCsnpPath {
	ps := &IsisRouter_Counters_Level2_InCsnpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-csnp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InCsnp (leaf): The total number of complete sequence number packet (CSNPs)
// messages received.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-csnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/in-csnp"
func (n *IsisRouter_Counters_Level2PathAny) InCsnp() *IsisRouter_Counters_Level2_InCsnpPathAny {
	ps := &IsisRouter_Counters_Level2_InCsnpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-csnp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InLsp (leaf): The total number of link state protocol data units (LSPs)
// received.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-lsp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/in-lsp"
func (n *IsisRouter_Counters_Level2Path) InLsp() *IsisRouter_Counters_Level2_InLspPath {
	ps := &IsisRouter_Counters_Level2_InLspPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-lsp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InLsp (leaf): The total number of link state protocol data units (LSPs)
// received.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-lsp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/in-lsp"
func (n *IsisRouter_Counters_Level2PathAny) InLsp() *IsisRouter_Counters_Level2_InLspPathAny {
	ps := &IsisRouter_Counters_Level2_InLspPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-lsp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InP2PHellos (leaf): The total number of point to point (P2P) HELLO messages
// received.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-p2p-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/in-p2p-hellos"
func (n *IsisRouter_Counters_Level2Path) InP2PHellos() *IsisRouter_Counters_Level2_InP2PHellosPath {
	ps := &IsisRouter_Counters_Level2_InP2PHellosPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-p2p-hellos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InP2PHellos (leaf): The total number of point to point (P2P) HELLO messages
// received.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-p2p-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/in-p2p-hellos"
func (n *IsisRouter_Counters_Level2PathAny) InP2PHellos() *IsisRouter_Counters_Level2_InP2PHellosPathAny {
	ps := &IsisRouter_Counters_Level2_InP2PHellosPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-p2p-hellos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPsnp (leaf): The total number of partial sequence number packet (PSNPs)
// messages received.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-psnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/in-psnp"
func (n *IsisRouter_Counters_Level2Path) InPsnp() *IsisRouter_Counters_Level2_InPsnpPath {
	ps := &IsisRouter_Counters_Level2_InPsnpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-psnp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPsnp (leaf): The total number of partial sequence number packet (PSNPs)
// messages received.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-psnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/in-psnp"
func (n *IsisRouter_Counters_Level2PathAny) InPsnp() *IsisRouter_Counters_Level2_InPsnpPathAny {
	ps := &IsisRouter_Counters_Level2_InPsnpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-psnp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutBcastHellos (leaf): The total number of broadcast HELLO messages sent.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-bcast-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/out-bcast-hellos"
func (n *IsisRouter_Counters_Level2Path) OutBcastHellos() *IsisRouter_Counters_Level2_OutBcastHellosPath {
	ps := &IsisRouter_Counters_Level2_OutBcastHellosPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-bcast-hellos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutBcastHellos (leaf): The total number of broadcast HELLO messages sent.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-bcast-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/out-bcast-hellos"
func (n *IsisRouter_Counters_Level2PathAny) OutBcastHellos() *IsisRouter_Counters_Level2_OutBcastHellosPathAny {
	ps := &IsisRouter_Counters_Level2_OutBcastHellosPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-bcast-hellos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutCsnp (leaf): The total number of complete sequence number packet (CSNPs)
// messages sent.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-csnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/out-csnp"
func (n *IsisRouter_Counters_Level2Path) OutCsnp() *IsisRouter_Counters_Level2_OutCsnpPath {
	ps := &IsisRouter_Counters_Level2_OutCsnpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-csnp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutCsnp (leaf): The total number of complete sequence number packet (CSNPs)
// messages sent.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-csnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/out-csnp"
func (n *IsisRouter_Counters_Level2PathAny) OutCsnp() *IsisRouter_Counters_Level2_OutCsnpPathAny {
	ps := &IsisRouter_Counters_Level2_OutCsnpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-csnp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLsp (leaf): The total number of link state protocol data units (LSPs)
// sent.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-lsp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/out-lsp"
func (n *IsisRouter_Counters_Level2Path) OutLsp() *IsisRouter_Counters_Level2_OutLspPath {
	ps := &IsisRouter_Counters_Level2_OutLspPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-lsp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLsp (leaf): The total number of link state protocol data units (LSPs)
// sent.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-lsp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/out-lsp"
func (n *IsisRouter_Counters_Level2PathAny) OutLsp() *IsisRouter_Counters_Level2_OutLspPathAny {
	ps := &IsisRouter_Counters_Level2_OutLspPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-lsp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutP2PHellos (leaf): The total number of point to point (P2P) HELLO messages
// sent.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-p2p-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/out-p2p-hellos"
func (n *IsisRouter_Counters_Level2Path) OutP2PHellos() *IsisRouter_Counters_Level2_OutP2PHellosPath {
	ps := &IsisRouter_Counters_Level2_OutP2PHellosPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-p2p-hellos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutP2PHellos (leaf): The total number of point to point (P2P) HELLO messages
// sent.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-p2p-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/out-p2p-hellos"
func (n *IsisRouter_Counters_Level2PathAny) OutP2PHellos() *IsisRouter_Counters_Level2_OutP2PHellosPathAny {
	ps := &IsisRouter_Counters_Level2_OutP2PHellosPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-p2p-hellos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPsnp (leaf): The total number of partial sequence number packet (PSNPs)
// messages sent.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-psnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/out-psnp"
func (n *IsisRouter_Counters_Level2Path) OutPsnp() *IsisRouter_Counters_Level2_OutPsnpPath {
	ps := &IsisRouter_Counters_Level2_OutPsnpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-psnp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPsnp (leaf): The total number of partial sequence number packet (PSNPs)
// messages sent.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-psnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/out-psnp"
func (n *IsisRouter_Counters_Level2PathAny) OutPsnp() *IsisRouter_Counters_Level2_OutPsnpPathAny {
	ps := &IsisRouter_Counters_Level2_OutPsnpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-psnp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SessionsFlap (leaf): The total number of sessions flap.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "sessions-flap"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/sessions-flap"
func (n *IsisRouter_Counters_Level2Path) SessionsFlap() *IsisRouter_Counters_Level2_SessionsFlapPath {
	ps := &IsisRouter_Counters_Level2_SessionsFlapPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"sessions-flap"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SessionsFlap (leaf): The total number of sessions flap.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "sessions-flap"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/sessions-flap"
func (n *IsisRouter_Counters_Level2PathAny) SessionsFlap() *IsisRouter_Counters_Level2_SessionsFlapPathAny {
	ps := &IsisRouter_Counters_Level2_SessionsFlapPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sessions-flap"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SessionsUp (leaf): The total number of sessions that are fully up.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "sessions-up"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/sessions-up"
func (n *IsisRouter_Counters_Level2Path) SessionsUp() *IsisRouter_Counters_Level2_SessionsUpPath {
	ps := &IsisRouter_Counters_Level2_SessionsUpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"sessions-up"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SessionsUp (leaf): The total number of sessions that are fully up.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "sessions-up"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/sessions-up"
func (n *IsisRouter_Counters_Level2PathAny) SessionsUp() *IsisRouter_Counters_Level2_SessionsUpPathAny {
	ps := &IsisRouter_Counters_Level2_SessionsUpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sessions-up"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_Counters_Level2Path) State() ygnmi.SingletonQuery[*oc.IsisRouter_Counters_Level2] {
	return ygnmi.NewSingletonQuery[*oc.IsisRouter_Counters_Level2](
		"IsisRouter_Counters_Level2",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_Counters_Level2PathAny) State() ygnmi.WildcardQuery[*oc.IsisRouter_Counters_Level2] {
	return ygnmi.NewWildcardQuery[*oc.IsisRouter_Counters_Level2](
		"IsisRouter_Counters_Level2",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabasePath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database YANG schema element.
type IsisRouter_LinkStateDatabasePath struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabasePathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database YANG schema element.
type IsisRouter_LinkStateDatabasePathAny struct {
	*ygnmi.NodePath
}

// LspsAny (list): LSP ID of the LSP, in the format, e.g. '640000000001-00-00'.
// LSP ID is consist of the System ID of a neighbor, the Pseudonode ID, and the LSP number of the LSPs.
// The last two bytes respectively represent Pseudonode ID and LSP number.
// A pseudonode is a logical representation of the LAN which is generated by a Designated Intermediate System (DIS)
// on a LAN segment. If one LSP is not fit by maximum LSP size then thats sent in another LSP with LSP number
// is incremented by 1.
// A router's learned LSP gets refreshed by 'remaining_lifetime'. Then the sequence number is incremented by 1.
// pdu-type can be either one of LEVEL_1 or LEVEL_2.
// A learned LSP is uniquely determined by LSP ID and pdu-type together.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "lsp-states/lsps"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps"
func (n *IsisRouter_LinkStateDatabasePath) LspsAny() *IsisRouter_LinkStateDatabase_LspsPathAny {
	ps := &IsisRouter_LinkStateDatabase_LspsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lsp-states", "lsps"},
			map[string]interface{}{"lsp-id": "*", "pdu-type": "*"},
			n,
		),
	}
	return ps
}

// LspsAny (list): LSP ID of the LSP, in the format, e.g. '640000000001-00-00'.
// LSP ID is consist of the System ID of a neighbor, the Pseudonode ID, and the LSP number of the LSPs.
// The last two bytes respectively represent Pseudonode ID and LSP number.
// A pseudonode is a logical representation of the LAN which is generated by a Designated Intermediate System (DIS)
// on a LAN segment. If one LSP is not fit by maximum LSP size then thats sent in another LSP with LSP number
// is incremented by 1.
// A router's learned LSP gets refreshed by 'remaining_lifetime'. Then the sequence number is incremented by 1.
// pdu-type can be either one of LEVEL_1 or LEVEL_2.
// A learned LSP is uniquely determined by LSP ID and pdu-type together.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "lsp-states/lsps"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps"
func (n *IsisRouter_LinkStateDatabasePathAny) LspsAny() *IsisRouter_LinkStateDatabase_LspsPathAny {
	ps := &IsisRouter_LinkStateDatabase_LspsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lsp-states", "lsps"},
			map[string]interface{}{"lsp-id": "*", "pdu-type": "*"},
			n,
		),
	}
	return ps
}

// WithLspId sets IsisRouter_LinkStateDatabase_LspsPathAny's key "lsp-id" to the specified value.
// LspId: string
func (n *IsisRouter_LinkStateDatabase_LspsPathAny) WithLspId(LspId string) *IsisRouter_LinkStateDatabase_LspsPathAny {
	ygnmi.ModifyKey(n.NodePath, "lsp-id", LspId)
	return n
}

// WithPduType sets IsisRouter_LinkStateDatabase_LspsPathAny's key "pdu-type" to the specified value.
// PduType: oc.E_Lsps_PduType
func (n *IsisRouter_LinkStateDatabase_LspsPathAny) WithPduType(PduType oc.E_Lsps_PduType) *IsisRouter_LinkStateDatabase_LspsPathAny {
	ygnmi.ModifyKey(n.NodePath, "pdu-type", PduType)
	return n
}

// Lsps (list): LSP ID of the LSP, in the format, e.g. '640000000001-00-00'.
// LSP ID is consist of the System ID of a neighbor, the Pseudonode ID, and the LSP number of the LSPs.
// The last two bytes respectively represent Pseudonode ID and LSP number.
// A pseudonode is a logical representation of the LAN which is generated by a Designated Intermediate System (DIS)
// on a LAN segment. If one LSP is not fit by maximum LSP size then thats sent in another LSP with LSP number
// is incremented by 1.
// A router's learned LSP gets refreshed by 'remaining_lifetime'. Then the sequence number is incremented by 1.
// pdu-type can be either one of LEVEL_1 or LEVEL_2.
// A learned LSP is uniquely determined by LSP ID and pdu-type together.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "lsp-states/lsps"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps"
//
//	LspId: string
//	PduType: oc.E_Lsps_PduType
func (n *IsisRouter_LinkStateDatabasePath) Lsps(LspId string, PduType oc.E_Lsps_PduType) *IsisRouter_LinkStateDatabase_LspsPath {
	ps := &IsisRouter_LinkStateDatabase_LspsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"lsp-states", "lsps"},
			map[string]interface{}{"lsp-id": LspId, "pdu-type": PduType},
			n,
		),
	}
	return ps
}

// Lsps (list): LSP ID of the LSP, in the format, e.g. '640000000001-00-00'.
// LSP ID is consist of the System ID of a neighbor, the Pseudonode ID, and the LSP number of the LSPs.
// The last two bytes respectively represent Pseudonode ID and LSP number.
// A pseudonode is a logical representation of the LAN which is generated by a Designated Intermediate System (DIS)
// on a LAN segment. If one LSP is not fit by maximum LSP size then thats sent in another LSP with LSP number
// is incremented by 1.
// A router's learned LSP gets refreshed by 'remaining_lifetime'. Then the sequence number is incremented by 1.
// pdu-type can be either one of LEVEL_1 or LEVEL_2.
// A learned LSP is uniquely determined by LSP ID and pdu-type together.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "lsp-states/lsps"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps"
//
//	LspId: string
//	PduType: oc.E_Lsps_PduType
func (n *IsisRouter_LinkStateDatabasePathAny) Lsps(LspId string, PduType oc.E_Lsps_PduType) *IsisRouter_LinkStateDatabase_LspsPathAny {
	ps := &IsisRouter_LinkStateDatabase_LspsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lsp-states", "lsps"},
			map[string]interface{}{"lsp-id": LspId, "pdu-type": PduType},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabasePath) State() ygnmi.SingletonQuery[*oc.IsisRouter_LinkStateDatabase] {
	return ygnmi.NewSingletonQuery[*oc.IsisRouter_LinkStateDatabase](
		"IsisRouter_LinkStateDatabase",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabasePathAny) State() ygnmi.WildcardQuery[*oc.IsisRouter_LinkStateDatabase] {
	return ygnmi.NewWildcardQuery[*oc.IsisRouter_LinkStateDatabase](
		"IsisRouter_LinkStateDatabase",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_FlagsPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/state/flags YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_FlagsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_FlagsPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/state/flags YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_FlagsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/flags"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/state/flags"
func (n *IsisRouter_LinkStateDatabase_Lsps_FlagsPath) State() ygnmi.SingletonQuery[[]oc.E_Lsps_Flags] {
	return ygnmi.NewSingletonQuery[[]oc.E_Lsps_Flags](
		"IsisRouter_LinkStateDatabase_Lsps",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_Lsps_Flags, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_LinkStateDatabase_Lsps) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/flags"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/state/flags"
func (n *IsisRouter_LinkStateDatabase_Lsps_FlagsPathAny) State() ygnmi.WildcardQuery[[]oc.E_Lsps_Flags] {
	return ygnmi.NewWildcardQuery[[]oc.E_Lsps_Flags](
		"IsisRouter_LinkStateDatabase_Lsps",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_Lsps_Flags, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_LinkStateDatabase_Lsps) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_IsTypePath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/state/is-type YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_IsTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_IsTypePathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/state/is-type YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_IsTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/is-type"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/state/is-type"
func (n *IsisRouter_LinkStateDatabase_Lsps_IsTypePath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"IsisRouter_LinkStateDatabase_Lsps",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "is-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps).IsType
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_LinkStateDatabase_Lsps) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/is-type"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/state/is-type"
func (n *IsisRouter_LinkStateDatabase_Lsps_IsTypePathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"IsisRouter_LinkStateDatabase_Lsps",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "is-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps).IsType
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_LinkStateDatabase_Lsps) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_LspIdPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/state/lsp-id YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_LspIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_LspIdPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/state/lsp-id YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_LspIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/lsp-id"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/state/lsp-id"
func (n *IsisRouter_LinkStateDatabase_Lsps_LspIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"IsisRouter_LinkStateDatabase_Lsps",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lsp-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps).LspId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_LinkStateDatabase_Lsps) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/lsp-id"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/state/lsp-id"
func (n *IsisRouter_LinkStateDatabase_Lsps_LspIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"IsisRouter_LinkStateDatabase_Lsps",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lsp-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps).LspId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_LinkStateDatabase_Lsps) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "lsp-id"
//	Path from root:       ""
func (n *IsisRouter_LinkStateDatabase_Lsps_LspIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"IsisRouter_LinkStateDatabase_Lsps",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"lsp-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps).LspId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_LinkStateDatabase_Lsps) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "lsp-id"
//	Path from root:       ""
func (n *IsisRouter_LinkStateDatabase_Lsps_LspIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"IsisRouter_LinkStateDatabase_Lsps",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"lsp-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps).LspId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_LinkStateDatabase_Lsps) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_PduLengthPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/state/pdu-length YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_PduLengthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_PduLengthPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/state/pdu-length YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_PduLengthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/pdu-length"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/state/pdu-length"
func (n *IsisRouter_LinkStateDatabase_Lsps_PduLengthPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"IsisRouter_LinkStateDatabase_Lsps",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "pdu-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps).PduLength
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_LinkStateDatabase_Lsps) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/pdu-length"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/state/pdu-length"
func (n *IsisRouter_LinkStateDatabase_Lsps_PduLengthPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"IsisRouter_LinkStateDatabase_Lsps",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "pdu-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps).PduLength
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_LinkStateDatabase_Lsps) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_PduTypePath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/state/pdu-type YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_PduTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_PduTypePathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/state/pdu-type YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_PduTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/pdu-type"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/state/pdu-type"
func (n *IsisRouter_LinkStateDatabase_Lsps_PduTypePath) State() ygnmi.SingletonQuery[oc.E_Lsps_PduType] {
	return ygnmi.NewSingletonQuery[oc.E_Lsps_PduType](
		"IsisRouter_LinkStateDatabase_Lsps",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "pdu-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Lsps_PduType, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps).PduType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_LinkStateDatabase_Lsps) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/pdu-type"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/state/pdu-type"
func (n *IsisRouter_LinkStateDatabase_Lsps_PduTypePathAny) State() ygnmi.WildcardQuery[oc.E_Lsps_PduType] {
	return ygnmi.NewWildcardQuery[oc.E_Lsps_PduType](
		"IsisRouter_LinkStateDatabase_Lsps",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "pdu-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Lsps_PduType, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps).PduType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_LinkStateDatabase_Lsps) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "pdu-type"
//	Path from root:       ""
func (n *IsisRouter_LinkStateDatabase_Lsps_PduTypePath) Config() ygnmi.ConfigQuery[oc.E_Lsps_PduType] {
	return ygnmi.NewConfigQuery[oc.E_Lsps_PduType](
		"IsisRouter_LinkStateDatabase_Lsps",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"pdu-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Lsps_PduType, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps).PduType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_LinkStateDatabase_Lsps) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "pdu-type"
//	Path from root:       ""
func (n *IsisRouter_LinkStateDatabase_Lsps_PduTypePathAny) Config() ygnmi.WildcardQuery[oc.E_Lsps_PduType] {
	return ygnmi.NewWildcardQuery[oc.E_Lsps_PduType](
		"IsisRouter_LinkStateDatabase_Lsps",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"pdu-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Lsps_PduType, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps).PduType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_LinkStateDatabase_Lsps) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_RemainingLifetimePath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/state/remaining-lifetime YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_RemainingLifetimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_RemainingLifetimePathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/state/remaining-lifetime YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_RemainingLifetimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/remaining-lifetime"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/state/remaining-lifetime"
func (n *IsisRouter_LinkStateDatabase_Lsps_RemainingLifetimePath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"IsisRouter_LinkStateDatabase_Lsps",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "remaining-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps).RemainingLifetime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_LinkStateDatabase_Lsps) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/remaining-lifetime"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/state/remaining-lifetime"
func (n *IsisRouter_LinkStateDatabase_Lsps_RemainingLifetimePathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"IsisRouter_LinkStateDatabase_Lsps",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "remaining-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps).RemainingLifetime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_LinkStateDatabase_Lsps) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_SequenceNumberPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/state/sequence-number YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_SequenceNumberPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_SequenceNumberPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/state/sequence-number YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_SequenceNumberPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/sequence-number"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/state/sequence-number"
func (n *IsisRouter_LinkStateDatabase_Lsps_SequenceNumberPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"IsisRouter_LinkStateDatabase_Lsps",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sequence-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps).SequenceNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_LinkStateDatabase_Lsps) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/sequence-number"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/state/sequence-number"
func (n *IsisRouter_LinkStateDatabase_Lsps_SequenceNumberPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"IsisRouter_LinkStateDatabase_Lsps",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sequence-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps).SequenceNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_LinkStateDatabase_Lsps) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_LspsPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps YANG schema element.
type IsisRouter_LinkStateDatabase_LspsPath struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_LspsPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps YANG schema element.
type IsisRouter_LinkStateDatabase_LspsPathAny struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_LspsPathMap represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps YANG schema element.
type IsisRouter_LinkStateDatabase_LspsPathMap struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_LspsPathMapAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps YANG schema element.
type IsisRouter_LinkStateDatabase_LspsPathMapAny struct {
	*ygnmi.NodePath
}

// Flags (leaf-list): LSP Type-Block flags.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/flags"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/state/flags"
func (n *IsisRouter_LinkStateDatabase_LspsPath) Flags() *IsisRouter_LinkStateDatabase_Lsps_FlagsPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_FlagsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Flags (leaf-list): LSP Type-Block flags.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/flags"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/state/flags"
func (n *IsisRouter_LinkStateDatabase_LspsPathAny) Flags() *IsisRouter_LinkStateDatabase_Lsps_FlagsPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_FlagsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IsType (leaf): IS Type - bits 1 and 2 indicate the type of Intermediate System.
//
//	 1 - ( i.e. bit 1 set) Level 1 Intermediate system.
//	 2 - Unused value.
//	 3 - (i.e. bits 1 and 2 set) Level 2 Intermediate system.
//		Defining module:      "open-traffic-generator-isis"
//		Instantiating module: "open-traffic-generator-isis"
//		Path from parent:     "state/is-type"
//		Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/state/is-type"
func (n *IsisRouter_LinkStateDatabase_LspsPath) IsType() *IsisRouter_LinkStateDatabase_Lsps_IsTypePath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_IsTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "is-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IsType (leaf): IS Type - bits 1 and 2 indicate the type of Intermediate System.
//
//	 1 - ( i.e. bit 1 set) Level 1 Intermediate system.
//	 2 - Unused value.
//	 3 - (i.e. bits 1 and 2 set) Level 2 Intermediate system.
//		Defining module:      "open-traffic-generator-isis"
//		Instantiating module: "open-traffic-generator-isis"
//		Path from parent:     "state/is-type"
//		Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/state/is-type"
func (n *IsisRouter_LinkStateDatabase_LspsPathAny) IsType() *IsisRouter_LinkStateDatabase_Lsps_IsTypePathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_IsTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "is-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LspId (leaf): LSP ID of the LSP, e.g. '640000000001-00-00'.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "*/lsp-id"
//	Path from root:       "/isis-routers/isis-router/*/link-state-database/lsp-states/lsps/*/lsp-id"
func (n *IsisRouter_LinkStateDatabase_LspsPath) LspId() *IsisRouter_LinkStateDatabase_Lsps_LspIdPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_LspIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lsp-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LspId (leaf): LSP ID of the LSP, e.g. '640000000001-00-00'.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "*/lsp-id"
//	Path from root:       "/isis-routers/isis-router/*/link-state-database/lsp-states/lsps/*/lsp-id"
func (n *IsisRouter_LinkStateDatabase_LspsPathAny) LspId() *IsisRouter_LinkStateDatabase_Lsps_LspIdPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_LspIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lsp-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PduLength (leaf): Total length of the LSP.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/pdu-length"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/state/pdu-length"
func (n *IsisRouter_LinkStateDatabase_LspsPath) PduLength() *IsisRouter_LinkStateDatabase_Lsps_PduLengthPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_PduLengthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "pdu-length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PduLength (leaf): Total length of the LSP.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/pdu-length"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/state/pdu-length"
func (n *IsisRouter_LinkStateDatabase_LspsPathAny) PduLength() *IsisRouter_LinkStateDatabase_Lsps_PduLengthPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_PduLengthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "pdu-length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PduType (leaf): Link State PDU type.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "*/pdu-type"
//	Path from root:       "/isis-routers/isis-router/*/link-state-database/lsp-states/lsps/*/pdu-type"
func (n *IsisRouter_LinkStateDatabase_LspsPath) PduType() *IsisRouter_LinkStateDatabase_Lsps_PduTypePath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_PduTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "pdu-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PduType (leaf): Link State PDU type.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "*/pdu-type"
//	Path from root:       "/isis-routers/isis-router/*/link-state-database/lsp-states/lsps/*/pdu-type"
func (n *IsisRouter_LinkStateDatabase_LspsPathAny) PduType() *IsisRouter_LinkStateDatabase_Lsps_PduTypePathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_PduTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "pdu-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RemainingLifetime (leaf): Remaining lifetime in seconds before the LSP expiration.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/remaining-lifetime"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/state/remaining-lifetime"
func (n *IsisRouter_LinkStateDatabase_LspsPath) RemainingLifetime() *IsisRouter_LinkStateDatabase_Lsps_RemainingLifetimePath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_RemainingLifetimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "remaining-lifetime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RemainingLifetime (leaf): Remaining lifetime in seconds before the LSP expiration.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/remaining-lifetime"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/state/remaining-lifetime"
func (n *IsisRouter_LinkStateDatabase_LspsPathAny) RemainingLifetime() *IsisRouter_LinkStateDatabase_Lsps_RemainingLifetimePathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_RemainingLifetimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "remaining-lifetime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SequenceNumber (leaf): Sequence number of the LSP.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/sequence-number"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/state/sequence-number"
func (n *IsisRouter_LinkStateDatabase_LspsPath) SequenceNumber() *IsisRouter_LinkStateDatabase_Lsps_SequenceNumberPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_SequenceNumberPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sequence-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SequenceNumber (leaf): Sequence number of the LSP.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/sequence-number"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/state/sequence-number"
func (n *IsisRouter_LinkStateDatabase_LspsPathAny) SequenceNumber() *IsisRouter_LinkStateDatabase_Lsps_SequenceNumberPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_SequenceNumberPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sequence-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Tlvs (container): This container defines Link State PDU TLVs. When there are multiple occurences of a  specific TLV
// in a LSP, the data in the TLVs are combined and stored in the corresponding TLV container defined below.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "tlvs"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs"
func (n *IsisRouter_LinkStateDatabase_LspsPath) Tlvs() *IsisRouter_LinkStateDatabase_Lsps_TlvsPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_TlvsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"tlvs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Tlvs (container): This container defines Link State PDU TLVs. When there are multiple occurences of a  specific TLV
// in a LSP, the data in the TLVs are combined and stored in the corresponding TLV container defined below.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "tlvs"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs"
func (n *IsisRouter_LinkStateDatabase_LspsPathAny) Tlvs() *IsisRouter_LinkStateDatabase_Lsps_TlvsPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_TlvsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tlvs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_LspsPath) State() ygnmi.SingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps] {
	return ygnmi.NewSingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps](
		"IsisRouter_LinkStateDatabase_Lsps",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_LspsPathAny) State() ygnmi.WildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps] {
	return ygnmi.NewWildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps](
		"IsisRouter_LinkStateDatabase_Lsps",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_TlvsPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_TlvsPath struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_TlvsPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_TlvsPathAny struct {
	*ygnmi.NodePath
}

// CapabilityAny (list): This list describes IS Router capabilities.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "router-capabilities/capability"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability"
func (n *IsisRouter_LinkStateDatabase_Lsps_TlvsPath) CapabilityAny() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_CapabilityPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_CapabilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"router-capabilities", "capability"},
			map[string]interface{}{"instance-number": "*"},
			n,
		),
	}
	return ps
}

// CapabilityAny (list): This list describes IS Router capabilities.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "router-capabilities/capability"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability"
func (n *IsisRouter_LinkStateDatabase_Lsps_TlvsPathAny) CapabilityAny() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_CapabilityPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_CapabilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"router-capabilities", "capability"},
			map[string]interface{}{"instance-number": "*"},
			n,
		),
	}
	return ps
}

// Capability (list): This list describes IS Router capabilities.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "router-capabilities/capability"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability"
//
//	InstanceNumber: uint32
func (n *IsisRouter_LinkStateDatabase_Lsps_TlvsPath) Capability(InstanceNumber uint32) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_CapabilityPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_CapabilityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"router-capabilities", "capability"},
			map[string]interface{}{"instance-number": InstanceNumber},
			n,
		),
	}
	return ps
}

// Capability (list): This list describes IS Router capabilities.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "router-capabilities/capability"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability"
//
//	InstanceNumber: uint32
func (n *IsisRouter_LinkStateDatabase_Lsps_TlvsPathAny) Capability(InstanceNumber uint32) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_CapabilityPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_CapabilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"router-capabilities", "capability"},
			map[string]interface{}{"instance-number": InstanceNumber},
			n,
		),
	}
	return ps
}

// ExtendedIpv4Reachability (container): This container describes list of Extended-IPv4-Reachability as defined in TLV 135.
// It is advertised when the 'wide metric' is enabled.
// When there are multiple occurences of Extended-IPv4-Reachability TLVs in a LSP,
// the data in the TLVs are combined and stored in the 'prefixes' list.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "extended-ipv4-reachability"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability"
func (n *IsisRouter_LinkStateDatabase_Lsps_TlvsPath) ExtendedIpv4Reachability() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4ReachabilityPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4ReachabilityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"extended-ipv4-reachability"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ExtendedIpv4Reachability (container): This container describes list of Extended-IPv4-Reachability as defined in TLV 135.
// It is advertised when the 'wide metric' is enabled.
// When there are multiple occurences of Extended-IPv4-Reachability TLVs in a LSP,
// the data in the TLVs are combined and stored in the 'prefixes' list.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "extended-ipv4-reachability"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability"
func (n *IsisRouter_LinkStateDatabase_Lsps_TlvsPathAny) ExtendedIpv4Reachability() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4ReachabilityPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4ReachabilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"extended-ipv4-reachability"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ExtendedIsReachability (container): This container defines list of ISIS extended reachability
// neighbors and attributes.
// This container describes list of Extended-IS-Reachability as defined in TLV 22.
// When there are multiple occurences of Extended-IS-Reachability TLVs
// in a LSP, the data in the TLVs are combined and stored in the 'neighbors' list.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "extended-is-reachability"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability"
func (n *IsisRouter_LinkStateDatabase_Lsps_TlvsPath) ExtendedIsReachability() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachabilityPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachabilityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"extended-is-reachability"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ExtendedIsReachability (container): This container defines list of ISIS extended reachability
// neighbors and attributes.
// This container describes list of Extended-IS-Reachability as defined in TLV 22.
// When there are multiple occurences of Extended-IS-Reachability TLVs
// in a LSP, the data in the TLVs are combined and stored in the 'neighbors' list.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "extended-is-reachability"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability"
func (n *IsisRouter_LinkStateDatabase_Lsps_TlvsPathAny) ExtendedIsReachability() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachabilityPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachabilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"extended-is-reachability"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Hostnames (container): This container describes list of Hostnames as defined in TLV 137.
// When there are multiple occurences of Hostname TLVs
// in a LSP, the data in the TLVs are combined and stored in the 'hostname' list.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "hostnames"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/hostnames"
func (n *IsisRouter_LinkStateDatabase_Lsps_TlvsPath) Hostnames() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_HostnamesPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_HostnamesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"hostnames"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Hostnames (container): This container describes list of Hostnames as defined in TLV 137.
// When there are multiple occurences of Hostname TLVs
// in a LSP, the data in the TLVs are combined and stored in the 'hostname' list.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "hostnames"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/hostnames"
func (n *IsisRouter_LinkStateDatabase_Lsps_TlvsPathAny) Hostnames() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_HostnamesPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_HostnamesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"hostnames"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4ExternalReachability (container): This container describes list of IPv4-Internal-Reachability as defined in TLV 130.
// This is advertised when the origin-type is set 'external' in route range configuration.
// When there are multiple occurences of IPv4-external-Reachability TLVs in a LSP,
// the data in the TLVs are combined and stored in the 'prefixes' list.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "ipv4-external-reachability"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability"
func (n *IsisRouter_LinkStateDatabase_Lsps_TlvsPath) Ipv4ExternalReachability() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachabilityPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachabilityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-external-reachability"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4ExternalReachability (container): This container describes list of IPv4-Internal-Reachability as defined in TLV 130.
// This is advertised when the origin-type is set 'external' in route range configuration.
// When there are multiple occurences of IPv4-external-Reachability TLVs in a LSP,
// the data in the TLVs are combined and stored in the 'prefixes' list.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "ipv4-external-reachability"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability"
func (n *IsisRouter_LinkStateDatabase_Lsps_TlvsPathAny) Ipv4ExternalReachability() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachabilityPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachabilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-external-reachability"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4InternalReachability (container): This container describes list of IPv4-Internal-Reachability as defined in TLV 128.
// This is advertised when the origin-type is set 'internal' in route range configuration.
// When there are multiple occurences of IPv4-Internal-Reachability TLVs in a LSP,
// the data in the TLVs are combined and stored in the 'prefixes' list.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "ipv4-internal-reachability"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability"
func (n *IsisRouter_LinkStateDatabase_Lsps_TlvsPath) Ipv4InternalReachability() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachabilityPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachabilityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-internal-reachability"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4InternalReachability (container): This container describes list of IPv4-Internal-Reachability as defined in TLV 128.
// This is advertised when the origin-type is set 'internal' in route range configuration.
// When there are multiple occurences of IPv4-Internal-Reachability TLVs in a LSP,
// the data in the TLVs are combined and stored in the 'prefixes' list.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "ipv4-internal-reachability"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability"
func (n *IsisRouter_LinkStateDatabase_Lsps_TlvsPathAny) Ipv4InternalReachability() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachabilityPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachabilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-internal-reachability"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6Reachability (container): This container describes list of IPv6 Reachability as defined in TLV 236.
// When there are multiple occurences of IPv6-Reachability TLVs in a LSP,
// the data in the TLVs are combined and stored in the 'prefixes' list.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "ipv6-reachability"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability"
func (n *IsisRouter_LinkStateDatabase_Lsps_TlvsPath) Ipv6Reachability() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6ReachabilityPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6ReachabilityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-reachability"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6Reachability (container): This container describes list of IPv6 Reachability as defined in TLV 236.
// When there are multiple occurences of IPv6-Reachability TLVs in a LSP,
// the data in the TLVs are combined and stored in the 'prefixes' list.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "ipv6-reachability"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability"
func (n *IsisRouter_LinkStateDatabase_Lsps_TlvsPathAny) Ipv6Reachability() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6ReachabilityPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6ReachabilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-reachability"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// IsReachability (container): This container describes list of ISIS neighbors and
// attributes.
// This container describes list of IS-Reachability as defined in TLV 2.
// When there are multiple occurences of IS-Reachability TLVs
// in a LSP, the data in the TLVs are combined and stored in the 'neighbors' list.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "is-reachability"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/is-reachability"
func (n *IsisRouter_LinkStateDatabase_Lsps_TlvsPath) IsReachability() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachabilityPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachabilityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"is-reachability"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// IsReachability (container): This container describes list of ISIS neighbors and
// attributes.
// This container describes list of IS-Reachability as defined in TLV 2.
// When there are multiple occurences of IS-Reachability TLVs
// in a LSP, the data in the TLVs are combined and stored in the 'neighbors' list.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "is-reachability"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/is-reachability"
func (n *IsisRouter_LinkStateDatabase_Lsps_TlvsPathAny) IsReachability() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachabilityPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachabilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"is-reachability"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_TlvsPath) State() ygnmi.SingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs] {
	return ygnmi.NewSingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_TlvsPathAny) State() ygnmi.WildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs] {
	return ygnmi.NewWildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_AlgorithmsPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/algorithms YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_AlgorithmsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_AlgorithmsPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/algorithms YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_AlgorithmsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/algorithms"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/algorithms"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_AlgorithmsPath) State() ygnmi.SingletonQuery[[]uint32] {
	return ygnmi.NewSingletonQuery[[]uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "algorithms"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability).Algorithms
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/algorithms"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/algorithms"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_AlgorithmsPathAny) State() ygnmi.WildcardQuery[[]uint32] {
	return ygnmi.NewWildcardQuery[[]uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "algorithms"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability).Algorithms
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_FlagsPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/flags YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_FlagsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_FlagsPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/flags YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_FlagsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/flags"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/flags"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_FlagsPath) State() ygnmi.SingletonQuery[[]oc.E_Capability_Flags] {
	return ygnmi.NewSingletonQuery[[]oc.E_Capability_Flags](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_Capability_Flags, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/flags"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/flags"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_FlagsPathAny) State() ygnmi.WildcardQuery[[]oc.E_Capability_Flags] {
	return ygnmi.NewWildcardQuery[[]oc.E_Capability_Flags](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_Capability_Flags, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_InstanceNumberPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/instance-number YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_InstanceNumberPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_InstanceNumberPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/instance-number YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_InstanceNumberPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/instance-number"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/instance-number"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_InstanceNumberPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "instance-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability).InstanceNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/instance-number"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/instance-number"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_InstanceNumberPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "instance-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability).InstanceNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "instance-number"
//	Path from root:       ""
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_InstanceNumberPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instance-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability).InstanceNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "instance-number"
//	Path from root:       ""
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_InstanceNumberPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instance-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability).InstanceNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_RouterIdPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/router-id YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_RouterIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_RouterIdPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/router-id YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_RouterIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/router-id"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/router-id"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_RouterIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability).RouterId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/router-id"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/router-id"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_RouterIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability).RouterId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_CapabilityPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_CapabilityPath struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_CapabilityPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_CapabilityPathAny struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_CapabilityPathMap represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_CapabilityPathMap struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_CapabilityPathMapAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_CapabilityPathMapAny struct {
	*ygnmi.NodePath
}

// Algorithms (leaf-list): The Segment Routing algorithm that is
// described by the TLV.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/algorithms"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/algorithms"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_CapabilityPath) Algorithms() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_AlgorithmsPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_AlgorithmsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "algorithms"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Algorithms (leaf-list): The Segment Routing algorithm that is
// described by the TLV.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/algorithms"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/algorithms"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_CapabilityPathAny) Algorithms() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_AlgorithmsPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_AlgorithmsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "algorithms"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Flags (leaf-list): Router capability flags.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/flags"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/flags"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_CapabilityPath) Flags() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_FlagsPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_FlagsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Flags (leaf-list): Router capability flags.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/flags"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/flags"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_CapabilityPathAny) Flags() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_FlagsPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_FlagsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InstanceNumber (leaf): A unique instance number for the instance of the
// router capabilities TLV. The instance number should
// be autogenerated by the producer of the data and may
// be renumbered if the entire LSP contents are
// replaced in subsequent advertisements.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "*/instance-number"
//	Path from root:       "/isis-routers/isis-router/*/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/*/instance-number"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_CapabilityPath) InstanceNumber() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_InstanceNumberPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_InstanceNumberPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "instance-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InstanceNumber (leaf): A unique instance number for the instance of the
// router capabilities TLV. The instance number should
// be autogenerated by the producer of the data and may
// be renumbered if the entire LSP contents are
// replaced in subsequent advertisements.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "*/instance-number"
//	Path from root:       "/isis-routers/isis-router/*/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/*/instance-number"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_CapabilityPathAny) InstanceNumber() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_InstanceNumberPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_InstanceNumberPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "instance-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RouterId (leaf): IPv4 router-id.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/router-id"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/router-id"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_CapabilityPath) RouterId() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_RouterIdPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_RouterIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "router-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RouterId (leaf): IPv4 router-id.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/router-id"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/router-id"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_CapabilityPathAny) RouterId() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_RouterIdPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_RouterIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "router-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SegmentRoutingCapability (container): This container defines SR Capability sub-TLV 2.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/segment-routing-capability"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/segment-routing-capability"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_CapabilityPath) SegmentRoutingCapability() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapabilityPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapabilityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "segment-routing-capability"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SegmentRoutingCapability (container): This container defines SR Capability sub-TLV 2.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/segment-routing-capability"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/segment-routing-capability"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_CapabilityPathAny) SegmentRoutingCapability() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapabilityPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapabilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "segment-routing-capability"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SrLocalBlockRanges (container): This container defines SR Local Block (SRLB) sub-TLV contains the range of labels the
// node has reserved for Local SIDs
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/sr-local-block-ranges"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/sr-local-block-ranges"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_CapabilityPath) SrLocalBlockRanges() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRangesPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRangesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sr-local-block-ranges"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SrLocalBlockRanges (container): This container defines SR Local Block (SRLB) sub-TLV contains the range of labels the
// node has reserved for Local SIDs
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/sr-local-block-ranges"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/sr-local-block-ranges"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_CapabilityPathAny) SrLocalBlockRanges() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRangesPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRangesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sr-local-block-ranges"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_CapabilityPath) State() ygnmi.SingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability] {
	return ygnmi.NewSingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_CapabilityPathAny) State() ygnmi.WildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability] {
	return ygnmi.NewWildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_FlagsPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/segment-routing-capability/state/flags YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_FlagsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_FlagsPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/segment-routing-capability/state/flags YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_FlagsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/flags"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/segment-routing-capability/state/flags"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_FlagsPath) State() ygnmi.SingletonQuery[[]oc.E_SegmentRoutingCapability_Flags] {
	return ygnmi.NewSingletonQuery[[]oc.E_SegmentRoutingCapability_Flags](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_SegmentRoutingCapability_Flags, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/flags"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/segment-routing-capability/state/flags"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_FlagsPathAny) State() ygnmi.WildcardQuery[[]oc.E_SegmentRoutingCapability_Flags] {
	return ygnmi.NewWildcardQuery[[]oc.E_SegmentRoutingCapability_Flags](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_SegmentRoutingCapability_Flags, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapabilityPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/segment-routing-capability YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapabilityPath struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapabilityPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/segment-routing-capability YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapabilityPathAny struct {
	*ygnmi.NodePath
}

// Flags (leaf-list): Segment Routing Capability Flags.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/flags"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/segment-routing-capability/state/flags"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapabilityPath) Flags() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_FlagsPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_FlagsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Flags (leaf-list): Segment Routing Capability Flags.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/flags"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/segment-routing-capability/state/flags"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapabilityPathAny) Flags() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_FlagsPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_FlagsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrgbDescriptorAny (list): Descriptor entry within the SR capabilty
// sub-TLV
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/srgb-descriptor"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/segment-routing-capability/state/srgb-descriptor"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapabilityPath) SrgbDescriptorAny() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptorPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "srgb-descriptor"},
			map[string]interface{}{"range": "*"},
			n,
		),
	}
	return ps
}

// SrgbDescriptorAny (list): Descriptor entry within the SR capabilty
// sub-TLV
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/srgb-descriptor"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/segment-routing-capability/state/srgb-descriptor"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapabilityPathAny) SrgbDescriptorAny() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptorPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "srgb-descriptor"},
			map[string]interface{}{"range": "*"},
			n,
		),
	}
	return ps
}

// SrgbDescriptor (list): Descriptor entry within the SR capabilty
// sub-TLV
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/srgb-descriptor"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/segment-routing-capability/state/srgb-descriptor"
//
//	Range: uint32
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapabilityPath) SrgbDescriptor(Range uint32) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptorPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "srgb-descriptor"},
			map[string]interface{}{"range": Range},
			n,
		),
	}
	return ps
}

// SrgbDescriptor (list): Descriptor entry within the SR capabilty
// sub-TLV
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/srgb-descriptor"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/segment-routing-capability/state/srgb-descriptor"
//
//	Range: uint32
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapabilityPathAny) SrgbDescriptor(Range uint32) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptorPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "srgb-descriptor"},
			map[string]interface{}{"range": Range},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapabilityPath) State() ygnmi.SingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability] {
	return ygnmi.NewSingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapabilityPathAny) State() ygnmi.WildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability] {
	return ygnmi.NewWildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor_RangePath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/segment-routing-capability/state/srgb-descriptor/state/range YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor_RangePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor_RangePathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/segment-routing-capability/state/srgb-descriptor/state/range YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor_RangePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/range"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/segment-routing-capability/state/srgb-descriptor/state/range"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor_RangePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "range"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor).Range
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/range"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/segment-routing-capability/state/srgb-descriptor/state/range"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor_RangePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "range"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor).Range
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "range"
//	Path from root:       ""
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor_RangePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"range"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor).Range
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "range"
//	Path from root:       ""
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor_RangePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"range"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor).Range
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor_StartingLevelPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/segment-routing-capability/state/srgb-descriptor/state/starting-level YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor_StartingLevelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor_StartingLevelPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/segment-routing-capability/state/srgb-descriptor/state/starting-level YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor_StartingLevelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/starting-level"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/segment-routing-capability/state/srgb-descriptor/state/starting-level"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor_StartingLevelPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "starting-level"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor).StartingLevel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/starting-level"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/segment-routing-capability/state/srgb-descriptor/state/starting-level"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor_StartingLevelPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "starting-level"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor).StartingLevel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptorPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/segment-routing-capability/state/srgb-descriptor YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptorPath struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptorPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/segment-routing-capability/state/srgb-descriptor YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptorPathAny struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptorPathMap represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/segment-routing-capability/state/srgb-descriptor YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptorPathMap struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptorPathMapAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/segment-routing-capability/state/srgb-descriptor YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptorPathMapAny struct {
	*ygnmi.NodePath
}

// Range (leaf): Number of SRGB elements. The range
// value MUST be greater than 0.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "*/range"
//	Path from root:       "/isis-routers/isis-router/*/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/*/segment-routing-capability/*/srgb-descriptor/*/range"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptorPath) Range() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor_RangePath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor_RangePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "range"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Range (leaf): Number of SRGB elements. The range
// value MUST be greater than 0.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "*/range"
//	Path from root:       "/isis-routers/isis-router/*/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/*/segment-routing-capability/*/srgb-descriptor/*/range"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptorPathAny) Range() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor_RangePathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor_RangePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "range"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// StartingLevel (leaf): The first value of the SRGB when
// expressed as an MPLS label.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/starting-level"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/segment-routing-capability/state/srgb-descriptor/state/starting-level"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptorPath) StartingLevel() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor_StartingLevelPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor_StartingLevelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "starting-level"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// StartingLevel (leaf): The first value of the SRGB when
// expressed as an MPLS label.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/starting-level"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/segment-routing-capability/state/srgb-descriptor/state/starting-level"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptorPathAny) StartingLevel() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor_StartingLevelPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor_StartingLevelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "starting-level"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptorPath) State() ygnmi.SingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor] {
	return ygnmi.NewSingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptorPathAny) State() ygnmi.WildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor] {
	return ygnmi.NewWildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRangesPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/sr-local-block-ranges YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRangesPath struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRangesPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/sr-local-block-ranges YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRangesPathAny struct {
	*ygnmi.NodePath
}

// SrlbsDescriptorAny (list): Descriptor entry within the SR capabilty
// sub-TLV
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/srlbs-descriptor"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/sr-local-block-ranges/state/srlbs-descriptor"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRangesPath) SrlbsDescriptorAny() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptorPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "srlbs-descriptor"},
			map[string]interface{}{"range": "*"},
			n,
		),
	}
	return ps
}

// SrlbsDescriptorAny (list): Descriptor entry within the SR capabilty
// sub-TLV
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/srlbs-descriptor"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/sr-local-block-ranges/state/srlbs-descriptor"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRangesPathAny) SrlbsDescriptorAny() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptorPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "srlbs-descriptor"},
			map[string]interface{}{"range": "*"},
			n,
		),
	}
	return ps
}

// SrlbsDescriptor (list): Descriptor entry within the SR capabilty
// sub-TLV
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/srlbs-descriptor"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/sr-local-block-ranges/state/srlbs-descriptor"
//
//	Range: uint32
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRangesPath) SrlbsDescriptor(Range uint32) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptorPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "srlbs-descriptor"},
			map[string]interface{}{"range": Range},
			n,
		),
	}
	return ps
}

// SrlbsDescriptor (list): Descriptor entry within the SR capabilty
// sub-TLV
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/srlbs-descriptor"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/sr-local-block-ranges/state/srlbs-descriptor"
//
//	Range: uint32
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRangesPathAny) SrlbsDescriptor(Range uint32) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptorPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "srlbs-descriptor"},
			map[string]interface{}{"range": Range},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRangesPath) State() ygnmi.SingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges] {
	return ygnmi.NewSingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRangesPathAny) State() ygnmi.WildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges] {
	return ygnmi.NewWildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor_RangePath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/sr-local-block-ranges/state/srlbs-descriptor/state/range YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor_RangePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor_RangePathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/sr-local-block-ranges/state/srlbs-descriptor/state/range YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor_RangePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/range"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/sr-local-block-ranges/state/srlbs-descriptor/state/range"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor_RangePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "range"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor).Range
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/range"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/sr-local-block-ranges/state/srlbs-descriptor/state/range"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor_RangePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "range"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor).Range
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "range"
//	Path from root:       ""
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor_RangePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"range"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor).Range
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "range"
//	Path from root:       ""
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor_RangePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"range"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor).Range
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor_StartingLevelPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/sr-local-block-ranges/state/srlbs-descriptor/state/starting-level YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor_StartingLevelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor_StartingLevelPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/sr-local-block-ranges/state/srlbs-descriptor/state/starting-level YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor_StartingLevelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/starting-level"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/sr-local-block-ranges/state/srlbs-descriptor/state/starting-level"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor_StartingLevelPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "starting-level"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor).StartingLevel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/starting-level"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/sr-local-block-ranges/state/srlbs-descriptor/state/starting-level"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor_StartingLevelPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "starting-level"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor).StartingLevel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptorPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/sr-local-block-ranges/state/srlbs-descriptor YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptorPath struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptorPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/sr-local-block-ranges/state/srlbs-descriptor YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptorPathAny struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptorPathMap represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/sr-local-block-ranges/state/srlbs-descriptor YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptorPathMap struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptorPathMapAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/sr-local-block-ranges/state/srlbs-descriptor YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptorPathMapAny struct {
	*ygnmi.NodePath
}

// Range (leaf): Number of SRLB elements. The range
// value MUST be greater than 0.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "*/range"
//	Path from root:       "/isis-routers/isis-router/*/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/*/sr-local-block-ranges/*/srlbs-descriptor/*/range"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptorPath) Range() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor_RangePath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor_RangePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "range"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Range (leaf): Number of SRLB elements. The range
// value MUST be greater than 0.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "*/range"
//	Path from root:       "/isis-routers/isis-router/*/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/*/sr-local-block-ranges/*/srlbs-descriptor/*/range"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptorPathAny) Range() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor_RangePathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor_RangePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "range"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// StartingLevel (leaf): The first value of the SRLB when
// expressed as an MPLS label.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/starting-level"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/sr-local-block-ranges/state/srlbs-descriptor/state/starting-level"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptorPath) StartingLevel() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor_StartingLevelPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor_StartingLevelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "starting-level"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// StartingLevel (leaf): The first value of the SRLB when
// expressed as an MPLS label.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/starting-level"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/sr-local-block-ranges/state/srlbs-descriptor/state/starting-level"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptorPathAny) StartingLevel() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor_StartingLevelPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor_StartingLevelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "starting-level"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptorPath) State() ygnmi.SingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor] {
	return ygnmi.NewSingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptorPathAny) State() ygnmi.WildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor] {
	return ygnmi.NewWildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4ReachabilityPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4ReachabilityPath struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4ReachabilityPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4ReachabilityPathAny struct {
	*ygnmi.NodePath
}

// PrefixAny (list): This list describes IPv4 extended prefixes and
// attributes.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4ReachabilityPath) PrefixAny() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_PrefixPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
	return ps
}

// PrefixAny (list): This list describes IPv4 extended prefixes and
// attributes.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4ReachabilityPathAny) PrefixAny() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_PrefixPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
	return ps
}

// Prefix (list): This list describes IPv4 extended prefixes and
// attributes.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix"
//
//	Prefix: string
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4ReachabilityPath) Prefix(Prefix string) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_PrefixPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_PrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
	return ps
}

// Prefix (list): This list describes IPv4 extended prefixes and
// attributes.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix"
//
//	Prefix: string
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4ReachabilityPathAny) Prefix(Prefix string) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_PrefixPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4ReachabilityPath) State() ygnmi.SingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability] {
	return ygnmi.NewSingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4ReachabilityPathAny) State() ygnmi.WildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability] {
	return ygnmi.NewWildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_MetricPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/metric YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_MetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_MetricPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/metric YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_MetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/metric"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/metric"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_MetricPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix).Metric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/metric"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/metric"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_MetricPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix).Metric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/prefix"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/prefix"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "prefix"
//	Path from root:       ""
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "prefix"
//	Path from root:       ""
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixLengthPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-length YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixLengthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixLengthPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-length YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixLengthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/prefix-length"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-length"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixLengthPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix).PrefixLength
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/prefix-length"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-length"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixLengthPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix).PrefixLength
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_RedistributionTypePath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/redistribution-type YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_RedistributionTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_RedistributionTypePathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/redistribution-type YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_RedistributionTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/redistribution-type"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/redistribution-type"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_RedistributionTypePath) State() ygnmi.SingletonQuery[oc.E_ExtendedIpv4Reachability_Prefix_RedistributionType] {
	return ygnmi.NewSingletonQuery[oc.E_ExtendedIpv4Reachability_Prefix_RedistributionType](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "redistribution-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_ExtendedIpv4Reachability_Prefix_RedistributionType, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix).RedistributionType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/redistribution-type"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/redistribution-type"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_RedistributionTypePathAny) State() ygnmi.WildcardQuery[oc.E_ExtendedIpv4Reachability_Prefix_RedistributionType] {
	return ygnmi.NewWildcardQuery[oc.E_ExtendedIpv4Reachability_Prefix_RedistributionType](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "redistribution-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_ExtendedIpv4Reachability_Prefix_RedistributionType, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix).RedistributionType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_PrefixPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_PrefixPath struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_PrefixPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_PrefixPathAny struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_PrefixPathMap represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_PrefixPathMap struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_PrefixPathMapAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_PrefixPathMapAny struct {
	*ygnmi.NodePath
}

// Metric (leaf): ISIS wide metric.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/metric"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/metric"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_PrefixPath) Metric() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_MetricPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_MetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): ISIS wide metric.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/metric"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/metric"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_PrefixPathAny) Metric() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_MetricPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_MetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Prefix (leaf): IPv4 prefix contained within extended reachability TLVs.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "*/prefix"
//	Path from root:       "/isis-routers/isis-router/*/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/*/prefix"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_PrefixPath) Prefix() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Prefix (leaf): IPv4 prefix contained within extended reachability TLVs.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "*/prefix"
//	Path from root:       "/isis-routers/isis-router/*/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/*/prefix"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_PrefixPathAny) Prefix() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixAttributes (container): This container defines sub-TLV 4.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/prefix-attributes"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-attributes"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_PrefixPath) PrefixAttributes() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributesPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-attributes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PrefixAttributes (container): This container defines sub-TLV 4.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/prefix-attributes"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-attributes"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_PrefixPathAny) PrefixAttributes() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributesPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-attributes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PrefixLength (leaf): The length of the IPv4 prefix.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/prefix-length"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-length"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_PrefixPath) PrefixLength() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixLengthPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixLengthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLength (leaf): The length of the IPv4 prefix.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/prefix-length"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-length"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_PrefixPathAny) PrefixLength() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixLengthPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixLengthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixSidAny (list): Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment
// attached to an IGP prefix. An IGP-Prefix Segment is global
// (unless explicitly advertised otherwise) within the SR/IGP
// domain.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/prefix-sid"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-sid"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_PrefixPath) PrefixSidAny() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSidPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-sid"},
			map[string]interface{}{"sid-instance": "*"},
			n,
		),
	}
	return ps
}

// PrefixSidAny (list): Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment
// attached to an IGP prefix. An IGP-Prefix Segment is global
// (unless explicitly advertised otherwise) within the SR/IGP
// domain.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/prefix-sid"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-sid"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_PrefixPathAny) PrefixSidAny() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSidPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-sid"},
			map[string]interface{}{"sid-instance": "*"},
			n,
		),
	}
	return ps
}

// PrefixSid (list): Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment
// attached to an IGP prefix. An IGP-Prefix Segment is global
// (unless explicitly advertised otherwise) within the SR/IGP
// domain.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/prefix-sid"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-sid"
//
//	SidInstance: uint32
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_PrefixPath) PrefixSid(SidInstance uint32) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSidPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSidPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-sid"},
			map[string]interface{}{"sid-instance": SidInstance},
			n,
		),
	}
	return ps
}

// PrefixSid (list): Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment
// attached to an IGP prefix. An IGP-Prefix Segment is global
// (unless explicitly advertised otherwise) within the SR/IGP
// domain.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/prefix-sid"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-sid"
//
//	SidInstance: uint32
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_PrefixPathAny) PrefixSid(SidInstance uint32) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSidPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-sid"},
			map[string]interface{}{"sid-instance": SidInstance},
			n,
		),
	}
	return ps
}

// RedistributionType (leaf): The up/down bit. Set if a prefix is advertised from a
// higher level to a lower level
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/redistribution-type"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/redistribution-type"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_PrefixPath) RedistributionType() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_RedistributionTypePath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_RedistributionTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "redistribution-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RedistributionType (leaf): The up/down bit. Set if a prefix is advertised from a
// higher level to a lower level
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/redistribution-type"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/redistribution-type"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_PrefixPathAny) RedistributionType() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_RedistributionTypePathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_RedistributionTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "redistribution-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_PrefixPath) State() ygnmi.SingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix] {
	return ygnmi.NewSingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_PrefixPathAny) State() ygnmi.WildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix] {
	return ygnmi.NewWildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes_FlagsPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-attributes/flags YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes_FlagsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes_FlagsPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-attributes/flags YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes_FlagsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "flags"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-attributes/flags"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes_FlagsPath) State() ygnmi.SingletonQuery[[]oc.E_State_Flags] {
	return ygnmi.NewSingletonQuery[[]oc.E_State_Flags](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_State_Flags, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "flags"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-attributes/flags"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes_FlagsPathAny) State() ygnmi.WildcardQuery[[]oc.E_State_Flags] {
	return ygnmi.NewWildcardQuery[[]oc.E_State_Flags](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_State_Flags, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributesPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-attributes YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributesPath struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributesPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-attributes YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributesPathAny struct {
	*ygnmi.NodePath
}

// Flags (leaf-list): Additional prefix reachability flags.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "flags"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-attributes/flags"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributesPath) Flags() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes_FlagsPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes_FlagsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Flags (leaf-list): Additional prefix reachability flags.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "flags"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-attributes/flags"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributesPathAny) Flags() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes_FlagsPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes_FlagsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributesPath) State() ygnmi.SingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes] {
	return ygnmi.NewSingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributesPathAny) State() ygnmi.WildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes] {
	return ygnmi.NewWildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid_AlgorithmPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-sid/state/algorithm YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid_AlgorithmPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid_AlgorithmPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-sid/state/algorithm YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid_AlgorithmPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/algorithm"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-sid/state/algorithm"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid_AlgorithmPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "algorithm"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid).Algorithm
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/algorithm"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-sid/state/algorithm"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid_AlgorithmPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "algorithm"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid).Algorithm
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid_FlagsPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-sid/state/flags YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid_FlagsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid_FlagsPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-sid/state/flags YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid_FlagsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/flags"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-sid/state/flags"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid_FlagsPath) State() ygnmi.SingletonQuery[[]oc.E_PrefixSid_Flags] {
	return ygnmi.NewSingletonQuery[[]oc.E_PrefixSid_Flags](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_PrefixSid_Flags, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/flags"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-sid/state/flags"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid_FlagsPathAny) State() ygnmi.WildcardQuery[[]oc.E_PrefixSid_Flags] {
	return ygnmi.NewWildcardQuery[[]oc.E_PrefixSid_Flags](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_PrefixSid_Flags, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid_SidInstancePath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-sid/state/sid-instance YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid_SidInstancePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid_SidInstancePathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-sid/state/sid-instance YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid_SidInstancePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/sid-instance"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-sid/state/sid-instance"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid_SidInstancePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sid-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid).SidInstance
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/sid-instance"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-sid/state/sid-instance"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid_SidInstancePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sid-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid).SidInstance
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "sid-instance"
//	Path from root:       ""
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid_SidInstancePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sid-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid).SidInstance
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "sid-instance"
//	Path from root:       ""
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid_SidInstancePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sid-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid).SidInstance
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid_SidsPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-sid/state/sids YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid_SidsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid_SidsPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-sid/state/sids YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid_SidsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/sids"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-sid/state/sids"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid_SidsPath) State() ygnmi.SingletonQuery[[]uint32] {
	return ygnmi.NewSingletonQuery[[]uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sids"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid).Sids
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/sids"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-sid/state/sids"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid_SidsPathAny) State() ygnmi.WildcardQuery[[]uint32] {
	return ygnmi.NewWildcardQuery[[]uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sids"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid).Sids
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSidPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-sid YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSidPath struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSidPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-sid YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSidPathAny struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSidPathMap represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-sid YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSidPathMap struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSidPathMapAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-sid YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSidPathMapAny struct {
	*ygnmi.NodePath
}

// Algorithm (leaf): Prefix-SID algorithm to be used for path computation.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/algorithm"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-sid/state/algorithm"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSidPath) Algorithm() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid_AlgorithmPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid_AlgorithmPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "algorithm"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Algorithm (leaf): Prefix-SID algorithm to be used for path computation.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/algorithm"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-sid/state/algorithm"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSidPathAny) Algorithm() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid_AlgorithmPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid_AlgorithmPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "algorithm"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Flags (leaf-list): Flags associated with Prefix Segment-ID.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/flags"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-sid/state/flags"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSidPath) Flags() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid_FlagsPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid_FlagsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Flags (leaf-list): Flags associated with Prefix Segment-ID.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/flags"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-sid/state/flags"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSidPathAny) Flags() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid_FlagsPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid_FlagsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SidInstance (leaf): A unique instance number for the instance for the Prefix-SID that may contain array of SIDs.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "*/sid-instance"
//	Path from root:       "/isis-routers/isis-router/*/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/*/prefix-sid/*/sid-instance"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSidPath) SidInstance() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid_SidInstancePath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid_SidInstancePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sid-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SidInstance (leaf): A unique instance number for the instance for the Prefix-SID that may contain array of SIDs.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "*/sid-instance"
//	Path from root:       "/isis-routers/isis-router/*/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/*/prefix-sid/*/sid-instance"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSidPathAny) SidInstance() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid_SidInstancePathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid_SidInstancePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sid-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Sids (leaf-list): IGP one more SID values.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/sids"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-sid/state/sids"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSidPath) Sids() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid_SidsPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid_SidsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sids"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Sids (leaf-list): IGP one more SID values.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/sids"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-sid/state/sids"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSidPathAny) Sids() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid_SidsPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid_SidsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sids"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSidPath) State() ygnmi.SingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid] {
	return ygnmi.NewSingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSidPathAny) State() ygnmi.WildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid] {
	return ygnmi.NewWildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachabilityPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachabilityPath struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachabilityPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachabilityPathAny struct {
	*ygnmi.NodePath
}

// NeighborAny (list): IS reachability neighbor attributes.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachabilityPath) NeighborAny() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_NeighborPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"system-id": "*"},
			n,
		),
	}
	return ps
}

// NeighborAny (list): IS reachability neighbor attributes.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachabilityPathAny) NeighborAny() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_NeighborPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"system-id": "*"},
			n,
		),
	}
	return ps
}

// Neighbor (list): IS reachability neighbor attributes.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor"
//
//	SystemId: string
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachabilityPath) Neighbor(SystemId string) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_NeighborPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_NeighborPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"system-id": SystemId},
			n,
		),
	}
	return ps
}

// Neighbor (list): IS reachability neighbor attributes.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor"
//
//	SystemId: string
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachabilityPathAny) Neighbor(SystemId string) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_NeighborPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"system-id": SystemId},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachabilityPath) State() ygnmi.SingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability] {
	return ygnmi.NewSingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachabilityPathAny) State() ygnmi.WildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability] {
	return ygnmi.NewWildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_SystemIdPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/state/system-id YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_SystemIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_SystemIdPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/state/system-id YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_SystemIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/system-id"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/state/system-id"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_SystemIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "system-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor).SystemId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/system-id"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/state/system-id"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_SystemIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "system-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor).SystemId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "system-id"
//	Path from root:       ""
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_SystemIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"system-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor).SystemId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "system-id"
//	Path from root:       ""
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_SystemIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"system-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor).SystemId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_NeighborPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_NeighborPath struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_NeighborPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_NeighborPathAny struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_NeighborPathMap represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_NeighborPathMap struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_NeighborPathMapAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_NeighborPathMapAny struct {
	*ygnmi.NodePath
}

// AdjacencySidAny (list): Adjacency Segment-IDs List. An IGP-Adjacency Segment is
// an IGP segment attached to a unidirectional adjacency or
// a set of unidirectional adjacencies. By default, an IGP-
// Adjacency Segment is local to the node which advertises
// it.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/adjacency-sid"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/state/adjacency-sid"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_NeighborPath) AdjacencySidAny() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySidPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "adjacency-sid"},
			map[string]interface{}{"sid-instance": "*"},
			n,
		),
	}
	return ps
}

// AdjacencySidAny (list): Adjacency Segment-IDs List. An IGP-Adjacency Segment is
// an IGP segment attached to a unidirectional adjacency or
// a set of unidirectional adjacencies. By default, an IGP-
// Adjacency Segment is local to the node which advertises
// it.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/adjacency-sid"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/state/adjacency-sid"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_NeighborPathAny) AdjacencySidAny() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySidPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "adjacency-sid"},
			map[string]interface{}{"sid-instance": "*"},
			n,
		),
	}
	return ps
}

// AdjacencySid (list): Adjacency Segment-IDs List. An IGP-Adjacency Segment is
// an IGP segment attached to a unidirectional adjacency or
// a set of unidirectional adjacencies. By default, an IGP-
// Adjacency Segment is local to the node which advertises
// it.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/adjacency-sid"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/state/adjacency-sid"
//
//	SidInstance: uint32
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_NeighborPath) AdjacencySid(SidInstance uint32) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySidPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySidPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "adjacency-sid"},
			map[string]interface{}{"sid-instance": SidInstance},
			n,
		),
	}
	return ps
}

// AdjacencySid (list): Adjacency Segment-IDs List. An IGP-Adjacency Segment is
// an IGP segment attached to a unidirectional adjacency or
// a set of unidirectional adjacencies. By default, an IGP-
// Adjacency Segment is local to the node which advertises
// it.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/adjacency-sid"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/state/adjacency-sid"
//
//	SidInstance: uint32
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_NeighborPathAny) AdjacencySid(SidInstance uint32) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySidPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "adjacency-sid"},
			map[string]interface{}{"sid-instance": SidInstance},
			n,
		),
	}
	return ps
}

// SystemId (leaf): System-ID of IS neighbor, e.g. '640100010000'.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "*/system-id"
//	Path from root:       "/isis-routers/isis-router/*/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/*/system-id"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_NeighborPath) SystemId() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_SystemIdPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_SystemIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "system-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SystemId (leaf): System-ID of IS neighbor, e.g. '640100010000'.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "*/system-id"
//	Path from root:       "/isis-routers/isis-router/*/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/*/system-id"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_NeighborPathAny) SystemId() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_SystemIdPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_SystemIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "system-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_NeighborPath) State() ygnmi.SingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor] {
	return ygnmi.NewSingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_NeighborPathAny) State() ygnmi.WildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor] {
	return ygnmi.NewWildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_AdjacencyTypePath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/state/adjacency-sid/state/adjacency-type YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_AdjacencyTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_AdjacencyTypePathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/state/adjacency-sid/state/adjacency-type YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_AdjacencyTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/adjacency-type"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/state/adjacency-sid/state/adjacency-type"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_AdjacencyTypePath) State() ygnmi.SingletonQuery[oc.E_AdjacencySid_AdjacencyType] {
	return ygnmi.NewSingletonQuery[oc.E_AdjacencySid_AdjacencyType](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "adjacency-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AdjacencySid_AdjacencyType, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid).AdjacencyType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/adjacency-type"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/state/adjacency-sid/state/adjacency-type"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_AdjacencyTypePathAny) State() ygnmi.WildcardQuery[oc.E_AdjacencySid_AdjacencyType] {
	return ygnmi.NewWildcardQuery[oc.E_AdjacencySid_AdjacencyType](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "adjacency-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AdjacencySid_AdjacencyType, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid).AdjacencyType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_FlagsPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/state/adjacency-sid/state/flags YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_FlagsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_FlagsPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/state/adjacency-sid/state/flags YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_FlagsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/flags"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/state/adjacency-sid/state/flags"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_FlagsPath) State() ygnmi.SingletonQuery[[]oc.E_AdjacencySid_Flags] {
	return ygnmi.NewSingletonQuery[[]oc.E_AdjacencySid_Flags](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_AdjacencySid_Flags, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/flags"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/state/adjacency-sid/state/flags"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_FlagsPathAny) State() ygnmi.WildcardQuery[[]oc.E_AdjacencySid_Flags] {
	return ygnmi.NewWildcardQuery[[]oc.E_AdjacencySid_Flags](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_AdjacencySid_Flags, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_SidInstancePath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/state/adjacency-sid/state/sid-instance YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_SidInstancePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_SidInstancePathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/state/adjacency-sid/state/sid-instance YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_SidInstancePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/sid-instance"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/state/adjacency-sid/state/sid-instance"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_SidInstancePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sid-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid).SidInstance
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/sid-instance"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/state/adjacency-sid/state/sid-instance"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_SidInstancePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sid-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid).SidInstance
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "sid-instance"
//	Path from root:       ""
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_SidInstancePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sid-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid).SidInstance
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "sid-instance"
//	Path from root:       ""
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_SidInstancePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sid-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid).SidInstance
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_SidsPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/state/adjacency-sid/state/sids YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_SidsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_SidsPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/state/adjacency-sid/state/sids YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_SidsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/sids"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/state/adjacency-sid/state/sids"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_SidsPath) State() ygnmi.SingletonQuery[[]uint32] {
	return ygnmi.NewSingletonQuery[[]uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sids"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid).Sids
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/sids"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/state/adjacency-sid/state/sids"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_SidsPathAny) State() ygnmi.WildcardQuery[[]uint32] {
	return ygnmi.NewWildcardQuery[[]uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sids"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid).Sids
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_WeightPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/state/adjacency-sid/state/weight YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_WeightPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_WeightPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/state/adjacency-sid/state/weight YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_WeightPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/weight"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/state/adjacency-sid/state/weight"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_WeightPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "weight"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid).Weight
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/weight"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/state/adjacency-sid/state/weight"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_WeightPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "weight"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid).Weight
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySidPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/state/adjacency-sid YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySidPath struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySidPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/state/adjacency-sid YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySidPathAny struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySidPathMap represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/state/adjacency-sid YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySidPathMap struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySidPathMapAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/state/adjacency-sid YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySidPathMapAny struct {
	*ygnmi.NodePath
}

// AdjacencyType (leaf): Adjacency-SID type: Adjacency SIDs(31) or LAN adjacency SID (32)
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/adjacency-type"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/state/adjacency-sid/state/adjacency-type"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySidPath) AdjacencyType() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_AdjacencyTypePath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_AdjacencyTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "adjacency-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdjacencyType (leaf): Adjacency-SID type: Adjacency SIDs(31) or LAN adjacency SID (32)
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/adjacency-type"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/state/adjacency-sid/state/adjacency-type"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySidPathAny) AdjacencyType() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_AdjacencyTypePathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_AdjacencyTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "adjacency-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Flags (leaf-list): Flags associated with Adj-Segment-ID.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/flags"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/state/adjacency-sid/state/flags"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySidPath) Flags() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_FlagsPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_FlagsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Flags (leaf-list): Flags associated with Adj-Segment-ID.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/flags"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/state/adjacency-sid/state/flags"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySidPathAny) Flags() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_FlagsPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_FlagsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SidInstance (leaf): A unique instance number for the instance for the Prefix-SID that may contain array of SIDs.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "*/sid-instance"
//	Path from root:       "/isis-routers/isis-router/*/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/*/adjacency-sid/*/sid-instance"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySidPath) SidInstance() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_SidInstancePath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_SidInstancePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sid-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SidInstance (leaf): A unique instance number for the instance for the Prefix-SID that may contain array of SIDs.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "*/sid-instance"
//	Path from root:       "/isis-routers/isis-router/*/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/*/adjacency-sid/*/sid-instance"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySidPathAny) SidInstance() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_SidInstancePathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_SidInstancePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sid-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Sids (leaf-list): Reference to the values of one or more Adjacency-SIDs.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/sids"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/state/adjacency-sid/state/sids"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySidPath) Sids() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_SidsPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_SidsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sids"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Sids (leaf-list): Reference to the values of one or more Adjacency-SIDs.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/sids"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/state/adjacency-sid/state/sids"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySidPathAny) Sids() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_SidsPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_SidsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sids"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Weight (leaf): Value that represents the weight of the Adj-SID for
// the purpose of load balancing.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/weight"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/state/adjacency-sid/state/weight"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySidPath) Weight() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_WeightPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_WeightPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "weight"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Weight (leaf): Value that represents the weight of the Adj-SID for
// the purpose of load balancing.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/weight"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/state/adjacency-sid/state/weight"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySidPathAny) Weight() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_WeightPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid_WeightPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "weight"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySidPath) State() ygnmi.SingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid] {
	return ygnmi.NewSingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySidPathAny) State() ygnmi.WildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid] {
	return ygnmi.NewWildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames_HostnamePath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/hostnames/state/hostname YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames_HostnamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames_HostnamePathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/hostnames/state/hostname YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames_HostnamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/hostname"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/hostnames/state/hostname"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames_HostnamePath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hostname"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames).Hostname
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/hostname"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/hostnames/state/hostname"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames_HostnamePathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hostname"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames).Hostname
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_HostnamesPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/hostnames YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_HostnamesPath struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_HostnamesPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/hostnames YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_HostnamesPathAny struct {
	*ygnmi.NodePath
}

// Hostname (leaf-list): Host name of the originating node.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/hostname"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/hostnames/state/hostname"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_HostnamesPath) Hostname() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames_HostnamePath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames_HostnamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "hostname"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Hostname (leaf-list): Host name of the originating node.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/hostname"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/hostnames/state/hostname"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_HostnamesPathAny) Hostname() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames_HostnamePathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames_HostnamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "hostname"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_HostnamesPath) State() ygnmi.SingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames] {
	return ygnmi.NewSingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_HostnamesPathAny) State() ygnmi.WildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames] {
	return ygnmi.NewWildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachabilityPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachabilityPath struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachabilityPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachabilityPathAny struct {
	*ygnmi.NodePath
}

// PrefixAny (list): IPv4 external prefixes and reachability attributes.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability/prefixes/prefix"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachabilityPath) PrefixAny() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_PrefixPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
	return ps
}

// PrefixAny (list): IPv4 external prefixes and reachability attributes.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability/prefixes/prefix"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachabilityPathAny) PrefixAny() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_PrefixPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
	return ps
}

// Prefix (list): IPv4 external prefixes and reachability attributes.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability/prefixes/prefix"
//
//	Prefix: string
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachabilityPath) Prefix(Prefix string) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_PrefixPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_PrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
	return ps
}

// Prefix (list): IPv4 external prefixes and reachability attributes.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability/prefixes/prefix"
//
//	Prefix: string
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachabilityPathAny) Prefix(Prefix string) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_PrefixPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachabilityPath) State() ygnmi.SingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability] {
	return ygnmi.NewSingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachabilityPathAny) State() ygnmi.WildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability] {
	return ygnmi.NewWildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_DefaultMetricPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability/prefixes/prefix/state/default-metric YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_DefaultMetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_DefaultMetricPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability/prefixes/prefix/state/default-metric YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_DefaultMetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/default-metric"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability/prefixes/prefix/state/default-metric"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_DefaultMetricPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "default-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix).DefaultMetric
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/default-metric"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability/prefixes/prefix/state/default-metric"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_DefaultMetricPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "default-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix).DefaultMetric
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_OriginTypePath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability/prefixes/prefix/state/origin-type YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_OriginTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_OriginTypePathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability/prefixes/prefix/state/origin-type YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_OriginTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/origin-type"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability/prefixes/prefix/state/origin-type"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_OriginTypePath) State() ygnmi.SingletonQuery[oc.E_Ipv4ExternalReachability_Prefix_OriginType] {
	return ygnmi.NewSingletonQuery[oc.E_Ipv4ExternalReachability_Prefix_OriginType](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "origin-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ipv4ExternalReachability_Prefix_OriginType, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix).OriginType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/origin-type"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability/prefixes/prefix/state/origin-type"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_OriginTypePathAny) State() ygnmi.WildcardQuery[oc.E_Ipv4ExternalReachability_Prefix_OriginType] {
	return ygnmi.NewWildcardQuery[oc.E_Ipv4ExternalReachability_Prefix_OriginType](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "origin-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ipv4ExternalReachability_Prefix_OriginType, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix).OriginType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_PrefixPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability/prefixes/prefix/state/prefix YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_PrefixPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_PrefixPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability/prefixes/prefix/state/prefix YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_PrefixPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/prefix"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability/prefixes/prefix/state/prefix"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_PrefixPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/prefix"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability/prefixes/prefix/state/prefix"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_PrefixPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "prefix"
//	Path from root:       ""
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_PrefixPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "prefix"
//	Path from root:       ""
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_PrefixPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_PrefixLengthPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability/prefixes/prefix/state/prefix-length YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_PrefixLengthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_PrefixLengthPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability/prefixes/prefix/state/prefix-length YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_PrefixLengthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/prefix-length"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability/prefixes/prefix/state/prefix-length"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_PrefixLengthPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix).PrefixLength
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/prefix-length"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability/prefixes/prefix/state/prefix-length"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_PrefixLengthPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix).PrefixLength
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_RedistributionTypePath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability/prefixes/prefix/state/redistribution-type YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_RedistributionTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_RedistributionTypePathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability/prefixes/prefix/state/redistribution-type YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_RedistributionTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/redistribution-type"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability/prefixes/prefix/state/redistribution-type"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_RedistributionTypePath) State() ygnmi.SingletonQuery[oc.E_Ipv4ExternalReachability_Prefix_RedistributionType] {
	return ygnmi.NewSingletonQuery[oc.E_Ipv4ExternalReachability_Prefix_RedistributionType](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "redistribution-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ipv4ExternalReachability_Prefix_RedistributionType, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix).RedistributionType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/redistribution-type"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability/prefixes/prefix/state/redistribution-type"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_RedistributionTypePathAny) State() ygnmi.WildcardQuery[oc.E_Ipv4ExternalReachability_Prefix_RedistributionType] {
	return ygnmi.NewWildcardQuery[oc.E_Ipv4ExternalReachability_Prefix_RedistributionType](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "redistribution-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ipv4ExternalReachability_Prefix_RedistributionType, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix).RedistributionType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_PrefixPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability/prefixes/prefix YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_PrefixPath struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_PrefixPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability/prefixes/prefix YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_PrefixPathAny struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_PrefixPathMap represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability/prefixes/prefix YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_PrefixPathMap struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_PrefixPathMapAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability/prefixes/prefix YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_PrefixPathMapAny struct {
	*ygnmi.NodePath
}

// DefaultMetric (leaf): ISIS default metric value.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/default-metric"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability/prefixes/prefix/state/default-metric"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_PrefixPath) DefaultMetric() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_DefaultMetricPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_DefaultMetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "default-metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DefaultMetric (leaf): ISIS default metric value.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/default-metric"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability/prefixes/prefix/state/default-metric"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_PrefixPathAny) DefaultMetric() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_DefaultMetricPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_DefaultMetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "default-metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OriginType (leaf): The origin of the advertised route-internal or external to the ISIS area.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/origin-type"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability/prefixes/prefix/state/origin-type"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_PrefixPath) OriginType() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_OriginTypePath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_OriginTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "origin-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OriginType (leaf): The origin of the advertised route-internal or external to the ISIS area.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/origin-type"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability/prefixes/prefix/state/origin-type"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_PrefixPathAny) OriginType() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_OriginTypePathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_OriginTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "origin-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Prefix (leaf): IPv4 prefix contained within reachability TLVs.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "*/prefix"
//	Path from root:       "/isis-routers/isis-router/*/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability/prefixes/prefix/*/prefix"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_PrefixPath) Prefix() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_PrefixPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_PrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Prefix (leaf): IPv4 prefix contained within reachability TLVs.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "*/prefix"
//	Path from root:       "/isis-routers/isis-router/*/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability/prefixes/prefix/*/prefix"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_PrefixPathAny) Prefix() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_PrefixPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLength (leaf): The length of the IPv4 prefix.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/prefix-length"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability/prefixes/prefix/state/prefix-length"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_PrefixPath) PrefixLength() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_PrefixLengthPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_PrefixLengthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLength (leaf): The length of the IPv4 prefix.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/prefix-length"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability/prefixes/prefix/state/prefix-length"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_PrefixPathAny) PrefixLength() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_PrefixLengthPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_PrefixLengthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RedistributionType (leaf): The up/down bit. Set if a prefix is advertised from a
// higher level to a lower level
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/redistribution-type"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability/prefixes/prefix/state/redistribution-type"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_PrefixPath) RedistributionType() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_RedistributionTypePath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_RedistributionTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "redistribution-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RedistributionType (leaf): The up/down bit. Set if a prefix is advertised from a
// higher level to a lower level
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/redistribution-type"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability/prefixes/prefix/state/redistribution-type"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_PrefixPathAny) RedistributionType() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_RedistributionTypePathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix_RedistributionTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "redistribution-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_PrefixPath) State() ygnmi.SingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix] {
	return ygnmi.NewSingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_PrefixPathAny) State() ygnmi.WildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix] {
	return ygnmi.NewWildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachabilityPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachabilityPath struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachabilityPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachabilityPathAny struct {
	*ygnmi.NodePath
}

// PrefixAny (list): IPv4 prefixes and internal reachability attributes.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability/prefixes/prefix"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachabilityPath) PrefixAny() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_PrefixPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
	return ps
}

// PrefixAny (list): IPv4 prefixes and internal reachability attributes.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability/prefixes/prefix"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachabilityPathAny) PrefixAny() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_PrefixPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
	return ps
}

// Prefix (list): IPv4 prefixes and internal reachability attributes.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability/prefixes/prefix"
//
//	Prefix: string
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachabilityPath) Prefix(Prefix string) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_PrefixPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_PrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
	return ps
}

// Prefix (list): IPv4 prefixes and internal reachability attributes.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability/prefixes/prefix"
//
//	Prefix: string
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachabilityPathAny) Prefix(Prefix string) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_PrefixPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachabilityPath) State() ygnmi.SingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability] {
	return ygnmi.NewSingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachabilityPathAny) State() ygnmi.WildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability] {
	return ygnmi.NewWildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_DefaultMetricPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability/prefixes/prefix/state/default-metric YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_DefaultMetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_DefaultMetricPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability/prefixes/prefix/state/default-metric YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_DefaultMetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/default-metric"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability/prefixes/prefix/state/default-metric"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_DefaultMetricPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "default-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix).DefaultMetric
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/default-metric"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability/prefixes/prefix/state/default-metric"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_DefaultMetricPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "default-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix).DefaultMetric
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_OriginTypePath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability/prefixes/prefix/state/origin-type YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_OriginTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_OriginTypePathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability/prefixes/prefix/state/origin-type YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_OriginTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/origin-type"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability/prefixes/prefix/state/origin-type"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_OriginTypePath) State() ygnmi.SingletonQuery[oc.E_Ipv4ExternalReachability_Prefix_OriginType] {
	return ygnmi.NewSingletonQuery[oc.E_Ipv4ExternalReachability_Prefix_OriginType](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "origin-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ipv4ExternalReachability_Prefix_OriginType, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix).OriginType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/origin-type"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability/prefixes/prefix/state/origin-type"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_OriginTypePathAny) State() ygnmi.WildcardQuery[oc.E_Ipv4ExternalReachability_Prefix_OriginType] {
	return ygnmi.NewWildcardQuery[oc.E_Ipv4ExternalReachability_Prefix_OriginType](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "origin-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ipv4ExternalReachability_Prefix_OriginType, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix).OriginType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_PrefixPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability/prefixes/prefix/state/prefix YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_PrefixPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_PrefixPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability/prefixes/prefix/state/prefix YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_PrefixPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/prefix"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability/prefixes/prefix/state/prefix"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_PrefixPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/prefix"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability/prefixes/prefix/state/prefix"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_PrefixPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "prefix"
//	Path from root:       ""
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_PrefixPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "prefix"
//	Path from root:       ""
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_PrefixPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_PrefixLengthPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability/prefixes/prefix/state/prefix-length YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_PrefixLengthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_PrefixLengthPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability/prefixes/prefix/state/prefix-length YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_PrefixLengthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/prefix-length"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability/prefixes/prefix/state/prefix-length"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_PrefixLengthPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix).PrefixLength
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/prefix-length"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability/prefixes/prefix/state/prefix-length"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_PrefixLengthPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix).PrefixLength
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_RedistributionTypePath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability/prefixes/prefix/state/redistribution-type YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_RedistributionTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_RedistributionTypePathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability/prefixes/prefix/state/redistribution-type YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_RedistributionTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/redistribution-type"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability/prefixes/prefix/state/redistribution-type"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_RedistributionTypePath) State() ygnmi.SingletonQuery[oc.E_Ipv4ExternalReachability_Prefix_RedistributionType] {
	return ygnmi.NewSingletonQuery[oc.E_Ipv4ExternalReachability_Prefix_RedistributionType](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "redistribution-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ipv4ExternalReachability_Prefix_RedistributionType, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix).RedistributionType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/redistribution-type"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability/prefixes/prefix/state/redistribution-type"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_RedistributionTypePathAny) State() ygnmi.WildcardQuery[oc.E_Ipv4ExternalReachability_Prefix_RedistributionType] {
	return ygnmi.NewWildcardQuery[oc.E_Ipv4ExternalReachability_Prefix_RedistributionType](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "redistribution-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ipv4ExternalReachability_Prefix_RedistributionType, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix).RedistributionType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_PrefixPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability/prefixes/prefix YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_PrefixPath struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_PrefixPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability/prefixes/prefix YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_PrefixPathAny struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_PrefixPathMap represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability/prefixes/prefix YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_PrefixPathMap struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_PrefixPathMapAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability/prefixes/prefix YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_PrefixPathMapAny struct {
	*ygnmi.NodePath
}

// DefaultMetric (leaf): ISIS default metric value.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/default-metric"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability/prefixes/prefix/state/default-metric"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_PrefixPath) DefaultMetric() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_DefaultMetricPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_DefaultMetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "default-metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DefaultMetric (leaf): ISIS default metric value.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/default-metric"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability/prefixes/prefix/state/default-metric"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_PrefixPathAny) DefaultMetric() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_DefaultMetricPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_DefaultMetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "default-metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OriginType (leaf): The origin of the advertised route-internal or external to the ISIS area.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/origin-type"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability/prefixes/prefix/state/origin-type"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_PrefixPath) OriginType() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_OriginTypePath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_OriginTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "origin-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OriginType (leaf): The origin of the advertised route-internal or external to the ISIS area.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/origin-type"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability/prefixes/prefix/state/origin-type"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_PrefixPathAny) OriginType() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_OriginTypePathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_OriginTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "origin-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Prefix (leaf): IPv4 prefix contained within reachability TLVs.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "*/prefix"
//	Path from root:       "/isis-routers/isis-router/*/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability/prefixes/prefix/*/prefix"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_PrefixPath) Prefix() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_PrefixPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_PrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Prefix (leaf): IPv4 prefix contained within reachability TLVs.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "*/prefix"
//	Path from root:       "/isis-routers/isis-router/*/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability/prefixes/prefix/*/prefix"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_PrefixPathAny) Prefix() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_PrefixPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLength (leaf): The length of the IPv4 prefix.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/prefix-length"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability/prefixes/prefix/state/prefix-length"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_PrefixPath) PrefixLength() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_PrefixLengthPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_PrefixLengthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLength (leaf): The length of the IPv4 prefix.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/prefix-length"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability/prefixes/prefix/state/prefix-length"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_PrefixPathAny) PrefixLength() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_PrefixLengthPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_PrefixLengthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RedistributionType (leaf): The up/down bit. Set if a prefix is advertised from a
// higher level to a lower level
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/redistribution-type"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability/prefixes/prefix/state/redistribution-type"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_PrefixPath) RedistributionType() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_RedistributionTypePath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_RedistributionTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "redistribution-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RedistributionType (leaf): The up/down bit. Set if a prefix is advertised from a
// higher level to a lower level
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/redistribution-type"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability/prefixes/prefix/state/redistribution-type"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_PrefixPathAny) RedistributionType() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_RedistributionTypePathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix_RedistributionTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "redistribution-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_PrefixPath) State() ygnmi.SingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix] {
	return ygnmi.NewSingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_PrefixPathAny) State() ygnmi.WildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix] {
	return ygnmi.NewWildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6ReachabilityPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6ReachabilityPath struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6ReachabilityPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6ReachabilityPathAny struct {
	*ygnmi.NodePath
}

// PrefixAny (list): This list defines IPv6 extended prefix attributes.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6ReachabilityPath) PrefixAny() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_PrefixPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
	return ps
}

// PrefixAny (list): This list defines IPv6 extended prefix attributes.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6ReachabilityPathAny) PrefixAny() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_PrefixPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
	return ps
}

// Prefix (list): This list defines IPv6 extended prefix attributes.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix"
//
//	Prefix: string
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6ReachabilityPath) Prefix(Prefix string) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_PrefixPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_PrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
	return ps
}

// Prefix (list): This list defines IPv6 extended prefix attributes.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix"
//
//	Prefix: string
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6ReachabilityPathAny) Prefix(Prefix string) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_PrefixPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6ReachabilityPath) State() ygnmi.SingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability] {
	return ygnmi.NewSingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6ReachabilityPathAny) State() ygnmi.WildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability] {
	return ygnmi.NewWildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_MetricPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/metric YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_MetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_MetricPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/metric YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_MetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/metric"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/metric"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_MetricPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix).Metric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/metric"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/metric"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_MetricPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix).Metric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_OriginTypePath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/origin-type YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_OriginTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_OriginTypePathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/origin-type YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_OriginTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/origin-type"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/origin-type"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_OriginTypePath) State() ygnmi.SingletonQuery[oc.E_Ipv6Reachability_Prefix_OriginType] {
	return ygnmi.NewSingletonQuery[oc.E_Ipv6Reachability_Prefix_OriginType](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "origin-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ipv6Reachability_Prefix_OriginType, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix).OriginType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/origin-type"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/origin-type"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_OriginTypePathAny) State() ygnmi.WildcardQuery[oc.E_Ipv6Reachability_Prefix_OriginType] {
	return ygnmi.NewWildcardQuery[oc.E_Ipv6Reachability_Prefix_OriginType](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "origin-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ipv6Reachability_Prefix_OriginType, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix).OriginType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/prefix"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/prefix"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "prefix"
//	Path from root:       ""
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "prefix"
//	Path from root:       ""
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixLengthPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-length YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixLengthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixLengthPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-length YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixLengthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/prefix-length"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-length"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixLengthPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix).PrefixLength
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/prefix-length"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-length"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixLengthPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix).PrefixLength
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_RedistributionTypePath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/redistribution-type YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_RedistributionTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_RedistributionTypePathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/redistribution-type YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_RedistributionTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/redistribution-type"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/redistribution-type"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_RedistributionTypePath) State() ygnmi.SingletonQuery[oc.E_Ipv6Reachability_Prefix_RedistributionType] {
	return ygnmi.NewSingletonQuery[oc.E_Ipv6Reachability_Prefix_RedistributionType](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "redistribution-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ipv6Reachability_Prefix_RedistributionType, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix).RedistributionType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/redistribution-type"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/redistribution-type"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_RedistributionTypePathAny) State() ygnmi.WildcardQuery[oc.E_Ipv6Reachability_Prefix_RedistributionType] {
	return ygnmi.NewWildcardQuery[oc.E_Ipv6Reachability_Prefix_RedistributionType](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "redistribution-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ipv6Reachability_Prefix_RedistributionType, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix).RedistributionType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_PrefixPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_PrefixPath struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_PrefixPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_PrefixPathAny struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_PrefixPathMap represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_PrefixPathMap struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_PrefixPathMapAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_PrefixPathMapAny struct {
	*ygnmi.NodePath
}

// Metric (leaf): ISIS wide metric value.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/metric"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/metric"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_PrefixPath) Metric() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_MetricPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_MetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): ISIS wide metric value.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/metric"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/metric"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_PrefixPathAny) Metric() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_MetricPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_MetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OriginType (leaf): The origin of the advertised route-internal or external to the ISIS area.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/origin-type"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/origin-type"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_PrefixPath) OriginType() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_OriginTypePath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_OriginTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "origin-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OriginType (leaf): The origin of the advertised route-internal or external to the ISIS area.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/origin-type"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/origin-type"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_PrefixPathAny) OriginType() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_OriginTypePathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_OriginTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "origin-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Prefix (leaf): IPv6 prefix contained within extended reachability TLVs.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "*/prefix"
//	Path from root:       "/isis-routers/isis-router/*/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/*/prefix"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_PrefixPath) Prefix() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Prefix (leaf): IPv6 prefix contained within extended reachability TLVs.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "*/prefix"
//	Path from root:       "/isis-routers/isis-router/*/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/*/prefix"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_PrefixPathAny) Prefix() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixAttributes (container): This container defines sub-TLV 4.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/prefix-attributes"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-attributes"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_PrefixPath) PrefixAttributes() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributesPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-attributes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PrefixAttributes (container): This container defines sub-TLV 4.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/prefix-attributes"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-attributes"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_PrefixPathAny) PrefixAttributes() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributesPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-attributes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PrefixLength (leaf): The length of the IPv6 prefix.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/prefix-length"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-length"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_PrefixPath) PrefixLength() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixLengthPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixLengthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLength (leaf): The length of the IPv6 prefix.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/prefix-length"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-length"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_PrefixPathAny) PrefixLength() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixLengthPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixLengthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixSidAny (list): Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment
// attached to an IGP prefix. An IGP-Prefix Segment is global
// (unless explicitly advertised otherwise) within the SR/IGP
// domain.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/prefix-sid"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-sid"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_PrefixPath) PrefixSidAny() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSidPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-sid"},
			map[string]interface{}{"sid-instance": "*"},
			n,
		),
	}
	return ps
}

// PrefixSidAny (list): Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment
// attached to an IGP prefix. An IGP-Prefix Segment is global
// (unless explicitly advertised otherwise) within the SR/IGP
// domain.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/prefix-sid"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-sid"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_PrefixPathAny) PrefixSidAny() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSidPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-sid"},
			map[string]interface{}{"sid-instance": "*"},
			n,
		),
	}
	return ps
}

// PrefixSid (list): Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment
// attached to an IGP prefix. An IGP-Prefix Segment is global
// (unless explicitly advertised otherwise) within the SR/IGP
// domain.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/prefix-sid"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-sid"
//
//	SidInstance: uint32
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_PrefixPath) PrefixSid(SidInstance uint32) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSidPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSidPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-sid"},
			map[string]interface{}{"sid-instance": SidInstance},
			n,
		),
	}
	return ps
}

// PrefixSid (list): Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment
// attached to an IGP prefix. An IGP-Prefix Segment is global
// (unless explicitly advertised otherwise) within the SR/IGP
// domain.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/prefix-sid"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-sid"
//
//	SidInstance: uint32
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_PrefixPathAny) PrefixSid(SidInstance uint32) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSidPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-sid"},
			map[string]interface{}{"sid-instance": SidInstance},
			n,
		),
	}
	return ps
}

// RedistributionType (leaf): The up/down bit. Set if a prefix is advertised from a
// higher level to a lower level
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/redistribution-type"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/redistribution-type"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_PrefixPath) RedistributionType() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_RedistributionTypePath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_RedistributionTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "redistribution-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RedistributionType (leaf): The up/down bit. Set if a prefix is advertised from a
// higher level to a lower level
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/redistribution-type"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/redistribution-type"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_PrefixPathAny) RedistributionType() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_RedistributionTypePathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_RedistributionTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "redistribution-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_PrefixPath) State() ygnmi.SingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix] {
	return ygnmi.NewSingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_PrefixPathAny) State() ygnmi.WildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix] {
	return ygnmi.NewWildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributes_FlagsPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-attributes/flags YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributes_FlagsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributes_FlagsPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-attributes/flags YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributes_FlagsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "flags"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-attributes/flags"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributes_FlagsPath) State() ygnmi.SingletonQuery[[]oc.E_State_Flags] {
	return ygnmi.NewSingletonQuery[[]oc.E_State_Flags](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributes",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_State_Flags, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributes).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "flags"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-attributes/flags"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributes_FlagsPathAny) State() ygnmi.WildcardQuery[[]oc.E_State_Flags] {
	return ygnmi.NewWildcardQuery[[]oc.E_State_Flags](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributes",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_State_Flags, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributes).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributesPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-attributes YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributesPath struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributesPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-attributes YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributesPathAny struct {
	*ygnmi.NodePath
}

// Flags (leaf-list): Additional prefix reachability flags.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "flags"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-attributes/flags"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributesPath) Flags() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributes_FlagsPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributes_FlagsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Flags (leaf-list): Additional prefix reachability flags.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "flags"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-attributes/flags"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributesPathAny) Flags() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributes_FlagsPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributes_FlagsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributesPath) State() ygnmi.SingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributes] {
	return ygnmi.NewSingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributes](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributes",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributesPathAny) State() ygnmi.WildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributes] {
	return ygnmi.NewWildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributes](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributes",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid_AlgorithmPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-sid/state/algorithm YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid_AlgorithmPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid_AlgorithmPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-sid/state/algorithm YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid_AlgorithmPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/algorithm"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-sid/state/algorithm"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid_AlgorithmPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "algorithm"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid).Algorithm
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/algorithm"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-sid/state/algorithm"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid_AlgorithmPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "algorithm"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid).Algorithm
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid_FlagsPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-sid/state/flags YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid_FlagsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid_FlagsPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-sid/state/flags YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid_FlagsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/flags"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-sid/state/flags"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid_FlagsPath) State() ygnmi.SingletonQuery[[]oc.E_PrefixSid_Flags] {
	return ygnmi.NewSingletonQuery[[]oc.E_PrefixSid_Flags](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_PrefixSid_Flags, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/flags"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-sid/state/flags"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid_FlagsPathAny) State() ygnmi.WildcardQuery[[]oc.E_PrefixSid_Flags] {
	return ygnmi.NewWildcardQuery[[]oc.E_PrefixSid_Flags](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_PrefixSid_Flags, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid_SidInstancePath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-sid/state/sid-instance YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid_SidInstancePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid_SidInstancePathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-sid/state/sid-instance YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid_SidInstancePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/sid-instance"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-sid/state/sid-instance"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid_SidInstancePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sid-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid).SidInstance
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/sid-instance"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-sid/state/sid-instance"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid_SidInstancePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sid-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid).SidInstance
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "sid-instance"
//	Path from root:       ""
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid_SidInstancePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sid-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid).SidInstance
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "sid-instance"
//	Path from root:       ""
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid_SidInstancePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sid-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid).SidInstance
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid_SidsPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-sid/state/sids YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid_SidsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid_SidsPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-sid/state/sids YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid_SidsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/sids"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-sid/state/sids"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid_SidsPath) State() ygnmi.SingletonQuery[[]uint32] {
	return ygnmi.NewSingletonQuery[[]uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sids"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid).Sids
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/sids"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-sid/state/sids"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid_SidsPathAny) State() ygnmi.WildcardQuery[[]uint32] {
	return ygnmi.NewWildcardQuery[[]uint32](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sids"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint32, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid).Sids
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSidPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-sid YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSidPath struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSidPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-sid YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSidPathAny struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSidPathMap represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-sid YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSidPathMap struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSidPathMapAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-sid YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSidPathMapAny struct {
	*ygnmi.NodePath
}

// Algorithm (leaf): Prefix-SID algorithm to be used for path computation.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/algorithm"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-sid/state/algorithm"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSidPath) Algorithm() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid_AlgorithmPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid_AlgorithmPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "algorithm"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Algorithm (leaf): Prefix-SID algorithm to be used for path computation.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/algorithm"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-sid/state/algorithm"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSidPathAny) Algorithm() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid_AlgorithmPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid_AlgorithmPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "algorithm"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Flags (leaf-list): Flags associated with Prefix Segment-ID.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/flags"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-sid/state/flags"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSidPath) Flags() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid_FlagsPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid_FlagsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Flags (leaf-list): Flags associated with Prefix Segment-ID.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/flags"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-sid/state/flags"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSidPathAny) Flags() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid_FlagsPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid_FlagsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SidInstance (leaf): A unique instance number for the instance for the Prefix-SID that may contain array of SIDs.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "*/sid-instance"
//	Path from root:       "/isis-routers/isis-router/*/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/*/prefix-sid/*/sid-instance"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSidPath) SidInstance() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid_SidInstancePath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid_SidInstancePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sid-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SidInstance (leaf): A unique instance number for the instance for the Prefix-SID that may contain array of SIDs.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "*/sid-instance"
//	Path from root:       "/isis-routers/isis-router/*/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/*/prefix-sid/*/sid-instance"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSidPathAny) SidInstance() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid_SidInstancePathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid_SidInstancePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sid-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Sids (leaf-list): IGP one more SID values.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/sids"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-sid/state/sids"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSidPath) Sids() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid_SidsPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid_SidsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sids"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Sids (leaf-list): IGP one more SID values.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/sids"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-sid/state/sids"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSidPathAny) Sids() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid_SidsPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid_SidsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sids"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSidPath) State() ygnmi.SingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid] {
	return ygnmi.NewSingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSidPathAny) State() ygnmi.WildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid] {
	return ygnmi.NewWildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachabilityPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/is-reachability YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachabilityPath struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachabilityPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/is-reachability YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachabilityPathAny struct {
	*ygnmi.NodePath
}

// NeighborAny (list): IS reachability neighbor attributes.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/is-reachability/neighbors/neighbor"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachabilityPath) NeighborAny() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_NeighborPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"system-id": "*"},
			n,
		),
	}
	return ps
}

// NeighborAny (list): IS reachability neighbor attributes.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/is-reachability/neighbors/neighbor"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachabilityPathAny) NeighborAny() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_NeighborPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"system-id": "*"},
			n,
		),
	}
	return ps
}

// Neighbor (list): IS reachability neighbor attributes.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/is-reachability/neighbors/neighbor"
//
//	SystemId: string
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachabilityPath) Neighbor(SystemId string) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_NeighborPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_NeighborPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"system-id": SystemId},
			n,
		),
	}
	return ps
}

// Neighbor (list): IS reachability neighbor attributes.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/is-reachability/neighbors/neighbor"
//
//	SystemId: string
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachabilityPathAny) Neighbor(SystemId string) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_NeighborPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"system-id": SystemId},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachabilityPath) State() ygnmi.SingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability] {
	return ygnmi.NewSingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachabilityPathAny) State() ygnmi.WildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability] {
	return ygnmi.NewWildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor_SystemIdPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/is-reachability/neighbors/neighbor/state/system-id YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor_SystemIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor_SystemIdPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/is-reachability/neighbors/neighbor/state/system-id YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor_SystemIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/system-id"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/is-reachability/neighbors/neighbor/state/system-id"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor_SystemIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "system-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor).SystemId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/system-id"
//	Path from root:       "/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/is-reachability/neighbors/neighbor/state/system-id"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor_SystemIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "system-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor).SystemId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "system-id"
//	Path from root:       ""
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor_SystemIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"system-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor).SystemId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "system-id"
//	Path from root:       ""
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor_SystemIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"system-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor).SystemId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_NeighborPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/is-reachability/neighbors/neighbor YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_NeighborPath struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_NeighborPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/is-reachability/neighbors/neighbor YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_NeighborPathAny struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_NeighborPathMap represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/is-reachability/neighbors/neighbor YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_NeighborPathMap struct {
	*ygnmi.NodePath
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_NeighborPathMapAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/is-reachability/neighbors/neighbor YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_NeighborPathMapAny struct {
	*ygnmi.NodePath
}

// SystemId (leaf): System-ID of IS neighbor, e.g. '640100010000'.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "*/system-id"
//	Path from root:       "/isis-routers/isis-router/*/link-state-database/lsp-states/lsps/tlvs/is-reachability/neighbors/neighbor/*/system-id"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_NeighborPath) SystemId() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor_SystemIdPath {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor_SystemIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "system-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SystemId (leaf): System-ID of IS neighbor, e.g. '640100010000'.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "*/system-id"
//	Path from root:       "/isis-routers/isis-router/*/link-state-database/lsp-states/lsps/tlvs/is-reachability/neighbors/neighbor/*/system-id"
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_NeighborPathAny) SystemId() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor_SystemIdPathAny {
	ps := &IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor_SystemIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "system-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_NeighborPath) State() ygnmi.SingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor] {
	return ygnmi.NewSingletonQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_NeighborPathAny) State() ygnmi.WildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor] {
	return ygnmi.NewWildcardQuery[*oc.IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor](
		"IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

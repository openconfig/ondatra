/*
Package dhcpv4server is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.20)
using the following YANG input files:
  - models-yang/models/bgp/open-traffic-generator-bgp.yang
  - models-yang/models/discovery/open-traffic-generator-discovery.yang
  - models-yang/models/dhcp/v4client/open-traffic-generator-dhcpv4client.yang
  - models-yang/models/dhcp/v4server/open-traffic-generator-dhcpv4server.yang
  - models-yang/models/dhcp/v6client/open-traffic-generator-dhcpv6client.yang
  - models-yang/models/dhcp/v6server/open-traffic-generator-dhcpv6server.yang
  - models-yang/models/flow/open-traffic-generator-flow.yang
  - models-yang/models/interface/open-traffic-generator-port.yang
  - models-yang/models/isis/open-traffic-generator-isis.yang
  - models-yang/models/lacp/open-traffic-generator-lacp.yang
  - models-yang/models/lag/open-traffic-generator-lag.yang
  - models-yang/models/lldp/open-traffic-generator-lldp.yang
  - models-yang/models/ospfv2/open-traffic-generator-ospfv2.yang
  - models-yang/models/platform/open-traffic-generator-platform.yang
  - models-yang/models/rsvp/open-traffic-generator-rsvp.yang
  - models-yang/models/types/open-traffic-generator-types.yang

Imported modules were sourced from:
  - models-yang/models/...
*/
package dhcpv4server

import (
	oc "github.com/openconfig/ondatra/gnmi/otg"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Dhcpv4Server_NamePath represents the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server/state/name YANG schema element.
type Dhcpv4Server_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv4Server_NamePathAny represents the wildcard version of the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server/state/name YANG schema element.
type Dhcpv4Server_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "state/name"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/name"
func (n *Dhcpv4Server_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Dhcpv4Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Dhcpv4Server).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "state/name"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/name"
func (n *Dhcpv4Server_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Dhcpv4Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Dhcpv4Server).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *Dhcpv4Server_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Dhcpv4Server",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Dhcpv4Server).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *Dhcpv4Server_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Dhcpv4Server",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Dhcpv4Server).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv4ServerPath represents the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server YANG schema element.
type Dhcpv4ServerPath struct {
	*ygnmi.NodePath
}

// Dhcpv4ServerPathAny represents the wildcard version of the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server YANG schema element.
type Dhcpv4ServerPathAny struct {
	*ygnmi.NodePath
}

// Dhcpv4ServerPathMap represents the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server YANG schema element.
type Dhcpv4ServerPathMap struct {
	*ygnmi.NodePath
}

// Dhcpv4ServerPathMapAny represents the wildcard version of the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server YANG schema element.
type Dhcpv4ServerPathMapAny struct {
	*ygnmi.NodePath
}

// Counters (container): Counters of an individual DHCPv4 session.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "state/counters"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/counters"
func (n *Dhcpv4ServerPath) Counters() *Dhcpv4Server_CountersPath {
	ps := &Dhcpv4Server_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Counters of an individual DHCPv4 session.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "state/counters"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/counters"
func (n *Dhcpv4ServerPathAny) Counters() *Dhcpv4Server_CountersPathAny {
	ps := &Dhcpv4Server_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Leases (container): This sub-module describes a YANG model for
// the Host allocated status of a DHCPv4 Server
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "state/leases"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/leases"
func (n *Dhcpv4ServerPath) Leases() *Dhcpv4Server_LeasesPath {
	ps := &Dhcpv4Server_LeasesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "leases"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Leases (container): This sub-module describes a YANG model for
// the Host allocated status of a DHCPv4 Server
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "state/leases"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/leases"
func (n *Dhcpv4ServerPathAny) Leases() *Dhcpv4Server_LeasesPathAny {
	ps := &Dhcpv4Server_LeasesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "leases"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Name (leaf): An arbitrary name of the DHCPv4 Server determined by the OTG
// configuration.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "*/name"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/*/name"
func (n *Dhcpv4ServerPath) Name() *Dhcpv4Server_NamePath {
	ps := &Dhcpv4Server_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): An arbitrary name of the DHCPv4 Server determined by the OTG
// configuration.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "*/name"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/*/name"
func (n *Dhcpv4ServerPathAny) Name() *Dhcpv4Server_NamePathAny {
	ps := &Dhcpv4Server_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *Dhcpv4ServerPath) State() ygnmi.SingletonQuery[*oc.Dhcpv4Server] {
	return ygnmi.NewSingletonQuery[*oc.Dhcpv4Server](
		"Dhcpv4Server",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Dhcpv4ServerPathAny) State() ygnmi.WildcardQuery[*oc.Dhcpv4Server] {
	return ygnmi.NewWildcardQuery[*oc.Dhcpv4Server](
		"Dhcpv4Server",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv4Server_Counters_AcksSentPath represents the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server/state/counters/acks-sent YANG schema element.
type Dhcpv4Server_Counters_AcksSentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv4Server_Counters_AcksSentPathAny represents the wildcard version of the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server/state/counters/acks-sent YANG schema element.
type Dhcpv4Server_Counters_AcksSentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "acks-sent"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/counters/acks-sent"
func (n *Dhcpv4Server_Counters_AcksSentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Dhcpv4Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"acks-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv4Server_Counters).AcksSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "acks-sent"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/counters/acks-sent"
func (n *Dhcpv4Server_Counters_AcksSentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Dhcpv4Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"acks-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv4Server_Counters).AcksSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv4Server_Counters_DeclinesReceivedPath represents the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server/state/counters/declines-received YANG schema element.
type Dhcpv4Server_Counters_DeclinesReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv4Server_Counters_DeclinesReceivedPathAny represents the wildcard version of the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server/state/counters/declines-received YANG schema element.
type Dhcpv4Server_Counters_DeclinesReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "declines-received"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/counters/declines-received"
func (n *Dhcpv4Server_Counters_DeclinesReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Dhcpv4Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"declines-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv4Server_Counters).DeclinesReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "declines-received"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/counters/declines-received"
func (n *Dhcpv4Server_Counters_DeclinesReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Dhcpv4Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"declines-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv4Server_Counters).DeclinesReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv4Server_Counters_DiscoversReceivedPath represents the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server/state/counters/discovers-received YANG schema element.
type Dhcpv4Server_Counters_DiscoversReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv4Server_Counters_DiscoversReceivedPathAny represents the wildcard version of the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server/state/counters/discovers-received YANG schema element.
type Dhcpv4Server_Counters_DiscoversReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "discovers-received"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/counters/discovers-received"
func (n *Dhcpv4Server_Counters_DiscoversReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Dhcpv4Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"discovers-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv4Server_Counters).DiscoversReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "discovers-received"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/counters/discovers-received"
func (n *Dhcpv4Server_Counters_DiscoversReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Dhcpv4Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"discovers-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv4Server_Counters).DiscoversReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv4Server_Counters_NacksSentPath represents the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server/state/counters/nacks-sent YANG schema element.
type Dhcpv4Server_Counters_NacksSentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv4Server_Counters_NacksSentPathAny represents the wildcard version of the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server/state/counters/nacks-sent YANG schema element.
type Dhcpv4Server_Counters_NacksSentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "nacks-sent"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/counters/nacks-sent"
func (n *Dhcpv4Server_Counters_NacksSentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Dhcpv4Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"nacks-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv4Server_Counters).NacksSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "nacks-sent"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/counters/nacks-sent"
func (n *Dhcpv4Server_Counters_NacksSentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Dhcpv4Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"nacks-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv4Server_Counters).NacksSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv4Server_Counters_OffersSentPath represents the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server/state/counters/offers-sent YANG schema element.
type Dhcpv4Server_Counters_OffersSentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv4Server_Counters_OffersSentPathAny represents the wildcard version of the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server/state/counters/offers-sent YANG schema element.
type Dhcpv4Server_Counters_OffersSentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "offers-sent"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/counters/offers-sent"
func (n *Dhcpv4Server_Counters_OffersSentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Dhcpv4Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"offers-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv4Server_Counters).OffersSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "offers-sent"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/counters/offers-sent"
func (n *Dhcpv4Server_Counters_OffersSentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Dhcpv4Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"offers-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv4Server_Counters).OffersSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv4Server_Counters_ReleasesReceivedPath represents the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server/state/counters/releases-received YANG schema element.
type Dhcpv4Server_Counters_ReleasesReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv4Server_Counters_ReleasesReceivedPathAny represents the wildcard version of the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server/state/counters/releases-received YANG schema element.
type Dhcpv4Server_Counters_ReleasesReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "releases-received"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/counters/releases-received"
func (n *Dhcpv4Server_Counters_ReleasesReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Dhcpv4Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"releases-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv4Server_Counters).ReleasesReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "releases-received"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/counters/releases-received"
func (n *Dhcpv4Server_Counters_ReleasesReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Dhcpv4Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"releases-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv4Server_Counters).ReleasesReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv4Server_Counters_RequestsReceivedPath represents the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server/state/counters/requests-received YANG schema element.
type Dhcpv4Server_Counters_RequestsReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv4Server_Counters_RequestsReceivedPathAny represents the wildcard version of the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server/state/counters/requests-received YANG schema element.
type Dhcpv4Server_Counters_RequestsReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "requests-received"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/counters/requests-received"
func (n *Dhcpv4Server_Counters_RequestsReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Dhcpv4Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"requests-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv4Server_Counters).RequestsReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "requests-received"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/counters/requests-received"
func (n *Dhcpv4Server_Counters_RequestsReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Dhcpv4Server_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"requests-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Dhcpv4Server_Counters).RequestsReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Server_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv4Server_CountersPath represents the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server/state/counters YANG schema element.
type Dhcpv4Server_CountersPath struct {
	*ygnmi.NodePath
}

// Dhcpv4Server_CountersPathAny represents the wildcard version of the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server/state/counters YANG schema element.
type Dhcpv4Server_CountersPathAny struct {
	*ygnmi.NodePath
}

// AcksSent (leaf): Number of DHCPACKS messages sent.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "acks-sent"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/counters/acks-sent"
func (n *Dhcpv4Server_CountersPath) AcksSent() *Dhcpv4Server_Counters_AcksSentPath {
	ps := &Dhcpv4Server_Counters_AcksSentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"acks-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AcksSent (leaf): Number of DHCPACKS messages sent.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "acks-sent"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/counters/acks-sent"
func (n *Dhcpv4Server_CountersPathAny) AcksSent() *Dhcpv4Server_Counters_AcksSentPathAny {
	ps := &Dhcpv4Server_Counters_AcksSentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"acks-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DeclinesReceived (leaf): Number of DHCPDECLINES messages received.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "declines-received"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/counters/declines-received"
func (n *Dhcpv4Server_CountersPath) DeclinesReceived() *Dhcpv4Server_Counters_DeclinesReceivedPath {
	ps := &Dhcpv4Server_Counters_DeclinesReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"declines-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DeclinesReceived (leaf): Number of DHCPDECLINES messages received.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "declines-received"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/counters/declines-received"
func (n *Dhcpv4Server_CountersPathAny) DeclinesReceived() *Dhcpv4Server_Counters_DeclinesReceivedPathAny {
	ps := &Dhcpv4Server_Counters_DeclinesReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"declines-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DiscoversReceived (leaf): Number of DHCPDISCOVER messages received.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "discovers-received"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/counters/discovers-received"
func (n *Dhcpv4Server_CountersPath) DiscoversReceived() *Dhcpv4Server_Counters_DiscoversReceivedPath {
	ps := &Dhcpv4Server_Counters_DiscoversReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"discovers-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DiscoversReceived (leaf): Number of DHCPDISCOVER messages received.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "discovers-received"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/counters/discovers-received"
func (n *Dhcpv4Server_CountersPathAny) DiscoversReceived() *Dhcpv4Server_Counters_DiscoversReceivedPathAny {
	ps := &Dhcpv4Server_Counters_DiscoversReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"discovers-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NacksSent (leaf): Number of DHCPNACKS messages sent.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "nacks-sent"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/counters/nacks-sent"
func (n *Dhcpv4Server_CountersPath) NacksSent() *Dhcpv4Server_Counters_NacksSentPath {
	ps := &Dhcpv4Server_Counters_NacksSentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"nacks-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NacksSent (leaf): Number of DHCPNACKS messages sent.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "nacks-sent"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/counters/nacks-sent"
func (n *Dhcpv4Server_CountersPathAny) NacksSent() *Dhcpv4Server_Counters_NacksSentPathAny {
	ps := &Dhcpv4Server_Counters_NacksSentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"nacks-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OffersSent (leaf): Number of DHCPOFFER messages sent.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "offers-sent"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/counters/offers-sent"
func (n *Dhcpv4Server_CountersPath) OffersSent() *Dhcpv4Server_Counters_OffersSentPath {
	ps := &Dhcpv4Server_Counters_OffersSentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"offers-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OffersSent (leaf): Number of DHCPOFFER messages sent.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "offers-sent"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/counters/offers-sent"
func (n *Dhcpv4Server_CountersPathAny) OffersSent() *Dhcpv4Server_Counters_OffersSentPathAny {
	ps := &Dhcpv4Server_Counters_OffersSentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"offers-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReleasesReceived (leaf): Number of DHCPRELEASES messages received.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "releases-received"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/counters/releases-received"
func (n *Dhcpv4Server_CountersPath) ReleasesReceived() *Dhcpv4Server_Counters_ReleasesReceivedPath {
	ps := &Dhcpv4Server_Counters_ReleasesReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"releases-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReleasesReceived (leaf): Number of DHCPRELEASES messages received.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "releases-received"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/counters/releases-received"
func (n *Dhcpv4Server_CountersPathAny) ReleasesReceived() *Dhcpv4Server_Counters_ReleasesReceivedPathAny {
	ps := &Dhcpv4Server_Counters_ReleasesReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"releases-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RequestsReceived (leaf): Number of DHCPREQUEST messages received.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "requests-received"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/counters/requests-received"
func (n *Dhcpv4Server_CountersPath) RequestsReceived() *Dhcpv4Server_Counters_RequestsReceivedPath {
	ps := &Dhcpv4Server_Counters_RequestsReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"requests-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RequestsReceived (leaf): Number of DHCPREQUEST messages received.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "requests-received"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/counters/requests-received"
func (n *Dhcpv4Server_CountersPathAny) RequestsReceived() *Dhcpv4Server_Counters_RequestsReceivedPathAny {
	ps := &Dhcpv4Server_Counters_RequestsReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"requests-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Dhcpv4Server_CountersPath) State() ygnmi.SingletonQuery[*oc.Dhcpv4Server_Counters] {
	return ygnmi.NewSingletonQuery[*oc.Dhcpv4Server_Counters](
		"Dhcpv4Server_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Dhcpv4Server_CountersPathAny) State() ygnmi.WildcardQuery[*oc.Dhcpv4Server_Counters] {
	return ygnmi.NewWildcardQuery[*oc.Dhcpv4Server_Counters](
		"Dhcpv4Server_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv4Server_LeasesPath represents the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server/state/leases YANG schema element.
type Dhcpv4Server_LeasesPath struct {
	*ygnmi.NodePath
}

// Dhcpv4Server_LeasesPathAny represents the wildcard version of the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server/state/leases YANG schema element.
type Dhcpv4Server_LeasesPathAny struct {
	*ygnmi.NodePath
}

// HostsAny (list): The IPv4 address associated with this lease for the Host
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "leases-states/hosts"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts"
func (n *Dhcpv4Server_LeasesPath) HostsAny() *Dhcpv4Server_Leases_HostsPathAny {
	ps := &Dhcpv4Server_Leases_HostsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"leases-states", "hosts"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
	return ps
}

// HostsAny (list): The IPv4 address associated with this lease for the Host
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "leases-states/hosts"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts"
func (n *Dhcpv4Server_LeasesPathAny) HostsAny() *Dhcpv4Server_Leases_HostsPathAny {
	ps := &Dhcpv4Server_Leases_HostsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"leases-states", "hosts"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
	return ps
}

// Hosts (list): The IPv4 address associated with this lease for the Host
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "leases-states/hosts"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts"
//
//	Address: string
func (n *Dhcpv4Server_LeasesPath) Hosts(Address string) *Dhcpv4Server_Leases_HostsPath {
	ps := &Dhcpv4Server_Leases_HostsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"leases-states", "hosts"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
	return ps
}

// Hosts (list): The IPv4 address associated with this lease for the Host
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "leases-states/hosts"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts"
//
//	Address: string
func (n *Dhcpv4Server_LeasesPathAny) Hosts(Address string) *Dhcpv4Server_Leases_HostsPathAny {
	ps := &Dhcpv4Server_Leases_HostsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"leases-states", "hosts"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Dhcpv4Server_LeasesPath) State() ygnmi.SingletonQuery[*oc.Dhcpv4Server_Leases] {
	return ygnmi.NewSingletonQuery[*oc.Dhcpv4Server_Leases](
		"Dhcpv4Server_Leases",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Dhcpv4Server_LeasesPathAny) State() ygnmi.WildcardQuery[*oc.Dhcpv4Server_Leases] {
	return ygnmi.NewWildcardQuery[*oc.Dhcpv4Server_Leases](
		"Dhcpv4Server_Leases",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv4Server_Leases_Hosts_AddressPath represents the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/address YANG schema element.
type Dhcpv4Server_Leases_Hosts_AddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv4Server_Leases_Hosts_AddressPathAny represents the wildcard version of the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/address YANG schema element.
type Dhcpv4Server_Leases_Hosts_AddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "state/address"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/address"
func (n *Dhcpv4Server_Leases_Hosts_AddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Dhcpv4Server_Leases_Hosts",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Dhcpv4Server_Leases_Hosts).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Server_Leases_Hosts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "state/address"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/address"
func (n *Dhcpv4Server_Leases_Hosts_AddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Dhcpv4Server_Leases_Hosts",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Dhcpv4Server_Leases_Hosts).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Server_Leases_Hosts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "address"
//	Path from root:       ""
func (n *Dhcpv4Server_Leases_Hosts_AddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Dhcpv4Server_Leases_Hosts",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Dhcpv4Server_Leases_Hosts).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Server_Leases_Hosts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "address"
//	Path from root:       ""
func (n *Dhcpv4Server_Leases_Hosts_AddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Dhcpv4Server_Leases_Hosts",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Dhcpv4Server_Leases_Hosts).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Server_Leases_Hosts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv4Server_Leases_Hosts_CircuitIdPath represents the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/circuit-id YANG schema element.
type Dhcpv4Server_Leases_Hosts_CircuitIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv4Server_Leases_Hosts_CircuitIdPathAny represents the wildcard version of the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/circuit-id YANG schema element.
type Dhcpv4Server_Leases_Hosts_CircuitIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "state/circuit-id"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/circuit-id"
func (n *Dhcpv4Server_Leases_Hosts_CircuitIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Dhcpv4Server_Leases_Hosts",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "circuit-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Dhcpv4Server_Leases_Hosts).CircuitId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Server_Leases_Hosts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "state/circuit-id"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/circuit-id"
func (n *Dhcpv4Server_Leases_Hosts_CircuitIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Dhcpv4Server_Leases_Hosts",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "circuit-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Dhcpv4Server_Leases_Hosts).CircuitId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Server_Leases_Hosts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv4Server_Leases_Hosts_ClientIdPath represents the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/client-id YANG schema element.
type Dhcpv4Server_Leases_Hosts_ClientIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv4Server_Leases_Hosts_ClientIdPathAny represents the wildcard version of the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/client-id YANG schema element.
type Dhcpv4Server_Leases_Hosts_ClientIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "state/client-id"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/client-id"
func (n *Dhcpv4Server_Leases_Hosts_ClientIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Dhcpv4Server_Leases_Hosts",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "client-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Dhcpv4Server_Leases_Hosts).ClientId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Server_Leases_Hosts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "state/client-id"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/client-id"
func (n *Dhcpv4Server_Leases_Hosts_ClientIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Dhcpv4Server_Leases_Hosts",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "client-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Dhcpv4Server_Leases_Hosts).ClientId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Server_Leases_Hosts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv4Server_Leases_Hosts_PreferredTimePath represents the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/preferred_time YANG schema element.
type Dhcpv4Server_Leases_Hosts_PreferredTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv4Server_Leases_Hosts_PreferredTimePathAny represents the wildcard version of the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/preferred_time YANG schema element.
type Dhcpv4Server_Leases_Hosts_PreferredTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "state/preferred_time"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/preferred_time"
func (n *Dhcpv4Server_Leases_Hosts_PreferredTimePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Dhcpv4Server_Leases_Hosts",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preferred_time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Dhcpv4Server_Leases_Hosts).PreferredTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Server_Leases_Hosts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "state/preferred_time"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/preferred_time"
func (n *Dhcpv4Server_Leases_Hosts_PreferredTimePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Dhcpv4Server_Leases_Hosts",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preferred_time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Dhcpv4Server_Leases_Hosts).PreferredTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Server_Leases_Hosts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv4Server_Leases_Hosts_RebindTimePath represents the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/rebind_time YANG schema element.
type Dhcpv4Server_Leases_Hosts_RebindTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv4Server_Leases_Hosts_RebindTimePathAny represents the wildcard version of the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/rebind_time YANG schema element.
type Dhcpv4Server_Leases_Hosts_RebindTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "state/rebind_time"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/rebind_time"
func (n *Dhcpv4Server_Leases_Hosts_RebindTimePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Dhcpv4Server_Leases_Hosts",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "rebind_time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Dhcpv4Server_Leases_Hosts).RebindTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Server_Leases_Hosts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "state/rebind_time"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/rebind_time"
func (n *Dhcpv4Server_Leases_Hosts_RebindTimePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Dhcpv4Server_Leases_Hosts",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "rebind_time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Dhcpv4Server_Leases_Hosts).RebindTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Server_Leases_Hosts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv4Server_Leases_Hosts_RemoteIdPath represents the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/remote-id YANG schema element.
type Dhcpv4Server_Leases_Hosts_RemoteIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv4Server_Leases_Hosts_RemoteIdPathAny represents the wildcard version of the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/remote-id YANG schema element.
type Dhcpv4Server_Leases_Hosts_RemoteIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "state/remote-id"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/remote-id"
func (n *Dhcpv4Server_Leases_Hosts_RemoteIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Dhcpv4Server_Leases_Hosts",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Dhcpv4Server_Leases_Hosts).RemoteId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Server_Leases_Hosts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "state/remote-id"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/remote-id"
func (n *Dhcpv4Server_Leases_Hosts_RemoteIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Dhcpv4Server_Leases_Hosts",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Dhcpv4Server_Leases_Hosts).RemoteId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Server_Leases_Hosts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv4Server_Leases_Hosts_RenewTimePath represents the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/renew_time YANG schema element.
type Dhcpv4Server_Leases_Hosts_RenewTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv4Server_Leases_Hosts_RenewTimePathAny represents the wildcard version of the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/renew_time YANG schema element.
type Dhcpv4Server_Leases_Hosts_RenewTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "state/renew_time"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/renew_time"
func (n *Dhcpv4Server_Leases_Hosts_RenewTimePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Dhcpv4Server_Leases_Hosts",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "renew_time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Dhcpv4Server_Leases_Hosts).RenewTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Server_Leases_Hosts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "state/renew_time"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/renew_time"
func (n *Dhcpv4Server_Leases_Hosts_RenewTimePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Dhcpv4Server_Leases_Hosts",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "renew_time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Dhcpv4Server_Leases_Hosts).RenewTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Server_Leases_Hosts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv4Server_Leases_Hosts_ValidTimePath represents the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/valid-time YANG schema element.
type Dhcpv4Server_Leases_Hosts_ValidTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Dhcpv4Server_Leases_Hosts_ValidTimePathAny represents the wildcard version of the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/valid-time YANG schema element.
type Dhcpv4Server_Leases_Hosts_ValidTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "state/valid-time"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/valid-time"
func (n *Dhcpv4Server_Leases_Hosts_ValidTimePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Dhcpv4Server_Leases_Hosts",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "valid-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Dhcpv4Server_Leases_Hosts).ValidTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Server_Leases_Hosts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "state/valid-time"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/valid-time"
func (n *Dhcpv4Server_Leases_Hosts_ValidTimePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Dhcpv4Server_Leases_Hosts",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "valid-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Dhcpv4Server_Leases_Hosts).ValidTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Dhcpv4Server_Leases_Hosts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Dhcpv4Server_Leases_HostsPath represents the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts YANG schema element.
type Dhcpv4Server_Leases_HostsPath struct {
	*ygnmi.NodePath
}

// Dhcpv4Server_Leases_HostsPathAny represents the wildcard version of the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts YANG schema element.
type Dhcpv4Server_Leases_HostsPathAny struct {
	*ygnmi.NodePath
}

// Dhcpv4Server_Leases_HostsPathMap represents the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts YANG schema element.
type Dhcpv4Server_Leases_HostsPathMap struct {
	*ygnmi.NodePath
}

// Dhcpv4Server_Leases_HostsPathMapAny represents the wildcard version of the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts YANG schema element.
type Dhcpv4Server_Leases_HostsPathMapAny struct {
	*ygnmi.NodePath
}

// Address (leaf): The IPv4 address associated with this DHCP Client session.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "*/address"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/*/leases/leases-states/hosts/*/address"
func (n *Dhcpv4Server_Leases_HostsPath) Address() *Dhcpv4Server_Leases_Hosts_AddressPath {
	ps := &Dhcpv4Server_Leases_Hosts_AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Address (leaf): The IPv4 address associated with this DHCP Client session.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "*/address"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/*/leases/leases-states/hosts/*/address"
func (n *Dhcpv4Server_Leases_HostsPathAny) Address() *Dhcpv4Server_Leases_Hosts_AddressPathAny {
	ps := &Dhcpv4Server_Leases_Hosts_AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CircuitId (leaf): The Circuit ID option found in the last request message
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "state/circuit-id"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/circuit-id"
func (n *Dhcpv4Server_Leases_HostsPath) CircuitId() *Dhcpv4Server_Leases_Hosts_CircuitIdPath {
	ps := &Dhcpv4Server_Leases_Hosts_CircuitIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "circuit-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CircuitId (leaf): The Circuit ID option found in the last request message
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "state/circuit-id"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/circuit-id"
func (n *Dhcpv4Server_Leases_HostsPathAny) CircuitId() *Dhcpv4Server_Leases_Hosts_CircuitIdPathAny {
	ps := &Dhcpv4Server_Leases_Hosts_CircuitIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "circuit-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ClientId (leaf): The ID of the DHCPv4 client holding this lease.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "state/client-id"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/client-id"
func (n *Dhcpv4Server_Leases_HostsPath) ClientId() *Dhcpv4Server_Leases_Hosts_ClientIdPath {
	ps := &Dhcpv4Server_Leases_Hosts_ClientIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "client-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ClientId (leaf): The ID of the DHCPv4 client holding this lease.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "state/client-id"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/client-id"
func (n *Dhcpv4Server_Leases_HostsPathAny) ClientId() *Dhcpv4Server_Leases_Hosts_ClientIdPathAny {
	ps := &Dhcpv4Server_Leases_Hosts_ClientIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "client-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreferredTime (leaf): The time in seconds, elapsed time since address has been renewed.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "state/preferred_time"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/preferred_time"
func (n *Dhcpv4Server_Leases_HostsPath) PreferredTime() *Dhcpv4Server_Leases_Hosts_PreferredTimePath {
	ps := &Dhcpv4Server_Leases_Hosts_PreferredTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "preferred_time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreferredTime (leaf): The time in seconds, elapsed time since address has been renewed.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "state/preferred_time"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/preferred_time"
func (n *Dhcpv4Server_Leases_HostsPathAny) PreferredTime() *Dhcpv4Server_Leases_Hosts_PreferredTimePathAny {
	ps := &Dhcpv4Server_Leases_Hosts_PreferredTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "preferred_time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RebindTime (leaf): Time in seconds until the DHCPv4 client starts rebinding.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "state/rebind_time"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/rebind_time"
func (n *Dhcpv4Server_Leases_HostsPath) RebindTime() *Dhcpv4Server_Leases_Hosts_RebindTimePath {
	ps := &Dhcpv4Server_Leases_Hosts_RebindTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "rebind_time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RebindTime (leaf): Time in seconds until the DHCPv4 client starts rebinding.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "state/rebind_time"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/rebind_time"
func (n *Dhcpv4Server_Leases_HostsPathAny) RebindTime() *Dhcpv4Server_Leases_Hosts_RebindTimePathAny {
	ps := &Dhcpv4Server_Leases_Hosts_RebindTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "rebind_time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RemoteId (leaf): The Remote ID option found in the last request message
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "state/remote-id"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/remote-id"
func (n *Dhcpv4Server_Leases_HostsPath) RemoteId() *Dhcpv4Server_Leases_Hosts_RemoteIdPath {
	ps := &Dhcpv4Server_Leases_Hosts_RemoteIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "remote-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RemoteId (leaf): The Remote ID option found in the last request message
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "state/remote-id"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/remote-id"
func (n *Dhcpv4Server_Leases_HostsPathAny) RemoteId() *Dhcpv4Server_Leases_Hosts_RemoteIdPathAny {
	ps := &Dhcpv4Server_Leases_Hosts_RemoteIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "remote-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RenewTime (leaf): Time in seconds until the DHCPv4 client starts renewing the lease.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "state/renew_time"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/renew_time"
func (n *Dhcpv4Server_Leases_HostsPath) RenewTime() *Dhcpv4Server_Leases_Hosts_RenewTimePath {
	ps := &Dhcpv4Server_Leases_Hosts_RenewTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "renew_time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RenewTime (leaf): Time in seconds until the DHCPv4 client starts renewing the lease.
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "state/renew_time"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/renew_time"
func (n *Dhcpv4Server_Leases_HostsPathAny) RenewTime() *Dhcpv4Server_Leases_Hosts_RenewTimePathAny {
	ps := &Dhcpv4Server_Leases_Hosts_RenewTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "renew_time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ValidTime (leaf): The time in seconds, IP address lease will expire
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "state/valid-time"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/valid-time"
func (n *Dhcpv4Server_Leases_HostsPath) ValidTime() *Dhcpv4Server_Leases_Hosts_ValidTimePath {
	ps := &Dhcpv4Server_Leases_Hosts_ValidTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "valid-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ValidTime (leaf): The time in seconds, IP address lease will expire
//
//	Defining module:      "open-traffic-generator-dhcpv4server"
//	Instantiating module: "open-traffic-generator-dhcpv4server"
//	Path from parent:     "state/valid-time"
//	Path from root:       "/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts/state/valid-time"
func (n *Dhcpv4Server_Leases_HostsPathAny) ValidTime() *Dhcpv4Server_Leases_Hosts_ValidTimePathAny {
	ps := &Dhcpv4Server_Leases_Hosts_ValidTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "valid-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Dhcpv4Server_Leases_HostsPath) State() ygnmi.SingletonQuery[*oc.Dhcpv4Server_Leases_Hosts] {
	return ygnmi.NewSingletonQuery[*oc.Dhcpv4Server_Leases_Hosts](
		"Dhcpv4Server_Leases_Hosts",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Dhcpv4Server_Leases_HostsPathAny) State() ygnmi.WildcardQuery[*oc.Dhcpv4Server_Leases_Hosts] {
	return ygnmi.NewWildcardQuery[*oc.Dhcpv4Server_Leases_Hosts](
		"Dhcpv4Server_Leases_Hosts",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

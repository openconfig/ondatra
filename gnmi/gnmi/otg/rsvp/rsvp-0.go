/*
Package rsvp is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.20)
using the following YANG input files:
  - models-yang/models/bgp/open-traffic-generator-bgp.yang
  - models-yang/models/dhcp/v4client/open-traffic-generator-dhcpv4client.yang
  - models-yang/models/dhcp/v4server/open-traffic-generator-dhcpv4server.yang
  - models-yang/models/dhcp/v6client/open-traffic-generator-dhcpv6client.yang
  - models-yang/models/dhcp/v6server/open-traffic-generator-dhcpv6server.yang
  - models-yang/models/discovery/open-traffic-generator-discovery.yang
  - models-yang/models/discovery/open-traffic-generator-discovery-interfaces.yang
  - models-yang/models/flow/open-traffic-generator-flow.yang
  - models-yang/models/interface/open-traffic-generator-port.yang
  - models-yang/models/isis/open-traffic-generator-isis.yang
  - models-yang/models/lacp/open-traffic-generator-lacp.yang
  - models-yang/models/lag/open-traffic-generator-lag.yang
  - models-yang/models/lldp/open-traffic-generator-lldp.yang
  - models-yang/models/ospfv2/open-traffic-generator-ospfv2.yang
  - models-yang/models/ospfv3/open-traffic-generator-ospfv3.yang
  - models-yang/models/platform/open-traffic-generator-platform.yang
  - models-yang/models/rsvp/open-traffic-generator-rsvp.yang
  - models-yang/models/types/open-traffic-generator-types.yang

Imported modules were sourced from:
  - models-yang/models/...
*/
package rsvp

import (
	"reflect"

	oc "github.com/openconfig/ondatra/gnmi/otg"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// RsvpteRouter_NamePath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/name YANG schema element.
type RsvpteRouter_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_NamePathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/name YANG schema element.
type RsvpteRouter_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/name"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/name"
func (n *RsvpteRouter_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RsvpteRouter",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RsvpteRouter).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/name"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/name"
func (n *RsvpteRouter_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RsvpteRouter",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RsvpteRouter).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *RsvpteRouter_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RsvpteRouter",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RsvpteRouter).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *RsvpteRouter_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RsvpteRouter",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RsvpteRouter).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouterPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router YANG schema element.
type RsvpteRouterPath struct {
	*ygnmi.NodePath
}

// RsvpteRouterPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router YANG schema element.
type RsvpteRouterPathAny struct {
	*ygnmi.NodePath
}

// RsvpteRouterPathMap represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router YANG schema element.
type RsvpteRouterPathMap struct {
	*ygnmi.NodePath
}

// RsvpteRouterPathMapAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router YANG schema element.
type RsvpteRouterPathMapAny struct {
	*ygnmi.NodePath
}

// Counters (container): Counters of an individual RSVP-TE router.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/counters"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters"
func (n *RsvpteRouterPath) Counters() *RsvpteRouter_CountersPath {
	ps := &RsvpteRouter_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Counters of an individual RSVP-TE router.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/counters"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters"
func (n *RsvpteRouterPathAny) Counters() *RsvpteRouter_CountersPathAny {
	ps := &RsvpteRouter_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LabelSwitchedPathDatabase (container): This sub-module describes a YANG model for the RSVP Label Switched Path
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/label-switched-path-database"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database"
func (n *RsvpteRouterPath) LabelSwitchedPathDatabase() *RsvpteRouter_LabelSwitchedPathDatabasePath {
	ps := &RsvpteRouter_LabelSwitchedPathDatabasePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "label-switched-path-database"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LabelSwitchedPathDatabase (container): This sub-module describes a YANG model for the RSVP Label Switched Path
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/label-switched-path-database"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database"
func (n *RsvpteRouterPathAny) LabelSwitchedPathDatabase() *RsvpteRouter_LabelSwitchedPathDatabasePathAny {
	ps := &RsvpteRouter_LabelSwitchedPathDatabasePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "label-switched-path-database"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Name (leaf): An arbitrary name of the RSVP-TE router determined by the ATE
// configuration.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "*/name"
//	Path from root:       "/rsvpte-routers/rsvpte-router/*/name"
func (n *RsvpteRouterPath) Name() *RsvpteRouter_NamePath {
	ps := &RsvpteRouter_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): An arbitrary name of the RSVP-TE router determined by the ATE
// configuration.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "*/name"
//	Path from root:       "/rsvpte-routers/rsvpte-router/*/name"
func (n *RsvpteRouterPathAny) Name() *RsvpteRouter_NamePathAny {
	ps := &RsvpteRouter_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *RsvpteRouterPath) State() ygnmi.SingletonQuery[*oc.RsvpteRouter] {
	return ygnmi.NewSingletonQuery[*oc.RsvpteRouter](
		"RsvpteRouter",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RsvpteRouterPathAny) State() ygnmi.WildcardQuery[*oc.RsvpteRouter] {
	return ygnmi.NewWildcardQuery[*oc.RsvpteRouter](
		"RsvpteRouter",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_Counters_EgressP2PLspsUpPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/egress-p2p-lsps-up YANG schema element.
type RsvpteRouter_Counters_EgressP2PLspsUpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_Counters_EgressP2PLspsUpPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/egress-p2p-lsps-up YANG schema element.
type RsvpteRouter_Counters_EgressP2PLspsUpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "egress-p2p-lsps-up"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/egress-p2p-lsps-up"
func (n *RsvpteRouter_Counters_EgressP2PLspsUpPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"egress-p2p-lsps-up"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).EgressP2PLspsUp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "egress-p2p-lsps-up"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/egress-p2p-lsps-up"
func (n *RsvpteRouter_Counters_EgressP2PLspsUpPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"egress-p2p-lsps-up"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).EgressP2PLspsUp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_Counters_InAcksPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/in-acks YANG schema element.
type RsvpteRouter_Counters_InAcksPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_Counters_InAcksPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/in-acks YANG schema element.
type RsvpteRouter_Counters_InAcksPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-acks"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-acks"
func (n *RsvpteRouter_Counters_InAcksPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-acks"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).InAcks
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-acks"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-acks"
func (n *RsvpteRouter_Counters_InAcksPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-acks"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).InAcks
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_Counters_InBundlesPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/in-bundles YANG schema element.
type RsvpteRouter_Counters_InBundlesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_Counters_InBundlesPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/in-bundles YANG schema element.
type RsvpteRouter_Counters_InBundlesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-bundles"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-bundles"
func (n *RsvpteRouter_Counters_InBundlesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-bundles"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).InBundles
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-bundles"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-bundles"
func (n *RsvpteRouter_Counters_InBundlesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-bundles"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).InBundles
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_Counters_InHellosPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/in-hellos YANG schema element.
type RsvpteRouter_Counters_InHellosPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_Counters_InHellosPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/in-hellos YANG schema element.
type RsvpteRouter_Counters_InHellosPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-hellos"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-hellos"
func (n *RsvpteRouter_Counters_InHellosPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-hellos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).InHellos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-hellos"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-hellos"
func (n *RsvpteRouter_Counters_InHellosPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-hellos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).InHellos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_Counters_InNacksPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/in-nacks YANG schema element.
type RsvpteRouter_Counters_InNacksPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_Counters_InNacksPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/in-nacks YANG schema element.
type RsvpteRouter_Counters_InNacksPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-nacks"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-nacks"
func (n *RsvpteRouter_Counters_InNacksPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-nacks"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).InNacks
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-nacks"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-nacks"
func (n *RsvpteRouter_Counters_InNacksPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-nacks"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).InNacks
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_Counters_InPathErrorsPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/in-path-errors YANG schema element.
type RsvpteRouter_Counters_InPathErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_Counters_InPathErrorsPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/in-path-errors YANG schema element.
type RsvpteRouter_Counters_InPathErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-path-errors"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-path-errors"
func (n *RsvpteRouter_Counters_InPathErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-path-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).InPathErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-path-errors"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-path-errors"
func (n *RsvpteRouter_Counters_InPathErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-path-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).InPathErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_Counters_InPathTearsPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/in-path-tears YANG schema element.
type RsvpteRouter_Counters_InPathTearsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_Counters_InPathTearsPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/in-path-tears YANG schema element.
type RsvpteRouter_Counters_InPathTearsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-path-tears"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-path-tears"
func (n *RsvpteRouter_Counters_InPathTearsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-path-tears"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).InPathTears
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-path-tears"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-path-tears"
func (n *RsvpteRouter_Counters_InPathTearsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-path-tears"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).InPathTears
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_Counters_InPathsPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/in-paths YANG schema element.
type RsvpteRouter_Counters_InPathsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_Counters_InPathsPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/in-paths YANG schema element.
type RsvpteRouter_Counters_InPathsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-paths"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-paths"
func (n *RsvpteRouter_Counters_InPathsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-paths"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).InPaths
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-paths"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-paths"
func (n *RsvpteRouter_Counters_InPathsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-paths"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).InPaths
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_Counters_InResvConfsPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/in-resv-confs YANG schema element.
type RsvpteRouter_Counters_InResvConfsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_Counters_InResvConfsPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/in-resv-confs YANG schema element.
type RsvpteRouter_Counters_InResvConfsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-resv-confs"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-resv-confs"
func (n *RsvpteRouter_Counters_InResvConfsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-resv-confs"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).InResvConfs
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-resv-confs"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-resv-confs"
func (n *RsvpteRouter_Counters_InResvConfsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-resv-confs"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).InResvConfs
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_Counters_InResvErrorsPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/in-resv-errors YANG schema element.
type RsvpteRouter_Counters_InResvErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_Counters_InResvErrorsPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/in-resv-errors YANG schema element.
type RsvpteRouter_Counters_InResvErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-resv-errors"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-resv-errors"
func (n *RsvpteRouter_Counters_InResvErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-resv-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).InResvErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-resv-errors"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-resv-errors"
func (n *RsvpteRouter_Counters_InResvErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-resv-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).InResvErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_Counters_InResvTearsPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/in-resv-tears YANG schema element.
type RsvpteRouter_Counters_InResvTearsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_Counters_InResvTearsPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/in-resv-tears YANG schema element.
type RsvpteRouter_Counters_InResvTearsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-resv-tears"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-resv-tears"
func (n *RsvpteRouter_Counters_InResvTearsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-resv-tears"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).InResvTears
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-resv-tears"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-resv-tears"
func (n *RsvpteRouter_Counters_InResvTearsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-resv-tears"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).InResvTears
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_Counters_InResvsPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/in-resvs YANG schema element.
type RsvpteRouter_Counters_InResvsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_Counters_InResvsPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/in-resvs YANG schema element.
type RsvpteRouter_Counters_InResvsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-resvs"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-resvs"
func (n *RsvpteRouter_Counters_InResvsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-resvs"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).InResvs
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-resvs"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-resvs"
func (n *RsvpteRouter_Counters_InResvsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-resvs"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).InResvs
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_Counters_InSrefreshsPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/in-srefreshs YANG schema element.
type RsvpteRouter_Counters_InSrefreshsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_Counters_InSrefreshsPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/in-srefreshs YANG schema element.
type RsvpteRouter_Counters_InSrefreshsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-srefreshs"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-srefreshs"
func (n *RsvpteRouter_Counters_InSrefreshsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-srefreshs"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).InSrefreshs
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-srefreshs"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-srefreshs"
func (n *RsvpteRouter_Counters_InSrefreshsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-srefreshs"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).InSrefreshs
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_Counters_IngressP2PLspsConfiguredPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/ingress-p2p-lsps-configured YANG schema element.
type RsvpteRouter_Counters_IngressP2PLspsConfiguredPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_Counters_IngressP2PLspsConfiguredPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/ingress-p2p-lsps-configured YANG schema element.
type RsvpteRouter_Counters_IngressP2PLspsConfiguredPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "ingress-p2p-lsps-configured"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/ingress-p2p-lsps-configured"
func (n *RsvpteRouter_Counters_IngressP2PLspsConfiguredPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"ingress-p2p-lsps-configured"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).IngressP2PLspsConfigured
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "ingress-p2p-lsps-configured"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/ingress-p2p-lsps-configured"
func (n *RsvpteRouter_Counters_IngressP2PLspsConfiguredPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"ingress-p2p-lsps-configured"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).IngressP2PLspsConfigured
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_Counters_IngressP2PLspsUpPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/ingress-p2p-lsps-up YANG schema element.
type RsvpteRouter_Counters_IngressP2PLspsUpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_Counters_IngressP2PLspsUpPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/ingress-p2p-lsps-up YANG schema element.
type RsvpteRouter_Counters_IngressP2PLspsUpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "ingress-p2p-lsps-up"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/ingress-p2p-lsps-up"
func (n *RsvpteRouter_Counters_IngressP2PLspsUpPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"ingress-p2p-lsps-up"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).IngressP2PLspsUp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "ingress-p2p-lsps-up"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/ingress-p2p-lsps-up"
func (n *RsvpteRouter_Counters_IngressP2PLspsUpPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"ingress-p2p-lsps-up"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).IngressP2PLspsUp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_Counters_LspFlapsPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/lsp-flaps YANG schema element.
type RsvpteRouter_Counters_LspFlapsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_Counters_LspFlapsPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/lsp-flaps YANG schema element.
type RsvpteRouter_Counters_LspFlapsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "lsp-flaps"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/lsp-flaps"
func (n *RsvpteRouter_Counters_LspFlapsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"lsp-flaps"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).LspFlaps
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "lsp-flaps"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/lsp-flaps"
func (n *RsvpteRouter_Counters_LspFlapsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"lsp-flaps"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).LspFlaps
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_Counters_OutAcksPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/out-acks YANG schema element.
type RsvpteRouter_Counters_OutAcksPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_Counters_OutAcksPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/out-acks YANG schema element.
type RsvpteRouter_Counters_OutAcksPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-acks"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-acks"
func (n *RsvpteRouter_Counters_OutAcksPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-acks"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).OutAcks
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-acks"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-acks"
func (n *RsvpteRouter_Counters_OutAcksPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-acks"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).OutAcks
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_Counters_OutBundlesPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/out-bundles YANG schema element.
type RsvpteRouter_Counters_OutBundlesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_Counters_OutBundlesPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/out-bundles YANG schema element.
type RsvpteRouter_Counters_OutBundlesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-bundles"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-bundles"
func (n *RsvpteRouter_Counters_OutBundlesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-bundles"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).OutBundles
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-bundles"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-bundles"
func (n *RsvpteRouter_Counters_OutBundlesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-bundles"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).OutBundles
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_Counters_OutHellosPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/out-hellos YANG schema element.
type RsvpteRouter_Counters_OutHellosPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_Counters_OutHellosPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/out-hellos YANG schema element.
type RsvpteRouter_Counters_OutHellosPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-hellos"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-hellos"
func (n *RsvpteRouter_Counters_OutHellosPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-hellos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).OutHellos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-hellos"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-hellos"
func (n *RsvpteRouter_Counters_OutHellosPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-hellos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).OutHellos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_Counters_OutNacksPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/out-nacks YANG schema element.
type RsvpteRouter_Counters_OutNacksPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_Counters_OutNacksPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/out-nacks YANG schema element.
type RsvpteRouter_Counters_OutNacksPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-nacks"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-nacks"
func (n *RsvpteRouter_Counters_OutNacksPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-nacks"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).OutNacks
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-nacks"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-nacks"
func (n *RsvpteRouter_Counters_OutNacksPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-nacks"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).OutNacks
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_Counters_OutPathErrorsPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/out-path-errors YANG schema element.
type RsvpteRouter_Counters_OutPathErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_Counters_OutPathErrorsPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/out-path-errors YANG schema element.
type RsvpteRouter_Counters_OutPathErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-path-errors"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-path-errors"
func (n *RsvpteRouter_Counters_OutPathErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-path-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).OutPathErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-path-errors"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-path-errors"
func (n *RsvpteRouter_Counters_OutPathErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-path-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).OutPathErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_Counters_OutPathReevaluationReqsPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/out-path-reevaluation-reqs YANG schema element.
type RsvpteRouter_Counters_OutPathReevaluationReqsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_Counters_OutPathReevaluationReqsPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/out-path-reevaluation-reqs YANG schema element.
type RsvpteRouter_Counters_OutPathReevaluationReqsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-path-reevaluation-reqs"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-path-reevaluation-reqs"
func (n *RsvpteRouter_Counters_OutPathReevaluationReqsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-path-reevaluation-reqs"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).OutPathReevaluationReqs
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-path-reevaluation-reqs"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-path-reevaluation-reqs"
func (n *RsvpteRouter_Counters_OutPathReevaluationReqsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-path-reevaluation-reqs"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).OutPathReevaluationReqs
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_Counters_OutPathTearsPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/out-path-tears YANG schema element.
type RsvpteRouter_Counters_OutPathTearsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_Counters_OutPathTearsPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/out-path-tears YANG schema element.
type RsvpteRouter_Counters_OutPathTearsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-path-tears"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-path-tears"
func (n *RsvpteRouter_Counters_OutPathTearsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-path-tears"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).OutPathTears
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-path-tears"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-path-tears"
func (n *RsvpteRouter_Counters_OutPathTearsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-path-tears"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).OutPathTears
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_Counters_OutPathsPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/out-paths YANG schema element.
type RsvpteRouter_Counters_OutPathsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_Counters_OutPathsPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/out-paths YANG schema element.
type RsvpteRouter_Counters_OutPathsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-paths"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-paths"
func (n *RsvpteRouter_Counters_OutPathsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-paths"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).OutPaths
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-paths"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-paths"
func (n *RsvpteRouter_Counters_OutPathsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-paths"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).OutPaths
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_Counters_OutResvConfsPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/out-resv-confs YANG schema element.
type RsvpteRouter_Counters_OutResvConfsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_Counters_OutResvConfsPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/out-resv-confs YANG schema element.
type RsvpteRouter_Counters_OutResvConfsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-resv-confs"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-resv-confs"
func (n *RsvpteRouter_Counters_OutResvConfsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-resv-confs"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).OutResvConfs
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-resv-confs"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-resv-confs"
func (n *RsvpteRouter_Counters_OutResvConfsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-resv-confs"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).OutResvConfs
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_Counters_OutResvErrorsPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/out-resv-errors YANG schema element.
type RsvpteRouter_Counters_OutResvErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_Counters_OutResvErrorsPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/out-resv-errors YANG schema element.
type RsvpteRouter_Counters_OutResvErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-resv-errors"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-resv-errors"
func (n *RsvpteRouter_Counters_OutResvErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-resv-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).OutResvErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-resv-errors"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-resv-errors"
func (n *RsvpteRouter_Counters_OutResvErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-resv-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).OutResvErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_Counters_OutResvTearsPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/out-resv-tears YANG schema element.
type RsvpteRouter_Counters_OutResvTearsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_Counters_OutResvTearsPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/out-resv-tears YANG schema element.
type RsvpteRouter_Counters_OutResvTearsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-resv-tears"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-resv-tears"
func (n *RsvpteRouter_Counters_OutResvTearsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-resv-tears"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).OutResvTears
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-resv-tears"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-resv-tears"
func (n *RsvpteRouter_Counters_OutResvTearsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-resv-tears"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).OutResvTears
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_Counters_OutResvsPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/out-resvs YANG schema element.
type RsvpteRouter_Counters_OutResvsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_Counters_OutResvsPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/out-resvs YANG schema element.
type RsvpteRouter_Counters_OutResvsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-resvs"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-resvs"
func (n *RsvpteRouter_Counters_OutResvsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-resvs"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).OutResvs
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-resvs"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-resvs"
func (n *RsvpteRouter_Counters_OutResvsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-resvs"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).OutResvs
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_Counters_OutSrefreshsPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/out-srefreshs YANG schema element.
type RsvpteRouter_Counters_OutSrefreshsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_Counters_OutSrefreshsPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/out-srefreshs YANG schema element.
type RsvpteRouter_Counters_OutSrefreshsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-srefreshs"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-srefreshs"
func (n *RsvpteRouter_Counters_OutSrefreshsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-srefreshs"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).OutSrefreshs
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-srefreshs"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-srefreshs"
func (n *RsvpteRouter_Counters_OutSrefreshsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-srefreshs"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).OutSrefreshs
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_Counters_PathReoptimizationsPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/path-reoptimizations YANG schema element.
type RsvpteRouter_Counters_PathReoptimizationsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_Counters_PathReoptimizationsPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters/path-reoptimizations YANG schema element.
type RsvpteRouter_Counters_PathReoptimizationsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "path-reoptimizations"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/path-reoptimizations"
func (n *RsvpteRouter_Counters_PathReoptimizationsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"path-reoptimizations"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).PathReoptimizations
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "path-reoptimizations"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/path-reoptimizations"
func (n *RsvpteRouter_Counters_PathReoptimizationsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RsvpteRouter_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"path-reoptimizations"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_Counters).PathReoptimizations
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_CountersPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters YANG schema element.
type RsvpteRouter_CountersPath struct {
	*ygnmi.NodePath
}

// RsvpteRouter_CountersPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters YANG schema element.
type RsvpteRouter_CountersPathAny struct {
	*ygnmi.NodePath
}

// EgressP2PLspsUp (leaf): The number of egress lsps that are currently up.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "egress-p2p-lsps-up"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/egress-p2p-lsps-up"
func (n *RsvpteRouter_CountersPath) EgressP2PLspsUp() *RsvpteRouter_Counters_EgressP2PLspsUpPath {
	ps := &RsvpteRouter_Counters_EgressP2PLspsUpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"egress-p2p-lsps-up"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EgressP2PLspsUp (leaf): The number of egress lsps that are currently up.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "egress-p2p-lsps-up"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/egress-p2p-lsps-up"
func (n *RsvpteRouter_CountersPathAny) EgressP2PLspsUp() *RsvpteRouter_Counters_EgressP2PLspsUpPathAny {
	ps := &RsvpteRouter_Counters_EgressP2PLspsUpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"egress-p2p-lsps-up"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InAcks (leaf): The number of received RSVP refresh reduction ack messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-acks"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-acks"
func (n *RsvpteRouter_CountersPath) InAcks() *RsvpteRouter_Counters_InAcksPath {
	ps := &RsvpteRouter_Counters_InAcksPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-acks"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InAcks (leaf): The number of received RSVP refresh reduction ack messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-acks"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-acks"
func (n *RsvpteRouter_CountersPathAny) InAcks() *RsvpteRouter_Counters_InAcksPathAny {
	ps := &RsvpteRouter_Counters_InAcksPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-acks"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InBundles (leaf): The number of received RSVP bundle messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-bundles"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-bundles"
func (n *RsvpteRouter_CountersPath) InBundles() *RsvpteRouter_Counters_InBundlesPath {
	ps := &RsvpteRouter_Counters_InBundlesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-bundles"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InBundles (leaf): The number of received RSVP bundle messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-bundles"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-bundles"
func (n *RsvpteRouter_CountersPathAny) InBundles() *RsvpteRouter_Counters_InBundlesPathAny {
	ps := &RsvpteRouter_Counters_InBundlesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-bundles"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InHellos (leaf): The number of received RSVP hello messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-hellos"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-hellos"
func (n *RsvpteRouter_CountersPath) InHellos() *RsvpteRouter_Counters_InHellosPath {
	ps := &RsvpteRouter_Counters_InHellosPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-hellos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InHellos (leaf): The number of received RSVP hello messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-hellos"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-hellos"
func (n *RsvpteRouter_CountersPathAny) InHellos() *RsvpteRouter_Counters_InHellosPathAny {
	ps := &RsvpteRouter_Counters_InHellosPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-hellos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InNacks (leaf): The number of received RSVP refresh reduction nack messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-nacks"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-nacks"
func (n *RsvpteRouter_CountersPath) InNacks() *RsvpteRouter_Counters_InNacksPath {
	ps := &RsvpteRouter_Counters_InNacksPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-nacks"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InNacks (leaf): The number of received RSVP refresh reduction nack messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-nacks"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-nacks"
func (n *RsvpteRouter_CountersPathAny) InNacks() *RsvpteRouter_Counters_InNacksPathAny {
	ps := &RsvpteRouter_Counters_InNacksPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-nacks"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPathErrors (leaf): The number of received RSVP path error messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-path-errors"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-path-errors"
func (n *RsvpteRouter_CountersPath) InPathErrors() *RsvpteRouter_Counters_InPathErrorsPath {
	ps := &RsvpteRouter_Counters_InPathErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-path-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPathErrors (leaf): The number of received RSVP path error messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-path-errors"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-path-errors"
func (n *RsvpteRouter_CountersPathAny) InPathErrors() *RsvpteRouter_Counters_InPathErrorsPathAny {
	ps := &RsvpteRouter_Counters_InPathErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-path-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPathTears (leaf): The number of received RSVP path tear messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-path-tears"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-path-tears"
func (n *RsvpteRouter_CountersPath) InPathTears() *RsvpteRouter_Counters_InPathTearsPath {
	ps := &RsvpteRouter_Counters_InPathTearsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-path-tears"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPathTears (leaf): The number of received RSVP path tear messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-path-tears"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-path-tears"
func (n *RsvpteRouter_CountersPathAny) InPathTears() *RsvpteRouter_Counters_InPathTearsPathAny {
	ps := &RsvpteRouter_Counters_InPathTearsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-path-tears"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPaths (leaf): The number of received RSVP path messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-paths"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-paths"
func (n *RsvpteRouter_CountersPath) InPaths() *RsvpteRouter_Counters_InPathsPath {
	ps := &RsvpteRouter_Counters_InPathsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-paths"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPaths (leaf): The number of received RSVP path messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-paths"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-paths"
func (n *RsvpteRouter_CountersPathAny) InPaths() *RsvpteRouter_Counters_InPathsPathAny {
	ps := &RsvpteRouter_Counters_InPathsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-paths"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InResvConfs (leaf): The number of received RSVP resv conf messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-resv-confs"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-resv-confs"
func (n *RsvpteRouter_CountersPath) InResvConfs() *RsvpteRouter_Counters_InResvConfsPath {
	ps := &RsvpteRouter_Counters_InResvConfsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-resv-confs"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InResvConfs (leaf): The number of received RSVP resv conf messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-resv-confs"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-resv-confs"
func (n *RsvpteRouter_CountersPathAny) InResvConfs() *RsvpteRouter_Counters_InResvConfsPathAny {
	ps := &RsvpteRouter_Counters_InResvConfsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-resv-confs"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InResvErrors (leaf): The number of received RSVP resv error messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-resv-errors"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-resv-errors"
func (n *RsvpteRouter_CountersPath) InResvErrors() *RsvpteRouter_Counters_InResvErrorsPath {
	ps := &RsvpteRouter_Counters_InResvErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-resv-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InResvErrors (leaf): The number of received RSVP resv error messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-resv-errors"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-resv-errors"
func (n *RsvpteRouter_CountersPathAny) InResvErrors() *RsvpteRouter_Counters_InResvErrorsPathAny {
	ps := &RsvpteRouter_Counters_InResvErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-resv-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InResvTears (leaf): The number of received RSVP resv tear messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-resv-tears"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-resv-tears"
func (n *RsvpteRouter_CountersPath) InResvTears() *RsvpteRouter_Counters_InResvTearsPath {
	ps := &RsvpteRouter_Counters_InResvTearsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-resv-tears"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InResvTears (leaf): The number of received RSVP resv tear messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-resv-tears"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-resv-tears"
func (n *RsvpteRouter_CountersPathAny) InResvTears() *RsvpteRouter_Counters_InResvTearsPathAny {
	ps := &RsvpteRouter_Counters_InResvTearsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-resv-tears"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InResvs (leaf): The number of received RSVP resv messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-resvs"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-resvs"
func (n *RsvpteRouter_CountersPath) InResvs() *RsvpteRouter_Counters_InResvsPath {
	ps := &RsvpteRouter_Counters_InResvsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-resvs"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InResvs (leaf): The number of received RSVP resv messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-resvs"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-resvs"
func (n *RsvpteRouter_CountersPathAny) InResvs() *RsvpteRouter_Counters_InResvsPathAny {
	ps := &RsvpteRouter_Counters_InResvsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-resvs"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InSrefreshs (leaf): The number of received RSVP summary refresh messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-srefreshs"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-srefreshs"
func (n *RsvpteRouter_CountersPath) InSrefreshs() *RsvpteRouter_Counters_InSrefreshsPath {
	ps := &RsvpteRouter_Counters_InSrefreshsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-srefreshs"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InSrefreshs (leaf): The number of received RSVP summary refresh messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "in-srefreshs"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/in-srefreshs"
func (n *RsvpteRouter_CountersPathAny) InSrefreshs() *RsvpteRouter_Counters_InSrefreshsPathAny {
	ps := &RsvpteRouter_Counters_InSrefreshsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-srefreshs"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IngressP2PLspsConfigured (leaf): The number of ingress lsps that are configured.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "ingress-p2p-lsps-configured"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/ingress-p2p-lsps-configured"
func (n *RsvpteRouter_CountersPath) IngressP2PLspsConfigured() *RsvpteRouter_Counters_IngressP2PLspsConfiguredPath {
	ps := &RsvpteRouter_Counters_IngressP2PLspsConfiguredPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ingress-p2p-lsps-configured"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IngressP2PLspsConfigured (leaf): The number of ingress lsps that are configured.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "ingress-p2p-lsps-configured"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/ingress-p2p-lsps-configured"
func (n *RsvpteRouter_CountersPathAny) IngressP2PLspsConfigured() *RsvpteRouter_Counters_IngressP2PLspsConfiguredPathAny {
	ps := &RsvpteRouter_Counters_IngressP2PLspsConfiguredPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ingress-p2p-lsps-configured"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IngressP2PLspsUp (leaf): The number of ingress lsps that are currently up.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "ingress-p2p-lsps-up"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/ingress-p2p-lsps-up"
func (n *RsvpteRouter_CountersPath) IngressP2PLspsUp() *RsvpteRouter_Counters_IngressP2PLspsUpPath {
	ps := &RsvpteRouter_Counters_IngressP2PLspsUpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ingress-p2p-lsps-up"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IngressP2PLspsUp (leaf): The number of ingress lsps that are currently up.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "ingress-p2p-lsps-up"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/ingress-p2p-lsps-up"
func (n *RsvpteRouter_CountersPathAny) IngressP2PLspsUp() *RsvpteRouter_Counters_IngressP2PLspsUpPathAny {
	ps := &RsvpteRouter_Counters_IngressP2PLspsUpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ingress-p2p-lsps-up"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LspFlaps (leaf): The number of times an lsp went from up to down state.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "lsp-flaps"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/lsp-flaps"
func (n *RsvpteRouter_CountersPath) LspFlaps() *RsvpteRouter_Counters_LspFlapsPath {
	ps := &RsvpteRouter_Counters_LspFlapsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"lsp-flaps"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LspFlaps (leaf): The number of times an lsp went from up to down state.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "lsp-flaps"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/lsp-flaps"
func (n *RsvpteRouter_CountersPathAny) LspFlaps() *RsvpteRouter_Counters_LspFlapsPathAny {
	ps := &RsvpteRouter_Counters_LspFlapsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lsp-flaps"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutAcks (leaf): The number of sent RSVP refresh reduction ack messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-acks"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-acks"
func (n *RsvpteRouter_CountersPath) OutAcks() *RsvpteRouter_Counters_OutAcksPath {
	ps := &RsvpteRouter_Counters_OutAcksPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-acks"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutAcks (leaf): The number of sent RSVP refresh reduction ack messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-acks"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-acks"
func (n *RsvpteRouter_CountersPathAny) OutAcks() *RsvpteRouter_Counters_OutAcksPathAny {
	ps := &RsvpteRouter_Counters_OutAcksPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-acks"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutBundles (leaf): The number of sent RSVP bundle messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-bundles"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-bundles"
func (n *RsvpteRouter_CountersPath) OutBundles() *RsvpteRouter_Counters_OutBundlesPath {
	ps := &RsvpteRouter_Counters_OutBundlesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-bundles"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutBundles (leaf): The number of sent RSVP bundle messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-bundles"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-bundles"
func (n *RsvpteRouter_CountersPathAny) OutBundles() *RsvpteRouter_Counters_OutBundlesPathAny {
	ps := &RsvpteRouter_Counters_OutBundlesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-bundles"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutHellos (leaf): The number of sent RSVP hello messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-hellos"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-hellos"
func (n *RsvpteRouter_CountersPath) OutHellos() *RsvpteRouter_Counters_OutHellosPath {
	ps := &RsvpteRouter_Counters_OutHellosPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-hellos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutHellos (leaf): The number of sent RSVP hello messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-hellos"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-hellos"
func (n *RsvpteRouter_CountersPathAny) OutHellos() *RsvpteRouter_Counters_OutHellosPathAny {
	ps := &RsvpteRouter_Counters_OutHellosPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-hellos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutNacks (leaf): The number of sent RSVP refresh reduction nack messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-nacks"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-nacks"
func (n *RsvpteRouter_CountersPath) OutNacks() *RsvpteRouter_Counters_OutNacksPath {
	ps := &RsvpteRouter_Counters_OutNacksPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-nacks"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutNacks (leaf): The number of sent RSVP refresh reduction nack messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-nacks"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-nacks"
func (n *RsvpteRouter_CountersPathAny) OutNacks() *RsvpteRouter_Counters_OutNacksPathAny {
	ps := &RsvpteRouter_Counters_OutNacksPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-nacks"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPathErrors (leaf): The number of sent RSVP path error messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-path-errors"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-path-errors"
func (n *RsvpteRouter_CountersPath) OutPathErrors() *RsvpteRouter_Counters_OutPathErrorsPath {
	ps := &RsvpteRouter_Counters_OutPathErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-path-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPathErrors (leaf): The number of sent RSVP path error messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-path-errors"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-path-errors"
func (n *RsvpteRouter_CountersPathAny) OutPathErrors() *RsvpteRouter_Counters_OutPathErrorsPathAny {
	ps := &RsvpteRouter_Counters_OutPathErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-path-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPathReevaluationReqs (leaf): The number of sent RSVP path messages with path re-evaluation request enabled.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-path-reevaluation-reqs"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-path-reevaluation-reqs"
func (n *RsvpteRouter_CountersPath) OutPathReevaluationReqs() *RsvpteRouter_Counters_OutPathReevaluationReqsPath {
	ps := &RsvpteRouter_Counters_OutPathReevaluationReqsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-path-reevaluation-reqs"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPathReevaluationReqs (leaf): The number of sent RSVP path messages with path re-evaluation request enabled.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-path-reevaluation-reqs"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-path-reevaluation-reqs"
func (n *RsvpteRouter_CountersPathAny) OutPathReevaluationReqs() *RsvpteRouter_Counters_OutPathReevaluationReqsPathAny {
	ps := &RsvpteRouter_Counters_OutPathReevaluationReqsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-path-reevaluation-reqs"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPathTears (leaf): The number of sent RSVP path tear messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-path-tears"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-path-tears"
func (n *RsvpteRouter_CountersPath) OutPathTears() *RsvpteRouter_Counters_OutPathTearsPath {
	ps := &RsvpteRouter_Counters_OutPathTearsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-path-tears"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPathTears (leaf): The number of sent RSVP path tear messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-path-tears"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-path-tears"
func (n *RsvpteRouter_CountersPathAny) OutPathTears() *RsvpteRouter_Counters_OutPathTearsPathAny {
	ps := &RsvpteRouter_Counters_OutPathTearsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-path-tears"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPaths (leaf): The number of sent RSVP path messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-paths"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-paths"
func (n *RsvpteRouter_CountersPath) OutPaths() *RsvpteRouter_Counters_OutPathsPath {
	ps := &RsvpteRouter_Counters_OutPathsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-paths"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPaths (leaf): The number of sent RSVP path messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-paths"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-paths"
func (n *RsvpteRouter_CountersPathAny) OutPaths() *RsvpteRouter_Counters_OutPathsPathAny {
	ps := &RsvpteRouter_Counters_OutPathsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-paths"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutResvConfs (leaf): The number of sent RSVP resv conf messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-resv-confs"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-resv-confs"
func (n *RsvpteRouter_CountersPath) OutResvConfs() *RsvpteRouter_Counters_OutResvConfsPath {
	ps := &RsvpteRouter_Counters_OutResvConfsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-resv-confs"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutResvConfs (leaf): The number of sent RSVP resv conf messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-resv-confs"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-resv-confs"
func (n *RsvpteRouter_CountersPathAny) OutResvConfs() *RsvpteRouter_Counters_OutResvConfsPathAny {
	ps := &RsvpteRouter_Counters_OutResvConfsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-resv-confs"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutResvErrors (leaf): The number of sent RSVP resv error messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-resv-errors"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-resv-errors"
func (n *RsvpteRouter_CountersPath) OutResvErrors() *RsvpteRouter_Counters_OutResvErrorsPath {
	ps := &RsvpteRouter_Counters_OutResvErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-resv-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutResvErrors (leaf): The number of sent RSVP resv error messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-resv-errors"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-resv-errors"
func (n *RsvpteRouter_CountersPathAny) OutResvErrors() *RsvpteRouter_Counters_OutResvErrorsPathAny {
	ps := &RsvpteRouter_Counters_OutResvErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-resv-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutResvTears (leaf): The number of sent RSVP resv tear messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-resv-tears"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-resv-tears"
func (n *RsvpteRouter_CountersPath) OutResvTears() *RsvpteRouter_Counters_OutResvTearsPath {
	ps := &RsvpteRouter_Counters_OutResvTearsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-resv-tears"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutResvTears (leaf): The number of sent RSVP resv tear messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-resv-tears"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-resv-tears"
func (n *RsvpteRouter_CountersPathAny) OutResvTears() *RsvpteRouter_Counters_OutResvTearsPathAny {
	ps := &RsvpteRouter_Counters_OutResvTearsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-resv-tears"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutResvs (leaf): The number of sent RSVP resv messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-resvs"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-resvs"
func (n *RsvpteRouter_CountersPath) OutResvs() *RsvpteRouter_Counters_OutResvsPath {
	ps := &RsvpteRouter_Counters_OutResvsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-resvs"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutResvs (leaf): The number of sent RSVP resv messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-resvs"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-resvs"
func (n *RsvpteRouter_CountersPathAny) OutResvs() *RsvpteRouter_Counters_OutResvsPathAny {
	ps := &RsvpteRouter_Counters_OutResvsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-resvs"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutSrefreshs (leaf): The number of sent RSVP summary refresh messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-srefreshs"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-srefreshs"
func (n *RsvpteRouter_CountersPath) OutSrefreshs() *RsvpteRouter_Counters_OutSrefreshsPath {
	ps := &RsvpteRouter_Counters_OutSrefreshsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-srefreshs"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutSrefreshs (leaf): The number of sent RSVP summary refresh messages.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "out-srefreshs"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/out-srefreshs"
func (n *RsvpteRouter_CountersPathAny) OutSrefreshs() *RsvpteRouter_Counters_OutSrefreshsPathAny {
	ps := &RsvpteRouter_Counters_OutSrefreshsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-srefreshs"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathReoptimizations (leaf): The number of successfully completed make before break operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "path-reoptimizations"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/path-reoptimizations"
func (n *RsvpteRouter_CountersPath) PathReoptimizations() *RsvpteRouter_Counters_PathReoptimizationsPath {
	ps := &RsvpteRouter_Counters_PathReoptimizationsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-reoptimizations"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathReoptimizations (leaf): The number of successfully completed make before break operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "path-reoptimizations"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/counters/path-reoptimizations"
func (n *RsvpteRouter_CountersPathAny) PathReoptimizations() *RsvpteRouter_Counters_PathReoptimizationsPathAny {
	ps := &RsvpteRouter_Counters_PathReoptimizationsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-reoptimizations"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RsvpteRouter_CountersPath) State() ygnmi.SingletonQuery[*oc.RsvpteRouter_Counters] {
	return ygnmi.NewSingletonQuery[*oc.RsvpteRouter_Counters](
		"RsvpteRouter_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RsvpteRouter_CountersPathAny) State() ygnmi.WildcardQuery[*oc.RsvpteRouter_Counters] {
	return ygnmi.NewWildcardQuery[*oc.RsvpteRouter_Counters](
		"RsvpteRouter_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_LabelSwitchedPathDatabasePath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabasePath struct {
	*ygnmi.NodePath
}

// RsvpteRouter_LabelSwitchedPathDatabasePathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabasePathAny struct {
	*ygnmi.NodePath
}

// Ipv4LspAny (list): A list of IPv4 RSVP-TE Discovered LSPs.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "lsps/ipv4-lsp"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp"
func (n *RsvpteRouter_LabelSwitchedPathDatabasePath) Ipv4LspAny() *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPathAny {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lsps", "ipv4-lsp"},
			map[string]interface{}{"source-address": "*", "destination-address": "*", "tunnel-id": "*", "lsp-id": "*"},
			n,
		),
	}
	return ps
}

// Ipv4LspAny (list): A list of IPv4 RSVP-TE Discovered LSPs.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "lsps/ipv4-lsp"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp"
func (n *RsvpteRouter_LabelSwitchedPathDatabasePathAny) Ipv4LspAny() *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPathAny {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lsps", "ipv4-lsp"},
			map[string]interface{}{"source-address": "*", "destination-address": "*", "tunnel-id": "*", "lsp-id": "*"},
			n,
		),
	}
	return ps
}

// WithSourceAddress sets RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPathAny's key "source-address" to the specified value.
// SourceAddress: string
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPathAny) WithSourceAddress(SourceAddress string) *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPathAny {
	ygnmi.ModifyKey(n.NodePath, "source-address", SourceAddress)
	return n
}

// WithDestinationAddress sets RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPathAny's key "destination-address" to the specified value.
// DestinationAddress: string
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPathAny) WithDestinationAddress(DestinationAddress string) *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPathAny {
	ygnmi.ModifyKey(n.NodePath, "destination-address", DestinationAddress)
	return n
}

// WithTunnelId sets RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPathAny's key "tunnel-id" to the specified value.
// TunnelId: uint16
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPathAny) WithTunnelId(TunnelId uint16) *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPathAny {
	ygnmi.ModifyKey(n.NodePath, "tunnel-id", TunnelId)
	return n
}

// WithLspId sets RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPathAny's key "lsp-id" to the specified value.
// LspId: uint16
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPathAny) WithLspId(LspId uint16) *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPathAny {
	ygnmi.ModifyKey(n.NodePath, "lsp-id", LspId)
	return n
}

// Ipv4Lsp (list): A list of IPv4 RSVP-TE Discovered LSPs.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "lsps/ipv4-lsp"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp"
//
//	SourceAddress: string
//	DestinationAddress: string
//	TunnelId: uint16
//	LspId: uint16
func (n *RsvpteRouter_LabelSwitchedPathDatabasePath) Ipv4Lsp(SourceAddress string, DestinationAddress string, TunnelId uint16, LspId uint16) *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPath {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"lsps", "ipv4-lsp"},
			map[string]interface{}{"source-address": SourceAddress, "destination-address": DestinationAddress, "tunnel-id": TunnelId, "lsp-id": LspId},
			n,
		),
	}
	return ps
}

// Ipv4Lsp (list): A list of IPv4 RSVP-TE Discovered LSPs.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "lsps/ipv4-lsp"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp"
//
//	SourceAddress: string
//	DestinationAddress: string
//	TunnelId: uint16
//	LspId: uint16
func (n *RsvpteRouter_LabelSwitchedPathDatabasePathAny) Ipv4Lsp(SourceAddress string, DestinationAddress string, TunnelId uint16, LspId uint16) *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPathAny {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lsps", "ipv4-lsp"},
			map[string]interface{}{"source-address": SourceAddress, "destination-address": DestinationAddress, "tunnel-id": TunnelId, "lsp-id": LspId},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RsvpteRouter_LabelSwitchedPathDatabasePath) State() ygnmi.SingletonQuery[*oc.RsvpteRouter_LabelSwitchedPathDatabase] {
	return ygnmi.NewSingletonQuery[*oc.RsvpteRouter_LabelSwitchedPathDatabase](
		"RsvpteRouter_LabelSwitchedPathDatabase",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RsvpteRouter_LabelSwitchedPathDatabasePathAny) State() ygnmi.WildcardQuery[*oc.RsvpteRouter_LabelSwitchedPathDatabase] {
	return ygnmi.NewWildcardQuery[*oc.RsvpteRouter_LabelSwitchedPathDatabase](
		"RsvpteRouter_LabelSwitchedPathDatabase",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_DestinationAddressPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/destination-address YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_DestinationAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_DestinationAddressPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/destination-address YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_DestinationAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/destination-address"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/destination-address"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_DestinationAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/destination-address"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/destination-address"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_DestinationAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "destination-address"
//	Path from root:       ""
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_DestinationAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "destination-address"
//	Path from root:       ""
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_DestinationAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LabelInPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/label-in YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LabelInPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LabelInPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/label-in YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LabelInPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/label-in"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/label-in"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LabelInPath) State() ygnmi.SingletonQuery[oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LabelIn_Union] {
	return ygnmi.NewSingletonQuery[oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LabelIn_Union](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "label-in"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LabelIn_Union, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp).LabelIn
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/label-in"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/label-in"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LabelInPathAny) State() ygnmi.WildcardQuery[oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LabelIn_Union] {
	return ygnmi.NewWildcardQuery[oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LabelIn_Union](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "label-in"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LabelIn_Union, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp).LabelIn
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LabelOutPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/label-out YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LabelOutPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LabelOutPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/label-out YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LabelOutPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/label-out"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/label-out"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LabelOutPath) State() ygnmi.SingletonQuery[oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LabelOut_Union] {
	return ygnmi.NewSingletonQuery[oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LabelOut_Union](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "label-out"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LabelOut_Union, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp).LabelOut
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/label-out"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/label-out"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LabelOutPathAny) State() ygnmi.WildcardQuery[oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LabelOut_Union] {
	return ygnmi.NewWildcardQuery[oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LabelOut_Union](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "label-out"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LabelOut_Union, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp).LabelOut
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LastFlapReasonPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/last-flap-reason YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LastFlapReasonPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LastFlapReasonPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/last-flap-reason YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LastFlapReasonPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/last-flap-reason"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/last-flap-reason"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LastFlapReasonPath) State() ygnmi.SingletonQuery[oc.E_Ipv4Lsp_LastFlapReason] {
	return ygnmi.NewSingletonQuery[oc.E_Ipv4Lsp_LastFlapReason](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-flap-reason"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ipv4Lsp_LastFlapReason, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp).LastFlapReason
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/last-flap-reason"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/last-flap-reason"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LastFlapReasonPathAny) State() ygnmi.WildcardQuery[oc.E_Ipv4Lsp_LastFlapReason] {
	return ygnmi.NewWildcardQuery[oc.E_Ipv4Lsp_LastFlapReason](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-flap-reason"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ipv4Lsp_LastFlapReason, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp).LastFlapReason
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LspIdPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/lsp-id YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LspIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LspIdPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/lsp-id YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LspIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/lsp-id"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/lsp-id"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LspIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lsp-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp).LspId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/lsp-id"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/lsp-id"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LspIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lsp-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp).LspId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "lsp-id"
//	Path from root:       ""
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LspIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"lsp-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp).LspId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "lsp-id"
//	Path from root:       ""
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LspIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"lsp-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp).LspId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_SessionNamePath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/session-name YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_SessionNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_SessionNamePathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/session-name YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_SessionNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/session-name"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/session-name"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_SessionNamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "session-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp).SessionName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/session-name"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/session-name"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_SessionNamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "session-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp).SessionName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_SessionStatusPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/session-status YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_SessionStatusPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_SessionStatusPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/session-status YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_SessionStatusPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/session-status"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/session-status"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_SessionStatusPath) State() ygnmi.SingletonQuery[oc.E_Ipv4Lsp_SessionStatus] {
	return ygnmi.NewSingletonQuery[oc.E_Ipv4Lsp_SessionStatus](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "session-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ipv4Lsp_SessionStatus, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp).SessionStatus
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/session-status"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/session-status"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_SessionStatusPathAny) State() ygnmi.WildcardQuery[oc.E_Ipv4Lsp_SessionStatus] {
	return ygnmi.NewWildcardQuery[oc.E_Ipv4Lsp_SessionStatus](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "session-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ipv4Lsp_SessionStatus, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp).SessionStatus
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_SourceAddressPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/source-address YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_SourceAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_SourceAddressPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/source-address YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_SourceAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/source-address"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/source-address"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_SourceAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/source-address"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/source-address"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_SourceAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "source-address"
//	Path from root:       ""
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_SourceAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "source-address"
//	Path from root:       ""
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_SourceAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_TunnelIdPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/tunnel-id YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_TunnelIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_TunnelIdPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/tunnel-id YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_TunnelIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/tunnel-id"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/tunnel-id"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_TunnelIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tunnel-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp).TunnelId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/tunnel-id"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/tunnel-id"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_TunnelIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tunnel-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp).TunnelId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "tunnel-id"
//	Path from root:       ""
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_TunnelIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"tunnel-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp).TunnelId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "tunnel-id"
//	Path from root:       ""
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_TunnelIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"tunnel-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp).TunnelId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_UpTimePath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/up-time YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_UpTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_UpTimePathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/up-time YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_UpTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/up-time"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/up-time"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_UpTimePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "up-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp).UpTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/up-time"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/up-time"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_UpTimePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "up-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp).UpTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPath struct {
	*ygnmi.NodePath
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPathAny struct {
	*ygnmi.NodePath
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPathMap represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPathMap struct {
	*ygnmi.NodePath
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPathMapAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPathMapAny struct {
	*ygnmi.NodePath
}

// DestinationAddress (leaf): The RSVP session destination address.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "*/destination-address"
//	Path from root:       "/rsvpte-routers/rsvpte-router/*/label-switched-path-database/lsps/ipv4-lsp/*/destination-address"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPath) DestinationAddress() *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_DestinationAddressPath {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_DestinationAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationAddress (leaf): The RSVP session destination address.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "*/destination-address"
//	Path from root:       "/rsvpte-routers/rsvpte-router/*/label-switched-path-database/lsps/ipv4-lsp/*/destination-address"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPathAny) DestinationAddress() *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_DestinationAddressPathAny {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_DestinationAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EroAny (list): List of MPLS ERO objects associated with the traffic engineering tunnel.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/ero"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/ero"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPath) EroAny() *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_EroPathAny {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_EroPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ero"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// EroAny (list): List of MPLS ERO objects associated with the traffic engineering tunnel.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/ero"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/ero"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPathAny) EroAny() *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_EroPathAny {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_EroPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ero"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// Ero (list): List of MPLS ERO objects associated with the traffic engineering tunnel.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/ero"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/ero"
//
//	Index: uint64
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPath) Ero(Index uint64) *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_EroPath {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_EroPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ero"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// Ero (list): List of MPLS ERO objects associated with the traffic engineering tunnel.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/ero"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/ero"
//
//	Index: uint64
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPathAny) Ero(Index uint64) *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_EroPathAny {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_EroPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ero"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// LabelIn (leaf): The label in.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/label-in"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/label-in"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPath) LabelIn() *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LabelInPath {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LabelInPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "label-in"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LabelIn (leaf): The label in.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/label-in"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/label-in"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPathAny) LabelIn() *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LabelInPathAny {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LabelInPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "label-in"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LabelOut (leaf): The label out.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/label-out"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/label-out"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPath) LabelOut() *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LabelOutPath {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LabelOutPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "label-out"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LabelOut (leaf): The label out.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/label-out"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/label-out"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPathAny) LabelOut() *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LabelOutPathAny {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LabelOutPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "label-out"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastFlapReason (leaf): The reason for the last flap of this RSVP session.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/last-flap-reason"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/last-flap-reason"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPath) LastFlapReason() *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LastFlapReasonPath {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LastFlapReasonPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-flap-reason"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastFlapReason (leaf): The reason for the last flap of this RSVP session.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/last-flap-reason"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/last-flap-reason"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPathAny) LastFlapReason() *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LastFlapReasonPathAny {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LastFlapReasonPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-flap-reason"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LspId (leaf): The lsp id.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "*/lsp-id"
//	Path from root:       "/rsvpte-routers/rsvpte-router/*/label-switched-path-database/lsps/ipv4-lsp/*/lsp-id"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPath) LspId() *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LspIdPath {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LspIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lsp-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LspId (leaf): The lsp id.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "*/lsp-id"
//	Path from root:       "/rsvpte-routers/rsvpte-router/*/label-switched-path-database/lsps/ipv4-lsp/*/lsp-id"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPathAny) LspId() *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LspIdPathAny {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LspIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lsp-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RroAny (list): List of MPLS RRO objects associated with the traffic engineering tunnel.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/rro"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/rro"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPath) RroAny() *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_RroPathAny {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_RroPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "rro"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// RroAny (list): List of MPLS RRO objects associated with the traffic engineering tunnel.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/rro"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/rro"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPathAny) RroAny() *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_RroPathAny {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_RroPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "rro"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// Rro (list): List of MPLS RRO objects associated with the traffic engineering tunnel.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/rro"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/rro"
//
//	Index: uint8
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPath) Rro(Index uint8) *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_RroPath {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_RroPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "rro"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// Rro (list): List of MPLS RRO objects associated with the traffic engineering tunnel.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/rro"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/rro"
//
//	Index: uint8
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPathAny) Rro(Index uint8) *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_RroPathAny {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_RroPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "rro"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// SessionName (leaf): The session name.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/session-name"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/session-name"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPath) SessionName() *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_SessionNamePath {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_SessionNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "session-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SessionName (leaf): The session name.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/session-name"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/session-name"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPathAny) SessionName() *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_SessionNamePathAny {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_SessionNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "session-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SessionStatus (leaf): Operational state of the RSVP LSP
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/session-status"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/session-status"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPath) SessionStatus() *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_SessionStatusPath {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_SessionStatusPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "session-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SessionStatus (leaf): Operational state of the RSVP LSP
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/session-status"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/session-status"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPathAny) SessionStatus() *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_SessionStatusPathAny {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_SessionStatusPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "session-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): The origin RSVP session address.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "*/source-address"
//	Path from root:       "/rsvpte-routers/rsvpte-router/*/label-switched-path-database/lsps/ipv4-lsp/*/source-address"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPath) SourceAddress() *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_SourceAddressPath {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_SourceAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): The origin RSVP session address.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "*/source-address"
//	Path from root:       "/rsvpte-routers/rsvpte-router/*/label-switched-path-database/lsps/ipv4-lsp/*/source-address"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPathAny) SourceAddress() *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_SourceAddressPathAny {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_SourceAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TunnelId (leaf): The tunnnel id.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "*/tunnel-id"
//	Path from root:       "/rsvpte-routers/rsvpte-router/*/label-switched-path-database/lsps/ipv4-lsp/*/tunnel-id"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPath) TunnelId() *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_TunnelIdPath {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_TunnelIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tunnel-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TunnelId (leaf): The tunnnel id.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "*/tunnel-id"
//	Path from root:       "/rsvpte-routers/rsvpte-router/*/label-switched-path-database/lsps/ipv4-lsp/*/tunnel-id"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPathAny) TunnelId() *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_TunnelIdPathAny {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_TunnelIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tunnel-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UpTime (leaf): The Up time in ms.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/up-time"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/up-time"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPath) UpTime() *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_UpTimePath {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_UpTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "up-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UpTime (leaf): The Up time in ms.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/up-time"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/up-time"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPathAny) UpTime() *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_UpTimePathAny {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_UpTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "up-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPath) State() ygnmi.SingletonQuery[*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp] {
	return ygnmi.NewSingletonQuery[*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4LspPathAny) State() ygnmi.WildcardQuery[*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp] {
	return ygnmi.NewWildcardQuery[*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero_AsnPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/ero/state/asn YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero_AsnPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero_AsnPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/ero/state/asn YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero_AsnPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/asn"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/ero/state/asn"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero_AsnPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "asn"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero).Asn
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/asn"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/ero/state/asn"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero_AsnPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "asn"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero).Asn
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero_IndexPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/ero/state/index YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero_IndexPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero_IndexPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/ero/state/index YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero_IndexPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/index"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/ero/state/index"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero_IndexPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/index"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/ero/state/index"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero_IndexPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "index"
//	Path from root:       ""
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero_IndexPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "index"
//	Path from root:       ""
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero_IndexPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero_PrefixPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/ero/state/prefix YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero_PrefixPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero_PrefixPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/ero/state/prefix YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero_PrefixPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/prefix"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/ero/state/prefix"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero_PrefixPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/prefix"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/ero/state/prefix"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero_PrefixPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero_TypePath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/ero/state/type YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero_TypePathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/ero/state/type YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/type"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/ero/state/type"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero_TypePath) State() ygnmi.SingletonQuery[oc.E_Ero_Type] {
	return ygnmi.NewSingletonQuery[oc.E_Ero_Type](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ero_Type, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/type"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/ero/state/type"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero_TypePathAny) State() ygnmi.WildcardQuery[oc.E_Ero_Type] {
	return ygnmi.NewWildcardQuery[oc.E_Ero_Type](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ero_Type, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_EroPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/ero YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_EroPath struct {
	*ygnmi.NodePath
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_EroPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/ero YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_EroPathAny struct {
	*ygnmi.NodePath
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_EroPathMap represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/ero YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_EroPathMap struct {
	*ygnmi.NodePath
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_EroPathMapAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/ero YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_EroPathMapAny struct {
	*ygnmi.NodePath
}

// Asn (leaf): The autonomous system number indicated by the ERO. Specified only when the ERO hop
// is an 2 or 4-byte AS number.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/asn"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/ero/state/asn"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_EroPath) Asn() *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero_AsnPath {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero_AsnPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "asn"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Asn (leaf): The autonomous system number indicated by the ERO. Specified only when the ERO hop
// is an 2 or 4-byte AS number.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/asn"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/ero/state/asn"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_EroPathAny) Asn() *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero_AsnPathAny {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero_AsnPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "asn"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): Index of the entry in the ERO. Entries are ordered in ascending order from the source to the destination of the LSP
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "*/index"
//	Path from root:       "/rsvpte-routers/rsvpte-router/*/label-switched-path-database/lsps/ipv4-lsp/*/ero/*/index"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_EroPath) Index() *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero_IndexPath {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero_IndexPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): Index of the entry in the ERO. Entries are ordered in ascending order from the source to the destination of the LSP
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "*/index"
//	Path from root:       "/rsvpte-routers/rsvpte-router/*/label-switched-path-database/lsps/ipv4-lsp/*/ero/*/index"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_EroPathAny) Index() *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero_IndexPathAny {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero_IndexPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Prefix (leaf): The IPv4 prefix indicated by the ERO. Specified only when the ERO hop
// is an IPv4 prefix.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/prefix"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/ero/state/prefix"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_EroPath) Prefix() *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero_PrefixPath {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero_PrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Prefix (leaf): The IPv4 prefix indicated by the ERO. Specified only when the ERO hop
// is an IPv4 prefix.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/prefix"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/ero/state/prefix"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_EroPathAny) Prefix() *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero_PrefixPathAny {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The type indicated by the ERO.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/type"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/ero/state/type"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_EroPath) Type() *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero_TypePath {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The type indicated by the ERO.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/type"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/ero/state/type"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_EroPathAny) Type() *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero_TypePathAny {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_EroPath) State() ygnmi.SingletonQuery[*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero] {
	return ygnmi.NewSingletonQuery[*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_EroPathAny) State() ygnmi.WildcardQuery[*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero] {
	return ygnmi.NewWildcardQuery[*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro_AddressPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/rro/state/address YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro_AddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro_AddressPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/rro/state/address YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro_AddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/address"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/rro/state/address"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro_AddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/address"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/rro/state/address"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro_AddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro_IndexPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/rro/state/index YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro_IndexPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro_IndexPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/rro/state/index YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro_IndexPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/index"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/rro/state/index"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro_IndexPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro).Index
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/index"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/rro/state/index"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro_IndexPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro).Index
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "index"
//	Path from root:       ""
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro_IndexPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro).Index
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "index"
//	Path from root:       ""
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro_IndexPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro).Index
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro_ReportedLabelPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/rro/state/reported-label YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro_ReportedLabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro_ReportedLabelPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/rro/state/reported-label YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro_ReportedLabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/reported-label"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/rro/state/reported-label"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro_ReportedLabelPath) State() ygnmi.SingletonQuery[oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro_ReportedLabel_Union] {
	return ygnmi.NewSingletonQuery[oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro_ReportedLabel_Union](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "reported-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro_ReportedLabel_Union, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro).ReportedLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/reported-label"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/rro/state/reported-label"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro_ReportedLabelPathAny) State() ygnmi.WildcardQuery[oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro_ReportedLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro_ReportedLabel_Union](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "reported-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro_ReportedLabel_Union, bool) {
			ret := gs.(*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro).ReportedLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_RroPath represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/rro YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_RroPath struct {
	*ygnmi.NodePath
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_RroPathAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/rro YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_RroPathAny struct {
	*ygnmi.NodePath
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_RroPathMap represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/rro YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_RroPathMap struct {
	*ygnmi.NodePath
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_RroPathMapAny represents the wildcard version of the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/rro YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_RroPathMapAny struct {
	*ygnmi.NodePath
}

// Address (leaf): IPv4 hop for RRO entry.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/address"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/rro/state/address"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_RroPath) Address() *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro_AddressPath {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro_AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Address (leaf): IPv4 hop for RRO entry.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/address"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/rro/state/address"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_RroPathAny) Address() *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro_AddressPathAny {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro_AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): Reference index of object in the ERO list. Entries are ordered in ascending order with the nearest hop at the top and furthest hop at bottom.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "*/index"
//	Path from root:       "/rsvpte-routers/rsvpte-router/*/label-switched-path-database/lsps/ipv4-lsp/*/rro/*/index"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_RroPath) Index() *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro_IndexPath {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro_IndexPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): Reference index of object in the ERO list. Entries are ordered in ascending order with the nearest hop at the top and furthest hop at bottom.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "*/index"
//	Path from root:       "/rsvpte-routers/rsvpte-router/*/label-switched-path-database/lsps/ipv4-lsp/*/rro/*/index"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_RroPathAny) Index() *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro_IndexPathAny {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro_IndexPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReportedLabel (leaf): Label reported for RRO hop.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/reported-label"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/rro/state/reported-label"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_RroPath) ReportedLabel() *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro_ReportedLabelPath {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro_ReportedLabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "reported-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReportedLabel (leaf): Label reported for RRO hop.
//
//	Defining module:      "open-traffic-generator-rsvp"
//	Instantiating module: "open-traffic-generator-rsvp"
//	Path from parent:     "state/reported-label"
//	Path from root:       "/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/rro/state/reported-label"
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_RroPathAny) ReportedLabel() *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro_ReportedLabelPathAny {
	ps := &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro_ReportedLabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "reported-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_RroPath) State() ygnmi.SingletonQuery[*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro] {
	return ygnmi.NewSingletonQuery[*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_RroPathAny) State() ygnmi.WildcardQuery[*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro] {
	return ygnmi.NewWildcardQuery[*oc.RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro](
		"RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

/*
Package otg is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.20)
using the following YANG input files:
  - models-yang/models/bgp/open-traffic-generator-bgp.yang
  - models-yang/models/dhcp/v4client/open-traffic-generator-dhcpv4client.yang
  - models-yang/models/dhcp/v4server/open-traffic-generator-dhcpv4server.yang
  - models-yang/models/dhcp/v6client/open-traffic-generator-dhcpv6client.yang
  - models-yang/models/dhcp/v6server/open-traffic-generator-dhcpv6server.yang
  - models-yang/models/discovery/open-traffic-generator-discovery.yang
  - models-yang/models/discovery/open-traffic-generator-discovery-interfaces.yang
  - models-yang/models/flow/open-traffic-generator-flow.yang
  - models-yang/models/interface/open-traffic-generator-port.yang
  - models-yang/models/isis/open-traffic-generator-isis.yang
  - models-yang/models/lacp/open-traffic-generator-lacp.yang
  - models-yang/models/lag/open-traffic-generator-lag.yang
  - models-yang/models/lldp/open-traffic-generator-lldp.yang
  - models-yang/models/ospfv2/open-traffic-generator-ospfv2.yang
  - models-yang/models/ospfv3/open-traffic-generator-ospfv3.yang
  - models-yang/models/platform/open-traffic-generator-platform.yang
  - models-yang/models/rsvp/open-traffic-generator-rsvp.yang
  - models-yang/models/types/open-traffic-generator-types.yang

Imported modules were sourced from:
  - models-yang/models/...
*/
package otg

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

// UnionInt8 is an int8 type assignable to unions of which it is a subtype.
type UnionInt8 int8

// UnionInt16 is an int16 type assignable to unions of which it is a subtype.
type UnionInt16 int16

// UnionInt32 is an int32 type assignable to unions of which it is a subtype.
type UnionInt32 int32

// UnionInt64 is an int64 type assignable to unions of which it is a subtype.
type UnionInt64 int64

// UnionUint8 is a uint8 type assignable to unions of which it is a subtype.
type UnionUint8 uint8

// UnionUint16 is a uint16 type assignable to unions of which it is a subtype.
type UnionUint16 uint16

// UnionUint32 is a uint32 type assignable to unions of which it is a subtype.
type UnionUint32 uint32

// UnionUint64 is a uint64 type assignable to unions of which it is a subtype.
type UnionUint64 uint64

// UnionFloat64 is a float64 type assignable to unions of which it is a subtype.
type UnionFloat64 float64

// UnionString is a string type assignable to unions of which it is a subtype.
type UnionString string

// UnionBool is a bool type assignable to unions of which it is a subtype.
type UnionBool bool

// UnionUnsupported is an interface{} wrapper type for unsupported types. It is
// assignable to unions of which it is a subtype.
type UnionUnsupported struct {
	Value interface{}
}

var (
	SchemaTree map[string]*yang.Entry
	ΛEnumTypes map[string][]reflect.Type
)

func init() {
	var err error
	initΛEnumTypes()
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " + err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root:       &Root{},
		SchemaTree: uzp,
		Unmarshal:  Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn)
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// BgpPeer represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer YANG schema element.
type BgpPeer struct {
	Counters          *BgpPeer_Counters                                            `path:"state/counters" module:"open-traffic-generator-bgp/open-traffic-generator-bgp"`
	Name              *string                                                      `path:"state/name|name" module:"open-traffic-generator-bgp/open-traffic-generator-bgp|open-traffic-generator-bgp" shadow-path:"name" shadow-module:"open-traffic-generator-bgp"`
	SessionState      E_BgpPeer_SessionState                                       `path:"state/session-state" module:"open-traffic-generator-bgp/open-traffic-generator-bgp"`
	UnicastIpv4Prefix map[BgpPeer_UnicastIpv4Prefix_Key]*BgpPeer_UnicastIpv4Prefix `path:"unicast-ipv4-prefixes/unicast-ipv4-prefix" module:"open-traffic-generator-bgp/open-traffic-generator-bgp"`
	UnicastIpv6Prefix map[BgpPeer_UnicastIpv6Prefix_Key]*BgpPeer_UnicastIpv6Prefix `path:"unicast-ipv6-prefixes/unicast-ipv6-prefix" module:"open-traffic-generator-bgp/open-traffic-generator-bgp"`
}

// IsYANGGoStruct ensures that BgpPeer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BgpPeer) IsYANGGoStruct() {}

// BgpPeer_UnicastIpv4Prefix_Key represents the key for list UnicastIpv4Prefix of element /open-traffic-generator-bgp/bgp-peers/bgp-peer.
type BgpPeer_UnicastIpv4Prefix_Key struct {
	Address      string                     `path:"address"`
	PrefixLength uint32                     `path:"prefix-length"`
	Origin       E_UnicastIpv4Prefix_Origin `path:"origin"`
	PathId       uint32                     `path:"path-id"`
}

// IsYANGGoKeyStruct ensures that BgpPeer_UnicastIpv4Prefix_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (BgpPeer_UnicastIpv4Prefix_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the BgpPeer_UnicastIpv4Prefix_Key key struct.
func (t BgpPeer_UnicastIpv4Prefix_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"address":       t.Address,
		"prefix-length": t.PrefixLength,
		"origin":        t.Origin,
		"path-id":       t.PathId,
	}, nil
}

// BgpPeer_UnicastIpv6Prefix_Key represents the key for list UnicastIpv6Prefix of element /open-traffic-generator-bgp/bgp-peers/bgp-peer.
type BgpPeer_UnicastIpv6Prefix_Key struct {
	Address      string                     `path:"address"`
	PrefixLength uint32                     `path:"prefix-length"`
	Origin       E_UnicastIpv6Prefix_Origin `path:"origin"`
	PathId       uint32                     `path:"path-id"`
}

// IsYANGGoKeyStruct ensures that BgpPeer_UnicastIpv6Prefix_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (BgpPeer_UnicastIpv6Prefix_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the BgpPeer_UnicastIpv6Prefix_Key key struct.
func (t BgpPeer_UnicastIpv6Prefix_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"address":       t.Address,
		"prefix-length": t.PrefixLength,
		"origin":        t.Origin,
		"path-id":       t.PathId,
	}, nil
}

// NewUnicastIpv4Prefix creates a new entry in the UnicastIpv4Prefix list of the
// BgpPeer struct. The keys of the list are populated from the input
// arguments.
func (t *BgpPeer) NewUnicastIpv4Prefix(Address string, PrefixLength uint32, Origin E_UnicastIpv4Prefix_Origin, PathId uint32) (*BgpPeer_UnicastIpv4Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnicastIpv4Prefix == nil {
		t.UnicastIpv4Prefix = make(map[BgpPeer_UnicastIpv4Prefix_Key]*BgpPeer_UnicastIpv4Prefix)
	}

	key := BgpPeer_UnicastIpv4Prefix_Key{
		Address:      Address,
		PrefixLength: PrefixLength,
		Origin:       Origin,
		PathId:       PathId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnicastIpv4Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnicastIpv4Prefix", key)
	}

	t.UnicastIpv4Prefix[key] = &BgpPeer_UnicastIpv4Prefix{
		Address:      &Address,
		PrefixLength: &PrefixLength,
		Origin:       Origin,
		PathId:       &PathId,
	}

	return t.UnicastIpv4Prefix[key], nil
}

// RenameUnicastIpv4Prefix renames an entry in the list UnicastIpv4Prefix within
// the BgpPeer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *BgpPeer) RenameUnicastIpv4Prefix(oldK, newK BgpPeer_UnicastIpv4Prefix_Key) error {
	if _, ok := t.UnicastIpv4Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in UnicastIpv4Prefix", newK)
	}

	e, ok := t.UnicastIpv4Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnicastIpv4Prefix", oldK)
	}
	e.Address = &newK.Address
	e.PrefixLength = &newK.PrefixLength
	e.Origin = newK.Origin
	e.PathId = &newK.PathId

	t.UnicastIpv4Prefix[newK] = e
	delete(t.UnicastIpv4Prefix, oldK)
	return nil
}

// GetOrCreateUnicastIpv4PrefixMap returns the list (map) from BgpPeer.
//
// It initializes the field if not already initialized.
func (t *BgpPeer) GetOrCreateUnicastIpv4PrefixMap() map[BgpPeer_UnicastIpv4Prefix_Key]*BgpPeer_UnicastIpv4Prefix {
	if t.UnicastIpv4Prefix == nil {
		t.UnicastIpv4Prefix = make(map[BgpPeer_UnicastIpv4Prefix_Key]*BgpPeer_UnicastIpv4Prefix)
	}
	return t.UnicastIpv4Prefix
}

// GetOrCreateUnicastIpv4Prefix retrieves the value with the specified keys from
// the receiver BgpPeer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *BgpPeer) GetOrCreateUnicastIpv4Prefix(Address string, PrefixLength uint32, Origin E_UnicastIpv4Prefix_Origin, PathId uint32) *BgpPeer_UnicastIpv4Prefix {

	key := BgpPeer_UnicastIpv4Prefix_Key{
		Address:      Address,
		PrefixLength: PrefixLength,
		Origin:       Origin,
		PathId:       PathId,
	}

	if v, ok := t.UnicastIpv4Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnicastIpv4Prefix(Address, PrefixLength, Origin, PathId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnicastIpv4Prefix got unexpected error: %v", err))
	}
	return v
}

// GetUnicastIpv4Prefix retrieves the value with the specified key from
// the UnicastIpv4Prefix map field of BgpPeer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *BgpPeer) GetUnicastIpv4Prefix(Address string, PrefixLength uint32, Origin E_UnicastIpv4Prefix_Origin, PathId uint32) *BgpPeer_UnicastIpv4Prefix {

	if t == nil {
		return nil
	}

	key := BgpPeer_UnicastIpv4Prefix_Key{
		Address:      Address,
		PrefixLength: PrefixLength,
		Origin:       Origin,
		PathId:       PathId,
	}

	if lm, ok := t.UnicastIpv4Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnicastIpv4Prefix deletes the value with the specified keys from
// the receiver BgpPeer. If there is no such element, the function
// is a no-op.
func (t *BgpPeer) DeleteUnicastIpv4Prefix(Address string, PrefixLength uint32, Origin E_UnicastIpv4Prefix_Origin, PathId uint32) {
	key := BgpPeer_UnicastIpv4Prefix_Key{
		Address:      Address,
		PrefixLength: PrefixLength,
		Origin:       Origin,
		PathId:       PathId,
	}

	delete(t.UnicastIpv4Prefix, key)
}

// AppendUnicastIpv4Prefix appends the supplied BgpPeer_UnicastIpv4Prefix struct to the
// list UnicastIpv4Prefix of BgpPeer. If the key value(s) specified in
// the supplied BgpPeer_UnicastIpv4Prefix already exist in the list, an error is
// returned.
func (t *BgpPeer) AppendUnicastIpv4Prefix(v *BgpPeer_UnicastIpv4Prefix) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key for Address")
	}

	if v.PrefixLength == nil {
		return fmt.Errorf("invalid nil key for PrefixLength")
	}

	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	key := BgpPeer_UnicastIpv4Prefix_Key{
		Address:      *v.Address,
		PrefixLength: *v.PrefixLength,
		Origin:       v.Origin,
		PathId:       *v.PathId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnicastIpv4Prefix == nil {
		t.UnicastIpv4Prefix = make(map[BgpPeer_UnicastIpv4Prefix_Key]*BgpPeer_UnicastIpv4Prefix)
	}

	if _, ok := t.UnicastIpv4Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list UnicastIpv4Prefix %v", key)
	}

	t.UnicastIpv4Prefix[key] = v
	return nil
}

// NewUnicastIpv6Prefix creates a new entry in the UnicastIpv6Prefix list of the
// BgpPeer struct. The keys of the list are populated from the input
// arguments.
func (t *BgpPeer) NewUnicastIpv6Prefix(Address string, PrefixLength uint32, Origin E_UnicastIpv6Prefix_Origin, PathId uint32) (*BgpPeer_UnicastIpv6Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnicastIpv6Prefix == nil {
		t.UnicastIpv6Prefix = make(map[BgpPeer_UnicastIpv6Prefix_Key]*BgpPeer_UnicastIpv6Prefix)
	}

	key := BgpPeer_UnicastIpv6Prefix_Key{
		Address:      Address,
		PrefixLength: PrefixLength,
		Origin:       Origin,
		PathId:       PathId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnicastIpv6Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnicastIpv6Prefix", key)
	}

	t.UnicastIpv6Prefix[key] = &BgpPeer_UnicastIpv6Prefix{
		Address:      &Address,
		PrefixLength: &PrefixLength,
		Origin:       Origin,
		PathId:       &PathId,
	}

	return t.UnicastIpv6Prefix[key], nil
}

// RenameUnicastIpv6Prefix renames an entry in the list UnicastIpv6Prefix within
// the BgpPeer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *BgpPeer) RenameUnicastIpv6Prefix(oldK, newK BgpPeer_UnicastIpv6Prefix_Key) error {
	if _, ok := t.UnicastIpv6Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in UnicastIpv6Prefix", newK)
	}

	e, ok := t.UnicastIpv6Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnicastIpv6Prefix", oldK)
	}
	e.Address = &newK.Address
	e.PrefixLength = &newK.PrefixLength
	e.Origin = newK.Origin
	e.PathId = &newK.PathId

	t.UnicastIpv6Prefix[newK] = e
	delete(t.UnicastIpv6Prefix, oldK)
	return nil
}

// GetOrCreateUnicastIpv6PrefixMap returns the list (map) from BgpPeer.
//
// It initializes the field if not already initialized.
func (t *BgpPeer) GetOrCreateUnicastIpv6PrefixMap() map[BgpPeer_UnicastIpv6Prefix_Key]*BgpPeer_UnicastIpv6Prefix {
	if t.UnicastIpv6Prefix == nil {
		t.UnicastIpv6Prefix = make(map[BgpPeer_UnicastIpv6Prefix_Key]*BgpPeer_UnicastIpv6Prefix)
	}
	return t.UnicastIpv6Prefix
}

// GetOrCreateUnicastIpv6Prefix retrieves the value with the specified keys from
// the receiver BgpPeer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *BgpPeer) GetOrCreateUnicastIpv6Prefix(Address string, PrefixLength uint32, Origin E_UnicastIpv6Prefix_Origin, PathId uint32) *BgpPeer_UnicastIpv6Prefix {

	key := BgpPeer_UnicastIpv6Prefix_Key{
		Address:      Address,
		PrefixLength: PrefixLength,
		Origin:       Origin,
		PathId:       PathId,
	}

	if v, ok := t.UnicastIpv6Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnicastIpv6Prefix(Address, PrefixLength, Origin, PathId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnicastIpv6Prefix got unexpected error: %v", err))
	}
	return v
}

// GetUnicastIpv6Prefix retrieves the value with the specified key from
// the UnicastIpv6Prefix map field of BgpPeer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *BgpPeer) GetUnicastIpv6Prefix(Address string, PrefixLength uint32, Origin E_UnicastIpv6Prefix_Origin, PathId uint32) *BgpPeer_UnicastIpv6Prefix {

	if t == nil {
		return nil
	}

	key := BgpPeer_UnicastIpv6Prefix_Key{
		Address:      Address,
		PrefixLength: PrefixLength,
		Origin:       Origin,
		PathId:       PathId,
	}

	if lm, ok := t.UnicastIpv6Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnicastIpv6Prefix deletes the value with the specified keys from
// the receiver BgpPeer. If there is no such element, the function
// is a no-op.
func (t *BgpPeer) DeleteUnicastIpv6Prefix(Address string, PrefixLength uint32, Origin E_UnicastIpv6Prefix_Origin, PathId uint32) {
	key := BgpPeer_UnicastIpv6Prefix_Key{
		Address:      Address,
		PrefixLength: PrefixLength,
		Origin:       Origin,
		PathId:       PathId,
	}

	delete(t.UnicastIpv6Prefix, key)
}

// AppendUnicastIpv6Prefix appends the supplied BgpPeer_UnicastIpv6Prefix struct to the
// list UnicastIpv6Prefix of BgpPeer. If the key value(s) specified in
// the supplied BgpPeer_UnicastIpv6Prefix already exist in the list, an error is
// returned.
func (t *BgpPeer) AppendUnicastIpv6Prefix(v *BgpPeer_UnicastIpv6Prefix) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key for Address")
	}

	if v.PrefixLength == nil {
		return fmt.Errorf("invalid nil key for PrefixLength")
	}

	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	key := BgpPeer_UnicastIpv6Prefix_Key{
		Address:      *v.Address,
		PrefixLength: *v.PrefixLength,
		Origin:       v.Origin,
		PathId:       *v.PathId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnicastIpv6Prefix == nil {
		t.UnicastIpv6Prefix = make(map[BgpPeer_UnicastIpv6Prefix_Key]*BgpPeer_UnicastIpv6Prefix)
	}

	if _, ok := t.UnicastIpv6Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list UnicastIpv6Prefix %v", key)
	}

	t.UnicastIpv6Prefix[key] = v
	return nil
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *BgpPeer) GetOrCreateCounters() *BgpPeer_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &BgpPeer_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from BgpPeer. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *BgpPeer) GetCounters() *BgpPeer_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the BgpPeer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *BgpPeer) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetSessionState retrieves the value of the leaf SessionState from the BgpPeer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionState is set, it can
// safely use t.GetSessionState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionState == nil' before retrieving the leaf's value.
func (t *BgpPeer) GetSessionState() E_BgpPeer_SessionState {
	if t == nil || t.SessionState == 0 {
		return 0
	}
	return t.SessionState
}

// SetName sets the value of the leaf Name in the BgpPeer
// struct.
func (t *BgpPeer) SetName(v string) {
	t.Name = &v
}

// SetSessionState sets the value of the leaf SessionState in the BgpPeer
// struct.
func (t *BgpPeer) SetSessionState(v E_BgpPeer_SessionState) {
	t.SessionState = v
}

// PopulateDefaults recursively populates unset leaf fields in the BgpPeer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *BgpPeer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Counters.PopulateDefaults()
	for _, e := range t.UnicastIpv4Prefix {
		e.PopulateDefaults()
	}
	for _, e := range t.UnicastIpv6Prefix {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the BgpPeer struct, which is a YANG list entry.
func (t *BgpPeer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["BgpPeer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *BgpPeer) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of BgpPeer.
func (*BgpPeer) ΛBelongingModule() string {
	return "open-traffic-generator-bgp"
}

// BgpPeer_Counters represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters YANG schema element.
type BgpPeer_Counters struct {
	Flaps            *uint64 `path:"flaps" module:"open-traffic-generator-bgp"`
	InEndOfRib       *uint64 `path:"in-end-of-rib" module:"open-traffic-generator-bgp"`
	InKeepalives     *uint64 `path:"in-keepalives" module:"open-traffic-generator-bgp"`
	InNotifications  *uint64 `path:"in-notifications" module:"open-traffic-generator-bgp"`
	InOpens          *uint64 `path:"in-opens" module:"open-traffic-generator-bgp"`
	InRouteWithdraw  *uint64 `path:"in-route-withdraw" module:"open-traffic-generator-bgp"`
	InRoutes         *uint64 `path:"in-routes" module:"open-traffic-generator-bgp"`
	InUpdates        *uint64 `path:"in-updates" module:"open-traffic-generator-bgp"`
	OutKeepalives    *uint64 `path:"out-keepalives" module:"open-traffic-generator-bgp"`
	OutNotifications *uint64 `path:"out-notifications" module:"open-traffic-generator-bgp"`
	OutOpens         *uint64 `path:"out-opens" module:"open-traffic-generator-bgp"`
	OutRouteWithdraw *uint64 `path:"out-route-withdraw" module:"open-traffic-generator-bgp"`
	OutRoutes        *uint64 `path:"out-routes" module:"open-traffic-generator-bgp"`
	OutUpdates       *uint64 `path:"out-updates" module:"open-traffic-generator-bgp"`
}

// IsYANGGoStruct ensures that BgpPeer_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BgpPeer_Counters) IsYANGGoStruct() {}

// GetFlaps retrieves the value of the leaf Flaps from the BgpPeer_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flaps is set, it can
// safely use t.GetFlaps() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flaps == nil' before retrieving the leaf's value.
func (t *BgpPeer_Counters) GetFlaps() uint64 {
	if t == nil || t.Flaps == nil {
		return 0
	}
	return *t.Flaps
}

// GetInEndOfRib retrieves the value of the leaf InEndOfRib from the BgpPeer_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InEndOfRib is set, it can
// safely use t.GetInEndOfRib() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InEndOfRib == nil' before retrieving the leaf's value.
func (t *BgpPeer_Counters) GetInEndOfRib() uint64 {
	if t == nil || t.InEndOfRib == nil {
		return 0
	}
	return *t.InEndOfRib
}

// GetInKeepalives retrieves the value of the leaf InKeepalives from the BgpPeer_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InKeepalives is set, it can
// safely use t.GetInKeepalives() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InKeepalives == nil' before retrieving the leaf's value.
func (t *BgpPeer_Counters) GetInKeepalives() uint64 {
	if t == nil || t.InKeepalives == nil {
		return 0
	}
	return *t.InKeepalives
}

// GetInNotifications retrieves the value of the leaf InNotifications from the BgpPeer_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InNotifications is set, it can
// safely use t.GetInNotifications() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InNotifications == nil' before retrieving the leaf's value.
func (t *BgpPeer_Counters) GetInNotifications() uint64 {
	if t == nil || t.InNotifications == nil {
		return 0
	}
	return *t.InNotifications
}

// GetInOpens retrieves the value of the leaf InOpens from the BgpPeer_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InOpens is set, it can
// safely use t.GetInOpens() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InOpens == nil' before retrieving the leaf's value.
func (t *BgpPeer_Counters) GetInOpens() uint64 {
	if t == nil || t.InOpens == nil {
		return 0
	}
	return *t.InOpens
}

// GetInRouteWithdraw retrieves the value of the leaf InRouteWithdraw from the BgpPeer_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InRouteWithdraw is set, it can
// safely use t.GetInRouteWithdraw() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InRouteWithdraw == nil' before retrieving the leaf's value.
func (t *BgpPeer_Counters) GetInRouteWithdraw() uint64 {
	if t == nil || t.InRouteWithdraw == nil {
		return 0
	}
	return *t.InRouteWithdraw
}

// GetInRoutes retrieves the value of the leaf InRoutes from the BgpPeer_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InRoutes is set, it can
// safely use t.GetInRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InRoutes == nil' before retrieving the leaf's value.
func (t *BgpPeer_Counters) GetInRoutes() uint64 {
	if t == nil || t.InRoutes == nil {
		return 0
	}
	return *t.InRoutes
}

// GetInUpdates retrieves the value of the leaf InUpdates from the BgpPeer_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InUpdates is set, it can
// safely use t.GetInUpdates() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InUpdates == nil' before retrieving the leaf's value.
func (t *BgpPeer_Counters) GetInUpdates() uint64 {
	if t == nil || t.InUpdates == nil {
		return 0
	}
	return *t.InUpdates
}

// GetOutKeepalives retrieves the value of the leaf OutKeepalives from the BgpPeer_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutKeepalives is set, it can
// safely use t.GetOutKeepalives() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutKeepalives == nil' before retrieving the leaf's value.
func (t *BgpPeer_Counters) GetOutKeepalives() uint64 {
	if t == nil || t.OutKeepalives == nil {
		return 0
	}
	return *t.OutKeepalives
}

// GetOutNotifications retrieves the value of the leaf OutNotifications from the BgpPeer_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutNotifications is set, it can
// safely use t.GetOutNotifications() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutNotifications == nil' before retrieving the leaf's value.
func (t *BgpPeer_Counters) GetOutNotifications() uint64 {
	if t == nil || t.OutNotifications == nil {
		return 0
	}
	return *t.OutNotifications
}

// GetOutOpens retrieves the value of the leaf OutOpens from the BgpPeer_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutOpens is set, it can
// safely use t.GetOutOpens() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutOpens == nil' before retrieving the leaf's value.
func (t *BgpPeer_Counters) GetOutOpens() uint64 {
	if t == nil || t.OutOpens == nil {
		return 0
	}
	return *t.OutOpens
}

// GetOutRouteWithdraw retrieves the value of the leaf OutRouteWithdraw from the BgpPeer_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutRouteWithdraw is set, it can
// safely use t.GetOutRouteWithdraw() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutRouteWithdraw == nil' before retrieving the leaf's value.
func (t *BgpPeer_Counters) GetOutRouteWithdraw() uint64 {
	if t == nil || t.OutRouteWithdraw == nil {
		return 0
	}
	return *t.OutRouteWithdraw
}

// GetOutRoutes retrieves the value of the leaf OutRoutes from the BgpPeer_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutRoutes is set, it can
// safely use t.GetOutRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutRoutes == nil' before retrieving the leaf's value.
func (t *BgpPeer_Counters) GetOutRoutes() uint64 {
	if t == nil || t.OutRoutes == nil {
		return 0
	}
	return *t.OutRoutes
}

// GetOutUpdates retrieves the value of the leaf OutUpdates from the BgpPeer_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutUpdates is set, it can
// safely use t.GetOutUpdates() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutUpdates == nil' before retrieving the leaf's value.
func (t *BgpPeer_Counters) GetOutUpdates() uint64 {
	if t == nil || t.OutUpdates == nil {
		return 0
	}
	return *t.OutUpdates
}

// SetFlaps sets the value of the leaf Flaps in the BgpPeer_Counters
// struct.
func (t *BgpPeer_Counters) SetFlaps(v uint64) {
	t.Flaps = &v
}

// SetInEndOfRib sets the value of the leaf InEndOfRib in the BgpPeer_Counters
// struct.
func (t *BgpPeer_Counters) SetInEndOfRib(v uint64) {
	t.InEndOfRib = &v
}

// SetInKeepalives sets the value of the leaf InKeepalives in the BgpPeer_Counters
// struct.
func (t *BgpPeer_Counters) SetInKeepalives(v uint64) {
	t.InKeepalives = &v
}

// SetInNotifications sets the value of the leaf InNotifications in the BgpPeer_Counters
// struct.
func (t *BgpPeer_Counters) SetInNotifications(v uint64) {
	t.InNotifications = &v
}

// SetInOpens sets the value of the leaf InOpens in the BgpPeer_Counters
// struct.
func (t *BgpPeer_Counters) SetInOpens(v uint64) {
	t.InOpens = &v
}

// SetInRouteWithdraw sets the value of the leaf InRouteWithdraw in the BgpPeer_Counters
// struct.
func (t *BgpPeer_Counters) SetInRouteWithdraw(v uint64) {
	t.InRouteWithdraw = &v
}

// SetInRoutes sets the value of the leaf InRoutes in the BgpPeer_Counters
// struct.
func (t *BgpPeer_Counters) SetInRoutes(v uint64) {
	t.InRoutes = &v
}

// SetInUpdates sets the value of the leaf InUpdates in the BgpPeer_Counters
// struct.
func (t *BgpPeer_Counters) SetInUpdates(v uint64) {
	t.InUpdates = &v
}

// SetOutKeepalives sets the value of the leaf OutKeepalives in the BgpPeer_Counters
// struct.
func (t *BgpPeer_Counters) SetOutKeepalives(v uint64) {
	t.OutKeepalives = &v
}

// SetOutNotifications sets the value of the leaf OutNotifications in the BgpPeer_Counters
// struct.
func (t *BgpPeer_Counters) SetOutNotifications(v uint64) {
	t.OutNotifications = &v
}

// SetOutOpens sets the value of the leaf OutOpens in the BgpPeer_Counters
// struct.
func (t *BgpPeer_Counters) SetOutOpens(v uint64) {
	t.OutOpens = &v
}

// SetOutRouteWithdraw sets the value of the leaf OutRouteWithdraw in the BgpPeer_Counters
// struct.
func (t *BgpPeer_Counters) SetOutRouteWithdraw(v uint64) {
	t.OutRouteWithdraw = &v
}

// SetOutRoutes sets the value of the leaf OutRoutes in the BgpPeer_Counters
// struct.
func (t *BgpPeer_Counters) SetOutRoutes(v uint64) {
	t.OutRoutes = &v
}

// SetOutUpdates sets the value of the leaf OutUpdates in the BgpPeer_Counters
// struct.
func (t *BgpPeer_Counters) SetOutUpdates(v uint64) {
	t.OutUpdates = &v
}

// PopulateDefaults recursively populates unset leaf fields in the BgpPeer_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *BgpPeer_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["BgpPeer_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *BgpPeer_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of BgpPeer_Counters.
func (*BgpPeer_Counters) ΛBelongingModule() string {
	return "open-traffic-generator-bgp"
}

// BgpPeer_UnicastIpv4Prefix represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix YANG schema element.
type BgpPeer_UnicastIpv4Prefix struct {
	Address                *string                                        `path:"state/address|address" module:"open-traffic-generator-bgp/open-traffic-generator-bgp|open-traffic-generator-bgp" shadow-path:"address" shadow-module:"open-traffic-generator-bgp"`
	AsPath                 []*BgpPeer_UnicastIpv4Prefix_AsPath            `path:"state/as-path" module:"open-traffic-generator-bgp/open-traffic-generator-bgp"`
	Community              []*BgpPeer_UnicastIpv4Prefix_Community         `path:"state/community" module:"open-traffic-generator-bgp/open-traffic-generator-bgp"`
	ExtendedCommunity      []*BgpPeer_UnicastIpv4Prefix_ExtendedCommunity `path:"state/extended-community" module:"open-traffic-generator-bgp/open-traffic-generator-bgp"`
	LocalPreference        *uint32                                        `path:"state/local-preference" module:"open-traffic-generator-bgp/open-traffic-generator-bgp"`
	MultiExitDiscriminator *uint32                                        `path:"state/multi-exit-discriminator" module:"open-traffic-generator-bgp/open-traffic-generator-bgp"`
	NextHopIpv4Address     *string                                        `path:"state/next-hop-ipv4-address" module:"open-traffic-generator-bgp/open-traffic-generator-bgp"`
	NextHopIpv6Address     *string                                        `path:"state/next-hop-ipv6-address" module:"open-traffic-generator-bgp/open-traffic-generator-bgp"`
	Origin                 E_UnicastIpv4Prefix_Origin                     `path:"state/origin|origin" module:"open-traffic-generator-bgp/open-traffic-generator-bgp|open-traffic-generator-bgp" shadow-path:"origin" shadow-module:"open-traffic-generator-bgp"`
	PathId                 *uint32                                        `path:"state/path-id|path-id" module:"open-traffic-generator-bgp/open-traffic-generator-bgp|open-traffic-generator-bgp" shadow-path:"path-id" shadow-module:"open-traffic-generator-bgp"`
	PrefixLength           *uint32                                        `path:"state/prefix-length|prefix-length" module:"open-traffic-generator-bgp/open-traffic-generator-bgp|open-traffic-generator-bgp" shadow-path:"prefix-length" shadow-module:"open-traffic-generator-bgp"`
}

// IsYANGGoStruct ensures that BgpPeer_UnicastIpv4Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BgpPeer_UnicastIpv4Prefix) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the BgpPeer_UnicastIpv4Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv4Prefix) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetLocalPreference retrieves the value of the leaf LocalPreference from the BgpPeer_UnicastIpv4Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPreference is set, it can
// safely use t.GetLocalPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPreference == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv4Prefix) GetLocalPreference() uint32 {
	if t == nil || t.LocalPreference == nil {
		return 0
	}
	return *t.LocalPreference
}

// GetMultiExitDiscriminator retrieves the value of the leaf MultiExitDiscriminator from the BgpPeer_UnicastIpv4Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultiExitDiscriminator is set, it can
// safely use t.GetMultiExitDiscriminator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultiExitDiscriminator == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv4Prefix) GetMultiExitDiscriminator() uint32 {
	if t == nil || t.MultiExitDiscriminator == nil {
		return 0
	}
	return *t.MultiExitDiscriminator
}

// GetNextHopIpv4Address retrieves the value of the leaf NextHopIpv4Address from the BgpPeer_UnicastIpv4Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopIpv4Address is set, it can
// safely use t.GetNextHopIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopIpv4Address == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv4Prefix) GetNextHopIpv4Address() string {
	if t == nil || t.NextHopIpv4Address == nil {
		return ""
	}
	return *t.NextHopIpv4Address
}

// GetNextHopIpv6Address retrieves the value of the leaf NextHopIpv6Address from the BgpPeer_UnicastIpv4Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopIpv6Address is set, it can
// safely use t.GetNextHopIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopIpv6Address == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv4Prefix) GetNextHopIpv6Address() string {
	if t == nil || t.NextHopIpv6Address == nil {
		return ""
	}
	return *t.NextHopIpv6Address
}

// GetOrigin retrieves the value of the leaf Origin from the BgpPeer_UnicastIpv4Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Origin is set, it can
// safely use t.GetOrigin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Origin == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv4Prefix) GetOrigin() E_UnicastIpv4Prefix_Origin {
	if t == nil || t.Origin == 0 {
		return 0
	}
	return t.Origin
}

// GetPathId retrieves the value of the leaf PathId from the BgpPeer_UnicastIpv4Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathId is set, it can
// safely use t.GetPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathId == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv4Prefix) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the BgpPeer_UnicastIpv4Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv4Prefix) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// SetAddress sets the value of the leaf Address in the BgpPeer_UnicastIpv4Prefix
// struct.
func (t *BgpPeer_UnicastIpv4Prefix) SetAddress(v string) {
	t.Address = &v
}

// SetLocalPreference sets the value of the leaf LocalPreference in the BgpPeer_UnicastIpv4Prefix
// struct.
func (t *BgpPeer_UnicastIpv4Prefix) SetLocalPreference(v uint32) {
	t.LocalPreference = &v
}

// SetMultiExitDiscriminator sets the value of the leaf MultiExitDiscriminator in the BgpPeer_UnicastIpv4Prefix
// struct.
func (t *BgpPeer_UnicastIpv4Prefix) SetMultiExitDiscriminator(v uint32) {
	t.MultiExitDiscriminator = &v
}

// SetNextHopIpv4Address sets the value of the leaf NextHopIpv4Address in the BgpPeer_UnicastIpv4Prefix
// struct.
func (t *BgpPeer_UnicastIpv4Prefix) SetNextHopIpv4Address(v string) {
	t.NextHopIpv4Address = &v
}

// SetNextHopIpv6Address sets the value of the leaf NextHopIpv6Address in the BgpPeer_UnicastIpv4Prefix
// struct.
func (t *BgpPeer_UnicastIpv4Prefix) SetNextHopIpv6Address(v string) {
	t.NextHopIpv6Address = &v
}

// SetOrigin sets the value of the leaf Origin in the BgpPeer_UnicastIpv4Prefix
// struct.
func (t *BgpPeer_UnicastIpv4Prefix) SetOrigin(v E_UnicastIpv4Prefix_Origin) {
	t.Origin = v
}

// SetPathId sets the value of the leaf PathId in the BgpPeer_UnicastIpv4Prefix
// struct.
func (t *BgpPeer_UnicastIpv4Prefix) SetPathId(v uint32) {
	t.PathId = &v
}

// SetPrefixLength sets the value of the leaf PrefixLength in the BgpPeer_UnicastIpv4Prefix
// struct.
func (t *BgpPeer_UnicastIpv4Prefix) SetPrefixLength(v uint32) {
	t.PrefixLength = &v
}

// PopulateDefaults recursively populates unset leaf fields in the BgpPeer_UnicastIpv4Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *BgpPeer_UnicastIpv4Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PathId == nil {
		var v uint32 = 0
		t.PathId = &v
	}
	for _, e := range t.AsPath {
		e.PopulateDefaults()
	}
	for _, e := range t.Community {
		e.PopulateDefaults()
	}
	for _, e := range t.ExtendedCommunity {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the BgpPeer_UnicastIpv4Prefix struct, which is a YANG list entry.
func (t *BgpPeer_UnicastIpv4Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	if t.PrefixLength == nil {
		return nil, fmt.Errorf("nil value for key PrefixLength")
	}

	return map[string]interface{}{
		"address":       *t.Address,
		"origin":        t.Origin,
		"path-id":       *t.PathId,
		"prefix-length": *t.PrefixLength,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv4Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["BgpPeer_UnicastIpv4Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv4Prefix) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *BgpPeer_UnicastIpv4Prefix) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of BgpPeer_UnicastIpv4Prefix.
func (*BgpPeer_UnicastIpv4Prefix) ΛBelongingModule() string {
	return "open-traffic-generator-bgp"
}

// BgpPeer_UnicastIpv4Prefix_AsPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/as-path YANG schema element.
type BgpPeer_UnicastIpv4Prefix_AsPath struct {
	AsNumbers   []uint32            `path:"as_numbers" module:"open-traffic-generator-bgp"`
	SegmentType E_State_SegmentType `path:"segment-type" module:"open-traffic-generator-bgp"`
}

// IsYANGGoStruct ensures that BgpPeer_UnicastIpv4Prefix_AsPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BgpPeer_UnicastIpv4Prefix_AsPath) IsYANGGoStruct() {}

// GetAsNumbers retrieves the value of the leaf AsNumbers from the BgpPeer_UnicastIpv4Prefix_AsPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsNumbers is set, it can
// safely use t.GetAsNumbers() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsNumbers == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv4Prefix_AsPath) GetAsNumbers() []uint32 {
	if t == nil || t.AsNumbers == nil {
		return nil
	}
	return t.AsNumbers
}

// GetSegmentType retrieves the value of the leaf SegmentType from the BgpPeer_UnicastIpv4Prefix_AsPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SegmentType is set, it can
// safely use t.GetSegmentType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SegmentType == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv4Prefix_AsPath) GetSegmentType() E_State_SegmentType {
	if t == nil || t.SegmentType == 0 {
		return 0
	}
	return t.SegmentType
}

// SetAsNumbers sets the value of the leaf AsNumbers in the BgpPeer_UnicastIpv4Prefix_AsPath
// struct.
func (t *BgpPeer_UnicastIpv4Prefix_AsPath) SetAsNumbers(v []uint32) {
	t.AsNumbers = v
}

// SetSegmentType sets the value of the leaf SegmentType in the BgpPeer_UnicastIpv4Prefix_AsPath
// struct.
func (t *BgpPeer_UnicastIpv4Prefix_AsPath) SetSegmentType(v E_State_SegmentType) {
	t.SegmentType = v
}

// PopulateDefaults recursively populates unset leaf fields in the BgpPeer_UnicastIpv4Prefix_AsPath
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *BgpPeer_UnicastIpv4Prefix_AsPath) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv4Prefix_AsPath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["BgpPeer_UnicastIpv4Prefix_AsPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv4Prefix_AsPath) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *BgpPeer_UnicastIpv4Prefix_AsPath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of BgpPeer_UnicastIpv4Prefix_AsPath.
func (*BgpPeer_UnicastIpv4Prefix_AsPath) ΛBelongingModule() string {
	return "open-traffic-generator-bgp"
}

// BgpPeer_UnicastIpv4Prefix_Community represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/community YANG schema element.
type BgpPeer_UnicastIpv4Prefix_Community struct {
	CommunityType  E_State_CommunityType `path:"community-type" module:"open-traffic-generator-bgp"`
	CustomAsNumber *uint16               `path:"custom-as-number" module:"open-traffic-generator-bgp"`
	CustomAsValue  *uint16               `path:"custom-as-value" module:"open-traffic-generator-bgp"`
}

// IsYANGGoStruct ensures that BgpPeer_UnicastIpv4Prefix_Community implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BgpPeer_UnicastIpv4Prefix_Community) IsYANGGoStruct() {}

// GetCommunityType retrieves the value of the leaf CommunityType from the BgpPeer_UnicastIpv4Prefix_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityType is set, it can
// safely use t.GetCommunityType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityType == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv4Prefix_Community) GetCommunityType() E_State_CommunityType {
	if t == nil || t.CommunityType == 0 {
		return 0
	}
	return t.CommunityType
}

// GetCustomAsNumber retrieves the value of the leaf CustomAsNumber from the BgpPeer_UnicastIpv4Prefix_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CustomAsNumber is set, it can
// safely use t.GetCustomAsNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CustomAsNumber == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv4Prefix_Community) GetCustomAsNumber() uint16 {
	if t == nil || t.CustomAsNumber == nil {
		return 0
	}
	return *t.CustomAsNumber
}

// GetCustomAsValue retrieves the value of the leaf CustomAsValue from the BgpPeer_UnicastIpv4Prefix_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CustomAsValue is set, it can
// safely use t.GetCustomAsValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CustomAsValue == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv4Prefix_Community) GetCustomAsValue() uint16 {
	if t == nil || t.CustomAsValue == nil {
		return 0
	}
	return *t.CustomAsValue
}

// SetCommunityType sets the value of the leaf CommunityType in the BgpPeer_UnicastIpv4Prefix_Community
// struct.
func (t *BgpPeer_UnicastIpv4Prefix_Community) SetCommunityType(v E_State_CommunityType) {
	t.CommunityType = v
}

// SetCustomAsNumber sets the value of the leaf CustomAsNumber in the BgpPeer_UnicastIpv4Prefix_Community
// struct.
func (t *BgpPeer_UnicastIpv4Prefix_Community) SetCustomAsNumber(v uint16) {
	t.CustomAsNumber = &v
}

// SetCustomAsValue sets the value of the leaf CustomAsValue in the BgpPeer_UnicastIpv4Prefix_Community
// struct.
func (t *BgpPeer_UnicastIpv4Prefix_Community) SetCustomAsValue(v uint16) {
	t.CustomAsValue = &v
}

// PopulateDefaults recursively populates unset leaf fields in the BgpPeer_UnicastIpv4Prefix_Community
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *BgpPeer_UnicastIpv4Prefix_Community) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv4Prefix_Community) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["BgpPeer_UnicastIpv4Prefix_Community"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv4Prefix_Community) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *BgpPeer_UnicastIpv4Prefix_Community) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of BgpPeer_UnicastIpv4Prefix_Community.
func (*BgpPeer_UnicastIpv4Prefix_Community) ΛBelongingModule() string {
	return "open-traffic-generator-bgp"
}

// BgpPeer_UnicastIpv4Prefix_ExtendedCommunity represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/extended-community YANG schema element.
type BgpPeer_UnicastIpv4Prefix_ExtendedCommunity struct {
	Raw        *string                                                 `path:"raw" module:"open-traffic-generator-bgp"`
	Structured *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured `path:"structured" module:"open-traffic-generator-bgp"`
}

// IsYANGGoStruct ensures that BgpPeer_UnicastIpv4Prefix_ExtendedCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BgpPeer_UnicastIpv4Prefix_ExtendedCommunity) IsYANGGoStruct() {}

// GetOrCreateStructured retrieves the value of the Structured field
// or returns the existing field if it already exists.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity) GetOrCreateStructured() *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured {
	if t.Structured != nil {
		return t.Structured
	}
	t.Structured = &BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured{}
	return t.Structured
}

// GetStructured returns the value of the Structured struct pointer
// from BgpPeer_UnicastIpv4Prefix_ExtendedCommunity. If the receiver or the field Structured is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity) GetStructured() *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured {
	if t != nil && t.Structured != nil {
		return t.Structured
	}
	return nil
}

// GetRaw retrieves the value of the leaf Raw from the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Raw is set, it can
// safely use t.GetRaw() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Raw == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity) GetRaw() string {
	if t == nil || t.Raw == nil {
		return ""
	}
	return *t.Raw
}

// SetRaw sets the value of the leaf Raw in the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity
// struct.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity) SetRaw(v string) {
	t.Raw = &v
}

// PopulateDefaults recursively populates unset leaf fields in the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Structured.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["BgpPeer_UnicastIpv4Prefix_ExtendedCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of BgpPeer_UnicastIpv4Prefix_ExtendedCommunity.
func (*BgpPeer_UnicastIpv4Prefix_ExtendedCommunity) ΛBelongingModule() string {
	return "open-traffic-generator-bgp"
}

// BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/extended-community/structured YANG schema element.
type BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured struct {
	BgpExtendedCommunityStructuredType E_ExtendedCommunity_BgpExtendedCommunityStructuredType                             `path:"bgp-extended-community-structured_type" module:"open-traffic-generator-bgp"`
	NonTransitive_2OctetAsType         *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType `path:"non_transitive_2octet_as_type" module:"open-traffic-generator-bgp"`
	Transitive_2OctetAsType            *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType    `path:"transitive_2octet_as_type" module:"open-traffic-generator-bgp"`
	Transitive_4OctetAsType            *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType    `path:"transitive_4octet_as_type" module:"open-traffic-generator-bgp"`
	TransitiveIpv4AddressType          *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType  `path:"transitive_ipv4_address_type" module:"open-traffic-generator-bgp"`
	TransitiveOpaqueType               *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType       `path:"transitive_opaque_type" module:"open-traffic-generator-bgp"`
}

// IsYANGGoStruct ensures that BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured) IsYANGGoStruct() {}

// GetOrCreateNonTransitive_2OctetAsType retrieves the value of the NonTransitive_2OctetAsType field
// or returns the existing field if it already exists.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured) GetOrCreateNonTransitive_2OctetAsType() *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType {
	if t.NonTransitive_2OctetAsType != nil {
		return t.NonTransitive_2OctetAsType
	}
	t.NonTransitive_2OctetAsType = &BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType{}
	return t.NonTransitive_2OctetAsType
}

// GetOrCreateTransitive_2OctetAsType retrieves the value of the Transitive_2OctetAsType field
// or returns the existing field if it already exists.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured) GetOrCreateTransitive_2OctetAsType() *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType {
	if t.Transitive_2OctetAsType != nil {
		return t.Transitive_2OctetAsType
	}
	t.Transitive_2OctetAsType = &BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType{}
	return t.Transitive_2OctetAsType
}

// GetOrCreateTransitive_4OctetAsType retrieves the value of the Transitive_4OctetAsType field
// or returns the existing field if it already exists.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured) GetOrCreateTransitive_4OctetAsType() *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType {
	if t.Transitive_4OctetAsType != nil {
		return t.Transitive_4OctetAsType
	}
	t.Transitive_4OctetAsType = &BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType{}
	return t.Transitive_4OctetAsType
}

// GetOrCreateTransitiveIpv4AddressType retrieves the value of the TransitiveIpv4AddressType field
// or returns the existing field if it already exists.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured) GetOrCreateTransitiveIpv4AddressType() *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType {
	if t.TransitiveIpv4AddressType != nil {
		return t.TransitiveIpv4AddressType
	}
	t.TransitiveIpv4AddressType = &BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType{}
	return t.TransitiveIpv4AddressType
}

// GetOrCreateTransitiveOpaqueType retrieves the value of the TransitiveOpaqueType field
// or returns the existing field if it already exists.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured) GetOrCreateTransitiveOpaqueType() *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType {
	if t.TransitiveOpaqueType != nil {
		return t.TransitiveOpaqueType
	}
	t.TransitiveOpaqueType = &BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType{}
	return t.TransitiveOpaqueType
}

// GetNonTransitive_2OctetAsType returns the value of the NonTransitive_2OctetAsType struct pointer
// from BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured. If the receiver or the field NonTransitive_2OctetAsType is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured) GetNonTransitive_2OctetAsType() *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType {
	if t != nil && t.NonTransitive_2OctetAsType != nil {
		return t.NonTransitive_2OctetAsType
	}
	return nil
}

// GetTransitive_2OctetAsType returns the value of the Transitive_2OctetAsType struct pointer
// from BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured. If the receiver or the field Transitive_2OctetAsType is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured) GetTransitive_2OctetAsType() *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType {
	if t != nil && t.Transitive_2OctetAsType != nil {
		return t.Transitive_2OctetAsType
	}
	return nil
}

// GetTransitive_4OctetAsType returns the value of the Transitive_4OctetAsType struct pointer
// from BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured. If the receiver or the field Transitive_4OctetAsType is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured) GetTransitive_4OctetAsType() *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType {
	if t != nil && t.Transitive_4OctetAsType != nil {
		return t.Transitive_4OctetAsType
	}
	return nil
}

// GetTransitiveIpv4AddressType returns the value of the TransitiveIpv4AddressType struct pointer
// from BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured. If the receiver or the field TransitiveIpv4AddressType is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured) GetTransitiveIpv4AddressType() *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType {
	if t != nil && t.TransitiveIpv4AddressType != nil {
		return t.TransitiveIpv4AddressType
	}
	return nil
}

// GetTransitiveOpaqueType returns the value of the TransitiveOpaqueType struct pointer
// from BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured. If the receiver or the field TransitiveOpaqueType is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured) GetTransitiveOpaqueType() *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType {
	if t != nil && t.TransitiveOpaqueType != nil {
		return t.TransitiveOpaqueType
	}
	return nil
}

// GetBgpExtendedCommunityStructuredType retrieves the value of the leaf BgpExtendedCommunityStructuredType from the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpExtendedCommunityStructuredType is set, it can
// safely use t.GetBgpExtendedCommunityStructuredType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpExtendedCommunityStructuredType == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured) GetBgpExtendedCommunityStructuredType() E_ExtendedCommunity_BgpExtendedCommunityStructuredType {
	if t == nil || t.BgpExtendedCommunityStructuredType == 0 {
		return 0
	}
	return t.BgpExtendedCommunityStructuredType
}

// SetBgpExtendedCommunityStructuredType sets the value of the leaf BgpExtendedCommunityStructuredType in the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured
// struct.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured) SetBgpExtendedCommunityStructuredType(v E_ExtendedCommunity_BgpExtendedCommunityStructuredType) {
	t.BgpExtendedCommunityStructuredType = v
}

// PopulateDefaults recursively populates unset leaf fields in the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.NonTransitive_2OctetAsType.PopulateDefaults()
	t.Transitive_2OctetAsType.PopulateDefaults()
	t.Transitive_4OctetAsType.PopulateDefaults()
	t.TransitiveIpv4AddressType.PopulateDefaults()
	t.TransitiveOpaqueType.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured.
func (*BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured) ΛBelongingModule() string {
	return "open-traffic-generator-bgp"
}

// BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/extended-community/structured/non_transitive_2octet_as_type YANG schema element.
type BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType struct {
	LinkBandwidthSubtype       *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype `path:"link_bandwidth_subtype" module:"open-traffic-generator-bgp"`
	NonTransitive_2OctetAsType E_Structured_NonTransitive_2OctetAsType                                                                 `path:"non_transitive_2octet_as_type" module:"open-traffic-generator-bgp"`
}

// IsYANGGoStruct ensures that BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType) IsYANGGoStruct() {
}

// GetOrCreateLinkBandwidthSubtype retrieves the value of the LinkBandwidthSubtype field
// or returns the existing field if it already exists.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType) GetOrCreateLinkBandwidthSubtype() *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype {
	if t.LinkBandwidthSubtype != nil {
		return t.LinkBandwidthSubtype
	}
	t.LinkBandwidthSubtype = &BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype{}
	return t.LinkBandwidthSubtype
}

// GetLinkBandwidthSubtype returns the value of the LinkBandwidthSubtype struct pointer
// from BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType. If the receiver or the field LinkBandwidthSubtype is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType) GetLinkBandwidthSubtype() *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype {
	if t != nil && t.LinkBandwidthSubtype != nil {
		return t.LinkBandwidthSubtype
	}
	return nil
}

// GetNonTransitive_2OctetAsType retrieves the value of the leaf NonTransitive_2OctetAsType from the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NonTransitive_2OctetAsType is set, it can
// safely use t.GetNonTransitive_2OctetAsType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NonTransitive_2OctetAsType == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType) GetNonTransitive_2OctetAsType() E_Structured_NonTransitive_2OctetAsType {
	if t == nil || t.NonTransitive_2OctetAsType == 0 {
		return 0
	}
	return t.NonTransitive_2OctetAsType
}

// SetNonTransitive_2OctetAsType sets the value of the leaf NonTransitive_2OctetAsType in the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType
// struct.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType) SetNonTransitive_2OctetAsType(v E_Structured_NonTransitive_2OctetAsType) {
	t.NonTransitive_2OctetAsType = v
}

// PopulateDefaults recursively populates unset leaf fields in the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LinkBandwidthSubtype.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType.
func (*BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType) ΛBelongingModule() string {
	return "open-traffic-generator-bgp"
}

// BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/extended-community/structured/non_transitive_2octet_as_type/link_bandwidth_subtype YANG schema element.
type BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype struct {
	Bandwidth      Binary  `path:"bandwidth" module:"open-traffic-generator-bgp"`
	Global_2ByteAs *uint16 `path:"global_2byte_as" module:"open-traffic-generator-bgp"`
}

// IsYANGGoStruct ensures that BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype) IsYANGGoStruct() {
}

// GetBandwidth retrieves the value of the leaf Bandwidth from the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bandwidth is set, it can
// safely use t.GetBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bandwidth == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype) GetBandwidth() Binary {
	if t == nil || t.Bandwidth == nil {
		return nil
	}
	return t.Bandwidth
}

// GetGlobal_2ByteAs retrieves the value of the leaf Global_2ByteAs from the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Global_2ByteAs is set, it can
// safely use t.GetGlobal_2ByteAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Global_2ByteAs == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype) GetGlobal_2ByteAs() uint16 {
	if t == nil || t.Global_2ByteAs == nil {
		return 0
	}
	return *t.Global_2ByteAs
}

// SetBandwidth sets the value of the leaf Bandwidth in the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype
// struct.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype) SetBandwidth(v Binary) {
	t.Bandwidth = v
}

// SetGlobal_2ByteAs sets the value of the leaf Global_2ByteAs in the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype
// struct.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype) SetGlobal_2ByteAs(v uint16) {
	t.Global_2ByteAs = &v
}

// PopulateDefaults recursively populates unset leaf fields in the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype.
func (*BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype) ΛBelongingModule() string {
	return "open-traffic-generator-bgp"
}

// BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/extended-community/structured/transitive_ipv4_address_type YANG schema element.
type BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType struct {
	RouteOriginSubtype        *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype `path:"route_origin_subtype" module:"open-traffic-generator-bgp"`
	RouteTargetSubtype        *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype `path:"route_target_subtype" module:"open-traffic-generator-bgp"`
	TransitiveIpv4AddressType E_Structured_TransitiveIpv4AddressType                                                               `path:"transitive_ipv4_address_type" module:"open-traffic-generator-bgp"`
}

// IsYANGGoStruct ensures that BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType) IsYANGGoStruct() {
}

// GetOrCreateRouteOriginSubtype retrieves the value of the RouteOriginSubtype field
// or returns the existing field if it already exists.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType) GetOrCreateRouteOriginSubtype() *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype {
	if t.RouteOriginSubtype != nil {
		return t.RouteOriginSubtype
	}
	t.RouteOriginSubtype = &BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype{}
	return t.RouteOriginSubtype
}

// GetOrCreateRouteTargetSubtype retrieves the value of the RouteTargetSubtype field
// or returns the existing field if it already exists.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType) GetOrCreateRouteTargetSubtype() *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype {
	if t.RouteTargetSubtype != nil {
		return t.RouteTargetSubtype
	}
	t.RouteTargetSubtype = &BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype{}
	return t.RouteTargetSubtype
}

// GetRouteOriginSubtype returns the value of the RouteOriginSubtype struct pointer
// from BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType. If the receiver or the field RouteOriginSubtype is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType) GetRouteOriginSubtype() *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype {
	if t != nil && t.RouteOriginSubtype != nil {
		return t.RouteOriginSubtype
	}
	return nil
}

// GetRouteTargetSubtype returns the value of the RouteTargetSubtype struct pointer
// from BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType. If the receiver or the field RouteTargetSubtype is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType) GetRouteTargetSubtype() *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype {
	if t != nil && t.RouteTargetSubtype != nil {
		return t.RouteTargetSubtype
	}
	return nil
}

// GetTransitiveIpv4AddressType retrieves the value of the leaf TransitiveIpv4AddressType from the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransitiveIpv4AddressType is set, it can
// safely use t.GetTransitiveIpv4AddressType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransitiveIpv4AddressType == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType) GetTransitiveIpv4AddressType() E_Structured_TransitiveIpv4AddressType {
	if t == nil || t.TransitiveIpv4AddressType == 0 {
		return 0
	}
	return t.TransitiveIpv4AddressType
}

// SetTransitiveIpv4AddressType sets the value of the leaf TransitiveIpv4AddressType in the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType
// struct.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType) SetTransitiveIpv4AddressType(v E_Structured_TransitiveIpv4AddressType) {
	t.TransitiveIpv4AddressType = v
}

// PopulateDefaults recursively populates unset leaf fields in the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RouteOriginSubtype.PopulateDefaults()
	t.RouteTargetSubtype.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType.
func (*BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType) ΛBelongingModule() string {
	return "open-traffic-generator-bgp"
}

// BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/extended-community/structured/transitive_ipv4_address_type/route_origin_subtype YANG schema element.
type BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype struct {
	GlobalIpv4Admin  *string `path:"global_ipv4_admin" module:"open-traffic-generator-bgp"`
	Local_2ByteAdmin *uint16 `path:"local_2byte_admin" module:"open-traffic-generator-bgp"`
}

// IsYANGGoStruct ensures that BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype) IsYANGGoStruct() {
}

// GetGlobalIpv4Admin retrieves the value of the leaf GlobalIpv4Admin from the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GlobalIpv4Admin is set, it can
// safely use t.GetGlobalIpv4Admin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GlobalIpv4Admin == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype) GetGlobalIpv4Admin() string {
	if t == nil || t.GlobalIpv4Admin == nil {
		return ""
	}
	return *t.GlobalIpv4Admin
}

// GetLocal_2ByteAdmin retrieves the value of the leaf Local_2ByteAdmin from the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Local_2ByteAdmin is set, it can
// safely use t.GetLocal_2ByteAdmin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Local_2ByteAdmin == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype) GetLocal_2ByteAdmin() uint16 {
	if t == nil || t.Local_2ByteAdmin == nil {
		return 0
	}
	return *t.Local_2ByteAdmin
}

// SetGlobalIpv4Admin sets the value of the leaf GlobalIpv4Admin in the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype
// struct.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype) SetGlobalIpv4Admin(v string) {
	t.GlobalIpv4Admin = &v
}

// SetLocal_2ByteAdmin sets the value of the leaf Local_2ByteAdmin in the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype
// struct.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype) SetLocal_2ByteAdmin(v uint16) {
	t.Local_2ByteAdmin = &v
}

// PopulateDefaults recursively populates unset leaf fields in the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype.
func (*BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype) ΛBelongingModule() string {
	return "open-traffic-generator-bgp"
}

// BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/extended-community/structured/transitive_ipv4_address_type/route_target_subtype YANG schema element.
type BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype struct {
	GlobalIpv4Admin  *string `path:"global_ipv4_admin" module:"open-traffic-generator-bgp"`
	Local_2ByteAdmin *uint16 `path:"local_2byte_admin" module:"open-traffic-generator-bgp"`
}

// IsYANGGoStruct ensures that BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype) IsYANGGoStruct() {
}

// GetGlobalIpv4Admin retrieves the value of the leaf GlobalIpv4Admin from the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GlobalIpv4Admin is set, it can
// safely use t.GetGlobalIpv4Admin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GlobalIpv4Admin == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype) GetGlobalIpv4Admin() string {
	if t == nil || t.GlobalIpv4Admin == nil {
		return ""
	}
	return *t.GlobalIpv4Admin
}

// GetLocal_2ByteAdmin retrieves the value of the leaf Local_2ByteAdmin from the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Local_2ByteAdmin is set, it can
// safely use t.GetLocal_2ByteAdmin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Local_2ByteAdmin == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype) GetLocal_2ByteAdmin() uint16 {
	if t == nil || t.Local_2ByteAdmin == nil {
		return 0
	}
	return *t.Local_2ByteAdmin
}

// SetGlobalIpv4Admin sets the value of the leaf GlobalIpv4Admin in the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype
// struct.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype) SetGlobalIpv4Admin(v string) {
	t.GlobalIpv4Admin = &v
}

// SetLocal_2ByteAdmin sets the value of the leaf Local_2ByteAdmin in the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype
// struct.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype) SetLocal_2ByteAdmin(v uint16) {
	t.Local_2ByteAdmin = &v
}

// PopulateDefaults recursively populates unset leaf fields in the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype.
func (*BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype) ΛBelongingModule() string {
	return "open-traffic-generator-bgp"
}

// BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/extended-community/structured/transitive_opaque_type YANG schema element.
type BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType struct {
	ColorSubtype         *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype         `path:"color_subtype" module:"open-traffic-generator-bgp"`
	EncapsulationSubtype *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype `path:"encapsulation_subtype" module:"open-traffic-generator-bgp"`
	TransitiveOpaqueType E_Structured_TransitiveOpaqueType                                                                 `path:"transitive_opaque_type" module:"open-traffic-generator-bgp"`
}

// IsYANGGoStruct ensures that BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType) IsYANGGoStruct() {
}

// GetOrCreateColorSubtype retrieves the value of the ColorSubtype field
// or returns the existing field if it already exists.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType) GetOrCreateColorSubtype() *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype {
	if t.ColorSubtype != nil {
		return t.ColorSubtype
	}
	t.ColorSubtype = &BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype{}
	return t.ColorSubtype
}

// GetOrCreateEncapsulationSubtype retrieves the value of the EncapsulationSubtype field
// or returns the existing field if it already exists.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType) GetOrCreateEncapsulationSubtype() *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype {
	if t.EncapsulationSubtype != nil {
		return t.EncapsulationSubtype
	}
	t.EncapsulationSubtype = &BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype{}
	return t.EncapsulationSubtype
}

// GetColorSubtype returns the value of the ColorSubtype struct pointer
// from BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType. If the receiver or the field ColorSubtype is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType) GetColorSubtype() *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype {
	if t != nil && t.ColorSubtype != nil {
		return t.ColorSubtype
	}
	return nil
}

// GetEncapsulationSubtype returns the value of the EncapsulationSubtype struct pointer
// from BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType. If the receiver or the field EncapsulationSubtype is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType) GetEncapsulationSubtype() *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype {
	if t != nil && t.EncapsulationSubtype != nil {
		return t.EncapsulationSubtype
	}
	return nil
}

// GetTransitiveOpaqueType retrieves the value of the leaf TransitiveOpaqueType from the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransitiveOpaqueType is set, it can
// safely use t.GetTransitiveOpaqueType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransitiveOpaqueType == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType) GetTransitiveOpaqueType() E_Structured_TransitiveOpaqueType {
	if t == nil || t.TransitiveOpaqueType == 0 {
		return 0
	}
	return t.TransitiveOpaqueType
}

// SetTransitiveOpaqueType sets the value of the leaf TransitiveOpaqueType in the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType
// struct.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType) SetTransitiveOpaqueType(v E_Structured_TransitiveOpaqueType) {
	t.TransitiveOpaqueType = v
}

// PopulateDefaults recursively populates unset leaf fields in the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ColorSubtype.PopulateDefaults()
	t.EncapsulationSubtype.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType.
func (*BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType) ΛBelongingModule() string {
	return "open-traffic-generator-bgp"
}

// BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/extended-community/structured/transitive_opaque_type/color_subtype YANG schema element.
type BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype struct {
	Color *uint32 `path:"color" module:"open-traffic-generator-bgp"`
	Flags *uint16 `path:"flags" module:"open-traffic-generator-bgp"`
}

// IsYANGGoStruct ensures that BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype) IsYANGGoStruct() {
}

// GetColor retrieves the value of the leaf Color from the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Color is set, it can
// safely use t.GetColor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Color == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype) GetColor() uint32 {
	if t == nil || t.Color == nil {
		return 0
	}
	return *t.Color
}

// GetFlags retrieves the value of the leaf Flags from the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flags is set, it can
// safely use t.GetFlags() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flags == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype) GetFlags() uint16 {
	if t == nil || t.Flags == nil {
		return 0
	}
	return *t.Flags
}

// SetColor sets the value of the leaf Color in the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype
// struct.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype) SetColor(v uint32) {
	t.Color = &v
}

// SetFlags sets the value of the leaf Flags in the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype
// struct.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype) SetFlags(v uint16) {
	t.Flags = &v
}

// PopulateDefaults recursively populates unset leaf fields in the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype.
func (*BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype) ΛBelongingModule() string {
	return "open-traffic-generator-bgp"
}

// BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/extended-community/structured/transitive_opaque_type/encapsulation_subtype YANG schema element.
type BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype struct {
	Reserved   *uint32 `path:"reserved" module:"open-traffic-generator-bgp"`
	TunnelType *uint16 `path:"tunnel_type" module:"open-traffic-generator-bgp"`
}

// IsYANGGoStruct ensures that BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype) IsYANGGoStruct() {
}

// GetReserved retrieves the value of the leaf Reserved from the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Reserved is set, it can
// safely use t.GetReserved() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Reserved == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype) GetReserved() uint32 {
	if t == nil || t.Reserved == nil {
		return 0
	}
	return *t.Reserved
}

// GetTunnelType retrieves the value of the leaf TunnelType from the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelType is set, it can
// safely use t.GetTunnelType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelType == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype) GetTunnelType() uint16 {
	if t == nil || t.TunnelType == nil {
		return 0
	}
	return *t.TunnelType
}

// SetReserved sets the value of the leaf Reserved in the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype
// struct.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype) SetReserved(v uint32) {
	t.Reserved = &v
}

// SetTunnelType sets the value of the leaf TunnelType in the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype
// struct.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype) SetTunnelType(v uint16) {
	t.TunnelType = &v
}

// PopulateDefaults recursively populates unset leaf fields in the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype.
func (*BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype) ΛBelongingModule() string {
	return "open-traffic-generator-bgp"
}

// BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/extended-community/structured/transitive_2octet_as_type YANG schema element.
type BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType struct {
	RouteOriginSubtype      *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype `path:"route_origin_subtype" module:"open-traffic-generator-bgp"`
	RouteTargetSubtype      *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype `path:"route_target_subtype" module:"open-traffic-generator-bgp"`
	Transitive_2OctetAsType E_Structured_Transitive_2OctetAsType                                                               `path:"transitive_2octet_as_type" module:"open-traffic-generator-bgp"`
}

// IsYANGGoStruct ensures that BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType) IsYANGGoStruct() {
}

// GetOrCreateRouteOriginSubtype retrieves the value of the RouteOriginSubtype field
// or returns the existing field if it already exists.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType) GetOrCreateRouteOriginSubtype() *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype {
	if t.RouteOriginSubtype != nil {
		return t.RouteOriginSubtype
	}
	t.RouteOriginSubtype = &BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype{}
	return t.RouteOriginSubtype
}

// GetOrCreateRouteTargetSubtype retrieves the value of the RouteTargetSubtype field
// or returns the existing field if it already exists.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType) GetOrCreateRouteTargetSubtype() *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype {
	if t.RouteTargetSubtype != nil {
		return t.RouteTargetSubtype
	}
	t.RouteTargetSubtype = &BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype{}
	return t.RouteTargetSubtype
}

// GetRouteOriginSubtype returns the value of the RouteOriginSubtype struct pointer
// from BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType. If the receiver or the field RouteOriginSubtype is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType) GetRouteOriginSubtype() *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype {
	if t != nil && t.RouteOriginSubtype != nil {
		return t.RouteOriginSubtype
	}
	return nil
}

// GetRouteTargetSubtype returns the value of the RouteTargetSubtype struct pointer
// from BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType. If the receiver or the field RouteTargetSubtype is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType) GetRouteTargetSubtype() *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype {
	if t != nil && t.RouteTargetSubtype != nil {
		return t.RouteTargetSubtype
	}
	return nil
}

// GetTransitive_2OctetAsType retrieves the value of the leaf Transitive_2OctetAsType from the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive_2OctetAsType is set, it can
// safely use t.GetTransitive_2OctetAsType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive_2OctetAsType == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType) GetTransitive_2OctetAsType() E_Structured_Transitive_2OctetAsType {
	if t == nil || t.Transitive_2OctetAsType == 0 {
		return 0
	}
	return t.Transitive_2OctetAsType
}

// SetTransitive_2OctetAsType sets the value of the leaf Transitive_2OctetAsType in the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType
// struct.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType) SetTransitive_2OctetAsType(v E_Structured_Transitive_2OctetAsType) {
	t.Transitive_2OctetAsType = v
}

// PopulateDefaults recursively populates unset leaf fields in the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RouteOriginSubtype.PopulateDefaults()
	t.RouteTargetSubtype.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType.
func (*BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType) ΛBelongingModule() string {
	return "open-traffic-generator-bgp"
}

// BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/extended-community/structured/transitive_2octet_as_type/route_origin_subtype YANG schema element.
type BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype struct {
	Global_2ByteAs   *uint16 `path:"global_2byte_as" module:"open-traffic-generator-bgp"`
	Local_4ByteAdmin *uint32 `path:"local_4byte_admin" module:"open-traffic-generator-bgp"`
}

// IsYANGGoStruct ensures that BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype) IsYANGGoStruct() {
}

// GetGlobal_2ByteAs retrieves the value of the leaf Global_2ByteAs from the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Global_2ByteAs is set, it can
// safely use t.GetGlobal_2ByteAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Global_2ByteAs == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype) GetGlobal_2ByteAs() uint16 {
	if t == nil || t.Global_2ByteAs == nil {
		return 0
	}
	return *t.Global_2ByteAs
}

// GetLocal_4ByteAdmin retrieves the value of the leaf Local_4ByteAdmin from the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Local_4ByteAdmin is set, it can
// safely use t.GetLocal_4ByteAdmin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Local_4ByteAdmin == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype) GetLocal_4ByteAdmin() uint32 {
	if t == nil || t.Local_4ByteAdmin == nil {
		return 0
	}
	return *t.Local_4ByteAdmin
}

// SetGlobal_2ByteAs sets the value of the leaf Global_2ByteAs in the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype
// struct.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype) SetGlobal_2ByteAs(v uint16) {
	t.Global_2ByteAs = &v
}

// SetLocal_4ByteAdmin sets the value of the leaf Local_4ByteAdmin in the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype
// struct.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype) SetLocal_4ByteAdmin(v uint32) {
	t.Local_4ByteAdmin = &v
}

// PopulateDefaults recursively populates unset leaf fields in the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype.
func (*BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype) ΛBelongingModule() string {
	return "open-traffic-generator-bgp"
}

// BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/extended-community/structured/transitive_2octet_as_type/route_target_subtype YANG schema element.
type BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype struct {
	Global_2ByteAs   *uint16 `path:"global_2byte_as" module:"open-traffic-generator-bgp"`
	Local_4ByteAdmin *uint32 `path:"local_4byte_admin" module:"open-traffic-generator-bgp"`
}

// IsYANGGoStruct ensures that BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype) IsYANGGoStruct() {
}

// GetGlobal_2ByteAs retrieves the value of the leaf Global_2ByteAs from the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Global_2ByteAs is set, it can
// safely use t.GetGlobal_2ByteAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Global_2ByteAs == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype) GetGlobal_2ByteAs() uint16 {
	if t == nil || t.Global_2ByteAs == nil {
		return 0
	}
	return *t.Global_2ByteAs
}

// GetLocal_4ByteAdmin retrieves the value of the leaf Local_4ByteAdmin from the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Local_4ByteAdmin is set, it can
// safely use t.GetLocal_4ByteAdmin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Local_4ByteAdmin == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype) GetLocal_4ByteAdmin() uint32 {
	if t == nil || t.Local_4ByteAdmin == nil {
		return 0
	}
	return *t.Local_4ByteAdmin
}

// SetGlobal_2ByteAs sets the value of the leaf Global_2ByteAs in the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype
// struct.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype) SetGlobal_2ByteAs(v uint16) {
	t.Global_2ByteAs = &v
}

// SetLocal_4ByteAdmin sets the value of the leaf Local_4ByteAdmin in the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype
// struct.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype) SetLocal_4ByteAdmin(v uint32) {
	t.Local_4ByteAdmin = &v
}

// PopulateDefaults recursively populates unset leaf fields in the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype.
func (*BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype) ΛBelongingModule() string {
	return "open-traffic-generator-bgp"
}

// BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/extended-community/structured/transitive_4octet_as_type YANG schema element.
type BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType struct {
	RouteOriginSubtype      *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype `path:"route_origin_subtype" module:"open-traffic-generator-bgp"`
	RouteTargetSubtype      *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype `path:"route_target_subtype" module:"open-traffic-generator-bgp"`
	Transitive_4OctetAsType E_Structured_Transitive_4OctetAsType                                                               `path:"transitive_4octet_as_type" module:"open-traffic-generator-bgp"`
}

// IsYANGGoStruct ensures that BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType) IsYANGGoStruct() {
}

// GetOrCreateRouteOriginSubtype retrieves the value of the RouteOriginSubtype field
// or returns the existing field if it already exists.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType) GetOrCreateRouteOriginSubtype() *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype {
	if t.RouteOriginSubtype != nil {
		return t.RouteOriginSubtype
	}
	t.RouteOriginSubtype = &BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype{}
	return t.RouteOriginSubtype
}

// GetOrCreateRouteTargetSubtype retrieves the value of the RouteTargetSubtype field
// or returns the existing field if it already exists.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType) GetOrCreateRouteTargetSubtype() *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype {
	if t.RouteTargetSubtype != nil {
		return t.RouteTargetSubtype
	}
	t.RouteTargetSubtype = &BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype{}
	return t.RouteTargetSubtype
}

// GetRouteOriginSubtype returns the value of the RouteOriginSubtype struct pointer
// from BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType. If the receiver or the field RouteOriginSubtype is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType) GetRouteOriginSubtype() *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype {
	if t != nil && t.RouteOriginSubtype != nil {
		return t.RouteOriginSubtype
	}
	return nil
}

// GetRouteTargetSubtype returns the value of the RouteTargetSubtype struct pointer
// from BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType. If the receiver or the field RouteTargetSubtype is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType) GetRouteTargetSubtype() *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype {
	if t != nil && t.RouteTargetSubtype != nil {
		return t.RouteTargetSubtype
	}
	return nil
}

// GetTransitive_4OctetAsType retrieves the value of the leaf Transitive_4OctetAsType from the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive_4OctetAsType is set, it can
// safely use t.GetTransitive_4OctetAsType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive_4OctetAsType == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType) GetTransitive_4OctetAsType() E_Structured_Transitive_4OctetAsType {
	if t == nil || t.Transitive_4OctetAsType == 0 {
		return 0
	}
	return t.Transitive_4OctetAsType
}

// SetTransitive_4OctetAsType sets the value of the leaf Transitive_4OctetAsType in the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType
// struct.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType) SetTransitive_4OctetAsType(v E_Structured_Transitive_4OctetAsType) {
	t.Transitive_4OctetAsType = v
}

// PopulateDefaults recursively populates unset leaf fields in the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RouteOriginSubtype.PopulateDefaults()
	t.RouteTargetSubtype.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType.
func (*BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType) ΛBelongingModule() string {
	return "open-traffic-generator-bgp"
}

// BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/extended-community/structured/transitive_4octet_as_type/route_origin_subtype YANG schema element.
type BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype struct {
	Global_4ByteAs   *uint32 `path:"global_4byte_as" module:"open-traffic-generator-bgp"`
	Local_2ByteAdmin *uint16 `path:"local_2byte_admin" module:"open-traffic-generator-bgp"`
}

// IsYANGGoStruct ensures that BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype) IsYANGGoStruct() {
}

// GetGlobal_4ByteAs retrieves the value of the leaf Global_4ByteAs from the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Global_4ByteAs is set, it can
// safely use t.GetGlobal_4ByteAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Global_4ByteAs == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype) GetGlobal_4ByteAs() uint32 {
	if t == nil || t.Global_4ByteAs == nil {
		return 0
	}
	return *t.Global_4ByteAs
}

// GetLocal_2ByteAdmin retrieves the value of the leaf Local_2ByteAdmin from the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Local_2ByteAdmin is set, it can
// safely use t.GetLocal_2ByteAdmin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Local_2ByteAdmin == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype) GetLocal_2ByteAdmin() uint16 {
	if t == nil || t.Local_2ByteAdmin == nil {
		return 0
	}
	return *t.Local_2ByteAdmin
}

// SetGlobal_4ByteAs sets the value of the leaf Global_4ByteAs in the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype
// struct.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype) SetGlobal_4ByteAs(v uint32) {
	t.Global_4ByteAs = &v
}

// SetLocal_2ByteAdmin sets the value of the leaf Local_2ByteAdmin in the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype
// struct.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype) SetLocal_2ByteAdmin(v uint16) {
	t.Local_2ByteAdmin = &v
}

// PopulateDefaults recursively populates unset leaf fields in the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype.
func (*BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype) ΛBelongingModule() string {
	return "open-traffic-generator-bgp"
}

// BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/extended-community/structured/transitive_4octet_as_type/route_target_subtype YANG schema element.
type BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype struct {
	Global_4ByteAs   *uint32 `path:"global_4byte_as" module:"open-traffic-generator-bgp"`
	Local_2ByteAdmin *uint16 `path:"local_2byte_admin" module:"open-traffic-generator-bgp"`
}

// IsYANGGoStruct ensures that BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype) IsYANGGoStruct() {
}

// GetGlobal_4ByteAs retrieves the value of the leaf Global_4ByteAs from the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Global_4ByteAs is set, it can
// safely use t.GetGlobal_4ByteAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Global_4ByteAs == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype) GetGlobal_4ByteAs() uint32 {
	if t == nil || t.Global_4ByteAs == nil {
		return 0
	}
	return *t.Global_4ByteAs
}

// GetLocal_2ByteAdmin retrieves the value of the leaf Local_2ByteAdmin from the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Local_2ByteAdmin is set, it can
// safely use t.GetLocal_2ByteAdmin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Local_2ByteAdmin == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype) GetLocal_2ByteAdmin() uint16 {
	if t == nil || t.Local_2ByteAdmin == nil {
		return 0
	}
	return *t.Local_2ByteAdmin
}

// SetGlobal_4ByteAs sets the value of the leaf Global_4ByteAs in the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype
// struct.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype) SetGlobal_4ByteAs(v uint32) {
	t.Global_4ByteAs = &v
}

// SetLocal_2ByteAdmin sets the value of the leaf Local_2ByteAdmin in the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype
// struct.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype) SetLocal_2ByteAdmin(v uint16) {
	t.Local_2ByteAdmin = &v
}

// PopulateDefaults recursively populates unset leaf fields in the BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype.
func (*BgpPeer_UnicastIpv4Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype) ΛBelongingModule() string {
	return "open-traffic-generator-bgp"
}

// BgpPeer_UnicastIpv6Prefix represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix YANG schema element.
type BgpPeer_UnicastIpv6Prefix struct {
	Address                *string                                        `path:"state/address|address" module:"open-traffic-generator-bgp/open-traffic-generator-bgp|open-traffic-generator-bgp" shadow-path:"address" shadow-module:"open-traffic-generator-bgp"`
	AsPath                 []*BgpPeer_UnicastIpv6Prefix_AsPath            `path:"state/as-path" module:"open-traffic-generator-bgp/open-traffic-generator-bgp"`
	Community              []*BgpPeer_UnicastIpv6Prefix_Community         `path:"state/community" module:"open-traffic-generator-bgp/open-traffic-generator-bgp"`
	ExtendedCommunity      []*BgpPeer_UnicastIpv6Prefix_ExtendedCommunity `path:"state/extended-community" module:"open-traffic-generator-bgp/open-traffic-generator-bgp"`
	LocalPreference        *uint32                                        `path:"state/local-preference" module:"open-traffic-generator-bgp/open-traffic-generator-bgp"`
	MultiExitDiscriminator *uint32                                        `path:"state/multi-exit-discriminator" module:"open-traffic-generator-bgp/open-traffic-generator-bgp"`
	NextHopIpv4Address     *string                                        `path:"state/next-hop-ipv4-address" module:"open-traffic-generator-bgp/open-traffic-generator-bgp"`
	NextHopIpv6Address     *string                                        `path:"state/next-hop-ipv6-address" module:"open-traffic-generator-bgp/open-traffic-generator-bgp"`
	Origin                 E_UnicastIpv6Prefix_Origin                     `path:"state/origin|origin" module:"open-traffic-generator-bgp/open-traffic-generator-bgp|open-traffic-generator-bgp" shadow-path:"origin" shadow-module:"open-traffic-generator-bgp"`
	PathId                 *uint32                                        `path:"state/path-id|path-id" module:"open-traffic-generator-bgp/open-traffic-generator-bgp|open-traffic-generator-bgp" shadow-path:"path-id" shadow-module:"open-traffic-generator-bgp"`
	PrefixLength           *uint32                                        `path:"state/prefix-length|prefix-length" module:"open-traffic-generator-bgp/open-traffic-generator-bgp|open-traffic-generator-bgp" shadow-path:"prefix-length" shadow-module:"open-traffic-generator-bgp"`
}

// IsYANGGoStruct ensures that BgpPeer_UnicastIpv6Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BgpPeer_UnicastIpv6Prefix) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the BgpPeer_UnicastIpv6Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv6Prefix) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetLocalPreference retrieves the value of the leaf LocalPreference from the BgpPeer_UnicastIpv6Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPreference is set, it can
// safely use t.GetLocalPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPreference == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv6Prefix) GetLocalPreference() uint32 {
	if t == nil || t.LocalPreference == nil {
		return 0
	}
	return *t.LocalPreference
}

// GetMultiExitDiscriminator retrieves the value of the leaf MultiExitDiscriminator from the BgpPeer_UnicastIpv6Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultiExitDiscriminator is set, it can
// safely use t.GetMultiExitDiscriminator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultiExitDiscriminator == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv6Prefix) GetMultiExitDiscriminator() uint32 {
	if t == nil || t.MultiExitDiscriminator == nil {
		return 0
	}
	return *t.MultiExitDiscriminator
}

// GetNextHopIpv4Address retrieves the value of the leaf NextHopIpv4Address from the BgpPeer_UnicastIpv6Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopIpv4Address is set, it can
// safely use t.GetNextHopIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopIpv4Address == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv6Prefix) GetNextHopIpv4Address() string {
	if t == nil || t.NextHopIpv4Address == nil {
		return ""
	}
	return *t.NextHopIpv4Address
}

// GetNextHopIpv6Address retrieves the value of the leaf NextHopIpv6Address from the BgpPeer_UnicastIpv6Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopIpv6Address is set, it can
// safely use t.GetNextHopIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopIpv6Address == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv6Prefix) GetNextHopIpv6Address() string {
	if t == nil || t.NextHopIpv6Address == nil {
		return ""
	}
	return *t.NextHopIpv6Address
}

// GetOrigin retrieves the value of the leaf Origin from the BgpPeer_UnicastIpv6Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Origin is set, it can
// safely use t.GetOrigin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Origin == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv6Prefix) GetOrigin() E_UnicastIpv6Prefix_Origin {
	if t == nil || t.Origin == 0 {
		return 0
	}
	return t.Origin
}

// GetPathId retrieves the value of the leaf PathId from the BgpPeer_UnicastIpv6Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathId is set, it can
// safely use t.GetPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathId == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv6Prefix) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the BgpPeer_UnicastIpv6Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv6Prefix) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// SetAddress sets the value of the leaf Address in the BgpPeer_UnicastIpv6Prefix
// struct.
func (t *BgpPeer_UnicastIpv6Prefix) SetAddress(v string) {
	t.Address = &v
}

// SetLocalPreference sets the value of the leaf LocalPreference in the BgpPeer_UnicastIpv6Prefix
// struct.
func (t *BgpPeer_UnicastIpv6Prefix) SetLocalPreference(v uint32) {
	t.LocalPreference = &v
}

// SetMultiExitDiscriminator sets the value of the leaf MultiExitDiscriminator in the BgpPeer_UnicastIpv6Prefix
// struct.
func (t *BgpPeer_UnicastIpv6Prefix) SetMultiExitDiscriminator(v uint32) {
	t.MultiExitDiscriminator = &v
}

// SetNextHopIpv4Address sets the value of the leaf NextHopIpv4Address in the BgpPeer_UnicastIpv6Prefix
// struct.
func (t *BgpPeer_UnicastIpv6Prefix) SetNextHopIpv4Address(v string) {
	t.NextHopIpv4Address = &v
}

// SetNextHopIpv6Address sets the value of the leaf NextHopIpv6Address in the BgpPeer_UnicastIpv6Prefix
// struct.
func (t *BgpPeer_UnicastIpv6Prefix) SetNextHopIpv6Address(v string) {
	t.NextHopIpv6Address = &v
}

// SetOrigin sets the value of the leaf Origin in the BgpPeer_UnicastIpv6Prefix
// struct.
func (t *BgpPeer_UnicastIpv6Prefix) SetOrigin(v E_UnicastIpv6Prefix_Origin) {
	t.Origin = v
}

// SetPathId sets the value of the leaf PathId in the BgpPeer_UnicastIpv6Prefix
// struct.
func (t *BgpPeer_UnicastIpv6Prefix) SetPathId(v uint32) {
	t.PathId = &v
}

// SetPrefixLength sets the value of the leaf PrefixLength in the BgpPeer_UnicastIpv6Prefix
// struct.
func (t *BgpPeer_UnicastIpv6Prefix) SetPrefixLength(v uint32) {
	t.PrefixLength = &v
}

// PopulateDefaults recursively populates unset leaf fields in the BgpPeer_UnicastIpv6Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *BgpPeer_UnicastIpv6Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PathId == nil {
		var v uint32 = 0
		t.PathId = &v
	}
	for _, e := range t.AsPath {
		e.PopulateDefaults()
	}
	for _, e := range t.Community {
		e.PopulateDefaults()
	}
	for _, e := range t.ExtendedCommunity {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the BgpPeer_UnicastIpv6Prefix struct, which is a YANG list entry.
func (t *BgpPeer_UnicastIpv6Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	if t.PrefixLength == nil {
		return nil, fmt.Errorf("nil value for key PrefixLength")
	}

	return map[string]interface{}{
		"address":       *t.Address,
		"origin":        t.Origin,
		"path-id":       *t.PathId,
		"prefix-length": *t.PrefixLength,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv6Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["BgpPeer_UnicastIpv6Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv6Prefix) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *BgpPeer_UnicastIpv6Prefix) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of BgpPeer_UnicastIpv6Prefix.
func (*BgpPeer_UnicastIpv6Prefix) ΛBelongingModule() string {
	return "open-traffic-generator-bgp"
}

// BgpPeer_UnicastIpv6Prefix_AsPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/as-path YANG schema element.
type BgpPeer_UnicastIpv6Prefix_AsPath struct {
	AsNumbers   []uint32            `path:"as_numbers" module:"open-traffic-generator-bgp"`
	SegmentType E_State_SegmentType `path:"segment-type" module:"open-traffic-generator-bgp"`
}

// IsYANGGoStruct ensures that BgpPeer_UnicastIpv6Prefix_AsPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BgpPeer_UnicastIpv6Prefix_AsPath) IsYANGGoStruct() {}

// GetAsNumbers retrieves the value of the leaf AsNumbers from the BgpPeer_UnicastIpv6Prefix_AsPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsNumbers is set, it can
// safely use t.GetAsNumbers() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsNumbers == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv6Prefix_AsPath) GetAsNumbers() []uint32 {
	if t == nil || t.AsNumbers == nil {
		return nil
	}
	return t.AsNumbers
}

// GetSegmentType retrieves the value of the leaf SegmentType from the BgpPeer_UnicastIpv6Prefix_AsPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SegmentType is set, it can
// safely use t.GetSegmentType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SegmentType == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv6Prefix_AsPath) GetSegmentType() E_State_SegmentType {
	if t == nil || t.SegmentType == 0 {
		return 0
	}
	return t.SegmentType
}

// SetAsNumbers sets the value of the leaf AsNumbers in the BgpPeer_UnicastIpv6Prefix_AsPath
// struct.
func (t *BgpPeer_UnicastIpv6Prefix_AsPath) SetAsNumbers(v []uint32) {
	t.AsNumbers = v
}

// SetSegmentType sets the value of the leaf SegmentType in the BgpPeer_UnicastIpv6Prefix_AsPath
// struct.
func (t *BgpPeer_UnicastIpv6Prefix_AsPath) SetSegmentType(v E_State_SegmentType) {
	t.SegmentType = v
}

// PopulateDefaults recursively populates unset leaf fields in the BgpPeer_UnicastIpv6Prefix_AsPath
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *BgpPeer_UnicastIpv6Prefix_AsPath) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv6Prefix_AsPath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["BgpPeer_UnicastIpv6Prefix_AsPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv6Prefix_AsPath) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *BgpPeer_UnicastIpv6Prefix_AsPath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of BgpPeer_UnicastIpv6Prefix_AsPath.
func (*BgpPeer_UnicastIpv6Prefix_AsPath) ΛBelongingModule() string {
	return "open-traffic-generator-bgp"
}

// BgpPeer_UnicastIpv6Prefix_Community represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/community YANG schema element.
type BgpPeer_UnicastIpv6Prefix_Community struct {
	CommunityType  E_State_CommunityType `path:"community-type" module:"open-traffic-generator-bgp"`
	CustomAsNumber *uint16               `path:"custom-as-number" module:"open-traffic-generator-bgp"`
	CustomAsValue  *uint16               `path:"custom-as-value" module:"open-traffic-generator-bgp"`
}

// IsYANGGoStruct ensures that BgpPeer_UnicastIpv6Prefix_Community implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BgpPeer_UnicastIpv6Prefix_Community) IsYANGGoStruct() {}

// GetCommunityType retrieves the value of the leaf CommunityType from the BgpPeer_UnicastIpv6Prefix_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityType is set, it can
// safely use t.GetCommunityType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityType == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv6Prefix_Community) GetCommunityType() E_State_CommunityType {
	if t == nil || t.CommunityType == 0 {
		return 0
	}
	return t.CommunityType
}

// GetCustomAsNumber retrieves the value of the leaf CustomAsNumber from the BgpPeer_UnicastIpv6Prefix_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CustomAsNumber is set, it can
// safely use t.GetCustomAsNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CustomAsNumber == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv6Prefix_Community) GetCustomAsNumber() uint16 {
	if t == nil || t.CustomAsNumber == nil {
		return 0
	}
	return *t.CustomAsNumber
}

// GetCustomAsValue retrieves the value of the leaf CustomAsValue from the BgpPeer_UnicastIpv6Prefix_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CustomAsValue is set, it can
// safely use t.GetCustomAsValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CustomAsValue == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv6Prefix_Community) GetCustomAsValue() uint16 {
	if t == nil || t.CustomAsValue == nil {
		return 0
	}
	return *t.CustomAsValue
}

// SetCommunityType sets the value of the leaf CommunityType in the BgpPeer_UnicastIpv6Prefix_Community
// struct.
func (t *BgpPeer_UnicastIpv6Prefix_Community) SetCommunityType(v E_State_CommunityType) {
	t.CommunityType = v
}

// SetCustomAsNumber sets the value of the leaf CustomAsNumber in the BgpPeer_UnicastIpv6Prefix_Community
// struct.
func (t *BgpPeer_UnicastIpv6Prefix_Community) SetCustomAsNumber(v uint16) {
	t.CustomAsNumber = &v
}

// SetCustomAsValue sets the value of the leaf CustomAsValue in the BgpPeer_UnicastIpv6Prefix_Community
// struct.
func (t *BgpPeer_UnicastIpv6Prefix_Community) SetCustomAsValue(v uint16) {
	t.CustomAsValue = &v
}

// PopulateDefaults recursively populates unset leaf fields in the BgpPeer_UnicastIpv6Prefix_Community
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *BgpPeer_UnicastIpv6Prefix_Community) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv6Prefix_Community) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["BgpPeer_UnicastIpv6Prefix_Community"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv6Prefix_Community) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *BgpPeer_UnicastIpv6Prefix_Community) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of BgpPeer_UnicastIpv6Prefix_Community.
func (*BgpPeer_UnicastIpv6Prefix_Community) ΛBelongingModule() string {
	return "open-traffic-generator-bgp"
}

// BgpPeer_UnicastIpv6Prefix_ExtendedCommunity represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/extended-community YANG schema element.
type BgpPeer_UnicastIpv6Prefix_ExtendedCommunity struct {
	Raw        *string                                                 `path:"raw" module:"open-traffic-generator-bgp"`
	Structured *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured `path:"structured" module:"open-traffic-generator-bgp"`
}

// IsYANGGoStruct ensures that BgpPeer_UnicastIpv6Prefix_ExtendedCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BgpPeer_UnicastIpv6Prefix_ExtendedCommunity) IsYANGGoStruct() {}

// GetOrCreateStructured retrieves the value of the Structured field
// or returns the existing field if it already exists.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity) GetOrCreateStructured() *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured {
	if t.Structured != nil {
		return t.Structured
	}
	t.Structured = &BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured{}
	return t.Structured
}

// GetStructured returns the value of the Structured struct pointer
// from BgpPeer_UnicastIpv6Prefix_ExtendedCommunity. If the receiver or the field Structured is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity) GetStructured() *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured {
	if t != nil && t.Structured != nil {
		return t.Structured
	}
	return nil
}

// GetRaw retrieves the value of the leaf Raw from the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Raw is set, it can
// safely use t.GetRaw() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Raw == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity) GetRaw() string {
	if t == nil || t.Raw == nil {
		return ""
	}
	return *t.Raw
}

// SetRaw sets the value of the leaf Raw in the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity
// struct.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity) SetRaw(v string) {
	t.Raw = &v
}

// PopulateDefaults recursively populates unset leaf fields in the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Structured.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["BgpPeer_UnicastIpv6Prefix_ExtendedCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of BgpPeer_UnicastIpv6Prefix_ExtendedCommunity.
func (*BgpPeer_UnicastIpv6Prefix_ExtendedCommunity) ΛBelongingModule() string {
	return "open-traffic-generator-bgp"
}

// BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/extended-community/structured YANG schema element.
type BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured struct {
	BgpExtendedCommunityStructuredType E_ExtendedCommunity_BgpExtendedCommunityStructuredType                             `path:"bgp-extended-community-structured_type" module:"open-traffic-generator-bgp"`
	NonTransitive_2OctetAsType         *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType `path:"non_transitive_2octet_as_type" module:"open-traffic-generator-bgp"`
	Transitive_2OctetAsType            *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType    `path:"transitive_2octet_as_type" module:"open-traffic-generator-bgp"`
	Transitive_4OctetAsType            *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType    `path:"transitive_4octet_as_type" module:"open-traffic-generator-bgp"`
	TransitiveIpv4AddressType          *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType  `path:"transitive_ipv4_address_type" module:"open-traffic-generator-bgp"`
	TransitiveOpaqueType               *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType       `path:"transitive_opaque_type" module:"open-traffic-generator-bgp"`
}

// IsYANGGoStruct ensures that BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured) IsYANGGoStruct() {}

// GetOrCreateNonTransitive_2OctetAsType retrieves the value of the NonTransitive_2OctetAsType field
// or returns the existing field if it already exists.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured) GetOrCreateNonTransitive_2OctetAsType() *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType {
	if t.NonTransitive_2OctetAsType != nil {
		return t.NonTransitive_2OctetAsType
	}
	t.NonTransitive_2OctetAsType = &BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType{}
	return t.NonTransitive_2OctetAsType
}

// GetOrCreateTransitive_2OctetAsType retrieves the value of the Transitive_2OctetAsType field
// or returns the existing field if it already exists.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured) GetOrCreateTransitive_2OctetAsType() *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType {
	if t.Transitive_2OctetAsType != nil {
		return t.Transitive_2OctetAsType
	}
	t.Transitive_2OctetAsType = &BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType{}
	return t.Transitive_2OctetAsType
}

// GetOrCreateTransitive_4OctetAsType retrieves the value of the Transitive_4OctetAsType field
// or returns the existing field if it already exists.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured) GetOrCreateTransitive_4OctetAsType() *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType {
	if t.Transitive_4OctetAsType != nil {
		return t.Transitive_4OctetAsType
	}
	t.Transitive_4OctetAsType = &BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType{}
	return t.Transitive_4OctetAsType
}

// GetOrCreateTransitiveIpv4AddressType retrieves the value of the TransitiveIpv4AddressType field
// or returns the existing field if it already exists.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured) GetOrCreateTransitiveIpv4AddressType() *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType {
	if t.TransitiveIpv4AddressType != nil {
		return t.TransitiveIpv4AddressType
	}
	t.TransitiveIpv4AddressType = &BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType{}
	return t.TransitiveIpv4AddressType
}

// GetOrCreateTransitiveOpaqueType retrieves the value of the TransitiveOpaqueType field
// or returns the existing field if it already exists.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured) GetOrCreateTransitiveOpaqueType() *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType {
	if t.TransitiveOpaqueType != nil {
		return t.TransitiveOpaqueType
	}
	t.TransitiveOpaqueType = &BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType{}
	return t.TransitiveOpaqueType
}

// GetNonTransitive_2OctetAsType returns the value of the NonTransitive_2OctetAsType struct pointer
// from BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured. If the receiver or the field NonTransitive_2OctetAsType is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured) GetNonTransitive_2OctetAsType() *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType {
	if t != nil && t.NonTransitive_2OctetAsType != nil {
		return t.NonTransitive_2OctetAsType
	}
	return nil
}

// GetTransitive_2OctetAsType returns the value of the Transitive_2OctetAsType struct pointer
// from BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured. If the receiver or the field Transitive_2OctetAsType is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured) GetTransitive_2OctetAsType() *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType {
	if t != nil && t.Transitive_2OctetAsType != nil {
		return t.Transitive_2OctetAsType
	}
	return nil
}

// GetTransitive_4OctetAsType returns the value of the Transitive_4OctetAsType struct pointer
// from BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured. If the receiver or the field Transitive_4OctetAsType is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured) GetTransitive_4OctetAsType() *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType {
	if t != nil && t.Transitive_4OctetAsType != nil {
		return t.Transitive_4OctetAsType
	}
	return nil
}

// GetTransitiveIpv4AddressType returns the value of the TransitiveIpv4AddressType struct pointer
// from BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured. If the receiver or the field TransitiveIpv4AddressType is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured) GetTransitiveIpv4AddressType() *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType {
	if t != nil && t.TransitiveIpv4AddressType != nil {
		return t.TransitiveIpv4AddressType
	}
	return nil
}

// GetTransitiveOpaqueType returns the value of the TransitiveOpaqueType struct pointer
// from BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured. If the receiver or the field TransitiveOpaqueType is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured) GetTransitiveOpaqueType() *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType {
	if t != nil && t.TransitiveOpaqueType != nil {
		return t.TransitiveOpaqueType
	}
	return nil
}

// GetBgpExtendedCommunityStructuredType retrieves the value of the leaf BgpExtendedCommunityStructuredType from the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpExtendedCommunityStructuredType is set, it can
// safely use t.GetBgpExtendedCommunityStructuredType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpExtendedCommunityStructuredType == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured) GetBgpExtendedCommunityStructuredType() E_ExtendedCommunity_BgpExtendedCommunityStructuredType {
	if t == nil || t.BgpExtendedCommunityStructuredType == 0 {
		return 0
	}
	return t.BgpExtendedCommunityStructuredType
}

// SetBgpExtendedCommunityStructuredType sets the value of the leaf BgpExtendedCommunityStructuredType in the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured
// struct.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured) SetBgpExtendedCommunityStructuredType(v E_ExtendedCommunity_BgpExtendedCommunityStructuredType) {
	t.BgpExtendedCommunityStructuredType = v
}

// PopulateDefaults recursively populates unset leaf fields in the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.NonTransitive_2OctetAsType.PopulateDefaults()
	t.Transitive_2OctetAsType.PopulateDefaults()
	t.Transitive_4OctetAsType.PopulateDefaults()
	t.TransitiveIpv4AddressType.PopulateDefaults()
	t.TransitiveOpaqueType.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured.
func (*BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured) ΛBelongingModule() string {
	return "open-traffic-generator-bgp"
}

// BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/extended-community/structured/non_transitive_2octet_as_type YANG schema element.
type BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType struct {
	LinkBandwidthSubtype       *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype `path:"link_bandwidth_subtype" module:"open-traffic-generator-bgp"`
	NonTransitive_2OctetAsType E_Structured_NonTransitive_2OctetAsType                                                                 `path:"non_transitive_2octet_as_type" module:"open-traffic-generator-bgp"`
}

// IsYANGGoStruct ensures that BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType) IsYANGGoStruct() {
}

// GetOrCreateLinkBandwidthSubtype retrieves the value of the LinkBandwidthSubtype field
// or returns the existing field if it already exists.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType) GetOrCreateLinkBandwidthSubtype() *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype {
	if t.LinkBandwidthSubtype != nil {
		return t.LinkBandwidthSubtype
	}
	t.LinkBandwidthSubtype = &BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype{}
	return t.LinkBandwidthSubtype
}

// GetLinkBandwidthSubtype returns the value of the LinkBandwidthSubtype struct pointer
// from BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType. If the receiver or the field LinkBandwidthSubtype is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType) GetLinkBandwidthSubtype() *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype {
	if t != nil && t.LinkBandwidthSubtype != nil {
		return t.LinkBandwidthSubtype
	}
	return nil
}

// GetNonTransitive_2OctetAsType retrieves the value of the leaf NonTransitive_2OctetAsType from the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NonTransitive_2OctetAsType is set, it can
// safely use t.GetNonTransitive_2OctetAsType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NonTransitive_2OctetAsType == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType) GetNonTransitive_2OctetAsType() E_Structured_NonTransitive_2OctetAsType {
	if t == nil || t.NonTransitive_2OctetAsType == 0 {
		return 0
	}
	return t.NonTransitive_2OctetAsType
}

// SetNonTransitive_2OctetAsType sets the value of the leaf NonTransitive_2OctetAsType in the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType
// struct.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType) SetNonTransitive_2OctetAsType(v E_Structured_NonTransitive_2OctetAsType) {
	t.NonTransitive_2OctetAsType = v
}

// PopulateDefaults recursively populates unset leaf fields in the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LinkBandwidthSubtype.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType.
func (*BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType) ΛBelongingModule() string {
	return "open-traffic-generator-bgp"
}

// BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/extended-community/structured/non_transitive_2octet_as_type/link_bandwidth_subtype YANG schema element.
type BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype struct {
	Bandwidth      Binary  `path:"bandwidth" module:"open-traffic-generator-bgp"`
	Global_2ByteAs *uint16 `path:"global_2byte_as" module:"open-traffic-generator-bgp"`
}

// IsYANGGoStruct ensures that BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype) IsYANGGoStruct() {
}

// GetBandwidth retrieves the value of the leaf Bandwidth from the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bandwidth is set, it can
// safely use t.GetBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bandwidth == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype) GetBandwidth() Binary {
	if t == nil || t.Bandwidth == nil {
		return nil
	}
	return t.Bandwidth
}

// GetGlobal_2ByteAs retrieves the value of the leaf Global_2ByteAs from the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Global_2ByteAs is set, it can
// safely use t.GetGlobal_2ByteAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Global_2ByteAs == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype) GetGlobal_2ByteAs() uint16 {
	if t == nil || t.Global_2ByteAs == nil {
		return 0
	}
	return *t.Global_2ByteAs
}

// SetBandwidth sets the value of the leaf Bandwidth in the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype
// struct.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype) SetBandwidth(v Binary) {
	t.Bandwidth = v
}

// SetGlobal_2ByteAs sets the value of the leaf Global_2ByteAs in the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype
// struct.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype) SetGlobal_2ByteAs(v uint16) {
	t.Global_2ByteAs = &v
}

// PopulateDefaults recursively populates unset leaf fields in the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype.
func (*BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_NonTransitive_2OctetAsType_LinkBandwidthSubtype) ΛBelongingModule() string {
	return "open-traffic-generator-bgp"
}

// BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/extended-community/structured/transitive_ipv4_address_type YANG schema element.
type BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType struct {
	RouteOriginSubtype        *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype `path:"route_origin_subtype" module:"open-traffic-generator-bgp"`
	RouteTargetSubtype        *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype `path:"route_target_subtype" module:"open-traffic-generator-bgp"`
	TransitiveIpv4AddressType E_Structured_TransitiveIpv4AddressType                                                               `path:"transitive_ipv4_address_type" module:"open-traffic-generator-bgp"`
}

// IsYANGGoStruct ensures that BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType) IsYANGGoStruct() {
}

// GetOrCreateRouteOriginSubtype retrieves the value of the RouteOriginSubtype field
// or returns the existing field if it already exists.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType) GetOrCreateRouteOriginSubtype() *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype {
	if t.RouteOriginSubtype != nil {
		return t.RouteOriginSubtype
	}
	t.RouteOriginSubtype = &BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype{}
	return t.RouteOriginSubtype
}

// GetOrCreateRouteTargetSubtype retrieves the value of the RouteTargetSubtype field
// or returns the existing field if it already exists.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType) GetOrCreateRouteTargetSubtype() *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype {
	if t.RouteTargetSubtype != nil {
		return t.RouteTargetSubtype
	}
	t.RouteTargetSubtype = &BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype{}
	return t.RouteTargetSubtype
}

// GetRouteOriginSubtype returns the value of the RouteOriginSubtype struct pointer
// from BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType. If the receiver or the field RouteOriginSubtype is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType) GetRouteOriginSubtype() *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype {
	if t != nil && t.RouteOriginSubtype != nil {
		return t.RouteOriginSubtype
	}
	return nil
}

// GetRouteTargetSubtype returns the value of the RouteTargetSubtype struct pointer
// from BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType. If the receiver or the field RouteTargetSubtype is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType) GetRouteTargetSubtype() *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype {
	if t != nil && t.RouteTargetSubtype != nil {
		return t.RouteTargetSubtype
	}
	return nil
}

// GetTransitiveIpv4AddressType retrieves the value of the leaf TransitiveIpv4AddressType from the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransitiveIpv4AddressType is set, it can
// safely use t.GetTransitiveIpv4AddressType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransitiveIpv4AddressType == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType) GetTransitiveIpv4AddressType() E_Structured_TransitiveIpv4AddressType {
	if t == nil || t.TransitiveIpv4AddressType == 0 {
		return 0
	}
	return t.TransitiveIpv4AddressType
}

// SetTransitiveIpv4AddressType sets the value of the leaf TransitiveIpv4AddressType in the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType
// struct.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType) SetTransitiveIpv4AddressType(v E_Structured_TransitiveIpv4AddressType) {
	t.TransitiveIpv4AddressType = v
}

// PopulateDefaults recursively populates unset leaf fields in the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RouteOriginSubtype.PopulateDefaults()
	t.RouteTargetSubtype.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType.
func (*BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType) ΛBelongingModule() string {
	return "open-traffic-generator-bgp"
}

// BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/extended-community/structured/transitive_ipv4_address_type/route_origin_subtype YANG schema element.
type BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype struct {
	GlobalIpv4Admin  *string `path:"global_ipv4_admin" module:"open-traffic-generator-bgp"`
	Local_2ByteAdmin *uint16 `path:"local_2byte_admin" module:"open-traffic-generator-bgp"`
}

// IsYANGGoStruct ensures that BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype) IsYANGGoStruct() {
}

// GetGlobalIpv4Admin retrieves the value of the leaf GlobalIpv4Admin from the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GlobalIpv4Admin is set, it can
// safely use t.GetGlobalIpv4Admin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GlobalIpv4Admin == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype) GetGlobalIpv4Admin() string {
	if t == nil || t.GlobalIpv4Admin == nil {
		return ""
	}
	return *t.GlobalIpv4Admin
}

// GetLocal_2ByteAdmin retrieves the value of the leaf Local_2ByteAdmin from the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Local_2ByteAdmin is set, it can
// safely use t.GetLocal_2ByteAdmin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Local_2ByteAdmin == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype) GetLocal_2ByteAdmin() uint16 {
	if t == nil || t.Local_2ByteAdmin == nil {
		return 0
	}
	return *t.Local_2ByteAdmin
}

// SetGlobalIpv4Admin sets the value of the leaf GlobalIpv4Admin in the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype
// struct.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype) SetGlobalIpv4Admin(v string) {
	t.GlobalIpv4Admin = &v
}

// SetLocal_2ByteAdmin sets the value of the leaf Local_2ByteAdmin in the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype
// struct.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype) SetLocal_2ByteAdmin(v uint16) {
	t.Local_2ByteAdmin = &v
}

// PopulateDefaults recursively populates unset leaf fields in the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype.
func (*BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteOriginSubtype) ΛBelongingModule() string {
	return "open-traffic-generator-bgp"
}

// BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/extended-community/structured/transitive_ipv4_address_type/route_target_subtype YANG schema element.
type BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype struct {
	GlobalIpv4Admin  *string `path:"global_ipv4_admin" module:"open-traffic-generator-bgp"`
	Local_2ByteAdmin *uint16 `path:"local_2byte_admin" module:"open-traffic-generator-bgp"`
}

// IsYANGGoStruct ensures that BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype) IsYANGGoStruct() {
}

// GetGlobalIpv4Admin retrieves the value of the leaf GlobalIpv4Admin from the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GlobalIpv4Admin is set, it can
// safely use t.GetGlobalIpv4Admin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GlobalIpv4Admin == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype) GetGlobalIpv4Admin() string {
	if t == nil || t.GlobalIpv4Admin == nil {
		return ""
	}
	return *t.GlobalIpv4Admin
}

// GetLocal_2ByteAdmin retrieves the value of the leaf Local_2ByteAdmin from the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Local_2ByteAdmin is set, it can
// safely use t.GetLocal_2ByteAdmin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Local_2ByteAdmin == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype) GetLocal_2ByteAdmin() uint16 {
	if t == nil || t.Local_2ByteAdmin == nil {
		return 0
	}
	return *t.Local_2ByteAdmin
}

// SetGlobalIpv4Admin sets the value of the leaf GlobalIpv4Admin in the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype
// struct.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype) SetGlobalIpv4Admin(v string) {
	t.GlobalIpv4Admin = &v
}

// SetLocal_2ByteAdmin sets the value of the leaf Local_2ByteAdmin in the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype
// struct.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype) SetLocal_2ByteAdmin(v uint16) {
	t.Local_2ByteAdmin = &v
}

// PopulateDefaults recursively populates unset leaf fields in the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype.
func (*BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveIpv4AddressType_RouteTargetSubtype) ΛBelongingModule() string {
	return "open-traffic-generator-bgp"
}

// BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/extended-community/structured/transitive_opaque_type YANG schema element.
type BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType struct {
	ColorSubtype         *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype         `path:"color_subtype" module:"open-traffic-generator-bgp"`
	EncapsulationSubtype *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype `path:"encapsulation_subtype" module:"open-traffic-generator-bgp"`
	TransitiveOpaqueType E_Structured_TransitiveOpaqueType                                                                 `path:"transitive_opaque_type" module:"open-traffic-generator-bgp"`
}

// IsYANGGoStruct ensures that BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType) IsYANGGoStruct() {
}

// GetOrCreateColorSubtype retrieves the value of the ColorSubtype field
// or returns the existing field if it already exists.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType) GetOrCreateColorSubtype() *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype {
	if t.ColorSubtype != nil {
		return t.ColorSubtype
	}
	t.ColorSubtype = &BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype{}
	return t.ColorSubtype
}

// GetOrCreateEncapsulationSubtype retrieves the value of the EncapsulationSubtype field
// or returns the existing field if it already exists.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType) GetOrCreateEncapsulationSubtype() *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype {
	if t.EncapsulationSubtype != nil {
		return t.EncapsulationSubtype
	}
	t.EncapsulationSubtype = &BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype{}
	return t.EncapsulationSubtype
}

// GetColorSubtype returns the value of the ColorSubtype struct pointer
// from BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType. If the receiver or the field ColorSubtype is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType) GetColorSubtype() *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype {
	if t != nil && t.ColorSubtype != nil {
		return t.ColorSubtype
	}
	return nil
}

// GetEncapsulationSubtype returns the value of the EncapsulationSubtype struct pointer
// from BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType. If the receiver or the field EncapsulationSubtype is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType) GetEncapsulationSubtype() *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype {
	if t != nil && t.EncapsulationSubtype != nil {
		return t.EncapsulationSubtype
	}
	return nil
}

// GetTransitiveOpaqueType retrieves the value of the leaf TransitiveOpaqueType from the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransitiveOpaqueType is set, it can
// safely use t.GetTransitiveOpaqueType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransitiveOpaqueType == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType) GetTransitiveOpaqueType() E_Structured_TransitiveOpaqueType {
	if t == nil || t.TransitiveOpaqueType == 0 {
		return 0
	}
	return t.TransitiveOpaqueType
}

// SetTransitiveOpaqueType sets the value of the leaf TransitiveOpaqueType in the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType
// struct.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType) SetTransitiveOpaqueType(v E_Structured_TransitiveOpaqueType) {
	t.TransitiveOpaqueType = v
}

// PopulateDefaults recursively populates unset leaf fields in the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ColorSubtype.PopulateDefaults()
	t.EncapsulationSubtype.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType.
func (*BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType) ΛBelongingModule() string {
	return "open-traffic-generator-bgp"
}

// BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/extended-community/structured/transitive_opaque_type/color_subtype YANG schema element.
type BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype struct {
	Color *uint32 `path:"color" module:"open-traffic-generator-bgp"`
	Flags *uint16 `path:"flags" module:"open-traffic-generator-bgp"`
}

// IsYANGGoStruct ensures that BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype) IsYANGGoStruct() {
}

// GetColor retrieves the value of the leaf Color from the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Color is set, it can
// safely use t.GetColor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Color == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype) GetColor() uint32 {
	if t == nil || t.Color == nil {
		return 0
	}
	return *t.Color
}

// GetFlags retrieves the value of the leaf Flags from the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flags is set, it can
// safely use t.GetFlags() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flags == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype) GetFlags() uint16 {
	if t == nil || t.Flags == nil {
		return 0
	}
	return *t.Flags
}

// SetColor sets the value of the leaf Color in the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype
// struct.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype) SetColor(v uint32) {
	t.Color = &v
}

// SetFlags sets the value of the leaf Flags in the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype
// struct.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype) SetFlags(v uint16) {
	t.Flags = &v
}

// PopulateDefaults recursively populates unset leaf fields in the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype.
func (*BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_ColorSubtype) ΛBelongingModule() string {
	return "open-traffic-generator-bgp"
}

// BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/extended-community/structured/transitive_opaque_type/encapsulation_subtype YANG schema element.
type BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype struct {
	Reserved   *uint32 `path:"reserved" module:"open-traffic-generator-bgp"`
	TunnelType *uint16 `path:"tunnel_type" module:"open-traffic-generator-bgp"`
}

// IsYANGGoStruct ensures that BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype) IsYANGGoStruct() {
}

// GetReserved retrieves the value of the leaf Reserved from the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Reserved is set, it can
// safely use t.GetReserved() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Reserved == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype) GetReserved() uint32 {
	if t == nil || t.Reserved == nil {
		return 0
	}
	return *t.Reserved
}

// GetTunnelType retrieves the value of the leaf TunnelType from the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelType is set, it can
// safely use t.GetTunnelType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelType == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype) GetTunnelType() uint16 {
	if t == nil || t.TunnelType == nil {
		return 0
	}
	return *t.TunnelType
}

// SetReserved sets the value of the leaf Reserved in the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype
// struct.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype) SetReserved(v uint32) {
	t.Reserved = &v
}

// SetTunnelType sets the value of the leaf TunnelType in the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype
// struct.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype) SetTunnelType(v uint16) {
	t.TunnelType = &v
}

// PopulateDefaults recursively populates unset leaf fields in the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype.
func (*BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_TransitiveOpaqueType_EncapsulationSubtype) ΛBelongingModule() string {
	return "open-traffic-generator-bgp"
}

// BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/extended-community/structured/transitive_2octet_as_type YANG schema element.
type BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType struct {
	RouteOriginSubtype      *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype `path:"route_origin_subtype" module:"open-traffic-generator-bgp"`
	RouteTargetSubtype      *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype `path:"route_target_subtype" module:"open-traffic-generator-bgp"`
	Transitive_2OctetAsType E_Structured_Transitive_2OctetAsType                                                               `path:"transitive_2octet_as_type" module:"open-traffic-generator-bgp"`
}

// IsYANGGoStruct ensures that BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType) IsYANGGoStruct() {
}

// GetOrCreateRouteOriginSubtype retrieves the value of the RouteOriginSubtype field
// or returns the existing field if it already exists.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType) GetOrCreateRouteOriginSubtype() *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype {
	if t.RouteOriginSubtype != nil {
		return t.RouteOriginSubtype
	}
	t.RouteOriginSubtype = &BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype{}
	return t.RouteOriginSubtype
}

// GetOrCreateRouteTargetSubtype retrieves the value of the RouteTargetSubtype field
// or returns the existing field if it already exists.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType) GetOrCreateRouteTargetSubtype() *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype {
	if t.RouteTargetSubtype != nil {
		return t.RouteTargetSubtype
	}
	t.RouteTargetSubtype = &BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype{}
	return t.RouteTargetSubtype
}

// GetRouteOriginSubtype returns the value of the RouteOriginSubtype struct pointer
// from BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType. If the receiver or the field RouteOriginSubtype is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType) GetRouteOriginSubtype() *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype {
	if t != nil && t.RouteOriginSubtype != nil {
		return t.RouteOriginSubtype
	}
	return nil
}

// GetRouteTargetSubtype returns the value of the RouteTargetSubtype struct pointer
// from BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType. If the receiver or the field RouteTargetSubtype is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType) GetRouteTargetSubtype() *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype {
	if t != nil && t.RouteTargetSubtype != nil {
		return t.RouteTargetSubtype
	}
	return nil
}

// GetTransitive_2OctetAsType retrieves the value of the leaf Transitive_2OctetAsType from the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive_2OctetAsType is set, it can
// safely use t.GetTransitive_2OctetAsType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive_2OctetAsType == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType) GetTransitive_2OctetAsType() E_Structured_Transitive_2OctetAsType {
	if t == nil || t.Transitive_2OctetAsType == 0 {
		return 0
	}
	return t.Transitive_2OctetAsType
}

// SetTransitive_2OctetAsType sets the value of the leaf Transitive_2OctetAsType in the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType
// struct.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType) SetTransitive_2OctetAsType(v E_Structured_Transitive_2OctetAsType) {
	t.Transitive_2OctetAsType = v
}

// PopulateDefaults recursively populates unset leaf fields in the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RouteOriginSubtype.PopulateDefaults()
	t.RouteTargetSubtype.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType.
func (*BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType) ΛBelongingModule() string {
	return "open-traffic-generator-bgp"
}

// BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/extended-community/structured/transitive_2octet_as_type/route_origin_subtype YANG schema element.
type BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype struct {
	Global_2ByteAs   *uint16 `path:"global_2byte_as" module:"open-traffic-generator-bgp"`
	Local_4ByteAdmin *uint32 `path:"local_4byte_admin" module:"open-traffic-generator-bgp"`
}

// IsYANGGoStruct ensures that BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype) IsYANGGoStruct() {
}

// GetGlobal_2ByteAs retrieves the value of the leaf Global_2ByteAs from the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Global_2ByteAs is set, it can
// safely use t.GetGlobal_2ByteAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Global_2ByteAs == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype) GetGlobal_2ByteAs() uint16 {
	if t == nil || t.Global_2ByteAs == nil {
		return 0
	}
	return *t.Global_2ByteAs
}

// GetLocal_4ByteAdmin retrieves the value of the leaf Local_4ByteAdmin from the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Local_4ByteAdmin is set, it can
// safely use t.GetLocal_4ByteAdmin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Local_4ByteAdmin == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype) GetLocal_4ByteAdmin() uint32 {
	if t == nil || t.Local_4ByteAdmin == nil {
		return 0
	}
	return *t.Local_4ByteAdmin
}

// SetGlobal_2ByteAs sets the value of the leaf Global_2ByteAs in the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype
// struct.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype) SetGlobal_2ByteAs(v uint16) {
	t.Global_2ByteAs = &v
}

// SetLocal_4ByteAdmin sets the value of the leaf Local_4ByteAdmin in the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype
// struct.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype) SetLocal_4ByteAdmin(v uint32) {
	t.Local_4ByteAdmin = &v
}

// PopulateDefaults recursively populates unset leaf fields in the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype.
func (*BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteOriginSubtype) ΛBelongingModule() string {
	return "open-traffic-generator-bgp"
}

// BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/extended-community/structured/transitive_2octet_as_type/route_target_subtype YANG schema element.
type BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype struct {
	Global_2ByteAs   *uint16 `path:"global_2byte_as" module:"open-traffic-generator-bgp"`
	Local_4ByteAdmin *uint32 `path:"local_4byte_admin" module:"open-traffic-generator-bgp"`
}

// IsYANGGoStruct ensures that BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype) IsYANGGoStruct() {
}

// GetGlobal_2ByteAs retrieves the value of the leaf Global_2ByteAs from the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Global_2ByteAs is set, it can
// safely use t.GetGlobal_2ByteAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Global_2ByteAs == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype) GetGlobal_2ByteAs() uint16 {
	if t == nil || t.Global_2ByteAs == nil {
		return 0
	}
	return *t.Global_2ByteAs
}

// GetLocal_4ByteAdmin retrieves the value of the leaf Local_4ByteAdmin from the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Local_4ByteAdmin is set, it can
// safely use t.GetLocal_4ByteAdmin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Local_4ByteAdmin == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype) GetLocal_4ByteAdmin() uint32 {
	if t == nil || t.Local_4ByteAdmin == nil {
		return 0
	}
	return *t.Local_4ByteAdmin
}

// SetGlobal_2ByteAs sets the value of the leaf Global_2ByteAs in the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype
// struct.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype) SetGlobal_2ByteAs(v uint16) {
	t.Global_2ByteAs = &v
}

// SetLocal_4ByteAdmin sets the value of the leaf Local_4ByteAdmin in the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype
// struct.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype) SetLocal_4ByteAdmin(v uint32) {
	t.Local_4ByteAdmin = &v
}

// PopulateDefaults recursively populates unset leaf fields in the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype.
func (*BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_2OctetAsType_RouteTargetSubtype) ΛBelongingModule() string {
	return "open-traffic-generator-bgp"
}

// BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/extended-community/structured/transitive_4octet_as_type YANG schema element.
type BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType struct {
	RouteOriginSubtype      *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype `path:"route_origin_subtype" module:"open-traffic-generator-bgp"`
	RouteTargetSubtype      *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype `path:"route_target_subtype" module:"open-traffic-generator-bgp"`
	Transitive_4OctetAsType E_Structured_Transitive_4OctetAsType                                                               `path:"transitive_4octet_as_type" module:"open-traffic-generator-bgp"`
}

// IsYANGGoStruct ensures that BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType) IsYANGGoStruct() {
}

// GetOrCreateRouteOriginSubtype retrieves the value of the RouteOriginSubtype field
// or returns the existing field if it already exists.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType) GetOrCreateRouteOriginSubtype() *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype {
	if t.RouteOriginSubtype != nil {
		return t.RouteOriginSubtype
	}
	t.RouteOriginSubtype = &BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype{}
	return t.RouteOriginSubtype
}

// GetOrCreateRouteTargetSubtype retrieves the value of the RouteTargetSubtype field
// or returns the existing field if it already exists.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType) GetOrCreateRouteTargetSubtype() *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype {
	if t.RouteTargetSubtype != nil {
		return t.RouteTargetSubtype
	}
	t.RouteTargetSubtype = &BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype{}
	return t.RouteTargetSubtype
}

// GetRouteOriginSubtype returns the value of the RouteOriginSubtype struct pointer
// from BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType. If the receiver or the field RouteOriginSubtype is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType) GetRouteOriginSubtype() *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype {
	if t != nil && t.RouteOriginSubtype != nil {
		return t.RouteOriginSubtype
	}
	return nil
}

// GetRouteTargetSubtype returns the value of the RouteTargetSubtype struct pointer
// from BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType. If the receiver or the field RouteTargetSubtype is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType) GetRouteTargetSubtype() *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype {
	if t != nil && t.RouteTargetSubtype != nil {
		return t.RouteTargetSubtype
	}
	return nil
}

// GetTransitive_4OctetAsType retrieves the value of the leaf Transitive_4OctetAsType from the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive_4OctetAsType is set, it can
// safely use t.GetTransitive_4OctetAsType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive_4OctetAsType == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType) GetTransitive_4OctetAsType() E_Structured_Transitive_4OctetAsType {
	if t == nil || t.Transitive_4OctetAsType == 0 {
		return 0
	}
	return t.Transitive_4OctetAsType
}

// SetTransitive_4OctetAsType sets the value of the leaf Transitive_4OctetAsType in the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType
// struct.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType) SetTransitive_4OctetAsType(v E_Structured_Transitive_4OctetAsType) {
	t.Transitive_4OctetAsType = v
}

// PopulateDefaults recursively populates unset leaf fields in the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RouteOriginSubtype.PopulateDefaults()
	t.RouteTargetSubtype.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType.
func (*BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType) ΛBelongingModule() string {
	return "open-traffic-generator-bgp"
}

// BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/extended-community/structured/transitive_4octet_as_type/route_origin_subtype YANG schema element.
type BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype struct {
	Global_4ByteAs   *uint32 `path:"global_4byte_as" module:"open-traffic-generator-bgp"`
	Local_2ByteAdmin *uint16 `path:"local_2byte_admin" module:"open-traffic-generator-bgp"`
}

// IsYANGGoStruct ensures that BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype) IsYANGGoStruct() {
}

// GetGlobal_4ByteAs retrieves the value of the leaf Global_4ByteAs from the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Global_4ByteAs is set, it can
// safely use t.GetGlobal_4ByteAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Global_4ByteAs == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype) GetGlobal_4ByteAs() uint32 {
	if t == nil || t.Global_4ByteAs == nil {
		return 0
	}
	return *t.Global_4ByteAs
}

// GetLocal_2ByteAdmin retrieves the value of the leaf Local_2ByteAdmin from the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Local_2ByteAdmin is set, it can
// safely use t.GetLocal_2ByteAdmin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Local_2ByteAdmin == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype) GetLocal_2ByteAdmin() uint16 {
	if t == nil || t.Local_2ByteAdmin == nil {
		return 0
	}
	return *t.Local_2ByteAdmin
}

// SetGlobal_4ByteAs sets the value of the leaf Global_4ByteAs in the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype
// struct.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype) SetGlobal_4ByteAs(v uint32) {
	t.Global_4ByteAs = &v
}

// SetLocal_2ByteAdmin sets the value of the leaf Local_2ByteAdmin in the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype
// struct.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype) SetLocal_2ByteAdmin(v uint16) {
	t.Local_2ByteAdmin = &v
}

// PopulateDefaults recursively populates unset leaf fields in the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype.
func (*BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteOriginSubtype) ΛBelongingModule() string {
	return "open-traffic-generator-bgp"
}

// BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/extended-community/structured/transitive_4octet_as_type/route_target_subtype YANG schema element.
type BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype struct {
	Global_4ByteAs   *uint32 `path:"global_4byte_as" module:"open-traffic-generator-bgp"`
	Local_2ByteAdmin *uint16 `path:"local_2byte_admin" module:"open-traffic-generator-bgp"`
}

// IsYANGGoStruct ensures that BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype) IsYANGGoStruct() {
}

// GetGlobal_4ByteAs retrieves the value of the leaf Global_4ByteAs from the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Global_4ByteAs is set, it can
// safely use t.GetGlobal_4ByteAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Global_4ByteAs == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype) GetGlobal_4ByteAs() uint32 {
	if t == nil || t.Global_4ByteAs == nil {
		return 0
	}
	return *t.Global_4ByteAs
}

// GetLocal_2ByteAdmin retrieves the value of the leaf Local_2ByteAdmin from the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Local_2ByteAdmin is set, it can
// safely use t.GetLocal_2ByteAdmin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Local_2ByteAdmin == nil' before retrieving the leaf's value.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype) GetLocal_2ByteAdmin() uint16 {
	if t == nil || t.Local_2ByteAdmin == nil {
		return 0
	}
	return *t.Local_2ByteAdmin
}

// SetGlobal_4ByteAs sets the value of the leaf Global_4ByteAs in the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype
// struct.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype) SetGlobal_4ByteAs(v uint32) {
	t.Global_4ByteAs = &v
}

// SetLocal_2ByteAdmin sets the value of the leaf Local_2ByteAdmin in the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype
// struct.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype) SetLocal_2ByteAdmin(v uint16) {
	t.Local_2ByteAdmin = &v
}

// PopulateDefaults recursively populates unset leaf fields in the BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype.
func (*BgpPeer_UnicastIpv6Prefix_ExtendedCommunity_Structured_Transitive_4OctetAsType_RouteTargetSubtype) ΛBelongingModule() string {
	return "open-traffic-generator-bgp"
}

// Component represents the /open-traffic-generator-platform/components/component YANG schema element.
type Component struct {
	Name            E_Component_Name `path:"state/name|name" module:"open-traffic-generator-platform/open-traffic-generator-platform|open-traffic-generator-platform" shadow-path:"name" shadow-module:"open-traffic-generator-platform"`
	SdkVersion      *string          `path:"state/sdk-version" module:"open-traffic-generator-platform/open-traffic-generator-platform"`
	SoftwareVersion *string          `path:"state/software-version" module:"open-traffic-generator-platform/open-traffic-generator-platform"`
}

// IsYANGGoStruct ensures that Component implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Component) GetName() E_Component_Name {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// GetSdkVersion retrieves the value of the leaf SdkVersion from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdkVersion is set, it can
// safely use t.GetSdkVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdkVersion == nil' before retrieving the leaf's value.
func (t *Component) GetSdkVersion() string {
	if t == nil || t.SdkVersion == nil {
		return ""
	}
	return *t.SdkVersion
}

// GetSoftwareVersion retrieves the value of the leaf SoftwareVersion from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SoftwareVersion is set, it can
// safely use t.GetSoftwareVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SoftwareVersion == nil' before retrieving the leaf's value.
func (t *Component) GetSoftwareVersion() string {
	if t == nil || t.SoftwareVersion == nil {
		return ""
	}
	return *t.SoftwareVersion
}

// SetName sets the value of the leaf Name in the Component
// struct.
func (t *Component) SetName(v E_Component_Name) {
	t.Name = v
}

// SetSdkVersion sets the value of the leaf SdkVersion in the Component
// struct.
func (t *Component) SetSdkVersion(v string) {
	t.SdkVersion = &v
}

// SetSoftwareVersion sets the value of the leaf SoftwareVersion in the Component
// struct.
func (t *Component) SetSoftwareVersion(v string) {
	t.SoftwareVersion = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Component
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Component struct, which is a YANG list entry.
func (t *Component) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"name": t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component.
func (*Component) ΛBelongingModule() string {
	return "open-traffic-generator-platform"
}

// Dhcpv4Client represents the /open-traffic-generator-dhcpv4client/dhcpv4-clients/dhcpv4-client YANG schema element.
type Dhcpv4Client struct {
	Counters  *Dhcpv4Client_Counters  `path:"state/counters" module:"open-traffic-generator-dhcpv4client/open-traffic-generator-dhcpv4client"`
	Interface *Dhcpv4Client_Interface `path:"state/interface" module:"open-traffic-generator-dhcpv4client/open-traffic-generator-dhcpv4client"`
	Name      *string                 `path:"state/name|name" module:"open-traffic-generator-dhcpv4client/open-traffic-generator-dhcpv4client|open-traffic-generator-dhcpv4client" shadow-path:"name" shadow-module:"open-traffic-generator-dhcpv4client"`
}

// IsYANGGoStruct ensures that Dhcpv4Client implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Dhcpv4Client) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Dhcpv4Client) GetOrCreateCounters() *Dhcpv4Client_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Dhcpv4Client_Counters{}
	return t.Counters
}

// GetOrCreateInterface retrieves the value of the Interface field
// or returns the existing field if it already exists.
func (t *Dhcpv4Client) GetOrCreateInterface() *Dhcpv4Client_Interface {
	if t.Interface != nil {
		return t.Interface
	}
	t.Interface = &Dhcpv4Client_Interface{}
	return t.Interface
}

// GetCounters returns the value of the Counters struct pointer
// from Dhcpv4Client. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Dhcpv4Client) GetCounters() *Dhcpv4Client_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetInterface returns the value of the Interface struct pointer
// from Dhcpv4Client. If the receiver or the field Interface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Dhcpv4Client) GetInterface() *Dhcpv4Client_Interface {
	if t != nil && t.Interface != nil {
		return t.Interface
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the Dhcpv4Client
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Dhcpv4Client) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// SetName sets the value of the leaf Name in the Dhcpv4Client
// struct.
func (t *Dhcpv4Client) SetName(v string) {
	t.Name = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Dhcpv4Client
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Dhcpv4Client) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Counters.PopulateDefaults()
	t.Interface.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the Dhcpv4Client struct, which is a YANG list entry.
func (t *Dhcpv4Client) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Dhcpv4Client) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Dhcpv4Client"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Dhcpv4Client) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Dhcpv4Client) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Dhcpv4Client.
func (*Dhcpv4Client) ΛBelongingModule() string {
	return "open-traffic-generator-dhcpv4client"
}

// Dhcpv4Client_Counters represents the /open-traffic-generator-dhcpv4client/dhcpv4-clients/dhcpv4-client/state/counters YANG schema element.
type Dhcpv4Client_Counters struct {
	AcksReceived   *uint64 `path:"acks-received" module:"open-traffic-generator-dhcpv4client"`
	DeclinesSent   *uint64 `path:"declines-sent" module:"open-traffic-generator-dhcpv4client"`
	DiscoversSent  *uint64 `path:"discovers-sent" module:"open-traffic-generator-dhcpv4client"`
	NacksReceived  *uint64 `path:"nacks-received" module:"open-traffic-generator-dhcpv4client"`
	OffersReceived *uint64 `path:"offers-received" module:"open-traffic-generator-dhcpv4client"`
	ReleasesSent   *uint64 `path:"releases-sent" module:"open-traffic-generator-dhcpv4client"`
	RequestsSent   *uint64 `path:"requests-sent" module:"open-traffic-generator-dhcpv4client"`
}

// IsYANGGoStruct ensures that Dhcpv4Client_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Dhcpv4Client_Counters) IsYANGGoStruct() {}

// GetAcksReceived retrieves the value of the leaf AcksReceived from the Dhcpv4Client_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcksReceived is set, it can
// safely use t.GetAcksReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcksReceived == nil' before retrieving the leaf's value.
func (t *Dhcpv4Client_Counters) GetAcksReceived() uint64 {
	if t == nil || t.AcksReceived == nil {
		return 0
	}
	return *t.AcksReceived
}

// GetDeclinesSent retrieves the value of the leaf DeclinesSent from the Dhcpv4Client_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeclinesSent is set, it can
// safely use t.GetDeclinesSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeclinesSent == nil' before retrieving the leaf's value.
func (t *Dhcpv4Client_Counters) GetDeclinesSent() uint64 {
	if t == nil || t.DeclinesSent == nil {
		return 0
	}
	return *t.DeclinesSent
}

// GetDiscoversSent retrieves the value of the leaf DiscoversSent from the Dhcpv4Client_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DiscoversSent is set, it can
// safely use t.GetDiscoversSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DiscoversSent == nil' before retrieving the leaf's value.
func (t *Dhcpv4Client_Counters) GetDiscoversSent() uint64 {
	if t == nil || t.DiscoversSent == nil {
		return 0
	}
	return *t.DiscoversSent
}

// GetNacksReceived retrieves the value of the leaf NacksReceived from the Dhcpv4Client_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NacksReceived is set, it can
// safely use t.GetNacksReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NacksReceived == nil' before retrieving the leaf's value.
func (t *Dhcpv4Client_Counters) GetNacksReceived() uint64 {
	if t == nil || t.NacksReceived == nil {
		return 0
	}
	return *t.NacksReceived
}

// GetOffersReceived retrieves the value of the leaf OffersReceived from the Dhcpv4Client_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OffersReceived is set, it can
// safely use t.GetOffersReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OffersReceived == nil' before retrieving the leaf's value.
func (t *Dhcpv4Client_Counters) GetOffersReceived() uint64 {
	if t == nil || t.OffersReceived == nil {
		return 0
	}
	return *t.OffersReceived
}

// GetReleasesSent retrieves the value of the leaf ReleasesSent from the Dhcpv4Client_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReleasesSent is set, it can
// safely use t.GetReleasesSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReleasesSent == nil' before retrieving the leaf's value.
func (t *Dhcpv4Client_Counters) GetReleasesSent() uint64 {
	if t == nil || t.ReleasesSent == nil {
		return 0
	}
	return *t.ReleasesSent
}

// GetRequestsSent retrieves the value of the leaf RequestsSent from the Dhcpv4Client_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RequestsSent is set, it can
// safely use t.GetRequestsSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RequestsSent == nil' before retrieving the leaf's value.
func (t *Dhcpv4Client_Counters) GetRequestsSent() uint64 {
	if t == nil || t.RequestsSent == nil {
		return 0
	}
	return *t.RequestsSent
}

// SetAcksReceived sets the value of the leaf AcksReceived in the Dhcpv4Client_Counters
// struct.
func (t *Dhcpv4Client_Counters) SetAcksReceived(v uint64) {
	t.AcksReceived = &v
}

// SetDeclinesSent sets the value of the leaf DeclinesSent in the Dhcpv4Client_Counters
// struct.
func (t *Dhcpv4Client_Counters) SetDeclinesSent(v uint64) {
	t.DeclinesSent = &v
}

// SetDiscoversSent sets the value of the leaf DiscoversSent in the Dhcpv4Client_Counters
// struct.
func (t *Dhcpv4Client_Counters) SetDiscoversSent(v uint64) {
	t.DiscoversSent = &v
}

// SetNacksReceived sets the value of the leaf NacksReceived in the Dhcpv4Client_Counters
// struct.
func (t *Dhcpv4Client_Counters) SetNacksReceived(v uint64) {
	t.NacksReceived = &v
}

// SetOffersReceived sets the value of the leaf OffersReceived in the Dhcpv4Client_Counters
// struct.
func (t *Dhcpv4Client_Counters) SetOffersReceived(v uint64) {
	t.OffersReceived = &v
}

// SetReleasesSent sets the value of the leaf ReleasesSent in the Dhcpv4Client_Counters
// struct.
func (t *Dhcpv4Client_Counters) SetReleasesSent(v uint64) {
	t.ReleasesSent = &v
}

// SetRequestsSent sets the value of the leaf RequestsSent in the Dhcpv4Client_Counters
// struct.
func (t *Dhcpv4Client_Counters) SetRequestsSent(v uint64) {
	t.RequestsSent = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Dhcpv4Client_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Dhcpv4Client_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Dhcpv4Client_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Dhcpv4Client_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Dhcpv4Client_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Dhcpv4Client_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Dhcpv4Client_Counters.
func (*Dhcpv4Client_Counters) ΛBelongingModule() string {
	return "open-traffic-generator-dhcpv4client"
}

// Dhcpv4Client_Interface represents the /open-traffic-generator-dhcpv4client/dhcpv4-clients/dhcpv4-client/state/interface YANG schema element.
type Dhcpv4Client_Interface struct {
	Address        *string `path:"address" module:"open-traffic-generator-dhcpv4client"`
	GatewayAddress *string `path:"gateway_address" module:"open-traffic-generator-dhcpv4client"`
	LeaseTime      *uint32 `path:"lease_time" module:"open-traffic-generator-dhcpv4client"`
	PrefixLength   *uint32 `path:"prefix-length" module:"open-traffic-generator-dhcpv4client"`
	RebindTime     *uint32 `path:"rebind_time" module:"open-traffic-generator-dhcpv4client"`
	RenewTime      *uint32 `path:"renew_time" module:"open-traffic-generator-dhcpv4client"`
}

// IsYANGGoStruct ensures that Dhcpv4Client_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Dhcpv4Client_Interface) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the Dhcpv4Client_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *Dhcpv4Client_Interface) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetGatewayAddress retrieves the value of the leaf GatewayAddress from the Dhcpv4Client_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GatewayAddress is set, it can
// safely use t.GetGatewayAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GatewayAddress == nil' before retrieving the leaf's value.
func (t *Dhcpv4Client_Interface) GetGatewayAddress() string {
	if t == nil || t.GatewayAddress == nil {
		return ""
	}
	return *t.GatewayAddress
}

// GetLeaseTime retrieves the value of the leaf LeaseTime from the Dhcpv4Client_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LeaseTime is set, it can
// safely use t.GetLeaseTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LeaseTime == nil' before retrieving the leaf's value.
func (t *Dhcpv4Client_Interface) GetLeaseTime() uint32 {
	if t == nil || t.LeaseTime == nil {
		return 0
	}
	return *t.LeaseTime
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the Dhcpv4Client_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *Dhcpv4Client_Interface) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// GetRebindTime retrieves the value of the leaf RebindTime from the Dhcpv4Client_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RebindTime is set, it can
// safely use t.GetRebindTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RebindTime == nil' before retrieving the leaf's value.
func (t *Dhcpv4Client_Interface) GetRebindTime() uint32 {
	if t == nil || t.RebindTime == nil {
		return 0
	}
	return *t.RebindTime
}

// GetRenewTime retrieves the value of the leaf RenewTime from the Dhcpv4Client_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RenewTime is set, it can
// safely use t.GetRenewTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RenewTime == nil' before retrieving the leaf's value.
func (t *Dhcpv4Client_Interface) GetRenewTime() uint32 {
	if t == nil || t.RenewTime == nil {
		return 0
	}
	return *t.RenewTime
}

// SetAddress sets the value of the leaf Address in the Dhcpv4Client_Interface
// struct.
func (t *Dhcpv4Client_Interface) SetAddress(v string) {
	t.Address = &v
}

// SetGatewayAddress sets the value of the leaf GatewayAddress in the Dhcpv4Client_Interface
// struct.
func (t *Dhcpv4Client_Interface) SetGatewayAddress(v string) {
	t.GatewayAddress = &v
}

// SetLeaseTime sets the value of the leaf LeaseTime in the Dhcpv4Client_Interface
// struct.
func (t *Dhcpv4Client_Interface) SetLeaseTime(v uint32) {
	t.LeaseTime = &v
}

// SetPrefixLength sets the value of the leaf PrefixLength in the Dhcpv4Client_Interface
// struct.
func (t *Dhcpv4Client_Interface) SetPrefixLength(v uint32) {
	t.PrefixLength = &v
}

// SetRebindTime sets the value of the leaf RebindTime in the Dhcpv4Client_Interface
// struct.
func (t *Dhcpv4Client_Interface) SetRebindTime(v uint32) {
	t.RebindTime = &v
}

// SetRenewTime sets the value of the leaf RenewTime in the Dhcpv4Client_Interface
// struct.
func (t *Dhcpv4Client_Interface) SetRenewTime(v uint32) {
	t.RenewTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Dhcpv4Client_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Dhcpv4Client_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Dhcpv4Client_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Dhcpv4Client_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Dhcpv4Client_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Dhcpv4Client_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Dhcpv4Client_Interface.
func (*Dhcpv4Client_Interface) ΛBelongingModule() string {
	return "open-traffic-generator-dhcpv4client"
}

// Dhcpv4Server represents the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server YANG schema element.
type Dhcpv4Server struct {
	Counters *Dhcpv4Server_Counters `path:"state/counters" module:"open-traffic-generator-dhcpv4server/open-traffic-generator-dhcpv4server"`
	Leases   *Dhcpv4Server_Leases   `path:"state/leases" module:"open-traffic-generator-dhcpv4server/open-traffic-generator-dhcpv4server"`
	Name     *string                `path:"state/name|name" module:"open-traffic-generator-dhcpv4server/open-traffic-generator-dhcpv4server|open-traffic-generator-dhcpv4server" shadow-path:"name" shadow-module:"open-traffic-generator-dhcpv4server"`
}

// IsYANGGoStruct ensures that Dhcpv4Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Dhcpv4Server) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Dhcpv4Server) GetOrCreateCounters() *Dhcpv4Server_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Dhcpv4Server_Counters{}
	return t.Counters
}

// GetOrCreateLeases retrieves the value of the Leases field
// or returns the existing field if it already exists.
func (t *Dhcpv4Server) GetOrCreateLeases() *Dhcpv4Server_Leases {
	if t.Leases != nil {
		return t.Leases
	}
	t.Leases = &Dhcpv4Server_Leases{}
	return t.Leases
}

// GetCounters returns the value of the Counters struct pointer
// from Dhcpv4Server. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Dhcpv4Server) GetCounters() *Dhcpv4Server_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetLeases returns the value of the Leases struct pointer
// from Dhcpv4Server. If the receiver or the field Leases is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Dhcpv4Server) GetLeases() *Dhcpv4Server_Leases {
	if t != nil && t.Leases != nil {
		return t.Leases
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the Dhcpv4Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Dhcpv4Server) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// SetName sets the value of the leaf Name in the Dhcpv4Server
// struct.
func (t *Dhcpv4Server) SetName(v string) {
	t.Name = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Dhcpv4Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Dhcpv4Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Counters.PopulateDefaults()
	t.Leases.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the Dhcpv4Server struct, which is a YANG list entry.
func (t *Dhcpv4Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Dhcpv4Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Dhcpv4Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Dhcpv4Server) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Dhcpv4Server) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Dhcpv4Server.
func (*Dhcpv4Server) ΛBelongingModule() string {
	return "open-traffic-generator-dhcpv4server"
}

// Dhcpv4Server_Counters represents the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server/state/counters YANG schema element.
type Dhcpv4Server_Counters struct {
	AcksSent          *uint64 `path:"acks-sent" module:"open-traffic-generator-dhcpv4server"`
	DeclinesReceived  *uint64 `path:"declines-received" module:"open-traffic-generator-dhcpv4server"`
	DiscoversReceived *uint64 `path:"discovers-received" module:"open-traffic-generator-dhcpv4server"`
	NacksSent         *uint64 `path:"nacks-sent" module:"open-traffic-generator-dhcpv4server"`
	OffersSent        *uint64 `path:"offers-sent" module:"open-traffic-generator-dhcpv4server"`
	ReleasesReceived  *uint64 `path:"releases-received" module:"open-traffic-generator-dhcpv4server"`
	RequestsReceived  *uint64 `path:"requests-received" module:"open-traffic-generator-dhcpv4server"`
}

// IsYANGGoStruct ensures that Dhcpv4Server_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Dhcpv4Server_Counters) IsYANGGoStruct() {}

// GetAcksSent retrieves the value of the leaf AcksSent from the Dhcpv4Server_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcksSent is set, it can
// safely use t.GetAcksSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcksSent == nil' before retrieving the leaf's value.
func (t *Dhcpv4Server_Counters) GetAcksSent() uint64 {
	if t == nil || t.AcksSent == nil {
		return 0
	}
	return *t.AcksSent
}

// GetDeclinesReceived retrieves the value of the leaf DeclinesReceived from the Dhcpv4Server_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeclinesReceived is set, it can
// safely use t.GetDeclinesReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeclinesReceived == nil' before retrieving the leaf's value.
func (t *Dhcpv4Server_Counters) GetDeclinesReceived() uint64 {
	if t == nil || t.DeclinesReceived == nil {
		return 0
	}
	return *t.DeclinesReceived
}

// GetDiscoversReceived retrieves the value of the leaf DiscoversReceived from the Dhcpv4Server_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DiscoversReceived is set, it can
// safely use t.GetDiscoversReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DiscoversReceived == nil' before retrieving the leaf's value.
func (t *Dhcpv4Server_Counters) GetDiscoversReceived() uint64 {
	if t == nil || t.DiscoversReceived == nil {
		return 0
	}
	return *t.DiscoversReceived
}

// GetNacksSent retrieves the value of the leaf NacksSent from the Dhcpv4Server_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NacksSent is set, it can
// safely use t.GetNacksSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NacksSent == nil' before retrieving the leaf's value.
func (t *Dhcpv4Server_Counters) GetNacksSent() uint64 {
	if t == nil || t.NacksSent == nil {
		return 0
	}
	return *t.NacksSent
}

// GetOffersSent retrieves the value of the leaf OffersSent from the Dhcpv4Server_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OffersSent is set, it can
// safely use t.GetOffersSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OffersSent == nil' before retrieving the leaf's value.
func (t *Dhcpv4Server_Counters) GetOffersSent() uint64 {
	if t == nil || t.OffersSent == nil {
		return 0
	}
	return *t.OffersSent
}

// GetReleasesReceived retrieves the value of the leaf ReleasesReceived from the Dhcpv4Server_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReleasesReceived is set, it can
// safely use t.GetReleasesReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReleasesReceived == nil' before retrieving the leaf's value.
func (t *Dhcpv4Server_Counters) GetReleasesReceived() uint64 {
	if t == nil || t.ReleasesReceived == nil {
		return 0
	}
	return *t.ReleasesReceived
}

// GetRequestsReceived retrieves the value of the leaf RequestsReceived from the Dhcpv4Server_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RequestsReceived is set, it can
// safely use t.GetRequestsReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RequestsReceived == nil' before retrieving the leaf's value.
func (t *Dhcpv4Server_Counters) GetRequestsReceived() uint64 {
	if t == nil || t.RequestsReceived == nil {
		return 0
	}
	return *t.RequestsReceived
}

// SetAcksSent sets the value of the leaf AcksSent in the Dhcpv4Server_Counters
// struct.
func (t *Dhcpv4Server_Counters) SetAcksSent(v uint64) {
	t.AcksSent = &v
}

// SetDeclinesReceived sets the value of the leaf DeclinesReceived in the Dhcpv4Server_Counters
// struct.
func (t *Dhcpv4Server_Counters) SetDeclinesReceived(v uint64) {
	t.DeclinesReceived = &v
}

// SetDiscoversReceived sets the value of the leaf DiscoversReceived in the Dhcpv4Server_Counters
// struct.
func (t *Dhcpv4Server_Counters) SetDiscoversReceived(v uint64) {
	t.DiscoversReceived = &v
}

// SetNacksSent sets the value of the leaf NacksSent in the Dhcpv4Server_Counters
// struct.
func (t *Dhcpv4Server_Counters) SetNacksSent(v uint64) {
	t.NacksSent = &v
}

// SetOffersSent sets the value of the leaf OffersSent in the Dhcpv4Server_Counters
// struct.
func (t *Dhcpv4Server_Counters) SetOffersSent(v uint64) {
	t.OffersSent = &v
}

// SetReleasesReceived sets the value of the leaf ReleasesReceived in the Dhcpv4Server_Counters
// struct.
func (t *Dhcpv4Server_Counters) SetReleasesReceived(v uint64) {
	t.ReleasesReceived = &v
}

// SetRequestsReceived sets the value of the leaf RequestsReceived in the Dhcpv4Server_Counters
// struct.
func (t *Dhcpv4Server_Counters) SetRequestsReceived(v uint64) {
	t.RequestsReceived = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Dhcpv4Server_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Dhcpv4Server_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Dhcpv4Server_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Dhcpv4Server_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Dhcpv4Server_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Dhcpv4Server_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Dhcpv4Server_Counters.
func (*Dhcpv4Server_Counters) ΛBelongingModule() string {
	return "open-traffic-generator-dhcpv4server"
}

// Dhcpv4Server_Leases represents the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server/state/leases YANG schema element.
type Dhcpv4Server_Leases struct {
	Hosts map[string]*Dhcpv4Server_Leases_Hosts `path:"leases-states/hosts" module:"open-traffic-generator-dhcpv4server/open-traffic-generator-dhcpv4server"`
}

// IsYANGGoStruct ensures that Dhcpv4Server_Leases implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Dhcpv4Server_Leases) IsYANGGoStruct() {}

// NewHosts creates a new entry in the Hosts list of the
// Dhcpv4Server_Leases struct. The keys of the list are populated from the input
// arguments.
func (t *Dhcpv4Server_Leases) NewHosts(Address string) (*Dhcpv4Server_Leases_Hosts, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Hosts == nil {
		t.Hosts = make(map[string]*Dhcpv4Server_Leases_Hosts)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Hosts[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Hosts", key)
	}

	t.Hosts[key] = &Dhcpv4Server_Leases_Hosts{
		Address: &Address,
	}

	return t.Hosts[key], nil
}

// RenameHosts renames an entry in the list Hosts within
// the Dhcpv4Server_Leases struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Dhcpv4Server_Leases) RenameHosts(oldK, newK string) error {
	if _, ok := t.Hosts[newK]; ok {
		return fmt.Errorf("key %v already exists in Hosts", newK)
	}

	e, ok := t.Hosts[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Hosts", oldK)
	}
	e.Address = &newK

	t.Hosts[newK] = e
	delete(t.Hosts, oldK)
	return nil
}

// GetOrCreateHostsMap returns the list (map) from Dhcpv4Server_Leases.
//
// It initializes the field if not already initialized.
func (t *Dhcpv4Server_Leases) GetOrCreateHostsMap() map[string]*Dhcpv4Server_Leases_Hosts {
	if t.Hosts == nil {
		t.Hosts = make(map[string]*Dhcpv4Server_Leases_Hosts)
	}
	return t.Hosts
}

// GetOrCreateHosts retrieves the value with the specified keys from
// the receiver Dhcpv4Server_Leases. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Dhcpv4Server_Leases) GetOrCreateHosts(Address string) *Dhcpv4Server_Leases_Hosts {

	key := Address

	if v, ok := t.Hosts[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHosts(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHosts got unexpected error: %v", err))
	}
	return v
}

// GetHosts retrieves the value with the specified key from
// the Hosts map field of Dhcpv4Server_Leases. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Dhcpv4Server_Leases) GetHosts(Address string) *Dhcpv4Server_Leases_Hosts {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Hosts[key]; ok {
		return lm
	}
	return nil
}

// DeleteHosts deletes the value with the specified keys from
// the receiver Dhcpv4Server_Leases. If there is no such element, the function
// is a no-op.
func (t *Dhcpv4Server_Leases) DeleteHosts(Address string) {
	key := Address

	delete(t.Hosts, key)
}

// AppendHosts appends the supplied Dhcpv4Server_Leases_Hosts struct to the
// list Hosts of Dhcpv4Server_Leases. If the key value(s) specified in
// the supplied Dhcpv4Server_Leases_Hosts already exist in the list, an error is
// returned.
func (t *Dhcpv4Server_Leases) AppendHosts(v *Dhcpv4Server_Leases_Hosts) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Hosts == nil {
		t.Hosts = make(map[string]*Dhcpv4Server_Leases_Hosts)
	}

	if _, ok := t.Hosts[key]; ok {
		return fmt.Errorf("duplicate key for list Hosts %v", key)
	}

	t.Hosts[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Dhcpv4Server_Leases
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Dhcpv4Server_Leases) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Hosts {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Dhcpv4Server_Leases) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Dhcpv4Server_Leases"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Dhcpv4Server_Leases) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Dhcpv4Server_Leases) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Dhcpv4Server_Leases.
func (*Dhcpv4Server_Leases) ΛBelongingModule() string {
	return "open-traffic-generator-dhcpv4server"
}

// Dhcpv4Server_Leases_Hosts represents the /open-traffic-generator-dhcpv4server/dhcpv4-servers/dhcpv4-server/state/leases/leases-states/hosts YANG schema element.
type Dhcpv4Server_Leases_Hosts struct {
	Address       *string `path:"state/address|address" module:"open-traffic-generator-dhcpv4server/open-traffic-generator-dhcpv4server|open-traffic-generator-dhcpv4server" shadow-path:"address" shadow-module:"open-traffic-generator-dhcpv4server"`
	CircuitId     *string `path:"state/circuit-id" module:"open-traffic-generator-dhcpv4server/open-traffic-generator-dhcpv4server"`
	ClientId      *string `path:"state/client-id" module:"open-traffic-generator-dhcpv4server/open-traffic-generator-dhcpv4server"`
	PreferredTime *uint32 `path:"state/preferred_time" module:"open-traffic-generator-dhcpv4server/open-traffic-generator-dhcpv4server"`
	RebindTime    *uint32 `path:"state/rebind_time" module:"open-traffic-generator-dhcpv4server/open-traffic-generator-dhcpv4server"`
	RemoteId      *string `path:"state/remote-id" module:"open-traffic-generator-dhcpv4server/open-traffic-generator-dhcpv4server"`
	RenewTime     *uint32 `path:"state/renew_time" module:"open-traffic-generator-dhcpv4server/open-traffic-generator-dhcpv4server"`
	ValidTime     *uint32 `path:"state/valid-time" module:"open-traffic-generator-dhcpv4server/open-traffic-generator-dhcpv4server"`
}

// IsYANGGoStruct ensures that Dhcpv4Server_Leases_Hosts implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Dhcpv4Server_Leases_Hosts) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the Dhcpv4Server_Leases_Hosts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *Dhcpv4Server_Leases_Hosts) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetCircuitId retrieves the value of the leaf CircuitId from the Dhcpv4Server_Leases_Hosts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CircuitId is set, it can
// safely use t.GetCircuitId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CircuitId == nil' before retrieving the leaf's value.
func (t *Dhcpv4Server_Leases_Hosts) GetCircuitId() string {
	if t == nil || t.CircuitId == nil {
		return ""
	}
	return *t.CircuitId
}

// GetClientId retrieves the value of the leaf ClientId from the Dhcpv4Server_Leases_Hosts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientId is set, it can
// safely use t.GetClientId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientId == nil' before retrieving the leaf's value.
func (t *Dhcpv4Server_Leases_Hosts) GetClientId() string {
	if t == nil || t.ClientId == nil {
		return ""
	}
	return *t.ClientId
}

// GetPreferredTime retrieves the value of the leaf PreferredTime from the Dhcpv4Server_Leases_Hosts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferredTime is set, it can
// safely use t.GetPreferredTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferredTime == nil' before retrieving the leaf's value.
func (t *Dhcpv4Server_Leases_Hosts) GetPreferredTime() uint32 {
	if t == nil || t.PreferredTime == nil {
		return 0
	}
	return *t.PreferredTime
}

// GetRebindTime retrieves the value of the leaf RebindTime from the Dhcpv4Server_Leases_Hosts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RebindTime is set, it can
// safely use t.GetRebindTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RebindTime == nil' before retrieving the leaf's value.
func (t *Dhcpv4Server_Leases_Hosts) GetRebindTime() uint32 {
	if t == nil || t.RebindTime == nil {
		return 0
	}
	return *t.RebindTime
}

// GetRemoteId retrieves the value of the leaf RemoteId from the Dhcpv4Server_Leases_Hosts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteId is set, it can
// safely use t.GetRemoteId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteId == nil' before retrieving the leaf's value.
func (t *Dhcpv4Server_Leases_Hosts) GetRemoteId() string {
	if t == nil || t.RemoteId == nil {
		return ""
	}
	return *t.RemoteId
}

// GetRenewTime retrieves the value of the leaf RenewTime from the Dhcpv4Server_Leases_Hosts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RenewTime is set, it can
// safely use t.GetRenewTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RenewTime == nil' before retrieving the leaf's value.
func (t *Dhcpv4Server_Leases_Hosts) GetRenewTime() uint32 {
	if t == nil || t.RenewTime == nil {
		return 0
	}
	return *t.RenewTime
}

// GetValidTime retrieves the value of the leaf ValidTime from the Dhcpv4Server_Leases_Hosts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidTime is set, it can
// safely use t.GetValidTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidTime == nil' before retrieving the leaf's value.
func (t *Dhcpv4Server_Leases_Hosts) GetValidTime() uint32 {
	if t == nil || t.ValidTime == nil {
		return 0
	}
	return *t.ValidTime
}

// SetAddress sets the value of the leaf Address in the Dhcpv4Server_Leases_Hosts
// struct.
func (t *Dhcpv4Server_Leases_Hosts) SetAddress(v string) {
	t.Address = &v
}

// SetCircuitId sets the value of the leaf CircuitId in the Dhcpv4Server_Leases_Hosts
// struct.
func (t *Dhcpv4Server_Leases_Hosts) SetCircuitId(v string) {
	t.CircuitId = &v
}

// SetClientId sets the value of the leaf ClientId in the Dhcpv4Server_Leases_Hosts
// struct.
func (t *Dhcpv4Server_Leases_Hosts) SetClientId(v string) {
	t.ClientId = &v
}

// SetPreferredTime sets the value of the leaf PreferredTime in the Dhcpv4Server_Leases_Hosts
// struct.
func (t *Dhcpv4Server_Leases_Hosts) SetPreferredTime(v uint32) {
	t.PreferredTime = &v
}

// SetRebindTime sets the value of the leaf RebindTime in the Dhcpv4Server_Leases_Hosts
// struct.
func (t *Dhcpv4Server_Leases_Hosts) SetRebindTime(v uint32) {
	t.RebindTime = &v
}

// SetRemoteId sets the value of the leaf RemoteId in the Dhcpv4Server_Leases_Hosts
// struct.
func (t *Dhcpv4Server_Leases_Hosts) SetRemoteId(v string) {
	t.RemoteId = &v
}

// SetRenewTime sets the value of the leaf RenewTime in the Dhcpv4Server_Leases_Hosts
// struct.
func (t *Dhcpv4Server_Leases_Hosts) SetRenewTime(v uint32) {
	t.RenewTime = &v
}

// SetValidTime sets the value of the leaf ValidTime in the Dhcpv4Server_Leases_Hosts
// struct.
func (t *Dhcpv4Server_Leases_Hosts) SetValidTime(v uint32) {
	t.ValidTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Dhcpv4Server_Leases_Hosts
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Dhcpv4Server_Leases_Hosts) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Dhcpv4Server_Leases_Hosts struct, which is a YANG list entry.
func (t *Dhcpv4Server_Leases_Hosts) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Dhcpv4Server_Leases_Hosts) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Dhcpv4Server_Leases_Hosts"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Dhcpv4Server_Leases_Hosts) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Dhcpv4Server_Leases_Hosts) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Dhcpv4Server_Leases_Hosts.
func (*Dhcpv4Server_Leases_Hosts) ΛBelongingModule() string {
	return "open-traffic-generator-dhcpv4server"
}

// Dhcpv6Client represents the /open-traffic-generator-dhcpv6client/dhcpv6-clients/dhcpv6-client YANG schema element.
type Dhcpv6Client struct {
	Counters  *Dhcpv6Client_Counters  `path:"state/counters" module:"open-traffic-generator-dhcpv6client/open-traffic-generator-dhcpv6client"`
	Interface *Dhcpv6Client_Interface `path:"state/interface" module:"open-traffic-generator-dhcpv6client/open-traffic-generator-dhcpv6client"`
	Name      *string                 `path:"state/name|name" module:"open-traffic-generator-dhcpv6client/open-traffic-generator-dhcpv6client|open-traffic-generator-dhcpv6client" shadow-path:"name" shadow-module:"open-traffic-generator-dhcpv6client"`
}

// IsYANGGoStruct ensures that Dhcpv6Client implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Dhcpv6Client) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Dhcpv6Client) GetOrCreateCounters() *Dhcpv6Client_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Dhcpv6Client_Counters{}
	return t.Counters
}

// GetOrCreateInterface retrieves the value of the Interface field
// or returns the existing field if it already exists.
func (t *Dhcpv6Client) GetOrCreateInterface() *Dhcpv6Client_Interface {
	if t.Interface != nil {
		return t.Interface
	}
	t.Interface = &Dhcpv6Client_Interface{}
	return t.Interface
}

// GetCounters returns the value of the Counters struct pointer
// from Dhcpv6Client. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Dhcpv6Client) GetCounters() *Dhcpv6Client_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetInterface returns the value of the Interface struct pointer
// from Dhcpv6Client. If the receiver or the field Interface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Dhcpv6Client) GetInterface() *Dhcpv6Client_Interface {
	if t != nil && t.Interface != nil {
		return t.Interface
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the Dhcpv6Client
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Dhcpv6Client) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// SetName sets the value of the leaf Name in the Dhcpv6Client
// struct.
func (t *Dhcpv6Client) SetName(v string) {
	t.Name = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Dhcpv6Client
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Dhcpv6Client) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Counters.PopulateDefaults()
	t.Interface.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the Dhcpv6Client struct, which is a YANG list entry.
func (t *Dhcpv6Client) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Dhcpv6Client) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Dhcpv6Client"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Dhcpv6Client) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Dhcpv6Client) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Dhcpv6Client.
func (*Dhcpv6Client) ΛBelongingModule() string {
	return "open-traffic-generator-dhcpv6client"
}

// Dhcpv6Client_Counters represents the /open-traffic-generator-dhcpv6client/dhcpv6-clients/dhcpv6-client/state/counters YANG schema element.
type Dhcpv6Client_Counters struct {
	AdvertisementsIgnored      *uint64 `path:"advertisements-ignored" module:"open-traffic-generator-dhcpv6client"`
	AdvertisementsReceived     *uint64 `path:"advertisements-received" module:"open-traffic-generator-dhcpv6client"`
	InformationRequestsSent    *uint64 `path:"information-requests-sent" module:"open-traffic-generator-dhcpv6client"`
	NacksReceived              *uint64 `path:"nacks-received" module:"open-traffic-generator-dhcpv6client"`
	RapidCommitRepliesReceived *uint64 `path:"rapid-commit-replies-received" module:"open-traffic-generator-dhcpv6client"`
	RapidCommitSolicitsSent    *uint64 `path:"rapid-commit-solicits-sent" module:"open-traffic-generator-dhcpv6client"`
	RebindsSent                *uint64 `path:"rebinds-sent" module:"open-traffic-generator-dhcpv6client"`
	ReconfiguresReceived       *uint64 `path:"reconfigures-received" module:"open-traffic-generator-dhcpv6client"`
	ReleasesSent               *uint64 `path:"releases-sent" module:"open-traffic-generator-dhcpv6client"`
	RenewsSent                 *uint64 `path:"renews-sent" module:"open-traffic-generator-dhcpv6client"`
	RepliesReceived            *uint64 `path:"replies-received" module:"open-traffic-generator-dhcpv6client"`
	RequestsSent               *uint64 `path:"requests-sent" module:"open-traffic-generator-dhcpv6client"`
	SolicitsSent               *uint64 `path:"solicits-sent" module:"open-traffic-generator-dhcpv6client"`
}

// IsYANGGoStruct ensures that Dhcpv6Client_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Dhcpv6Client_Counters) IsYANGGoStruct() {}

// GetAdvertisementsIgnored retrieves the value of the leaf AdvertisementsIgnored from the Dhcpv6Client_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisementsIgnored is set, it can
// safely use t.GetAdvertisementsIgnored() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisementsIgnored == nil' before retrieving the leaf's value.
func (t *Dhcpv6Client_Counters) GetAdvertisementsIgnored() uint64 {
	if t == nil || t.AdvertisementsIgnored == nil {
		return 0
	}
	return *t.AdvertisementsIgnored
}

// GetAdvertisementsReceived retrieves the value of the leaf AdvertisementsReceived from the Dhcpv6Client_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisementsReceived is set, it can
// safely use t.GetAdvertisementsReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisementsReceived == nil' before retrieving the leaf's value.
func (t *Dhcpv6Client_Counters) GetAdvertisementsReceived() uint64 {
	if t == nil || t.AdvertisementsReceived == nil {
		return 0
	}
	return *t.AdvertisementsReceived
}

// GetInformationRequestsSent retrieves the value of the leaf InformationRequestsSent from the Dhcpv6Client_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InformationRequestsSent is set, it can
// safely use t.GetInformationRequestsSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InformationRequestsSent == nil' before retrieving the leaf's value.
func (t *Dhcpv6Client_Counters) GetInformationRequestsSent() uint64 {
	if t == nil || t.InformationRequestsSent == nil {
		return 0
	}
	return *t.InformationRequestsSent
}

// GetNacksReceived retrieves the value of the leaf NacksReceived from the Dhcpv6Client_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NacksReceived is set, it can
// safely use t.GetNacksReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NacksReceived == nil' before retrieving the leaf's value.
func (t *Dhcpv6Client_Counters) GetNacksReceived() uint64 {
	if t == nil || t.NacksReceived == nil {
		return 0
	}
	return *t.NacksReceived
}

// GetRapidCommitRepliesReceived retrieves the value of the leaf RapidCommitRepliesReceived from the Dhcpv6Client_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RapidCommitRepliesReceived is set, it can
// safely use t.GetRapidCommitRepliesReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RapidCommitRepliesReceived == nil' before retrieving the leaf's value.
func (t *Dhcpv6Client_Counters) GetRapidCommitRepliesReceived() uint64 {
	if t == nil || t.RapidCommitRepliesReceived == nil {
		return 0
	}
	return *t.RapidCommitRepliesReceived
}

// GetRapidCommitSolicitsSent retrieves the value of the leaf RapidCommitSolicitsSent from the Dhcpv6Client_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RapidCommitSolicitsSent is set, it can
// safely use t.GetRapidCommitSolicitsSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RapidCommitSolicitsSent == nil' before retrieving the leaf's value.
func (t *Dhcpv6Client_Counters) GetRapidCommitSolicitsSent() uint64 {
	if t == nil || t.RapidCommitSolicitsSent == nil {
		return 0
	}
	return *t.RapidCommitSolicitsSent
}

// GetRebindsSent retrieves the value of the leaf RebindsSent from the Dhcpv6Client_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RebindsSent is set, it can
// safely use t.GetRebindsSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RebindsSent == nil' before retrieving the leaf's value.
func (t *Dhcpv6Client_Counters) GetRebindsSent() uint64 {
	if t == nil || t.RebindsSent == nil {
		return 0
	}
	return *t.RebindsSent
}

// GetReconfiguresReceived retrieves the value of the leaf ReconfiguresReceived from the Dhcpv6Client_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReconfiguresReceived is set, it can
// safely use t.GetReconfiguresReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReconfiguresReceived == nil' before retrieving the leaf's value.
func (t *Dhcpv6Client_Counters) GetReconfiguresReceived() uint64 {
	if t == nil || t.ReconfiguresReceived == nil {
		return 0
	}
	return *t.ReconfiguresReceived
}

// GetReleasesSent retrieves the value of the leaf ReleasesSent from the Dhcpv6Client_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReleasesSent is set, it can
// safely use t.GetReleasesSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReleasesSent == nil' before retrieving the leaf's value.
func (t *Dhcpv6Client_Counters) GetReleasesSent() uint64 {
	if t == nil || t.ReleasesSent == nil {
		return 0
	}
	return *t.ReleasesSent
}

// GetRenewsSent retrieves the value of the leaf RenewsSent from the Dhcpv6Client_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RenewsSent is set, it can
// safely use t.GetRenewsSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RenewsSent == nil' before retrieving the leaf's value.
func (t *Dhcpv6Client_Counters) GetRenewsSent() uint64 {
	if t == nil || t.RenewsSent == nil {
		return 0
	}
	return *t.RenewsSent
}

// GetRepliesReceived retrieves the value of the leaf RepliesReceived from the Dhcpv6Client_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RepliesReceived is set, it can
// safely use t.GetRepliesReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RepliesReceived == nil' before retrieving the leaf's value.
func (t *Dhcpv6Client_Counters) GetRepliesReceived() uint64 {
	if t == nil || t.RepliesReceived == nil {
		return 0
	}
	return *t.RepliesReceived
}

// GetRequestsSent retrieves the value of the leaf RequestsSent from the Dhcpv6Client_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RequestsSent is set, it can
// safely use t.GetRequestsSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RequestsSent == nil' before retrieving the leaf's value.
func (t *Dhcpv6Client_Counters) GetRequestsSent() uint64 {
	if t == nil || t.RequestsSent == nil {
		return 0
	}
	return *t.RequestsSent
}

// GetSolicitsSent retrieves the value of the leaf SolicitsSent from the Dhcpv6Client_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SolicitsSent is set, it can
// safely use t.GetSolicitsSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SolicitsSent == nil' before retrieving the leaf's value.
func (t *Dhcpv6Client_Counters) GetSolicitsSent() uint64 {
	if t == nil || t.SolicitsSent == nil {
		return 0
	}
	return *t.SolicitsSent
}

// SetAdvertisementsIgnored sets the value of the leaf AdvertisementsIgnored in the Dhcpv6Client_Counters
// struct.
func (t *Dhcpv6Client_Counters) SetAdvertisementsIgnored(v uint64) {
	t.AdvertisementsIgnored = &v
}

// SetAdvertisementsReceived sets the value of the leaf AdvertisementsReceived in the Dhcpv6Client_Counters
// struct.
func (t *Dhcpv6Client_Counters) SetAdvertisementsReceived(v uint64) {
	t.AdvertisementsReceived = &v
}

// SetInformationRequestsSent sets the value of the leaf InformationRequestsSent in the Dhcpv6Client_Counters
// struct.
func (t *Dhcpv6Client_Counters) SetInformationRequestsSent(v uint64) {
	t.InformationRequestsSent = &v
}

// SetNacksReceived sets the value of the leaf NacksReceived in the Dhcpv6Client_Counters
// struct.
func (t *Dhcpv6Client_Counters) SetNacksReceived(v uint64) {
	t.NacksReceived = &v
}

// SetRapidCommitRepliesReceived sets the value of the leaf RapidCommitRepliesReceived in the Dhcpv6Client_Counters
// struct.
func (t *Dhcpv6Client_Counters) SetRapidCommitRepliesReceived(v uint64) {
	t.RapidCommitRepliesReceived = &v
}

// SetRapidCommitSolicitsSent sets the value of the leaf RapidCommitSolicitsSent in the Dhcpv6Client_Counters
// struct.
func (t *Dhcpv6Client_Counters) SetRapidCommitSolicitsSent(v uint64) {
	t.RapidCommitSolicitsSent = &v
}

// SetRebindsSent sets the value of the leaf RebindsSent in the Dhcpv6Client_Counters
// struct.
func (t *Dhcpv6Client_Counters) SetRebindsSent(v uint64) {
	t.RebindsSent = &v
}

// SetReconfiguresReceived sets the value of the leaf ReconfiguresReceived in the Dhcpv6Client_Counters
// struct.
func (t *Dhcpv6Client_Counters) SetReconfiguresReceived(v uint64) {
	t.ReconfiguresReceived = &v
}

// SetReleasesSent sets the value of the leaf ReleasesSent in the Dhcpv6Client_Counters
// struct.
func (t *Dhcpv6Client_Counters) SetReleasesSent(v uint64) {
	t.ReleasesSent = &v
}

// SetRenewsSent sets the value of the leaf RenewsSent in the Dhcpv6Client_Counters
// struct.
func (t *Dhcpv6Client_Counters) SetRenewsSent(v uint64) {
	t.RenewsSent = &v
}

// SetRepliesReceived sets the value of the leaf RepliesReceived in the Dhcpv6Client_Counters
// struct.
func (t *Dhcpv6Client_Counters) SetRepliesReceived(v uint64) {
	t.RepliesReceived = &v
}

// SetRequestsSent sets the value of the leaf RequestsSent in the Dhcpv6Client_Counters
// struct.
func (t *Dhcpv6Client_Counters) SetRequestsSent(v uint64) {
	t.RequestsSent = &v
}

// SetSolicitsSent sets the value of the leaf SolicitsSent in the Dhcpv6Client_Counters
// struct.
func (t *Dhcpv6Client_Counters) SetSolicitsSent(v uint64) {
	t.SolicitsSent = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Dhcpv6Client_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Dhcpv6Client_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Dhcpv6Client_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Dhcpv6Client_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Dhcpv6Client_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Dhcpv6Client_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Dhcpv6Client_Counters.
func (*Dhcpv6Client_Counters) ΛBelongingModule() string {
	return "open-traffic-generator-dhcpv6client"
}

// Dhcpv6Client_Interface represents the /open-traffic-generator-dhcpv6client/dhcpv6-clients/dhcpv6-client/state/interface YANG schema element.
type Dhcpv6Client_Interface struct {
	IaAddress   []*Dhcpv6Client_Interface_IaAddress   `path:"ia-addresses/ia-address" module:"open-traffic-generator-dhcpv6client/open-traffic-generator-dhcpv6client"`
	IapdAddress []*Dhcpv6Client_Interface_IapdAddress `path:"iapd-addresses/iapd-address" module:"open-traffic-generator-dhcpv6client/open-traffic-generator-dhcpv6client"`
}

// IsYANGGoStruct ensures that Dhcpv6Client_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Dhcpv6Client_Interface) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the Dhcpv6Client_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Dhcpv6Client_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.IaAddress {
		e.PopulateDefaults()
	}
	for _, e := range t.IapdAddress {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Dhcpv6Client_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Dhcpv6Client_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Dhcpv6Client_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Dhcpv6Client_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Dhcpv6Client_Interface.
func (*Dhcpv6Client_Interface) ΛBelongingModule() string {
	return "open-traffic-generator-dhcpv6client"
}

// Dhcpv6Client_Interface_IaAddress represents the /open-traffic-generator-dhcpv6client/dhcpv6-clients/dhcpv6-client/state/interface/ia-addresses/ia-address YANG schema element.
type Dhcpv6Client_Interface_IaAddress struct {
	Address   *string `path:"address" module:"open-traffic-generator-dhcpv6client"`
	Gateway   *string `path:"gateway" module:"open-traffic-generator-dhcpv6client"`
	LeaseTime *uint32 `path:"lease-time" module:"open-traffic-generator-dhcpv6client"`
}

// IsYANGGoStruct ensures that Dhcpv6Client_Interface_IaAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Dhcpv6Client_Interface_IaAddress) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the Dhcpv6Client_Interface_IaAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *Dhcpv6Client_Interface_IaAddress) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetGateway retrieves the value of the leaf Gateway from the Dhcpv6Client_Interface_IaAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gateway is set, it can
// safely use t.GetGateway() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gateway == nil' before retrieving the leaf's value.
func (t *Dhcpv6Client_Interface_IaAddress) GetGateway() string {
	if t == nil || t.Gateway == nil {
		return ""
	}
	return *t.Gateway
}

// GetLeaseTime retrieves the value of the leaf LeaseTime from the Dhcpv6Client_Interface_IaAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LeaseTime is set, it can
// safely use t.GetLeaseTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LeaseTime == nil' before retrieving the leaf's value.
func (t *Dhcpv6Client_Interface_IaAddress) GetLeaseTime() uint32 {
	if t == nil || t.LeaseTime == nil {
		return 0
	}
	return *t.LeaseTime
}

// SetAddress sets the value of the leaf Address in the Dhcpv6Client_Interface_IaAddress
// struct.
func (t *Dhcpv6Client_Interface_IaAddress) SetAddress(v string) {
	t.Address = &v
}

// SetGateway sets the value of the leaf Gateway in the Dhcpv6Client_Interface_IaAddress
// struct.
func (t *Dhcpv6Client_Interface_IaAddress) SetGateway(v string) {
	t.Gateway = &v
}

// SetLeaseTime sets the value of the leaf LeaseTime in the Dhcpv6Client_Interface_IaAddress
// struct.
func (t *Dhcpv6Client_Interface_IaAddress) SetLeaseTime(v uint32) {
	t.LeaseTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Dhcpv6Client_Interface_IaAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Dhcpv6Client_Interface_IaAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Dhcpv6Client_Interface_IaAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Dhcpv6Client_Interface_IaAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Dhcpv6Client_Interface_IaAddress) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Dhcpv6Client_Interface_IaAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Dhcpv6Client_Interface_IaAddress.
func (*Dhcpv6Client_Interface_IaAddress) ΛBelongingModule() string {
	return "open-traffic-generator-dhcpv6client"
}

// Dhcpv6Client_Interface_IapdAddress represents the /open-traffic-generator-dhcpv6client/dhcpv6-clients/dhcpv6-client/state/interface/iapd-addresses/iapd-address YANG schema element.
type Dhcpv6Client_Interface_IapdAddress struct {
	Address      *string `path:"address" module:"open-traffic-generator-dhcpv6client"`
	LeaseTime    *uint32 `path:"lease-time" module:"open-traffic-generator-dhcpv6client"`
	PrefixLength *uint32 `path:"prefix-length" module:"open-traffic-generator-dhcpv6client"`
}

// IsYANGGoStruct ensures that Dhcpv6Client_Interface_IapdAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Dhcpv6Client_Interface_IapdAddress) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the Dhcpv6Client_Interface_IapdAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *Dhcpv6Client_Interface_IapdAddress) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetLeaseTime retrieves the value of the leaf LeaseTime from the Dhcpv6Client_Interface_IapdAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LeaseTime is set, it can
// safely use t.GetLeaseTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LeaseTime == nil' before retrieving the leaf's value.
func (t *Dhcpv6Client_Interface_IapdAddress) GetLeaseTime() uint32 {
	if t == nil || t.LeaseTime == nil {
		return 0
	}
	return *t.LeaseTime
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the Dhcpv6Client_Interface_IapdAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *Dhcpv6Client_Interface_IapdAddress) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// SetAddress sets the value of the leaf Address in the Dhcpv6Client_Interface_IapdAddress
// struct.
func (t *Dhcpv6Client_Interface_IapdAddress) SetAddress(v string) {
	t.Address = &v
}

// SetLeaseTime sets the value of the leaf LeaseTime in the Dhcpv6Client_Interface_IapdAddress
// struct.
func (t *Dhcpv6Client_Interface_IapdAddress) SetLeaseTime(v uint32) {
	t.LeaseTime = &v
}

// SetPrefixLength sets the value of the leaf PrefixLength in the Dhcpv6Client_Interface_IapdAddress
// struct.
func (t *Dhcpv6Client_Interface_IapdAddress) SetPrefixLength(v uint32) {
	t.PrefixLength = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Dhcpv6Client_Interface_IapdAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Dhcpv6Client_Interface_IapdAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Dhcpv6Client_Interface_IapdAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Dhcpv6Client_Interface_IapdAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Dhcpv6Client_Interface_IapdAddress) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Dhcpv6Client_Interface_IapdAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Dhcpv6Client_Interface_IapdAddress.
func (*Dhcpv6Client_Interface_IapdAddress) ΛBelongingModule() string {
	return "open-traffic-generator-dhcpv6client"
}

// Dhcpv6Server represents the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server YANG schema element.
type Dhcpv6Server struct {
	Counters *Dhcpv6Server_Counters `path:"state/counters" module:"open-traffic-generator-dhcpv6server/open-traffic-generator-dhcpv6server"`
	Leases   *Dhcpv6Server_Leases   `path:"state/leases" module:"open-traffic-generator-dhcpv6server/open-traffic-generator-dhcpv6server"`
	Name     *string                `path:"state/name|name" module:"open-traffic-generator-dhcpv6server/open-traffic-generator-dhcpv6server|open-traffic-generator-dhcpv6server" shadow-path:"name" shadow-module:"open-traffic-generator-dhcpv6server"`
}

// IsYANGGoStruct ensures that Dhcpv6Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Dhcpv6Server) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Dhcpv6Server) GetOrCreateCounters() *Dhcpv6Server_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Dhcpv6Server_Counters{}
	return t.Counters
}

// GetOrCreateLeases retrieves the value of the Leases field
// or returns the existing field if it already exists.
func (t *Dhcpv6Server) GetOrCreateLeases() *Dhcpv6Server_Leases {
	if t.Leases != nil {
		return t.Leases
	}
	t.Leases = &Dhcpv6Server_Leases{}
	return t.Leases
}

// GetCounters returns the value of the Counters struct pointer
// from Dhcpv6Server. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Dhcpv6Server) GetCounters() *Dhcpv6Server_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetLeases returns the value of the Leases struct pointer
// from Dhcpv6Server. If the receiver or the field Leases is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Dhcpv6Server) GetLeases() *Dhcpv6Server_Leases {
	if t != nil && t.Leases != nil {
		return t.Leases
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the Dhcpv6Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Dhcpv6Server) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// SetName sets the value of the leaf Name in the Dhcpv6Server
// struct.
func (t *Dhcpv6Server) SetName(v string) {
	t.Name = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Dhcpv6Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Dhcpv6Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Counters.PopulateDefaults()
	t.Leases.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the Dhcpv6Server struct, which is a YANG list entry.
func (t *Dhcpv6Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Dhcpv6Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Dhcpv6Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Dhcpv6Server) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Dhcpv6Server) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Dhcpv6Server.
func (*Dhcpv6Server) ΛBelongingModule() string {
	return "open-traffic-generator-dhcpv6server"
}

// Dhcpv6Server_Counters represents the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/counters YANG schema element.
type Dhcpv6Server_Counters struct {
	AdvertisementsSent          *uint64 `path:"advertisements-sent" module:"open-traffic-generator-dhcpv6server"`
	ConfirmsReceived            *uint64 `path:"confirms-received" module:"open-traffic-generator-dhcpv6server"`
	DeclinesReceived            *uint64 `path:"declines-received" module:"open-traffic-generator-dhcpv6server"`
	InformationRequestsReceived *uint64 `path:"information-requests-received" module:"open-traffic-generator-dhcpv6server"`
	NacksSent                   *uint64 `path:"nacks-sent" module:"open-traffic-generator-dhcpv6server"`
	RebindsReceived             *uint64 `path:"rebinds-received" module:"open-traffic-generator-dhcpv6server"`
	ReconfiguresSent            *uint64 `path:"reconfigures-sent" module:"open-traffic-generator-dhcpv6server"`
	RelayForwardsReceived       *uint64 `path:"relay-forwards-received" module:"open-traffic-generator-dhcpv6server"`
	RelayRepliesSent            *uint64 `path:"relay-replies-sent" module:"open-traffic-generator-dhcpv6server"`
	ReleasesReceived            *uint64 `path:"releases-received" module:"open-traffic-generator-dhcpv6server"`
	RenewalsReceived            *uint64 `path:"renewals-received" module:"open-traffic-generator-dhcpv6server"`
	RepliesSent                 *uint64 `path:"replies-sent" module:"open-traffic-generator-dhcpv6server"`
	RequestsReceived            *uint64 `path:"requests-received" module:"open-traffic-generator-dhcpv6server"`
	SolicitsIgnored             *uint64 `path:"solicits-ignored" module:"open-traffic-generator-dhcpv6server"`
	SolicitsReceived            *uint64 `path:"solicits-received" module:"open-traffic-generator-dhcpv6server"`
}

// IsYANGGoStruct ensures that Dhcpv6Server_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Dhcpv6Server_Counters) IsYANGGoStruct() {}

// GetAdvertisementsSent retrieves the value of the leaf AdvertisementsSent from the Dhcpv6Server_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisementsSent is set, it can
// safely use t.GetAdvertisementsSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisementsSent == nil' before retrieving the leaf's value.
func (t *Dhcpv6Server_Counters) GetAdvertisementsSent() uint64 {
	if t == nil || t.AdvertisementsSent == nil {
		return 0
	}
	return *t.AdvertisementsSent
}

// GetConfirmsReceived retrieves the value of the leaf ConfirmsReceived from the Dhcpv6Server_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConfirmsReceived is set, it can
// safely use t.GetConfirmsReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConfirmsReceived == nil' before retrieving the leaf's value.
func (t *Dhcpv6Server_Counters) GetConfirmsReceived() uint64 {
	if t == nil || t.ConfirmsReceived == nil {
		return 0
	}
	return *t.ConfirmsReceived
}

// GetDeclinesReceived retrieves the value of the leaf DeclinesReceived from the Dhcpv6Server_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeclinesReceived is set, it can
// safely use t.GetDeclinesReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeclinesReceived == nil' before retrieving the leaf's value.
func (t *Dhcpv6Server_Counters) GetDeclinesReceived() uint64 {
	if t == nil || t.DeclinesReceived == nil {
		return 0
	}
	return *t.DeclinesReceived
}

// GetInformationRequestsReceived retrieves the value of the leaf InformationRequestsReceived from the Dhcpv6Server_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InformationRequestsReceived is set, it can
// safely use t.GetInformationRequestsReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InformationRequestsReceived == nil' before retrieving the leaf's value.
func (t *Dhcpv6Server_Counters) GetInformationRequestsReceived() uint64 {
	if t == nil || t.InformationRequestsReceived == nil {
		return 0
	}
	return *t.InformationRequestsReceived
}

// GetNacksSent retrieves the value of the leaf NacksSent from the Dhcpv6Server_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NacksSent is set, it can
// safely use t.GetNacksSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NacksSent == nil' before retrieving the leaf's value.
func (t *Dhcpv6Server_Counters) GetNacksSent() uint64 {
	if t == nil || t.NacksSent == nil {
		return 0
	}
	return *t.NacksSent
}

// GetRebindsReceived retrieves the value of the leaf RebindsReceived from the Dhcpv6Server_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RebindsReceived is set, it can
// safely use t.GetRebindsReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RebindsReceived == nil' before retrieving the leaf's value.
func (t *Dhcpv6Server_Counters) GetRebindsReceived() uint64 {
	if t == nil || t.RebindsReceived == nil {
		return 0
	}
	return *t.RebindsReceived
}

// GetReconfiguresSent retrieves the value of the leaf ReconfiguresSent from the Dhcpv6Server_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReconfiguresSent is set, it can
// safely use t.GetReconfiguresSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReconfiguresSent == nil' before retrieving the leaf's value.
func (t *Dhcpv6Server_Counters) GetReconfiguresSent() uint64 {
	if t == nil || t.ReconfiguresSent == nil {
		return 0
	}
	return *t.ReconfiguresSent
}

// GetRelayForwardsReceived retrieves the value of the leaf RelayForwardsReceived from the Dhcpv6Server_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RelayForwardsReceived is set, it can
// safely use t.GetRelayForwardsReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RelayForwardsReceived == nil' before retrieving the leaf's value.
func (t *Dhcpv6Server_Counters) GetRelayForwardsReceived() uint64 {
	if t == nil || t.RelayForwardsReceived == nil {
		return 0
	}
	return *t.RelayForwardsReceived
}

// GetRelayRepliesSent retrieves the value of the leaf RelayRepliesSent from the Dhcpv6Server_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RelayRepliesSent is set, it can
// safely use t.GetRelayRepliesSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RelayRepliesSent == nil' before retrieving the leaf's value.
func (t *Dhcpv6Server_Counters) GetRelayRepliesSent() uint64 {
	if t == nil || t.RelayRepliesSent == nil {
		return 0
	}
	return *t.RelayRepliesSent
}

// GetReleasesReceived retrieves the value of the leaf ReleasesReceived from the Dhcpv6Server_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReleasesReceived is set, it can
// safely use t.GetReleasesReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReleasesReceived == nil' before retrieving the leaf's value.
func (t *Dhcpv6Server_Counters) GetReleasesReceived() uint64 {
	if t == nil || t.ReleasesReceived == nil {
		return 0
	}
	return *t.ReleasesReceived
}

// GetRenewalsReceived retrieves the value of the leaf RenewalsReceived from the Dhcpv6Server_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RenewalsReceived is set, it can
// safely use t.GetRenewalsReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RenewalsReceived == nil' before retrieving the leaf's value.
func (t *Dhcpv6Server_Counters) GetRenewalsReceived() uint64 {
	if t == nil || t.RenewalsReceived == nil {
		return 0
	}
	return *t.RenewalsReceived
}

// GetRepliesSent retrieves the value of the leaf RepliesSent from the Dhcpv6Server_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RepliesSent is set, it can
// safely use t.GetRepliesSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RepliesSent == nil' before retrieving the leaf's value.
func (t *Dhcpv6Server_Counters) GetRepliesSent() uint64 {
	if t == nil || t.RepliesSent == nil {
		return 0
	}
	return *t.RepliesSent
}

// GetRequestsReceived retrieves the value of the leaf RequestsReceived from the Dhcpv6Server_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RequestsReceived is set, it can
// safely use t.GetRequestsReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RequestsReceived == nil' before retrieving the leaf's value.
func (t *Dhcpv6Server_Counters) GetRequestsReceived() uint64 {
	if t == nil || t.RequestsReceived == nil {
		return 0
	}
	return *t.RequestsReceived
}

// GetSolicitsIgnored retrieves the value of the leaf SolicitsIgnored from the Dhcpv6Server_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SolicitsIgnored is set, it can
// safely use t.GetSolicitsIgnored() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SolicitsIgnored == nil' before retrieving the leaf's value.
func (t *Dhcpv6Server_Counters) GetSolicitsIgnored() uint64 {
	if t == nil || t.SolicitsIgnored == nil {
		return 0
	}
	return *t.SolicitsIgnored
}

// GetSolicitsReceived retrieves the value of the leaf SolicitsReceived from the Dhcpv6Server_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SolicitsReceived is set, it can
// safely use t.GetSolicitsReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SolicitsReceived == nil' before retrieving the leaf's value.
func (t *Dhcpv6Server_Counters) GetSolicitsReceived() uint64 {
	if t == nil || t.SolicitsReceived == nil {
		return 0
	}
	return *t.SolicitsReceived
}

// SetAdvertisementsSent sets the value of the leaf AdvertisementsSent in the Dhcpv6Server_Counters
// struct.
func (t *Dhcpv6Server_Counters) SetAdvertisementsSent(v uint64) {
	t.AdvertisementsSent = &v
}

// SetConfirmsReceived sets the value of the leaf ConfirmsReceived in the Dhcpv6Server_Counters
// struct.
func (t *Dhcpv6Server_Counters) SetConfirmsReceived(v uint64) {
	t.ConfirmsReceived = &v
}

// SetDeclinesReceived sets the value of the leaf DeclinesReceived in the Dhcpv6Server_Counters
// struct.
func (t *Dhcpv6Server_Counters) SetDeclinesReceived(v uint64) {
	t.DeclinesReceived = &v
}

// SetInformationRequestsReceived sets the value of the leaf InformationRequestsReceived in the Dhcpv6Server_Counters
// struct.
func (t *Dhcpv6Server_Counters) SetInformationRequestsReceived(v uint64) {
	t.InformationRequestsReceived = &v
}

// SetNacksSent sets the value of the leaf NacksSent in the Dhcpv6Server_Counters
// struct.
func (t *Dhcpv6Server_Counters) SetNacksSent(v uint64) {
	t.NacksSent = &v
}

// SetRebindsReceived sets the value of the leaf RebindsReceived in the Dhcpv6Server_Counters
// struct.
func (t *Dhcpv6Server_Counters) SetRebindsReceived(v uint64) {
	t.RebindsReceived = &v
}

// SetReconfiguresSent sets the value of the leaf ReconfiguresSent in the Dhcpv6Server_Counters
// struct.
func (t *Dhcpv6Server_Counters) SetReconfiguresSent(v uint64) {
	t.ReconfiguresSent = &v
}

// SetRelayForwardsReceived sets the value of the leaf RelayForwardsReceived in the Dhcpv6Server_Counters
// struct.
func (t *Dhcpv6Server_Counters) SetRelayForwardsReceived(v uint64) {
	t.RelayForwardsReceived = &v
}

// SetRelayRepliesSent sets the value of the leaf RelayRepliesSent in the Dhcpv6Server_Counters
// struct.
func (t *Dhcpv6Server_Counters) SetRelayRepliesSent(v uint64) {
	t.RelayRepliesSent = &v
}

// SetReleasesReceived sets the value of the leaf ReleasesReceived in the Dhcpv6Server_Counters
// struct.
func (t *Dhcpv6Server_Counters) SetReleasesReceived(v uint64) {
	t.ReleasesReceived = &v
}

// SetRenewalsReceived sets the value of the leaf RenewalsReceived in the Dhcpv6Server_Counters
// struct.
func (t *Dhcpv6Server_Counters) SetRenewalsReceived(v uint64) {
	t.RenewalsReceived = &v
}

// SetRepliesSent sets the value of the leaf RepliesSent in the Dhcpv6Server_Counters
// struct.
func (t *Dhcpv6Server_Counters) SetRepliesSent(v uint64) {
	t.RepliesSent = &v
}

// SetRequestsReceived sets the value of the leaf RequestsReceived in the Dhcpv6Server_Counters
// struct.
func (t *Dhcpv6Server_Counters) SetRequestsReceived(v uint64) {
	t.RequestsReceived = &v
}

// SetSolicitsIgnored sets the value of the leaf SolicitsIgnored in the Dhcpv6Server_Counters
// struct.
func (t *Dhcpv6Server_Counters) SetSolicitsIgnored(v uint64) {
	t.SolicitsIgnored = &v
}

// SetSolicitsReceived sets the value of the leaf SolicitsReceived in the Dhcpv6Server_Counters
// struct.
func (t *Dhcpv6Server_Counters) SetSolicitsReceived(v uint64) {
	t.SolicitsReceived = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Dhcpv6Server_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Dhcpv6Server_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Dhcpv6Server_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Dhcpv6Server_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Dhcpv6Server_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Dhcpv6Server_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Dhcpv6Server_Counters.
func (*Dhcpv6Server_Counters) ΛBelongingModule() string {
	return "open-traffic-generator-dhcpv6server"
}

// Dhcpv6Server_Leases represents the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/leases YANG schema element.
type Dhcpv6Server_Leases struct {
	Hosts map[string]*Dhcpv6Server_Leases_Hosts `path:"leases-states/hosts" module:"open-traffic-generator-dhcpv6server/open-traffic-generator-dhcpv6server"`
}

// IsYANGGoStruct ensures that Dhcpv6Server_Leases implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Dhcpv6Server_Leases) IsYANGGoStruct() {}

// NewHosts creates a new entry in the Hosts list of the
// Dhcpv6Server_Leases struct. The keys of the list are populated from the input
// arguments.
func (t *Dhcpv6Server_Leases) NewHosts(Address string) (*Dhcpv6Server_Leases_Hosts, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Hosts == nil {
		t.Hosts = make(map[string]*Dhcpv6Server_Leases_Hosts)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Hosts[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Hosts", key)
	}

	t.Hosts[key] = &Dhcpv6Server_Leases_Hosts{
		Address: &Address,
	}

	return t.Hosts[key], nil
}

// RenameHosts renames an entry in the list Hosts within
// the Dhcpv6Server_Leases struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Dhcpv6Server_Leases) RenameHosts(oldK, newK string) error {
	if _, ok := t.Hosts[newK]; ok {
		return fmt.Errorf("key %v already exists in Hosts", newK)
	}

	e, ok := t.Hosts[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Hosts", oldK)
	}
	e.Address = &newK

	t.Hosts[newK] = e
	delete(t.Hosts, oldK)
	return nil
}

// GetOrCreateHostsMap returns the list (map) from Dhcpv6Server_Leases.
//
// It initializes the field if not already initialized.
func (t *Dhcpv6Server_Leases) GetOrCreateHostsMap() map[string]*Dhcpv6Server_Leases_Hosts {
	if t.Hosts == nil {
		t.Hosts = make(map[string]*Dhcpv6Server_Leases_Hosts)
	}
	return t.Hosts
}

// GetOrCreateHosts retrieves the value with the specified keys from
// the receiver Dhcpv6Server_Leases. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Dhcpv6Server_Leases) GetOrCreateHosts(Address string) *Dhcpv6Server_Leases_Hosts {

	key := Address

	if v, ok := t.Hosts[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHosts(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHosts got unexpected error: %v", err))
	}
	return v
}

// GetHosts retrieves the value with the specified key from
// the Hosts map field of Dhcpv6Server_Leases. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Dhcpv6Server_Leases) GetHosts(Address string) *Dhcpv6Server_Leases_Hosts {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Hosts[key]; ok {
		return lm
	}
	return nil
}

// DeleteHosts deletes the value with the specified keys from
// the receiver Dhcpv6Server_Leases. If there is no such element, the function
// is a no-op.
func (t *Dhcpv6Server_Leases) DeleteHosts(Address string) {
	key := Address

	delete(t.Hosts, key)
}

// AppendHosts appends the supplied Dhcpv6Server_Leases_Hosts struct to the
// list Hosts of Dhcpv6Server_Leases. If the key value(s) specified in
// the supplied Dhcpv6Server_Leases_Hosts already exist in the list, an error is
// returned.
func (t *Dhcpv6Server_Leases) AppendHosts(v *Dhcpv6Server_Leases_Hosts) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Hosts == nil {
		t.Hosts = make(map[string]*Dhcpv6Server_Leases_Hosts)
	}

	if _, ok := t.Hosts[key]; ok {
		return fmt.Errorf("duplicate key for list Hosts %v", key)
	}

	t.Hosts[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Dhcpv6Server_Leases
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Dhcpv6Server_Leases) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Hosts {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Dhcpv6Server_Leases) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Dhcpv6Server_Leases"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Dhcpv6Server_Leases) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Dhcpv6Server_Leases) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Dhcpv6Server_Leases.
func (*Dhcpv6Server_Leases) ΛBelongingModule() string {
	return "open-traffic-generator-dhcpv6server"
}

// Dhcpv6Server_Leases_Hosts represents the /open-traffic-generator-dhcpv6server/dhcpv6-servers/dhcpv6-server/state/leases/leases-states/hosts YANG schema element.
type Dhcpv6Server_Leases_Hosts struct {
	Address       *string `path:"state/address|address" module:"open-traffic-generator-dhcpv6server/open-traffic-generator-dhcpv6server|open-traffic-generator-dhcpv6server" shadow-path:"address" shadow-module:"open-traffic-generator-dhcpv6server"`
	ClientId      *string `path:"state/client-id" module:"open-traffic-generator-dhcpv6server/open-traffic-generator-dhcpv6server"`
	InterfaceId   *string `path:"state/interface-id" module:"open-traffic-generator-dhcpv6server/open-traffic-generator-dhcpv6server"`
	PreferredTime *uint32 `path:"state/preferred-time" module:"open-traffic-generator-dhcpv6server/open-traffic-generator-dhcpv6server"`
	RebindTime    *uint32 `path:"state/rebind-time" module:"open-traffic-generator-dhcpv6server/open-traffic-generator-dhcpv6server"`
	RemoteId      *string `path:"state/remote-id" module:"open-traffic-generator-dhcpv6server/open-traffic-generator-dhcpv6server"`
	RenewTime     *uint32 `path:"state/renew-time" module:"open-traffic-generator-dhcpv6server/open-traffic-generator-dhcpv6server"`
	ValidTime     *uint32 `path:"state/valid-time" module:"open-traffic-generator-dhcpv6server/open-traffic-generator-dhcpv6server"`
}

// IsYANGGoStruct ensures that Dhcpv6Server_Leases_Hosts implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Dhcpv6Server_Leases_Hosts) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the Dhcpv6Server_Leases_Hosts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *Dhcpv6Server_Leases_Hosts) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetClientId retrieves the value of the leaf ClientId from the Dhcpv6Server_Leases_Hosts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientId is set, it can
// safely use t.GetClientId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientId == nil' before retrieving the leaf's value.
func (t *Dhcpv6Server_Leases_Hosts) GetClientId() string {
	if t == nil || t.ClientId == nil {
		return ""
	}
	return *t.ClientId
}

// GetInterfaceId retrieves the value of the leaf InterfaceId from the Dhcpv6Server_Leases_Hosts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceId is set, it can
// safely use t.GetInterfaceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceId == nil' before retrieving the leaf's value.
func (t *Dhcpv6Server_Leases_Hosts) GetInterfaceId() string {
	if t == nil || t.InterfaceId == nil {
		return ""
	}
	return *t.InterfaceId
}

// GetPreferredTime retrieves the value of the leaf PreferredTime from the Dhcpv6Server_Leases_Hosts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferredTime is set, it can
// safely use t.GetPreferredTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferredTime == nil' before retrieving the leaf's value.
func (t *Dhcpv6Server_Leases_Hosts) GetPreferredTime() uint32 {
	if t == nil || t.PreferredTime == nil {
		return 0
	}
	return *t.PreferredTime
}

// GetRebindTime retrieves the value of the leaf RebindTime from the Dhcpv6Server_Leases_Hosts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RebindTime is set, it can
// safely use t.GetRebindTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RebindTime == nil' before retrieving the leaf's value.
func (t *Dhcpv6Server_Leases_Hosts) GetRebindTime() uint32 {
	if t == nil || t.RebindTime == nil {
		return 0
	}
	return *t.RebindTime
}

// GetRemoteId retrieves the value of the leaf RemoteId from the Dhcpv6Server_Leases_Hosts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteId is set, it can
// safely use t.GetRemoteId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteId == nil' before retrieving the leaf's value.
func (t *Dhcpv6Server_Leases_Hosts) GetRemoteId() string {
	if t == nil || t.RemoteId == nil {
		return ""
	}
	return *t.RemoteId
}

// GetRenewTime retrieves the value of the leaf RenewTime from the Dhcpv6Server_Leases_Hosts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RenewTime is set, it can
// safely use t.GetRenewTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RenewTime == nil' before retrieving the leaf's value.
func (t *Dhcpv6Server_Leases_Hosts) GetRenewTime() uint32 {
	if t == nil || t.RenewTime == nil {
		return 0
	}
	return *t.RenewTime
}

// GetValidTime retrieves the value of the leaf ValidTime from the Dhcpv6Server_Leases_Hosts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidTime is set, it can
// safely use t.GetValidTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidTime == nil' before retrieving the leaf's value.
func (t *Dhcpv6Server_Leases_Hosts) GetValidTime() uint32 {
	if t == nil || t.ValidTime == nil {
		return 0
	}
	return *t.ValidTime
}

// SetAddress sets the value of the leaf Address in the Dhcpv6Server_Leases_Hosts
// struct.
func (t *Dhcpv6Server_Leases_Hosts) SetAddress(v string) {
	t.Address = &v
}

// SetClientId sets the value of the leaf ClientId in the Dhcpv6Server_Leases_Hosts
// struct.
func (t *Dhcpv6Server_Leases_Hosts) SetClientId(v string) {
	t.ClientId = &v
}

// SetInterfaceId sets the value of the leaf InterfaceId in the Dhcpv6Server_Leases_Hosts
// struct.
func (t *Dhcpv6Server_Leases_Hosts) SetInterfaceId(v string) {
	t.InterfaceId = &v
}

// SetPreferredTime sets the value of the leaf PreferredTime in the Dhcpv6Server_Leases_Hosts
// struct.
func (t *Dhcpv6Server_Leases_Hosts) SetPreferredTime(v uint32) {
	t.PreferredTime = &v
}

// SetRebindTime sets the value of the leaf RebindTime in the Dhcpv6Server_Leases_Hosts
// struct.
func (t *Dhcpv6Server_Leases_Hosts) SetRebindTime(v uint32) {
	t.RebindTime = &v
}

// SetRemoteId sets the value of the leaf RemoteId in the Dhcpv6Server_Leases_Hosts
// struct.
func (t *Dhcpv6Server_Leases_Hosts) SetRemoteId(v string) {
	t.RemoteId = &v
}

// SetRenewTime sets the value of the leaf RenewTime in the Dhcpv6Server_Leases_Hosts
// struct.
func (t *Dhcpv6Server_Leases_Hosts) SetRenewTime(v uint32) {
	t.RenewTime = &v
}

// SetValidTime sets the value of the leaf ValidTime in the Dhcpv6Server_Leases_Hosts
// struct.
func (t *Dhcpv6Server_Leases_Hosts) SetValidTime(v uint32) {
	t.ValidTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Dhcpv6Server_Leases_Hosts
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Dhcpv6Server_Leases_Hosts) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Dhcpv6Server_Leases_Hosts struct, which is a YANG list entry.
func (t *Dhcpv6Server_Leases_Hosts) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Dhcpv6Server_Leases_Hosts) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Dhcpv6Server_Leases_Hosts"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Dhcpv6Server_Leases_Hosts) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Dhcpv6Server_Leases_Hosts) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Dhcpv6Server_Leases_Hosts.
func (*Dhcpv6Server_Leases_Hosts) ΛBelongingModule() string {
	return "open-traffic-generator-dhcpv6server"
}

// Flow represents the /open-traffic-generator-flow/flows/flow YANG schema element.
type Flow struct {
	AverageLatency *uint64                       `path:"state/average-latency" module:"open-traffic-generator-flow/open-traffic-generator-flow"`
	Counters       *Flow_Counters                `path:"state/counters" module:"open-traffic-generator-flow/open-traffic-generator-flow"`
	FirstTimestamp *float64                      `path:"state/first-timestamp" module:"open-traffic-generator-flow/open-traffic-generator-flow"`
	InFrameRate    Binary                        `path:"state/in-frame-rate" module:"open-traffic-generator-flow/open-traffic-generator-flow"`
	InL1Rate       Binary                        `path:"state/in-l1-rate" module:"open-traffic-generator-flow/open-traffic-generator-flow"`
	InRate         Binary                        `path:"state/in-rate" module:"open-traffic-generator-flow/open-traffic-generator-flow"`
	LastTimestamp  *float64                      `path:"state/last-timestamp" module:"open-traffic-generator-flow/open-traffic-generator-flow"`
	LossPct        Binary                        `path:"state/loss-pct" module:"open-traffic-generator-flow/open-traffic-generator-flow"`
	MaximumLatency *uint64                       `path:"state/maximum-latency" module:"open-traffic-generator-flow/open-traffic-generator-flow"`
	MinimumLatency *uint64                       `path:"state/minimum-latency" module:"open-traffic-generator-flow/open-traffic-generator-flow"`
	Name           *string                       `path:"state/name|name" module:"open-traffic-generator-flow/open-traffic-generator-flow|open-traffic-generator-flow" shadow-path:"name" shadow-module:"open-traffic-generator-flow"`
	OutFrameRate   Binary                        `path:"state/out-frame-rate" module:"open-traffic-generator-flow/open-traffic-generator-flow"`
	OutL1Rate      Binary                        `path:"state/out-l1-rate" module:"open-traffic-generator-flow/open-traffic-generator-flow"`
	OutRate        Binary                        `path:"state/out-rate" module:"open-traffic-generator-flow/open-traffic-generator-flow"`
	TaggedMetric   map[string]*Flow_TaggedMetric `path:"tagged-metrics/tagged-metric" module:"open-traffic-generator-flow/open-traffic-generator-flow"`
	Transmit       *bool                         `path:"state/transmit" module:"open-traffic-generator-flow/open-traffic-generator-flow"`
}

// IsYANGGoStruct ensures that Flow implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Flow) IsYANGGoStruct() {}

// NewTaggedMetric creates a new entry in the TaggedMetric list of the
// Flow struct. The keys of the list are populated from the input
// arguments.
func (t *Flow) NewTaggedMetric(NameValuePairs string) (*Flow_TaggedMetric, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TaggedMetric == nil {
		t.TaggedMetric = make(map[string]*Flow_TaggedMetric)
	}

	key := NameValuePairs

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TaggedMetric[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TaggedMetric", key)
	}

	t.TaggedMetric[key] = &Flow_TaggedMetric{
		NameValuePairs: &NameValuePairs,
	}

	return t.TaggedMetric[key], nil
}

// RenameTaggedMetric renames an entry in the list TaggedMetric within
// the Flow struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Flow) RenameTaggedMetric(oldK, newK string) error {
	if _, ok := t.TaggedMetric[newK]; ok {
		return fmt.Errorf("key %v already exists in TaggedMetric", newK)
	}

	e, ok := t.TaggedMetric[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TaggedMetric", oldK)
	}
	e.NameValuePairs = &newK

	t.TaggedMetric[newK] = e
	delete(t.TaggedMetric, oldK)
	return nil
}

// GetOrCreateTaggedMetricMap returns the list (map) from Flow.
//
// It initializes the field if not already initialized.
func (t *Flow) GetOrCreateTaggedMetricMap() map[string]*Flow_TaggedMetric {
	if t.TaggedMetric == nil {
		t.TaggedMetric = make(map[string]*Flow_TaggedMetric)
	}
	return t.TaggedMetric
}

// GetOrCreateTaggedMetric retrieves the value with the specified keys from
// the receiver Flow. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Flow) GetOrCreateTaggedMetric(NameValuePairs string) *Flow_TaggedMetric {

	key := NameValuePairs

	if v, ok := t.TaggedMetric[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTaggedMetric(NameValuePairs)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTaggedMetric got unexpected error: %v", err))
	}
	return v
}

// GetTaggedMetric retrieves the value with the specified key from
// the TaggedMetric map field of Flow. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Flow) GetTaggedMetric(NameValuePairs string) *Flow_TaggedMetric {

	if t == nil {
		return nil
	}

	key := NameValuePairs

	if lm, ok := t.TaggedMetric[key]; ok {
		return lm
	}
	return nil
}

// DeleteTaggedMetric deletes the value with the specified keys from
// the receiver Flow. If there is no such element, the function
// is a no-op.
func (t *Flow) DeleteTaggedMetric(NameValuePairs string) {
	key := NameValuePairs

	delete(t.TaggedMetric, key)
}

// AppendTaggedMetric appends the supplied Flow_TaggedMetric struct to the
// list TaggedMetric of Flow. If the key value(s) specified in
// the supplied Flow_TaggedMetric already exist in the list, an error is
// returned.
func (t *Flow) AppendTaggedMetric(v *Flow_TaggedMetric) error {
	if v.NameValuePairs == nil {
		return fmt.Errorf("invalid nil key received for NameValuePairs")
	}

	key := *v.NameValuePairs

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TaggedMetric == nil {
		t.TaggedMetric = make(map[string]*Flow_TaggedMetric)
	}

	if _, ok := t.TaggedMetric[key]; ok {
		return fmt.Errorf("duplicate key for list TaggedMetric %v", key)
	}

	t.TaggedMetric[key] = v
	return nil
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Flow) GetOrCreateCounters() *Flow_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Flow_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from Flow. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Flow) GetCounters() *Flow_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetAverageLatency retrieves the value of the leaf AverageLatency from the Flow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AverageLatency is set, it can
// safely use t.GetAverageLatency() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AverageLatency == nil' before retrieving the leaf's value.
func (t *Flow) GetAverageLatency() uint64 {
	if t == nil || t.AverageLatency == nil {
		return 0
	}
	return *t.AverageLatency
}

// GetFirstTimestamp retrieves the value of the leaf FirstTimestamp from the Flow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FirstTimestamp is set, it can
// safely use t.GetFirstTimestamp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FirstTimestamp == nil' before retrieving the leaf's value.
func (t *Flow) GetFirstTimestamp() float64 {
	if t == nil || t.FirstTimestamp == nil {
		return 0.0
	}
	return *t.FirstTimestamp
}

// GetInFrameRate retrieves the value of the leaf InFrameRate from the Flow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InFrameRate is set, it can
// safely use t.GetInFrameRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InFrameRate == nil' before retrieving the leaf's value.
func (t *Flow) GetInFrameRate() Binary {
	if t == nil || t.InFrameRate == nil {
		return nil
	}
	return t.InFrameRate
}

// GetInL1Rate retrieves the value of the leaf InL1Rate from the Flow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InL1Rate is set, it can
// safely use t.GetInL1Rate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InL1Rate == nil' before retrieving the leaf's value.
func (t *Flow) GetInL1Rate() Binary {
	if t == nil || t.InL1Rate == nil {
		return nil
	}
	return t.InL1Rate
}

// GetInRate retrieves the value of the leaf InRate from the Flow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InRate is set, it can
// safely use t.GetInRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InRate == nil' before retrieving the leaf's value.
func (t *Flow) GetInRate() Binary {
	if t == nil || t.InRate == nil {
		return nil
	}
	return t.InRate
}

// GetLastTimestamp retrieves the value of the leaf LastTimestamp from the Flow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastTimestamp is set, it can
// safely use t.GetLastTimestamp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastTimestamp == nil' before retrieving the leaf's value.
func (t *Flow) GetLastTimestamp() float64 {
	if t == nil || t.LastTimestamp == nil {
		return 0.0
	}
	return *t.LastTimestamp
}

// GetLossPct retrieves the value of the leaf LossPct from the Flow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LossPct is set, it can
// safely use t.GetLossPct() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LossPct == nil' before retrieving the leaf's value.
func (t *Flow) GetLossPct() Binary {
	if t == nil || t.LossPct == nil {
		return nil
	}
	return t.LossPct
}

// GetMaximumLatency retrieves the value of the leaf MaximumLatency from the Flow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumLatency is set, it can
// safely use t.GetMaximumLatency() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumLatency == nil' before retrieving the leaf's value.
func (t *Flow) GetMaximumLatency() uint64 {
	if t == nil || t.MaximumLatency == nil {
		return 0
	}
	return *t.MaximumLatency
}

// GetMinimumLatency retrieves the value of the leaf MinimumLatency from the Flow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinimumLatency is set, it can
// safely use t.GetMinimumLatency() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinimumLatency == nil' before retrieving the leaf's value.
func (t *Flow) GetMinimumLatency() uint64 {
	if t == nil || t.MinimumLatency == nil {
		return 0
	}
	return *t.MinimumLatency
}

// GetName retrieves the value of the leaf Name from the Flow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Flow) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOutFrameRate retrieves the value of the leaf OutFrameRate from the Flow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutFrameRate is set, it can
// safely use t.GetOutFrameRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutFrameRate == nil' before retrieving the leaf's value.
func (t *Flow) GetOutFrameRate() Binary {
	if t == nil || t.OutFrameRate == nil {
		return nil
	}
	return t.OutFrameRate
}

// GetOutL1Rate retrieves the value of the leaf OutL1Rate from the Flow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutL1Rate is set, it can
// safely use t.GetOutL1Rate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutL1Rate == nil' before retrieving the leaf's value.
func (t *Flow) GetOutL1Rate() Binary {
	if t == nil || t.OutL1Rate == nil {
		return nil
	}
	return t.OutL1Rate
}

// GetOutRate retrieves the value of the leaf OutRate from the Flow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutRate is set, it can
// safely use t.GetOutRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutRate == nil' before retrieving the leaf's value.
func (t *Flow) GetOutRate() Binary {
	if t == nil || t.OutRate == nil {
		return nil
	}
	return t.OutRate
}

// GetTransmit retrieves the value of the leaf Transmit from the Flow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transmit is set, it can
// safely use t.GetTransmit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transmit == nil' before retrieving the leaf's value.
func (t *Flow) GetTransmit() bool {
	if t == nil || t.Transmit == nil {
		return false
	}
	return *t.Transmit
}

// SetAverageLatency sets the value of the leaf AverageLatency in the Flow
// struct.
func (t *Flow) SetAverageLatency(v uint64) {
	t.AverageLatency = &v
}

// SetFirstTimestamp sets the value of the leaf FirstTimestamp in the Flow
// struct.
func (t *Flow) SetFirstTimestamp(v float64) {
	t.FirstTimestamp = &v
}

// SetInFrameRate sets the value of the leaf InFrameRate in the Flow
// struct.
func (t *Flow) SetInFrameRate(v Binary) {
	t.InFrameRate = v
}

// SetInL1Rate sets the value of the leaf InL1Rate in the Flow
// struct.
func (t *Flow) SetInL1Rate(v Binary) {
	t.InL1Rate = v
}

// SetInRate sets the value of the leaf InRate in the Flow
// struct.
func (t *Flow) SetInRate(v Binary) {
	t.InRate = v
}

// SetLastTimestamp sets the value of the leaf LastTimestamp in the Flow
// struct.
func (t *Flow) SetLastTimestamp(v float64) {
	t.LastTimestamp = &v
}

// SetLossPct sets the value of the leaf LossPct in the Flow
// struct.
func (t *Flow) SetLossPct(v Binary) {
	t.LossPct = v
}

// SetMaximumLatency sets the value of the leaf MaximumLatency in the Flow
// struct.
func (t *Flow) SetMaximumLatency(v uint64) {
	t.MaximumLatency = &v
}

// SetMinimumLatency sets the value of the leaf MinimumLatency in the Flow
// struct.
func (t *Flow) SetMinimumLatency(v uint64) {
	t.MinimumLatency = &v
}

// SetName sets the value of the leaf Name in the Flow
// struct.
func (t *Flow) SetName(v string) {
	t.Name = &v
}

// SetOutFrameRate sets the value of the leaf OutFrameRate in the Flow
// struct.
func (t *Flow) SetOutFrameRate(v Binary) {
	t.OutFrameRate = v
}

// SetOutL1Rate sets the value of the leaf OutL1Rate in the Flow
// struct.
func (t *Flow) SetOutL1Rate(v Binary) {
	t.OutL1Rate = v
}

// SetOutRate sets the value of the leaf OutRate in the Flow
// struct.
func (t *Flow) SetOutRate(v Binary) {
	t.OutRate = v
}

// SetTransmit sets the value of the leaf Transmit in the Flow
// struct.
func (t *Flow) SetTransmit(v bool) {
	t.Transmit = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Flow
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Flow) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Counters.PopulateDefaults()
	for _, e := range t.TaggedMetric {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the Flow struct, which is a YANG list entry.
func (t *Flow) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Flow) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Flow"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Flow) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Flow) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Flow.
func (*Flow) ΛBelongingModule() string {
	return "open-traffic-generator-flow"
}

// Flow_Counters represents the /open-traffic-generator-flow/flows/flow/state/counters YANG schema element.
type Flow_Counters struct {
	InOctets  *uint64 `path:"in-octets" module:"open-traffic-generator-flow"`
	InPkts    *uint64 `path:"in-pkts" module:"open-traffic-generator-flow"`
	OutOctets *uint64 `path:"out-octets" module:"open-traffic-generator-flow"`
	OutPkts   *uint64 `path:"out-pkts" module:"open-traffic-generator-flow"`
}

// IsYANGGoStruct ensures that Flow_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Flow_Counters) IsYANGGoStruct() {}

// GetInOctets retrieves the value of the leaf InOctets from the Flow_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InOctets is set, it can
// safely use t.GetInOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InOctets == nil' before retrieving the leaf's value.
func (t *Flow_Counters) GetInOctets() uint64 {
	if t == nil || t.InOctets == nil {
		return 0
	}
	return *t.InOctets
}

// GetInPkts retrieves the value of the leaf InPkts from the Flow_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InPkts is set, it can
// safely use t.GetInPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InPkts == nil' before retrieving the leaf's value.
func (t *Flow_Counters) GetInPkts() uint64 {
	if t == nil || t.InPkts == nil {
		return 0
	}
	return *t.InPkts
}

// GetOutOctets retrieves the value of the leaf OutOctets from the Flow_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutOctets is set, it can
// safely use t.GetOutOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutOctets == nil' before retrieving the leaf's value.
func (t *Flow_Counters) GetOutOctets() uint64 {
	if t == nil || t.OutOctets == nil {
		return 0
	}
	return *t.OutOctets
}

// GetOutPkts retrieves the value of the leaf OutPkts from the Flow_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutPkts is set, it can
// safely use t.GetOutPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutPkts == nil' before retrieving the leaf's value.
func (t *Flow_Counters) GetOutPkts() uint64 {
	if t == nil || t.OutPkts == nil {
		return 0
	}
	return *t.OutPkts
}

// SetInOctets sets the value of the leaf InOctets in the Flow_Counters
// struct.
func (t *Flow_Counters) SetInOctets(v uint64) {
	t.InOctets = &v
}

// SetInPkts sets the value of the leaf InPkts in the Flow_Counters
// struct.
func (t *Flow_Counters) SetInPkts(v uint64) {
	t.InPkts = &v
}

// SetOutOctets sets the value of the leaf OutOctets in the Flow_Counters
// struct.
func (t *Flow_Counters) SetOutOctets(v uint64) {
	t.OutOctets = &v
}

// SetOutPkts sets the value of the leaf OutPkts in the Flow_Counters
// struct.
func (t *Flow_Counters) SetOutPkts(v uint64) {
	t.OutPkts = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Flow_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Flow_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Flow_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Flow_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Flow_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Flow_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Flow_Counters.
func (*Flow_Counters) ΛBelongingModule() string {
	return "open-traffic-generator-flow"
}

// Flow_TaggedMetric represents the /open-traffic-generator-flow/flows/flow/tagged-metrics/tagged-metric YANG schema element.
type Flow_TaggedMetric struct {
	Counters       *Flow_TaggedMetric_Counters `path:"state/counters" module:"open-traffic-generator-flow/open-traffic-generator-flow"`
	NameValuePairs *string                     `path:"state/name-value-pairs|name-value-pairs" module:"open-traffic-generator-flow/open-traffic-generator-flow|open-traffic-generator-flow" shadow-path:"name-value-pairs" shadow-module:"open-traffic-generator-flow"`
	Tags           []*Flow_TaggedMetric_Tags   `path:"state/tags" module:"open-traffic-generator-flow/open-traffic-generator-flow"`
}

// IsYANGGoStruct ensures that Flow_TaggedMetric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Flow_TaggedMetric) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Flow_TaggedMetric) GetOrCreateCounters() *Flow_TaggedMetric_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Flow_TaggedMetric_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from Flow_TaggedMetric. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Flow_TaggedMetric) GetCounters() *Flow_TaggedMetric_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetNameValuePairs retrieves the value of the leaf NameValuePairs from the Flow_TaggedMetric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NameValuePairs is set, it can
// safely use t.GetNameValuePairs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NameValuePairs == nil' before retrieving the leaf's value.
func (t *Flow_TaggedMetric) GetNameValuePairs() string {
	if t == nil || t.NameValuePairs == nil {
		return ""
	}
	return *t.NameValuePairs
}

// SetNameValuePairs sets the value of the leaf NameValuePairs in the Flow_TaggedMetric
// struct.
func (t *Flow_TaggedMetric) SetNameValuePairs(v string) {
	t.NameValuePairs = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Flow_TaggedMetric
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Flow_TaggedMetric) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Counters.PopulateDefaults()
	for _, e := range t.Tags {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the Flow_TaggedMetric struct, which is a YANG list entry.
func (t *Flow_TaggedMetric) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NameValuePairs == nil {
		return nil, fmt.Errorf("nil value for key NameValuePairs")
	}

	return map[string]interface{}{
		"name-value-pairs": *t.NameValuePairs,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Flow_TaggedMetric) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Flow_TaggedMetric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Flow_TaggedMetric) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Flow_TaggedMetric) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Flow_TaggedMetric.
func (*Flow_TaggedMetric) ΛBelongingModule() string {
	return "open-traffic-generator-flow"
}

// Flow_TaggedMetric_Counters represents the /open-traffic-generator-flow/flows/flow/tagged-metrics/tagged-metric/state/counters YANG schema element.
type Flow_TaggedMetric_Counters struct {
	InOctets  *uint64 `path:"in-octets" module:"open-traffic-generator-flow"`
	InPkts    *uint64 `path:"in-pkts" module:"open-traffic-generator-flow"`
	OutOctets *uint64 `path:"out-octets" module:"open-traffic-generator-flow"`
	OutPkts   *uint64 `path:"out-pkts" module:"open-traffic-generator-flow"`
}

// IsYANGGoStruct ensures that Flow_TaggedMetric_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Flow_TaggedMetric_Counters) IsYANGGoStruct() {}

// GetInOctets retrieves the value of the leaf InOctets from the Flow_TaggedMetric_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InOctets is set, it can
// safely use t.GetInOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InOctets == nil' before retrieving the leaf's value.
func (t *Flow_TaggedMetric_Counters) GetInOctets() uint64 {
	if t == nil || t.InOctets == nil {
		return 0
	}
	return *t.InOctets
}

// GetInPkts retrieves the value of the leaf InPkts from the Flow_TaggedMetric_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InPkts is set, it can
// safely use t.GetInPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InPkts == nil' before retrieving the leaf's value.
func (t *Flow_TaggedMetric_Counters) GetInPkts() uint64 {
	if t == nil || t.InPkts == nil {
		return 0
	}
	return *t.InPkts
}

// GetOutOctets retrieves the value of the leaf OutOctets from the Flow_TaggedMetric_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutOctets is set, it can
// safely use t.GetOutOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutOctets == nil' before retrieving the leaf's value.
func (t *Flow_TaggedMetric_Counters) GetOutOctets() uint64 {
	if t == nil || t.OutOctets == nil {
		return 0
	}
	return *t.OutOctets
}

// GetOutPkts retrieves the value of the leaf OutPkts from the Flow_TaggedMetric_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutPkts is set, it can
// safely use t.GetOutPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutPkts == nil' before retrieving the leaf's value.
func (t *Flow_TaggedMetric_Counters) GetOutPkts() uint64 {
	if t == nil || t.OutPkts == nil {
		return 0
	}
	return *t.OutPkts
}

// SetInOctets sets the value of the leaf InOctets in the Flow_TaggedMetric_Counters
// struct.
func (t *Flow_TaggedMetric_Counters) SetInOctets(v uint64) {
	t.InOctets = &v
}

// SetInPkts sets the value of the leaf InPkts in the Flow_TaggedMetric_Counters
// struct.
func (t *Flow_TaggedMetric_Counters) SetInPkts(v uint64) {
	t.InPkts = &v
}

// SetOutOctets sets the value of the leaf OutOctets in the Flow_TaggedMetric_Counters
// struct.
func (t *Flow_TaggedMetric_Counters) SetOutOctets(v uint64) {
	t.OutOctets = &v
}

// SetOutPkts sets the value of the leaf OutPkts in the Flow_TaggedMetric_Counters
// struct.
func (t *Flow_TaggedMetric_Counters) SetOutPkts(v uint64) {
	t.OutPkts = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Flow_TaggedMetric_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Flow_TaggedMetric_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Flow_TaggedMetric_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Flow_TaggedMetric_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Flow_TaggedMetric_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Flow_TaggedMetric_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Flow_TaggedMetric_Counters.
func (*Flow_TaggedMetric_Counters) ΛBelongingModule() string {
	return "open-traffic-generator-flow"
}

// Flow_TaggedMetric_Tags represents the /open-traffic-generator-flow/flows/flow/tagged-metrics/tagged-metric/state/tags YANG schema element.
type Flow_TaggedMetric_Tags struct {
	TagName  *string                          `path:"tag-name" module:"open-traffic-generator-flow"`
	TagValue *Flow_TaggedMetric_Tags_TagValue `path:"tag-value" module:"open-traffic-generator-flow"`
}

// IsYANGGoStruct ensures that Flow_TaggedMetric_Tags implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Flow_TaggedMetric_Tags) IsYANGGoStruct() {}

// GetOrCreateTagValue retrieves the value of the TagValue field
// or returns the existing field if it already exists.
func (t *Flow_TaggedMetric_Tags) GetOrCreateTagValue() *Flow_TaggedMetric_Tags_TagValue {
	if t.TagValue != nil {
		return t.TagValue
	}
	t.TagValue = &Flow_TaggedMetric_Tags_TagValue{}
	return t.TagValue
}

// GetTagValue returns the value of the TagValue struct pointer
// from Flow_TaggedMetric_Tags. If the receiver or the field TagValue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Flow_TaggedMetric_Tags) GetTagValue() *Flow_TaggedMetric_Tags_TagValue {
	if t != nil && t.TagValue != nil {
		return t.TagValue
	}
	return nil
}

// GetTagName retrieves the value of the leaf TagName from the Flow_TaggedMetric_Tags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TagName is set, it can
// safely use t.GetTagName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TagName == nil' before retrieving the leaf's value.
func (t *Flow_TaggedMetric_Tags) GetTagName() string {
	if t == nil || t.TagName == nil {
		return ""
	}
	return *t.TagName
}

// SetTagName sets the value of the leaf TagName in the Flow_TaggedMetric_Tags
// struct.
func (t *Flow_TaggedMetric_Tags) SetTagName(v string) {
	t.TagName = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Flow_TaggedMetric_Tags
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Flow_TaggedMetric_Tags) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.TagValue.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Flow_TaggedMetric_Tags) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Flow_TaggedMetric_Tags"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Flow_TaggedMetric_Tags) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Flow_TaggedMetric_Tags) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Flow_TaggedMetric_Tags.
func (*Flow_TaggedMetric_Tags) ΛBelongingModule() string {
	return "open-traffic-generator-flow"
}

// Flow_TaggedMetric_Tags_TagValue represents the /open-traffic-generator-flow/flows/flow/tagged-metrics/tagged-metric/state/tags/tag-value YANG schema element.
type Flow_TaggedMetric_Tags_TagValue struct {
	ValueAsBool      *bool            `path:"value-as-bool" module:"open-traffic-generator-flow"`
	ValueAsCounter64 *uint64          `path:"value-as-counter64" module:"open-traffic-generator-flow"`
	ValueAsFloat32   Binary           `path:"value-as-float32" module:"open-traffic-generator-flow"`
	ValueAsHex       *string          `path:"value-as-hex" module:"open-traffic-generator-flow"`
	ValueAsIpv4      *string          `path:"value-as-ipv4" module:"open-traffic-generator-flow"`
	ValueAsIpv6      *string          `path:"value-as-ipv6" module:"open-traffic-generator-flow"`
	ValueAsMac       *string          `path:"value-as-mac" module:"open-traffic-generator-flow"`
	ValueAsString    *string          `path:"value-as-string" module:"open-traffic-generator-flow"`
	ValueType        E_Tags_ValueType `path:"value-type" module:"open-traffic-generator-flow"`
}

// IsYANGGoStruct ensures that Flow_TaggedMetric_Tags_TagValue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Flow_TaggedMetric_Tags_TagValue) IsYANGGoStruct() {}

// GetValueAsBool retrieves the value of the leaf ValueAsBool from the Flow_TaggedMetric_Tags_TagValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValueAsBool is set, it can
// safely use t.GetValueAsBool() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValueAsBool == nil' before retrieving the leaf's value.
func (t *Flow_TaggedMetric_Tags_TagValue) GetValueAsBool() bool {
	if t == nil || t.ValueAsBool == nil {
		return false
	}
	return *t.ValueAsBool
}

// GetValueAsCounter64 retrieves the value of the leaf ValueAsCounter64 from the Flow_TaggedMetric_Tags_TagValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValueAsCounter64 is set, it can
// safely use t.GetValueAsCounter64() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValueAsCounter64 == nil' before retrieving the leaf's value.
func (t *Flow_TaggedMetric_Tags_TagValue) GetValueAsCounter64() uint64 {
	if t == nil || t.ValueAsCounter64 == nil {
		return 0
	}
	return *t.ValueAsCounter64
}

// GetValueAsFloat32 retrieves the value of the leaf ValueAsFloat32 from the Flow_TaggedMetric_Tags_TagValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValueAsFloat32 is set, it can
// safely use t.GetValueAsFloat32() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValueAsFloat32 == nil' before retrieving the leaf's value.
func (t *Flow_TaggedMetric_Tags_TagValue) GetValueAsFloat32() Binary {
	if t == nil || t.ValueAsFloat32 == nil {
		return nil
	}
	return t.ValueAsFloat32
}

// GetValueAsHex retrieves the value of the leaf ValueAsHex from the Flow_TaggedMetric_Tags_TagValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValueAsHex is set, it can
// safely use t.GetValueAsHex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValueAsHex == nil' before retrieving the leaf's value.
func (t *Flow_TaggedMetric_Tags_TagValue) GetValueAsHex() string {
	if t == nil || t.ValueAsHex == nil {
		return ""
	}
	return *t.ValueAsHex
}

// GetValueAsIpv4 retrieves the value of the leaf ValueAsIpv4 from the Flow_TaggedMetric_Tags_TagValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValueAsIpv4 is set, it can
// safely use t.GetValueAsIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValueAsIpv4 == nil' before retrieving the leaf's value.
func (t *Flow_TaggedMetric_Tags_TagValue) GetValueAsIpv4() string {
	if t == nil || t.ValueAsIpv4 == nil {
		return ""
	}
	return *t.ValueAsIpv4
}

// GetValueAsIpv6 retrieves the value of the leaf ValueAsIpv6 from the Flow_TaggedMetric_Tags_TagValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValueAsIpv6 is set, it can
// safely use t.GetValueAsIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValueAsIpv6 == nil' before retrieving the leaf's value.
func (t *Flow_TaggedMetric_Tags_TagValue) GetValueAsIpv6() string {
	if t == nil || t.ValueAsIpv6 == nil {
		return ""
	}
	return *t.ValueAsIpv6
}

// GetValueAsMac retrieves the value of the leaf ValueAsMac from the Flow_TaggedMetric_Tags_TagValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValueAsMac is set, it can
// safely use t.GetValueAsMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValueAsMac == nil' before retrieving the leaf's value.
func (t *Flow_TaggedMetric_Tags_TagValue) GetValueAsMac() string {
	if t == nil || t.ValueAsMac == nil {
		return ""
	}
	return *t.ValueAsMac
}

// GetValueAsString retrieves the value of the leaf ValueAsString from the Flow_TaggedMetric_Tags_TagValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValueAsString is set, it can
// safely use t.GetValueAsString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValueAsString == nil' before retrieving the leaf's value.
func (t *Flow_TaggedMetric_Tags_TagValue) GetValueAsString() string {
	if t == nil || t.ValueAsString == nil {
		return ""
	}
	return *t.ValueAsString
}

// GetValueType retrieves the value of the leaf ValueType from the Flow_TaggedMetric_Tags_TagValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValueType is set, it can
// safely use t.GetValueType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValueType == nil' before retrieving the leaf's value.
func (t *Flow_TaggedMetric_Tags_TagValue) GetValueType() E_Tags_ValueType {
	if t == nil || t.ValueType == 0 {
		return 0
	}
	return t.ValueType
}

// SetValueAsBool sets the value of the leaf ValueAsBool in the Flow_TaggedMetric_Tags_TagValue
// struct.
func (t *Flow_TaggedMetric_Tags_TagValue) SetValueAsBool(v bool) {
	t.ValueAsBool = &v
}

// SetValueAsCounter64 sets the value of the leaf ValueAsCounter64 in the Flow_TaggedMetric_Tags_TagValue
// struct.
func (t *Flow_TaggedMetric_Tags_TagValue) SetValueAsCounter64(v uint64) {
	t.ValueAsCounter64 = &v
}

// SetValueAsFloat32 sets the value of the leaf ValueAsFloat32 in the Flow_TaggedMetric_Tags_TagValue
// struct.
func (t *Flow_TaggedMetric_Tags_TagValue) SetValueAsFloat32(v Binary) {
	t.ValueAsFloat32 = v
}

// SetValueAsHex sets the value of the leaf ValueAsHex in the Flow_TaggedMetric_Tags_TagValue
// struct.
func (t *Flow_TaggedMetric_Tags_TagValue) SetValueAsHex(v string) {
	t.ValueAsHex = &v
}

// SetValueAsIpv4 sets the value of the leaf ValueAsIpv4 in the Flow_TaggedMetric_Tags_TagValue
// struct.
func (t *Flow_TaggedMetric_Tags_TagValue) SetValueAsIpv4(v string) {
	t.ValueAsIpv4 = &v
}

// SetValueAsIpv6 sets the value of the leaf ValueAsIpv6 in the Flow_TaggedMetric_Tags_TagValue
// struct.
func (t *Flow_TaggedMetric_Tags_TagValue) SetValueAsIpv6(v string) {
	t.ValueAsIpv6 = &v
}

// SetValueAsMac sets the value of the leaf ValueAsMac in the Flow_TaggedMetric_Tags_TagValue
// struct.
func (t *Flow_TaggedMetric_Tags_TagValue) SetValueAsMac(v string) {
	t.ValueAsMac = &v
}

// SetValueAsString sets the value of the leaf ValueAsString in the Flow_TaggedMetric_Tags_TagValue
// struct.
func (t *Flow_TaggedMetric_Tags_TagValue) SetValueAsString(v string) {
	t.ValueAsString = &v
}

// SetValueType sets the value of the leaf ValueType in the Flow_TaggedMetric_Tags_TagValue
// struct.
func (t *Flow_TaggedMetric_Tags_TagValue) SetValueType(v E_Tags_ValueType) {
	t.ValueType = v
}

// PopulateDefaults recursively populates unset leaf fields in the Flow_TaggedMetric_Tags_TagValue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Flow_TaggedMetric_Tags_TagValue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Flow_TaggedMetric_Tags_TagValue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Flow_TaggedMetric_Tags_TagValue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Flow_TaggedMetric_Tags_TagValue) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Flow_TaggedMetric_Tags_TagValue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Flow_TaggedMetric_Tags_TagValue.
func (*Flow_TaggedMetric_Tags_TagValue) ΛBelongingModule() string {
	return "open-traffic-generator-flow"
}

// Interface represents the /open-traffic-generator-discovery/interfaces/interface YANG schema element.
type Interface struct {
	Ipv4Neighbor map[string]*Interface_Ipv4Neighbor `path:"ipv4-neighbors/ipv4-neighbor" module:"open-traffic-generator-discovery/open-traffic-generator-discovery"`
	Ipv6Neighbor map[string]*Interface_Ipv6Neighbor `path:"ipv6-neighbors/ipv6-neighbor" module:"open-traffic-generator-discovery/open-traffic-generator-discovery"`
	Name         *string                            `path:"state/name|name" module:"open-traffic-generator-discovery/open-traffic-generator-discovery|open-traffic-generator-discovery" shadow-path:"name" shadow-module:"open-traffic-generator-discovery"`
}

// IsYANGGoStruct ensures that Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface) IsYANGGoStruct() {}

// NewIpv4Neighbor creates a new entry in the Ipv4Neighbor list of the
// Interface struct. The keys of the list are populated from the input
// arguments.
func (t *Interface) NewIpv4Neighbor(Ipv4Address string) (*Interface_Ipv4Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv4Neighbor == nil {
		t.Ipv4Neighbor = make(map[string]*Interface_Ipv4Neighbor)
	}

	key := Ipv4Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv4Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv4Neighbor", key)
	}

	t.Ipv4Neighbor[key] = &Interface_Ipv4Neighbor{
		Ipv4Address: &Ipv4Address,
	}

	return t.Ipv4Neighbor[key], nil
}

// RenameIpv4Neighbor renames an entry in the list Ipv4Neighbor within
// the Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Interface) RenameIpv4Neighbor(oldK, newK string) error {
	if _, ok := t.Ipv4Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv4Neighbor", newK)
	}

	e, ok := t.Ipv4Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv4Neighbor", oldK)
	}
	e.Ipv4Address = &newK

	t.Ipv4Neighbor[newK] = e
	delete(t.Ipv4Neighbor, oldK)
	return nil
}

// GetOrCreateIpv4NeighborMap returns the list (map) from Interface.
//
// It initializes the field if not already initialized.
func (t *Interface) GetOrCreateIpv4NeighborMap() map[string]*Interface_Ipv4Neighbor {
	if t.Ipv4Neighbor == nil {
		t.Ipv4Neighbor = make(map[string]*Interface_Ipv4Neighbor)
	}
	return t.Ipv4Neighbor
}

// GetOrCreateIpv4Neighbor retrieves the value with the specified keys from
// the receiver Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface) GetOrCreateIpv4Neighbor(Ipv4Address string) *Interface_Ipv4Neighbor {

	key := Ipv4Address

	if v, ok := t.Ipv4Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv4Neighbor(Ipv4Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv4Neighbor got unexpected error: %v", err))
	}
	return v
}

// GetIpv4Neighbor retrieves the value with the specified key from
// the Ipv4Neighbor map field of Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface) GetIpv4Neighbor(Ipv4Address string) *Interface_Ipv4Neighbor {

	if t == nil {
		return nil
	}

	key := Ipv4Address

	if lm, ok := t.Ipv4Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv4Neighbor deletes the value with the specified keys from
// the receiver Interface. If there is no such element, the function
// is a no-op.
func (t *Interface) DeleteIpv4Neighbor(Ipv4Address string) {
	key := Ipv4Address

	delete(t.Ipv4Neighbor, key)
}

// AppendIpv4Neighbor appends the supplied Interface_Ipv4Neighbor struct to the
// list Ipv4Neighbor of Interface. If the key value(s) specified in
// the supplied Interface_Ipv4Neighbor already exist in the list, an error is
// returned.
func (t *Interface) AppendIpv4Neighbor(v *Interface_Ipv4Neighbor) error {
	if v.Ipv4Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv4Address")
	}

	key := *v.Ipv4Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv4Neighbor == nil {
		t.Ipv4Neighbor = make(map[string]*Interface_Ipv4Neighbor)
	}

	if _, ok := t.Ipv4Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv4Neighbor %v", key)
	}

	t.Ipv4Neighbor[key] = v
	return nil
}

// NewIpv6Neighbor creates a new entry in the Ipv6Neighbor list of the
// Interface struct. The keys of the list are populated from the input
// arguments.
func (t *Interface) NewIpv6Neighbor(Ipv6Address string) (*Interface_Ipv6Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6Neighbor == nil {
		t.Ipv6Neighbor = make(map[string]*Interface_Ipv6Neighbor)
	}

	key := Ipv6Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv6Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv6Neighbor", key)
	}

	t.Ipv6Neighbor[key] = &Interface_Ipv6Neighbor{
		Ipv6Address: &Ipv6Address,
	}

	return t.Ipv6Neighbor[key], nil
}

// RenameIpv6Neighbor renames an entry in the list Ipv6Neighbor within
// the Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Interface) RenameIpv6Neighbor(oldK, newK string) error {
	if _, ok := t.Ipv6Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv6Neighbor", newK)
	}

	e, ok := t.Ipv6Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv6Neighbor", oldK)
	}
	e.Ipv6Address = &newK

	t.Ipv6Neighbor[newK] = e
	delete(t.Ipv6Neighbor, oldK)
	return nil
}

// GetOrCreateIpv6NeighborMap returns the list (map) from Interface.
//
// It initializes the field if not already initialized.
func (t *Interface) GetOrCreateIpv6NeighborMap() map[string]*Interface_Ipv6Neighbor {
	if t.Ipv6Neighbor == nil {
		t.Ipv6Neighbor = make(map[string]*Interface_Ipv6Neighbor)
	}
	return t.Ipv6Neighbor
}

// GetOrCreateIpv6Neighbor retrieves the value with the specified keys from
// the receiver Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface) GetOrCreateIpv6Neighbor(Ipv6Address string) *Interface_Ipv6Neighbor {

	key := Ipv6Address

	if v, ok := t.Ipv6Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv6Neighbor(Ipv6Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv6Neighbor got unexpected error: %v", err))
	}
	return v
}

// GetIpv6Neighbor retrieves the value with the specified key from
// the Ipv6Neighbor map field of Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface) GetIpv6Neighbor(Ipv6Address string) *Interface_Ipv6Neighbor {

	if t == nil {
		return nil
	}

	key := Ipv6Address

	if lm, ok := t.Ipv6Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv6Neighbor deletes the value with the specified keys from
// the receiver Interface. If there is no such element, the function
// is a no-op.
func (t *Interface) DeleteIpv6Neighbor(Ipv6Address string) {
	key := Ipv6Address

	delete(t.Ipv6Neighbor, key)
}

// AppendIpv6Neighbor appends the supplied Interface_Ipv6Neighbor struct to the
// list Ipv6Neighbor of Interface. If the key value(s) specified in
// the supplied Interface_Ipv6Neighbor already exist in the list, an error is
// returned.
func (t *Interface) AppendIpv6Neighbor(v *Interface_Ipv6Neighbor) error {
	if v.Ipv6Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Address")
	}

	key := *v.Ipv6Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6Neighbor == nil {
		t.Ipv6Neighbor = make(map[string]*Interface_Ipv6Neighbor)
	}

	if _, ok := t.Ipv6Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv6Neighbor %v", key)
	}

	t.Ipv6Neighbor[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Interface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// SetName sets the value of the leaf Name in the Interface
// struct.
func (t *Interface) SetName(v string) {
	t.Name = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Ipv4Neighbor {
		e.PopulateDefaults()
	}
	for _, e := range t.Ipv6Neighbor {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the Interface struct, which is a YANG list entry.
func (t *Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface.
func (*Interface) ΛBelongingModule() string {
	return "open-traffic-generator-discovery"
}

// Interface_Ipv4Neighbor represents the /open-traffic-generator-discovery/interfaces/interface/ipv4-neighbors/ipv4-neighbor YANG schema element.
type Interface_Ipv4Neighbor struct {
	Ipv4Address      *string `path:"state/ipv4-address|ipv4-address" module:"open-traffic-generator-discovery/open-traffic-generator-discovery|open-traffic-generator-discovery" shadow-path:"ipv4-address" shadow-module:"open-traffic-generator-discovery"`
	LinkLayerAddress *string `path:"state/link-layer-address" module:"open-traffic-generator-discovery/open-traffic-generator-discovery"`
}

// IsYANGGoStruct ensures that Interface_Ipv4Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Ipv4Neighbor) IsYANGGoStruct() {}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the Interface_Ipv4Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *Interface_Ipv4Neighbor) GetIpv4Address() string {
	if t == nil || t.Ipv4Address == nil {
		return ""
	}
	return *t.Ipv4Address
}

// GetLinkLayerAddress retrieves the value of the leaf LinkLayerAddress from the Interface_Ipv4Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkLayerAddress is set, it can
// safely use t.GetLinkLayerAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkLayerAddress == nil' before retrieving the leaf's value.
func (t *Interface_Ipv4Neighbor) GetLinkLayerAddress() string {
	if t == nil || t.LinkLayerAddress == nil {
		return ""
	}
	return *t.LinkLayerAddress
}

// SetIpv4Address sets the value of the leaf Ipv4Address in the Interface_Ipv4Neighbor
// struct.
func (t *Interface_Ipv4Neighbor) SetIpv4Address(v string) {
	t.Ipv4Address = &v
}

// SetLinkLayerAddress sets the value of the leaf LinkLayerAddress in the Interface_Ipv4Neighbor
// struct.
func (t *Interface_Ipv4Neighbor) SetLinkLayerAddress(v string) {
	t.LinkLayerAddress = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Ipv4Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Ipv4Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Interface_Ipv4Neighbor struct, which is a YANG list entry.
func (t *Interface_Ipv4Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv4Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv4Address")
	}

	return map[string]interface{}{
		"ipv4-address": *t.Ipv4Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Ipv4Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Ipv4Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Ipv4Neighbor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Ipv4Neighbor) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Ipv4Neighbor.
func (*Interface_Ipv4Neighbor) ΛBelongingModule() string {
	return "open-traffic-generator-discovery"
}

// Interface_Ipv6Neighbor represents the /open-traffic-generator-discovery/interfaces/interface/ipv6-neighbors/ipv6-neighbor YANG schema element.
type Interface_Ipv6Neighbor struct {
	Ipv6Address      *string `path:"state/ipv6-address|ipv6-address" module:"open-traffic-generator-discovery/open-traffic-generator-discovery|open-traffic-generator-discovery" shadow-path:"ipv6-address" shadow-module:"open-traffic-generator-discovery"`
	LinkLayerAddress *string `path:"state/link-layer-address" module:"open-traffic-generator-discovery/open-traffic-generator-discovery"`
}

// IsYANGGoStruct ensures that Interface_Ipv6Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Ipv6Neighbor) IsYANGGoStruct() {}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the Interface_Ipv6Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *Interface_Ipv6Neighbor) GetIpv6Address() string {
	if t == nil || t.Ipv6Address == nil {
		return ""
	}
	return *t.Ipv6Address
}

// GetLinkLayerAddress retrieves the value of the leaf LinkLayerAddress from the Interface_Ipv6Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkLayerAddress is set, it can
// safely use t.GetLinkLayerAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkLayerAddress == nil' before retrieving the leaf's value.
func (t *Interface_Ipv6Neighbor) GetLinkLayerAddress() string {
	if t == nil || t.LinkLayerAddress == nil {
		return ""
	}
	return *t.LinkLayerAddress
}

// SetIpv6Address sets the value of the leaf Ipv6Address in the Interface_Ipv6Neighbor
// struct.
func (t *Interface_Ipv6Neighbor) SetIpv6Address(v string) {
	t.Ipv6Address = &v
}

// SetLinkLayerAddress sets the value of the leaf LinkLayerAddress in the Interface_Ipv6Neighbor
// struct.
func (t *Interface_Ipv6Neighbor) SetLinkLayerAddress(v string) {
	t.LinkLayerAddress = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Ipv6Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Ipv6Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Interface_Ipv6Neighbor struct, which is a YANG list entry.
func (t *Interface_Ipv6Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Address")
	}

	return map[string]interface{}{
		"ipv6-address": *t.Ipv6Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Ipv6Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Ipv6Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Ipv6Neighbor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Ipv6Neighbor) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Ipv6Neighbor.
func (*Interface_Ipv6Neighbor) ΛBelongingModule() string {
	return "open-traffic-generator-discovery"
}

// IsisRouter represents the /open-traffic-generator-isis/isis-routers/isis-router YANG schema element.
type IsisRouter struct {
	Counters          *IsisRouter_Counters          `path:"state/counters" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	LinkStateDatabase *IsisRouter_LinkStateDatabase `path:"state/link-state-database" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	Name              *string                       `path:"state/name|name" module:"open-traffic-generator-isis/open-traffic-generator-isis|open-traffic-generator-isis" shadow-path:"name" shadow-module:"open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *IsisRouter) GetOrCreateCounters() *IsisRouter_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &IsisRouter_Counters{}
	return t.Counters
}

// GetOrCreateLinkStateDatabase retrieves the value of the LinkStateDatabase field
// or returns the existing field if it already exists.
func (t *IsisRouter) GetOrCreateLinkStateDatabase() *IsisRouter_LinkStateDatabase {
	if t.LinkStateDatabase != nil {
		return t.LinkStateDatabase
	}
	t.LinkStateDatabase = &IsisRouter_LinkStateDatabase{}
	return t.LinkStateDatabase
}

// GetCounters returns the value of the Counters struct pointer
// from IsisRouter. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *IsisRouter) GetCounters() *IsisRouter_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetLinkStateDatabase returns the value of the LinkStateDatabase struct pointer
// from IsisRouter. If the receiver or the field LinkStateDatabase is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *IsisRouter) GetLinkStateDatabase() *IsisRouter_LinkStateDatabase {
	if t != nil && t.LinkStateDatabase != nil {
		return t.LinkStateDatabase
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the IsisRouter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *IsisRouter) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// SetName sets the value of the leaf Name in the IsisRouter
// struct.
func (t *IsisRouter) SetName(v string) {
	t.Name = &v
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Counters.PopulateDefaults()
	t.LinkStateDatabase.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the IsisRouter struct, which is a YANG list entry.
func (t *IsisRouter) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter.
func (*IsisRouter) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_Counters represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters YANG schema element.
type IsisRouter_Counters struct {
	Level1 *IsisRouter_Counters_Level1 `path:"level1" module:"open-traffic-generator-isis"`
	Level2 *IsisRouter_Counters_Level2 `path:"level2" module:"open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_Counters) IsYANGGoStruct() {}

// GetOrCreateLevel1 retrieves the value of the Level1 field
// or returns the existing field if it already exists.
func (t *IsisRouter_Counters) GetOrCreateLevel1() *IsisRouter_Counters_Level1 {
	if t.Level1 != nil {
		return t.Level1
	}
	t.Level1 = &IsisRouter_Counters_Level1{}
	return t.Level1
}

// GetOrCreateLevel2 retrieves the value of the Level2 field
// or returns the existing field if it already exists.
func (t *IsisRouter_Counters) GetOrCreateLevel2() *IsisRouter_Counters_Level2 {
	if t.Level2 != nil {
		return t.Level2
	}
	t.Level2 = &IsisRouter_Counters_Level2{}
	return t.Level2
}

// GetLevel1 returns the value of the Level1 struct pointer
// from IsisRouter_Counters. If the receiver or the field Level1 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *IsisRouter_Counters) GetLevel1() *IsisRouter_Counters_Level1 {
	if t != nil && t.Level1 != nil {
		return t.Level1
	}
	return nil
}

// GetLevel2 returns the value of the Level2 struct pointer
// from IsisRouter_Counters. If the receiver or the field Level2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *IsisRouter_Counters) GetLevel2() *IsisRouter_Counters_Level2 {
	if t != nil && t.Level2 != nil {
		return t.Level2
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Level1.PopulateDefaults()
	t.Level2.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_Counters.
func (*IsisRouter_Counters) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_Counters_Level1 represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1 YANG schema element.
type IsisRouter_Counters_Level1 struct {
	DatabaseSize   *uint64 `path:"database-size" module:"open-traffic-generator-isis"`
	InBcastHellos  *uint64 `path:"in-bcast-hellos" module:"open-traffic-generator-isis"`
	InCsnp         *uint64 `path:"in-csnp" module:"open-traffic-generator-isis"`
	InLsp          *uint64 `path:"in-lsp" module:"open-traffic-generator-isis"`
	InP2PHellos    *uint64 `path:"in-p2p-hellos" module:"open-traffic-generator-isis"`
	InPsnp         *uint64 `path:"in-psnp" module:"open-traffic-generator-isis"`
	OutBcastHellos *uint64 `path:"out-bcast-hellos" module:"open-traffic-generator-isis"`
	OutCsnp        *uint64 `path:"out-csnp" module:"open-traffic-generator-isis"`
	OutLsp         *uint64 `path:"out-lsp" module:"open-traffic-generator-isis"`
	OutP2PHellos   *uint64 `path:"out-p2p-hellos" module:"open-traffic-generator-isis"`
	OutPsnp        *uint64 `path:"out-psnp" module:"open-traffic-generator-isis"`
	SessionsFlap   *uint64 `path:"sessions-flap" module:"open-traffic-generator-isis"`
	SessionsUp     *uint64 `path:"sessions-up" module:"open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_Counters_Level1 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_Counters_Level1) IsYANGGoStruct() {}

// GetDatabaseSize retrieves the value of the leaf DatabaseSize from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DatabaseSize is set, it can
// safely use t.GetDatabaseSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DatabaseSize == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetDatabaseSize() uint64 {
	if t == nil || t.DatabaseSize == nil {
		return 0
	}
	return *t.DatabaseSize
}

// GetInBcastHellos retrieves the value of the leaf InBcastHellos from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InBcastHellos is set, it can
// safely use t.GetInBcastHellos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InBcastHellos == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetInBcastHellos() uint64 {
	if t == nil || t.InBcastHellos == nil {
		return 0
	}
	return *t.InBcastHellos
}

// GetInCsnp retrieves the value of the leaf InCsnp from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InCsnp is set, it can
// safely use t.GetInCsnp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InCsnp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetInCsnp() uint64 {
	if t == nil || t.InCsnp == nil {
		return 0
	}
	return *t.InCsnp
}

// GetInLsp retrieves the value of the leaf InLsp from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InLsp is set, it can
// safely use t.GetInLsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InLsp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetInLsp() uint64 {
	if t == nil || t.InLsp == nil {
		return 0
	}
	return *t.InLsp
}

// GetInP2PHellos retrieves the value of the leaf InP2PHellos from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InP2PHellos is set, it can
// safely use t.GetInP2PHellos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InP2PHellos == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetInP2PHellos() uint64 {
	if t == nil || t.InP2PHellos == nil {
		return 0
	}
	return *t.InP2PHellos
}

// GetInPsnp retrieves the value of the leaf InPsnp from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InPsnp is set, it can
// safely use t.GetInPsnp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InPsnp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetInPsnp() uint64 {
	if t == nil || t.InPsnp == nil {
		return 0
	}
	return *t.InPsnp
}

// GetOutBcastHellos retrieves the value of the leaf OutBcastHellos from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutBcastHellos is set, it can
// safely use t.GetOutBcastHellos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutBcastHellos == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetOutBcastHellos() uint64 {
	if t == nil || t.OutBcastHellos == nil {
		return 0
	}
	return *t.OutBcastHellos
}

// GetOutCsnp retrieves the value of the leaf OutCsnp from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutCsnp is set, it can
// safely use t.GetOutCsnp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutCsnp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetOutCsnp() uint64 {
	if t == nil || t.OutCsnp == nil {
		return 0
	}
	return *t.OutCsnp
}

// GetOutLsp retrieves the value of the leaf OutLsp from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutLsp is set, it can
// safely use t.GetOutLsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutLsp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetOutLsp() uint64 {
	if t == nil || t.OutLsp == nil {
		return 0
	}
	return *t.OutLsp
}

// GetOutP2PHellos retrieves the value of the leaf OutP2PHellos from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutP2PHellos is set, it can
// safely use t.GetOutP2PHellos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutP2PHellos == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetOutP2PHellos() uint64 {
	if t == nil || t.OutP2PHellos == nil {
		return 0
	}
	return *t.OutP2PHellos
}

// GetOutPsnp retrieves the value of the leaf OutPsnp from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutPsnp is set, it can
// safely use t.GetOutPsnp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutPsnp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetOutPsnp() uint64 {
	if t == nil || t.OutPsnp == nil {
		return 0
	}
	return *t.OutPsnp
}

// GetSessionsFlap retrieves the value of the leaf SessionsFlap from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionsFlap is set, it can
// safely use t.GetSessionsFlap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionsFlap == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetSessionsFlap() uint64 {
	if t == nil || t.SessionsFlap == nil {
		return 0
	}
	return *t.SessionsFlap
}

// GetSessionsUp retrieves the value of the leaf SessionsUp from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionsUp is set, it can
// safely use t.GetSessionsUp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionsUp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetSessionsUp() uint64 {
	if t == nil || t.SessionsUp == nil {
		return 0
	}
	return *t.SessionsUp
}

// SetDatabaseSize sets the value of the leaf DatabaseSize in the IsisRouter_Counters_Level1
// struct.
func (t *IsisRouter_Counters_Level1) SetDatabaseSize(v uint64) {
	t.DatabaseSize = &v
}

// SetInBcastHellos sets the value of the leaf InBcastHellos in the IsisRouter_Counters_Level1
// struct.
func (t *IsisRouter_Counters_Level1) SetInBcastHellos(v uint64) {
	t.InBcastHellos = &v
}

// SetInCsnp sets the value of the leaf InCsnp in the IsisRouter_Counters_Level1
// struct.
func (t *IsisRouter_Counters_Level1) SetInCsnp(v uint64) {
	t.InCsnp = &v
}

// SetInLsp sets the value of the leaf InLsp in the IsisRouter_Counters_Level1
// struct.
func (t *IsisRouter_Counters_Level1) SetInLsp(v uint64) {
	t.InLsp = &v
}

// SetInP2PHellos sets the value of the leaf InP2PHellos in the IsisRouter_Counters_Level1
// struct.
func (t *IsisRouter_Counters_Level1) SetInP2PHellos(v uint64) {
	t.InP2PHellos = &v
}

// SetInPsnp sets the value of the leaf InPsnp in the IsisRouter_Counters_Level1
// struct.
func (t *IsisRouter_Counters_Level1) SetInPsnp(v uint64) {
	t.InPsnp = &v
}

// SetOutBcastHellos sets the value of the leaf OutBcastHellos in the IsisRouter_Counters_Level1
// struct.
func (t *IsisRouter_Counters_Level1) SetOutBcastHellos(v uint64) {
	t.OutBcastHellos = &v
}

// SetOutCsnp sets the value of the leaf OutCsnp in the IsisRouter_Counters_Level1
// struct.
func (t *IsisRouter_Counters_Level1) SetOutCsnp(v uint64) {
	t.OutCsnp = &v
}

// SetOutLsp sets the value of the leaf OutLsp in the IsisRouter_Counters_Level1
// struct.
func (t *IsisRouter_Counters_Level1) SetOutLsp(v uint64) {
	t.OutLsp = &v
}

// SetOutP2PHellos sets the value of the leaf OutP2PHellos in the IsisRouter_Counters_Level1
// struct.
func (t *IsisRouter_Counters_Level1) SetOutP2PHellos(v uint64) {
	t.OutP2PHellos = &v
}

// SetOutPsnp sets the value of the leaf OutPsnp in the IsisRouter_Counters_Level1
// struct.
func (t *IsisRouter_Counters_Level1) SetOutPsnp(v uint64) {
	t.OutPsnp = &v
}

// SetSessionsFlap sets the value of the leaf SessionsFlap in the IsisRouter_Counters_Level1
// struct.
func (t *IsisRouter_Counters_Level1) SetSessionsFlap(v uint64) {
	t.SessionsFlap = &v
}

// SetSessionsUp sets the value of the leaf SessionsUp in the IsisRouter_Counters_Level1
// struct.
func (t *IsisRouter_Counters_Level1) SetSessionsUp(v uint64) {
	t.SessionsUp = &v
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_Counters_Level1
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_Counters_Level1) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_Counters_Level1) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_Counters_Level1"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_Counters_Level1) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_Counters_Level1) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_Counters_Level1.
func (*IsisRouter_Counters_Level1) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_Counters_Level2 represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2 YANG schema element.
type IsisRouter_Counters_Level2 struct {
	DatabaseSize   *uint64 `path:"database-size" module:"open-traffic-generator-isis"`
	InBcastHellos  *uint64 `path:"in-bcast-hellos" module:"open-traffic-generator-isis"`
	InCsnp         *uint64 `path:"in-csnp" module:"open-traffic-generator-isis"`
	InLsp          *uint64 `path:"in-lsp" module:"open-traffic-generator-isis"`
	InP2PHellos    *uint64 `path:"in-p2p-hellos" module:"open-traffic-generator-isis"`
	InPsnp         *uint64 `path:"in-psnp" module:"open-traffic-generator-isis"`
	OutBcastHellos *uint64 `path:"out-bcast-hellos" module:"open-traffic-generator-isis"`
	OutCsnp        *uint64 `path:"out-csnp" module:"open-traffic-generator-isis"`
	OutLsp         *uint64 `path:"out-lsp" module:"open-traffic-generator-isis"`
	OutP2PHellos   *uint64 `path:"out-p2p-hellos" module:"open-traffic-generator-isis"`
	OutPsnp        *uint64 `path:"out-psnp" module:"open-traffic-generator-isis"`
	SessionsFlap   *uint64 `path:"sessions-flap" module:"open-traffic-generator-isis"`
	SessionsUp     *uint64 `path:"sessions-up" module:"open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_Counters_Level2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_Counters_Level2) IsYANGGoStruct() {}

// GetDatabaseSize retrieves the value of the leaf DatabaseSize from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DatabaseSize is set, it can
// safely use t.GetDatabaseSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DatabaseSize == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetDatabaseSize() uint64 {
	if t == nil || t.DatabaseSize == nil {
		return 0
	}
	return *t.DatabaseSize
}

// GetInBcastHellos retrieves the value of the leaf InBcastHellos from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InBcastHellos is set, it can
// safely use t.GetInBcastHellos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InBcastHellos == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetInBcastHellos() uint64 {
	if t == nil || t.InBcastHellos == nil {
		return 0
	}
	return *t.InBcastHellos
}

// GetInCsnp retrieves the value of the leaf InCsnp from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InCsnp is set, it can
// safely use t.GetInCsnp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InCsnp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetInCsnp() uint64 {
	if t == nil || t.InCsnp == nil {
		return 0
	}
	return *t.InCsnp
}

// GetInLsp retrieves the value of the leaf InLsp from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InLsp is set, it can
// safely use t.GetInLsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InLsp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetInLsp() uint64 {
	if t == nil || t.InLsp == nil {
		return 0
	}
	return *t.InLsp
}

// GetInP2PHellos retrieves the value of the leaf InP2PHellos from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InP2PHellos is set, it can
// safely use t.GetInP2PHellos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InP2PHellos == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetInP2PHellos() uint64 {
	if t == nil || t.InP2PHellos == nil {
		return 0
	}
	return *t.InP2PHellos
}

// GetInPsnp retrieves the value of the leaf InPsnp from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InPsnp is set, it can
// safely use t.GetInPsnp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InPsnp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetInPsnp() uint64 {
	if t == nil || t.InPsnp == nil {
		return 0
	}
	return *t.InPsnp
}

// GetOutBcastHellos retrieves the value of the leaf OutBcastHellos from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutBcastHellos is set, it can
// safely use t.GetOutBcastHellos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutBcastHellos == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetOutBcastHellos() uint64 {
	if t == nil || t.OutBcastHellos == nil {
		return 0
	}
	return *t.OutBcastHellos
}

// GetOutCsnp retrieves the value of the leaf OutCsnp from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutCsnp is set, it can
// safely use t.GetOutCsnp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutCsnp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetOutCsnp() uint64 {
	if t == nil || t.OutCsnp == nil {
		return 0
	}
	return *t.OutCsnp
}

// GetOutLsp retrieves the value of the leaf OutLsp from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutLsp is set, it can
// safely use t.GetOutLsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutLsp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetOutLsp() uint64 {
	if t == nil || t.OutLsp == nil {
		return 0
	}
	return *t.OutLsp
}

// GetOutP2PHellos retrieves the value of the leaf OutP2PHellos from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutP2PHellos is set, it can
// safely use t.GetOutP2PHellos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutP2PHellos == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetOutP2PHellos() uint64 {
	if t == nil || t.OutP2PHellos == nil {
		return 0
	}
	return *t.OutP2PHellos
}

// GetOutPsnp retrieves the value of the leaf OutPsnp from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutPsnp is set, it can
// safely use t.GetOutPsnp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutPsnp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetOutPsnp() uint64 {
	if t == nil || t.OutPsnp == nil {
		return 0
	}
	return *t.OutPsnp
}

// GetSessionsFlap retrieves the value of the leaf SessionsFlap from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionsFlap is set, it can
// safely use t.GetSessionsFlap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionsFlap == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetSessionsFlap() uint64 {
	if t == nil || t.SessionsFlap == nil {
		return 0
	}
	return *t.SessionsFlap
}

// GetSessionsUp retrieves the value of the leaf SessionsUp from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionsUp is set, it can
// safely use t.GetSessionsUp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionsUp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetSessionsUp() uint64 {
	if t == nil || t.SessionsUp == nil {
		return 0
	}
	return *t.SessionsUp
}

// SetDatabaseSize sets the value of the leaf DatabaseSize in the IsisRouter_Counters_Level2
// struct.
func (t *IsisRouter_Counters_Level2) SetDatabaseSize(v uint64) {
	t.DatabaseSize = &v
}

// SetInBcastHellos sets the value of the leaf InBcastHellos in the IsisRouter_Counters_Level2
// struct.
func (t *IsisRouter_Counters_Level2) SetInBcastHellos(v uint64) {
	t.InBcastHellos = &v
}

// SetInCsnp sets the value of the leaf InCsnp in the IsisRouter_Counters_Level2
// struct.
func (t *IsisRouter_Counters_Level2) SetInCsnp(v uint64) {
	t.InCsnp = &v
}

// SetInLsp sets the value of the leaf InLsp in the IsisRouter_Counters_Level2
// struct.
func (t *IsisRouter_Counters_Level2) SetInLsp(v uint64) {
	t.InLsp = &v
}

// SetInP2PHellos sets the value of the leaf InP2PHellos in the IsisRouter_Counters_Level2
// struct.
func (t *IsisRouter_Counters_Level2) SetInP2PHellos(v uint64) {
	t.InP2PHellos = &v
}

// SetInPsnp sets the value of the leaf InPsnp in the IsisRouter_Counters_Level2
// struct.
func (t *IsisRouter_Counters_Level2) SetInPsnp(v uint64) {
	t.InPsnp = &v
}

// SetOutBcastHellos sets the value of the leaf OutBcastHellos in the IsisRouter_Counters_Level2
// struct.
func (t *IsisRouter_Counters_Level2) SetOutBcastHellos(v uint64) {
	t.OutBcastHellos = &v
}

// SetOutCsnp sets the value of the leaf OutCsnp in the IsisRouter_Counters_Level2
// struct.
func (t *IsisRouter_Counters_Level2) SetOutCsnp(v uint64) {
	t.OutCsnp = &v
}

// SetOutLsp sets the value of the leaf OutLsp in the IsisRouter_Counters_Level2
// struct.
func (t *IsisRouter_Counters_Level2) SetOutLsp(v uint64) {
	t.OutLsp = &v
}

// SetOutP2PHellos sets the value of the leaf OutP2PHellos in the IsisRouter_Counters_Level2
// struct.
func (t *IsisRouter_Counters_Level2) SetOutP2PHellos(v uint64) {
	t.OutP2PHellos = &v
}

// SetOutPsnp sets the value of the leaf OutPsnp in the IsisRouter_Counters_Level2
// struct.
func (t *IsisRouter_Counters_Level2) SetOutPsnp(v uint64) {
	t.OutPsnp = &v
}

// SetSessionsFlap sets the value of the leaf SessionsFlap in the IsisRouter_Counters_Level2
// struct.
func (t *IsisRouter_Counters_Level2) SetSessionsFlap(v uint64) {
	t.SessionsFlap = &v
}

// SetSessionsUp sets the value of the leaf SessionsUp in the IsisRouter_Counters_Level2
// struct.
func (t *IsisRouter_Counters_Level2) SetSessionsUp(v uint64) {
	t.SessionsUp = &v
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_Counters_Level2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_Counters_Level2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_Counters_Level2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_Counters_Level2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_Counters_Level2) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_Counters_Level2) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_Counters_Level2.
func (*IsisRouter_Counters_Level2) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_LinkStateDatabase represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database YANG schema element.
type IsisRouter_LinkStateDatabase struct {
	Lsps map[IsisRouter_LinkStateDatabase_Lsps_Key]*IsisRouter_LinkStateDatabase_Lsps `path:"lsp-states/lsps" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_LinkStateDatabase implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_LinkStateDatabase) IsYANGGoStruct() {}

// IsisRouter_LinkStateDatabase_Lsps_Key represents the key for list Lsps of element /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database.
type IsisRouter_LinkStateDatabase_Lsps_Key struct {
	LspId   string         `path:"lsp-id"`
	PduType E_Lsps_PduType `path:"pdu-type"`
}

// IsYANGGoKeyStruct ensures that IsisRouter_LinkStateDatabase_Lsps_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (IsisRouter_LinkStateDatabase_Lsps_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the IsisRouter_LinkStateDatabase_Lsps_Key key struct.
func (t IsisRouter_LinkStateDatabase_Lsps_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"lsp-id":   t.LspId,
		"pdu-type": t.PduType,
	}, nil
}

// NewLsps creates a new entry in the Lsps list of the
// IsisRouter_LinkStateDatabase struct. The keys of the list are populated from the input
// arguments.
func (t *IsisRouter_LinkStateDatabase) NewLsps(LspId string, PduType E_Lsps_PduType) (*IsisRouter_LinkStateDatabase_Lsps, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lsps == nil {
		t.Lsps = make(map[IsisRouter_LinkStateDatabase_Lsps_Key]*IsisRouter_LinkStateDatabase_Lsps)
	}

	key := IsisRouter_LinkStateDatabase_Lsps_Key{
		LspId:   LspId,
		PduType: PduType,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Lsps[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Lsps", key)
	}

	t.Lsps[key] = &IsisRouter_LinkStateDatabase_Lsps{
		LspId:   &LspId,
		PduType: PduType,
	}

	return t.Lsps[key], nil
}

// RenameLsps renames an entry in the list Lsps within
// the IsisRouter_LinkStateDatabase struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *IsisRouter_LinkStateDatabase) RenameLsps(oldK, newK IsisRouter_LinkStateDatabase_Lsps_Key) error {
	if _, ok := t.Lsps[newK]; ok {
		return fmt.Errorf("key %v already exists in Lsps", newK)
	}

	e, ok := t.Lsps[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Lsps", oldK)
	}
	e.LspId = &newK.LspId
	e.PduType = newK.PduType

	t.Lsps[newK] = e
	delete(t.Lsps, oldK)
	return nil
}

// GetOrCreateLspsMap returns the list (map) from IsisRouter_LinkStateDatabase.
//
// It initializes the field if not already initialized.
func (t *IsisRouter_LinkStateDatabase) GetOrCreateLspsMap() map[IsisRouter_LinkStateDatabase_Lsps_Key]*IsisRouter_LinkStateDatabase_Lsps {
	if t.Lsps == nil {
		t.Lsps = make(map[IsisRouter_LinkStateDatabase_Lsps_Key]*IsisRouter_LinkStateDatabase_Lsps)
	}
	return t.Lsps
}

// GetOrCreateLsps retrieves the value with the specified keys from
// the receiver IsisRouter_LinkStateDatabase. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *IsisRouter_LinkStateDatabase) GetOrCreateLsps(LspId string, PduType E_Lsps_PduType) *IsisRouter_LinkStateDatabase_Lsps {

	key := IsisRouter_LinkStateDatabase_Lsps_Key{
		LspId:   LspId,
		PduType: PduType,
	}

	if v, ok := t.Lsps[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLsps(LspId, PduType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLsps got unexpected error: %v", err))
	}
	return v
}

// GetLsps retrieves the value with the specified key from
// the Lsps map field of IsisRouter_LinkStateDatabase. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *IsisRouter_LinkStateDatabase) GetLsps(LspId string, PduType E_Lsps_PduType) *IsisRouter_LinkStateDatabase_Lsps {

	if t == nil {
		return nil
	}

	key := IsisRouter_LinkStateDatabase_Lsps_Key{
		LspId:   LspId,
		PduType: PduType,
	}

	if lm, ok := t.Lsps[key]; ok {
		return lm
	}
	return nil
}

// DeleteLsps deletes the value with the specified keys from
// the receiver IsisRouter_LinkStateDatabase. If there is no such element, the function
// is a no-op.
func (t *IsisRouter_LinkStateDatabase) DeleteLsps(LspId string, PduType E_Lsps_PduType) {
	key := IsisRouter_LinkStateDatabase_Lsps_Key{
		LspId:   LspId,
		PduType: PduType,
	}

	delete(t.Lsps, key)
}

// AppendLsps appends the supplied IsisRouter_LinkStateDatabase_Lsps struct to the
// list Lsps of IsisRouter_LinkStateDatabase. If the key value(s) specified in
// the supplied IsisRouter_LinkStateDatabase_Lsps already exist in the list, an error is
// returned.
func (t *IsisRouter_LinkStateDatabase) AppendLsps(v *IsisRouter_LinkStateDatabase_Lsps) error {
	if v.LspId == nil {
		return fmt.Errorf("invalid nil key for LspId")
	}

	key := IsisRouter_LinkStateDatabase_Lsps_Key{
		LspId:   *v.LspId,
		PduType: v.PduType,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lsps == nil {
		t.Lsps = make(map[IsisRouter_LinkStateDatabase_Lsps_Key]*IsisRouter_LinkStateDatabase_Lsps)
	}

	if _, ok := t.Lsps[key]; ok {
		return fmt.Errorf("duplicate key for list Lsps %v", key)
	}

	t.Lsps[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_LinkStateDatabase
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_LinkStateDatabase) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Lsps {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_LinkStateDatabase"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_LinkStateDatabase) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_LinkStateDatabase.
func (*IsisRouter_LinkStateDatabase) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_LinkStateDatabase_Lsps represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps struct {
	Flags             []E_Lsps_Flags                          `path:"state/flags" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	IsType            *uint8                                  `path:"state/is-type" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	LspId             *string                                 `path:"state/lsp-id|lsp-id" module:"open-traffic-generator-isis/open-traffic-generator-isis|open-traffic-generator-isis" shadow-path:"lsp-id" shadow-module:"open-traffic-generator-isis"`
	PduLength         *uint16                                 `path:"state/pdu-length" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	PduType           E_Lsps_PduType                          `path:"state/pdu-type|pdu-type" module:"open-traffic-generator-isis/open-traffic-generator-isis|open-traffic-generator-isis" shadow-path:"pdu-type" shadow-module:"open-traffic-generator-isis"`
	RemainingLifetime *uint16                                 `path:"state/remaining-lifetime" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	SequenceNumber    *uint32                                 `path:"state/sequence-number" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	Tlvs              *IsisRouter_LinkStateDatabase_Lsps_Tlvs `path:"tlvs" module:"open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_LinkStateDatabase_Lsps implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_LinkStateDatabase_Lsps) IsYANGGoStruct() {}

// GetOrCreateTlvs retrieves the value of the Tlvs field
// or returns the existing field if it already exists.
func (t *IsisRouter_LinkStateDatabase_Lsps) GetOrCreateTlvs() *IsisRouter_LinkStateDatabase_Lsps_Tlvs {
	if t.Tlvs != nil {
		return t.Tlvs
	}
	t.Tlvs = &IsisRouter_LinkStateDatabase_Lsps_Tlvs{}
	return t.Tlvs
}

// GetTlvs returns the value of the Tlvs struct pointer
// from IsisRouter_LinkStateDatabase_Lsps. If the receiver or the field Tlvs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *IsisRouter_LinkStateDatabase_Lsps) GetTlvs() *IsisRouter_LinkStateDatabase_Lsps_Tlvs {
	if t != nil && t.Tlvs != nil {
		return t.Tlvs
	}
	return nil
}

// GetFlags retrieves the value of the leaf Flags from the IsisRouter_LinkStateDatabase_Lsps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flags is set, it can
// safely use t.GetFlags() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flags == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps) GetFlags() []E_Lsps_Flags {
	if t == nil || t.Flags == nil {
		return nil
	}
	return t.Flags
}

// GetIsType retrieves the value of the leaf IsType from the IsisRouter_LinkStateDatabase_Lsps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IsType is set, it can
// safely use t.GetIsType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IsType == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps) GetIsType() uint8 {
	if t == nil || t.IsType == nil {
		return 0
	}
	return *t.IsType
}

// GetLspId retrieves the value of the leaf LspId from the IsisRouter_LinkStateDatabase_Lsps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspId is set, it can
// safely use t.GetLspId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspId == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps) GetLspId() string {
	if t == nil || t.LspId == nil {
		return ""
	}
	return *t.LspId
}

// GetPduLength retrieves the value of the leaf PduLength from the IsisRouter_LinkStateDatabase_Lsps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PduLength is set, it can
// safely use t.GetPduLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PduLength == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps) GetPduLength() uint16 {
	if t == nil || t.PduLength == nil {
		return 0
	}
	return *t.PduLength
}

// GetPduType retrieves the value of the leaf PduType from the IsisRouter_LinkStateDatabase_Lsps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PduType is set, it can
// safely use t.GetPduType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PduType == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps) GetPduType() E_Lsps_PduType {
	if t == nil || t.PduType == 0 {
		return 0
	}
	return t.PduType
}

// GetRemainingLifetime retrieves the value of the leaf RemainingLifetime from the IsisRouter_LinkStateDatabase_Lsps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemainingLifetime is set, it can
// safely use t.GetRemainingLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemainingLifetime == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps) GetRemainingLifetime() uint16 {
	if t == nil || t.RemainingLifetime == nil {
		return 0
	}
	return *t.RemainingLifetime
}

// GetSequenceNumber retrieves the value of the leaf SequenceNumber from the IsisRouter_LinkStateDatabase_Lsps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SequenceNumber is set, it can
// safely use t.GetSequenceNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SequenceNumber == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps) GetSequenceNumber() uint32 {
	if t == nil || t.SequenceNumber == nil {
		return 0
	}
	return *t.SequenceNumber
}

// SetFlags sets the value of the leaf Flags in the IsisRouter_LinkStateDatabase_Lsps
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps) SetFlags(v []E_Lsps_Flags) {
	t.Flags = v
}

// SetIsType sets the value of the leaf IsType in the IsisRouter_LinkStateDatabase_Lsps
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps) SetIsType(v uint8) {
	t.IsType = &v
}

// SetLspId sets the value of the leaf LspId in the IsisRouter_LinkStateDatabase_Lsps
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps) SetLspId(v string) {
	t.LspId = &v
}

// SetPduLength sets the value of the leaf PduLength in the IsisRouter_LinkStateDatabase_Lsps
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps) SetPduLength(v uint16) {
	t.PduLength = &v
}

// SetPduType sets the value of the leaf PduType in the IsisRouter_LinkStateDatabase_Lsps
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps) SetPduType(v E_Lsps_PduType) {
	t.PduType = v
}

// SetRemainingLifetime sets the value of the leaf RemainingLifetime in the IsisRouter_LinkStateDatabase_Lsps
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps) SetRemainingLifetime(v uint16) {
	t.RemainingLifetime = &v
}

// SetSequenceNumber sets the value of the leaf SequenceNumber in the IsisRouter_LinkStateDatabase_Lsps
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps) SetSequenceNumber(v uint32) {
	t.SequenceNumber = &v
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_LinkStateDatabase_Lsps
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_LinkStateDatabase_Lsps) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Tlvs.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the IsisRouter_LinkStateDatabase_Lsps struct, which is a YANG list entry.
func (t *IsisRouter_LinkStateDatabase_Lsps) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LspId == nil {
		return nil, fmt.Errorf("nil value for key LspId")
	}

	return map[string]interface{}{
		"lsp-id":   *t.LspId,
		"pdu-type": t.PduType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_LinkStateDatabase_Lsps"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_LinkStateDatabase_Lsps) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_LinkStateDatabase_Lsps.
func (*IsisRouter_LinkStateDatabase_Lsps) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs struct {
	Capability               map[uint32]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability    `path:"router-capabilities/capability" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	ExtendedIpv4Reachability *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability `path:"extended-ipv4-reachability" module:"open-traffic-generator-isis"`
	ExtendedIsReachability   *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability   `path:"extended-is-reachability" module:"open-traffic-generator-isis"`
	Hostnames                *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames                `path:"hostnames" module:"open-traffic-generator-isis"`
	Ipv4ExternalReachability *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability `path:"ipv4-external-reachability" module:"open-traffic-generator-isis"`
	Ipv4InternalReachability *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability `path:"ipv4-internal-reachability" module:"open-traffic-generator-isis"`
	Ipv6Reachability         *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability         `path:"ipv6-reachability" module:"open-traffic-generator-isis"`
	IsReachability           *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability           `path:"is-reachability" module:"open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_LinkStateDatabase_Lsps_Tlvs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs) IsYANGGoStruct() {}

// NewCapability creates a new entry in the Capability list of the
// IsisRouter_LinkStateDatabase_Lsps_Tlvs struct. The keys of the list are populated from the input
// arguments.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs) NewCapability(InstanceNumber uint32) (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Capability == nil {
		t.Capability = make(map[uint32]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability)
	}

	key := InstanceNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Capability[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Capability", key)
	}

	t.Capability[key] = &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability{
		InstanceNumber: &InstanceNumber,
	}

	return t.Capability[key], nil
}

// RenameCapability renames an entry in the list Capability within
// the IsisRouter_LinkStateDatabase_Lsps_Tlvs struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs) RenameCapability(oldK, newK uint32) error {
	if _, ok := t.Capability[newK]; ok {
		return fmt.Errorf("key %v already exists in Capability", newK)
	}

	e, ok := t.Capability[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Capability", oldK)
	}
	e.InstanceNumber = &newK

	t.Capability[newK] = e
	delete(t.Capability, oldK)
	return nil
}

// GetOrCreateCapabilityMap returns the list (map) from IsisRouter_LinkStateDatabase_Lsps_Tlvs.
//
// It initializes the field if not already initialized.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs) GetOrCreateCapabilityMap() map[uint32]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability {
	if t.Capability == nil {
		t.Capability = make(map[uint32]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability)
	}
	return t.Capability
}

// GetOrCreateCapability retrieves the value with the specified keys from
// the receiver IsisRouter_LinkStateDatabase_Lsps_Tlvs. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs) GetOrCreateCapability(InstanceNumber uint32) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability {

	key := InstanceNumber

	if v, ok := t.Capability[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCapability(InstanceNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCapability got unexpected error: %v", err))
	}
	return v
}

// GetCapability retrieves the value with the specified key from
// the Capability map field of IsisRouter_LinkStateDatabase_Lsps_Tlvs. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs) GetCapability(InstanceNumber uint32) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability {

	if t == nil {
		return nil
	}

	key := InstanceNumber

	if lm, ok := t.Capability[key]; ok {
		return lm
	}
	return nil
}

// DeleteCapability deletes the value with the specified keys from
// the receiver IsisRouter_LinkStateDatabase_Lsps_Tlvs. If there is no such element, the function
// is a no-op.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs) DeleteCapability(InstanceNumber uint32) {
	key := InstanceNumber

	delete(t.Capability, key)
}

// AppendCapability appends the supplied IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability struct to the
// list Capability of IsisRouter_LinkStateDatabase_Lsps_Tlvs. If the key value(s) specified in
// the supplied IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability already exist in the list, an error is
// returned.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs) AppendCapability(v *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability) error {
	if v.InstanceNumber == nil {
		return fmt.Errorf("invalid nil key received for InstanceNumber")
	}

	key := *v.InstanceNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Capability == nil {
		t.Capability = make(map[uint32]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability)
	}

	if _, ok := t.Capability[key]; ok {
		return fmt.Errorf("duplicate key for list Capability %v", key)
	}

	t.Capability[key] = v
	return nil
}

// GetOrCreateExtendedIpv4Reachability retrieves the value of the ExtendedIpv4Reachability field
// or returns the existing field if it already exists.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs) GetOrCreateExtendedIpv4Reachability() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability {
	if t.ExtendedIpv4Reachability != nil {
		return t.ExtendedIpv4Reachability
	}
	t.ExtendedIpv4Reachability = &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability{}
	return t.ExtendedIpv4Reachability
}

// GetOrCreateExtendedIsReachability retrieves the value of the ExtendedIsReachability field
// or returns the existing field if it already exists.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs) GetOrCreateExtendedIsReachability() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability {
	if t.ExtendedIsReachability != nil {
		return t.ExtendedIsReachability
	}
	t.ExtendedIsReachability = &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability{}
	return t.ExtendedIsReachability
}

// GetOrCreateHostnames retrieves the value of the Hostnames field
// or returns the existing field if it already exists.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs) GetOrCreateHostnames() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames {
	if t.Hostnames != nil {
		return t.Hostnames
	}
	t.Hostnames = &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames{}
	return t.Hostnames
}

// GetOrCreateIpv4ExternalReachability retrieves the value of the Ipv4ExternalReachability field
// or returns the existing field if it already exists.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs) GetOrCreateIpv4ExternalReachability() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability {
	if t.Ipv4ExternalReachability != nil {
		return t.Ipv4ExternalReachability
	}
	t.Ipv4ExternalReachability = &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability{}
	return t.Ipv4ExternalReachability
}

// GetOrCreateIpv4InternalReachability retrieves the value of the Ipv4InternalReachability field
// or returns the existing field if it already exists.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs) GetOrCreateIpv4InternalReachability() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability {
	if t.Ipv4InternalReachability != nil {
		return t.Ipv4InternalReachability
	}
	t.Ipv4InternalReachability = &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability{}
	return t.Ipv4InternalReachability
}

// GetOrCreateIpv6Reachability retrieves the value of the Ipv6Reachability field
// or returns the existing field if it already exists.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs) GetOrCreateIpv6Reachability() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability {
	if t.Ipv6Reachability != nil {
		return t.Ipv6Reachability
	}
	t.Ipv6Reachability = &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability{}
	return t.Ipv6Reachability
}

// GetOrCreateIsReachability retrieves the value of the IsReachability field
// or returns the existing field if it already exists.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs) GetOrCreateIsReachability() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability {
	if t.IsReachability != nil {
		return t.IsReachability
	}
	t.IsReachability = &IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability{}
	return t.IsReachability
}

// GetExtendedIpv4Reachability returns the value of the ExtendedIpv4Reachability struct pointer
// from IsisRouter_LinkStateDatabase_Lsps_Tlvs. If the receiver or the field ExtendedIpv4Reachability is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs) GetExtendedIpv4Reachability() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability {
	if t != nil && t.ExtendedIpv4Reachability != nil {
		return t.ExtendedIpv4Reachability
	}
	return nil
}

// GetExtendedIsReachability returns the value of the ExtendedIsReachability struct pointer
// from IsisRouter_LinkStateDatabase_Lsps_Tlvs. If the receiver or the field ExtendedIsReachability is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs) GetExtendedIsReachability() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability {
	if t != nil && t.ExtendedIsReachability != nil {
		return t.ExtendedIsReachability
	}
	return nil
}

// GetHostnames returns the value of the Hostnames struct pointer
// from IsisRouter_LinkStateDatabase_Lsps_Tlvs. If the receiver or the field Hostnames is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs) GetHostnames() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames {
	if t != nil && t.Hostnames != nil {
		return t.Hostnames
	}
	return nil
}

// GetIpv4ExternalReachability returns the value of the Ipv4ExternalReachability struct pointer
// from IsisRouter_LinkStateDatabase_Lsps_Tlvs. If the receiver or the field Ipv4ExternalReachability is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs) GetIpv4ExternalReachability() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability {
	if t != nil && t.Ipv4ExternalReachability != nil {
		return t.Ipv4ExternalReachability
	}
	return nil
}

// GetIpv4InternalReachability returns the value of the Ipv4InternalReachability struct pointer
// from IsisRouter_LinkStateDatabase_Lsps_Tlvs. If the receiver or the field Ipv4InternalReachability is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs) GetIpv4InternalReachability() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability {
	if t != nil && t.Ipv4InternalReachability != nil {
		return t.Ipv4InternalReachability
	}
	return nil
}

// GetIpv6Reachability returns the value of the Ipv6Reachability struct pointer
// from IsisRouter_LinkStateDatabase_Lsps_Tlvs. If the receiver or the field Ipv6Reachability is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs) GetIpv6Reachability() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability {
	if t != nil && t.Ipv6Reachability != nil {
		return t.Ipv6Reachability
	}
	return nil
}

// GetIsReachability returns the value of the IsReachability struct pointer
// from IsisRouter_LinkStateDatabase_Lsps_Tlvs. If the receiver or the field IsReachability is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs) GetIsReachability() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability {
	if t != nil && t.IsReachability != nil {
		return t.IsReachability
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_LinkStateDatabase_Lsps_Tlvs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ExtendedIpv4Reachability.PopulateDefaults()
	t.ExtendedIsReachability.PopulateDefaults()
	t.Hostnames.PopulateDefaults()
	t.Ipv4ExternalReachability.PopulateDefaults()
	t.Ipv4InternalReachability.PopulateDefaults()
	t.Ipv6Reachability.PopulateDefaults()
	t.IsReachability.PopulateDefaults()
	for _, e := range t.Capability {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_LinkStateDatabase_Lsps_Tlvs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_LinkStateDatabase_Lsps_Tlvs.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability struct {
	Algorithms               []uint32                                                                    `path:"state/algorithms" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	Flags                    []E_Capability_Flags                                                        `path:"state/flags" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	InstanceNumber           *uint32                                                                     `path:"state/instance-number|instance-number" module:"open-traffic-generator-isis/open-traffic-generator-isis|open-traffic-generator-isis" shadow-path:"instance-number" shadow-module:"open-traffic-generator-isis"`
	RouterId                 *string                                                                     `path:"state/router-id" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	SegmentRoutingCapability *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability `path:"state/segment-routing-capability" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	SrLocalBlockRanges       *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges       `path:"state/sr-local-block-ranges" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability) IsYANGGoStruct() {}

// GetOrCreateSegmentRoutingCapability retrieves the value of the SegmentRoutingCapability field
// or returns the existing field if it already exists.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability) GetOrCreateSegmentRoutingCapability() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability {
	if t.SegmentRoutingCapability != nil {
		return t.SegmentRoutingCapability
	}
	t.SegmentRoutingCapability = &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability{}
	return t.SegmentRoutingCapability
}

// GetOrCreateSrLocalBlockRanges retrieves the value of the SrLocalBlockRanges field
// or returns the existing field if it already exists.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability) GetOrCreateSrLocalBlockRanges() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges {
	if t.SrLocalBlockRanges != nil {
		return t.SrLocalBlockRanges
	}
	t.SrLocalBlockRanges = &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges{}
	return t.SrLocalBlockRanges
}

// GetSegmentRoutingCapability returns the value of the SegmentRoutingCapability struct pointer
// from IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability. If the receiver or the field SegmentRoutingCapability is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability) GetSegmentRoutingCapability() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability {
	if t != nil && t.SegmentRoutingCapability != nil {
		return t.SegmentRoutingCapability
	}
	return nil
}

// GetSrLocalBlockRanges returns the value of the SrLocalBlockRanges struct pointer
// from IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability. If the receiver or the field SrLocalBlockRanges is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability) GetSrLocalBlockRanges() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges {
	if t != nil && t.SrLocalBlockRanges != nil {
		return t.SrLocalBlockRanges
	}
	return nil
}

// GetAlgorithms retrieves the value of the leaf Algorithms from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Algorithms is set, it can
// safely use t.GetAlgorithms() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Algorithms == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability) GetAlgorithms() []uint32 {
	if t == nil || t.Algorithms == nil {
		return nil
	}
	return t.Algorithms
}

// GetFlags retrieves the value of the leaf Flags from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flags is set, it can
// safely use t.GetFlags() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flags == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability) GetFlags() []E_Capability_Flags {
	if t == nil || t.Flags == nil {
		return nil
	}
	return t.Flags
}

// GetInstanceNumber retrieves the value of the leaf InstanceNumber from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstanceNumber is set, it can
// safely use t.GetInstanceNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstanceNumber == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability) GetInstanceNumber() uint32 {
	if t == nil || t.InstanceNumber == nil {
		return 0
	}
	return *t.InstanceNumber
}

// GetRouterId retrieves the value of the leaf RouterId from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterId is set, it can
// safely use t.GetRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterId == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability) GetRouterId() string {
	if t == nil || t.RouterId == nil {
		return ""
	}
	return *t.RouterId
}

// SetAlgorithms sets the value of the leaf Algorithms in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability) SetAlgorithms(v []uint32) {
	t.Algorithms = v
}

// SetFlags sets the value of the leaf Flags in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability) SetFlags(v []E_Capability_Flags) {
	t.Flags = v
}

// SetInstanceNumber sets the value of the leaf InstanceNumber in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability) SetInstanceNumber(v uint32) {
	t.InstanceNumber = &v
}

// SetRouterId sets the value of the leaf RouterId in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability) SetRouterId(v string) {
	t.RouterId = &v
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SegmentRoutingCapability.PopulateDefaults()
	t.SrLocalBlockRanges.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability struct, which is a YANG list entry.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InstanceNumber == nil {
		return nil, fmt.Errorf("nil value for key InstanceNumber")
	}

	return map[string]interface{}{
		"instance-number": *t.InstanceNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/segment-routing-capability YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability struct {
	Flags          []E_SegmentRoutingCapability_Flags                                                                    `path:"state/flags" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	SrgbDescriptor map[uint32]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor `path:"state/srgb-descriptor" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability) IsYANGGoStruct() {}

// NewSrgbDescriptor creates a new entry in the SrgbDescriptor list of the
// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability struct. The keys of the list are populated from the input
// arguments.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability) NewSrgbDescriptor(Range uint32) (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SrgbDescriptor == nil {
		t.SrgbDescriptor = make(map[uint32]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor)
	}

	key := Range

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SrgbDescriptor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SrgbDescriptor", key)
	}

	t.SrgbDescriptor[key] = &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor{
		Range: &Range,
	}

	return t.SrgbDescriptor[key], nil
}

// RenameSrgbDescriptor renames an entry in the list SrgbDescriptor within
// the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability) RenameSrgbDescriptor(oldK, newK uint32) error {
	if _, ok := t.SrgbDescriptor[newK]; ok {
		return fmt.Errorf("key %v already exists in SrgbDescriptor", newK)
	}

	e, ok := t.SrgbDescriptor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SrgbDescriptor", oldK)
	}
	e.Range = &newK

	t.SrgbDescriptor[newK] = e
	delete(t.SrgbDescriptor, oldK)
	return nil
}

// GetOrCreateSrgbDescriptorMap returns the list (map) from IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability.
//
// It initializes the field if not already initialized.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability) GetOrCreateSrgbDescriptorMap() map[uint32]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor {
	if t.SrgbDescriptor == nil {
		t.SrgbDescriptor = make(map[uint32]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor)
	}
	return t.SrgbDescriptor
}

// GetOrCreateSrgbDescriptor retrieves the value with the specified keys from
// the receiver IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability) GetOrCreateSrgbDescriptor(Range uint32) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor {

	key := Range

	if v, ok := t.SrgbDescriptor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSrgbDescriptor(Range)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSrgbDescriptor got unexpected error: %v", err))
	}
	return v
}

// GetSrgbDescriptor retrieves the value with the specified key from
// the SrgbDescriptor map field of IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability) GetSrgbDescriptor(Range uint32) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor {

	if t == nil {
		return nil
	}

	key := Range

	if lm, ok := t.SrgbDescriptor[key]; ok {
		return lm
	}
	return nil
}

// DeleteSrgbDescriptor deletes the value with the specified keys from
// the receiver IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability. If there is no such element, the function
// is a no-op.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability) DeleteSrgbDescriptor(Range uint32) {
	key := Range

	delete(t.SrgbDescriptor, key)
}

// AppendSrgbDescriptor appends the supplied IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor struct to the
// list SrgbDescriptor of IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability. If the key value(s) specified in
// the supplied IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor already exist in the list, an error is
// returned.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability) AppendSrgbDescriptor(v *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor) error {
	if v.Range == nil {
		return fmt.Errorf("invalid nil key received for Range")
	}

	key := *v.Range

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SrgbDescriptor == nil {
		t.SrgbDescriptor = make(map[uint32]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor)
	}

	if _, ok := t.SrgbDescriptor[key]; ok {
		return fmt.Errorf("duplicate key for list SrgbDescriptor %v", key)
	}

	t.SrgbDescriptor[key] = v
	return nil
}

// GetFlags retrieves the value of the leaf Flags from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flags is set, it can
// safely use t.GetFlags() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flags == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability) GetFlags() []E_SegmentRoutingCapability_Flags {
	if t == nil || t.Flags == nil {
		return nil
	}
	return t.Flags
}

// SetFlags sets the value of the leaf Flags in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability) SetFlags(v []E_SegmentRoutingCapability_Flags) {
	t.Flags = v
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.SrgbDescriptor {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/segment-routing-capability/state/srgb-descriptor YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor struct {
	Range         *uint32 `path:"state/range|range" module:"open-traffic-generator-isis/open-traffic-generator-isis|open-traffic-generator-isis" shadow-path:"range" shadow-module:"open-traffic-generator-isis"`
	StartingLevel *uint32 `path:"state/starting-level" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor) IsYANGGoStruct() {
}

// GetRange retrieves the value of the leaf Range from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Range is set, it can
// safely use t.GetRange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Range == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor) GetRange() uint32 {
	if t == nil || t.Range == nil {
		return 0
	}
	return *t.Range
}

// GetStartingLevel retrieves the value of the leaf StartingLevel from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartingLevel is set, it can
// safely use t.GetStartingLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartingLevel == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor) GetStartingLevel() uint32 {
	if t == nil || t.StartingLevel == nil {
		return 0
	}
	return *t.StartingLevel
}

// SetRange sets the value of the leaf Range in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor) SetRange(v uint32) {
	t.Range = &v
}

// SetStartingLevel sets the value of the leaf StartingLevel in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor) SetStartingLevel(v uint32) {
	t.StartingLevel = &v
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor struct, which is a YANG list entry.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Range == nil {
		return nil, fmt.Errorf("nil value for key Range")
	}

	return map[string]interface{}{
		"range": *t.Range,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SegmentRoutingCapability_SrgbDescriptor) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/sr-local-block-ranges YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges struct {
	SrlbsDescriptor map[uint32]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor `path:"state/srlbs-descriptor" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges) IsYANGGoStruct() {}

// NewSrlbsDescriptor creates a new entry in the SrlbsDescriptor list of the
// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges struct. The keys of the list are populated from the input
// arguments.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges) NewSrlbsDescriptor(Range uint32) (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SrlbsDescriptor == nil {
		t.SrlbsDescriptor = make(map[uint32]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor)
	}

	key := Range

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SrlbsDescriptor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SrlbsDescriptor", key)
	}

	t.SrlbsDescriptor[key] = &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor{
		Range: &Range,
	}

	return t.SrlbsDescriptor[key], nil
}

// RenameSrlbsDescriptor renames an entry in the list SrlbsDescriptor within
// the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges) RenameSrlbsDescriptor(oldK, newK uint32) error {
	if _, ok := t.SrlbsDescriptor[newK]; ok {
		return fmt.Errorf("key %v already exists in SrlbsDescriptor", newK)
	}

	e, ok := t.SrlbsDescriptor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SrlbsDescriptor", oldK)
	}
	e.Range = &newK

	t.SrlbsDescriptor[newK] = e
	delete(t.SrlbsDescriptor, oldK)
	return nil
}

// GetOrCreateSrlbsDescriptorMap returns the list (map) from IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges.
//
// It initializes the field if not already initialized.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges) GetOrCreateSrlbsDescriptorMap() map[uint32]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor {
	if t.SrlbsDescriptor == nil {
		t.SrlbsDescriptor = make(map[uint32]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor)
	}
	return t.SrlbsDescriptor
}

// GetOrCreateSrlbsDescriptor retrieves the value with the specified keys from
// the receiver IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges) GetOrCreateSrlbsDescriptor(Range uint32) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor {

	key := Range

	if v, ok := t.SrlbsDescriptor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSrlbsDescriptor(Range)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSrlbsDescriptor got unexpected error: %v", err))
	}
	return v
}

// GetSrlbsDescriptor retrieves the value with the specified key from
// the SrlbsDescriptor map field of IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges) GetSrlbsDescriptor(Range uint32) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor {

	if t == nil {
		return nil
	}

	key := Range

	if lm, ok := t.SrlbsDescriptor[key]; ok {
		return lm
	}
	return nil
}

// DeleteSrlbsDescriptor deletes the value with the specified keys from
// the receiver IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges. If there is no such element, the function
// is a no-op.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges) DeleteSrlbsDescriptor(Range uint32) {
	key := Range

	delete(t.SrlbsDescriptor, key)
}

// AppendSrlbsDescriptor appends the supplied IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor struct to the
// list SrlbsDescriptor of IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges. If the key value(s) specified in
// the supplied IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor already exist in the list, an error is
// returned.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges) AppendSrlbsDescriptor(v *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor) error {
	if v.Range == nil {
		return fmt.Errorf("invalid nil key received for Range")
	}

	key := *v.Range

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SrlbsDescriptor == nil {
		t.SrlbsDescriptor = make(map[uint32]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor)
	}

	if _, ok := t.SrlbsDescriptor[key]; ok {
		return fmt.Errorf("duplicate key for list SrlbsDescriptor %v", key)
	}

	t.SrlbsDescriptor[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.SrlbsDescriptor {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/router-capabilities/capability/state/sr-local-block-ranges/state/srlbs-descriptor YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor struct {
	Range         *uint32 `path:"state/range|range" module:"open-traffic-generator-isis/open-traffic-generator-isis|open-traffic-generator-isis" shadow-path:"range" shadow-module:"open-traffic-generator-isis"`
	StartingLevel *uint32 `path:"state/starting-level" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor) IsYANGGoStruct() {
}

// GetRange retrieves the value of the leaf Range from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Range is set, it can
// safely use t.GetRange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Range == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor) GetRange() uint32 {
	if t == nil || t.Range == nil {
		return 0
	}
	return *t.Range
}

// GetStartingLevel retrieves the value of the leaf StartingLevel from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartingLevel is set, it can
// safely use t.GetStartingLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartingLevel == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor) GetStartingLevel() uint32 {
	if t == nil || t.StartingLevel == nil {
		return 0
	}
	return *t.StartingLevel
}

// SetRange sets the value of the leaf Range in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor) SetRange(v uint32) {
	t.Range = &v
}

// SetStartingLevel sets the value of the leaf StartingLevel in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor) SetStartingLevel(v uint32) {
	t.StartingLevel = &v
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor struct, which is a YANG list entry.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Range == nil {
		return nil, fmt.Errorf("nil value for key Range")
	}

	return map[string]interface{}{
		"range": *t.Range,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Capability_SrLocalBlockRanges_SrlbsDescriptor) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability struct {
	Prefix map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix `path:"prefixes/prefix" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability) IsYANGGoStruct() {}

// NewPrefix creates a new entry in the Prefix list of the
// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability struct. The keys of the list are populated from the input
// arguments.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability) NewPrefix(Prefix string) (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix)
	}

	key := Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix{
		Prefix: &Prefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.Prefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefixMap returns the list (map) from IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability.
//
// It initializes the field if not already initialized.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability) GetOrCreatePrefixMap() map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix {
	if t.Prefix == nil {
		t.Prefix = make(map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix)
	}
	return t.Prefix
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability) GetOrCreatePrefix(Prefix string) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix {

	key := Prefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability) GetPrefix(Prefix string) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix {

	if t == nil {
		return nil
	}

	key := Prefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability. If there is no such element, the function
// is a no-op.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability) DeletePrefix(Prefix string) {
	key := Prefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix struct to the
// list Prefix of IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability. If the key value(s) specified in
// the supplied IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix already exist in the list, an error is
// returned.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability) AppendPrefix(v *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key received for Prefix")
	}

	key := *v.Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix struct {
	Metric             *uint32                                                                                      `path:"state/metric" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	Prefix             *string                                                                                      `path:"state/prefix|prefix" module:"open-traffic-generator-isis/open-traffic-generator-isis|open-traffic-generator-isis" shadow-path:"prefix" shadow-module:"open-traffic-generator-isis"`
	PrefixAttributes   *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes     `path:"state/prefix-attributes" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	PrefixLength       *uint32                                                                                      `path:"state/prefix-length" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	PrefixSid          map[uint32]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid `path:"state/prefix-sid" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	RedistributionType E_ExtendedIpv4Reachability_Prefix_RedistributionType                                         `path:"state/redistribution-type" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix) IsYANGGoStruct() {}

// NewPrefixSid creates a new entry in the PrefixSid list of the
// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix struct. The keys of the list are populated from the input
// arguments.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix) NewPrefixSid(SidInstance uint32) (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixSid == nil {
		t.PrefixSid = make(map[uint32]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid)
	}

	key := SidInstance

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PrefixSid[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PrefixSid", key)
	}

	t.PrefixSid[key] = &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid{
		SidInstance: &SidInstance,
	}

	return t.PrefixSid[key], nil
}

// RenamePrefixSid renames an entry in the list PrefixSid within
// the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix) RenamePrefixSid(oldK, newK uint32) error {
	if _, ok := t.PrefixSid[newK]; ok {
		return fmt.Errorf("key %v already exists in PrefixSid", newK)
	}

	e, ok := t.PrefixSid[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PrefixSid", oldK)
	}
	e.SidInstance = &newK

	t.PrefixSid[newK] = e
	delete(t.PrefixSid, oldK)
	return nil
}

// GetOrCreatePrefixSidMap returns the list (map) from IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix.
//
// It initializes the field if not already initialized.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix) GetOrCreatePrefixSidMap() map[uint32]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid {
	if t.PrefixSid == nil {
		t.PrefixSid = make(map[uint32]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid)
	}
	return t.PrefixSid
}

// GetOrCreatePrefixSid retrieves the value with the specified keys from
// the receiver IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix) GetOrCreatePrefixSid(SidInstance uint32) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid {

	key := SidInstance

	if v, ok := t.PrefixSid[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefixSid(SidInstance)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefixSid got unexpected error: %v", err))
	}
	return v
}

// GetPrefixSid retrieves the value with the specified key from
// the PrefixSid map field of IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix) GetPrefixSid(SidInstance uint32) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid {

	if t == nil {
		return nil
	}

	key := SidInstance

	if lm, ok := t.PrefixSid[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefixSid deletes the value with the specified keys from
// the receiver IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix. If there is no such element, the function
// is a no-op.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix) DeletePrefixSid(SidInstance uint32) {
	key := SidInstance

	delete(t.PrefixSid, key)
}

// AppendPrefixSid appends the supplied IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid struct to the
// list PrefixSid of IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix. If the key value(s) specified in
// the supplied IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid already exist in the list, an error is
// returned.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix) AppendPrefixSid(v *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid) error {
	if v.SidInstance == nil {
		return fmt.Errorf("invalid nil key received for SidInstance")
	}

	key := *v.SidInstance

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixSid == nil {
		t.PrefixSid = make(map[uint32]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid)
	}

	if _, ok := t.PrefixSid[key]; ok {
		return fmt.Errorf("duplicate key for list PrefixSid %v", key)
	}

	t.PrefixSid[key] = v
	return nil
}

// GetOrCreatePrefixAttributes retrieves the value of the PrefixAttributes field
// or returns the existing field if it already exists.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix) GetOrCreatePrefixAttributes() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes {
	if t.PrefixAttributes != nil {
		return t.PrefixAttributes
	}
	t.PrefixAttributes = &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes{}
	return t.PrefixAttributes
}

// GetPrefixAttributes returns the value of the PrefixAttributes struct pointer
// from IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix. If the receiver or the field PrefixAttributes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix) GetPrefixAttributes() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes {
	if t != nil && t.PrefixAttributes != nil {
		return t.PrefixAttributes
	}
	return nil
}

// GetMetric retrieves the value of the leaf Metric from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetPrefix retrieves the value of the leaf Prefix from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// GetRedistributionType retrieves the value of the leaf RedistributionType from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedistributionType is set, it can
// safely use t.GetRedistributionType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedistributionType == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix) GetRedistributionType() E_ExtendedIpv4Reachability_Prefix_RedistributionType {
	if t == nil || t.RedistributionType == 0 {
		return 0
	}
	return t.RedistributionType
}

// SetMetric sets the value of the leaf Metric in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix) SetMetric(v uint32) {
	t.Metric = &v
}

// SetPrefix sets the value of the leaf Prefix in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix) SetPrefix(v string) {
	t.Prefix = &v
}

// SetPrefixLength sets the value of the leaf PrefixLength in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix) SetPrefixLength(v uint32) {
	t.PrefixLength = &v
}

// SetRedistributionType sets the value of the leaf RedistributionType in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix) SetRedistributionType(v E_ExtendedIpv4Reachability_Prefix_RedistributionType) {
	t.RedistributionType = v
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PrefixAttributes.PopulateDefaults()
	for _, e := range t.PrefixSid {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix struct, which is a YANG list entry.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"prefix": *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-attributes YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes struct {
	Flags []E_State_Flags `path:"flags" module:"open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes) IsYANGGoStruct() {
}

// GetFlags retrieves the value of the leaf Flags from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flags is set, it can
// safely use t.GetFlags() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flags == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes) GetFlags() []E_State_Flags {
	if t == nil || t.Flags == nil {
		return nil
	}
	return t.Flags
}

// SetFlags sets the value of the leaf Flags in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes) SetFlags(v []E_State_Flags) {
	t.Flags = v
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-sid YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid struct {
	Algorithm   *uint8              `path:"state/algorithm" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	Flags       []E_PrefixSid_Flags `path:"state/flags" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	SidInstance *uint32             `path:"state/sid-instance|sid-instance" module:"open-traffic-generator-isis/open-traffic-generator-isis|open-traffic-generator-isis" shadow-path:"sid-instance" shadow-module:"open-traffic-generator-isis"`
	Sids        []uint32            `path:"state/sids" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid) IsYANGGoStruct() {
}

// GetAlgorithm retrieves the value of the leaf Algorithm from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Algorithm is set, it can
// safely use t.GetAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Algorithm == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid) GetAlgorithm() uint8 {
	if t == nil || t.Algorithm == nil {
		return 0
	}
	return *t.Algorithm
}

// GetFlags retrieves the value of the leaf Flags from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flags is set, it can
// safely use t.GetFlags() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flags == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid) GetFlags() []E_PrefixSid_Flags {
	if t == nil || t.Flags == nil {
		return nil
	}
	return t.Flags
}

// GetSidInstance retrieves the value of the leaf SidInstance from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SidInstance is set, it can
// safely use t.GetSidInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SidInstance == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid) GetSidInstance() uint32 {
	if t == nil || t.SidInstance == nil {
		return 0
	}
	return *t.SidInstance
}

// GetSids retrieves the value of the leaf Sids from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sids is set, it can
// safely use t.GetSids() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sids == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid) GetSids() []uint32 {
	if t == nil || t.Sids == nil {
		return nil
	}
	return t.Sids
}

// SetAlgorithm sets the value of the leaf Algorithm in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid) SetAlgorithm(v uint8) {
	t.Algorithm = &v
}

// SetFlags sets the value of the leaf Flags in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid) SetFlags(v []E_PrefixSid_Flags) {
	t.Flags = v
}

// SetSidInstance sets the value of the leaf SidInstance in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid) SetSidInstance(v uint32) {
	t.SidInstance = &v
}

// SetSids sets the value of the leaf Sids in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid) SetSids(v []uint32) {
	t.Sids = v
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid struct, which is a YANG list entry.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SidInstance == nil {
		return nil, fmt.Errorf("nil value for key SidInstance")
	}

	return map[string]interface{}{
		"sid-instance": *t.SidInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixSid) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability struct {
	Neighbor map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor `path:"neighbors/neighbor" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability struct. The keys of the list are populated from the input
// arguments.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability) NewNeighbor(SystemId string) (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor)
	}

	key := SystemId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor{
		SystemId: &SystemId,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.SystemId = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighborMap returns the list (map) from IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability.
//
// It initializes the field if not already initialized.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability) GetOrCreateNeighborMap() map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor {
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor)
	}
	return t.Neighbor
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability) GetOrCreateNeighbor(SystemId string) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor {

	key := SystemId

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(SystemId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability) GetNeighbor(SystemId string) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor {

	if t == nil {
		return nil
	}

	key := SystemId

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability. If there is no such element, the function
// is a no-op.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability) DeleteNeighbor(SystemId string) {
	key := SystemId

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor struct to the
// list Neighbor of IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability. If the key value(s) specified in
// the supplied IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor already exist in the list, an error is
// returned.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability) AppendNeighbor(v *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor) error {
	if v.SystemId == nil {
		return fmt.Errorf("invalid nil key received for SystemId")
	}

	key := *v.SystemId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Neighbor {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor struct {
	AdjacencySid map[uint32]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid `path:"state/adjacency-sid" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	SystemId     *string                                                                                         `path:"state/system-id|system-id" module:"open-traffic-generator-isis/open-traffic-generator-isis|open-traffic-generator-isis" shadow-path:"system-id" shadow-module:"open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor) IsYANGGoStruct() {}

// NewAdjacencySid creates a new entry in the AdjacencySid list of the
// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor struct. The keys of the list are populated from the input
// arguments.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor) NewAdjacencySid(SidInstance uint32) (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdjacencySid == nil {
		t.AdjacencySid = make(map[uint32]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid)
	}

	key := SidInstance

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AdjacencySid[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AdjacencySid", key)
	}

	t.AdjacencySid[key] = &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid{
		SidInstance: &SidInstance,
	}

	return t.AdjacencySid[key], nil
}

// RenameAdjacencySid renames an entry in the list AdjacencySid within
// the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor) RenameAdjacencySid(oldK, newK uint32) error {
	if _, ok := t.AdjacencySid[newK]; ok {
		return fmt.Errorf("key %v already exists in AdjacencySid", newK)
	}

	e, ok := t.AdjacencySid[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AdjacencySid", oldK)
	}
	e.SidInstance = &newK

	t.AdjacencySid[newK] = e
	delete(t.AdjacencySid, oldK)
	return nil
}

// GetOrCreateAdjacencySidMap returns the list (map) from IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor.
//
// It initializes the field if not already initialized.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor) GetOrCreateAdjacencySidMap() map[uint32]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid {
	if t.AdjacencySid == nil {
		t.AdjacencySid = make(map[uint32]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid)
	}
	return t.AdjacencySid
}

// GetOrCreateAdjacencySid retrieves the value with the specified keys from
// the receiver IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor) GetOrCreateAdjacencySid(SidInstance uint32) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid {

	key := SidInstance

	if v, ok := t.AdjacencySid[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAdjacencySid(SidInstance)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAdjacencySid got unexpected error: %v", err))
	}
	return v
}

// GetAdjacencySid retrieves the value with the specified key from
// the AdjacencySid map field of IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor) GetAdjacencySid(SidInstance uint32) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid {

	if t == nil {
		return nil
	}

	key := SidInstance

	if lm, ok := t.AdjacencySid[key]; ok {
		return lm
	}
	return nil
}

// DeleteAdjacencySid deletes the value with the specified keys from
// the receiver IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor. If there is no such element, the function
// is a no-op.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor) DeleteAdjacencySid(SidInstance uint32) {
	key := SidInstance

	delete(t.AdjacencySid, key)
}

// AppendAdjacencySid appends the supplied IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid struct to the
// list AdjacencySid of IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor. If the key value(s) specified in
// the supplied IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid already exist in the list, an error is
// returned.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor) AppendAdjacencySid(v *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid) error {
	if v.SidInstance == nil {
		return fmt.Errorf("invalid nil key received for SidInstance")
	}

	key := *v.SidInstance

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdjacencySid == nil {
		t.AdjacencySid = make(map[uint32]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid)
	}

	if _, ok := t.AdjacencySid[key]; ok {
		return fmt.Errorf("duplicate key for list AdjacencySid %v", key)
	}

	t.AdjacencySid[key] = v
	return nil
}

// GetSystemId retrieves the value of the leaf SystemId from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemId is set, it can
// safely use t.GetSystemId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemId == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor) GetSystemId() string {
	if t == nil || t.SystemId == nil {
		return ""
	}
	return *t.SystemId
}

// SetSystemId sets the value of the leaf SystemId in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor) SetSystemId(v string) {
	t.SystemId = &v
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.AdjacencySid {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor struct, which is a YANG list entry.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SystemId == nil {
		return nil, fmt.Errorf("nil value for key SystemId")
	}

	return map[string]interface{}{
		"system-id": *t.SystemId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor/state/adjacency-sid YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid struct {
	AdjacencyType E_AdjacencySid_AdjacencyType `path:"state/adjacency-type" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	Flags         []E_AdjacencySid_Flags       `path:"state/flags" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	SidInstance   *uint32                      `path:"state/sid-instance|sid-instance" module:"open-traffic-generator-isis/open-traffic-generator-isis|open-traffic-generator-isis" shadow-path:"sid-instance" shadow-module:"open-traffic-generator-isis"`
	Sids          []uint32                     `path:"state/sids" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	Weight        *uint8                       `path:"state/weight" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid) IsYANGGoStruct() {
}

// GetAdjacencyType retrieves the value of the leaf AdjacencyType from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdjacencyType is set, it can
// safely use t.GetAdjacencyType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdjacencyType == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid) GetAdjacencyType() E_AdjacencySid_AdjacencyType {
	if t == nil || t.AdjacencyType == 0 {
		return 0
	}
	return t.AdjacencyType
}

// GetFlags retrieves the value of the leaf Flags from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flags is set, it can
// safely use t.GetFlags() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flags == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid) GetFlags() []E_AdjacencySid_Flags {
	if t == nil || t.Flags == nil {
		return nil
	}
	return t.Flags
}

// GetSidInstance retrieves the value of the leaf SidInstance from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SidInstance is set, it can
// safely use t.GetSidInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SidInstance == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid) GetSidInstance() uint32 {
	if t == nil || t.SidInstance == nil {
		return 0
	}
	return *t.SidInstance
}

// GetSids retrieves the value of the leaf Sids from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sids is set, it can
// safely use t.GetSids() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sids == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid) GetSids() []uint32 {
	if t == nil || t.Sids == nil {
		return nil
	}
	return t.Sids
}

// GetWeight retrieves the value of the leaf Weight from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid) GetWeight() uint8 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// SetAdjacencyType sets the value of the leaf AdjacencyType in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid) SetAdjacencyType(v E_AdjacencySid_AdjacencyType) {
	t.AdjacencyType = v
}

// SetFlags sets the value of the leaf Flags in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid) SetFlags(v []E_AdjacencySid_Flags) {
	t.Flags = v
}

// SetSidInstance sets the value of the leaf SidInstance in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid) SetSidInstance(v uint32) {
	t.SidInstance = &v
}

// SetSids sets the value of the leaf Sids in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid) SetSids(v []uint32) {
	t.Sids = v
}

// SetWeight sets the value of the leaf Weight in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid) SetWeight(v uint8) {
	t.Weight = &v
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid struct, which is a YANG list entry.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SidInstance == nil {
		return nil, fmt.Errorf("nil value for key SidInstance")
	}

	return map[string]interface{}{
		"sid-instance": *t.SidInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor_AdjacencySid) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/hostnames YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames struct {
	Hostname []string `path:"state/hostname" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames) IsYANGGoStruct() {}

// GetHostname retrieves the value of the leaf Hostname from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Hostname is set, it can
// safely use t.GetHostname() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Hostname == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames) GetHostname() []string {
	if t == nil || t.Hostname == nil {
		return nil
	}
	return t.Hostname
}

// SetHostname sets the value of the leaf Hostname in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames) SetHostname(v []string) {
	t.Hostname = v
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability struct {
	Prefix map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix `path:"prefixes/prefix" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability) IsYANGGoStruct() {}

// NewPrefix creates a new entry in the Prefix list of the
// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability struct. The keys of the list are populated from the input
// arguments.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability) NewPrefix(Prefix string) (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix)
	}

	key := Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix{
		Prefix: &Prefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.Prefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefixMap returns the list (map) from IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability.
//
// It initializes the field if not already initialized.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability) GetOrCreatePrefixMap() map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix {
	if t.Prefix == nil {
		t.Prefix = make(map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix)
	}
	return t.Prefix
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability) GetOrCreatePrefix(Prefix string) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix {

	key := Prefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability) GetPrefix(Prefix string) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix {

	if t == nil {
		return nil
	}

	key := Prefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability. If there is no such element, the function
// is a no-op.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability) DeletePrefix(Prefix string) {
	key := Prefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix struct to the
// list Prefix of IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability. If the key value(s) specified in
// the supplied IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix already exist in the list, an error is
// returned.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability) AppendPrefix(v *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key received for Prefix")
	}

	key := *v.Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability/prefixes/prefix YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix struct {
	DefaultMetric      *uint8                                               `path:"state/default-metric" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	OriginType         E_Ipv4ExternalReachability_Prefix_OriginType         `path:"state/origin-type" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	Prefix             *string                                              `path:"state/prefix|prefix" module:"open-traffic-generator-isis/open-traffic-generator-isis|open-traffic-generator-isis" shadow-path:"prefix" shadow-module:"open-traffic-generator-isis"`
	PrefixLength       *uint32                                              `path:"state/prefix-length" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	RedistributionType E_Ipv4ExternalReachability_Prefix_RedistributionType `path:"state/redistribution-type" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix) IsYANGGoStruct() {}

// GetDefaultMetric retrieves the value of the leaf DefaultMetric from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultMetric is set, it can
// safely use t.GetDefaultMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultMetric == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix) GetDefaultMetric() uint8 {
	if t == nil || t.DefaultMetric == nil {
		return 0
	}
	return *t.DefaultMetric
}

// GetOriginType retrieves the value of the leaf OriginType from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginType is set, it can
// safely use t.GetOriginType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginType == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix) GetOriginType() E_Ipv4ExternalReachability_Prefix_OriginType {
	if t == nil || t.OriginType == 0 {
		return 0
	}
	return t.OriginType
}

// GetPrefix retrieves the value of the leaf Prefix from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// GetRedistributionType retrieves the value of the leaf RedistributionType from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedistributionType is set, it can
// safely use t.GetRedistributionType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedistributionType == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix) GetRedistributionType() E_Ipv4ExternalReachability_Prefix_RedistributionType {
	if t == nil || t.RedistributionType == 0 {
		return 0
	}
	return t.RedistributionType
}

// SetDefaultMetric sets the value of the leaf DefaultMetric in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix) SetDefaultMetric(v uint8) {
	t.DefaultMetric = &v
}

// SetOriginType sets the value of the leaf OriginType in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix) SetOriginType(v E_Ipv4ExternalReachability_Prefix_OriginType) {
	t.OriginType = v
}

// SetPrefix sets the value of the leaf Prefix in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix) SetPrefix(v string) {
	t.Prefix = &v
}

// SetPrefixLength sets the value of the leaf PrefixLength in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix) SetPrefixLength(v uint32) {
	t.PrefixLength = &v
}

// SetRedistributionType sets the value of the leaf RedistributionType in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix) SetRedistributionType(v E_Ipv4ExternalReachability_Prefix_RedistributionType) {
	t.RedistributionType = v
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix struct, which is a YANG list entry.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"prefix": *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability struct {
	Prefix map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix `path:"prefixes/prefix" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability) IsYANGGoStruct() {}

// NewPrefix creates a new entry in the Prefix list of the
// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability struct. The keys of the list are populated from the input
// arguments.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability) NewPrefix(Prefix string) (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix)
	}

	key := Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix{
		Prefix: &Prefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.Prefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefixMap returns the list (map) from IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability.
//
// It initializes the field if not already initialized.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability) GetOrCreatePrefixMap() map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix {
	if t.Prefix == nil {
		t.Prefix = make(map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix)
	}
	return t.Prefix
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability) GetOrCreatePrefix(Prefix string) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix {

	key := Prefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability) GetPrefix(Prefix string) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix {

	if t == nil {
		return nil
	}

	key := Prefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability. If there is no such element, the function
// is a no-op.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability) DeletePrefix(Prefix string) {
	key := Prefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix struct to the
// list Prefix of IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability. If the key value(s) specified in
// the supplied IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix already exist in the list, an error is
// returned.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability) AppendPrefix(v *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key received for Prefix")
	}

	key := *v.Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability/prefixes/prefix YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix struct {
	DefaultMetric      *uint8                                               `path:"state/default-metric" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	OriginType         E_Ipv4ExternalReachability_Prefix_OriginType         `path:"state/origin-type" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	Prefix             *string                                              `path:"state/prefix|prefix" module:"open-traffic-generator-isis/open-traffic-generator-isis|open-traffic-generator-isis" shadow-path:"prefix" shadow-module:"open-traffic-generator-isis"`
	PrefixLength       *uint32                                              `path:"state/prefix-length" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	RedistributionType E_Ipv4ExternalReachability_Prefix_RedistributionType `path:"state/redistribution-type" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix) IsYANGGoStruct() {}

// GetDefaultMetric retrieves the value of the leaf DefaultMetric from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultMetric is set, it can
// safely use t.GetDefaultMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultMetric == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix) GetDefaultMetric() uint8 {
	if t == nil || t.DefaultMetric == nil {
		return 0
	}
	return *t.DefaultMetric
}

// GetOriginType retrieves the value of the leaf OriginType from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginType is set, it can
// safely use t.GetOriginType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginType == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix) GetOriginType() E_Ipv4ExternalReachability_Prefix_OriginType {
	if t == nil || t.OriginType == 0 {
		return 0
	}
	return t.OriginType
}

// GetPrefix retrieves the value of the leaf Prefix from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// GetRedistributionType retrieves the value of the leaf RedistributionType from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedistributionType is set, it can
// safely use t.GetRedistributionType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedistributionType == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix) GetRedistributionType() E_Ipv4ExternalReachability_Prefix_RedistributionType {
	if t == nil || t.RedistributionType == 0 {
		return 0
	}
	return t.RedistributionType
}

// SetDefaultMetric sets the value of the leaf DefaultMetric in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix) SetDefaultMetric(v uint8) {
	t.DefaultMetric = &v
}

// SetOriginType sets the value of the leaf OriginType in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix) SetOriginType(v E_Ipv4ExternalReachability_Prefix_OriginType) {
	t.OriginType = v
}

// SetPrefix sets the value of the leaf Prefix in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix) SetPrefix(v string) {
	t.Prefix = &v
}

// SetPrefixLength sets the value of the leaf PrefixLength in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix) SetPrefixLength(v uint32) {
	t.PrefixLength = &v
}

// SetRedistributionType sets the value of the leaf RedistributionType in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix) SetRedistributionType(v E_Ipv4ExternalReachability_Prefix_RedistributionType) {
	t.RedistributionType = v
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix struct, which is a YANG list entry.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"prefix": *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability struct {
	Prefix map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix `path:"prefixes/prefix" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability) IsYANGGoStruct() {}

// NewPrefix creates a new entry in the Prefix list of the
// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability struct. The keys of the list are populated from the input
// arguments.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability) NewPrefix(Prefix string) (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix)
	}

	key := Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix{
		Prefix: &Prefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.Prefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefixMap returns the list (map) from IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability.
//
// It initializes the field if not already initialized.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability) GetOrCreatePrefixMap() map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix {
	if t.Prefix == nil {
		t.Prefix = make(map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix)
	}
	return t.Prefix
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability) GetOrCreatePrefix(Prefix string) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix {

	key := Prefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability) GetPrefix(Prefix string) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix {

	if t == nil {
		return nil
	}

	key := Prefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability. If there is no such element, the function
// is a no-op.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability) DeletePrefix(Prefix string) {
	key := Prefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix struct to the
// list Prefix of IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability. If the key value(s) specified in
// the supplied IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix already exist in the list, an error is
// returned.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability) AppendPrefix(v *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key received for Prefix")
	}

	key := *v.Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix struct {
	Metric             *uint32                                                                              `path:"state/metric" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	OriginType         E_Ipv6Reachability_Prefix_OriginType                                                 `path:"state/origin-type" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	Prefix             *string                                                                              `path:"state/prefix|prefix" module:"open-traffic-generator-isis/open-traffic-generator-isis|open-traffic-generator-isis" shadow-path:"prefix" shadow-module:"open-traffic-generator-isis"`
	PrefixAttributes   *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributes     `path:"state/prefix-attributes" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	PrefixLength       *uint32                                                                              `path:"state/prefix-length" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	PrefixSid          map[uint32]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid `path:"state/prefix-sid" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	RedistributionType E_Ipv6Reachability_Prefix_RedistributionType                                         `path:"state/redistribution-type" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix) IsYANGGoStruct() {}

// NewPrefixSid creates a new entry in the PrefixSid list of the
// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix struct. The keys of the list are populated from the input
// arguments.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix) NewPrefixSid(SidInstance uint32) (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixSid == nil {
		t.PrefixSid = make(map[uint32]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid)
	}

	key := SidInstance

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PrefixSid[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PrefixSid", key)
	}

	t.PrefixSid[key] = &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid{
		SidInstance: &SidInstance,
	}

	return t.PrefixSid[key], nil
}

// RenamePrefixSid renames an entry in the list PrefixSid within
// the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix) RenamePrefixSid(oldK, newK uint32) error {
	if _, ok := t.PrefixSid[newK]; ok {
		return fmt.Errorf("key %v already exists in PrefixSid", newK)
	}

	e, ok := t.PrefixSid[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PrefixSid", oldK)
	}
	e.SidInstance = &newK

	t.PrefixSid[newK] = e
	delete(t.PrefixSid, oldK)
	return nil
}

// GetOrCreatePrefixSidMap returns the list (map) from IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix.
//
// It initializes the field if not already initialized.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix) GetOrCreatePrefixSidMap() map[uint32]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid {
	if t.PrefixSid == nil {
		t.PrefixSid = make(map[uint32]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid)
	}
	return t.PrefixSid
}

// GetOrCreatePrefixSid retrieves the value with the specified keys from
// the receiver IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix) GetOrCreatePrefixSid(SidInstance uint32) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid {

	key := SidInstance

	if v, ok := t.PrefixSid[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefixSid(SidInstance)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefixSid got unexpected error: %v", err))
	}
	return v
}

// GetPrefixSid retrieves the value with the specified key from
// the PrefixSid map field of IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix) GetPrefixSid(SidInstance uint32) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid {

	if t == nil {
		return nil
	}

	key := SidInstance

	if lm, ok := t.PrefixSid[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefixSid deletes the value with the specified keys from
// the receiver IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix. If there is no such element, the function
// is a no-op.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix) DeletePrefixSid(SidInstance uint32) {
	key := SidInstance

	delete(t.PrefixSid, key)
}

// AppendPrefixSid appends the supplied IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid struct to the
// list PrefixSid of IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix. If the key value(s) specified in
// the supplied IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid already exist in the list, an error is
// returned.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix) AppendPrefixSid(v *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid) error {
	if v.SidInstance == nil {
		return fmt.Errorf("invalid nil key received for SidInstance")
	}

	key := *v.SidInstance

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixSid == nil {
		t.PrefixSid = make(map[uint32]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid)
	}

	if _, ok := t.PrefixSid[key]; ok {
		return fmt.Errorf("duplicate key for list PrefixSid %v", key)
	}

	t.PrefixSid[key] = v
	return nil
}

// GetOrCreatePrefixAttributes retrieves the value of the PrefixAttributes field
// or returns the existing field if it already exists.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix) GetOrCreatePrefixAttributes() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributes {
	if t.PrefixAttributes != nil {
		return t.PrefixAttributes
	}
	t.PrefixAttributes = &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributes{}
	return t.PrefixAttributes
}

// GetPrefixAttributes returns the value of the PrefixAttributes struct pointer
// from IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix. If the receiver or the field PrefixAttributes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix) GetPrefixAttributes() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributes {
	if t != nil && t.PrefixAttributes != nil {
		return t.PrefixAttributes
	}
	return nil
}

// GetMetric retrieves the value of the leaf Metric from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetOriginType retrieves the value of the leaf OriginType from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginType is set, it can
// safely use t.GetOriginType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginType == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix) GetOriginType() E_Ipv6Reachability_Prefix_OriginType {
	if t == nil || t.OriginType == 0 {
		return 0
	}
	return t.OriginType
}

// GetPrefix retrieves the value of the leaf Prefix from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// GetRedistributionType retrieves the value of the leaf RedistributionType from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedistributionType is set, it can
// safely use t.GetRedistributionType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedistributionType == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix) GetRedistributionType() E_Ipv6Reachability_Prefix_RedistributionType {
	if t == nil || t.RedistributionType == 0 {
		return 0
	}
	return t.RedistributionType
}

// SetMetric sets the value of the leaf Metric in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix) SetMetric(v uint32) {
	t.Metric = &v
}

// SetOriginType sets the value of the leaf OriginType in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix) SetOriginType(v E_Ipv6Reachability_Prefix_OriginType) {
	t.OriginType = v
}

// SetPrefix sets the value of the leaf Prefix in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix) SetPrefix(v string) {
	t.Prefix = &v
}

// SetPrefixLength sets the value of the leaf PrefixLength in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix) SetPrefixLength(v uint32) {
	t.PrefixLength = &v
}

// SetRedistributionType sets the value of the leaf RedistributionType in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix) SetRedistributionType(v E_Ipv6Reachability_Prefix_RedistributionType) {
	t.RedistributionType = v
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PrefixAttributes.PopulateDefaults()
	for _, e := range t.PrefixSid {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix struct, which is a YANG list entry.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"prefix": *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributes represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-attributes YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributes struct {
	Flags []E_State_Flags `path:"flags" module:"open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributes) IsYANGGoStruct() {
}

// GetFlags retrieves the value of the leaf Flags from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flags is set, it can
// safely use t.GetFlags() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flags == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributes) GetFlags() []E_State_Flags {
	if t == nil || t.Flags == nil {
		return nil
	}
	return t.Flags
}

// SetFlags sets the value of the leaf Flags in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributes
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributes) SetFlags(v []E_State_Flags) {
	t.Flags = v
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributes.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixAttributes) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv6-reachability/prefixes/prefix/state/prefix-sid YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid struct {
	Algorithm   *uint8              `path:"state/algorithm" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	Flags       []E_PrefixSid_Flags `path:"state/flags" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	SidInstance *uint32             `path:"state/sid-instance|sid-instance" module:"open-traffic-generator-isis/open-traffic-generator-isis|open-traffic-generator-isis" shadow-path:"sid-instance" shadow-module:"open-traffic-generator-isis"`
	Sids        []uint32            `path:"state/sids" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid) IsYANGGoStruct() {}

// GetAlgorithm retrieves the value of the leaf Algorithm from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Algorithm is set, it can
// safely use t.GetAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Algorithm == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid) GetAlgorithm() uint8 {
	if t == nil || t.Algorithm == nil {
		return 0
	}
	return *t.Algorithm
}

// GetFlags retrieves the value of the leaf Flags from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flags is set, it can
// safely use t.GetFlags() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flags == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid) GetFlags() []E_PrefixSid_Flags {
	if t == nil || t.Flags == nil {
		return nil
	}
	return t.Flags
}

// GetSidInstance retrieves the value of the leaf SidInstance from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SidInstance is set, it can
// safely use t.GetSidInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SidInstance == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid) GetSidInstance() uint32 {
	if t == nil || t.SidInstance == nil {
		return 0
	}
	return *t.SidInstance
}

// GetSids retrieves the value of the leaf Sids from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sids is set, it can
// safely use t.GetSids() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sids == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid) GetSids() []uint32 {
	if t == nil || t.Sids == nil {
		return nil
	}
	return t.Sids
}

// SetAlgorithm sets the value of the leaf Algorithm in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid) SetAlgorithm(v uint8) {
	t.Algorithm = &v
}

// SetFlags sets the value of the leaf Flags in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid) SetFlags(v []E_PrefixSid_Flags) {
	t.Flags = v
}

// SetSidInstance sets the value of the leaf SidInstance in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid) SetSidInstance(v uint32) {
	t.SidInstance = &v
}

// SetSids sets the value of the leaf Sids in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid) SetSids(v []uint32) {
	t.Sids = v
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid struct, which is a YANG list entry.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SidInstance == nil {
		return nil, fmt.Errorf("nil value for key SidInstance")
	}

	return map[string]interface{}{
		"sid-instance": *t.SidInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability_Prefix_PrefixSid) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/is-reachability YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability struct {
	Neighbor map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor `path:"neighbors/neighbor" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability struct. The keys of the list are populated from the input
// arguments.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability) NewNeighbor(SystemId string) (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor)
	}

	key := SystemId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor{
		SystemId: &SystemId,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.SystemId = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighborMap returns the list (map) from IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability.
//
// It initializes the field if not already initialized.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability) GetOrCreateNeighborMap() map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor {
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor)
	}
	return t.Neighbor
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability) GetOrCreateNeighbor(SystemId string) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor {

	key := SystemId

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(SystemId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability) GetNeighbor(SystemId string) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor {

	if t == nil {
		return nil
	}

	key := SystemId

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability. If there is no such element, the function
// is a no-op.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability) DeleteNeighbor(SystemId string) {
	key := SystemId

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor struct to the
// list Neighbor of IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability. If the key value(s) specified in
// the supplied IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor already exist in the list, an error is
// returned.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability) AppendNeighbor(v *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor) error {
	if v.SystemId == nil {
		return fmt.Errorf("invalid nil key received for SystemId")
	}

	key := *v.SystemId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Neighbor {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/is-reachability/neighbors/neighbor YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor struct {
	SystemId *string `path:"state/system-id|system-id" module:"open-traffic-generator-isis/open-traffic-generator-isis|open-traffic-generator-isis" shadow-path:"system-id" shadow-module:"open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor) IsYANGGoStruct() {}

// GetSystemId retrieves the value of the leaf SystemId from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemId is set, it can
// safely use t.GetSystemId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemId == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor) GetSystemId() string {
	if t == nil || t.SystemId == nil {
		return ""
	}
	return *t.SystemId
}

// SetSystemId sets the value of the leaf SystemId in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor) SetSystemId(v string) {
	t.SystemId = &v
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor struct, which is a YANG list entry.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SystemId == nil {
		return nil, fmt.Errorf("nil value for key SystemId")
	}

	return map[string]interface{}{
		"system-id": *t.SystemId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// Lacp represents the /open-traffic-generator-lacp/lacp YANG schema element.
type Lacp struct {
	LagMember map[string]*Lacp_LagMember `path:"lag-members/lag-member" module:"open-traffic-generator-lacp/open-traffic-generator-lacp"`
}

// IsYANGGoStruct ensures that Lacp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Lacp) IsYANGGoStruct() {}

// NewLagMember creates a new entry in the LagMember list of the
// Lacp struct. The keys of the list are populated from the input
// arguments.
func (t *Lacp) NewLagMember(Name string) (*Lacp_LagMember, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LagMember == nil {
		t.LagMember = make(map[string]*Lacp_LagMember)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LagMember[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LagMember", key)
	}

	t.LagMember[key] = &Lacp_LagMember{
		Name: &Name,
	}

	return t.LagMember[key], nil
}

// RenameLagMember renames an entry in the list LagMember within
// the Lacp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Lacp) RenameLagMember(oldK, newK string) error {
	if _, ok := t.LagMember[newK]; ok {
		return fmt.Errorf("key %v already exists in LagMember", newK)
	}

	e, ok := t.LagMember[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LagMember", oldK)
	}
	e.Name = &newK

	t.LagMember[newK] = e
	delete(t.LagMember, oldK)
	return nil
}

// GetOrCreateLagMemberMap returns the list (map) from Lacp.
//
// It initializes the field if not already initialized.
func (t *Lacp) GetOrCreateLagMemberMap() map[string]*Lacp_LagMember {
	if t.LagMember == nil {
		t.LagMember = make(map[string]*Lacp_LagMember)
	}
	return t.LagMember
}

// GetOrCreateLagMember retrieves the value with the specified keys from
// the receiver Lacp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Lacp) GetOrCreateLagMember(Name string) *Lacp_LagMember {

	key := Name

	if v, ok := t.LagMember[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLagMember(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLagMember got unexpected error: %v", err))
	}
	return v
}

// GetLagMember retrieves the value with the specified key from
// the LagMember map field of Lacp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Lacp) GetLagMember(Name string) *Lacp_LagMember {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.LagMember[key]; ok {
		return lm
	}
	return nil
}

// DeleteLagMember deletes the value with the specified keys from
// the receiver Lacp. If there is no such element, the function
// is a no-op.
func (t *Lacp) DeleteLagMember(Name string) {
	key := Name

	delete(t.LagMember, key)
}

// AppendLagMember appends the supplied Lacp_LagMember struct to the
// list LagMember of Lacp. If the key value(s) specified in
// the supplied Lacp_LagMember already exist in the list, an error is
// returned.
func (t *Lacp) AppendLagMember(v *Lacp_LagMember) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LagMember == nil {
		t.LagMember = make(map[string]*Lacp_LagMember)
	}

	if _, ok := t.LagMember[key]; ok {
		return fmt.Errorf("duplicate key for list LagMember %v", key)
	}

	t.LagMember[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Lacp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Lacp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.LagMember {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lacp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Lacp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lacp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Lacp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Lacp.
func (*Lacp) ΛBelongingModule() string {
	return "open-traffic-generator-lacp"
}

// Lacp_LagMember represents the /open-traffic-generator-lacp/lacp/lag-members/lag-member YANG schema element.
type Lacp_LagMember struct {
	Activity        E_Lacp_LacpActivityType        `path:"state/activity" module:"open-traffic-generator-lacp/open-traffic-generator-lacp"`
	Aggregatable    *bool                          `path:"state/aggregatable" module:"open-traffic-generator-lacp/open-traffic-generator-lacp"`
	Collecting      *bool                          `path:"state/collecting" module:"open-traffic-generator-lacp/open-traffic-generator-lacp"`
	Counters        *Lacp_LagMember_Counters       `path:"state/counters" module:"open-traffic-generator-lacp/open-traffic-generator-lacp"`
	Distributing    *bool                          `path:"state/distributing" module:"open-traffic-generator-lacp/open-traffic-generator-lacp"`
	Name            *string                        `path:"state/name|name" module:"open-traffic-generator-lacp/open-traffic-generator-lacp|open-traffic-generator-lacp" shadow-path:"name" shadow-module:"open-traffic-generator-lacp"`
	OperKey         *uint16                        `path:"state/oper-key" module:"open-traffic-generator-lacp/open-traffic-generator-lacp"`
	PartnerId       *string                        `path:"state/partner-id" module:"open-traffic-generator-lacp/open-traffic-generator-lacp"`
	PartnerKey      *uint16                        `path:"state/partner-key" module:"open-traffic-generator-lacp/open-traffic-generator-lacp"`
	PartnerPortNum  *uint16                        `path:"state/partner-port-num" module:"open-traffic-generator-lacp/open-traffic-generator-lacp"`
	PortNum         *uint16                        `path:"state/port-num" module:"open-traffic-generator-lacp/open-traffic-generator-lacp"`
	Synchronization E_Lacp_LacpSynchronizationType `path:"state/synchronization" module:"open-traffic-generator-lacp/open-traffic-generator-lacp"`
	SystemId        *string                        `path:"state/system-id" module:"open-traffic-generator-lacp/open-traffic-generator-lacp"`
	Timeout         E_Lacp_LacpTimeoutType         `path:"state/timeout" module:"open-traffic-generator-lacp/open-traffic-generator-lacp"`
}

// IsYANGGoStruct ensures that Lacp_LagMember implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Lacp_LagMember) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Lacp_LagMember) GetOrCreateCounters() *Lacp_LagMember_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Lacp_LagMember_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from Lacp_LagMember. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Lacp_LagMember) GetCounters() *Lacp_LagMember_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetActivity retrieves the value of the leaf Activity from the Lacp_LagMember
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Activity is set, it can
// safely use t.GetActivity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Activity == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember) GetActivity() E_Lacp_LacpActivityType {
	if t == nil || t.Activity == 0 {
		return 0
	}
	return t.Activity
}

// GetAggregatable retrieves the value of the leaf Aggregatable from the Lacp_LagMember
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Aggregatable is set, it can
// safely use t.GetAggregatable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Aggregatable == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember) GetAggregatable() bool {
	if t == nil || t.Aggregatable == nil {
		return false
	}
	return *t.Aggregatable
}

// GetCollecting retrieves the value of the leaf Collecting from the Lacp_LagMember
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Collecting is set, it can
// safely use t.GetCollecting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Collecting == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember) GetCollecting() bool {
	if t == nil || t.Collecting == nil {
		return false
	}
	return *t.Collecting
}

// GetDistributing retrieves the value of the leaf Distributing from the Lacp_LagMember
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Distributing is set, it can
// safely use t.GetDistributing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Distributing == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember) GetDistributing() bool {
	if t == nil || t.Distributing == nil {
		return false
	}
	return *t.Distributing
}

// GetName retrieves the value of the leaf Name from the Lacp_LagMember
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOperKey retrieves the value of the leaf OperKey from the Lacp_LagMember
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperKey is set, it can
// safely use t.GetOperKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperKey == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember) GetOperKey() uint16 {
	if t == nil || t.OperKey == nil {
		return 0
	}
	return *t.OperKey
}

// GetPartnerId retrieves the value of the leaf PartnerId from the Lacp_LagMember
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PartnerId is set, it can
// safely use t.GetPartnerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PartnerId == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember) GetPartnerId() string {
	if t == nil || t.PartnerId == nil {
		return ""
	}
	return *t.PartnerId
}

// GetPartnerKey retrieves the value of the leaf PartnerKey from the Lacp_LagMember
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PartnerKey is set, it can
// safely use t.GetPartnerKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PartnerKey == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember) GetPartnerKey() uint16 {
	if t == nil || t.PartnerKey == nil {
		return 0
	}
	return *t.PartnerKey
}

// GetPartnerPortNum retrieves the value of the leaf PartnerPortNum from the Lacp_LagMember
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PartnerPortNum is set, it can
// safely use t.GetPartnerPortNum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PartnerPortNum == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember) GetPartnerPortNum() uint16 {
	if t == nil || t.PartnerPortNum == nil {
		return 0
	}
	return *t.PartnerPortNum
}

// GetPortNum retrieves the value of the leaf PortNum from the Lacp_LagMember
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortNum is set, it can
// safely use t.GetPortNum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortNum == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember) GetPortNum() uint16 {
	if t == nil || t.PortNum == nil {
		return 0
	}
	return *t.PortNum
}

// GetSynchronization retrieves the value of the leaf Synchronization from the Lacp_LagMember
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Synchronization is set, it can
// safely use t.GetSynchronization() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Synchronization == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember) GetSynchronization() E_Lacp_LacpSynchronizationType {
	if t == nil || t.Synchronization == 0 {
		return 0
	}
	return t.Synchronization
}

// GetSystemId retrieves the value of the leaf SystemId from the Lacp_LagMember
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemId is set, it can
// safely use t.GetSystemId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemId == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember) GetSystemId() string {
	if t == nil || t.SystemId == nil {
		return ""
	}
	return *t.SystemId
}

// GetTimeout retrieves the value of the leaf Timeout from the Lacp_LagMember
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember) GetTimeout() E_Lacp_LacpTimeoutType {
	if t == nil || t.Timeout == 0 {
		return 0
	}
	return t.Timeout
}

// SetActivity sets the value of the leaf Activity in the Lacp_LagMember
// struct.
func (t *Lacp_LagMember) SetActivity(v E_Lacp_LacpActivityType) {
	t.Activity = v
}

// SetAggregatable sets the value of the leaf Aggregatable in the Lacp_LagMember
// struct.
func (t *Lacp_LagMember) SetAggregatable(v bool) {
	t.Aggregatable = &v
}

// SetCollecting sets the value of the leaf Collecting in the Lacp_LagMember
// struct.
func (t *Lacp_LagMember) SetCollecting(v bool) {
	t.Collecting = &v
}

// SetDistributing sets the value of the leaf Distributing in the Lacp_LagMember
// struct.
func (t *Lacp_LagMember) SetDistributing(v bool) {
	t.Distributing = &v
}

// SetName sets the value of the leaf Name in the Lacp_LagMember
// struct.
func (t *Lacp_LagMember) SetName(v string) {
	t.Name = &v
}

// SetOperKey sets the value of the leaf OperKey in the Lacp_LagMember
// struct.
func (t *Lacp_LagMember) SetOperKey(v uint16) {
	t.OperKey = &v
}

// SetPartnerId sets the value of the leaf PartnerId in the Lacp_LagMember
// struct.
func (t *Lacp_LagMember) SetPartnerId(v string) {
	t.PartnerId = &v
}

// SetPartnerKey sets the value of the leaf PartnerKey in the Lacp_LagMember
// struct.
func (t *Lacp_LagMember) SetPartnerKey(v uint16) {
	t.PartnerKey = &v
}

// SetPartnerPortNum sets the value of the leaf PartnerPortNum in the Lacp_LagMember
// struct.
func (t *Lacp_LagMember) SetPartnerPortNum(v uint16) {
	t.PartnerPortNum = &v
}

// SetPortNum sets the value of the leaf PortNum in the Lacp_LagMember
// struct.
func (t *Lacp_LagMember) SetPortNum(v uint16) {
	t.PortNum = &v
}

// SetSynchronization sets the value of the leaf Synchronization in the Lacp_LagMember
// struct.
func (t *Lacp_LagMember) SetSynchronization(v E_Lacp_LacpSynchronizationType) {
	t.Synchronization = v
}

// SetSystemId sets the value of the leaf SystemId in the Lacp_LagMember
// struct.
func (t *Lacp_LagMember) SetSystemId(v string) {
	t.SystemId = &v
}

// SetTimeout sets the value of the leaf Timeout in the Lacp_LagMember
// struct.
func (t *Lacp_LagMember) SetTimeout(v E_Lacp_LacpTimeoutType) {
	t.Timeout = v
}

// PopulateDefaults recursively populates unset leaf fields in the Lacp_LagMember
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Lacp_LagMember) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Counters.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the Lacp_LagMember struct, which is a YANG list entry.
func (t *Lacp_LagMember) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lacp_LagMember) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Lacp_LagMember"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lacp_LagMember) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Lacp_LagMember) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Lacp_LagMember.
func (*Lacp_LagMember) ΛBelongingModule() string {
	return "open-traffic-generator-lacp"
}

// Lacp_LagMember_Counters represents the /open-traffic-generator-lacp/lacp/lag-members/lag-member/state/counters YANG schema element.
type Lacp_LagMember_Counters struct {
	LacpInPkts   *uint64 `path:"lacp-in-pkts" module:"open-traffic-generator-lacp"`
	LacpOutPkts  *uint64 `path:"lacp-out-pkts" module:"open-traffic-generator-lacp"`
	LacpRxErrors *uint64 `path:"lacp-rx-errors" module:"open-traffic-generator-lacp"`
}

// IsYANGGoStruct ensures that Lacp_LagMember_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Lacp_LagMember_Counters) IsYANGGoStruct() {}

// GetLacpInPkts retrieves the value of the leaf LacpInPkts from the Lacp_LagMember_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LacpInPkts is set, it can
// safely use t.GetLacpInPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LacpInPkts == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember_Counters) GetLacpInPkts() uint64 {
	if t == nil || t.LacpInPkts == nil {
		return 0
	}
	return *t.LacpInPkts
}

// GetLacpOutPkts retrieves the value of the leaf LacpOutPkts from the Lacp_LagMember_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LacpOutPkts is set, it can
// safely use t.GetLacpOutPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LacpOutPkts == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember_Counters) GetLacpOutPkts() uint64 {
	if t == nil || t.LacpOutPkts == nil {
		return 0
	}
	return *t.LacpOutPkts
}

// GetLacpRxErrors retrieves the value of the leaf LacpRxErrors from the Lacp_LagMember_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LacpRxErrors is set, it can
// safely use t.GetLacpRxErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LacpRxErrors == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember_Counters) GetLacpRxErrors() uint64 {
	if t == nil || t.LacpRxErrors == nil {
		return 0
	}
	return *t.LacpRxErrors
}

// SetLacpInPkts sets the value of the leaf LacpInPkts in the Lacp_LagMember_Counters
// struct.
func (t *Lacp_LagMember_Counters) SetLacpInPkts(v uint64) {
	t.LacpInPkts = &v
}

// SetLacpOutPkts sets the value of the leaf LacpOutPkts in the Lacp_LagMember_Counters
// struct.
func (t *Lacp_LagMember_Counters) SetLacpOutPkts(v uint64) {
	t.LacpOutPkts = &v
}

// SetLacpRxErrors sets the value of the leaf LacpRxErrors in the Lacp_LagMember_Counters
// struct.
func (t *Lacp_LagMember_Counters) SetLacpRxErrors(v uint64) {
	t.LacpRxErrors = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Lacp_LagMember_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Lacp_LagMember_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lacp_LagMember_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Lacp_LagMember_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lacp_LagMember_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Lacp_LagMember_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Lacp_LagMember_Counters.
func (*Lacp_LagMember_Counters) ΛBelongingModule() string {
	return "open-traffic-generator-lacp"
}

// Lag represents the /open-traffic-generator-lag/lags/lag YANG schema element.
type Lag struct {
	Counters   *Lag_Counters    `path:"state/counters" module:"open-traffic-generator-lag/open-traffic-generator-lag"`
	InRate     Binary           `path:"state/in-rate" module:"open-traffic-generator-lag/open-traffic-generator-lag"`
	Name       *string          `path:"state/name|name" module:"open-traffic-generator-lag/open-traffic-generator-lag|open-traffic-generator-lag" shadow-path:"name" shadow-module:"open-traffic-generator-lag"`
	OperStatus E_Lag_OperStatus `path:"state/oper-status" module:"open-traffic-generator-lag/open-traffic-generator-lag"`
	OutRate    Binary           `path:"state/out-rate" module:"open-traffic-generator-lag/open-traffic-generator-lag"`
}

// IsYANGGoStruct ensures that Lag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Lag) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Lag) GetOrCreateCounters() *Lag_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Lag_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from Lag. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Lag) GetCounters() *Lag_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetInRate retrieves the value of the leaf InRate from the Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InRate is set, it can
// safely use t.GetInRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InRate == nil' before retrieving the leaf's value.
func (t *Lag) GetInRate() Binary {
	if t == nil || t.InRate == nil {
		return nil
	}
	return t.InRate
}

// GetName retrieves the value of the leaf Name from the Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Lag) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOperStatus retrieves the value of the leaf OperStatus from the Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperStatus is set, it can
// safely use t.GetOperStatus() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperStatus == nil' before retrieving the leaf's value.
func (t *Lag) GetOperStatus() E_Lag_OperStatus {
	if t == nil || t.OperStatus == 0 {
		return 0
	}
	return t.OperStatus
}

// GetOutRate retrieves the value of the leaf OutRate from the Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutRate is set, it can
// safely use t.GetOutRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutRate == nil' before retrieving the leaf's value.
func (t *Lag) GetOutRate() Binary {
	if t == nil || t.OutRate == nil {
		return nil
	}
	return t.OutRate
}

// SetInRate sets the value of the leaf InRate in the Lag
// struct.
func (t *Lag) SetInRate(v Binary) {
	t.InRate = v
}

// SetName sets the value of the leaf Name in the Lag
// struct.
func (t *Lag) SetName(v string) {
	t.Name = &v
}

// SetOperStatus sets the value of the leaf OperStatus in the Lag
// struct.
func (t *Lag) SetOperStatus(v E_Lag_OperStatus) {
	t.OperStatus = v
}

// SetOutRate sets the value of the leaf OutRate in the Lag
// struct.
func (t *Lag) SetOutRate(v Binary) {
	t.OutRate = v
}

// PopulateDefaults recursively populates unset leaf fields in the Lag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Lag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Counters.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the Lag struct, which is a YANG list entry.
func (t *Lag) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Lag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lag) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Lag) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Lag.
func (*Lag) ΛBelongingModule() string {
	return "open-traffic-generator-lag"
}

// Lag_Counters represents the /open-traffic-generator-lag/lags/lag/state/counters YANG schema element.
type Lag_Counters struct {
	InFrames      *uint64 `path:"in-frames" module:"open-traffic-generator-lag"`
	InOctets      *uint64 `path:"in-octets" module:"open-traffic-generator-lag"`
	MemberPortsUp *uint64 `path:"member-ports-up" module:"open-traffic-generator-lag"`
	OutFrames     *uint64 `path:"out-frames" module:"open-traffic-generator-lag"`
	OutOctets     *uint64 `path:"out-octets" module:"open-traffic-generator-lag"`
}

// IsYANGGoStruct ensures that Lag_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Lag_Counters) IsYANGGoStruct() {}

// GetInFrames retrieves the value of the leaf InFrames from the Lag_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InFrames is set, it can
// safely use t.GetInFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InFrames == nil' before retrieving the leaf's value.
func (t *Lag_Counters) GetInFrames() uint64 {
	if t == nil || t.InFrames == nil {
		return 0
	}
	return *t.InFrames
}

// GetInOctets retrieves the value of the leaf InOctets from the Lag_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InOctets is set, it can
// safely use t.GetInOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InOctets == nil' before retrieving the leaf's value.
func (t *Lag_Counters) GetInOctets() uint64 {
	if t == nil || t.InOctets == nil {
		return 0
	}
	return *t.InOctets
}

// GetMemberPortsUp retrieves the value of the leaf MemberPortsUp from the Lag_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MemberPortsUp is set, it can
// safely use t.GetMemberPortsUp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MemberPortsUp == nil' before retrieving the leaf's value.
func (t *Lag_Counters) GetMemberPortsUp() uint64 {
	if t == nil || t.MemberPortsUp == nil {
		return 0
	}
	return *t.MemberPortsUp
}

// GetOutFrames retrieves the value of the leaf OutFrames from the Lag_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutFrames is set, it can
// safely use t.GetOutFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutFrames == nil' before retrieving the leaf's value.
func (t *Lag_Counters) GetOutFrames() uint64 {
	if t == nil || t.OutFrames == nil {
		return 0
	}
	return *t.OutFrames
}

// GetOutOctets retrieves the value of the leaf OutOctets from the Lag_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutOctets is set, it can
// safely use t.GetOutOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutOctets == nil' before retrieving the leaf's value.
func (t *Lag_Counters) GetOutOctets() uint64 {
	if t == nil || t.OutOctets == nil {
		return 0
	}
	return *t.OutOctets
}

// SetInFrames sets the value of the leaf InFrames in the Lag_Counters
// struct.
func (t *Lag_Counters) SetInFrames(v uint64) {
	t.InFrames = &v
}

// SetInOctets sets the value of the leaf InOctets in the Lag_Counters
// struct.
func (t *Lag_Counters) SetInOctets(v uint64) {
	t.InOctets = &v
}

// SetMemberPortsUp sets the value of the leaf MemberPortsUp in the Lag_Counters
// struct.
func (t *Lag_Counters) SetMemberPortsUp(v uint64) {
	t.MemberPortsUp = &v
}

// SetOutFrames sets the value of the leaf OutFrames in the Lag_Counters
// struct.
func (t *Lag_Counters) SetOutFrames(v uint64) {
	t.OutFrames = &v
}

// SetOutOctets sets the value of the leaf OutOctets in the Lag_Counters
// struct.
func (t *Lag_Counters) SetOutOctets(v uint64) {
	t.OutOctets = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Lag_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Lag_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lag_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Lag_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lag_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Lag_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Lag_Counters.
func (*Lag_Counters) ΛBelongingModule() string {
	return "open-traffic-generator-lag"
}

// LldpInterface represents the /open-traffic-generator-lldp/lldps/lldp-interface YANG schema element.
type LldpInterface struct {
	Counters             *LldpInterface_Counters             `path:"state/counters" module:"open-traffic-generator-lldp/open-traffic-generator-lldp"`
	LldpNeighborDatabase *LldpInterface_LldpNeighborDatabase `path:"state/lldp-neighbor-database" module:"open-traffic-generator-lldp/open-traffic-generator-lldp"`
	Name                 *string                             `path:"state/name|name" module:"open-traffic-generator-lldp/open-traffic-generator-lldp|open-traffic-generator-lldp" shadow-path:"name" shadow-module:"open-traffic-generator-lldp"`
}

// IsYANGGoStruct ensures that LldpInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*LldpInterface) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *LldpInterface) GetOrCreateCounters() *LldpInterface_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &LldpInterface_Counters{}
	return t.Counters
}

// GetOrCreateLldpNeighborDatabase retrieves the value of the LldpNeighborDatabase field
// or returns the existing field if it already exists.
func (t *LldpInterface) GetOrCreateLldpNeighborDatabase() *LldpInterface_LldpNeighborDatabase {
	if t.LldpNeighborDatabase != nil {
		return t.LldpNeighborDatabase
	}
	t.LldpNeighborDatabase = &LldpInterface_LldpNeighborDatabase{}
	return t.LldpNeighborDatabase
}

// GetCounters returns the value of the Counters struct pointer
// from LldpInterface. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *LldpInterface) GetCounters() *LldpInterface_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetLldpNeighborDatabase returns the value of the LldpNeighborDatabase struct pointer
// from LldpInterface. If the receiver or the field LldpNeighborDatabase is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *LldpInterface) GetLldpNeighborDatabase() *LldpInterface_LldpNeighborDatabase {
	if t != nil && t.LldpNeighborDatabase != nil {
		return t.LldpNeighborDatabase
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the LldpInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *LldpInterface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// SetName sets the value of the leaf Name in the LldpInterface
// struct.
func (t *LldpInterface) SetName(v string) {
	t.Name = &v
}

// PopulateDefaults recursively populates unset leaf fields in the LldpInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *LldpInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Counters.PopulateDefaults()
	t.LldpNeighborDatabase.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the LldpInterface struct, which is a YANG list entry.
func (t *LldpInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *LldpInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["LldpInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *LldpInterface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *LldpInterface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of LldpInterface.
func (*LldpInterface) ΛBelongingModule() string {
	return "open-traffic-generator-lldp"
}

// LldpInterface_Counters represents the /open-traffic-generator-lldp/lldps/lldp-interface/state/counters YANG schema element.
type LldpInterface_Counters struct {
	FrameDiscard *uint64 `path:"frame-discard" module:"open-traffic-generator-lldp"`
	FrameErrorIn *uint64 `path:"frame-error-in" module:"open-traffic-generator-lldp"`
	FrameIn      *uint64 `path:"frame-in" module:"open-traffic-generator-lldp"`
	FrameOut     *uint64 `path:"frame-out" module:"open-traffic-generator-lldp"`
	TlvDiscard   *uint64 `path:"tlv-discard" module:"open-traffic-generator-lldp"`
	TlvUnknown   *uint64 `path:"tlv-unknown" module:"open-traffic-generator-lldp"`
}

// IsYANGGoStruct ensures that LldpInterface_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*LldpInterface_Counters) IsYANGGoStruct() {}

// GetFrameDiscard retrieves the value of the leaf FrameDiscard from the LldpInterface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FrameDiscard is set, it can
// safely use t.GetFrameDiscard() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FrameDiscard == nil' before retrieving the leaf's value.
func (t *LldpInterface_Counters) GetFrameDiscard() uint64 {
	if t == nil || t.FrameDiscard == nil {
		return 0
	}
	return *t.FrameDiscard
}

// GetFrameErrorIn retrieves the value of the leaf FrameErrorIn from the LldpInterface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FrameErrorIn is set, it can
// safely use t.GetFrameErrorIn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FrameErrorIn == nil' before retrieving the leaf's value.
func (t *LldpInterface_Counters) GetFrameErrorIn() uint64 {
	if t == nil || t.FrameErrorIn == nil {
		return 0
	}
	return *t.FrameErrorIn
}

// GetFrameIn retrieves the value of the leaf FrameIn from the LldpInterface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FrameIn is set, it can
// safely use t.GetFrameIn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FrameIn == nil' before retrieving the leaf's value.
func (t *LldpInterface_Counters) GetFrameIn() uint64 {
	if t == nil || t.FrameIn == nil {
		return 0
	}
	return *t.FrameIn
}

// GetFrameOut retrieves the value of the leaf FrameOut from the LldpInterface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FrameOut is set, it can
// safely use t.GetFrameOut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FrameOut == nil' before retrieving the leaf's value.
func (t *LldpInterface_Counters) GetFrameOut() uint64 {
	if t == nil || t.FrameOut == nil {
		return 0
	}
	return *t.FrameOut
}

// GetTlvDiscard retrieves the value of the leaf TlvDiscard from the LldpInterface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlvDiscard is set, it can
// safely use t.GetTlvDiscard() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlvDiscard == nil' before retrieving the leaf's value.
func (t *LldpInterface_Counters) GetTlvDiscard() uint64 {
	if t == nil || t.TlvDiscard == nil {
		return 0
	}
	return *t.TlvDiscard
}

// GetTlvUnknown retrieves the value of the leaf TlvUnknown from the LldpInterface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlvUnknown is set, it can
// safely use t.GetTlvUnknown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlvUnknown == nil' before retrieving the leaf's value.
func (t *LldpInterface_Counters) GetTlvUnknown() uint64 {
	if t == nil || t.TlvUnknown == nil {
		return 0
	}
	return *t.TlvUnknown
}

// SetFrameDiscard sets the value of the leaf FrameDiscard in the LldpInterface_Counters
// struct.
func (t *LldpInterface_Counters) SetFrameDiscard(v uint64) {
	t.FrameDiscard = &v
}

// SetFrameErrorIn sets the value of the leaf FrameErrorIn in the LldpInterface_Counters
// struct.
func (t *LldpInterface_Counters) SetFrameErrorIn(v uint64) {
	t.FrameErrorIn = &v
}

// SetFrameIn sets the value of the leaf FrameIn in the LldpInterface_Counters
// struct.
func (t *LldpInterface_Counters) SetFrameIn(v uint64) {
	t.FrameIn = &v
}

// SetFrameOut sets the value of the leaf FrameOut in the LldpInterface_Counters
// struct.
func (t *LldpInterface_Counters) SetFrameOut(v uint64) {
	t.FrameOut = &v
}

// SetTlvDiscard sets the value of the leaf TlvDiscard in the LldpInterface_Counters
// struct.
func (t *LldpInterface_Counters) SetTlvDiscard(v uint64) {
	t.TlvDiscard = &v
}

// SetTlvUnknown sets the value of the leaf TlvUnknown in the LldpInterface_Counters
// struct.
func (t *LldpInterface_Counters) SetTlvUnknown(v uint64) {
	t.TlvUnknown = &v
}

// PopulateDefaults recursively populates unset leaf fields in the LldpInterface_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *LldpInterface_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *LldpInterface_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["LldpInterface_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *LldpInterface_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *LldpInterface_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of LldpInterface_Counters.
func (*LldpInterface_Counters) ΛBelongingModule() string {
	return "open-traffic-generator-lldp"
}

// LldpInterface_LldpNeighborDatabase represents the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database YANG schema element.
type LldpInterface_LldpNeighborDatabase struct {
	LldpNeighbor map[string]*LldpInterface_LldpNeighborDatabase_LldpNeighbor `path:"lldp-neighbors/lldp-neighbor" module:"open-traffic-generator-lldp/open-traffic-generator-lldp"`
}

// IsYANGGoStruct ensures that LldpInterface_LldpNeighborDatabase implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*LldpInterface_LldpNeighborDatabase) IsYANGGoStruct() {}

// NewLldpNeighbor creates a new entry in the LldpNeighbor list of the
// LldpInterface_LldpNeighborDatabase struct. The keys of the list are populated from the input
// arguments.
func (t *LldpInterface_LldpNeighborDatabase) NewLldpNeighbor(NeighborId string) (*LldpInterface_LldpNeighborDatabase_LldpNeighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LldpNeighbor == nil {
		t.LldpNeighbor = make(map[string]*LldpInterface_LldpNeighborDatabase_LldpNeighbor)
	}

	key := NeighborId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LldpNeighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LldpNeighbor", key)
	}

	t.LldpNeighbor[key] = &LldpInterface_LldpNeighborDatabase_LldpNeighbor{
		NeighborId: &NeighborId,
	}

	return t.LldpNeighbor[key], nil
}

// RenameLldpNeighbor renames an entry in the list LldpNeighbor within
// the LldpInterface_LldpNeighborDatabase struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *LldpInterface_LldpNeighborDatabase) RenameLldpNeighbor(oldK, newK string) error {
	if _, ok := t.LldpNeighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in LldpNeighbor", newK)
	}

	e, ok := t.LldpNeighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LldpNeighbor", oldK)
	}
	e.NeighborId = &newK

	t.LldpNeighbor[newK] = e
	delete(t.LldpNeighbor, oldK)
	return nil
}

// GetOrCreateLldpNeighborMap returns the list (map) from LldpInterface_LldpNeighborDatabase.
//
// It initializes the field if not already initialized.
func (t *LldpInterface_LldpNeighborDatabase) GetOrCreateLldpNeighborMap() map[string]*LldpInterface_LldpNeighborDatabase_LldpNeighbor {
	if t.LldpNeighbor == nil {
		t.LldpNeighbor = make(map[string]*LldpInterface_LldpNeighborDatabase_LldpNeighbor)
	}
	return t.LldpNeighbor
}

// GetOrCreateLldpNeighbor retrieves the value with the specified keys from
// the receiver LldpInterface_LldpNeighborDatabase. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *LldpInterface_LldpNeighborDatabase) GetOrCreateLldpNeighbor(NeighborId string) *LldpInterface_LldpNeighborDatabase_LldpNeighbor {

	key := NeighborId

	if v, ok := t.LldpNeighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLldpNeighbor(NeighborId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLldpNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetLldpNeighbor retrieves the value with the specified key from
// the LldpNeighbor map field of LldpInterface_LldpNeighborDatabase. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *LldpInterface_LldpNeighborDatabase) GetLldpNeighbor(NeighborId string) *LldpInterface_LldpNeighborDatabase_LldpNeighbor {

	if t == nil {
		return nil
	}

	key := NeighborId

	if lm, ok := t.LldpNeighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteLldpNeighbor deletes the value with the specified keys from
// the receiver LldpInterface_LldpNeighborDatabase. If there is no such element, the function
// is a no-op.
func (t *LldpInterface_LldpNeighborDatabase) DeleteLldpNeighbor(NeighborId string) {
	key := NeighborId

	delete(t.LldpNeighbor, key)
}

// AppendLldpNeighbor appends the supplied LldpInterface_LldpNeighborDatabase_LldpNeighbor struct to the
// list LldpNeighbor of LldpInterface_LldpNeighborDatabase. If the key value(s) specified in
// the supplied LldpInterface_LldpNeighborDatabase_LldpNeighbor already exist in the list, an error is
// returned.
func (t *LldpInterface_LldpNeighborDatabase) AppendLldpNeighbor(v *LldpInterface_LldpNeighborDatabase_LldpNeighbor) error {
	if v.NeighborId == nil {
		return fmt.Errorf("invalid nil key received for NeighborId")
	}

	key := *v.NeighborId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LldpNeighbor == nil {
		t.LldpNeighbor = make(map[string]*LldpInterface_LldpNeighborDatabase_LldpNeighbor)
	}

	if _, ok := t.LldpNeighbor[key]; ok {
		return fmt.Errorf("duplicate key for list LldpNeighbor %v", key)
	}

	t.LldpNeighbor[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the LldpInterface_LldpNeighborDatabase
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *LldpInterface_LldpNeighborDatabase) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.LldpNeighbor {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *LldpInterface_LldpNeighborDatabase) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["LldpInterface_LldpNeighborDatabase"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *LldpInterface_LldpNeighborDatabase) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *LldpInterface_LldpNeighborDatabase) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of LldpInterface_LldpNeighborDatabase.
func (*LldpInterface_LldpNeighborDatabase) ΛBelongingModule() string {
	return "open-traffic-generator-lldp"
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor represents the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor struct {
	Age                   *uint32                                                                                                                      `path:"state/age" module:"open-traffic-generator-lldp/open-traffic-generator-lldp"`
	Capabilities          map[E_Capabilities_Name]*LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities                                        `path:"capabilities" module:"open-traffic-generator-lldp"`
	ChassisId             *string                                                                                                                      `path:"state/chassis-id" module:"open-traffic-generator-lldp/open-traffic-generator-lldp"`
	ChassisIdType         E_LldpNeighbor_ChassisIdType                                                                                                 `path:"state/chassis-id-type" module:"open-traffic-generator-lldp/open-traffic-generator-lldp"`
	CustomTlv             map[LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_Key]*LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv `path:"custom-tlv" module:"open-traffic-generator-lldp"`
	LastUpdate            *uint32                                                                                                                      `path:"state/last_update" module:"open-traffic-generator-lldp/open-traffic-generator-lldp"`
	ManagementAddress     *string                                                                                                                      `path:"state/management-address" module:"open-traffic-generator-lldp/open-traffic-generator-lldp"`
	ManagementAddressType *string                                                                                                                      `path:"state/management-address-type" module:"open-traffic-generator-lldp/open-traffic-generator-lldp"`
	NeighborId            *string                                                                                                                      `path:"state/neighbor_id|neighbor_id" module:"open-traffic-generator-lldp/open-traffic-generator-lldp|open-traffic-generator-lldp" shadow-path:"neighbor_id" shadow-module:"open-traffic-generator-lldp"`
	PortDescription       *string                                                                                                                      `path:"state/port-description" module:"open-traffic-generator-lldp/open-traffic-generator-lldp"`
	PortId                *string                                                                                                                      `path:"state/port-id" module:"open-traffic-generator-lldp/open-traffic-generator-lldp"`
	PortIdType            E_LldpNeighbor_PortIdType                                                                                                    `path:"state/port-id-type" module:"open-traffic-generator-lldp/open-traffic-generator-lldp"`
	SystemDescription     *string                                                                                                                      `path:"state/system-description" module:"open-traffic-generator-lldp/open-traffic-generator-lldp"`
	SystemName            *string                                                                                                                      `path:"state/system-name" module:"open-traffic-generator-lldp/open-traffic-generator-lldp"`
	Ttl                   *uint32                                                                                                                      `path:"state/ttl" module:"open-traffic-generator-lldp/open-traffic-generator-lldp"`
}

// IsYANGGoStruct ensures that LldpInterface_LldpNeighborDatabase_LldpNeighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*LldpInterface_LldpNeighborDatabase_LldpNeighbor) IsYANGGoStruct() {}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_Key represents the key for list CustomTlv of element /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_Key struct {
	CustomType uint32 `path:"custom-type"`
	Oui        string `path:"oui"`
	OuiSubtype uint32 `path:"oui-subtype"`
}

// IsYANGGoKeyStruct ensures that LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_Key key struct.
func (t LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"custom-type": t.CustomType,
		"oui":         t.Oui,
		"oui-subtype": t.OuiSubtype,
	}, nil
}

// NewCapabilities creates a new entry in the Capabilities list of the
// LldpInterface_LldpNeighborDatabase_LldpNeighbor struct. The keys of the list are populated from the input
// arguments.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) NewCapabilities(Name E_Capabilities_Name) (*LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Capabilities == nil {
		t.Capabilities = make(map[E_Capabilities_Name]*LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Capabilities[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Capabilities", key)
	}

	t.Capabilities[key] = &LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities{
		Name: Name,
	}

	return t.Capabilities[key], nil
}

// RenameCapabilities renames an entry in the list Capabilities within
// the LldpInterface_LldpNeighborDatabase_LldpNeighbor struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) RenameCapabilities(oldK, newK E_Capabilities_Name) error {
	if _, ok := t.Capabilities[newK]; ok {
		return fmt.Errorf("key %v already exists in Capabilities", newK)
	}

	e, ok := t.Capabilities[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Capabilities", oldK)
	}
	e.Name = newK

	t.Capabilities[newK] = e
	delete(t.Capabilities, oldK)
	return nil
}

// GetOrCreateCapabilitiesMap returns the list (map) from LldpInterface_LldpNeighborDatabase_LldpNeighbor.
//
// It initializes the field if not already initialized.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) GetOrCreateCapabilitiesMap() map[E_Capabilities_Name]*LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities {
	if t.Capabilities == nil {
		t.Capabilities = make(map[E_Capabilities_Name]*LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities)
	}
	return t.Capabilities
}

// GetOrCreateCapabilities retrieves the value with the specified keys from
// the receiver LldpInterface_LldpNeighborDatabase_LldpNeighbor. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) GetOrCreateCapabilities(Name E_Capabilities_Name) *LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities {

	key := Name

	if v, ok := t.Capabilities[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCapabilities(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCapabilities got unexpected error: %v", err))
	}
	return v
}

// GetCapabilities retrieves the value with the specified key from
// the Capabilities map field of LldpInterface_LldpNeighborDatabase_LldpNeighbor. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) GetCapabilities(Name E_Capabilities_Name) *LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Capabilities[key]; ok {
		return lm
	}
	return nil
}

// DeleteCapabilities deletes the value with the specified keys from
// the receiver LldpInterface_LldpNeighborDatabase_LldpNeighbor. If there is no such element, the function
// is a no-op.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) DeleteCapabilities(Name E_Capabilities_Name) {
	key := Name

	delete(t.Capabilities, key)
}

// AppendCapabilities appends the supplied LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities struct to the
// list Capabilities of LldpInterface_LldpNeighborDatabase_LldpNeighbor. If the key value(s) specified in
// the supplied LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities already exist in the list, an error is
// returned.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) AppendCapabilities(v *LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities) error {
	key := v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Capabilities == nil {
		t.Capabilities = make(map[E_Capabilities_Name]*LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities)
	}

	if _, ok := t.Capabilities[key]; ok {
		return fmt.Errorf("duplicate key for list Capabilities %v", key)
	}

	t.Capabilities[key] = v
	return nil
}

// NewCustomTlv creates a new entry in the CustomTlv list of the
// LldpInterface_LldpNeighborDatabase_LldpNeighbor struct. The keys of the list are populated from the input
// arguments.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) NewCustomTlv(CustomType uint32, Oui string, OuiSubtype uint32) (*LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CustomTlv == nil {
		t.CustomTlv = make(map[LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_Key]*LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv)
	}

	key := LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_Key{
		CustomType: CustomType,
		Oui:        Oui,
		OuiSubtype: OuiSubtype,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CustomTlv[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CustomTlv", key)
	}

	t.CustomTlv[key] = &LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv{
		CustomType: &CustomType,
		Oui:        &Oui,
		OuiSubtype: &OuiSubtype,
	}

	return t.CustomTlv[key], nil
}

// RenameCustomTlv renames an entry in the list CustomTlv within
// the LldpInterface_LldpNeighborDatabase_LldpNeighbor struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) RenameCustomTlv(oldK, newK LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_Key) error {
	if _, ok := t.CustomTlv[newK]; ok {
		return fmt.Errorf("key %v already exists in CustomTlv", newK)
	}

	e, ok := t.CustomTlv[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CustomTlv", oldK)
	}
	e.CustomType = &newK.CustomType
	e.Oui = &newK.Oui
	e.OuiSubtype = &newK.OuiSubtype

	t.CustomTlv[newK] = e
	delete(t.CustomTlv, oldK)
	return nil
}

// GetOrCreateCustomTlvMap returns the list (map) from LldpInterface_LldpNeighborDatabase_LldpNeighbor.
//
// It initializes the field if not already initialized.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) GetOrCreateCustomTlvMap() map[LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_Key]*LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv {
	if t.CustomTlv == nil {
		t.CustomTlv = make(map[LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_Key]*LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv)
	}
	return t.CustomTlv
}

// GetOrCreateCustomTlv retrieves the value with the specified keys from
// the receiver LldpInterface_LldpNeighborDatabase_LldpNeighbor. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) GetOrCreateCustomTlv(CustomType uint32, Oui string, OuiSubtype uint32) *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv {

	key := LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_Key{
		CustomType: CustomType,
		Oui:        Oui,
		OuiSubtype: OuiSubtype,
	}

	if v, ok := t.CustomTlv[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCustomTlv(CustomType, Oui, OuiSubtype)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCustomTlv got unexpected error: %v", err))
	}
	return v
}

// GetCustomTlv retrieves the value with the specified key from
// the CustomTlv map field of LldpInterface_LldpNeighborDatabase_LldpNeighbor. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) GetCustomTlv(CustomType uint32, Oui string, OuiSubtype uint32) *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv {

	if t == nil {
		return nil
	}

	key := LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_Key{
		CustomType: CustomType,
		Oui:        Oui,
		OuiSubtype: OuiSubtype,
	}

	if lm, ok := t.CustomTlv[key]; ok {
		return lm
	}
	return nil
}

// DeleteCustomTlv deletes the value with the specified keys from
// the receiver LldpInterface_LldpNeighborDatabase_LldpNeighbor. If there is no such element, the function
// is a no-op.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) DeleteCustomTlv(CustomType uint32, Oui string, OuiSubtype uint32) {
	key := LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_Key{
		CustomType: CustomType,
		Oui:        Oui,
		OuiSubtype: OuiSubtype,
	}

	delete(t.CustomTlv, key)
}

// AppendCustomTlv appends the supplied LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv struct to the
// list CustomTlv of LldpInterface_LldpNeighborDatabase_LldpNeighbor. If the key value(s) specified in
// the supplied LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv already exist in the list, an error is
// returned.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) AppendCustomTlv(v *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv) error {
	if v.CustomType == nil {
		return fmt.Errorf("invalid nil key for CustomType")
	}

	if v.Oui == nil {
		return fmt.Errorf("invalid nil key for Oui")
	}

	if v.OuiSubtype == nil {
		return fmt.Errorf("invalid nil key for OuiSubtype")
	}

	key := LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_Key{
		CustomType: *v.CustomType,
		Oui:        *v.Oui,
		OuiSubtype: *v.OuiSubtype,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CustomTlv == nil {
		t.CustomTlv = make(map[LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_Key]*LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv)
	}

	if _, ok := t.CustomTlv[key]; ok {
		return fmt.Errorf("duplicate key for list CustomTlv %v", key)
	}

	t.CustomTlv[key] = v
	return nil
}

// GetAge retrieves the value of the leaf Age from the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Age is set, it can
// safely use t.GetAge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Age == nil' before retrieving the leaf's value.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) GetAge() uint32 {
	if t == nil || t.Age == nil {
		return 0
	}
	return *t.Age
}

// GetChassisId retrieves the value of the leaf ChassisId from the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ChassisId is set, it can
// safely use t.GetChassisId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ChassisId == nil' before retrieving the leaf's value.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) GetChassisId() string {
	if t == nil || t.ChassisId == nil {
		return ""
	}
	return *t.ChassisId
}

// GetChassisIdType retrieves the value of the leaf ChassisIdType from the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ChassisIdType is set, it can
// safely use t.GetChassisIdType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ChassisIdType == nil' before retrieving the leaf's value.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) GetChassisIdType() E_LldpNeighbor_ChassisIdType {
	if t == nil || t.ChassisIdType == 0 {
		return 0
	}
	return t.ChassisIdType
}

// GetLastUpdate retrieves the value of the leaf LastUpdate from the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastUpdate is set, it can
// safely use t.GetLastUpdate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastUpdate == nil' before retrieving the leaf's value.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) GetLastUpdate() uint32 {
	if t == nil || t.LastUpdate == nil {
		return 0
	}
	return *t.LastUpdate
}

// GetManagementAddress retrieves the value of the leaf ManagementAddress from the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ManagementAddress is set, it can
// safely use t.GetManagementAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ManagementAddress == nil' before retrieving the leaf's value.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) GetManagementAddress() string {
	if t == nil || t.ManagementAddress == nil {
		return ""
	}
	return *t.ManagementAddress
}

// GetManagementAddressType retrieves the value of the leaf ManagementAddressType from the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ManagementAddressType is set, it can
// safely use t.GetManagementAddressType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ManagementAddressType == nil' before retrieving the leaf's value.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) GetManagementAddressType() string {
	if t == nil || t.ManagementAddressType == nil {
		return ""
	}
	return *t.ManagementAddressType
}

// GetNeighborId retrieves the value of the leaf NeighborId from the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NeighborId is set, it can
// safely use t.GetNeighborId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NeighborId == nil' before retrieving the leaf's value.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) GetNeighborId() string {
	if t == nil || t.NeighborId == nil {
		return ""
	}
	return *t.NeighborId
}

// GetPortDescription retrieves the value of the leaf PortDescription from the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortDescription is set, it can
// safely use t.GetPortDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortDescription == nil' before retrieving the leaf's value.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) GetPortDescription() string {
	if t == nil || t.PortDescription == nil {
		return ""
	}
	return *t.PortDescription
}

// GetPortId retrieves the value of the leaf PortId from the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortId is set, it can
// safely use t.GetPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortId == nil' before retrieving the leaf's value.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) GetPortId() string {
	if t == nil || t.PortId == nil {
		return ""
	}
	return *t.PortId
}

// GetPortIdType retrieves the value of the leaf PortIdType from the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortIdType is set, it can
// safely use t.GetPortIdType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortIdType == nil' before retrieving the leaf's value.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) GetPortIdType() E_LldpNeighbor_PortIdType {
	if t == nil || t.PortIdType == 0 {
		return 0
	}
	return t.PortIdType
}

// GetSystemDescription retrieves the value of the leaf SystemDescription from the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemDescription is set, it can
// safely use t.GetSystemDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemDescription == nil' before retrieving the leaf's value.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) GetSystemDescription() string {
	if t == nil || t.SystemDescription == nil {
		return ""
	}
	return *t.SystemDescription
}

// GetSystemName retrieves the value of the leaf SystemName from the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemName is set, it can
// safely use t.GetSystemName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemName == nil' before retrieving the leaf's value.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) GetSystemName() string {
	if t == nil || t.SystemName == nil {
		return ""
	}
	return *t.SystemName
}

// GetTtl retrieves the value of the leaf Ttl from the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ttl is set, it can
// safely use t.GetTtl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ttl == nil' before retrieving the leaf's value.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) GetTtl() uint32 {
	if t == nil || t.Ttl == nil {
		return 0
	}
	return *t.Ttl
}

// SetAge sets the value of the leaf Age in the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) SetAge(v uint32) {
	t.Age = &v
}

// SetChassisId sets the value of the leaf ChassisId in the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) SetChassisId(v string) {
	t.ChassisId = &v
}

// SetChassisIdType sets the value of the leaf ChassisIdType in the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) SetChassisIdType(v E_LldpNeighbor_ChassisIdType) {
	t.ChassisIdType = v
}

// SetLastUpdate sets the value of the leaf LastUpdate in the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) SetLastUpdate(v uint32) {
	t.LastUpdate = &v
}

// SetManagementAddress sets the value of the leaf ManagementAddress in the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) SetManagementAddress(v string) {
	t.ManagementAddress = &v
}

// SetManagementAddressType sets the value of the leaf ManagementAddressType in the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) SetManagementAddressType(v string) {
	t.ManagementAddressType = &v
}

// SetNeighborId sets the value of the leaf NeighborId in the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) SetNeighborId(v string) {
	t.NeighborId = &v
}

// SetPortDescription sets the value of the leaf PortDescription in the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) SetPortDescription(v string) {
	t.PortDescription = &v
}

// SetPortId sets the value of the leaf PortId in the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) SetPortId(v string) {
	t.PortId = &v
}

// SetPortIdType sets the value of the leaf PortIdType in the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) SetPortIdType(v E_LldpNeighbor_PortIdType) {
	t.PortIdType = v
}

// SetSystemDescription sets the value of the leaf SystemDescription in the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) SetSystemDescription(v string) {
	t.SystemDescription = &v
}

// SetSystemName sets the value of the leaf SystemName in the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) SetSystemName(v string) {
	t.SystemName = &v
}

// SetTtl sets the value of the leaf Ttl in the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) SetTtl(v uint32) {
	t.Ttl = &v
}

// PopulateDefaults recursively populates unset leaf fields in the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Age == nil {
		var v uint32 = 0
		t.Age = &v
	}
	if t.LastUpdate == nil {
		var v uint32 = 0
		t.LastUpdate = &v
	}
	if t.Ttl == nil {
		var v uint32 = 0
		t.Ttl = &v
	}
	for _, e := range t.Capabilities {
		e.PopulateDefaults()
	}
	for _, e := range t.CustomTlv {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the LldpInterface_LldpNeighborDatabase_LldpNeighbor struct, which is a YANG list entry.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NeighborId == nil {
		return nil, fmt.Errorf("nil value for key NeighborId")
	}

	return map[string]interface{}{
		"neighbor_id": *t.NeighborId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["LldpInterface_LldpNeighborDatabase_LldpNeighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of LldpInterface_LldpNeighborDatabase_LldpNeighbor.
func (*LldpInterface_LldpNeighborDatabase_LldpNeighbor) ΛBelongingModule() string {
	return "open-traffic-generator-lldp"
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities represents the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/capabilities YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities struct {
	Enabled *bool               `path:"state/enabled" module:"open-traffic-generator-lldp/open-traffic-generator-lldp"`
	Name    E_Capabilities_Name `path:"state/name|name" module:"open-traffic-generator-lldp/open-traffic-generator-lldp|open-traffic-generator-lldp" shadow-path:"name" shadow-module:"open-traffic-generator-lldp"`
}

// IsYANGGoStruct ensures that LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities) IsYANGGoStruct() {}

// GetEnabled retrieves the value of the leaf Enabled from the LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetName retrieves the value of the leaf Name from the LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities) GetName() E_Capabilities_Name {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// SetEnabled sets the value of the leaf Enabled in the LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities
// struct.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities) SetEnabled(v bool) {
	t.Enabled = &v
}

// SetName sets the value of the leaf Name in the LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities
// struct.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities) SetName(v E_Capabilities_Name) {
	t.Name = v
}

// PopulateDefaults recursively populates unset leaf fields in the LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities struct, which is a YANG list entry.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"name": t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities.
func (*LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities) ΛBelongingModule() string {
	return "open-traffic-generator-lldp"
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv represents the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/custom-tlv YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv struct {
	CustomType *uint32 `path:"state/custom-type|custom-type" module:"open-traffic-generator-lldp/open-traffic-generator-lldp|open-traffic-generator-lldp" shadow-path:"custom-type" shadow-module:"open-traffic-generator-lldp"`
	Oui        *string `path:"state/oui|oui" module:"open-traffic-generator-lldp/open-traffic-generator-lldp|open-traffic-generator-lldp" shadow-path:"oui" shadow-module:"open-traffic-generator-lldp"`
	OuiSubtype *uint32 `path:"state/oui-subtype|oui-subtype" module:"open-traffic-generator-lldp/open-traffic-generator-lldp|open-traffic-generator-lldp" shadow-path:"oui-subtype" shadow-module:"open-traffic-generator-lldp"`
}

// IsYANGGoStruct ensures that LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv) IsYANGGoStruct() {}

// GetCustomType retrieves the value of the leaf CustomType from the LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CustomType is set, it can
// safely use t.GetCustomType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CustomType == nil' before retrieving the leaf's value.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv) GetCustomType() uint32 {
	if t == nil || t.CustomType == nil {
		return 0
	}
	return *t.CustomType
}

// GetOui retrieves the value of the leaf Oui from the LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Oui is set, it can
// safely use t.GetOui() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Oui == nil' before retrieving the leaf's value.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv) GetOui() string {
	if t == nil || t.Oui == nil {
		return ""
	}
	return *t.Oui
}

// GetOuiSubtype retrieves the value of the leaf OuiSubtype from the LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OuiSubtype is set, it can
// safely use t.GetOuiSubtype() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OuiSubtype == nil' before retrieving the leaf's value.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv) GetOuiSubtype() uint32 {
	if t == nil || t.OuiSubtype == nil {
		return 0
	}
	return *t.OuiSubtype
}

// SetCustomType sets the value of the leaf CustomType in the LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv
// struct.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv) SetCustomType(v uint32) {
	t.CustomType = &v
}

// SetOui sets the value of the leaf Oui in the LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv
// struct.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv) SetOui(v string) {
	t.Oui = &v
}

// SetOuiSubtype sets the value of the leaf OuiSubtype in the LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv
// struct.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv) SetOuiSubtype(v uint32) {
	t.OuiSubtype = &v
}

// PopulateDefaults recursively populates unset leaf fields in the LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv struct, which is a YANG list entry.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CustomType == nil {
		return nil, fmt.Errorf("nil value for key CustomType")
	}

	if t.Oui == nil {
		return nil, fmt.Errorf("nil value for key Oui")
	}

	if t.OuiSubtype == nil {
		return nil, fmt.Errorf("nil value for key OuiSubtype")
	}

	return map[string]interface{}{
		"custom-type": *t.CustomType,
		"oui":         *t.Oui,
		"oui-subtype": *t.OuiSubtype,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv.
func (*LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv) ΛBelongingModule() string {
	return "open-traffic-generator-lldp"
}

// Ospfv2Router represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router YANG schema element.
type Ospfv2Router struct {
	Counters          *Ospfv2Router_Counters          `path:"state/counters" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
	LinkStateDatabase *Ospfv2Router_LinkStateDatabase `path:"state/link-state-database" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
	Name              *string                         `path:"state/name|name" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2|open-traffic-generator-ospfv2" shadow-path:"name" shadow-module:"open-traffic-generator-ospfv2"`
}

// IsYANGGoStruct ensures that Ospfv2Router implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ospfv2Router) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Ospfv2Router) GetOrCreateCounters() *Ospfv2Router_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Ospfv2Router_Counters{}
	return t.Counters
}

// GetOrCreateLinkStateDatabase retrieves the value of the LinkStateDatabase field
// or returns the existing field if it already exists.
func (t *Ospfv2Router) GetOrCreateLinkStateDatabase() *Ospfv2Router_LinkStateDatabase {
	if t.LinkStateDatabase != nil {
		return t.LinkStateDatabase
	}
	t.LinkStateDatabase = &Ospfv2Router_LinkStateDatabase{}
	return t.LinkStateDatabase
}

// GetCounters returns the value of the Counters struct pointer
// from Ospfv2Router. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Ospfv2Router) GetCounters() *Ospfv2Router_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetLinkStateDatabase returns the value of the LinkStateDatabase struct pointer
// from Ospfv2Router. If the receiver or the field LinkStateDatabase is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Ospfv2Router) GetLinkStateDatabase() *Ospfv2Router_LinkStateDatabase {
	if t != nil && t.LinkStateDatabase != nil {
		return t.LinkStateDatabase
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the Ospfv2Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Ospfv2Router) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// SetName sets the value of the leaf Name in the Ospfv2Router
// struct.
func (t *Ospfv2Router) SetName(v string) {
	t.Name = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Ospfv2Router
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Ospfv2Router) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Counters.PopulateDefaults()
	t.LinkStateDatabase.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the Ospfv2Router struct, which is a YANG list entry.
func (t *Ospfv2Router) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv2Router) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ospfv2Router"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv2Router) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ospfv2Router) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ospfv2Router.
func (*Ospfv2Router) ΛBelongingModule() string {
	return "open-traffic-generator-ospfv2"
}

// Ospfv2Router_Counters represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/counters YANG schema element.
type Ospfv2Router_Counters struct {
	InDbds          *uint64 `path:"in-dbds" module:"open-traffic-generator-ospfv2"`
	InExternalLsas  *uint64 `path:"in-external-lsas" module:"open-traffic-generator-ospfv2"`
	InHellos        *uint64 `path:"in-hellos" module:"open-traffic-generator-ospfv2"`
	InLsAcks        *uint64 `path:"in-ls-acks" module:"open-traffic-generator-ospfv2"`
	InLsRequests    *uint64 `path:"in-ls-requests" module:"open-traffic-generator-ospfv2"`
	InLsUpdates     *uint64 `path:"in-ls-updates" module:"open-traffic-generator-ospfv2"`
	InLsaAcks       *uint64 `path:"in-lsa-acks" module:"open-traffic-generator-ospfv2"`
	InLsas          *uint64 `path:"in-lsas" module:"open-traffic-generator-ospfv2"`
	InNssaLsas      *uint64 `path:"in-nssa-lsas" module:"open-traffic-generator-ospfv2"`
	InRouterLsas    *uint64 `path:"in-router-lsas" module:"open-traffic-generator-ospfv2"`
	InSummaryLsas   *uint64 `path:"in-summary-lsas" module:"open-traffic-generator-ospfv2"`
	OutDbds         *uint64 `path:"out-dbds" module:"open-traffic-generator-ospfv2"`
	OutExternalLsas *uint64 `path:"out-external-lsas" module:"open-traffic-generator-ospfv2"`
	OutHellos       *uint64 `path:"out-hellos" module:"open-traffic-generator-ospfv2"`
	OutLsAcks       *uint64 `path:"out-ls-acks" module:"open-traffic-generator-ospfv2"`
	OutLsRequests   *uint64 `path:"out-ls-requests" module:"open-traffic-generator-ospfv2"`
	OutLsUpdates    *uint64 `path:"out-ls-updates" module:"open-traffic-generator-ospfv2"`
	OutLsaAcks      *uint64 `path:"out-lsa-acks" module:"open-traffic-generator-ospfv2"`
	OutLsas         *uint64 `path:"out-lsas" module:"open-traffic-generator-ospfv2"`
	OutNssaLsas     *uint64 `path:"out-nssa-lsas" module:"open-traffic-generator-ospfv2"`
	OutRouterLsas   *uint64 `path:"out-router-lsas" module:"open-traffic-generator-ospfv2"`
	OutSummaryLsas  *uint64 `path:"out-summary-lsas" module:"open-traffic-generator-ospfv2"`
	SessionsDown    *uint64 `path:"sessions-down" module:"open-traffic-generator-ospfv2"`
	SessionsFlap    *uint64 `path:"sessions-flap" module:"open-traffic-generator-ospfv2"`
	SessionsUp      *uint64 `path:"sessions-up" module:"open-traffic-generator-ospfv2"`
}

// IsYANGGoStruct ensures that Ospfv2Router_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ospfv2Router_Counters) IsYANGGoStruct() {}

// GetInDbds retrieves the value of the leaf InDbds from the Ospfv2Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InDbds is set, it can
// safely use t.GetInDbds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InDbds == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_Counters) GetInDbds() uint64 {
	if t == nil || t.InDbds == nil {
		return 0
	}
	return *t.InDbds
}

// GetInExternalLsas retrieves the value of the leaf InExternalLsas from the Ospfv2Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InExternalLsas is set, it can
// safely use t.GetInExternalLsas() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InExternalLsas == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_Counters) GetInExternalLsas() uint64 {
	if t == nil || t.InExternalLsas == nil {
		return 0
	}
	return *t.InExternalLsas
}

// GetInHellos retrieves the value of the leaf InHellos from the Ospfv2Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InHellos is set, it can
// safely use t.GetInHellos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InHellos == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_Counters) GetInHellos() uint64 {
	if t == nil || t.InHellos == nil {
		return 0
	}
	return *t.InHellos
}

// GetInLsAcks retrieves the value of the leaf InLsAcks from the Ospfv2Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InLsAcks is set, it can
// safely use t.GetInLsAcks() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InLsAcks == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_Counters) GetInLsAcks() uint64 {
	if t == nil || t.InLsAcks == nil {
		return 0
	}
	return *t.InLsAcks
}

// GetInLsRequests retrieves the value of the leaf InLsRequests from the Ospfv2Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InLsRequests is set, it can
// safely use t.GetInLsRequests() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InLsRequests == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_Counters) GetInLsRequests() uint64 {
	if t == nil || t.InLsRequests == nil {
		return 0
	}
	return *t.InLsRequests
}

// GetInLsUpdates retrieves the value of the leaf InLsUpdates from the Ospfv2Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InLsUpdates is set, it can
// safely use t.GetInLsUpdates() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InLsUpdates == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_Counters) GetInLsUpdates() uint64 {
	if t == nil || t.InLsUpdates == nil {
		return 0
	}
	return *t.InLsUpdates
}

// GetInLsaAcks retrieves the value of the leaf InLsaAcks from the Ospfv2Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InLsaAcks is set, it can
// safely use t.GetInLsaAcks() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InLsaAcks == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_Counters) GetInLsaAcks() uint64 {
	if t == nil || t.InLsaAcks == nil {
		return 0
	}
	return *t.InLsaAcks
}

// GetInLsas retrieves the value of the leaf InLsas from the Ospfv2Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InLsas is set, it can
// safely use t.GetInLsas() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InLsas == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_Counters) GetInLsas() uint64 {
	if t == nil || t.InLsas == nil {
		return 0
	}
	return *t.InLsas
}

// GetInNssaLsas retrieves the value of the leaf InNssaLsas from the Ospfv2Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InNssaLsas is set, it can
// safely use t.GetInNssaLsas() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InNssaLsas == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_Counters) GetInNssaLsas() uint64 {
	if t == nil || t.InNssaLsas == nil {
		return 0
	}
	return *t.InNssaLsas
}

// GetInRouterLsas retrieves the value of the leaf InRouterLsas from the Ospfv2Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InRouterLsas is set, it can
// safely use t.GetInRouterLsas() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InRouterLsas == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_Counters) GetInRouterLsas() uint64 {
	if t == nil || t.InRouterLsas == nil {
		return 0
	}
	return *t.InRouterLsas
}

// GetInSummaryLsas retrieves the value of the leaf InSummaryLsas from the Ospfv2Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InSummaryLsas is set, it can
// safely use t.GetInSummaryLsas() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InSummaryLsas == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_Counters) GetInSummaryLsas() uint64 {
	if t == nil || t.InSummaryLsas == nil {
		return 0
	}
	return *t.InSummaryLsas
}

// GetOutDbds retrieves the value of the leaf OutDbds from the Ospfv2Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutDbds is set, it can
// safely use t.GetOutDbds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutDbds == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_Counters) GetOutDbds() uint64 {
	if t == nil || t.OutDbds == nil {
		return 0
	}
	return *t.OutDbds
}

// GetOutExternalLsas retrieves the value of the leaf OutExternalLsas from the Ospfv2Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutExternalLsas is set, it can
// safely use t.GetOutExternalLsas() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutExternalLsas == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_Counters) GetOutExternalLsas() uint64 {
	if t == nil || t.OutExternalLsas == nil {
		return 0
	}
	return *t.OutExternalLsas
}

// GetOutHellos retrieves the value of the leaf OutHellos from the Ospfv2Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutHellos is set, it can
// safely use t.GetOutHellos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutHellos == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_Counters) GetOutHellos() uint64 {
	if t == nil || t.OutHellos == nil {
		return 0
	}
	return *t.OutHellos
}

// GetOutLsAcks retrieves the value of the leaf OutLsAcks from the Ospfv2Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutLsAcks is set, it can
// safely use t.GetOutLsAcks() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutLsAcks == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_Counters) GetOutLsAcks() uint64 {
	if t == nil || t.OutLsAcks == nil {
		return 0
	}
	return *t.OutLsAcks
}

// GetOutLsRequests retrieves the value of the leaf OutLsRequests from the Ospfv2Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutLsRequests is set, it can
// safely use t.GetOutLsRequests() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutLsRequests == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_Counters) GetOutLsRequests() uint64 {
	if t == nil || t.OutLsRequests == nil {
		return 0
	}
	return *t.OutLsRequests
}

// GetOutLsUpdates retrieves the value of the leaf OutLsUpdates from the Ospfv2Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutLsUpdates is set, it can
// safely use t.GetOutLsUpdates() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutLsUpdates == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_Counters) GetOutLsUpdates() uint64 {
	if t == nil || t.OutLsUpdates == nil {
		return 0
	}
	return *t.OutLsUpdates
}

// GetOutLsaAcks retrieves the value of the leaf OutLsaAcks from the Ospfv2Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutLsaAcks is set, it can
// safely use t.GetOutLsaAcks() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutLsaAcks == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_Counters) GetOutLsaAcks() uint64 {
	if t == nil || t.OutLsaAcks == nil {
		return 0
	}
	return *t.OutLsaAcks
}

// GetOutLsas retrieves the value of the leaf OutLsas from the Ospfv2Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutLsas is set, it can
// safely use t.GetOutLsas() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutLsas == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_Counters) GetOutLsas() uint64 {
	if t == nil || t.OutLsas == nil {
		return 0
	}
	return *t.OutLsas
}

// GetOutNssaLsas retrieves the value of the leaf OutNssaLsas from the Ospfv2Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutNssaLsas is set, it can
// safely use t.GetOutNssaLsas() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutNssaLsas == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_Counters) GetOutNssaLsas() uint64 {
	if t == nil || t.OutNssaLsas == nil {
		return 0
	}
	return *t.OutNssaLsas
}

// GetOutRouterLsas retrieves the value of the leaf OutRouterLsas from the Ospfv2Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutRouterLsas is set, it can
// safely use t.GetOutRouterLsas() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutRouterLsas == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_Counters) GetOutRouterLsas() uint64 {
	if t == nil || t.OutRouterLsas == nil {
		return 0
	}
	return *t.OutRouterLsas
}

// GetOutSummaryLsas retrieves the value of the leaf OutSummaryLsas from the Ospfv2Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutSummaryLsas is set, it can
// safely use t.GetOutSummaryLsas() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutSummaryLsas == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_Counters) GetOutSummaryLsas() uint64 {
	if t == nil || t.OutSummaryLsas == nil {
		return 0
	}
	return *t.OutSummaryLsas
}

// GetSessionsDown retrieves the value of the leaf SessionsDown from the Ospfv2Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionsDown is set, it can
// safely use t.GetSessionsDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionsDown == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_Counters) GetSessionsDown() uint64 {
	if t == nil || t.SessionsDown == nil {
		return 0
	}
	return *t.SessionsDown
}

// GetSessionsFlap retrieves the value of the leaf SessionsFlap from the Ospfv2Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionsFlap is set, it can
// safely use t.GetSessionsFlap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionsFlap == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_Counters) GetSessionsFlap() uint64 {
	if t == nil || t.SessionsFlap == nil {
		return 0
	}
	return *t.SessionsFlap
}

// GetSessionsUp retrieves the value of the leaf SessionsUp from the Ospfv2Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionsUp is set, it can
// safely use t.GetSessionsUp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionsUp == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_Counters) GetSessionsUp() uint64 {
	if t == nil || t.SessionsUp == nil {
		return 0
	}
	return *t.SessionsUp
}

// SetInDbds sets the value of the leaf InDbds in the Ospfv2Router_Counters
// struct.
func (t *Ospfv2Router_Counters) SetInDbds(v uint64) {
	t.InDbds = &v
}

// SetInExternalLsas sets the value of the leaf InExternalLsas in the Ospfv2Router_Counters
// struct.
func (t *Ospfv2Router_Counters) SetInExternalLsas(v uint64) {
	t.InExternalLsas = &v
}

// SetInHellos sets the value of the leaf InHellos in the Ospfv2Router_Counters
// struct.
func (t *Ospfv2Router_Counters) SetInHellos(v uint64) {
	t.InHellos = &v
}

// SetInLsAcks sets the value of the leaf InLsAcks in the Ospfv2Router_Counters
// struct.
func (t *Ospfv2Router_Counters) SetInLsAcks(v uint64) {
	t.InLsAcks = &v
}

// SetInLsRequests sets the value of the leaf InLsRequests in the Ospfv2Router_Counters
// struct.
func (t *Ospfv2Router_Counters) SetInLsRequests(v uint64) {
	t.InLsRequests = &v
}

// SetInLsUpdates sets the value of the leaf InLsUpdates in the Ospfv2Router_Counters
// struct.
func (t *Ospfv2Router_Counters) SetInLsUpdates(v uint64) {
	t.InLsUpdates = &v
}

// SetInLsaAcks sets the value of the leaf InLsaAcks in the Ospfv2Router_Counters
// struct.
func (t *Ospfv2Router_Counters) SetInLsaAcks(v uint64) {
	t.InLsaAcks = &v
}

// SetInLsas sets the value of the leaf InLsas in the Ospfv2Router_Counters
// struct.
func (t *Ospfv2Router_Counters) SetInLsas(v uint64) {
	t.InLsas = &v
}

// SetInNssaLsas sets the value of the leaf InNssaLsas in the Ospfv2Router_Counters
// struct.
func (t *Ospfv2Router_Counters) SetInNssaLsas(v uint64) {
	t.InNssaLsas = &v
}

// SetInRouterLsas sets the value of the leaf InRouterLsas in the Ospfv2Router_Counters
// struct.
func (t *Ospfv2Router_Counters) SetInRouterLsas(v uint64) {
	t.InRouterLsas = &v
}

// SetInSummaryLsas sets the value of the leaf InSummaryLsas in the Ospfv2Router_Counters
// struct.
func (t *Ospfv2Router_Counters) SetInSummaryLsas(v uint64) {
	t.InSummaryLsas = &v
}

// SetOutDbds sets the value of the leaf OutDbds in the Ospfv2Router_Counters
// struct.
func (t *Ospfv2Router_Counters) SetOutDbds(v uint64) {
	t.OutDbds = &v
}

// SetOutExternalLsas sets the value of the leaf OutExternalLsas in the Ospfv2Router_Counters
// struct.
func (t *Ospfv2Router_Counters) SetOutExternalLsas(v uint64) {
	t.OutExternalLsas = &v
}

// SetOutHellos sets the value of the leaf OutHellos in the Ospfv2Router_Counters
// struct.
func (t *Ospfv2Router_Counters) SetOutHellos(v uint64) {
	t.OutHellos = &v
}

// SetOutLsAcks sets the value of the leaf OutLsAcks in the Ospfv2Router_Counters
// struct.
func (t *Ospfv2Router_Counters) SetOutLsAcks(v uint64) {
	t.OutLsAcks = &v
}

// SetOutLsRequests sets the value of the leaf OutLsRequests in the Ospfv2Router_Counters
// struct.
func (t *Ospfv2Router_Counters) SetOutLsRequests(v uint64) {
	t.OutLsRequests = &v
}

// SetOutLsUpdates sets the value of the leaf OutLsUpdates in the Ospfv2Router_Counters
// struct.
func (t *Ospfv2Router_Counters) SetOutLsUpdates(v uint64) {
	t.OutLsUpdates = &v
}

// SetOutLsaAcks sets the value of the leaf OutLsaAcks in the Ospfv2Router_Counters
// struct.
func (t *Ospfv2Router_Counters) SetOutLsaAcks(v uint64) {
	t.OutLsaAcks = &v
}

// SetOutLsas sets the value of the leaf OutLsas in the Ospfv2Router_Counters
// struct.
func (t *Ospfv2Router_Counters) SetOutLsas(v uint64) {
	t.OutLsas = &v
}

// SetOutNssaLsas sets the value of the leaf OutNssaLsas in the Ospfv2Router_Counters
// struct.
func (t *Ospfv2Router_Counters) SetOutNssaLsas(v uint64) {
	t.OutNssaLsas = &v
}

// SetOutRouterLsas sets the value of the leaf OutRouterLsas in the Ospfv2Router_Counters
// struct.
func (t *Ospfv2Router_Counters) SetOutRouterLsas(v uint64) {
	t.OutRouterLsas = &v
}

// SetOutSummaryLsas sets the value of the leaf OutSummaryLsas in the Ospfv2Router_Counters
// struct.
func (t *Ospfv2Router_Counters) SetOutSummaryLsas(v uint64) {
	t.OutSummaryLsas = &v
}

// SetSessionsDown sets the value of the leaf SessionsDown in the Ospfv2Router_Counters
// struct.
func (t *Ospfv2Router_Counters) SetSessionsDown(v uint64) {
	t.SessionsDown = &v
}

// SetSessionsFlap sets the value of the leaf SessionsFlap in the Ospfv2Router_Counters
// struct.
func (t *Ospfv2Router_Counters) SetSessionsFlap(v uint64) {
	t.SessionsFlap = &v
}

// SetSessionsUp sets the value of the leaf SessionsUp in the Ospfv2Router_Counters
// struct.
func (t *Ospfv2Router_Counters) SetSessionsUp(v uint64) {
	t.SessionsUp = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Ospfv2Router_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Ospfv2Router_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv2Router_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ospfv2Router_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv2Router_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ospfv2Router_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ospfv2Router_Counters.
func (*Ospfv2Router_Counters) ΛBelongingModule() string {
	return "open-traffic-generator-ospfv2"
}

// Ospfv2Router_LinkStateDatabase represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database YANG schema element.
type Ospfv2Router_LinkStateDatabase struct {
	LsaStates *Ospfv2Router_LinkStateDatabase_LsaStates `path:"lsa-states" module:"open-traffic-generator-ospfv2"`
}

// IsYANGGoStruct ensures that Ospfv2Router_LinkStateDatabase implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ospfv2Router_LinkStateDatabase) IsYANGGoStruct() {}

// GetOrCreateLsaStates retrieves the value of the LsaStates field
// or returns the existing field if it already exists.
func (t *Ospfv2Router_LinkStateDatabase) GetOrCreateLsaStates() *Ospfv2Router_LinkStateDatabase_LsaStates {
	if t.LsaStates != nil {
		return t.LsaStates
	}
	t.LsaStates = &Ospfv2Router_LinkStateDatabase_LsaStates{}
	return t.LsaStates
}

// GetLsaStates returns the value of the LsaStates struct pointer
// from Ospfv2Router_LinkStateDatabase. If the receiver or the field LsaStates is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Ospfv2Router_LinkStateDatabase) GetLsaStates() *Ospfv2Router_LinkStateDatabase_LsaStates {
	if t != nil && t.LsaStates != nil {
		return t.LsaStates
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Ospfv2Router_LinkStateDatabase
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Ospfv2Router_LinkStateDatabase) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LsaStates.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv2Router_LinkStateDatabase) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ospfv2Router_LinkStateDatabase"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv2Router_LinkStateDatabase) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ospfv2Router_LinkStateDatabase) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ospfv2Router_LinkStateDatabase.
func (*Ospfv2Router_LinkStateDatabase) ΛBelongingModule() string {
	return "open-traffic-generator-ospfv2"
}

// Ospfv2Router_LinkStateDatabase_LsaStates represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates struct {
	ExternalAsLsa     map[string]*Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa     `path:"external-as-lsa" module:"open-traffic-generator-ospfv2"`
	NetworkLsa        map[string]*Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa        `path:"network-lsa" module:"open-traffic-generator-ospfv2"`
	NetworkSummaryLsa map[string]*Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa `path:"network-summary-lsa" module:"open-traffic-generator-ospfv2"`
	NssaLsa           map[string]*Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa           `path:"nssa-lsa" module:"open-traffic-generator-ospfv2"`
	OpaqueLsa         map[string]*Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa         `path:"opaque-lsa" module:"open-traffic-generator-ospfv2"`
	RouterLsa         map[string]*Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa         `path:"router-lsa" module:"open-traffic-generator-ospfv2"`
	SummaryAsLsa      map[string]*Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa      `path:"summary-as-lsa" module:"open-traffic-generator-ospfv2"`
}

// IsYANGGoStruct ensures that Ospfv2Router_LinkStateDatabase_LsaStates implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ospfv2Router_LinkStateDatabase_LsaStates) IsYANGGoStruct() {}

// NewExternalAsLsa creates a new entry in the ExternalAsLsa list of the
// Ospfv2Router_LinkStateDatabase_LsaStates struct. The keys of the list are populated from the input
// arguments.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) NewExternalAsLsa(LinkStateId string) (*Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExternalAsLsa == nil {
		t.ExternalAsLsa = make(map[string]*Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa)
	}

	key := LinkStateId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ExternalAsLsa[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ExternalAsLsa", key)
	}

	t.ExternalAsLsa[key] = &Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa{
		LinkStateId: &LinkStateId,
	}

	return t.ExternalAsLsa[key], nil
}

// RenameExternalAsLsa renames an entry in the list ExternalAsLsa within
// the Ospfv2Router_LinkStateDatabase_LsaStates struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) RenameExternalAsLsa(oldK, newK string) error {
	if _, ok := t.ExternalAsLsa[newK]; ok {
		return fmt.Errorf("key %v already exists in ExternalAsLsa", newK)
	}

	e, ok := t.ExternalAsLsa[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ExternalAsLsa", oldK)
	}
	e.LinkStateId = &newK

	t.ExternalAsLsa[newK] = e
	delete(t.ExternalAsLsa, oldK)
	return nil
}

// GetOrCreateExternalAsLsaMap returns the list (map) from Ospfv2Router_LinkStateDatabase_LsaStates.
//
// It initializes the field if not already initialized.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) GetOrCreateExternalAsLsaMap() map[string]*Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa {
	if t.ExternalAsLsa == nil {
		t.ExternalAsLsa = make(map[string]*Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa)
	}
	return t.ExternalAsLsa
}

// GetOrCreateExternalAsLsa retrieves the value with the specified keys from
// the receiver Ospfv2Router_LinkStateDatabase_LsaStates. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) GetOrCreateExternalAsLsa(LinkStateId string) *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa {

	key := LinkStateId

	if v, ok := t.ExternalAsLsa[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewExternalAsLsa(LinkStateId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateExternalAsLsa got unexpected error: %v", err))
	}
	return v
}

// GetExternalAsLsa retrieves the value with the specified key from
// the ExternalAsLsa map field of Ospfv2Router_LinkStateDatabase_LsaStates. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) GetExternalAsLsa(LinkStateId string) *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa {

	if t == nil {
		return nil
	}

	key := LinkStateId

	if lm, ok := t.ExternalAsLsa[key]; ok {
		return lm
	}
	return nil
}

// DeleteExternalAsLsa deletes the value with the specified keys from
// the receiver Ospfv2Router_LinkStateDatabase_LsaStates. If there is no such element, the function
// is a no-op.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) DeleteExternalAsLsa(LinkStateId string) {
	key := LinkStateId

	delete(t.ExternalAsLsa, key)
}

// AppendExternalAsLsa appends the supplied Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa struct to the
// list ExternalAsLsa of Ospfv2Router_LinkStateDatabase_LsaStates. If the key value(s) specified in
// the supplied Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa already exist in the list, an error is
// returned.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) AppendExternalAsLsa(v *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa) error {
	if v.LinkStateId == nil {
		return fmt.Errorf("invalid nil key received for LinkStateId")
	}

	key := *v.LinkStateId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExternalAsLsa == nil {
		t.ExternalAsLsa = make(map[string]*Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa)
	}

	if _, ok := t.ExternalAsLsa[key]; ok {
		return fmt.Errorf("duplicate key for list ExternalAsLsa %v", key)
	}

	t.ExternalAsLsa[key] = v
	return nil
}

// NewNetworkLsa creates a new entry in the NetworkLsa list of the
// Ospfv2Router_LinkStateDatabase_LsaStates struct. The keys of the list are populated from the input
// arguments.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) NewNetworkLsa(LinkStateId string) (*Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NetworkLsa == nil {
		t.NetworkLsa = make(map[string]*Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa)
	}

	key := LinkStateId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NetworkLsa[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NetworkLsa", key)
	}

	t.NetworkLsa[key] = &Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa{
		LinkStateId: &LinkStateId,
	}

	return t.NetworkLsa[key], nil
}

// RenameNetworkLsa renames an entry in the list NetworkLsa within
// the Ospfv2Router_LinkStateDatabase_LsaStates struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) RenameNetworkLsa(oldK, newK string) error {
	if _, ok := t.NetworkLsa[newK]; ok {
		return fmt.Errorf("key %v already exists in NetworkLsa", newK)
	}

	e, ok := t.NetworkLsa[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NetworkLsa", oldK)
	}
	e.LinkStateId = &newK

	t.NetworkLsa[newK] = e
	delete(t.NetworkLsa, oldK)
	return nil
}

// GetOrCreateNetworkLsaMap returns the list (map) from Ospfv2Router_LinkStateDatabase_LsaStates.
//
// It initializes the field if not already initialized.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) GetOrCreateNetworkLsaMap() map[string]*Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa {
	if t.NetworkLsa == nil {
		t.NetworkLsa = make(map[string]*Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa)
	}
	return t.NetworkLsa
}

// GetOrCreateNetworkLsa retrieves the value with the specified keys from
// the receiver Ospfv2Router_LinkStateDatabase_LsaStates. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) GetOrCreateNetworkLsa(LinkStateId string) *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa {

	key := LinkStateId

	if v, ok := t.NetworkLsa[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNetworkLsa(LinkStateId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNetworkLsa got unexpected error: %v", err))
	}
	return v
}

// GetNetworkLsa retrieves the value with the specified key from
// the NetworkLsa map field of Ospfv2Router_LinkStateDatabase_LsaStates. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) GetNetworkLsa(LinkStateId string) *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa {

	if t == nil {
		return nil
	}

	key := LinkStateId

	if lm, ok := t.NetworkLsa[key]; ok {
		return lm
	}
	return nil
}

// DeleteNetworkLsa deletes the value with the specified keys from
// the receiver Ospfv2Router_LinkStateDatabase_LsaStates. If there is no such element, the function
// is a no-op.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) DeleteNetworkLsa(LinkStateId string) {
	key := LinkStateId

	delete(t.NetworkLsa, key)
}

// AppendNetworkLsa appends the supplied Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa struct to the
// list NetworkLsa of Ospfv2Router_LinkStateDatabase_LsaStates. If the key value(s) specified in
// the supplied Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa already exist in the list, an error is
// returned.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) AppendNetworkLsa(v *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa) error {
	if v.LinkStateId == nil {
		return fmt.Errorf("invalid nil key received for LinkStateId")
	}

	key := *v.LinkStateId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NetworkLsa == nil {
		t.NetworkLsa = make(map[string]*Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa)
	}

	if _, ok := t.NetworkLsa[key]; ok {
		return fmt.Errorf("duplicate key for list NetworkLsa %v", key)
	}

	t.NetworkLsa[key] = v
	return nil
}

// NewNetworkSummaryLsa creates a new entry in the NetworkSummaryLsa list of the
// Ospfv2Router_LinkStateDatabase_LsaStates struct. The keys of the list are populated from the input
// arguments.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) NewNetworkSummaryLsa(LinkStateId string) (*Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NetworkSummaryLsa == nil {
		t.NetworkSummaryLsa = make(map[string]*Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa)
	}

	key := LinkStateId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NetworkSummaryLsa[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NetworkSummaryLsa", key)
	}

	t.NetworkSummaryLsa[key] = &Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa{
		LinkStateId: &LinkStateId,
	}

	return t.NetworkSummaryLsa[key], nil
}

// RenameNetworkSummaryLsa renames an entry in the list NetworkSummaryLsa within
// the Ospfv2Router_LinkStateDatabase_LsaStates struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) RenameNetworkSummaryLsa(oldK, newK string) error {
	if _, ok := t.NetworkSummaryLsa[newK]; ok {
		return fmt.Errorf("key %v already exists in NetworkSummaryLsa", newK)
	}

	e, ok := t.NetworkSummaryLsa[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NetworkSummaryLsa", oldK)
	}
	e.LinkStateId = &newK

	t.NetworkSummaryLsa[newK] = e
	delete(t.NetworkSummaryLsa, oldK)
	return nil
}

// GetOrCreateNetworkSummaryLsaMap returns the list (map) from Ospfv2Router_LinkStateDatabase_LsaStates.
//
// It initializes the field if not already initialized.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) GetOrCreateNetworkSummaryLsaMap() map[string]*Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa {
	if t.NetworkSummaryLsa == nil {
		t.NetworkSummaryLsa = make(map[string]*Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa)
	}
	return t.NetworkSummaryLsa
}

// GetOrCreateNetworkSummaryLsa retrieves the value with the specified keys from
// the receiver Ospfv2Router_LinkStateDatabase_LsaStates. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) GetOrCreateNetworkSummaryLsa(LinkStateId string) *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa {

	key := LinkStateId

	if v, ok := t.NetworkSummaryLsa[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNetworkSummaryLsa(LinkStateId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNetworkSummaryLsa got unexpected error: %v", err))
	}
	return v
}

// GetNetworkSummaryLsa retrieves the value with the specified key from
// the NetworkSummaryLsa map field of Ospfv2Router_LinkStateDatabase_LsaStates. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) GetNetworkSummaryLsa(LinkStateId string) *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa {

	if t == nil {
		return nil
	}

	key := LinkStateId

	if lm, ok := t.NetworkSummaryLsa[key]; ok {
		return lm
	}
	return nil
}

// DeleteNetworkSummaryLsa deletes the value with the specified keys from
// the receiver Ospfv2Router_LinkStateDatabase_LsaStates. If there is no such element, the function
// is a no-op.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) DeleteNetworkSummaryLsa(LinkStateId string) {
	key := LinkStateId

	delete(t.NetworkSummaryLsa, key)
}

// AppendNetworkSummaryLsa appends the supplied Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa struct to the
// list NetworkSummaryLsa of Ospfv2Router_LinkStateDatabase_LsaStates. If the key value(s) specified in
// the supplied Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa already exist in the list, an error is
// returned.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) AppendNetworkSummaryLsa(v *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa) error {
	if v.LinkStateId == nil {
		return fmt.Errorf("invalid nil key received for LinkStateId")
	}

	key := *v.LinkStateId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NetworkSummaryLsa == nil {
		t.NetworkSummaryLsa = make(map[string]*Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa)
	}

	if _, ok := t.NetworkSummaryLsa[key]; ok {
		return fmt.Errorf("duplicate key for list NetworkSummaryLsa %v", key)
	}

	t.NetworkSummaryLsa[key] = v
	return nil
}

// NewNssaLsa creates a new entry in the NssaLsa list of the
// Ospfv2Router_LinkStateDatabase_LsaStates struct. The keys of the list are populated from the input
// arguments.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) NewNssaLsa(LinkStateId string) (*Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NssaLsa == nil {
		t.NssaLsa = make(map[string]*Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa)
	}

	key := LinkStateId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NssaLsa[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NssaLsa", key)
	}

	t.NssaLsa[key] = &Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa{
		LinkStateId: &LinkStateId,
	}

	return t.NssaLsa[key], nil
}

// RenameNssaLsa renames an entry in the list NssaLsa within
// the Ospfv2Router_LinkStateDatabase_LsaStates struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) RenameNssaLsa(oldK, newK string) error {
	if _, ok := t.NssaLsa[newK]; ok {
		return fmt.Errorf("key %v already exists in NssaLsa", newK)
	}

	e, ok := t.NssaLsa[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NssaLsa", oldK)
	}
	e.LinkStateId = &newK

	t.NssaLsa[newK] = e
	delete(t.NssaLsa, oldK)
	return nil
}

// GetOrCreateNssaLsaMap returns the list (map) from Ospfv2Router_LinkStateDatabase_LsaStates.
//
// It initializes the field if not already initialized.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) GetOrCreateNssaLsaMap() map[string]*Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa {
	if t.NssaLsa == nil {
		t.NssaLsa = make(map[string]*Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa)
	}
	return t.NssaLsa
}

// GetOrCreateNssaLsa retrieves the value with the specified keys from
// the receiver Ospfv2Router_LinkStateDatabase_LsaStates. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) GetOrCreateNssaLsa(LinkStateId string) *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa {

	key := LinkStateId

	if v, ok := t.NssaLsa[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNssaLsa(LinkStateId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNssaLsa got unexpected error: %v", err))
	}
	return v
}

// GetNssaLsa retrieves the value with the specified key from
// the NssaLsa map field of Ospfv2Router_LinkStateDatabase_LsaStates. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) GetNssaLsa(LinkStateId string) *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa {

	if t == nil {
		return nil
	}

	key := LinkStateId

	if lm, ok := t.NssaLsa[key]; ok {
		return lm
	}
	return nil
}

// DeleteNssaLsa deletes the value with the specified keys from
// the receiver Ospfv2Router_LinkStateDatabase_LsaStates. If there is no such element, the function
// is a no-op.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) DeleteNssaLsa(LinkStateId string) {
	key := LinkStateId

	delete(t.NssaLsa, key)
}

// AppendNssaLsa appends the supplied Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa struct to the
// list NssaLsa of Ospfv2Router_LinkStateDatabase_LsaStates. If the key value(s) specified in
// the supplied Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa already exist in the list, an error is
// returned.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) AppendNssaLsa(v *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) error {
	if v.LinkStateId == nil {
		return fmt.Errorf("invalid nil key received for LinkStateId")
	}

	key := *v.LinkStateId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NssaLsa == nil {
		t.NssaLsa = make(map[string]*Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa)
	}

	if _, ok := t.NssaLsa[key]; ok {
		return fmt.Errorf("duplicate key for list NssaLsa %v", key)
	}

	t.NssaLsa[key] = v
	return nil
}

// NewOpaqueLsa creates a new entry in the OpaqueLsa list of the
// Ospfv2Router_LinkStateDatabase_LsaStates struct. The keys of the list are populated from the input
// arguments.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) NewOpaqueLsa(LinkStateId string) (*Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.OpaqueLsa == nil {
		t.OpaqueLsa = make(map[string]*Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa)
	}

	key := LinkStateId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.OpaqueLsa[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list OpaqueLsa", key)
	}

	t.OpaqueLsa[key] = &Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa{
		LinkStateId: &LinkStateId,
	}

	return t.OpaqueLsa[key], nil
}

// RenameOpaqueLsa renames an entry in the list OpaqueLsa within
// the Ospfv2Router_LinkStateDatabase_LsaStates struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) RenameOpaqueLsa(oldK, newK string) error {
	if _, ok := t.OpaqueLsa[newK]; ok {
		return fmt.Errorf("key %v already exists in OpaqueLsa", newK)
	}

	e, ok := t.OpaqueLsa[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in OpaqueLsa", oldK)
	}
	e.LinkStateId = &newK

	t.OpaqueLsa[newK] = e
	delete(t.OpaqueLsa, oldK)
	return nil
}

// GetOrCreateOpaqueLsaMap returns the list (map) from Ospfv2Router_LinkStateDatabase_LsaStates.
//
// It initializes the field if not already initialized.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) GetOrCreateOpaqueLsaMap() map[string]*Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa {
	if t.OpaqueLsa == nil {
		t.OpaqueLsa = make(map[string]*Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa)
	}
	return t.OpaqueLsa
}

// GetOrCreateOpaqueLsa retrieves the value with the specified keys from
// the receiver Ospfv2Router_LinkStateDatabase_LsaStates. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) GetOrCreateOpaqueLsa(LinkStateId string) *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa {

	key := LinkStateId

	if v, ok := t.OpaqueLsa[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOpaqueLsa(LinkStateId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOpaqueLsa got unexpected error: %v", err))
	}
	return v
}

// GetOpaqueLsa retrieves the value with the specified key from
// the OpaqueLsa map field of Ospfv2Router_LinkStateDatabase_LsaStates. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) GetOpaqueLsa(LinkStateId string) *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa {

	if t == nil {
		return nil
	}

	key := LinkStateId

	if lm, ok := t.OpaqueLsa[key]; ok {
		return lm
	}
	return nil
}

// DeleteOpaqueLsa deletes the value with the specified keys from
// the receiver Ospfv2Router_LinkStateDatabase_LsaStates. If there is no such element, the function
// is a no-op.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) DeleteOpaqueLsa(LinkStateId string) {
	key := LinkStateId

	delete(t.OpaqueLsa, key)
}

// AppendOpaqueLsa appends the supplied Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa struct to the
// list OpaqueLsa of Ospfv2Router_LinkStateDatabase_LsaStates. If the key value(s) specified in
// the supplied Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa already exist in the list, an error is
// returned.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) AppendOpaqueLsa(v *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa) error {
	if v.LinkStateId == nil {
		return fmt.Errorf("invalid nil key received for LinkStateId")
	}

	key := *v.LinkStateId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.OpaqueLsa == nil {
		t.OpaqueLsa = make(map[string]*Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa)
	}

	if _, ok := t.OpaqueLsa[key]; ok {
		return fmt.Errorf("duplicate key for list OpaqueLsa %v", key)
	}

	t.OpaqueLsa[key] = v
	return nil
}

// NewRouterLsa creates a new entry in the RouterLsa list of the
// Ospfv2Router_LinkStateDatabase_LsaStates struct. The keys of the list are populated from the input
// arguments.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) NewRouterLsa(LinkStateId string) (*Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouterLsa == nil {
		t.RouterLsa = make(map[string]*Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa)
	}

	key := LinkStateId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RouterLsa[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RouterLsa", key)
	}

	t.RouterLsa[key] = &Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa{
		LinkStateId: &LinkStateId,
	}

	return t.RouterLsa[key], nil
}

// RenameRouterLsa renames an entry in the list RouterLsa within
// the Ospfv2Router_LinkStateDatabase_LsaStates struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) RenameRouterLsa(oldK, newK string) error {
	if _, ok := t.RouterLsa[newK]; ok {
		return fmt.Errorf("key %v already exists in RouterLsa", newK)
	}

	e, ok := t.RouterLsa[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RouterLsa", oldK)
	}
	e.LinkStateId = &newK

	t.RouterLsa[newK] = e
	delete(t.RouterLsa, oldK)
	return nil
}

// GetOrCreateRouterLsaMap returns the list (map) from Ospfv2Router_LinkStateDatabase_LsaStates.
//
// It initializes the field if not already initialized.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) GetOrCreateRouterLsaMap() map[string]*Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa {
	if t.RouterLsa == nil {
		t.RouterLsa = make(map[string]*Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa)
	}
	return t.RouterLsa
}

// GetOrCreateRouterLsa retrieves the value with the specified keys from
// the receiver Ospfv2Router_LinkStateDatabase_LsaStates. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) GetOrCreateRouterLsa(LinkStateId string) *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa {

	key := LinkStateId

	if v, ok := t.RouterLsa[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRouterLsa(LinkStateId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRouterLsa got unexpected error: %v", err))
	}
	return v
}

// GetRouterLsa retrieves the value with the specified key from
// the RouterLsa map field of Ospfv2Router_LinkStateDatabase_LsaStates. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) GetRouterLsa(LinkStateId string) *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa {

	if t == nil {
		return nil
	}

	key := LinkStateId

	if lm, ok := t.RouterLsa[key]; ok {
		return lm
	}
	return nil
}

// DeleteRouterLsa deletes the value with the specified keys from
// the receiver Ospfv2Router_LinkStateDatabase_LsaStates. If there is no such element, the function
// is a no-op.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) DeleteRouterLsa(LinkStateId string) {
	key := LinkStateId

	delete(t.RouterLsa, key)
}

// AppendRouterLsa appends the supplied Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa struct to the
// list RouterLsa of Ospfv2Router_LinkStateDatabase_LsaStates. If the key value(s) specified in
// the supplied Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa already exist in the list, an error is
// returned.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) AppendRouterLsa(v *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa) error {
	if v.LinkStateId == nil {
		return fmt.Errorf("invalid nil key received for LinkStateId")
	}

	key := *v.LinkStateId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouterLsa == nil {
		t.RouterLsa = make(map[string]*Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa)
	}

	if _, ok := t.RouterLsa[key]; ok {
		return fmt.Errorf("duplicate key for list RouterLsa %v", key)
	}

	t.RouterLsa[key] = v
	return nil
}

// NewSummaryAsLsa creates a new entry in the SummaryAsLsa list of the
// Ospfv2Router_LinkStateDatabase_LsaStates struct. The keys of the list are populated from the input
// arguments.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) NewSummaryAsLsa(LinkStateId string) (*Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SummaryAsLsa == nil {
		t.SummaryAsLsa = make(map[string]*Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa)
	}

	key := LinkStateId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SummaryAsLsa[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SummaryAsLsa", key)
	}

	t.SummaryAsLsa[key] = &Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa{
		LinkStateId: &LinkStateId,
	}

	return t.SummaryAsLsa[key], nil
}

// RenameSummaryAsLsa renames an entry in the list SummaryAsLsa within
// the Ospfv2Router_LinkStateDatabase_LsaStates struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) RenameSummaryAsLsa(oldK, newK string) error {
	if _, ok := t.SummaryAsLsa[newK]; ok {
		return fmt.Errorf("key %v already exists in SummaryAsLsa", newK)
	}

	e, ok := t.SummaryAsLsa[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SummaryAsLsa", oldK)
	}
	e.LinkStateId = &newK

	t.SummaryAsLsa[newK] = e
	delete(t.SummaryAsLsa, oldK)
	return nil
}

// GetOrCreateSummaryAsLsaMap returns the list (map) from Ospfv2Router_LinkStateDatabase_LsaStates.
//
// It initializes the field if not already initialized.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) GetOrCreateSummaryAsLsaMap() map[string]*Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa {
	if t.SummaryAsLsa == nil {
		t.SummaryAsLsa = make(map[string]*Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa)
	}
	return t.SummaryAsLsa
}

// GetOrCreateSummaryAsLsa retrieves the value with the specified keys from
// the receiver Ospfv2Router_LinkStateDatabase_LsaStates. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) GetOrCreateSummaryAsLsa(LinkStateId string) *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa {

	key := LinkStateId

	if v, ok := t.SummaryAsLsa[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSummaryAsLsa(LinkStateId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSummaryAsLsa got unexpected error: %v", err))
	}
	return v
}

// GetSummaryAsLsa retrieves the value with the specified key from
// the SummaryAsLsa map field of Ospfv2Router_LinkStateDatabase_LsaStates. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) GetSummaryAsLsa(LinkStateId string) *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa {

	if t == nil {
		return nil
	}

	key := LinkStateId

	if lm, ok := t.SummaryAsLsa[key]; ok {
		return lm
	}
	return nil
}

// DeleteSummaryAsLsa deletes the value with the specified keys from
// the receiver Ospfv2Router_LinkStateDatabase_LsaStates. If there is no such element, the function
// is a no-op.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) DeleteSummaryAsLsa(LinkStateId string) {
	key := LinkStateId

	delete(t.SummaryAsLsa, key)
}

// AppendSummaryAsLsa appends the supplied Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa struct to the
// list SummaryAsLsa of Ospfv2Router_LinkStateDatabase_LsaStates. If the key value(s) specified in
// the supplied Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa already exist in the list, an error is
// returned.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) AppendSummaryAsLsa(v *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa) error {
	if v.LinkStateId == nil {
		return fmt.Errorf("invalid nil key received for LinkStateId")
	}

	key := *v.LinkStateId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SummaryAsLsa == nil {
		t.SummaryAsLsa = make(map[string]*Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa)
	}

	if _, ok := t.SummaryAsLsa[key]; ok {
		return fmt.Errorf("duplicate key for list SummaryAsLsa %v", key)
	}

	t.SummaryAsLsa[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Ospfv2Router_LinkStateDatabase_LsaStates
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.ExternalAsLsa {
		e.PopulateDefaults()
	}
	for _, e := range t.NetworkLsa {
		e.PopulateDefaults()
	}
	for _, e := range t.NetworkSummaryLsa {
		e.PopulateDefaults()
	}
	for _, e := range t.NssaLsa {
		e.PopulateDefaults()
	}
	for _, e := range t.OpaqueLsa {
		e.PopulateDefaults()
	}
	for _, e := range t.RouterLsa {
		e.PopulateDefaults()
	}
	for _, e := range t.SummaryAsLsa {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ospfv2Router_LinkStateDatabase_LsaStates"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ospfv2Router_LinkStateDatabase_LsaStates.
func (*Ospfv2Router_LinkStateDatabase_LsaStates) ΛBelongingModule() string {
	return "open-traffic-generator-ospfv2"
}

// Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/external-as-lsa YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa struct {
	AdvertisingRouter *string `path:"state/advertising-router" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
	Age               *uint16 `path:"state/age" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
	LinkStateId       *string `path:"state/link-state-id|link-state-id" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2|open-traffic-generator-ospfv2" shadow-path:"link-state-id" shadow-module:"open-traffic-generator-ospfv2"`
	Metric            *uint16 `path:"state/metric" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
	MetricType        *uint32 `path:"state/metric-type" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
	NetworkMask       *string `path:"state/network-mask" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
	OptionBits        *uint32 `path:"state/option-bits" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
	SequenceNumber    *uint32 `path:"state/sequence-number" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
}

// IsYANGGoStruct ensures that Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa) IsYANGGoStruct() {}

// GetAdvertisingRouter retrieves the value of the leaf AdvertisingRouter from the Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisingRouter is set, it can
// safely use t.GetAdvertisingRouter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisingRouter == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa) GetAdvertisingRouter() string {
	if t == nil || t.AdvertisingRouter == nil {
		return ""
	}
	return *t.AdvertisingRouter
}

// GetAge retrieves the value of the leaf Age from the Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Age is set, it can
// safely use t.GetAge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Age == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa) GetAge() uint16 {
	if t == nil || t.Age == nil {
		return 0
	}
	return *t.Age
}

// GetLinkStateId retrieves the value of the leaf LinkStateId from the Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkStateId is set, it can
// safely use t.GetLinkStateId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkStateId == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa) GetLinkStateId() string {
	if t == nil || t.LinkStateId == nil {
		return ""
	}
	return *t.LinkStateId
}

// GetMetric retrieves the value of the leaf Metric from the Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa) GetMetric() uint16 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetMetricType retrieves the value of the leaf MetricType from the Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricType is set, it can
// safely use t.GetMetricType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricType == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa) GetMetricType() uint32 {
	if t == nil || t.MetricType == nil {
		return 0
	}
	return *t.MetricType
}

// GetNetworkMask retrieves the value of the leaf NetworkMask from the Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkMask is set, it can
// safely use t.GetNetworkMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkMask == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa) GetNetworkMask() string {
	if t == nil || t.NetworkMask == nil {
		return ""
	}
	return *t.NetworkMask
}

// GetOptionBits retrieves the value of the leaf OptionBits from the Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OptionBits is set, it can
// safely use t.GetOptionBits() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OptionBits == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa) GetOptionBits() uint32 {
	if t == nil || t.OptionBits == nil {
		return 0
	}
	return *t.OptionBits
}

// GetSequenceNumber retrieves the value of the leaf SequenceNumber from the Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SequenceNumber is set, it can
// safely use t.GetSequenceNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SequenceNumber == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa) GetSequenceNumber() uint32 {
	if t == nil || t.SequenceNumber == nil {
		return 0
	}
	return *t.SequenceNumber
}

// SetAdvertisingRouter sets the value of the leaf AdvertisingRouter in the Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa) SetAdvertisingRouter(v string) {
	t.AdvertisingRouter = &v
}

// SetAge sets the value of the leaf Age in the Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa) SetAge(v uint16) {
	t.Age = &v
}

// SetLinkStateId sets the value of the leaf LinkStateId in the Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa) SetLinkStateId(v string) {
	t.LinkStateId = &v
}

// SetMetric sets the value of the leaf Metric in the Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa) SetMetric(v uint16) {
	t.Metric = &v
}

// SetMetricType sets the value of the leaf MetricType in the Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa) SetMetricType(v uint32) {
	t.MetricType = &v
}

// SetNetworkMask sets the value of the leaf NetworkMask in the Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa) SetNetworkMask(v string) {
	t.NetworkMask = &v
}

// SetOptionBits sets the value of the leaf OptionBits in the Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa) SetOptionBits(v uint32) {
	t.OptionBits = &v
}

// SetSequenceNumber sets the value of the leaf SequenceNumber in the Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa) SetSequenceNumber(v uint32) {
	t.SequenceNumber = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa struct, which is a YANG list entry.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LinkStateId == nil {
		return nil, fmt.Errorf("nil value for key LinkStateId")
	}

	return map[string]interface{}{
		"link-state-id": *t.LinkStateId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa.
func (*Ospfv2Router_LinkStateDatabase_LsaStates_ExternalAsLsa) ΛBelongingModule() string {
	return "open-traffic-generator-ospfv2"
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-lsa YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa struct {
	AdvertisingRouter *string  `path:"state/advertising-router" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
	Age               *uint16  `path:"state/age" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
	AttachedRouter    []string `path:"state/attached-router" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
	LinkStateId       *string  `path:"state/link-state-id|link-state-id" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2|open-traffic-generator-ospfv2" shadow-path:"link-state-id" shadow-module:"open-traffic-generator-ospfv2"`
	NetworkMask       *string  `path:"state/network-mask" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
	OptionBits        *uint32  `path:"state/option-bits" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
	SequenceNumber    *uint32  `path:"state/sequence-number" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
}

// IsYANGGoStruct ensures that Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa) IsYANGGoStruct() {}

// GetAdvertisingRouter retrieves the value of the leaf AdvertisingRouter from the Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisingRouter is set, it can
// safely use t.GetAdvertisingRouter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisingRouter == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa) GetAdvertisingRouter() string {
	if t == nil || t.AdvertisingRouter == nil {
		return ""
	}
	return *t.AdvertisingRouter
}

// GetAge retrieves the value of the leaf Age from the Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Age is set, it can
// safely use t.GetAge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Age == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa) GetAge() uint16 {
	if t == nil || t.Age == nil {
		return 0
	}
	return *t.Age
}

// GetAttachedRouter retrieves the value of the leaf AttachedRouter from the Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttachedRouter is set, it can
// safely use t.GetAttachedRouter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttachedRouter == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa) GetAttachedRouter() []string {
	if t == nil || t.AttachedRouter == nil {
		return nil
	}
	return t.AttachedRouter
}

// GetLinkStateId retrieves the value of the leaf LinkStateId from the Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkStateId is set, it can
// safely use t.GetLinkStateId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkStateId == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa) GetLinkStateId() string {
	if t == nil || t.LinkStateId == nil {
		return ""
	}
	return *t.LinkStateId
}

// GetNetworkMask retrieves the value of the leaf NetworkMask from the Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkMask is set, it can
// safely use t.GetNetworkMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkMask == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa) GetNetworkMask() string {
	if t == nil || t.NetworkMask == nil {
		return ""
	}
	return *t.NetworkMask
}

// GetOptionBits retrieves the value of the leaf OptionBits from the Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OptionBits is set, it can
// safely use t.GetOptionBits() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OptionBits == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa) GetOptionBits() uint32 {
	if t == nil || t.OptionBits == nil {
		return 0
	}
	return *t.OptionBits
}

// GetSequenceNumber retrieves the value of the leaf SequenceNumber from the Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SequenceNumber is set, it can
// safely use t.GetSequenceNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SequenceNumber == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa) GetSequenceNumber() uint32 {
	if t == nil || t.SequenceNumber == nil {
		return 0
	}
	return *t.SequenceNumber
}

// SetAdvertisingRouter sets the value of the leaf AdvertisingRouter in the Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa) SetAdvertisingRouter(v string) {
	t.AdvertisingRouter = &v
}

// SetAge sets the value of the leaf Age in the Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa) SetAge(v uint16) {
	t.Age = &v
}

// SetAttachedRouter sets the value of the leaf AttachedRouter in the Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa) SetAttachedRouter(v []string) {
	t.AttachedRouter = v
}

// SetLinkStateId sets the value of the leaf LinkStateId in the Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa) SetLinkStateId(v string) {
	t.LinkStateId = &v
}

// SetNetworkMask sets the value of the leaf NetworkMask in the Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa) SetNetworkMask(v string) {
	t.NetworkMask = &v
}

// SetOptionBits sets the value of the leaf OptionBits in the Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa) SetOptionBits(v uint32) {
	t.OptionBits = &v
}

// SetSequenceNumber sets the value of the leaf SequenceNumber in the Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa) SetSequenceNumber(v uint32) {
	t.SequenceNumber = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa struct, which is a YANG list entry.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LinkStateId == nil {
		return nil, fmt.Errorf("nil value for key LinkStateId")
	}

	return map[string]interface{}{
		"link-state-id": *t.LinkStateId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa.
func (*Ospfv2Router_LinkStateDatabase_LsaStates_NetworkLsa) ΛBelongingModule() string {
	return "open-traffic-generator-ospfv2"
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/network-summary-lsa YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa struct {
	AdvertisingRouter *string `path:"state/advertising-router" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
	Age               *uint16 `path:"state/age" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
	LinkStateId       *string `path:"state/link-state-id|link-state-id" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2|open-traffic-generator-ospfv2" shadow-path:"link-state-id" shadow-module:"open-traffic-generator-ospfv2"`
	Metric            *uint16 `path:"state/metric" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
	NetworkMask       *string `path:"state/network-mask" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
	OptionBits        *uint32 `path:"state/option-bits" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
	SequenceNumber    *uint32 `path:"state/sequence-number" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
}

// IsYANGGoStruct ensures that Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa) IsYANGGoStruct() {}

// GetAdvertisingRouter retrieves the value of the leaf AdvertisingRouter from the Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisingRouter is set, it can
// safely use t.GetAdvertisingRouter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisingRouter == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa) GetAdvertisingRouter() string {
	if t == nil || t.AdvertisingRouter == nil {
		return ""
	}
	return *t.AdvertisingRouter
}

// GetAge retrieves the value of the leaf Age from the Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Age is set, it can
// safely use t.GetAge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Age == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa) GetAge() uint16 {
	if t == nil || t.Age == nil {
		return 0
	}
	return *t.Age
}

// GetLinkStateId retrieves the value of the leaf LinkStateId from the Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkStateId is set, it can
// safely use t.GetLinkStateId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkStateId == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa) GetLinkStateId() string {
	if t == nil || t.LinkStateId == nil {
		return ""
	}
	return *t.LinkStateId
}

// GetMetric retrieves the value of the leaf Metric from the Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa) GetMetric() uint16 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetNetworkMask retrieves the value of the leaf NetworkMask from the Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkMask is set, it can
// safely use t.GetNetworkMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkMask == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa) GetNetworkMask() string {
	if t == nil || t.NetworkMask == nil {
		return ""
	}
	return *t.NetworkMask
}

// GetOptionBits retrieves the value of the leaf OptionBits from the Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OptionBits is set, it can
// safely use t.GetOptionBits() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OptionBits == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa) GetOptionBits() uint32 {
	if t == nil || t.OptionBits == nil {
		return 0
	}
	return *t.OptionBits
}

// GetSequenceNumber retrieves the value of the leaf SequenceNumber from the Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SequenceNumber is set, it can
// safely use t.GetSequenceNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SequenceNumber == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa) GetSequenceNumber() uint32 {
	if t == nil || t.SequenceNumber == nil {
		return 0
	}
	return *t.SequenceNumber
}

// SetAdvertisingRouter sets the value of the leaf AdvertisingRouter in the Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa) SetAdvertisingRouter(v string) {
	t.AdvertisingRouter = &v
}

// SetAge sets the value of the leaf Age in the Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa) SetAge(v uint16) {
	t.Age = &v
}

// SetLinkStateId sets the value of the leaf LinkStateId in the Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa) SetLinkStateId(v string) {
	t.LinkStateId = &v
}

// SetMetric sets the value of the leaf Metric in the Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa) SetMetric(v uint16) {
	t.Metric = &v
}

// SetNetworkMask sets the value of the leaf NetworkMask in the Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa) SetNetworkMask(v string) {
	t.NetworkMask = &v
}

// SetOptionBits sets the value of the leaf OptionBits in the Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa) SetOptionBits(v uint32) {
	t.OptionBits = &v
}

// SetSequenceNumber sets the value of the leaf SequenceNumber in the Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa) SetSequenceNumber(v uint32) {
	t.SequenceNumber = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa struct, which is a YANG list entry.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LinkStateId == nil {
		return nil, fmt.Errorf("nil value for key LinkStateId")
	}

	return map[string]interface{}{
		"link-state-id": *t.LinkStateId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa.
func (*Ospfv2Router_LinkStateDatabase_LsaStates_NetworkSummaryLsa) ΛBelongingModule() string {
	return "open-traffic-generator-ospfv2"
}

// Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/nssa-lsa YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa struct {
	AdvertisingRouter *string `path:"state/advertising-router" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
	Age               *uint16 `path:"state/age" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
	ForwardingAddress *string `path:"state/forwarding-address" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
	LinkStateId       *string `path:"state/link-state-id|link-state-id" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2|open-traffic-generator-ospfv2" shadow-path:"link-state-id" shadow-module:"open-traffic-generator-ospfv2"`
	Metric            *uint16 `path:"state/metric" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
	MetricType        *uint32 `path:"state/metric-type" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
	NetworkMask       *string `path:"state/network-mask" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
	OptionBits        *uint32 `path:"state/option-bits" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
	SequenceNumber    *uint32 `path:"state/sequence-number" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
}

// IsYANGGoStruct ensures that Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) IsYANGGoStruct() {}

// GetAdvertisingRouter retrieves the value of the leaf AdvertisingRouter from the Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisingRouter is set, it can
// safely use t.GetAdvertisingRouter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisingRouter == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) GetAdvertisingRouter() string {
	if t == nil || t.AdvertisingRouter == nil {
		return ""
	}
	return *t.AdvertisingRouter
}

// GetAge retrieves the value of the leaf Age from the Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Age is set, it can
// safely use t.GetAge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Age == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) GetAge() uint16 {
	if t == nil || t.Age == nil {
		return 0
	}
	return *t.Age
}

// GetForwardingAddress retrieves the value of the leaf ForwardingAddress from the Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingAddress is set, it can
// safely use t.GetForwardingAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingAddress == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) GetForwardingAddress() string {
	if t == nil || t.ForwardingAddress == nil {
		return ""
	}
	return *t.ForwardingAddress
}

// GetLinkStateId retrieves the value of the leaf LinkStateId from the Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkStateId is set, it can
// safely use t.GetLinkStateId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkStateId == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) GetLinkStateId() string {
	if t == nil || t.LinkStateId == nil {
		return ""
	}
	return *t.LinkStateId
}

// GetMetric retrieves the value of the leaf Metric from the Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) GetMetric() uint16 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetMetricType retrieves the value of the leaf MetricType from the Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricType is set, it can
// safely use t.GetMetricType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricType == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) GetMetricType() uint32 {
	if t == nil || t.MetricType == nil {
		return 0
	}
	return *t.MetricType
}

// GetNetworkMask retrieves the value of the leaf NetworkMask from the Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkMask is set, it can
// safely use t.GetNetworkMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkMask == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) GetNetworkMask() string {
	if t == nil || t.NetworkMask == nil {
		return ""
	}
	return *t.NetworkMask
}

// GetOptionBits retrieves the value of the leaf OptionBits from the Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OptionBits is set, it can
// safely use t.GetOptionBits() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OptionBits == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) GetOptionBits() uint32 {
	if t == nil || t.OptionBits == nil {
		return 0
	}
	return *t.OptionBits
}

// GetSequenceNumber retrieves the value of the leaf SequenceNumber from the Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SequenceNumber is set, it can
// safely use t.GetSequenceNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SequenceNumber == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) GetSequenceNumber() uint32 {
	if t == nil || t.SequenceNumber == nil {
		return 0
	}
	return *t.SequenceNumber
}

// SetAdvertisingRouter sets the value of the leaf AdvertisingRouter in the Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) SetAdvertisingRouter(v string) {
	t.AdvertisingRouter = &v
}

// SetAge sets the value of the leaf Age in the Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) SetAge(v uint16) {
	t.Age = &v
}

// SetForwardingAddress sets the value of the leaf ForwardingAddress in the Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) SetForwardingAddress(v string) {
	t.ForwardingAddress = &v
}

// SetLinkStateId sets the value of the leaf LinkStateId in the Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) SetLinkStateId(v string) {
	t.LinkStateId = &v
}

// SetMetric sets the value of the leaf Metric in the Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) SetMetric(v uint16) {
	t.Metric = &v
}

// SetMetricType sets the value of the leaf MetricType in the Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) SetMetricType(v uint32) {
	t.MetricType = &v
}

// SetNetworkMask sets the value of the leaf NetworkMask in the Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) SetNetworkMask(v string) {
	t.NetworkMask = &v
}

// SetOptionBits sets the value of the leaf OptionBits in the Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) SetOptionBits(v uint32) {
	t.OptionBits = &v
}

// SetSequenceNumber sets the value of the leaf SequenceNumber in the Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) SetSequenceNumber(v uint32) {
	t.SequenceNumber = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa struct, which is a YANG list entry.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LinkStateId == nil {
		return nil, fmt.Errorf("nil value for key LinkStateId")
	}

	return map[string]interface{}{
		"link-state-id": *t.LinkStateId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa.
func (*Ospfv2Router_LinkStateDatabase_LsaStates_NssaLsa) ΛBelongingModule() string {
	return "open-traffic-generator-ospfv2"
}

// Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/opaque-lsa YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa struct {
	AdvertisingRouter *string          `path:"state/advertising-router" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
	Age               *uint16          `path:"state/age" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
	LinkStateId       *string          `path:"state/link-state-id|link-state-id" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2|open-traffic-generator-ospfv2" shadow-path:"link-state-id" shadow-module:"open-traffic-generator-ospfv2"`
	OptionBits        *uint32          `path:"state/option-bits" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
	SequenceNumber    *uint32          `path:"state/sequence-number" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
	Type              E_OpaqueLsa_Type `path:"state/type" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
}

// IsYANGGoStruct ensures that Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa) IsYANGGoStruct() {}

// GetAdvertisingRouter retrieves the value of the leaf AdvertisingRouter from the Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisingRouter is set, it can
// safely use t.GetAdvertisingRouter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisingRouter == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa) GetAdvertisingRouter() string {
	if t == nil || t.AdvertisingRouter == nil {
		return ""
	}
	return *t.AdvertisingRouter
}

// GetAge retrieves the value of the leaf Age from the Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Age is set, it can
// safely use t.GetAge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Age == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa) GetAge() uint16 {
	if t == nil || t.Age == nil {
		return 0
	}
	return *t.Age
}

// GetLinkStateId retrieves the value of the leaf LinkStateId from the Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkStateId is set, it can
// safely use t.GetLinkStateId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkStateId == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa) GetLinkStateId() string {
	if t == nil || t.LinkStateId == nil {
		return ""
	}
	return *t.LinkStateId
}

// GetOptionBits retrieves the value of the leaf OptionBits from the Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OptionBits is set, it can
// safely use t.GetOptionBits() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OptionBits == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa) GetOptionBits() uint32 {
	if t == nil || t.OptionBits == nil {
		return 0
	}
	return *t.OptionBits
}

// GetSequenceNumber retrieves the value of the leaf SequenceNumber from the Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SequenceNumber is set, it can
// safely use t.GetSequenceNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SequenceNumber == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa) GetSequenceNumber() uint32 {
	if t == nil || t.SequenceNumber == nil {
		return 0
	}
	return *t.SequenceNumber
}

// GetType retrieves the value of the leaf Type from the Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa) GetType() E_OpaqueLsa_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// SetAdvertisingRouter sets the value of the leaf AdvertisingRouter in the Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa) SetAdvertisingRouter(v string) {
	t.AdvertisingRouter = &v
}

// SetAge sets the value of the leaf Age in the Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa) SetAge(v uint16) {
	t.Age = &v
}

// SetLinkStateId sets the value of the leaf LinkStateId in the Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa) SetLinkStateId(v string) {
	t.LinkStateId = &v
}

// SetOptionBits sets the value of the leaf OptionBits in the Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa) SetOptionBits(v uint32) {
	t.OptionBits = &v
}

// SetSequenceNumber sets the value of the leaf SequenceNumber in the Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa) SetSequenceNumber(v uint32) {
	t.SequenceNumber = &v
}

// SetType sets the value of the leaf Type in the Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa) SetType(v E_OpaqueLsa_Type) {
	t.Type = v
}

// PopulateDefaults recursively populates unset leaf fields in the Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa struct, which is a YANG list entry.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LinkStateId == nil {
		return nil, fmt.Errorf("nil value for key LinkStateId")
	}

	return map[string]interface{}{
		"link-state-id": *t.LinkStateId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa.
func (*Ospfv2Router_LinkStateDatabase_LsaStates_OpaqueLsa) ΛBelongingModule() string {
	return "open-traffic-generator-ospfv2"
}

// Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa struct {
	AdvertisingRouter *string                                                             `path:"state/advertising-router" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
	Age               *uint16                                                             `path:"state/age" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
	Link              map[string]*Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link `path:"state/link" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
	LinkStateId       *string                                                             `path:"state/link-state-id|link-state-id" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2|open-traffic-generator-ospfv2" shadow-path:"link-state-id" shadow-module:"open-traffic-generator-ospfv2"`
	OptionBits        *uint32                                                             `path:"state/option-bits" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
	SequenceNumber    *uint32                                                             `path:"state/sequence-number" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
}

// IsYANGGoStruct ensures that Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa) IsYANGGoStruct() {}

// NewLink creates a new entry in the Link list of the
// Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa struct. The keys of the list are populated from the input
// arguments.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa) NewLink(Id string) (*Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Link == nil {
		t.Link = make(map[string]*Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Link[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Link", key)
	}

	t.Link[key] = &Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link{
		Id: &Id,
	}

	return t.Link[key], nil
}

// RenameLink renames an entry in the list Link within
// the Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa) RenameLink(oldK, newK string) error {
	if _, ok := t.Link[newK]; ok {
		return fmt.Errorf("key %v already exists in Link", newK)
	}

	e, ok := t.Link[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Link", oldK)
	}
	e.Id = &newK

	t.Link[newK] = e
	delete(t.Link, oldK)
	return nil
}

// GetOrCreateLinkMap returns the list (map) from Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa.
//
// It initializes the field if not already initialized.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa) GetOrCreateLinkMap() map[string]*Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link {
	if t.Link == nil {
		t.Link = make(map[string]*Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link)
	}
	return t.Link
}

// GetOrCreateLink retrieves the value with the specified keys from
// the receiver Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa) GetOrCreateLink(Id string) *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link {

	key := Id

	if v, ok := t.Link[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLink(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLink got unexpected error: %v", err))
	}
	return v
}

// GetLink retrieves the value with the specified key from
// the Link map field of Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa) GetLink(Id string) *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Link[key]; ok {
		return lm
	}
	return nil
}

// DeleteLink deletes the value with the specified keys from
// the receiver Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa. If there is no such element, the function
// is a no-op.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa) DeleteLink(Id string) {
	key := Id

	delete(t.Link, key)
}

// AppendLink appends the supplied Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link struct to the
// list Link of Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa. If the key value(s) specified in
// the supplied Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link already exist in the list, an error is
// returned.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa) AppendLink(v *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Link == nil {
		t.Link = make(map[string]*Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link)
	}

	if _, ok := t.Link[key]; ok {
		return fmt.Errorf("duplicate key for list Link %v", key)
	}

	t.Link[key] = v
	return nil
}

// GetAdvertisingRouter retrieves the value of the leaf AdvertisingRouter from the Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisingRouter is set, it can
// safely use t.GetAdvertisingRouter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisingRouter == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa) GetAdvertisingRouter() string {
	if t == nil || t.AdvertisingRouter == nil {
		return ""
	}
	return *t.AdvertisingRouter
}

// GetAge retrieves the value of the leaf Age from the Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Age is set, it can
// safely use t.GetAge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Age == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa) GetAge() uint16 {
	if t == nil || t.Age == nil {
		return 0
	}
	return *t.Age
}

// GetLinkStateId retrieves the value of the leaf LinkStateId from the Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkStateId is set, it can
// safely use t.GetLinkStateId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkStateId == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa) GetLinkStateId() string {
	if t == nil || t.LinkStateId == nil {
		return ""
	}
	return *t.LinkStateId
}

// GetOptionBits retrieves the value of the leaf OptionBits from the Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OptionBits is set, it can
// safely use t.GetOptionBits() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OptionBits == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa) GetOptionBits() uint32 {
	if t == nil || t.OptionBits == nil {
		return 0
	}
	return *t.OptionBits
}

// GetSequenceNumber retrieves the value of the leaf SequenceNumber from the Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SequenceNumber is set, it can
// safely use t.GetSequenceNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SequenceNumber == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa) GetSequenceNumber() uint32 {
	if t == nil || t.SequenceNumber == nil {
		return 0
	}
	return *t.SequenceNumber
}

// SetAdvertisingRouter sets the value of the leaf AdvertisingRouter in the Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa) SetAdvertisingRouter(v string) {
	t.AdvertisingRouter = &v
}

// SetAge sets the value of the leaf Age in the Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa) SetAge(v uint16) {
	t.Age = &v
}

// SetLinkStateId sets the value of the leaf LinkStateId in the Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa) SetLinkStateId(v string) {
	t.LinkStateId = &v
}

// SetOptionBits sets the value of the leaf OptionBits in the Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa) SetOptionBits(v uint32) {
	t.OptionBits = &v
}

// SetSequenceNumber sets the value of the leaf SequenceNumber in the Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa) SetSequenceNumber(v uint32) {
	t.SequenceNumber = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Link {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa struct, which is a YANG list entry.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LinkStateId == nil {
		return nil, fmt.Errorf("nil value for key LinkStateId")
	}

	return map[string]interface{}{
		"link-state-id": *t.LinkStateId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa.
func (*Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa) ΛBelongingModule() string {
	return "open-traffic-generator-ospfv2"
}

// Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/router-lsa/state/link YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link struct {
	Data   *string     `path:"state/data" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
	Id     *string     `path:"state/id|id" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2|open-traffic-generator-ospfv2" shadow-path:"id" shadow-module:"open-traffic-generator-ospfv2"`
	Metric *uint16     `path:"state/metric" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
	Type   E_Link_Type `path:"state/type" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
}

// IsYANGGoStruct ensures that Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link) IsYANGGoStruct() {}

// GetData retrieves the value of the leaf Data from the Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Data is set, it can
// safely use t.GetData() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Data == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link) GetData() string {
	if t == nil || t.Data == nil {
		return ""
	}
	return *t.Data
}

// GetId retrieves the value of the leaf Id from the Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// GetMetric retrieves the value of the leaf Metric from the Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link) GetMetric() uint16 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetType retrieves the value of the leaf Type from the Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link) GetType() E_Link_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// SetData sets the value of the leaf Data in the Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link) SetData(v string) {
	t.Data = &v
}

// SetId sets the value of the leaf Id in the Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link) SetId(v string) {
	t.Id = &v
}

// SetMetric sets the value of the leaf Metric in the Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link) SetMetric(v uint16) {
	t.Metric = &v
}

// SetType sets the value of the leaf Type in the Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link) SetType(v E_Link_Type) {
	t.Type = v
}

// PopulateDefaults recursively populates unset leaf fields in the Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link struct, which is a YANG list entry.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link.
func (*Ospfv2Router_LinkStateDatabase_LsaStates_RouterLsa_Link) ΛBelongingModule() string {
	return "open-traffic-generator-ospfv2"
}

// Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa represents the /open-traffic-generator-ospfv2/ospfv2-routers/ospfv2-router/state/link-state-database/lsa-states/summary-as-lsa YANG schema element.
type Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa struct {
	AdvertisingRouter *string `path:"state/advertising-router" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
	Age               *uint16 `path:"state/age" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
	LinkStateId       *string `path:"state/link-state-id|link-state-id" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2|open-traffic-generator-ospfv2" shadow-path:"link-state-id" shadow-module:"open-traffic-generator-ospfv2"`
	Metric            *uint16 `path:"state/metric" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
	NetworkMask       *string `path:"state/network-mask" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
	OptionBits        *uint32 `path:"state/option-bits" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
	SequenceNumber    *uint32 `path:"state/sequence-number" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
}

// IsYANGGoStruct ensures that Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa) IsYANGGoStruct() {}

// GetAdvertisingRouter retrieves the value of the leaf AdvertisingRouter from the Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisingRouter is set, it can
// safely use t.GetAdvertisingRouter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisingRouter == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa) GetAdvertisingRouter() string {
	if t == nil || t.AdvertisingRouter == nil {
		return ""
	}
	return *t.AdvertisingRouter
}

// GetAge retrieves the value of the leaf Age from the Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Age is set, it can
// safely use t.GetAge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Age == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa) GetAge() uint16 {
	if t == nil || t.Age == nil {
		return 0
	}
	return *t.Age
}

// GetLinkStateId retrieves the value of the leaf LinkStateId from the Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkStateId is set, it can
// safely use t.GetLinkStateId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkStateId == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa) GetLinkStateId() string {
	if t == nil || t.LinkStateId == nil {
		return ""
	}
	return *t.LinkStateId
}

// GetMetric retrieves the value of the leaf Metric from the Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa) GetMetric() uint16 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetNetworkMask retrieves the value of the leaf NetworkMask from the Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkMask is set, it can
// safely use t.GetNetworkMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkMask == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa) GetNetworkMask() string {
	if t == nil || t.NetworkMask == nil {
		return ""
	}
	return *t.NetworkMask
}

// GetOptionBits retrieves the value of the leaf OptionBits from the Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OptionBits is set, it can
// safely use t.GetOptionBits() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OptionBits == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa) GetOptionBits() uint32 {
	if t == nil || t.OptionBits == nil {
		return 0
	}
	return *t.OptionBits
}

// GetSequenceNumber retrieves the value of the leaf SequenceNumber from the Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SequenceNumber is set, it can
// safely use t.GetSequenceNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SequenceNumber == nil' before retrieving the leaf's value.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa) GetSequenceNumber() uint32 {
	if t == nil || t.SequenceNumber == nil {
		return 0
	}
	return *t.SequenceNumber
}

// SetAdvertisingRouter sets the value of the leaf AdvertisingRouter in the Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa) SetAdvertisingRouter(v string) {
	t.AdvertisingRouter = &v
}

// SetAge sets the value of the leaf Age in the Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa) SetAge(v uint16) {
	t.Age = &v
}

// SetLinkStateId sets the value of the leaf LinkStateId in the Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa) SetLinkStateId(v string) {
	t.LinkStateId = &v
}

// SetMetric sets the value of the leaf Metric in the Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa) SetMetric(v uint16) {
	t.Metric = &v
}

// SetNetworkMask sets the value of the leaf NetworkMask in the Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa) SetNetworkMask(v string) {
	t.NetworkMask = &v
}

// SetOptionBits sets the value of the leaf OptionBits in the Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa) SetOptionBits(v uint32) {
	t.OptionBits = &v
}

// SetSequenceNumber sets the value of the leaf SequenceNumber in the Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa
// struct.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa) SetSequenceNumber(v uint32) {
	t.SequenceNumber = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa struct, which is a YANG list entry.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LinkStateId == nil {
		return nil, fmt.Errorf("nil value for key LinkStateId")
	}

	return map[string]interface{}{
		"link-state-id": *t.LinkStateId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa.
func (*Ospfv2Router_LinkStateDatabase_LsaStates_SummaryAsLsa) ΛBelongingModule() string {
	return "open-traffic-generator-ospfv2"
}

// Ospfv3Router represents the /open-traffic-generator-ospfv3/ospfv3-routers/ospfv3-router YANG schema element.
type Ospfv3Router struct {
	Counters          *Ospfv3Router_Counters          `path:"state/counters" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	LinkStateDatabase *Ospfv3Router_LinkStateDatabase `path:"state/link-state-database" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	Name              *string                         `path:"state/name|name" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3|open-traffic-generator-ospfv3" shadow-path:"name" shadow-module:"open-traffic-generator-ospfv3"`
}

// IsYANGGoStruct ensures that Ospfv3Router implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ospfv3Router) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Ospfv3Router) GetOrCreateCounters() *Ospfv3Router_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Ospfv3Router_Counters{}
	return t.Counters
}

// GetOrCreateLinkStateDatabase retrieves the value of the LinkStateDatabase field
// or returns the existing field if it already exists.
func (t *Ospfv3Router) GetOrCreateLinkStateDatabase() *Ospfv3Router_LinkStateDatabase {
	if t.LinkStateDatabase != nil {
		return t.LinkStateDatabase
	}
	t.LinkStateDatabase = &Ospfv3Router_LinkStateDatabase{}
	return t.LinkStateDatabase
}

// GetCounters returns the value of the Counters struct pointer
// from Ospfv3Router. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Ospfv3Router) GetCounters() *Ospfv3Router_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetLinkStateDatabase returns the value of the LinkStateDatabase struct pointer
// from Ospfv3Router. If the receiver or the field LinkStateDatabase is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Ospfv3Router) GetLinkStateDatabase() *Ospfv3Router_LinkStateDatabase {
	if t != nil && t.LinkStateDatabase != nil {
		return t.LinkStateDatabase
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the Ospfv3Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Ospfv3Router) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// SetName sets the value of the leaf Name in the Ospfv3Router
// struct.
func (t *Ospfv3Router) SetName(v string) {
	t.Name = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Ospfv3Router
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Ospfv3Router) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Counters.PopulateDefaults()
	t.LinkStateDatabase.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the Ospfv3Router struct, which is a YANG list entry.
func (t *Ospfv3Router) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv3Router) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ospfv3Router"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv3Router) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ospfv3Router) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ospfv3Router.
func (*Ospfv3Router) ΛBelongingModule() string {
	return "open-traffic-generator-ospfv3"
}

// Ospfv3Router_Counters represents the /open-traffic-generator-ospfv3/ospfv3-routers/ospfv3-router/state/counters YANG schema element.
type Ospfv3Router_Counters struct {
	InDbds                 *uint64 `path:"in-dbds" module:"open-traffic-generator-ospfv3"`
	InExternalLsas         *uint64 `path:"in-external-lsas" module:"open-traffic-generator-ospfv3"`
	InHellos               *uint64 `path:"in-hellos" module:"open-traffic-generator-ospfv3"`
	InInterAreaPrefixLsas  *uint64 `path:"in-inter-area-prefix-lsas" module:"open-traffic-generator-ospfv3"`
	InInterAreaRouterLsas  *uint64 `path:"in-inter-area-router-lsas" module:"open-traffic-generator-ospfv3"`
	InIntraAreaPrefixLsas  *uint64 `path:"in-intra-area-prefix-lsas" module:"open-traffic-generator-ospfv3"`
	InLinkLsas             *uint64 `path:"in-link-lsas" module:"open-traffic-generator-ospfv3"`
	InLsAcks               *uint64 `path:"in-ls-acks" module:"open-traffic-generator-ospfv3"`
	InLsRequests           *uint64 `path:"in-ls-requests" module:"open-traffic-generator-ospfv3"`
	InLsUpdates            *uint64 `path:"in-ls-updates" module:"open-traffic-generator-ospfv3"`
	InLsas                 *uint64 `path:"in-lsas" module:"open-traffic-generator-ospfv3"`
	InNetworkLsas          *uint64 `path:"in-network-lsas" module:"open-traffic-generator-ospfv3"`
	InNssaLsas             *uint64 `path:"in-nssa-lsas" module:"open-traffic-generator-ospfv3"`
	InRouterLsas           *uint64 `path:"in-router-lsas" module:"open-traffic-generator-ospfv3"`
	OutDbds                *uint64 `path:"out-dbds" module:"open-traffic-generator-ospfv3"`
	OutExternalLsas        *uint64 `path:"out-external-lsas" module:"open-traffic-generator-ospfv3"`
	OutHellos              *uint64 `path:"out-hellos" module:"open-traffic-generator-ospfv3"`
	OutInterAreaPrefixLsas *uint64 `path:"out-inter-area-prefix-lsas" module:"open-traffic-generator-ospfv3"`
	OutInterAreaRouterLsas *uint64 `path:"out-inter-area-router-lsas" module:"open-traffic-generator-ospfv3"`
	OutIntraAreaPrefixLsas *uint64 `path:"out-intra-area-prefix-lsas" module:"open-traffic-generator-ospfv3"`
	OutLinkLsas            *uint64 `path:"out-link-lsas" module:"open-traffic-generator-ospfv3"`
	OutLsAcks              *uint64 `path:"out-ls-acks" module:"open-traffic-generator-ospfv3"`
	OutLsRequests          *uint64 `path:"out-ls-requests" module:"open-traffic-generator-ospfv3"`
	OutLsUpdates           *uint64 `path:"out-ls-updates" module:"open-traffic-generator-ospfv3"`
	OutLsas                *uint64 `path:"out-lsas" module:"open-traffic-generator-ospfv3"`
	OutNetworkLsas         *uint64 `path:"out-network-lsas" module:"open-traffic-generator-ospfv3"`
	OutNssaLsas            *uint64 `path:"out-nssa-lsas" module:"open-traffic-generator-ospfv3"`
	OutRouterLsas          *uint64 `path:"out-router-lsas" module:"open-traffic-generator-ospfv3"`
	SessionsDown           *uint64 `path:"sessions-down" module:"open-traffic-generator-ospfv3"`
	SessionsFlap           *uint64 `path:"sessions-flap" module:"open-traffic-generator-ospfv3"`
	SessionsUp             *uint64 `path:"sessions-up" module:"open-traffic-generator-ospfv3"`
}

// IsYANGGoStruct ensures that Ospfv3Router_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ospfv3Router_Counters) IsYANGGoStruct() {}

// GetInDbds retrieves the value of the leaf InDbds from the Ospfv3Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InDbds is set, it can
// safely use t.GetInDbds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InDbds == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_Counters) GetInDbds() uint64 {
	if t == nil || t.InDbds == nil {
		return 0
	}
	return *t.InDbds
}

// GetInExternalLsas retrieves the value of the leaf InExternalLsas from the Ospfv3Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InExternalLsas is set, it can
// safely use t.GetInExternalLsas() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InExternalLsas == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_Counters) GetInExternalLsas() uint64 {
	if t == nil || t.InExternalLsas == nil {
		return 0
	}
	return *t.InExternalLsas
}

// GetInHellos retrieves the value of the leaf InHellos from the Ospfv3Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InHellos is set, it can
// safely use t.GetInHellos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InHellos == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_Counters) GetInHellos() uint64 {
	if t == nil || t.InHellos == nil {
		return 0
	}
	return *t.InHellos
}

// GetInInterAreaPrefixLsas retrieves the value of the leaf InInterAreaPrefixLsas from the Ospfv3Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InInterAreaPrefixLsas is set, it can
// safely use t.GetInInterAreaPrefixLsas() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InInterAreaPrefixLsas == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_Counters) GetInInterAreaPrefixLsas() uint64 {
	if t == nil || t.InInterAreaPrefixLsas == nil {
		return 0
	}
	return *t.InInterAreaPrefixLsas
}

// GetInInterAreaRouterLsas retrieves the value of the leaf InInterAreaRouterLsas from the Ospfv3Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InInterAreaRouterLsas is set, it can
// safely use t.GetInInterAreaRouterLsas() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InInterAreaRouterLsas == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_Counters) GetInInterAreaRouterLsas() uint64 {
	if t == nil || t.InInterAreaRouterLsas == nil {
		return 0
	}
	return *t.InInterAreaRouterLsas
}

// GetInIntraAreaPrefixLsas retrieves the value of the leaf InIntraAreaPrefixLsas from the Ospfv3Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InIntraAreaPrefixLsas is set, it can
// safely use t.GetInIntraAreaPrefixLsas() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InIntraAreaPrefixLsas == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_Counters) GetInIntraAreaPrefixLsas() uint64 {
	if t == nil || t.InIntraAreaPrefixLsas == nil {
		return 0
	}
	return *t.InIntraAreaPrefixLsas
}

// GetInLinkLsas retrieves the value of the leaf InLinkLsas from the Ospfv3Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InLinkLsas is set, it can
// safely use t.GetInLinkLsas() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InLinkLsas == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_Counters) GetInLinkLsas() uint64 {
	if t == nil || t.InLinkLsas == nil {
		return 0
	}
	return *t.InLinkLsas
}

// GetInLsAcks retrieves the value of the leaf InLsAcks from the Ospfv3Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InLsAcks is set, it can
// safely use t.GetInLsAcks() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InLsAcks == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_Counters) GetInLsAcks() uint64 {
	if t == nil || t.InLsAcks == nil {
		return 0
	}
	return *t.InLsAcks
}

// GetInLsRequests retrieves the value of the leaf InLsRequests from the Ospfv3Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InLsRequests is set, it can
// safely use t.GetInLsRequests() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InLsRequests == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_Counters) GetInLsRequests() uint64 {
	if t == nil || t.InLsRequests == nil {
		return 0
	}
	return *t.InLsRequests
}

// GetInLsUpdates retrieves the value of the leaf InLsUpdates from the Ospfv3Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InLsUpdates is set, it can
// safely use t.GetInLsUpdates() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InLsUpdates == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_Counters) GetInLsUpdates() uint64 {
	if t == nil || t.InLsUpdates == nil {
		return 0
	}
	return *t.InLsUpdates
}

// GetInLsas retrieves the value of the leaf InLsas from the Ospfv3Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InLsas is set, it can
// safely use t.GetInLsas() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InLsas == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_Counters) GetInLsas() uint64 {
	if t == nil || t.InLsas == nil {
		return 0
	}
	return *t.InLsas
}

// GetInNetworkLsas retrieves the value of the leaf InNetworkLsas from the Ospfv3Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InNetworkLsas is set, it can
// safely use t.GetInNetworkLsas() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InNetworkLsas == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_Counters) GetInNetworkLsas() uint64 {
	if t == nil || t.InNetworkLsas == nil {
		return 0
	}
	return *t.InNetworkLsas
}

// GetInNssaLsas retrieves the value of the leaf InNssaLsas from the Ospfv3Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InNssaLsas is set, it can
// safely use t.GetInNssaLsas() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InNssaLsas == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_Counters) GetInNssaLsas() uint64 {
	if t == nil || t.InNssaLsas == nil {
		return 0
	}
	return *t.InNssaLsas
}

// GetInRouterLsas retrieves the value of the leaf InRouterLsas from the Ospfv3Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InRouterLsas is set, it can
// safely use t.GetInRouterLsas() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InRouterLsas == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_Counters) GetInRouterLsas() uint64 {
	if t == nil || t.InRouterLsas == nil {
		return 0
	}
	return *t.InRouterLsas
}

// GetOutDbds retrieves the value of the leaf OutDbds from the Ospfv3Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutDbds is set, it can
// safely use t.GetOutDbds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutDbds == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_Counters) GetOutDbds() uint64 {
	if t == nil || t.OutDbds == nil {
		return 0
	}
	return *t.OutDbds
}

// GetOutExternalLsas retrieves the value of the leaf OutExternalLsas from the Ospfv3Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutExternalLsas is set, it can
// safely use t.GetOutExternalLsas() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutExternalLsas == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_Counters) GetOutExternalLsas() uint64 {
	if t == nil || t.OutExternalLsas == nil {
		return 0
	}
	return *t.OutExternalLsas
}

// GetOutHellos retrieves the value of the leaf OutHellos from the Ospfv3Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutHellos is set, it can
// safely use t.GetOutHellos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutHellos == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_Counters) GetOutHellos() uint64 {
	if t == nil || t.OutHellos == nil {
		return 0
	}
	return *t.OutHellos
}

// GetOutInterAreaPrefixLsas retrieves the value of the leaf OutInterAreaPrefixLsas from the Ospfv3Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutInterAreaPrefixLsas is set, it can
// safely use t.GetOutInterAreaPrefixLsas() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutInterAreaPrefixLsas == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_Counters) GetOutInterAreaPrefixLsas() uint64 {
	if t == nil || t.OutInterAreaPrefixLsas == nil {
		return 0
	}
	return *t.OutInterAreaPrefixLsas
}

// GetOutInterAreaRouterLsas retrieves the value of the leaf OutInterAreaRouterLsas from the Ospfv3Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutInterAreaRouterLsas is set, it can
// safely use t.GetOutInterAreaRouterLsas() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutInterAreaRouterLsas == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_Counters) GetOutInterAreaRouterLsas() uint64 {
	if t == nil || t.OutInterAreaRouterLsas == nil {
		return 0
	}
	return *t.OutInterAreaRouterLsas
}

// GetOutIntraAreaPrefixLsas retrieves the value of the leaf OutIntraAreaPrefixLsas from the Ospfv3Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutIntraAreaPrefixLsas is set, it can
// safely use t.GetOutIntraAreaPrefixLsas() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutIntraAreaPrefixLsas == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_Counters) GetOutIntraAreaPrefixLsas() uint64 {
	if t == nil || t.OutIntraAreaPrefixLsas == nil {
		return 0
	}
	return *t.OutIntraAreaPrefixLsas
}

// GetOutLinkLsas retrieves the value of the leaf OutLinkLsas from the Ospfv3Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutLinkLsas is set, it can
// safely use t.GetOutLinkLsas() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutLinkLsas == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_Counters) GetOutLinkLsas() uint64 {
	if t == nil || t.OutLinkLsas == nil {
		return 0
	}
	return *t.OutLinkLsas
}

// GetOutLsAcks retrieves the value of the leaf OutLsAcks from the Ospfv3Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutLsAcks is set, it can
// safely use t.GetOutLsAcks() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutLsAcks == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_Counters) GetOutLsAcks() uint64 {
	if t == nil || t.OutLsAcks == nil {
		return 0
	}
	return *t.OutLsAcks
}

// GetOutLsRequests retrieves the value of the leaf OutLsRequests from the Ospfv3Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutLsRequests is set, it can
// safely use t.GetOutLsRequests() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutLsRequests == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_Counters) GetOutLsRequests() uint64 {
	if t == nil || t.OutLsRequests == nil {
		return 0
	}
	return *t.OutLsRequests
}

// GetOutLsUpdates retrieves the value of the leaf OutLsUpdates from the Ospfv3Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutLsUpdates is set, it can
// safely use t.GetOutLsUpdates() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutLsUpdates == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_Counters) GetOutLsUpdates() uint64 {
	if t == nil || t.OutLsUpdates == nil {
		return 0
	}
	return *t.OutLsUpdates
}

// GetOutLsas retrieves the value of the leaf OutLsas from the Ospfv3Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutLsas is set, it can
// safely use t.GetOutLsas() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutLsas == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_Counters) GetOutLsas() uint64 {
	if t == nil || t.OutLsas == nil {
		return 0
	}
	return *t.OutLsas
}

// GetOutNetworkLsas retrieves the value of the leaf OutNetworkLsas from the Ospfv3Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutNetworkLsas is set, it can
// safely use t.GetOutNetworkLsas() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutNetworkLsas == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_Counters) GetOutNetworkLsas() uint64 {
	if t == nil || t.OutNetworkLsas == nil {
		return 0
	}
	return *t.OutNetworkLsas
}

// GetOutNssaLsas retrieves the value of the leaf OutNssaLsas from the Ospfv3Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutNssaLsas is set, it can
// safely use t.GetOutNssaLsas() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutNssaLsas == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_Counters) GetOutNssaLsas() uint64 {
	if t == nil || t.OutNssaLsas == nil {
		return 0
	}
	return *t.OutNssaLsas
}

// GetOutRouterLsas retrieves the value of the leaf OutRouterLsas from the Ospfv3Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutRouterLsas is set, it can
// safely use t.GetOutRouterLsas() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutRouterLsas == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_Counters) GetOutRouterLsas() uint64 {
	if t == nil || t.OutRouterLsas == nil {
		return 0
	}
	return *t.OutRouterLsas
}

// GetSessionsDown retrieves the value of the leaf SessionsDown from the Ospfv3Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionsDown is set, it can
// safely use t.GetSessionsDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionsDown == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_Counters) GetSessionsDown() uint64 {
	if t == nil || t.SessionsDown == nil {
		return 0
	}
	return *t.SessionsDown
}

// GetSessionsFlap retrieves the value of the leaf SessionsFlap from the Ospfv3Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionsFlap is set, it can
// safely use t.GetSessionsFlap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionsFlap == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_Counters) GetSessionsFlap() uint64 {
	if t == nil || t.SessionsFlap == nil {
		return 0
	}
	return *t.SessionsFlap
}

// GetSessionsUp retrieves the value of the leaf SessionsUp from the Ospfv3Router_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionsUp is set, it can
// safely use t.GetSessionsUp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionsUp == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_Counters) GetSessionsUp() uint64 {
	if t == nil || t.SessionsUp == nil {
		return 0
	}
	return *t.SessionsUp
}

// SetInDbds sets the value of the leaf InDbds in the Ospfv3Router_Counters
// struct.
func (t *Ospfv3Router_Counters) SetInDbds(v uint64) {
	t.InDbds = &v
}

// SetInExternalLsas sets the value of the leaf InExternalLsas in the Ospfv3Router_Counters
// struct.
func (t *Ospfv3Router_Counters) SetInExternalLsas(v uint64) {
	t.InExternalLsas = &v
}

// SetInHellos sets the value of the leaf InHellos in the Ospfv3Router_Counters
// struct.
func (t *Ospfv3Router_Counters) SetInHellos(v uint64) {
	t.InHellos = &v
}

// SetInInterAreaPrefixLsas sets the value of the leaf InInterAreaPrefixLsas in the Ospfv3Router_Counters
// struct.
func (t *Ospfv3Router_Counters) SetInInterAreaPrefixLsas(v uint64) {
	t.InInterAreaPrefixLsas = &v
}

// SetInInterAreaRouterLsas sets the value of the leaf InInterAreaRouterLsas in the Ospfv3Router_Counters
// struct.
func (t *Ospfv3Router_Counters) SetInInterAreaRouterLsas(v uint64) {
	t.InInterAreaRouterLsas = &v
}

// SetInIntraAreaPrefixLsas sets the value of the leaf InIntraAreaPrefixLsas in the Ospfv3Router_Counters
// struct.
func (t *Ospfv3Router_Counters) SetInIntraAreaPrefixLsas(v uint64) {
	t.InIntraAreaPrefixLsas = &v
}

// SetInLinkLsas sets the value of the leaf InLinkLsas in the Ospfv3Router_Counters
// struct.
func (t *Ospfv3Router_Counters) SetInLinkLsas(v uint64) {
	t.InLinkLsas = &v
}

// SetInLsAcks sets the value of the leaf InLsAcks in the Ospfv3Router_Counters
// struct.
func (t *Ospfv3Router_Counters) SetInLsAcks(v uint64) {
	t.InLsAcks = &v
}

// SetInLsRequests sets the value of the leaf InLsRequests in the Ospfv3Router_Counters
// struct.
func (t *Ospfv3Router_Counters) SetInLsRequests(v uint64) {
	t.InLsRequests = &v
}

// SetInLsUpdates sets the value of the leaf InLsUpdates in the Ospfv3Router_Counters
// struct.
func (t *Ospfv3Router_Counters) SetInLsUpdates(v uint64) {
	t.InLsUpdates = &v
}

// SetInLsas sets the value of the leaf InLsas in the Ospfv3Router_Counters
// struct.
func (t *Ospfv3Router_Counters) SetInLsas(v uint64) {
	t.InLsas = &v
}

// SetInNetworkLsas sets the value of the leaf InNetworkLsas in the Ospfv3Router_Counters
// struct.
func (t *Ospfv3Router_Counters) SetInNetworkLsas(v uint64) {
	t.InNetworkLsas = &v
}

// SetInNssaLsas sets the value of the leaf InNssaLsas in the Ospfv3Router_Counters
// struct.
func (t *Ospfv3Router_Counters) SetInNssaLsas(v uint64) {
	t.InNssaLsas = &v
}

// SetInRouterLsas sets the value of the leaf InRouterLsas in the Ospfv3Router_Counters
// struct.
func (t *Ospfv3Router_Counters) SetInRouterLsas(v uint64) {
	t.InRouterLsas = &v
}

// SetOutDbds sets the value of the leaf OutDbds in the Ospfv3Router_Counters
// struct.
func (t *Ospfv3Router_Counters) SetOutDbds(v uint64) {
	t.OutDbds = &v
}

// SetOutExternalLsas sets the value of the leaf OutExternalLsas in the Ospfv3Router_Counters
// struct.
func (t *Ospfv3Router_Counters) SetOutExternalLsas(v uint64) {
	t.OutExternalLsas = &v
}

// SetOutHellos sets the value of the leaf OutHellos in the Ospfv3Router_Counters
// struct.
func (t *Ospfv3Router_Counters) SetOutHellos(v uint64) {
	t.OutHellos = &v
}

// SetOutInterAreaPrefixLsas sets the value of the leaf OutInterAreaPrefixLsas in the Ospfv3Router_Counters
// struct.
func (t *Ospfv3Router_Counters) SetOutInterAreaPrefixLsas(v uint64) {
	t.OutInterAreaPrefixLsas = &v
}

// SetOutInterAreaRouterLsas sets the value of the leaf OutInterAreaRouterLsas in the Ospfv3Router_Counters
// struct.
func (t *Ospfv3Router_Counters) SetOutInterAreaRouterLsas(v uint64) {
	t.OutInterAreaRouterLsas = &v
}

// SetOutIntraAreaPrefixLsas sets the value of the leaf OutIntraAreaPrefixLsas in the Ospfv3Router_Counters
// struct.
func (t *Ospfv3Router_Counters) SetOutIntraAreaPrefixLsas(v uint64) {
	t.OutIntraAreaPrefixLsas = &v
}

// SetOutLinkLsas sets the value of the leaf OutLinkLsas in the Ospfv3Router_Counters
// struct.
func (t *Ospfv3Router_Counters) SetOutLinkLsas(v uint64) {
	t.OutLinkLsas = &v
}

// SetOutLsAcks sets the value of the leaf OutLsAcks in the Ospfv3Router_Counters
// struct.
func (t *Ospfv3Router_Counters) SetOutLsAcks(v uint64) {
	t.OutLsAcks = &v
}

// SetOutLsRequests sets the value of the leaf OutLsRequests in the Ospfv3Router_Counters
// struct.
func (t *Ospfv3Router_Counters) SetOutLsRequests(v uint64) {
	t.OutLsRequests = &v
}

// SetOutLsUpdates sets the value of the leaf OutLsUpdates in the Ospfv3Router_Counters
// struct.
func (t *Ospfv3Router_Counters) SetOutLsUpdates(v uint64) {
	t.OutLsUpdates = &v
}

// SetOutLsas sets the value of the leaf OutLsas in the Ospfv3Router_Counters
// struct.
func (t *Ospfv3Router_Counters) SetOutLsas(v uint64) {
	t.OutLsas = &v
}

// SetOutNetworkLsas sets the value of the leaf OutNetworkLsas in the Ospfv3Router_Counters
// struct.
func (t *Ospfv3Router_Counters) SetOutNetworkLsas(v uint64) {
	t.OutNetworkLsas = &v
}

// SetOutNssaLsas sets the value of the leaf OutNssaLsas in the Ospfv3Router_Counters
// struct.
func (t *Ospfv3Router_Counters) SetOutNssaLsas(v uint64) {
	t.OutNssaLsas = &v
}

// SetOutRouterLsas sets the value of the leaf OutRouterLsas in the Ospfv3Router_Counters
// struct.
func (t *Ospfv3Router_Counters) SetOutRouterLsas(v uint64) {
	t.OutRouterLsas = &v
}

// SetSessionsDown sets the value of the leaf SessionsDown in the Ospfv3Router_Counters
// struct.
func (t *Ospfv3Router_Counters) SetSessionsDown(v uint64) {
	t.SessionsDown = &v
}

// SetSessionsFlap sets the value of the leaf SessionsFlap in the Ospfv3Router_Counters
// struct.
func (t *Ospfv3Router_Counters) SetSessionsFlap(v uint64) {
	t.SessionsFlap = &v
}

// SetSessionsUp sets the value of the leaf SessionsUp in the Ospfv3Router_Counters
// struct.
func (t *Ospfv3Router_Counters) SetSessionsUp(v uint64) {
	t.SessionsUp = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Ospfv3Router_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Ospfv3Router_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv3Router_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ospfv3Router_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv3Router_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ospfv3Router_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ospfv3Router_Counters.
func (*Ospfv3Router_Counters) ΛBelongingModule() string {
	return "open-traffic-generator-ospfv3"
}

// Ospfv3Router_LinkStateDatabase represents the /open-traffic-generator-ospfv3/ospfv3-routers/ospfv3-router/state/link-state-database YANG schema element.
type Ospfv3Router_LinkStateDatabase struct {
	LsaStates *Ospfv3Router_LinkStateDatabase_LsaStates `path:"lsa-states" module:"open-traffic-generator-ospfv3"`
}

// IsYANGGoStruct ensures that Ospfv3Router_LinkStateDatabase implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ospfv3Router_LinkStateDatabase) IsYANGGoStruct() {}

// GetOrCreateLsaStates retrieves the value of the LsaStates field
// or returns the existing field if it already exists.
func (t *Ospfv3Router_LinkStateDatabase) GetOrCreateLsaStates() *Ospfv3Router_LinkStateDatabase_LsaStates {
	if t.LsaStates != nil {
		return t.LsaStates
	}
	t.LsaStates = &Ospfv3Router_LinkStateDatabase_LsaStates{}
	return t.LsaStates
}

// GetLsaStates returns the value of the LsaStates struct pointer
// from Ospfv3Router_LinkStateDatabase. If the receiver or the field LsaStates is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Ospfv3Router_LinkStateDatabase) GetLsaStates() *Ospfv3Router_LinkStateDatabase_LsaStates {
	if t != nil && t.LsaStates != nil {
		return t.LsaStates
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Ospfv3Router_LinkStateDatabase
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Ospfv3Router_LinkStateDatabase) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LsaStates.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv3Router_LinkStateDatabase) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ospfv3Router_LinkStateDatabase"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv3Router_LinkStateDatabase) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ospfv3Router_LinkStateDatabase) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ospfv3Router_LinkStateDatabase.
func (*Ospfv3Router_LinkStateDatabase) ΛBelongingModule() string {
	return "open-traffic-generator-ospfv3"
}

// Ospfv3Router_LinkStateDatabase_LsaStates represents the /open-traffic-generator-ospfv3/ospfv3-routers/ospfv3-router/state/link-state-database/lsa-states YANG schema element.
type Ospfv3Router_LinkStateDatabase_LsaStates struct {
	ExternalAsLsa      map[string]*Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa      `path:"external-as-lsa" module:"open-traffic-generator-ospfv3"`
	InterAreaPrefixLsa map[string]*Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa `path:"inter-area-prefix-lsa" module:"open-traffic-generator-ospfv3"`
	InterAreaRouterLsa map[string]*Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa `path:"inter-area-router-lsa" module:"open-traffic-generator-ospfv3"`
	IntraAreaPrefixLsa map[string]*Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa `path:"intra-area-prefix-lsa" module:"open-traffic-generator-ospfv3"`
	LinkLsa            map[string]*Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa            `path:"link-lsa" module:"open-traffic-generator-ospfv3"`
	NetworkLsa         map[string]*Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa         `path:"network-lsa" module:"open-traffic-generator-ospfv3"`
	NssaLsa            map[string]*Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa            `path:"nssa-lsa" module:"open-traffic-generator-ospfv3"`
	RouterLsa          map[string]*Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa          `path:"router-lsa" module:"open-traffic-generator-ospfv3"`
}

// IsYANGGoStruct ensures that Ospfv3Router_LinkStateDatabase_LsaStates implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ospfv3Router_LinkStateDatabase_LsaStates) IsYANGGoStruct() {}

// NewExternalAsLsa creates a new entry in the ExternalAsLsa list of the
// Ospfv3Router_LinkStateDatabase_LsaStates struct. The keys of the list are populated from the input
// arguments.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) NewExternalAsLsa(LinkStateId string) (*Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExternalAsLsa == nil {
		t.ExternalAsLsa = make(map[string]*Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa)
	}

	key := LinkStateId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ExternalAsLsa[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ExternalAsLsa", key)
	}

	t.ExternalAsLsa[key] = &Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa{
		LinkStateId: &LinkStateId,
	}

	return t.ExternalAsLsa[key], nil
}

// RenameExternalAsLsa renames an entry in the list ExternalAsLsa within
// the Ospfv3Router_LinkStateDatabase_LsaStates struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) RenameExternalAsLsa(oldK, newK string) error {
	if _, ok := t.ExternalAsLsa[newK]; ok {
		return fmt.Errorf("key %v already exists in ExternalAsLsa", newK)
	}

	e, ok := t.ExternalAsLsa[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ExternalAsLsa", oldK)
	}
	e.LinkStateId = &newK

	t.ExternalAsLsa[newK] = e
	delete(t.ExternalAsLsa, oldK)
	return nil
}

// GetOrCreateExternalAsLsaMap returns the list (map) from Ospfv3Router_LinkStateDatabase_LsaStates.
//
// It initializes the field if not already initialized.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) GetOrCreateExternalAsLsaMap() map[string]*Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa {
	if t.ExternalAsLsa == nil {
		t.ExternalAsLsa = make(map[string]*Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa)
	}
	return t.ExternalAsLsa
}

// GetOrCreateExternalAsLsa retrieves the value with the specified keys from
// the receiver Ospfv3Router_LinkStateDatabase_LsaStates. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) GetOrCreateExternalAsLsa(LinkStateId string) *Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa {

	key := LinkStateId

	if v, ok := t.ExternalAsLsa[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewExternalAsLsa(LinkStateId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateExternalAsLsa got unexpected error: %v", err))
	}
	return v
}

// GetExternalAsLsa retrieves the value with the specified key from
// the ExternalAsLsa map field of Ospfv3Router_LinkStateDatabase_LsaStates. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) GetExternalAsLsa(LinkStateId string) *Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa {

	if t == nil {
		return nil
	}

	key := LinkStateId

	if lm, ok := t.ExternalAsLsa[key]; ok {
		return lm
	}
	return nil
}

// DeleteExternalAsLsa deletes the value with the specified keys from
// the receiver Ospfv3Router_LinkStateDatabase_LsaStates. If there is no such element, the function
// is a no-op.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) DeleteExternalAsLsa(LinkStateId string) {
	key := LinkStateId

	delete(t.ExternalAsLsa, key)
}

// AppendExternalAsLsa appends the supplied Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa struct to the
// list ExternalAsLsa of Ospfv3Router_LinkStateDatabase_LsaStates. If the key value(s) specified in
// the supplied Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa already exist in the list, an error is
// returned.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) AppendExternalAsLsa(v *Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa) error {
	if v.LinkStateId == nil {
		return fmt.Errorf("invalid nil key received for LinkStateId")
	}

	key := *v.LinkStateId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExternalAsLsa == nil {
		t.ExternalAsLsa = make(map[string]*Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa)
	}

	if _, ok := t.ExternalAsLsa[key]; ok {
		return fmt.Errorf("duplicate key for list ExternalAsLsa %v", key)
	}

	t.ExternalAsLsa[key] = v
	return nil
}

// NewInterAreaPrefixLsa creates a new entry in the InterAreaPrefixLsa list of the
// Ospfv3Router_LinkStateDatabase_LsaStates struct. The keys of the list are populated from the input
// arguments.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) NewInterAreaPrefixLsa(LinkStateId string) (*Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.InterAreaPrefixLsa == nil {
		t.InterAreaPrefixLsa = make(map[string]*Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa)
	}

	key := LinkStateId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.InterAreaPrefixLsa[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list InterAreaPrefixLsa", key)
	}

	t.InterAreaPrefixLsa[key] = &Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa{
		LinkStateId: &LinkStateId,
	}

	return t.InterAreaPrefixLsa[key], nil
}

// RenameInterAreaPrefixLsa renames an entry in the list InterAreaPrefixLsa within
// the Ospfv3Router_LinkStateDatabase_LsaStates struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) RenameInterAreaPrefixLsa(oldK, newK string) error {
	if _, ok := t.InterAreaPrefixLsa[newK]; ok {
		return fmt.Errorf("key %v already exists in InterAreaPrefixLsa", newK)
	}

	e, ok := t.InterAreaPrefixLsa[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in InterAreaPrefixLsa", oldK)
	}
	e.LinkStateId = &newK

	t.InterAreaPrefixLsa[newK] = e
	delete(t.InterAreaPrefixLsa, oldK)
	return nil
}

// GetOrCreateInterAreaPrefixLsaMap returns the list (map) from Ospfv3Router_LinkStateDatabase_LsaStates.
//
// It initializes the field if not already initialized.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) GetOrCreateInterAreaPrefixLsaMap() map[string]*Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa {
	if t.InterAreaPrefixLsa == nil {
		t.InterAreaPrefixLsa = make(map[string]*Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa)
	}
	return t.InterAreaPrefixLsa
}

// GetOrCreateInterAreaPrefixLsa retrieves the value with the specified keys from
// the receiver Ospfv3Router_LinkStateDatabase_LsaStates. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) GetOrCreateInterAreaPrefixLsa(LinkStateId string) *Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa {

	key := LinkStateId

	if v, ok := t.InterAreaPrefixLsa[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterAreaPrefixLsa(LinkStateId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterAreaPrefixLsa got unexpected error: %v", err))
	}
	return v
}

// GetInterAreaPrefixLsa retrieves the value with the specified key from
// the InterAreaPrefixLsa map field of Ospfv3Router_LinkStateDatabase_LsaStates. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) GetInterAreaPrefixLsa(LinkStateId string) *Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa {

	if t == nil {
		return nil
	}

	key := LinkStateId

	if lm, ok := t.InterAreaPrefixLsa[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterAreaPrefixLsa deletes the value with the specified keys from
// the receiver Ospfv3Router_LinkStateDatabase_LsaStates. If there is no such element, the function
// is a no-op.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) DeleteInterAreaPrefixLsa(LinkStateId string) {
	key := LinkStateId

	delete(t.InterAreaPrefixLsa, key)
}

// AppendInterAreaPrefixLsa appends the supplied Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa struct to the
// list InterAreaPrefixLsa of Ospfv3Router_LinkStateDatabase_LsaStates. If the key value(s) specified in
// the supplied Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa already exist in the list, an error is
// returned.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) AppendInterAreaPrefixLsa(v *Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa) error {
	if v.LinkStateId == nil {
		return fmt.Errorf("invalid nil key received for LinkStateId")
	}

	key := *v.LinkStateId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.InterAreaPrefixLsa == nil {
		t.InterAreaPrefixLsa = make(map[string]*Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa)
	}

	if _, ok := t.InterAreaPrefixLsa[key]; ok {
		return fmt.Errorf("duplicate key for list InterAreaPrefixLsa %v", key)
	}

	t.InterAreaPrefixLsa[key] = v
	return nil
}

// NewInterAreaRouterLsa creates a new entry in the InterAreaRouterLsa list of the
// Ospfv3Router_LinkStateDatabase_LsaStates struct. The keys of the list are populated from the input
// arguments.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) NewInterAreaRouterLsa(LinkStateId string) (*Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.InterAreaRouterLsa == nil {
		t.InterAreaRouterLsa = make(map[string]*Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa)
	}

	key := LinkStateId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.InterAreaRouterLsa[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list InterAreaRouterLsa", key)
	}

	t.InterAreaRouterLsa[key] = &Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa{
		LinkStateId: &LinkStateId,
	}

	return t.InterAreaRouterLsa[key], nil
}

// RenameInterAreaRouterLsa renames an entry in the list InterAreaRouterLsa within
// the Ospfv3Router_LinkStateDatabase_LsaStates struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) RenameInterAreaRouterLsa(oldK, newK string) error {
	if _, ok := t.InterAreaRouterLsa[newK]; ok {
		return fmt.Errorf("key %v already exists in InterAreaRouterLsa", newK)
	}

	e, ok := t.InterAreaRouterLsa[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in InterAreaRouterLsa", oldK)
	}
	e.LinkStateId = &newK

	t.InterAreaRouterLsa[newK] = e
	delete(t.InterAreaRouterLsa, oldK)
	return nil
}

// GetOrCreateInterAreaRouterLsaMap returns the list (map) from Ospfv3Router_LinkStateDatabase_LsaStates.
//
// It initializes the field if not already initialized.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) GetOrCreateInterAreaRouterLsaMap() map[string]*Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa {
	if t.InterAreaRouterLsa == nil {
		t.InterAreaRouterLsa = make(map[string]*Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa)
	}
	return t.InterAreaRouterLsa
}

// GetOrCreateInterAreaRouterLsa retrieves the value with the specified keys from
// the receiver Ospfv3Router_LinkStateDatabase_LsaStates. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) GetOrCreateInterAreaRouterLsa(LinkStateId string) *Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa {

	key := LinkStateId

	if v, ok := t.InterAreaRouterLsa[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterAreaRouterLsa(LinkStateId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterAreaRouterLsa got unexpected error: %v", err))
	}
	return v
}

// GetInterAreaRouterLsa retrieves the value with the specified key from
// the InterAreaRouterLsa map field of Ospfv3Router_LinkStateDatabase_LsaStates. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) GetInterAreaRouterLsa(LinkStateId string) *Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa {

	if t == nil {
		return nil
	}

	key := LinkStateId

	if lm, ok := t.InterAreaRouterLsa[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterAreaRouterLsa deletes the value with the specified keys from
// the receiver Ospfv3Router_LinkStateDatabase_LsaStates. If there is no such element, the function
// is a no-op.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) DeleteInterAreaRouterLsa(LinkStateId string) {
	key := LinkStateId

	delete(t.InterAreaRouterLsa, key)
}

// AppendInterAreaRouterLsa appends the supplied Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa struct to the
// list InterAreaRouterLsa of Ospfv3Router_LinkStateDatabase_LsaStates. If the key value(s) specified in
// the supplied Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa already exist in the list, an error is
// returned.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) AppendInterAreaRouterLsa(v *Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa) error {
	if v.LinkStateId == nil {
		return fmt.Errorf("invalid nil key received for LinkStateId")
	}

	key := *v.LinkStateId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.InterAreaRouterLsa == nil {
		t.InterAreaRouterLsa = make(map[string]*Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa)
	}

	if _, ok := t.InterAreaRouterLsa[key]; ok {
		return fmt.Errorf("duplicate key for list InterAreaRouterLsa %v", key)
	}

	t.InterAreaRouterLsa[key] = v
	return nil
}

// NewIntraAreaPrefixLsa creates a new entry in the IntraAreaPrefixLsa list of the
// Ospfv3Router_LinkStateDatabase_LsaStates struct. The keys of the list are populated from the input
// arguments.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) NewIntraAreaPrefixLsa(LinkStateId string) (*Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IntraAreaPrefixLsa == nil {
		t.IntraAreaPrefixLsa = make(map[string]*Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa)
	}

	key := LinkStateId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IntraAreaPrefixLsa[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IntraAreaPrefixLsa", key)
	}

	t.IntraAreaPrefixLsa[key] = &Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa{
		LinkStateId: &LinkStateId,
	}

	return t.IntraAreaPrefixLsa[key], nil
}

// RenameIntraAreaPrefixLsa renames an entry in the list IntraAreaPrefixLsa within
// the Ospfv3Router_LinkStateDatabase_LsaStates struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) RenameIntraAreaPrefixLsa(oldK, newK string) error {
	if _, ok := t.IntraAreaPrefixLsa[newK]; ok {
		return fmt.Errorf("key %v already exists in IntraAreaPrefixLsa", newK)
	}

	e, ok := t.IntraAreaPrefixLsa[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IntraAreaPrefixLsa", oldK)
	}
	e.LinkStateId = &newK

	t.IntraAreaPrefixLsa[newK] = e
	delete(t.IntraAreaPrefixLsa, oldK)
	return nil
}

// GetOrCreateIntraAreaPrefixLsaMap returns the list (map) from Ospfv3Router_LinkStateDatabase_LsaStates.
//
// It initializes the field if not already initialized.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) GetOrCreateIntraAreaPrefixLsaMap() map[string]*Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa {
	if t.IntraAreaPrefixLsa == nil {
		t.IntraAreaPrefixLsa = make(map[string]*Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa)
	}
	return t.IntraAreaPrefixLsa
}

// GetOrCreateIntraAreaPrefixLsa retrieves the value with the specified keys from
// the receiver Ospfv3Router_LinkStateDatabase_LsaStates. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) GetOrCreateIntraAreaPrefixLsa(LinkStateId string) *Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa {

	key := LinkStateId

	if v, ok := t.IntraAreaPrefixLsa[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIntraAreaPrefixLsa(LinkStateId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIntraAreaPrefixLsa got unexpected error: %v", err))
	}
	return v
}

// GetIntraAreaPrefixLsa retrieves the value with the specified key from
// the IntraAreaPrefixLsa map field of Ospfv3Router_LinkStateDatabase_LsaStates. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) GetIntraAreaPrefixLsa(LinkStateId string) *Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa {

	if t == nil {
		return nil
	}

	key := LinkStateId

	if lm, ok := t.IntraAreaPrefixLsa[key]; ok {
		return lm
	}
	return nil
}

// DeleteIntraAreaPrefixLsa deletes the value with the specified keys from
// the receiver Ospfv3Router_LinkStateDatabase_LsaStates. If there is no such element, the function
// is a no-op.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) DeleteIntraAreaPrefixLsa(LinkStateId string) {
	key := LinkStateId

	delete(t.IntraAreaPrefixLsa, key)
}

// AppendIntraAreaPrefixLsa appends the supplied Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa struct to the
// list IntraAreaPrefixLsa of Ospfv3Router_LinkStateDatabase_LsaStates. If the key value(s) specified in
// the supplied Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa already exist in the list, an error is
// returned.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) AppendIntraAreaPrefixLsa(v *Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa) error {
	if v.LinkStateId == nil {
		return fmt.Errorf("invalid nil key received for LinkStateId")
	}

	key := *v.LinkStateId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IntraAreaPrefixLsa == nil {
		t.IntraAreaPrefixLsa = make(map[string]*Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa)
	}

	if _, ok := t.IntraAreaPrefixLsa[key]; ok {
		return fmt.Errorf("duplicate key for list IntraAreaPrefixLsa %v", key)
	}

	t.IntraAreaPrefixLsa[key] = v
	return nil
}

// NewLinkLsa creates a new entry in the LinkLsa list of the
// Ospfv3Router_LinkStateDatabase_LsaStates struct. The keys of the list are populated from the input
// arguments.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) NewLinkLsa(LinkStateId string) (*Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LinkLsa == nil {
		t.LinkLsa = make(map[string]*Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa)
	}

	key := LinkStateId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LinkLsa[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LinkLsa", key)
	}

	t.LinkLsa[key] = &Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa{
		LinkStateId: &LinkStateId,
	}

	return t.LinkLsa[key], nil
}

// RenameLinkLsa renames an entry in the list LinkLsa within
// the Ospfv3Router_LinkStateDatabase_LsaStates struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) RenameLinkLsa(oldK, newK string) error {
	if _, ok := t.LinkLsa[newK]; ok {
		return fmt.Errorf("key %v already exists in LinkLsa", newK)
	}

	e, ok := t.LinkLsa[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LinkLsa", oldK)
	}
	e.LinkStateId = &newK

	t.LinkLsa[newK] = e
	delete(t.LinkLsa, oldK)
	return nil
}

// GetOrCreateLinkLsaMap returns the list (map) from Ospfv3Router_LinkStateDatabase_LsaStates.
//
// It initializes the field if not already initialized.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) GetOrCreateLinkLsaMap() map[string]*Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa {
	if t.LinkLsa == nil {
		t.LinkLsa = make(map[string]*Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa)
	}
	return t.LinkLsa
}

// GetOrCreateLinkLsa retrieves the value with the specified keys from
// the receiver Ospfv3Router_LinkStateDatabase_LsaStates. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) GetOrCreateLinkLsa(LinkStateId string) *Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa {

	key := LinkStateId

	if v, ok := t.LinkLsa[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLinkLsa(LinkStateId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLinkLsa got unexpected error: %v", err))
	}
	return v
}

// GetLinkLsa retrieves the value with the specified key from
// the LinkLsa map field of Ospfv3Router_LinkStateDatabase_LsaStates. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) GetLinkLsa(LinkStateId string) *Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa {

	if t == nil {
		return nil
	}

	key := LinkStateId

	if lm, ok := t.LinkLsa[key]; ok {
		return lm
	}
	return nil
}

// DeleteLinkLsa deletes the value with the specified keys from
// the receiver Ospfv3Router_LinkStateDatabase_LsaStates. If there is no such element, the function
// is a no-op.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) DeleteLinkLsa(LinkStateId string) {
	key := LinkStateId

	delete(t.LinkLsa, key)
}

// AppendLinkLsa appends the supplied Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa struct to the
// list LinkLsa of Ospfv3Router_LinkStateDatabase_LsaStates. If the key value(s) specified in
// the supplied Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa already exist in the list, an error is
// returned.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) AppendLinkLsa(v *Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa) error {
	if v.LinkStateId == nil {
		return fmt.Errorf("invalid nil key received for LinkStateId")
	}

	key := *v.LinkStateId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LinkLsa == nil {
		t.LinkLsa = make(map[string]*Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa)
	}

	if _, ok := t.LinkLsa[key]; ok {
		return fmt.Errorf("duplicate key for list LinkLsa %v", key)
	}

	t.LinkLsa[key] = v
	return nil
}

// NewNetworkLsa creates a new entry in the NetworkLsa list of the
// Ospfv3Router_LinkStateDatabase_LsaStates struct. The keys of the list are populated from the input
// arguments.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) NewNetworkLsa(LinkStateId string) (*Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NetworkLsa == nil {
		t.NetworkLsa = make(map[string]*Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa)
	}

	key := LinkStateId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NetworkLsa[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NetworkLsa", key)
	}

	t.NetworkLsa[key] = &Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa{
		LinkStateId: &LinkStateId,
	}

	return t.NetworkLsa[key], nil
}

// RenameNetworkLsa renames an entry in the list NetworkLsa within
// the Ospfv3Router_LinkStateDatabase_LsaStates struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) RenameNetworkLsa(oldK, newK string) error {
	if _, ok := t.NetworkLsa[newK]; ok {
		return fmt.Errorf("key %v already exists in NetworkLsa", newK)
	}

	e, ok := t.NetworkLsa[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NetworkLsa", oldK)
	}
	e.LinkStateId = &newK

	t.NetworkLsa[newK] = e
	delete(t.NetworkLsa, oldK)
	return nil
}

// GetOrCreateNetworkLsaMap returns the list (map) from Ospfv3Router_LinkStateDatabase_LsaStates.
//
// It initializes the field if not already initialized.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) GetOrCreateNetworkLsaMap() map[string]*Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa {
	if t.NetworkLsa == nil {
		t.NetworkLsa = make(map[string]*Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa)
	}
	return t.NetworkLsa
}

// GetOrCreateNetworkLsa retrieves the value with the specified keys from
// the receiver Ospfv3Router_LinkStateDatabase_LsaStates. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) GetOrCreateNetworkLsa(LinkStateId string) *Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa {

	key := LinkStateId

	if v, ok := t.NetworkLsa[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNetworkLsa(LinkStateId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNetworkLsa got unexpected error: %v", err))
	}
	return v
}

// GetNetworkLsa retrieves the value with the specified key from
// the NetworkLsa map field of Ospfv3Router_LinkStateDatabase_LsaStates. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) GetNetworkLsa(LinkStateId string) *Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa {

	if t == nil {
		return nil
	}

	key := LinkStateId

	if lm, ok := t.NetworkLsa[key]; ok {
		return lm
	}
	return nil
}

// DeleteNetworkLsa deletes the value with the specified keys from
// the receiver Ospfv3Router_LinkStateDatabase_LsaStates. If there is no such element, the function
// is a no-op.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) DeleteNetworkLsa(LinkStateId string) {
	key := LinkStateId

	delete(t.NetworkLsa, key)
}

// AppendNetworkLsa appends the supplied Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa struct to the
// list NetworkLsa of Ospfv3Router_LinkStateDatabase_LsaStates. If the key value(s) specified in
// the supplied Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa already exist in the list, an error is
// returned.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) AppendNetworkLsa(v *Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa) error {
	if v.LinkStateId == nil {
		return fmt.Errorf("invalid nil key received for LinkStateId")
	}

	key := *v.LinkStateId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NetworkLsa == nil {
		t.NetworkLsa = make(map[string]*Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa)
	}

	if _, ok := t.NetworkLsa[key]; ok {
		return fmt.Errorf("duplicate key for list NetworkLsa %v", key)
	}

	t.NetworkLsa[key] = v
	return nil
}

// NewNssaLsa creates a new entry in the NssaLsa list of the
// Ospfv3Router_LinkStateDatabase_LsaStates struct. The keys of the list are populated from the input
// arguments.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) NewNssaLsa(LinkStateId string) (*Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NssaLsa == nil {
		t.NssaLsa = make(map[string]*Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa)
	}

	key := LinkStateId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NssaLsa[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NssaLsa", key)
	}

	t.NssaLsa[key] = &Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa{
		LinkStateId: &LinkStateId,
	}

	return t.NssaLsa[key], nil
}

// RenameNssaLsa renames an entry in the list NssaLsa within
// the Ospfv3Router_LinkStateDatabase_LsaStates struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) RenameNssaLsa(oldK, newK string) error {
	if _, ok := t.NssaLsa[newK]; ok {
		return fmt.Errorf("key %v already exists in NssaLsa", newK)
	}

	e, ok := t.NssaLsa[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NssaLsa", oldK)
	}
	e.LinkStateId = &newK

	t.NssaLsa[newK] = e
	delete(t.NssaLsa, oldK)
	return nil
}

// GetOrCreateNssaLsaMap returns the list (map) from Ospfv3Router_LinkStateDatabase_LsaStates.
//
// It initializes the field if not already initialized.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) GetOrCreateNssaLsaMap() map[string]*Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa {
	if t.NssaLsa == nil {
		t.NssaLsa = make(map[string]*Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa)
	}
	return t.NssaLsa
}

// GetOrCreateNssaLsa retrieves the value with the specified keys from
// the receiver Ospfv3Router_LinkStateDatabase_LsaStates. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) GetOrCreateNssaLsa(LinkStateId string) *Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa {

	key := LinkStateId

	if v, ok := t.NssaLsa[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNssaLsa(LinkStateId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNssaLsa got unexpected error: %v", err))
	}
	return v
}

// GetNssaLsa retrieves the value with the specified key from
// the NssaLsa map field of Ospfv3Router_LinkStateDatabase_LsaStates. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) GetNssaLsa(LinkStateId string) *Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa {

	if t == nil {
		return nil
	}

	key := LinkStateId

	if lm, ok := t.NssaLsa[key]; ok {
		return lm
	}
	return nil
}

// DeleteNssaLsa deletes the value with the specified keys from
// the receiver Ospfv3Router_LinkStateDatabase_LsaStates. If there is no such element, the function
// is a no-op.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) DeleteNssaLsa(LinkStateId string) {
	key := LinkStateId

	delete(t.NssaLsa, key)
}

// AppendNssaLsa appends the supplied Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa struct to the
// list NssaLsa of Ospfv3Router_LinkStateDatabase_LsaStates. If the key value(s) specified in
// the supplied Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa already exist in the list, an error is
// returned.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) AppendNssaLsa(v *Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa) error {
	if v.LinkStateId == nil {
		return fmt.Errorf("invalid nil key received for LinkStateId")
	}

	key := *v.LinkStateId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NssaLsa == nil {
		t.NssaLsa = make(map[string]*Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa)
	}

	if _, ok := t.NssaLsa[key]; ok {
		return fmt.Errorf("duplicate key for list NssaLsa %v", key)
	}

	t.NssaLsa[key] = v
	return nil
}

// NewRouterLsa creates a new entry in the RouterLsa list of the
// Ospfv3Router_LinkStateDatabase_LsaStates struct. The keys of the list are populated from the input
// arguments.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) NewRouterLsa(LinkStateId string) (*Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouterLsa == nil {
		t.RouterLsa = make(map[string]*Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa)
	}

	key := LinkStateId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RouterLsa[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RouterLsa", key)
	}

	t.RouterLsa[key] = &Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa{
		LinkStateId: &LinkStateId,
	}

	return t.RouterLsa[key], nil
}

// RenameRouterLsa renames an entry in the list RouterLsa within
// the Ospfv3Router_LinkStateDatabase_LsaStates struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) RenameRouterLsa(oldK, newK string) error {
	if _, ok := t.RouterLsa[newK]; ok {
		return fmt.Errorf("key %v already exists in RouterLsa", newK)
	}

	e, ok := t.RouterLsa[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RouterLsa", oldK)
	}
	e.LinkStateId = &newK

	t.RouterLsa[newK] = e
	delete(t.RouterLsa, oldK)
	return nil
}

// GetOrCreateRouterLsaMap returns the list (map) from Ospfv3Router_LinkStateDatabase_LsaStates.
//
// It initializes the field if not already initialized.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) GetOrCreateRouterLsaMap() map[string]*Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa {
	if t.RouterLsa == nil {
		t.RouterLsa = make(map[string]*Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa)
	}
	return t.RouterLsa
}

// GetOrCreateRouterLsa retrieves the value with the specified keys from
// the receiver Ospfv3Router_LinkStateDatabase_LsaStates. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) GetOrCreateRouterLsa(LinkStateId string) *Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa {

	key := LinkStateId

	if v, ok := t.RouterLsa[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRouterLsa(LinkStateId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRouterLsa got unexpected error: %v", err))
	}
	return v
}

// GetRouterLsa retrieves the value with the specified key from
// the RouterLsa map field of Ospfv3Router_LinkStateDatabase_LsaStates. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) GetRouterLsa(LinkStateId string) *Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa {

	if t == nil {
		return nil
	}

	key := LinkStateId

	if lm, ok := t.RouterLsa[key]; ok {
		return lm
	}
	return nil
}

// DeleteRouterLsa deletes the value with the specified keys from
// the receiver Ospfv3Router_LinkStateDatabase_LsaStates. If there is no such element, the function
// is a no-op.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) DeleteRouterLsa(LinkStateId string) {
	key := LinkStateId

	delete(t.RouterLsa, key)
}

// AppendRouterLsa appends the supplied Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa struct to the
// list RouterLsa of Ospfv3Router_LinkStateDatabase_LsaStates. If the key value(s) specified in
// the supplied Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa already exist in the list, an error is
// returned.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) AppendRouterLsa(v *Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa) error {
	if v.LinkStateId == nil {
		return fmt.Errorf("invalid nil key received for LinkStateId")
	}

	key := *v.LinkStateId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouterLsa == nil {
		t.RouterLsa = make(map[string]*Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa)
	}

	if _, ok := t.RouterLsa[key]; ok {
		return fmt.Errorf("duplicate key for list RouterLsa %v", key)
	}

	t.RouterLsa[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Ospfv3Router_LinkStateDatabase_LsaStates
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.ExternalAsLsa {
		e.PopulateDefaults()
	}
	for _, e := range t.InterAreaPrefixLsa {
		e.PopulateDefaults()
	}
	for _, e := range t.InterAreaRouterLsa {
		e.PopulateDefaults()
	}
	for _, e := range t.IntraAreaPrefixLsa {
		e.PopulateDefaults()
	}
	for _, e := range t.LinkLsa {
		e.PopulateDefaults()
	}
	for _, e := range t.NetworkLsa {
		e.PopulateDefaults()
	}
	for _, e := range t.NssaLsa {
		e.PopulateDefaults()
	}
	for _, e := range t.RouterLsa {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ospfv3Router_LinkStateDatabase_LsaStates"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ospfv3Router_LinkStateDatabase_LsaStates.
func (*Ospfv3Router_LinkStateDatabase_LsaStates) ΛBelongingModule() string {
	return "open-traffic-generator-ospfv3"
}

// Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa represents the /open-traffic-generator-ospfv3/ospfv3-routers/ospfv3-router/state/link-state-database/lsa-states/external-as-lsa YANG schema element.
type Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa struct {
	AddressPrefix     *string `path:"state/address-prefix" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	AdvertisingRouter *string `path:"state/advertising-router" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	Age               *uint16 `path:"state/age" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	ForwardingAddress *string `path:"state/forwarding-address" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	LinkStateId       *string `path:"state/link-state-id|link-state-id" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3|open-traffic-generator-ospfv3" shadow-path:"link-state-id" shadow-module:"open-traffic-generator-ospfv3"`
	Metric            *uint32 `path:"state/metric" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	PrefixLength      *uint32 `path:"state/prefix-length" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	ReferencedLsType  *uint32 `path:"state/referenced-ls-type" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	RouteTag          *string `path:"state/route-tag" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	SequenceNumber    *uint32 `path:"state/sequence-number" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
}

// IsYANGGoStruct ensures that Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa) IsYANGGoStruct() {}

// GetAddressPrefix retrieves the value of the leaf AddressPrefix from the Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AddressPrefix is set, it can
// safely use t.GetAddressPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AddressPrefix == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa) GetAddressPrefix() string {
	if t == nil || t.AddressPrefix == nil {
		return ""
	}
	return *t.AddressPrefix
}

// GetAdvertisingRouter retrieves the value of the leaf AdvertisingRouter from the Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisingRouter is set, it can
// safely use t.GetAdvertisingRouter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisingRouter == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa) GetAdvertisingRouter() string {
	if t == nil || t.AdvertisingRouter == nil {
		return ""
	}
	return *t.AdvertisingRouter
}

// GetAge retrieves the value of the leaf Age from the Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Age is set, it can
// safely use t.GetAge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Age == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa) GetAge() uint16 {
	if t == nil || t.Age == nil {
		return 0
	}
	return *t.Age
}

// GetForwardingAddress retrieves the value of the leaf ForwardingAddress from the Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingAddress is set, it can
// safely use t.GetForwardingAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingAddress == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa) GetForwardingAddress() string {
	if t == nil || t.ForwardingAddress == nil {
		return ""
	}
	return *t.ForwardingAddress
}

// GetLinkStateId retrieves the value of the leaf LinkStateId from the Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkStateId is set, it can
// safely use t.GetLinkStateId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkStateId == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa) GetLinkStateId() string {
	if t == nil || t.LinkStateId == nil {
		return ""
	}
	return *t.LinkStateId
}

// GetMetric retrieves the value of the leaf Metric from the Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// GetReferencedLsType retrieves the value of the leaf ReferencedLsType from the Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReferencedLsType is set, it can
// safely use t.GetReferencedLsType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReferencedLsType == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa) GetReferencedLsType() uint32 {
	if t == nil || t.ReferencedLsType == nil {
		return 0
	}
	return *t.ReferencedLsType
}

// GetRouteTag retrieves the value of the leaf RouteTag from the Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTag is set, it can
// safely use t.GetRouteTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTag == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa) GetRouteTag() string {
	if t == nil || t.RouteTag == nil {
		return ""
	}
	return *t.RouteTag
}

// GetSequenceNumber retrieves the value of the leaf SequenceNumber from the Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SequenceNumber is set, it can
// safely use t.GetSequenceNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SequenceNumber == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa) GetSequenceNumber() uint32 {
	if t == nil || t.SequenceNumber == nil {
		return 0
	}
	return *t.SequenceNumber
}

// SetAddressPrefix sets the value of the leaf AddressPrefix in the Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa) SetAddressPrefix(v string) {
	t.AddressPrefix = &v
}

// SetAdvertisingRouter sets the value of the leaf AdvertisingRouter in the Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa) SetAdvertisingRouter(v string) {
	t.AdvertisingRouter = &v
}

// SetAge sets the value of the leaf Age in the Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa) SetAge(v uint16) {
	t.Age = &v
}

// SetForwardingAddress sets the value of the leaf ForwardingAddress in the Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa) SetForwardingAddress(v string) {
	t.ForwardingAddress = &v
}

// SetLinkStateId sets the value of the leaf LinkStateId in the Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa) SetLinkStateId(v string) {
	t.LinkStateId = &v
}

// SetMetric sets the value of the leaf Metric in the Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa) SetMetric(v uint32) {
	t.Metric = &v
}

// SetPrefixLength sets the value of the leaf PrefixLength in the Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa) SetPrefixLength(v uint32) {
	t.PrefixLength = &v
}

// SetReferencedLsType sets the value of the leaf ReferencedLsType in the Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa) SetReferencedLsType(v uint32) {
	t.ReferencedLsType = &v
}

// SetRouteTag sets the value of the leaf RouteTag in the Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa) SetRouteTag(v string) {
	t.RouteTag = &v
}

// SetSequenceNumber sets the value of the leaf SequenceNumber in the Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa) SetSequenceNumber(v uint32) {
	t.SequenceNumber = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa struct, which is a YANG list entry.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LinkStateId == nil {
		return nil, fmt.Errorf("nil value for key LinkStateId")
	}

	return map[string]interface{}{
		"link-state-id": *t.LinkStateId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa.
func (*Ospfv3Router_LinkStateDatabase_LsaStates_ExternalAsLsa) ΛBelongingModule() string {
	return "open-traffic-generator-ospfv3"
}

// Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa represents the /open-traffic-generator-ospfv3/ospfv3-routers/ospfv3-router/state/link-state-database/lsa-states/inter-area-prefix-lsa YANG schema element.
type Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa struct {
	AddressPrefix     *string `path:"state/address-prefix" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	AdvertisingRouter *string `path:"state/advertising-router" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	Age               *uint16 `path:"state/age" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	LinkStateId       *string `path:"state/link-state-id|link-state-id" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3|open-traffic-generator-ospfv3" shadow-path:"link-state-id" shadow-module:"open-traffic-generator-ospfv3"`
	Metric            *uint32 `path:"state/metric" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	PrefixLength      *uint32 `path:"state/prefix-length" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	SequenceNumber    *uint32 `path:"state/sequence-number" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
}

// IsYANGGoStruct ensures that Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa) IsYANGGoStruct() {}

// GetAddressPrefix retrieves the value of the leaf AddressPrefix from the Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AddressPrefix is set, it can
// safely use t.GetAddressPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AddressPrefix == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa) GetAddressPrefix() string {
	if t == nil || t.AddressPrefix == nil {
		return ""
	}
	return *t.AddressPrefix
}

// GetAdvertisingRouter retrieves the value of the leaf AdvertisingRouter from the Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisingRouter is set, it can
// safely use t.GetAdvertisingRouter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisingRouter == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa) GetAdvertisingRouter() string {
	if t == nil || t.AdvertisingRouter == nil {
		return ""
	}
	return *t.AdvertisingRouter
}

// GetAge retrieves the value of the leaf Age from the Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Age is set, it can
// safely use t.GetAge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Age == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa) GetAge() uint16 {
	if t == nil || t.Age == nil {
		return 0
	}
	return *t.Age
}

// GetLinkStateId retrieves the value of the leaf LinkStateId from the Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkStateId is set, it can
// safely use t.GetLinkStateId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkStateId == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa) GetLinkStateId() string {
	if t == nil || t.LinkStateId == nil {
		return ""
	}
	return *t.LinkStateId
}

// GetMetric retrieves the value of the leaf Metric from the Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// GetSequenceNumber retrieves the value of the leaf SequenceNumber from the Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SequenceNumber is set, it can
// safely use t.GetSequenceNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SequenceNumber == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa) GetSequenceNumber() uint32 {
	if t == nil || t.SequenceNumber == nil {
		return 0
	}
	return *t.SequenceNumber
}

// SetAddressPrefix sets the value of the leaf AddressPrefix in the Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa) SetAddressPrefix(v string) {
	t.AddressPrefix = &v
}

// SetAdvertisingRouter sets the value of the leaf AdvertisingRouter in the Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa) SetAdvertisingRouter(v string) {
	t.AdvertisingRouter = &v
}

// SetAge sets the value of the leaf Age in the Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa) SetAge(v uint16) {
	t.Age = &v
}

// SetLinkStateId sets the value of the leaf LinkStateId in the Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa) SetLinkStateId(v string) {
	t.LinkStateId = &v
}

// SetMetric sets the value of the leaf Metric in the Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa) SetMetric(v uint32) {
	t.Metric = &v
}

// SetPrefixLength sets the value of the leaf PrefixLength in the Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa) SetPrefixLength(v uint32) {
	t.PrefixLength = &v
}

// SetSequenceNumber sets the value of the leaf SequenceNumber in the Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa) SetSequenceNumber(v uint32) {
	t.SequenceNumber = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa struct, which is a YANG list entry.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LinkStateId == nil {
		return nil, fmt.Errorf("nil value for key LinkStateId")
	}

	return map[string]interface{}{
		"link-state-id": *t.LinkStateId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa.
func (*Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaPrefixLsa) ΛBelongingModule() string {
	return "open-traffic-generator-ospfv3"
}

// Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa represents the /open-traffic-generator-ospfv3/ospfv3-routers/ospfv3-router/state/link-state-database/lsa-states/inter-area-router-lsa YANG schema element.
type Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa struct {
	AdvertisingRouter *string `path:"state/advertising-router" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	Age               *uint16 `path:"state/age" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	DestinationRouter *string `path:"state/destination_router" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	LinkStateId       *string `path:"state/link-state-id|link-state-id" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3|open-traffic-generator-ospfv3" shadow-path:"link-state-id" shadow-module:"open-traffic-generator-ospfv3"`
	Metric            *uint32 `path:"state/metric" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	SequenceNumber    *uint32 `path:"state/sequence-number" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
}

// IsYANGGoStruct ensures that Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa) IsYANGGoStruct() {}

// GetAdvertisingRouter retrieves the value of the leaf AdvertisingRouter from the Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisingRouter is set, it can
// safely use t.GetAdvertisingRouter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisingRouter == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa) GetAdvertisingRouter() string {
	if t == nil || t.AdvertisingRouter == nil {
		return ""
	}
	return *t.AdvertisingRouter
}

// GetAge retrieves the value of the leaf Age from the Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Age is set, it can
// safely use t.GetAge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Age == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa) GetAge() uint16 {
	if t == nil || t.Age == nil {
		return 0
	}
	return *t.Age
}

// GetDestinationRouter retrieves the value of the leaf DestinationRouter from the Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationRouter is set, it can
// safely use t.GetDestinationRouter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationRouter == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa) GetDestinationRouter() string {
	if t == nil || t.DestinationRouter == nil {
		return ""
	}
	return *t.DestinationRouter
}

// GetLinkStateId retrieves the value of the leaf LinkStateId from the Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkStateId is set, it can
// safely use t.GetLinkStateId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkStateId == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa) GetLinkStateId() string {
	if t == nil || t.LinkStateId == nil {
		return ""
	}
	return *t.LinkStateId
}

// GetMetric retrieves the value of the leaf Metric from the Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetSequenceNumber retrieves the value of the leaf SequenceNumber from the Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SequenceNumber is set, it can
// safely use t.GetSequenceNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SequenceNumber == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa) GetSequenceNumber() uint32 {
	if t == nil || t.SequenceNumber == nil {
		return 0
	}
	return *t.SequenceNumber
}

// SetAdvertisingRouter sets the value of the leaf AdvertisingRouter in the Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa) SetAdvertisingRouter(v string) {
	t.AdvertisingRouter = &v
}

// SetAge sets the value of the leaf Age in the Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa) SetAge(v uint16) {
	t.Age = &v
}

// SetDestinationRouter sets the value of the leaf DestinationRouter in the Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa) SetDestinationRouter(v string) {
	t.DestinationRouter = &v
}

// SetLinkStateId sets the value of the leaf LinkStateId in the Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa) SetLinkStateId(v string) {
	t.LinkStateId = &v
}

// SetMetric sets the value of the leaf Metric in the Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa) SetMetric(v uint32) {
	t.Metric = &v
}

// SetSequenceNumber sets the value of the leaf SequenceNumber in the Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa) SetSequenceNumber(v uint32) {
	t.SequenceNumber = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa struct, which is a YANG list entry.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LinkStateId == nil {
		return nil, fmt.Errorf("nil value for key LinkStateId")
	}

	return map[string]interface{}{
		"link-state-id": *t.LinkStateId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa.
func (*Ospfv3Router_LinkStateDatabase_LsaStates_InterAreaRouterLsa) ΛBelongingModule() string {
	return "open-traffic-generator-ospfv3"
}

// Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa represents the /open-traffic-generator-ospfv3/ospfv3-routers/ospfv3-router/state/link-state-database/lsa-states/intra-area-prefix-lsa YANG schema element.
type Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa struct {
	AddressPrefix     *string `path:"state/address-prefix" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	AdvertisingRouter *string `path:"state/advertising-router" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	Age               *uint16 `path:"state/age" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	LinkStateId       *string `path:"state/link-state-id|link-state-id" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3|open-traffic-generator-ospfv3" shadow-path:"link-state-id" shadow-module:"open-traffic-generator-ospfv3"`
	Metric            *uint32 `path:"state/metric" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	PrefixLength      *uint32 `path:"state/prefix-length" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	SequenceNumber    *uint32 `path:"state/sequence-number" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
}

// IsYANGGoStruct ensures that Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa) IsYANGGoStruct() {}

// GetAddressPrefix retrieves the value of the leaf AddressPrefix from the Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AddressPrefix is set, it can
// safely use t.GetAddressPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AddressPrefix == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa) GetAddressPrefix() string {
	if t == nil || t.AddressPrefix == nil {
		return ""
	}
	return *t.AddressPrefix
}

// GetAdvertisingRouter retrieves the value of the leaf AdvertisingRouter from the Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisingRouter is set, it can
// safely use t.GetAdvertisingRouter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisingRouter == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa) GetAdvertisingRouter() string {
	if t == nil || t.AdvertisingRouter == nil {
		return ""
	}
	return *t.AdvertisingRouter
}

// GetAge retrieves the value of the leaf Age from the Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Age is set, it can
// safely use t.GetAge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Age == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa) GetAge() uint16 {
	if t == nil || t.Age == nil {
		return 0
	}
	return *t.Age
}

// GetLinkStateId retrieves the value of the leaf LinkStateId from the Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkStateId is set, it can
// safely use t.GetLinkStateId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkStateId == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa) GetLinkStateId() string {
	if t == nil || t.LinkStateId == nil {
		return ""
	}
	return *t.LinkStateId
}

// GetMetric retrieves the value of the leaf Metric from the Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// GetSequenceNumber retrieves the value of the leaf SequenceNumber from the Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SequenceNumber is set, it can
// safely use t.GetSequenceNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SequenceNumber == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa) GetSequenceNumber() uint32 {
	if t == nil || t.SequenceNumber == nil {
		return 0
	}
	return *t.SequenceNumber
}

// SetAddressPrefix sets the value of the leaf AddressPrefix in the Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa) SetAddressPrefix(v string) {
	t.AddressPrefix = &v
}

// SetAdvertisingRouter sets the value of the leaf AdvertisingRouter in the Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa) SetAdvertisingRouter(v string) {
	t.AdvertisingRouter = &v
}

// SetAge sets the value of the leaf Age in the Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa) SetAge(v uint16) {
	t.Age = &v
}

// SetLinkStateId sets the value of the leaf LinkStateId in the Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa) SetLinkStateId(v string) {
	t.LinkStateId = &v
}

// SetMetric sets the value of the leaf Metric in the Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa) SetMetric(v uint32) {
	t.Metric = &v
}

// SetPrefixLength sets the value of the leaf PrefixLength in the Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa) SetPrefixLength(v uint32) {
	t.PrefixLength = &v
}

// SetSequenceNumber sets the value of the leaf SequenceNumber in the Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa) SetSequenceNumber(v uint32) {
	t.SequenceNumber = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa struct, which is a YANG list entry.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LinkStateId == nil {
		return nil, fmt.Errorf("nil value for key LinkStateId")
	}

	return map[string]interface{}{
		"link-state-id": *t.LinkStateId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa.
func (*Ospfv3Router_LinkStateDatabase_LsaStates_IntraAreaPrefixLsa) ΛBelongingModule() string {
	return "open-traffic-generator-ospfv3"
}

// Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa represents the /open-traffic-generator-ospfv3/ospfv3-routers/ospfv3-router/state/link-state-database/lsa-states/link-lsa YANG schema element.
type Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa struct {
	AddressPrefix     *string `path:"state/address-prefix" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	AdvertisingRouter *string `path:"state/advertising-router" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	Age               *uint16 `path:"state/age" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	LinkLocalAddress  *string `path:"state/link-local-address" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	LinkStateId       *string `path:"state/link-state-id|link-state-id" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3|open-traffic-generator-ospfv3" shadow-path:"link-state-id" shadow-module:"open-traffic-generator-ospfv3"`
	PrefixLength      *uint32 `path:"state/prefix-length" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	SequenceNumber    *uint32 `path:"state/sequence-number" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
}

// IsYANGGoStruct ensures that Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa) IsYANGGoStruct() {}

// GetAddressPrefix retrieves the value of the leaf AddressPrefix from the Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AddressPrefix is set, it can
// safely use t.GetAddressPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AddressPrefix == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa) GetAddressPrefix() string {
	if t == nil || t.AddressPrefix == nil {
		return ""
	}
	return *t.AddressPrefix
}

// GetAdvertisingRouter retrieves the value of the leaf AdvertisingRouter from the Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisingRouter is set, it can
// safely use t.GetAdvertisingRouter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisingRouter == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa) GetAdvertisingRouter() string {
	if t == nil || t.AdvertisingRouter == nil {
		return ""
	}
	return *t.AdvertisingRouter
}

// GetAge retrieves the value of the leaf Age from the Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Age is set, it can
// safely use t.GetAge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Age == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa) GetAge() uint16 {
	if t == nil || t.Age == nil {
		return 0
	}
	return *t.Age
}

// GetLinkLocalAddress retrieves the value of the leaf LinkLocalAddress from the Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkLocalAddress is set, it can
// safely use t.GetLinkLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkLocalAddress == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa) GetLinkLocalAddress() string {
	if t == nil || t.LinkLocalAddress == nil {
		return ""
	}
	return *t.LinkLocalAddress
}

// GetLinkStateId retrieves the value of the leaf LinkStateId from the Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkStateId is set, it can
// safely use t.GetLinkStateId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkStateId == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa) GetLinkStateId() string {
	if t == nil || t.LinkStateId == nil {
		return ""
	}
	return *t.LinkStateId
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// GetSequenceNumber retrieves the value of the leaf SequenceNumber from the Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SequenceNumber is set, it can
// safely use t.GetSequenceNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SequenceNumber == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa) GetSequenceNumber() uint32 {
	if t == nil || t.SequenceNumber == nil {
		return 0
	}
	return *t.SequenceNumber
}

// SetAddressPrefix sets the value of the leaf AddressPrefix in the Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa) SetAddressPrefix(v string) {
	t.AddressPrefix = &v
}

// SetAdvertisingRouter sets the value of the leaf AdvertisingRouter in the Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa) SetAdvertisingRouter(v string) {
	t.AdvertisingRouter = &v
}

// SetAge sets the value of the leaf Age in the Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa) SetAge(v uint16) {
	t.Age = &v
}

// SetLinkLocalAddress sets the value of the leaf LinkLocalAddress in the Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa) SetLinkLocalAddress(v string) {
	t.LinkLocalAddress = &v
}

// SetLinkStateId sets the value of the leaf LinkStateId in the Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa) SetLinkStateId(v string) {
	t.LinkStateId = &v
}

// SetPrefixLength sets the value of the leaf PrefixLength in the Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa) SetPrefixLength(v uint32) {
	t.PrefixLength = &v
}

// SetSequenceNumber sets the value of the leaf SequenceNumber in the Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa) SetSequenceNumber(v uint32) {
	t.SequenceNumber = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa struct, which is a YANG list entry.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LinkStateId == nil {
		return nil, fmt.Errorf("nil value for key LinkStateId")
	}

	return map[string]interface{}{
		"link-state-id": *t.LinkStateId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa.
func (*Ospfv3Router_LinkStateDatabase_LsaStates_LinkLsa) ΛBelongingModule() string {
	return "open-traffic-generator-ospfv3"
}

// Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa represents the /open-traffic-generator-ospfv3/ospfv3-routers/ospfv3-router/state/link-state-database/lsa-states/network-lsa YANG schema element.
type Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa struct {
	AdvertisingRouter *string  `path:"state/advertising-router" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	Age               *uint16  `path:"state/age" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	AttachedRouter    []string `path:"state/attached-router" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	LinkStateId       *string  `path:"state/link-state-id|link-state-id" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3|open-traffic-generator-ospfv3" shadow-path:"link-state-id" shadow-module:"open-traffic-generator-ospfv3"`
	SequenceNumber    *uint32  `path:"state/sequence-number" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
}

// IsYANGGoStruct ensures that Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa) IsYANGGoStruct() {}

// GetAdvertisingRouter retrieves the value of the leaf AdvertisingRouter from the Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisingRouter is set, it can
// safely use t.GetAdvertisingRouter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisingRouter == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa) GetAdvertisingRouter() string {
	if t == nil || t.AdvertisingRouter == nil {
		return ""
	}
	return *t.AdvertisingRouter
}

// GetAge retrieves the value of the leaf Age from the Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Age is set, it can
// safely use t.GetAge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Age == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa) GetAge() uint16 {
	if t == nil || t.Age == nil {
		return 0
	}
	return *t.Age
}

// GetAttachedRouter retrieves the value of the leaf AttachedRouter from the Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttachedRouter is set, it can
// safely use t.GetAttachedRouter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttachedRouter == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa) GetAttachedRouter() []string {
	if t == nil || t.AttachedRouter == nil {
		return nil
	}
	return t.AttachedRouter
}

// GetLinkStateId retrieves the value of the leaf LinkStateId from the Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkStateId is set, it can
// safely use t.GetLinkStateId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkStateId == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa) GetLinkStateId() string {
	if t == nil || t.LinkStateId == nil {
		return ""
	}
	return *t.LinkStateId
}

// GetSequenceNumber retrieves the value of the leaf SequenceNumber from the Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SequenceNumber is set, it can
// safely use t.GetSequenceNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SequenceNumber == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa) GetSequenceNumber() uint32 {
	if t == nil || t.SequenceNumber == nil {
		return 0
	}
	return *t.SequenceNumber
}

// SetAdvertisingRouter sets the value of the leaf AdvertisingRouter in the Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa) SetAdvertisingRouter(v string) {
	t.AdvertisingRouter = &v
}

// SetAge sets the value of the leaf Age in the Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa) SetAge(v uint16) {
	t.Age = &v
}

// SetAttachedRouter sets the value of the leaf AttachedRouter in the Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa) SetAttachedRouter(v []string) {
	t.AttachedRouter = v
}

// SetLinkStateId sets the value of the leaf LinkStateId in the Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa) SetLinkStateId(v string) {
	t.LinkStateId = &v
}

// SetSequenceNumber sets the value of the leaf SequenceNumber in the Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa) SetSequenceNumber(v uint32) {
	t.SequenceNumber = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa struct, which is a YANG list entry.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LinkStateId == nil {
		return nil, fmt.Errorf("nil value for key LinkStateId")
	}

	return map[string]interface{}{
		"link-state-id": *t.LinkStateId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa.
func (*Ospfv3Router_LinkStateDatabase_LsaStates_NetworkLsa) ΛBelongingModule() string {
	return "open-traffic-generator-ospfv3"
}

// Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa represents the /open-traffic-generator-ospfv3/ospfv3-routers/ospfv3-router/state/link-state-database/lsa-states/nssa-lsa YANG schema element.
type Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa struct {
	AddressPrefix     *string `path:"state/address-prefix" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	AdvertisingRouter *string `path:"state/advertising-router" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	Age               *uint16 `path:"state/age" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	ForwardingAddress *string `path:"state/forwarding-address" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	LinkStateId       *string `path:"state/link-state-id|link-state-id" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3|open-traffic-generator-ospfv3" shadow-path:"link-state-id" shadow-module:"open-traffic-generator-ospfv3"`
	Metric            *uint32 `path:"state/metric" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	PrefixLength      *uint32 `path:"state/prefix-length" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	RouteTag          *string `path:"state/route-tag" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	SequenceNumber    *uint32 `path:"state/sequence-number" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
}

// IsYANGGoStruct ensures that Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa) IsYANGGoStruct() {}

// GetAddressPrefix retrieves the value of the leaf AddressPrefix from the Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AddressPrefix is set, it can
// safely use t.GetAddressPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AddressPrefix == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa) GetAddressPrefix() string {
	if t == nil || t.AddressPrefix == nil {
		return ""
	}
	return *t.AddressPrefix
}

// GetAdvertisingRouter retrieves the value of the leaf AdvertisingRouter from the Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisingRouter is set, it can
// safely use t.GetAdvertisingRouter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisingRouter == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa) GetAdvertisingRouter() string {
	if t == nil || t.AdvertisingRouter == nil {
		return ""
	}
	return *t.AdvertisingRouter
}

// GetAge retrieves the value of the leaf Age from the Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Age is set, it can
// safely use t.GetAge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Age == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa) GetAge() uint16 {
	if t == nil || t.Age == nil {
		return 0
	}
	return *t.Age
}

// GetForwardingAddress retrieves the value of the leaf ForwardingAddress from the Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingAddress is set, it can
// safely use t.GetForwardingAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingAddress == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa) GetForwardingAddress() string {
	if t == nil || t.ForwardingAddress == nil {
		return ""
	}
	return *t.ForwardingAddress
}

// GetLinkStateId retrieves the value of the leaf LinkStateId from the Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkStateId is set, it can
// safely use t.GetLinkStateId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkStateId == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa) GetLinkStateId() string {
	if t == nil || t.LinkStateId == nil {
		return ""
	}
	return *t.LinkStateId
}

// GetMetric retrieves the value of the leaf Metric from the Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// GetRouteTag retrieves the value of the leaf RouteTag from the Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTag is set, it can
// safely use t.GetRouteTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTag == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa) GetRouteTag() string {
	if t == nil || t.RouteTag == nil {
		return ""
	}
	return *t.RouteTag
}

// GetSequenceNumber retrieves the value of the leaf SequenceNumber from the Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SequenceNumber is set, it can
// safely use t.GetSequenceNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SequenceNumber == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa) GetSequenceNumber() uint32 {
	if t == nil || t.SequenceNumber == nil {
		return 0
	}
	return *t.SequenceNumber
}

// SetAddressPrefix sets the value of the leaf AddressPrefix in the Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa) SetAddressPrefix(v string) {
	t.AddressPrefix = &v
}

// SetAdvertisingRouter sets the value of the leaf AdvertisingRouter in the Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa) SetAdvertisingRouter(v string) {
	t.AdvertisingRouter = &v
}

// SetAge sets the value of the leaf Age in the Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa) SetAge(v uint16) {
	t.Age = &v
}

// SetForwardingAddress sets the value of the leaf ForwardingAddress in the Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa) SetForwardingAddress(v string) {
	t.ForwardingAddress = &v
}

// SetLinkStateId sets the value of the leaf LinkStateId in the Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa) SetLinkStateId(v string) {
	t.LinkStateId = &v
}

// SetMetric sets the value of the leaf Metric in the Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa) SetMetric(v uint32) {
	t.Metric = &v
}

// SetPrefixLength sets the value of the leaf PrefixLength in the Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa) SetPrefixLength(v uint32) {
	t.PrefixLength = &v
}

// SetRouteTag sets the value of the leaf RouteTag in the Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa) SetRouteTag(v string) {
	t.RouteTag = &v
}

// SetSequenceNumber sets the value of the leaf SequenceNumber in the Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa) SetSequenceNumber(v uint32) {
	t.SequenceNumber = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa struct, which is a YANG list entry.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LinkStateId == nil {
		return nil, fmt.Errorf("nil value for key LinkStateId")
	}

	return map[string]interface{}{
		"link-state-id": *t.LinkStateId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa.
func (*Ospfv3Router_LinkStateDatabase_LsaStates_NssaLsa) ΛBelongingModule() string {
	return "open-traffic-generator-ospfv3"
}

// Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa represents the /open-traffic-generator-ospfv3/ospfv3-routers/ospfv3-router/state/link-state-database/lsa-states/router-lsa YANG schema element.
type Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa struct {
	AdvertisingRouter *string                                                    `path:"state/advertising-router" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	Age               *uint16                                                    `path:"state/age" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	Link              []*Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa_Link `path:"state/link" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	LinkStateId       *string                                                    `path:"state/link-state-id|link-state-id" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3|open-traffic-generator-ospfv3" shadow-path:"link-state-id" shadow-module:"open-traffic-generator-ospfv3"`
	NeighborRouter    *string                                                    `path:"state/neighbor-router" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	SequenceNumber    *uint32                                                    `path:"state/sequence-number" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
}

// IsYANGGoStruct ensures that Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa) IsYANGGoStruct() {}

// GetAdvertisingRouter retrieves the value of the leaf AdvertisingRouter from the Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisingRouter is set, it can
// safely use t.GetAdvertisingRouter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisingRouter == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa) GetAdvertisingRouter() string {
	if t == nil || t.AdvertisingRouter == nil {
		return ""
	}
	return *t.AdvertisingRouter
}

// GetAge retrieves the value of the leaf Age from the Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Age is set, it can
// safely use t.GetAge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Age == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa) GetAge() uint16 {
	if t == nil || t.Age == nil {
		return 0
	}
	return *t.Age
}

// GetLinkStateId retrieves the value of the leaf LinkStateId from the Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkStateId is set, it can
// safely use t.GetLinkStateId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkStateId == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa) GetLinkStateId() string {
	if t == nil || t.LinkStateId == nil {
		return ""
	}
	return *t.LinkStateId
}

// GetNeighborRouter retrieves the value of the leaf NeighborRouter from the Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NeighborRouter is set, it can
// safely use t.GetNeighborRouter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NeighborRouter == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa) GetNeighborRouter() string {
	if t == nil || t.NeighborRouter == nil {
		return ""
	}
	return *t.NeighborRouter
}

// GetSequenceNumber retrieves the value of the leaf SequenceNumber from the Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SequenceNumber is set, it can
// safely use t.GetSequenceNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SequenceNumber == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa) GetSequenceNumber() uint32 {
	if t == nil || t.SequenceNumber == nil {
		return 0
	}
	return *t.SequenceNumber
}

// SetAdvertisingRouter sets the value of the leaf AdvertisingRouter in the Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa) SetAdvertisingRouter(v string) {
	t.AdvertisingRouter = &v
}

// SetAge sets the value of the leaf Age in the Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa) SetAge(v uint16) {
	t.Age = &v
}

// SetLinkStateId sets the value of the leaf LinkStateId in the Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa) SetLinkStateId(v string) {
	t.LinkStateId = &v
}

// SetNeighborRouter sets the value of the leaf NeighborRouter in the Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa) SetNeighborRouter(v string) {
	t.NeighborRouter = &v
}

// SetSequenceNumber sets the value of the leaf SequenceNumber in the Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa) SetSequenceNumber(v uint32) {
	t.SequenceNumber = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Link {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa struct, which is a YANG list entry.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LinkStateId == nil {
		return nil, fmt.Errorf("nil value for key LinkStateId")
	}

	return map[string]interface{}{
		"link-state-id": *t.LinkStateId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa.
func (*Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa) ΛBelongingModule() string {
	return "open-traffic-generator-ospfv3"
}

// Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa_Link represents the /open-traffic-generator-ospfv3/ospfv3-routers/ospfv3-router/state/link-state-database/lsa-states/router-lsa/state/link YANG schema element.
type Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa_Link struct {
	Metric *uint16      `path:"metric" module:"open-traffic-generator-ospfv3"`
	Type   E_State_Type `path:"type" module:"open-traffic-generator-ospfv3"`
}

// IsYANGGoStruct ensures that Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa_Link implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa_Link) IsYANGGoStruct() {}

// GetMetric retrieves the value of the leaf Metric from the Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa_Link
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa_Link) GetMetric() uint16 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetType retrieves the value of the leaf Type from the Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa_Link
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa_Link) GetType() E_State_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// SetMetric sets the value of the leaf Metric in the Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa_Link
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa_Link) SetMetric(v uint16) {
	t.Metric = &v
}

// SetType sets the value of the leaf Type in the Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa_Link
// struct.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa_Link) SetType(v E_State_Type) {
	t.Type = v
}

// PopulateDefaults recursively populates unset leaf fields in the Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa_Link
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa_Link) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa_Link) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa_Link"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa_Link) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa_Link) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa_Link.
func (*Ospfv3Router_LinkStateDatabase_LsaStates_RouterLsa_Link) ΛBelongingModule() string {
	return "open-traffic-generator-ospfv3"
}

// Port represents the /open-traffic-generator-port/ports/port YANG schema element.
type Port struct {
	Counters   *Port_Counters `path:"state/counters" module:"open-traffic-generator-port/open-traffic-generator-port"`
	InRate     Binary         `path:"state/in-rate" module:"open-traffic-generator-port/open-traffic-generator-port"`
	LastChange *uint64        `path:"state/last-change" module:"open-traffic-generator-port/open-traffic-generator-port"`
	Link       E_Port_Link    `path:"state/link" module:"open-traffic-generator-port/open-traffic-generator-port"`
	Name       *string        `path:"state/name|name" module:"open-traffic-generator-port/open-traffic-generator-port|open-traffic-generator-port" shadow-path:"name" shadow-module:"open-traffic-generator-port"`
	OutRate    Binary         `path:"state/out-rate" module:"open-traffic-generator-port/open-traffic-generator-port"`
}

// IsYANGGoStruct ensures that Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Port) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Port) GetOrCreateCounters() *Port_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Port_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from Port. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Port) GetCounters() *Port_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetInRate retrieves the value of the leaf InRate from the Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InRate is set, it can
// safely use t.GetInRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InRate == nil' before retrieving the leaf's value.
func (t *Port) GetInRate() Binary {
	if t == nil || t.InRate == nil {
		return nil
	}
	return t.InRate
}

// GetLastChange retrieves the value of the leaf LastChange from the Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastChange is set, it can
// safely use t.GetLastChange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastChange == nil' before retrieving the leaf's value.
func (t *Port) GetLastChange() uint64 {
	if t == nil || t.LastChange == nil {
		return 0
	}
	return *t.LastChange
}

// GetLink retrieves the value of the leaf Link from the Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Link is set, it can
// safely use t.GetLink() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Link == nil' before retrieving the leaf's value.
func (t *Port) GetLink() E_Port_Link {
	if t == nil || t.Link == 0 {
		return 0
	}
	return t.Link
}

// GetName retrieves the value of the leaf Name from the Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Port) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOutRate retrieves the value of the leaf OutRate from the Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutRate is set, it can
// safely use t.GetOutRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutRate == nil' before retrieving the leaf's value.
func (t *Port) GetOutRate() Binary {
	if t == nil || t.OutRate == nil {
		return nil
	}
	return t.OutRate
}

// SetInRate sets the value of the leaf InRate in the Port
// struct.
func (t *Port) SetInRate(v Binary) {
	t.InRate = v
}

// SetLastChange sets the value of the leaf LastChange in the Port
// struct.
func (t *Port) SetLastChange(v uint64) {
	t.LastChange = &v
}

// SetLink sets the value of the leaf Link in the Port
// struct.
func (t *Port) SetLink(v E_Port_Link) {
	t.Link = v
}

// SetName sets the value of the leaf Name in the Port
// struct.
func (t *Port) SetName(v string) {
	t.Name = &v
}

// SetOutRate sets the value of the leaf OutRate in the Port
// struct.
func (t *Port) SetOutRate(v Binary) {
	t.OutRate = v
}

// PopulateDefaults recursively populates unset leaf fields in the Port
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Port) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Counters.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the Port struct, which is a YANG list entry.
func (t *Port) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Port) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Port) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Port) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Port.
func (*Port) ΛBelongingModule() string {
	return "open-traffic-generator-port"
}

// Port_Counters represents the /open-traffic-generator-port/ports/port/state/counters YANG schema element.
type Port_Counters struct {
	InFrames  *uint64 `path:"in-frames" module:"open-traffic-generator-port"`
	InOctets  *uint64 `path:"in-octets" module:"open-traffic-generator-port"`
	OutFrames *uint64 `path:"out-frames" module:"open-traffic-generator-port"`
	OutOctets *uint64 `path:"out-octets" module:"open-traffic-generator-port"`
}

// IsYANGGoStruct ensures that Port_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Port_Counters) IsYANGGoStruct() {}

// GetInFrames retrieves the value of the leaf InFrames from the Port_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InFrames is set, it can
// safely use t.GetInFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InFrames == nil' before retrieving the leaf's value.
func (t *Port_Counters) GetInFrames() uint64 {
	if t == nil || t.InFrames == nil {
		return 0
	}
	return *t.InFrames
}

// GetInOctets retrieves the value of the leaf InOctets from the Port_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InOctets is set, it can
// safely use t.GetInOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InOctets == nil' before retrieving the leaf's value.
func (t *Port_Counters) GetInOctets() uint64 {
	if t == nil || t.InOctets == nil {
		return 0
	}
	return *t.InOctets
}

// GetOutFrames retrieves the value of the leaf OutFrames from the Port_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutFrames is set, it can
// safely use t.GetOutFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutFrames == nil' before retrieving the leaf's value.
func (t *Port_Counters) GetOutFrames() uint64 {
	if t == nil || t.OutFrames == nil {
		return 0
	}
	return *t.OutFrames
}

// GetOutOctets retrieves the value of the leaf OutOctets from the Port_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutOctets is set, it can
// safely use t.GetOutOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutOctets == nil' before retrieving the leaf's value.
func (t *Port_Counters) GetOutOctets() uint64 {
	if t == nil || t.OutOctets == nil {
		return 0
	}
	return *t.OutOctets
}

// SetInFrames sets the value of the leaf InFrames in the Port_Counters
// struct.
func (t *Port_Counters) SetInFrames(v uint64) {
	t.InFrames = &v
}

// SetInOctets sets the value of the leaf InOctets in the Port_Counters
// struct.
func (t *Port_Counters) SetInOctets(v uint64) {
	t.InOctets = &v
}

// SetOutFrames sets the value of the leaf OutFrames in the Port_Counters
// struct.
func (t *Port_Counters) SetOutFrames(v uint64) {
	t.OutFrames = &v
}

// SetOutOctets sets the value of the leaf OutOctets in the Port_Counters
// struct.
func (t *Port_Counters) SetOutOctets(v uint64) {
	t.OutOctets = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Port_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Port_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Port_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Port_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Port_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Port_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Port_Counters.
func (*Port_Counters) ΛBelongingModule() string {
	return "open-traffic-generator-port"
}

// Root represents the /root YANG schema element.
type Root struct {
	BgpPeer       map[string]*BgpPeer             `path:"bgp-peers/bgp-peer" module:"open-traffic-generator-bgp/open-traffic-generator-bgp"`
	Component     map[E_Component_Name]*Component `path:"components/component" module:"open-traffic-generator-platform/open-traffic-generator-platform"`
	Dhcpv4Client  map[string]*Dhcpv4Client        `path:"dhcpv4-clients/dhcpv4-client" module:"open-traffic-generator-dhcpv4client/open-traffic-generator-dhcpv4client"`
	Dhcpv4Server  map[string]*Dhcpv4Server        `path:"dhcpv4-servers/dhcpv4-server" module:"open-traffic-generator-dhcpv4server/open-traffic-generator-dhcpv4server"`
	Dhcpv6Client  map[string]*Dhcpv6Client        `path:"dhcpv6-clients/dhcpv6-client" module:"open-traffic-generator-dhcpv6client/open-traffic-generator-dhcpv6client"`
	Dhcpv6Server  map[string]*Dhcpv6Server        `path:"dhcpv6-servers/dhcpv6-server" module:"open-traffic-generator-dhcpv6server/open-traffic-generator-dhcpv6server"`
	Flow          map[string]*Flow                `path:"flows/flow" module:"open-traffic-generator-flow/open-traffic-generator-flow"`
	Interface     map[string]*Interface           `path:"interfaces/interface" module:"open-traffic-generator-discovery/open-traffic-generator-discovery"`
	IsisRouter    map[string]*IsisRouter          `path:"isis-routers/isis-router" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	Lacp          *Lacp                           `path:"lacp" module:"open-traffic-generator-lacp"`
	Lag           map[string]*Lag                 `path:"lags/lag" module:"open-traffic-generator-lag/open-traffic-generator-lag"`
	LldpInterface map[string]*LldpInterface       `path:"lldps/lldp-interface" module:"open-traffic-generator-lldp/open-traffic-generator-lldp"`
	Ospfv2Router  map[string]*Ospfv2Router        `path:"ospfv2-routers/ospfv2-router" module:"open-traffic-generator-ospfv2/open-traffic-generator-ospfv2"`
	Ospfv3Router  map[string]*Ospfv3Router        `path:"ospfv3-routers/ospfv3-router" module:"open-traffic-generator-ospfv3/open-traffic-generator-ospfv3"`
	Port          map[string]*Port                `path:"ports/port" module:"open-traffic-generator-port/open-traffic-generator-port"`
	RsvpteRouter  map[string]*RsvpteRouter        `path:"rsvpte-routers/rsvpte-router" module:"open-traffic-generator-rsvp/open-traffic-generator-rsvp"`
}

// IsYANGGoStruct ensures that Root implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Root) IsYANGGoStruct() {}

// NewBgpPeer creates a new entry in the BgpPeer list of the
// Root struct. The keys of the list are populated from the input
// arguments.
func (t *Root) NewBgpPeer(Name string) (*BgpPeer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BgpPeer == nil {
		t.BgpPeer = make(map[string]*BgpPeer)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BgpPeer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BgpPeer", key)
	}

	t.BgpPeer[key] = &BgpPeer{
		Name: &Name,
	}

	return t.BgpPeer[key], nil
}

// RenameBgpPeer renames an entry in the list BgpPeer within
// the Root struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Root) RenameBgpPeer(oldK, newK string) error {
	if _, ok := t.BgpPeer[newK]; ok {
		return fmt.Errorf("key %v already exists in BgpPeer", newK)
	}

	e, ok := t.BgpPeer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BgpPeer", oldK)
	}
	e.Name = &newK

	t.BgpPeer[newK] = e
	delete(t.BgpPeer, oldK)
	return nil
}

// GetOrCreateBgpPeerMap returns the list (map) from Root.
//
// It initializes the field if not already initialized.
func (t *Root) GetOrCreateBgpPeerMap() map[string]*BgpPeer {
	if t.BgpPeer == nil {
		t.BgpPeer = make(map[string]*BgpPeer)
	}
	return t.BgpPeer
}

// GetOrCreateBgpPeer retrieves the value with the specified keys from
// the receiver Root. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Root) GetOrCreateBgpPeer(Name string) *BgpPeer {

	key := Name

	if v, ok := t.BgpPeer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBgpPeer(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBgpPeer got unexpected error: %v", err))
	}
	return v
}

// GetBgpPeer retrieves the value with the specified key from
// the BgpPeer map field of Root. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Root) GetBgpPeer(Name string) *BgpPeer {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.BgpPeer[key]; ok {
		return lm
	}
	return nil
}

// DeleteBgpPeer deletes the value with the specified keys from
// the receiver Root. If there is no such element, the function
// is a no-op.
func (t *Root) DeleteBgpPeer(Name string) {
	key := Name

	delete(t.BgpPeer, key)
}

// AppendBgpPeer appends the supplied BgpPeer struct to the
// list BgpPeer of Root. If the key value(s) specified in
// the supplied BgpPeer already exist in the list, an error is
// returned.
func (t *Root) AppendBgpPeer(v *BgpPeer) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BgpPeer == nil {
		t.BgpPeer = make(map[string]*BgpPeer)
	}

	if _, ok := t.BgpPeer[key]; ok {
		return fmt.Errorf("duplicate key for list BgpPeer %v", key)
	}

	t.BgpPeer[key] = v
	return nil
}

// NewComponent creates a new entry in the Component list of the
// Root struct. The keys of the list are populated from the input
// arguments.
func (t *Root) NewComponent(Name E_Component_Name) (*Component, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Component == nil {
		t.Component = make(map[E_Component_Name]*Component)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Component[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Component", key)
	}

	t.Component[key] = &Component{
		Name: Name,
	}

	return t.Component[key], nil
}

// RenameComponent renames an entry in the list Component within
// the Root struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Root) RenameComponent(oldK, newK E_Component_Name) error {
	if _, ok := t.Component[newK]; ok {
		return fmt.Errorf("key %v already exists in Component", newK)
	}

	e, ok := t.Component[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Component", oldK)
	}
	e.Name = newK

	t.Component[newK] = e
	delete(t.Component, oldK)
	return nil
}

// GetOrCreateComponentMap returns the list (map) from Root.
//
// It initializes the field if not already initialized.
func (t *Root) GetOrCreateComponentMap() map[E_Component_Name]*Component {
	if t.Component == nil {
		t.Component = make(map[E_Component_Name]*Component)
	}
	return t.Component
}

// GetOrCreateComponent retrieves the value with the specified keys from
// the receiver Root. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Root) GetOrCreateComponent(Name E_Component_Name) *Component {

	key := Name

	if v, ok := t.Component[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewComponent(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateComponent got unexpected error: %v", err))
	}
	return v
}

// GetComponent retrieves the value with the specified key from
// the Component map field of Root. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Root) GetComponent(Name E_Component_Name) *Component {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Component[key]; ok {
		return lm
	}
	return nil
}

// DeleteComponent deletes the value with the specified keys from
// the receiver Root. If there is no such element, the function
// is a no-op.
func (t *Root) DeleteComponent(Name E_Component_Name) {
	key := Name

	delete(t.Component, key)
}

// AppendComponent appends the supplied Component struct to the
// list Component of Root. If the key value(s) specified in
// the supplied Component already exist in the list, an error is
// returned.
func (t *Root) AppendComponent(v *Component) error {
	key := v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Component == nil {
		t.Component = make(map[E_Component_Name]*Component)
	}

	if _, ok := t.Component[key]; ok {
		return fmt.Errorf("duplicate key for list Component %v", key)
	}

	t.Component[key] = v
	return nil
}

// NewDhcpv4Client creates a new entry in the Dhcpv4Client list of the
// Root struct. The keys of the list are populated from the input
// arguments.
func (t *Root) NewDhcpv4Client(Name string) (*Dhcpv4Client, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dhcpv4Client == nil {
		t.Dhcpv4Client = make(map[string]*Dhcpv4Client)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dhcpv4Client[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dhcpv4Client", key)
	}

	t.Dhcpv4Client[key] = &Dhcpv4Client{
		Name: &Name,
	}

	return t.Dhcpv4Client[key], nil
}

// RenameDhcpv4Client renames an entry in the list Dhcpv4Client within
// the Root struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Root) RenameDhcpv4Client(oldK, newK string) error {
	if _, ok := t.Dhcpv4Client[newK]; ok {
		return fmt.Errorf("key %v already exists in Dhcpv4Client", newK)
	}

	e, ok := t.Dhcpv4Client[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dhcpv4Client", oldK)
	}
	e.Name = &newK

	t.Dhcpv4Client[newK] = e
	delete(t.Dhcpv4Client, oldK)
	return nil
}

// GetOrCreateDhcpv4ClientMap returns the list (map) from Root.
//
// It initializes the field if not already initialized.
func (t *Root) GetOrCreateDhcpv4ClientMap() map[string]*Dhcpv4Client {
	if t.Dhcpv4Client == nil {
		t.Dhcpv4Client = make(map[string]*Dhcpv4Client)
	}
	return t.Dhcpv4Client
}

// GetOrCreateDhcpv4Client retrieves the value with the specified keys from
// the receiver Root. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Root) GetOrCreateDhcpv4Client(Name string) *Dhcpv4Client {

	key := Name

	if v, ok := t.Dhcpv4Client[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDhcpv4Client(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDhcpv4Client got unexpected error: %v", err))
	}
	return v
}

// GetDhcpv4Client retrieves the value with the specified key from
// the Dhcpv4Client map field of Root. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Root) GetDhcpv4Client(Name string) *Dhcpv4Client {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Dhcpv4Client[key]; ok {
		return lm
	}
	return nil
}

// DeleteDhcpv4Client deletes the value with the specified keys from
// the receiver Root. If there is no such element, the function
// is a no-op.
func (t *Root) DeleteDhcpv4Client(Name string) {
	key := Name

	delete(t.Dhcpv4Client, key)
}

// AppendDhcpv4Client appends the supplied Dhcpv4Client struct to the
// list Dhcpv4Client of Root. If the key value(s) specified in
// the supplied Dhcpv4Client already exist in the list, an error is
// returned.
func (t *Root) AppendDhcpv4Client(v *Dhcpv4Client) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dhcpv4Client == nil {
		t.Dhcpv4Client = make(map[string]*Dhcpv4Client)
	}

	if _, ok := t.Dhcpv4Client[key]; ok {
		return fmt.Errorf("duplicate key for list Dhcpv4Client %v", key)
	}

	t.Dhcpv4Client[key] = v
	return nil
}

// NewDhcpv4Server creates a new entry in the Dhcpv4Server list of the
// Root struct. The keys of the list are populated from the input
// arguments.
func (t *Root) NewDhcpv4Server(Name string) (*Dhcpv4Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dhcpv4Server == nil {
		t.Dhcpv4Server = make(map[string]*Dhcpv4Server)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dhcpv4Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dhcpv4Server", key)
	}

	t.Dhcpv4Server[key] = &Dhcpv4Server{
		Name: &Name,
	}

	return t.Dhcpv4Server[key], nil
}

// RenameDhcpv4Server renames an entry in the list Dhcpv4Server within
// the Root struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Root) RenameDhcpv4Server(oldK, newK string) error {
	if _, ok := t.Dhcpv4Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Dhcpv4Server", newK)
	}

	e, ok := t.Dhcpv4Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dhcpv4Server", oldK)
	}
	e.Name = &newK

	t.Dhcpv4Server[newK] = e
	delete(t.Dhcpv4Server, oldK)
	return nil
}

// GetOrCreateDhcpv4ServerMap returns the list (map) from Root.
//
// It initializes the field if not already initialized.
func (t *Root) GetOrCreateDhcpv4ServerMap() map[string]*Dhcpv4Server {
	if t.Dhcpv4Server == nil {
		t.Dhcpv4Server = make(map[string]*Dhcpv4Server)
	}
	return t.Dhcpv4Server
}

// GetOrCreateDhcpv4Server retrieves the value with the specified keys from
// the receiver Root. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Root) GetOrCreateDhcpv4Server(Name string) *Dhcpv4Server {

	key := Name

	if v, ok := t.Dhcpv4Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDhcpv4Server(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDhcpv4Server got unexpected error: %v", err))
	}
	return v
}

// GetDhcpv4Server retrieves the value with the specified key from
// the Dhcpv4Server map field of Root. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Root) GetDhcpv4Server(Name string) *Dhcpv4Server {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Dhcpv4Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteDhcpv4Server deletes the value with the specified keys from
// the receiver Root. If there is no such element, the function
// is a no-op.
func (t *Root) DeleteDhcpv4Server(Name string) {
	key := Name

	delete(t.Dhcpv4Server, key)
}

// AppendDhcpv4Server appends the supplied Dhcpv4Server struct to the
// list Dhcpv4Server of Root. If the key value(s) specified in
// the supplied Dhcpv4Server already exist in the list, an error is
// returned.
func (t *Root) AppendDhcpv4Server(v *Dhcpv4Server) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dhcpv4Server == nil {
		t.Dhcpv4Server = make(map[string]*Dhcpv4Server)
	}

	if _, ok := t.Dhcpv4Server[key]; ok {
		return fmt.Errorf("duplicate key for list Dhcpv4Server %v", key)
	}

	t.Dhcpv4Server[key] = v
	return nil
}

// NewDhcpv6Client creates a new entry in the Dhcpv6Client list of the
// Root struct. The keys of the list are populated from the input
// arguments.
func (t *Root) NewDhcpv6Client(Name string) (*Dhcpv6Client, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dhcpv6Client == nil {
		t.Dhcpv6Client = make(map[string]*Dhcpv6Client)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dhcpv6Client[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dhcpv6Client", key)
	}

	t.Dhcpv6Client[key] = &Dhcpv6Client{
		Name: &Name,
	}

	return t.Dhcpv6Client[key], nil
}

// RenameDhcpv6Client renames an entry in the list Dhcpv6Client within
// the Root struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Root) RenameDhcpv6Client(oldK, newK string) error {
	if _, ok := t.Dhcpv6Client[newK]; ok {
		return fmt.Errorf("key %v already exists in Dhcpv6Client", newK)
	}

	e, ok := t.Dhcpv6Client[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dhcpv6Client", oldK)
	}
	e.Name = &newK

	t.Dhcpv6Client[newK] = e
	delete(t.Dhcpv6Client, oldK)
	return nil
}

// GetOrCreateDhcpv6ClientMap returns the list (map) from Root.
//
// It initializes the field if not already initialized.
func (t *Root) GetOrCreateDhcpv6ClientMap() map[string]*Dhcpv6Client {
	if t.Dhcpv6Client == nil {
		t.Dhcpv6Client = make(map[string]*Dhcpv6Client)
	}
	return t.Dhcpv6Client
}

// GetOrCreateDhcpv6Client retrieves the value with the specified keys from
// the receiver Root. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Root) GetOrCreateDhcpv6Client(Name string) *Dhcpv6Client {

	key := Name

	if v, ok := t.Dhcpv6Client[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDhcpv6Client(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDhcpv6Client got unexpected error: %v", err))
	}
	return v
}

// GetDhcpv6Client retrieves the value with the specified key from
// the Dhcpv6Client map field of Root. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Root) GetDhcpv6Client(Name string) *Dhcpv6Client {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Dhcpv6Client[key]; ok {
		return lm
	}
	return nil
}

// DeleteDhcpv6Client deletes the value with the specified keys from
// the receiver Root. If there is no such element, the function
// is a no-op.
func (t *Root) DeleteDhcpv6Client(Name string) {
	key := Name

	delete(t.Dhcpv6Client, key)
}

// AppendDhcpv6Client appends the supplied Dhcpv6Client struct to the
// list Dhcpv6Client of Root. If the key value(s) specified in
// the supplied Dhcpv6Client already exist in the list, an error is
// returned.
func (t *Root) AppendDhcpv6Client(v *Dhcpv6Client) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dhcpv6Client == nil {
		t.Dhcpv6Client = make(map[string]*Dhcpv6Client)
	}

	if _, ok := t.Dhcpv6Client[key]; ok {
		return fmt.Errorf("duplicate key for list Dhcpv6Client %v", key)
	}

	t.Dhcpv6Client[key] = v
	return nil
}

// NewDhcpv6Server creates a new entry in the Dhcpv6Server list of the
// Root struct. The keys of the list are populated from the input
// arguments.
func (t *Root) NewDhcpv6Server(Name string) (*Dhcpv6Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dhcpv6Server == nil {
		t.Dhcpv6Server = make(map[string]*Dhcpv6Server)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dhcpv6Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dhcpv6Server", key)
	}

	t.Dhcpv6Server[key] = &Dhcpv6Server{
		Name: &Name,
	}

	return t.Dhcpv6Server[key], nil
}

// RenameDhcpv6Server renames an entry in the list Dhcpv6Server within
// the Root struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Root) RenameDhcpv6Server(oldK, newK string) error {
	if _, ok := t.Dhcpv6Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Dhcpv6Server", newK)
	}

	e, ok := t.Dhcpv6Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dhcpv6Server", oldK)
	}
	e.Name = &newK

	t.Dhcpv6Server[newK] = e
	delete(t.Dhcpv6Server, oldK)
	return nil
}

// GetOrCreateDhcpv6ServerMap returns the list (map) from Root.
//
// It initializes the field if not already initialized.
func (t *Root) GetOrCreateDhcpv6ServerMap() map[string]*Dhcpv6Server {
	if t.Dhcpv6Server == nil {
		t.Dhcpv6Server = make(map[string]*Dhcpv6Server)
	}
	return t.Dhcpv6Server
}

// GetOrCreateDhcpv6Server retrieves the value with the specified keys from
// the receiver Root. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Root) GetOrCreateDhcpv6Server(Name string) *Dhcpv6Server {

	key := Name

	if v, ok := t.Dhcpv6Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDhcpv6Server(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDhcpv6Server got unexpected error: %v", err))
	}
	return v
}

// GetDhcpv6Server retrieves the value with the specified key from
// the Dhcpv6Server map field of Root. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Root) GetDhcpv6Server(Name string) *Dhcpv6Server {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Dhcpv6Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteDhcpv6Server deletes the value with the specified keys from
// the receiver Root. If there is no such element, the function
// is a no-op.
func (t *Root) DeleteDhcpv6Server(Name string) {
	key := Name

	delete(t.Dhcpv6Server, key)
}

// AppendDhcpv6Server appends the supplied Dhcpv6Server struct to the
// list Dhcpv6Server of Root. If the key value(s) specified in
// the supplied Dhcpv6Server already exist in the list, an error is
// returned.
func (t *Root) AppendDhcpv6Server(v *Dhcpv6Server) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dhcpv6Server == nil {
		t.Dhcpv6Server = make(map[string]*Dhcpv6Server)
	}

	if _, ok := t.Dhcpv6Server[key]; ok {
		return fmt.Errorf("duplicate key for list Dhcpv6Server %v", key)
	}

	t.Dhcpv6Server[key] = v
	return nil
}

// NewFlow creates a new entry in the Flow list of the
// Root struct. The keys of the list are populated from the input
// arguments.
func (t *Root) NewFlow(Name string) (*Flow, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Flow == nil {
		t.Flow = make(map[string]*Flow)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Flow[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Flow", key)
	}

	t.Flow[key] = &Flow{
		Name: &Name,
	}

	return t.Flow[key], nil
}

// RenameFlow renames an entry in the list Flow within
// the Root struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Root) RenameFlow(oldK, newK string) error {
	if _, ok := t.Flow[newK]; ok {
		return fmt.Errorf("key %v already exists in Flow", newK)
	}

	e, ok := t.Flow[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Flow", oldK)
	}
	e.Name = &newK

	t.Flow[newK] = e
	delete(t.Flow, oldK)
	return nil
}

// GetOrCreateFlowMap returns the list (map) from Root.
//
// It initializes the field if not already initialized.
func (t *Root) GetOrCreateFlowMap() map[string]*Flow {
	if t.Flow == nil {
		t.Flow = make(map[string]*Flow)
	}
	return t.Flow
}

// GetOrCreateFlow retrieves the value with the specified keys from
// the receiver Root. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Root) GetOrCreateFlow(Name string) *Flow {

	key := Name

	if v, ok := t.Flow[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFlow(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFlow got unexpected error: %v", err))
	}
	return v
}

// GetFlow retrieves the value with the specified key from
// the Flow map field of Root. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Root) GetFlow(Name string) *Flow {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Flow[key]; ok {
		return lm
	}
	return nil
}

// DeleteFlow deletes the value with the specified keys from
// the receiver Root. If there is no such element, the function
// is a no-op.
func (t *Root) DeleteFlow(Name string) {
	key := Name

	delete(t.Flow, key)
}

// AppendFlow appends the supplied Flow struct to the
// list Flow of Root. If the key value(s) specified in
// the supplied Flow already exist in the list, an error is
// returned.
func (t *Root) AppendFlow(v *Flow) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Flow == nil {
		t.Flow = make(map[string]*Flow)
	}

	if _, ok := t.Flow[key]; ok {
		return fmt.Errorf("duplicate key for list Flow %v", key)
	}

	t.Flow[key] = v
	return nil
}

// NewInterface creates a new entry in the Interface list of the
// Root struct. The keys of the list are populated from the input
// arguments.
func (t *Root) NewInterface(Name string) (*Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the Root struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Root) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Name = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterfaceMap returns the list (map) from Root.
//
// It initializes the field if not already initialized.
func (t *Root) GetOrCreateInterfaceMap() map[string]*Interface {
	if t.Interface == nil {
		t.Interface = make(map[string]*Interface)
	}
	return t.Interface
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver Root. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Root) GetOrCreateInterface(Name string) *Interface {

	key := Name

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of Root. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Root) GetInterface(Name string) *Interface {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver Root. If there is no such element, the function
// is a no-op.
func (t *Root) DeleteInterface(Name string) {
	key := Name

	delete(t.Interface, key)
}

// AppendInterface appends the supplied Interface struct to the
// list Interface of Root. If the key value(s) specified in
// the supplied Interface already exist in the list, an error is
// returned.
func (t *Root) AppendInterface(v *Interface) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewIsisRouter creates a new entry in the IsisRouter list of the
// Root struct. The keys of the list are populated from the input
// arguments.
func (t *Root) NewIsisRouter(Name string) (*IsisRouter, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IsisRouter == nil {
		t.IsisRouter = make(map[string]*IsisRouter)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IsisRouter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IsisRouter", key)
	}

	t.IsisRouter[key] = &IsisRouter{
		Name: &Name,
	}

	return t.IsisRouter[key], nil
}

// RenameIsisRouter renames an entry in the list IsisRouter within
// the Root struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Root) RenameIsisRouter(oldK, newK string) error {
	if _, ok := t.IsisRouter[newK]; ok {
		return fmt.Errorf("key %v already exists in IsisRouter", newK)
	}

	e, ok := t.IsisRouter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IsisRouter", oldK)
	}
	e.Name = &newK

	t.IsisRouter[newK] = e
	delete(t.IsisRouter, oldK)
	return nil
}

// GetOrCreateIsisRouterMap returns the list (map) from Root.
//
// It initializes the field if not already initialized.
func (t *Root) GetOrCreateIsisRouterMap() map[string]*IsisRouter {
	if t.IsisRouter == nil {
		t.IsisRouter = make(map[string]*IsisRouter)
	}
	return t.IsisRouter
}

// GetOrCreateIsisRouter retrieves the value with the specified keys from
// the receiver Root. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Root) GetOrCreateIsisRouter(Name string) *IsisRouter {

	key := Name

	if v, ok := t.IsisRouter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIsisRouter(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIsisRouter got unexpected error: %v", err))
	}
	return v
}

// GetIsisRouter retrieves the value with the specified key from
// the IsisRouter map field of Root. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Root) GetIsisRouter(Name string) *IsisRouter {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.IsisRouter[key]; ok {
		return lm
	}
	return nil
}

// DeleteIsisRouter deletes the value with the specified keys from
// the receiver Root. If there is no such element, the function
// is a no-op.
func (t *Root) DeleteIsisRouter(Name string) {
	key := Name

	delete(t.IsisRouter, key)
}

// AppendIsisRouter appends the supplied IsisRouter struct to the
// list IsisRouter of Root. If the key value(s) specified in
// the supplied IsisRouter already exist in the list, an error is
// returned.
func (t *Root) AppendIsisRouter(v *IsisRouter) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IsisRouter == nil {
		t.IsisRouter = make(map[string]*IsisRouter)
	}

	if _, ok := t.IsisRouter[key]; ok {
		return fmt.Errorf("duplicate key for list IsisRouter %v", key)
	}

	t.IsisRouter[key] = v
	return nil
}

// NewLag creates a new entry in the Lag list of the
// Root struct. The keys of the list are populated from the input
// arguments.
func (t *Root) NewLag(Name string) (*Lag, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lag == nil {
		t.Lag = make(map[string]*Lag)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Lag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Lag", key)
	}

	t.Lag[key] = &Lag{
		Name: &Name,
	}

	return t.Lag[key], nil
}

// RenameLag renames an entry in the list Lag within
// the Root struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Root) RenameLag(oldK, newK string) error {
	if _, ok := t.Lag[newK]; ok {
		return fmt.Errorf("key %v already exists in Lag", newK)
	}

	e, ok := t.Lag[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Lag", oldK)
	}
	e.Name = &newK

	t.Lag[newK] = e
	delete(t.Lag, oldK)
	return nil
}

// GetOrCreateLagMap returns the list (map) from Root.
//
// It initializes the field if not already initialized.
func (t *Root) GetOrCreateLagMap() map[string]*Lag {
	if t.Lag == nil {
		t.Lag = make(map[string]*Lag)
	}
	return t.Lag
}

// GetOrCreateLag retrieves the value with the specified keys from
// the receiver Root. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Root) GetOrCreateLag(Name string) *Lag {

	key := Name

	if v, ok := t.Lag[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLag(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLag got unexpected error: %v", err))
	}
	return v
}

// GetLag retrieves the value with the specified key from
// the Lag map field of Root. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Root) GetLag(Name string) *Lag {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Lag[key]; ok {
		return lm
	}
	return nil
}

// DeleteLag deletes the value with the specified keys from
// the receiver Root. If there is no such element, the function
// is a no-op.
func (t *Root) DeleteLag(Name string) {
	key := Name

	delete(t.Lag, key)
}

// AppendLag appends the supplied Lag struct to the
// list Lag of Root. If the key value(s) specified in
// the supplied Lag already exist in the list, an error is
// returned.
func (t *Root) AppendLag(v *Lag) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lag == nil {
		t.Lag = make(map[string]*Lag)
	}

	if _, ok := t.Lag[key]; ok {
		return fmt.Errorf("duplicate key for list Lag %v", key)
	}

	t.Lag[key] = v
	return nil
}

// NewLldpInterface creates a new entry in the LldpInterface list of the
// Root struct. The keys of the list are populated from the input
// arguments.
func (t *Root) NewLldpInterface(Name string) (*LldpInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LldpInterface == nil {
		t.LldpInterface = make(map[string]*LldpInterface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LldpInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LldpInterface", key)
	}

	t.LldpInterface[key] = &LldpInterface{
		Name: &Name,
	}

	return t.LldpInterface[key], nil
}

// RenameLldpInterface renames an entry in the list LldpInterface within
// the Root struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Root) RenameLldpInterface(oldK, newK string) error {
	if _, ok := t.LldpInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in LldpInterface", newK)
	}

	e, ok := t.LldpInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LldpInterface", oldK)
	}
	e.Name = &newK

	t.LldpInterface[newK] = e
	delete(t.LldpInterface, oldK)
	return nil
}

// GetOrCreateLldpInterfaceMap returns the list (map) from Root.
//
// It initializes the field if not already initialized.
func (t *Root) GetOrCreateLldpInterfaceMap() map[string]*LldpInterface {
	if t.LldpInterface == nil {
		t.LldpInterface = make(map[string]*LldpInterface)
	}
	return t.LldpInterface
}

// GetOrCreateLldpInterface retrieves the value with the specified keys from
// the receiver Root. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Root) GetOrCreateLldpInterface(Name string) *LldpInterface {

	key := Name

	if v, ok := t.LldpInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLldpInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLldpInterface got unexpected error: %v", err))
	}
	return v
}

// GetLldpInterface retrieves the value with the specified key from
// the LldpInterface map field of Root. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Root) GetLldpInterface(Name string) *LldpInterface {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.LldpInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteLldpInterface deletes the value with the specified keys from
// the receiver Root. If there is no such element, the function
// is a no-op.
func (t *Root) DeleteLldpInterface(Name string) {
	key := Name

	delete(t.LldpInterface, key)
}

// AppendLldpInterface appends the supplied LldpInterface struct to the
// list LldpInterface of Root. If the key value(s) specified in
// the supplied LldpInterface already exist in the list, an error is
// returned.
func (t *Root) AppendLldpInterface(v *LldpInterface) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LldpInterface == nil {
		t.LldpInterface = make(map[string]*LldpInterface)
	}

	if _, ok := t.LldpInterface[key]; ok {
		return fmt.Errorf("duplicate key for list LldpInterface %v", key)
	}

	t.LldpInterface[key] = v
	return nil
}

// NewOspfv2Router creates a new entry in the Ospfv2Router list of the
// Root struct. The keys of the list are populated from the input
// arguments.
func (t *Root) NewOspfv2Router(Name string) (*Ospfv2Router, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ospfv2Router == nil {
		t.Ospfv2Router = make(map[string]*Ospfv2Router)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ospfv2Router[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ospfv2Router", key)
	}

	t.Ospfv2Router[key] = &Ospfv2Router{
		Name: &Name,
	}

	return t.Ospfv2Router[key], nil
}

// RenameOspfv2Router renames an entry in the list Ospfv2Router within
// the Root struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Root) RenameOspfv2Router(oldK, newK string) error {
	if _, ok := t.Ospfv2Router[newK]; ok {
		return fmt.Errorf("key %v already exists in Ospfv2Router", newK)
	}

	e, ok := t.Ospfv2Router[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ospfv2Router", oldK)
	}
	e.Name = &newK

	t.Ospfv2Router[newK] = e
	delete(t.Ospfv2Router, oldK)
	return nil
}

// GetOrCreateOspfv2RouterMap returns the list (map) from Root.
//
// It initializes the field if not already initialized.
func (t *Root) GetOrCreateOspfv2RouterMap() map[string]*Ospfv2Router {
	if t.Ospfv2Router == nil {
		t.Ospfv2Router = make(map[string]*Ospfv2Router)
	}
	return t.Ospfv2Router
}

// GetOrCreateOspfv2Router retrieves the value with the specified keys from
// the receiver Root. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Root) GetOrCreateOspfv2Router(Name string) *Ospfv2Router {

	key := Name

	if v, ok := t.Ospfv2Router[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOspfv2Router(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOspfv2Router got unexpected error: %v", err))
	}
	return v
}

// GetOspfv2Router retrieves the value with the specified key from
// the Ospfv2Router map field of Root. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Root) GetOspfv2Router(Name string) *Ospfv2Router {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Ospfv2Router[key]; ok {
		return lm
	}
	return nil
}

// DeleteOspfv2Router deletes the value with the specified keys from
// the receiver Root. If there is no such element, the function
// is a no-op.
func (t *Root) DeleteOspfv2Router(Name string) {
	key := Name

	delete(t.Ospfv2Router, key)
}

// AppendOspfv2Router appends the supplied Ospfv2Router struct to the
// list Ospfv2Router of Root. If the key value(s) specified in
// the supplied Ospfv2Router already exist in the list, an error is
// returned.
func (t *Root) AppendOspfv2Router(v *Ospfv2Router) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ospfv2Router == nil {
		t.Ospfv2Router = make(map[string]*Ospfv2Router)
	}

	if _, ok := t.Ospfv2Router[key]; ok {
		return fmt.Errorf("duplicate key for list Ospfv2Router %v", key)
	}

	t.Ospfv2Router[key] = v
	return nil
}

// NewOspfv3Router creates a new entry in the Ospfv3Router list of the
// Root struct. The keys of the list are populated from the input
// arguments.
func (t *Root) NewOspfv3Router(Name string) (*Ospfv3Router, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ospfv3Router == nil {
		t.Ospfv3Router = make(map[string]*Ospfv3Router)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ospfv3Router[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ospfv3Router", key)
	}

	t.Ospfv3Router[key] = &Ospfv3Router{
		Name: &Name,
	}

	return t.Ospfv3Router[key], nil
}

// RenameOspfv3Router renames an entry in the list Ospfv3Router within
// the Root struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Root) RenameOspfv3Router(oldK, newK string) error {
	if _, ok := t.Ospfv3Router[newK]; ok {
		return fmt.Errorf("key %v already exists in Ospfv3Router", newK)
	}

	e, ok := t.Ospfv3Router[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ospfv3Router", oldK)
	}
	e.Name = &newK

	t.Ospfv3Router[newK] = e
	delete(t.Ospfv3Router, oldK)
	return nil
}

// GetOrCreateOspfv3RouterMap returns the list (map) from Root.
//
// It initializes the field if not already initialized.
func (t *Root) GetOrCreateOspfv3RouterMap() map[string]*Ospfv3Router {
	if t.Ospfv3Router == nil {
		t.Ospfv3Router = make(map[string]*Ospfv3Router)
	}
	return t.Ospfv3Router
}

// GetOrCreateOspfv3Router retrieves the value with the specified keys from
// the receiver Root. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Root) GetOrCreateOspfv3Router(Name string) *Ospfv3Router {

	key := Name

	if v, ok := t.Ospfv3Router[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOspfv3Router(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOspfv3Router got unexpected error: %v", err))
	}
	return v
}

// GetOspfv3Router retrieves the value with the specified key from
// the Ospfv3Router map field of Root. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Root) GetOspfv3Router(Name string) *Ospfv3Router {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Ospfv3Router[key]; ok {
		return lm
	}
	return nil
}

// DeleteOspfv3Router deletes the value with the specified keys from
// the receiver Root. If there is no such element, the function
// is a no-op.
func (t *Root) DeleteOspfv3Router(Name string) {
	key := Name

	delete(t.Ospfv3Router, key)
}

// AppendOspfv3Router appends the supplied Ospfv3Router struct to the
// list Ospfv3Router of Root. If the key value(s) specified in
// the supplied Ospfv3Router already exist in the list, an error is
// returned.
func (t *Root) AppendOspfv3Router(v *Ospfv3Router) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ospfv3Router == nil {
		t.Ospfv3Router = make(map[string]*Ospfv3Router)
	}

	if _, ok := t.Ospfv3Router[key]; ok {
		return fmt.Errorf("duplicate key for list Ospfv3Router %v", key)
	}

	t.Ospfv3Router[key] = v
	return nil
}

// NewPort creates a new entry in the Port list of the
// Root struct. The keys of the list are populated from the input
// arguments.
func (t *Root) NewPort(Name string) (*Port, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[string]*Port)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Port[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Port", key)
	}

	t.Port[key] = &Port{
		Name: &Name,
	}

	return t.Port[key], nil
}

// RenamePort renames an entry in the list Port within
// the Root struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Root) RenamePort(oldK, newK string) error {
	if _, ok := t.Port[newK]; ok {
		return fmt.Errorf("key %v already exists in Port", newK)
	}

	e, ok := t.Port[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Port", oldK)
	}
	e.Name = &newK

	t.Port[newK] = e
	delete(t.Port, oldK)
	return nil
}

// GetOrCreatePortMap returns the list (map) from Root.
//
// It initializes the field if not already initialized.
func (t *Root) GetOrCreatePortMap() map[string]*Port {
	if t.Port == nil {
		t.Port = make(map[string]*Port)
	}
	return t.Port
}

// GetOrCreatePort retrieves the value with the specified keys from
// the receiver Root. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Root) GetOrCreatePort(Name string) *Port {

	key := Name

	if v, ok := t.Port[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPort(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePort got unexpected error: %v", err))
	}
	return v
}

// GetPort retrieves the value with the specified key from
// the Port map field of Root. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Root) GetPort(Name string) *Port {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Port[key]; ok {
		return lm
	}
	return nil
}

// DeletePort deletes the value with the specified keys from
// the receiver Root. If there is no such element, the function
// is a no-op.
func (t *Root) DeletePort(Name string) {
	key := Name

	delete(t.Port, key)
}

// AppendPort appends the supplied Port struct to the
// list Port of Root. If the key value(s) specified in
// the supplied Port already exist in the list, an error is
// returned.
func (t *Root) AppendPort(v *Port) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[string]*Port)
	}

	if _, ok := t.Port[key]; ok {
		return fmt.Errorf("duplicate key for list Port %v", key)
	}

	t.Port[key] = v
	return nil
}

// NewRsvpteRouter creates a new entry in the RsvpteRouter list of the
// Root struct. The keys of the list are populated from the input
// arguments.
func (t *Root) NewRsvpteRouter(Name string) (*RsvpteRouter, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RsvpteRouter == nil {
		t.RsvpteRouter = make(map[string]*RsvpteRouter)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RsvpteRouter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RsvpteRouter", key)
	}

	t.RsvpteRouter[key] = &RsvpteRouter{
		Name: &Name,
	}

	return t.RsvpteRouter[key], nil
}

// RenameRsvpteRouter renames an entry in the list RsvpteRouter within
// the Root struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Root) RenameRsvpteRouter(oldK, newK string) error {
	if _, ok := t.RsvpteRouter[newK]; ok {
		return fmt.Errorf("key %v already exists in RsvpteRouter", newK)
	}

	e, ok := t.RsvpteRouter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RsvpteRouter", oldK)
	}
	e.Name = &newK

	t.RsvpteRouter[newK] = e
	delete(t.RsvpteRouter, oldK)
	return nil
}

// GetOrCreateRsvpteRouterMap returns the list (map) from Root.
//
// It initializes the field if not already initialized.
func (t *Root) GetOrCreateRsvpteRouterMap() map[string]*RsvpteRouter {
	if t.RsvpteRouter == nil {
		t.RsvpteRouter = make(map[string]*RsvpteRouter)
	}
	return t.RsvpteRouter
}

// GetOrCreateRsvpteRouter retrieves the value with the specified keys from
// the receiver Root. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Root) GetOrCreateRsvpteRouter(Name string) *RsvpteRouter {

	key := Name

	if v, ok := t.RsvpteRouter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRsvpteRouter(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRsvpteRouter got unexpected error: %v", err))
	}
	return v
}

// GetRsvpteRouter retrieves the value with the specified key from
// the RsvpteRouter map field of Root. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Root) GetRsvpteRouter(Name string) *RsvpteRouter {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.RsvpteRouter[key]; ok {
		return lm
	}
	return nil
}

// DeleteRsvpteRouter deletes the value with the specified keys from
// the receiver Root. If there is no such element, the function
// is a no-op.
func (t *Root) DeleteRsvpteRouter(Name string) {
	key := Name

	delete(t.RsvpteRouter, key)
}

// AppendRsvpteRouter appends the supplied RsvpteRouter struct to the
// list RsvpteRouter of Root. If the key value(s) specified in
// the supplied RsvpteRouter already exist in the list, an error is
// returned.
func (t *Root) AppendRsvpteRouter(v *RsvpteRouter) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RsvpteRouter == nil {
		t.RsvpteRouter = make(map[string]*RsvpteRouter)
	}

	if _, ok := t.RsvpteRouter[key]; ok {
		return fmt.Errorf("duplicate key for list RsvpteRouter %v", key)
	}

	t.RsvpteRouter[key] = v
	return nil
}

// GetOrCreateLacp retrieves the value of the Lacp field
// or returns the existing field if it already exists.
func (t *Root) GetOrCreateLacp() *Lacp {
	if t.Lacp != nil {
		return t.Lacp
	}
	t.Lacp = &Lacp{}
	return t.Lacp
}

// GetLacp returns the value of the Lacp struct pointer
// from Root. If the receiver or the field Lacp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Root) GetLacp() *Lacp {
	if t != nil && t.Lacp != nil {
		return t.Lacp
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Root
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Root) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Lacp.PopulateDefaults()
	for _, e := range t.BgpPeer {
		e.PopulateDefaults()
	}
	for _, e := range t.Component {
		e.PopulateDefaults()
	}
	for _, e := range t.Dhcpv4Client {
		e.PopulateDefaults()
	}
	for _, e := range t.Dhcpv4Server {
		e.PopulateDefaults()
	}
	for _, e := range t.Dhcpv6Client {
		e.PopulateDefaults()
	}
	for _, e := range t.Dhcpv6Server {
		e.PopulateDefaults()
	}
	for _, e := range t.Flow {
		e.PopulateDefaults()
	}
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.IsisRouter {
		e.PopulateDefaults()
	}
	for _, e := range t.Lag {
		e.PopulateDefaults()
	}
	for _, e := range t.LldpInterface {
		e.PopulateDefaults()
	}
	for _, e := range t.Ospfv2Router {
		e.PopulateDefaults()
	}
	for _, e := range t.Ospfv3Router {
		e.PopulateDefaults()
	}
	for _, e := range t.Port {
		e.PopulateDefaults()
	}
	for _, e := range t.RsvpteRouter {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Root) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Root"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Root) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Root) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Root.
func (*Root) ΛBelongingModule() string {
	return ""
}

// RsvpteRouter represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router YANG schema element.
type RsvpteRouter struct {
	Counters                  *RsvpteRouter_Counters                  `path:"state/counters" module:"open-traffic-generator-rsvp/open-traffic-generator-rsvp"`
	LabelSwitchedPathDatabase *RsvpteRouter_LabelSwitchedPathDatabase `path:"state/label-switched-path-database" module:"open-traffic-generator-rsvp/open-traffic-generator-rsvp"`
	Name                      *string                                 `path:"state/name|name" module:"open-traffic-generator-rsvp/open-traffic-generator-rsvp|open-traffic-generator-rsvp" shadow-path:"name" shadow-module:"open-traffic-generator-rsvp"`
}

// IsYANGGoStruct ensures that RsvpteRouter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RsvpteRouter) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *RsvpteRouter) GetOrCreateCounters() *RsvpteRouter_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &RsvpteRouter_Counters{}
	return t.Counters
}

// GetOrCreateLabelSwitchedPathDatabase retrieves the value of the LabelSwitchedPathDatabase field
// or returns the existing field if it already exists.
func (t *RsvpteRouter) GetOrCreateLabelSwitchedPathDatabase() *RsvpteRouter_LabelSwitchedPathDatabase {
	if t.LabelSwitchedPathDatabase != nil {
		return t.LabelSwitchedPathDatabase
	}
	t.LabelSwitchedPathDatabase = &RsvpteRouter_LabelSwitchedPathDatabase{}
	return t.LabelSwitchedPathDatabase
}

// GetCounters returns the value of the Counters struct pointer
// from RsvpteRouter. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RsvpteRouter) GetCounters() *RsvpteRouter_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetLabelSwitchedPathDatabase returns the value of the LabelSwitchedPathDatabase struct pointer
// from RsvpteRouter. If the receiver or the field LabelSwitchedPathDatabase is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RsvpteRouter) GetLabelSwitchedPathDatabase() *RsvpteRouter_LabelSwitchedPathDatabase {
	if t != nil && t.LabelSwitchedPathDatabase != nil {
		return t.LabelSwitchedPathDatabase
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the RsvpteRouter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *RsvpteRouter) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// SetName sets the value of the leaf Name in the RsvpteRouter
// struct.
func (t *RsvpteRouter) SetName(v string) {
	t.Name = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RsvpteRouter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RsvpteRouter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Counters.PopulateDefaults()
	t.LabelSwitchedPathDatabase.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the RsvpteRouter struct, which is a YANG list entry.
func (t *RsvpteRouter) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RsvpteRouter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RsvpteRouter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RsvpteRouter) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RsvpteRouter) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of RsvpteRouter.
func (*RsvpteRouter) ΛBelongingModule() string {
	return "open-traffic-generator-rsvp"
}

// RsvpteRouter_Counters represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/counters YANG schema element.
type RsvpteRouter_Counters struct {
	EgressP2PLspsUp          *uint64 `path:"egress-p2p-lsps-up" module:"open-traffic-generator-rsvp"`
	InAcks                   *uint64 `path:"in-acks" module:"open-traffic-generator-rsvp"`
	InBundles                *uint64 `path:"in-bundles" module:"open-traffic-generator-rsvp"`
	InHellos                 *uint64 `path:"in-hellos" module:"open-traffic-generator-rsvp"`
	InNacks                  *uint64 `path:"in-nacks" module:"open-traffic-generator-rsvp"`
	InPathErrors             *uint64 `path:"in-path-errors" module:"open-traffic-generator-rsvp"`
	InPathTears              *uint64 `path:"in-path-tears" module:"open-traffic-generator-rsvp"`
	InPaths                  *uint64 `path:"in-paths" module:"open-traffic-generator-rsvp"`
	InResvConfs              *uint64 `path:"in-resv-confs" module:"open-traffic-generator-rsvp"`
	InResvErrors             *uint64 `path:"in-resv-errors" module:"open-traffic-generator-rsvp"`
	InResvTears              *uint64 `path:"in-resv-tears" module:"open-traffic-generator-rsvp"`
	InResvs                  *uint64 `path:"in-resvs" module:"open-traffic-generator-rsvp"`
	InSrefreshs              *uint64 `path:"in-srefreshs" module:"open-traffic-generator-rsvp"`
	IngressP2PLspsConfigured *uint64 `path:"ingress-p2p-lsps-configured" module:"open-traffic-generator-rsvp"`
	IngressP2PLspsUp         *uint64 `path:"ingress-p2p-lsps-up" module:"open-traffic-generator-rsvp"`
	LspFlaps                 *uint64 `path:"lsp-flaps" module:"open-traffic-generator-rsvp"`
	OutAcks                  *uint64 `path:"out-acks" module:"open-traffic-generator-rsvp"`
	OutBundles               *uint64 `path:"out-bundles" module:"open-traffic-generator-rsvp"`
	OutHellos                *uint64 `path:"out-hellos" module:"open-traffic-generator-rsvp"`
	OutNacks                 *uint64 `path:"out-nacks" module:"open-traffic-generator-rsvp"`
	OutPathErrors            *uint64 `path:"out-path-errors" module:"open-traffic-generator-rsvp"`
	OutPathReevaluationReqs  *uint64 `path:"out-path-reevaluation-reqs" module:"open-traffic-generator-rsvp"`
	OutPathTears             *uint64 `path:"out-path-tears" module:"open-traffic-generator-rsvp"`
	OutPaths                 *uint64 `path:"out-paths" module:"open-traffic-generator-rsvp"`
	OutResvConfs             *uint64 `path:"out-resv-confs" module:"open-traffic-generator-rsvp"`
	OutResvErrors            *uint64 `path:"out-resv-errors" module:"open-traffic-generator-rsvp"`
	OutResvTears             *uint64 `path:"out-resv-tears" module:"open-traffic-generator-rsvp"`
	OutResvs                 *uint64 `path:"out-resvs" module:"open-traffic-generator-rsvp"`
	OutSrefreshs             *uint64 `path:"out-srefreshs" module:"open-traffic-generator-rsvp"`
	PathReoptimizations      *uint64 `path:"path-reoptimizations" module:"open-traffic-generator-rsvp"`
}

// IsYANGGoStruct ensures that RsvpteRouter_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RsvpteRouter_Counters) IsYANGGoStruct() {}

// GetEgressP2PLspsUp retrieves the value of the leaf EgressP2PLspsUp from the RsvpteRouter_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EgressP2PLspsUp is set, it can
// safely use t.GetEgressP2PLspsUp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EgressP2PLspsUp == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_Counters) GetEgressP2PLspsUp() uint64 {
	if t == nil || t.EgressP2PLspsUp == nil {
		return 0
	}
	return *t.EgressP2PLspsUp
}

// GetInAcks retrieves the value of the leaf InAcks from the RsvpteRouter_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InAcks is set, it can
// safely use t.GetInAcks() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InAcks == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_Counters) GetInAcks() uint64 {
	if t == nil || t.InAcks == nil {
		return 0
	}
	return *t.InAcks
}

// GetInBundles retrieves the value of the leaf InBundles from the RsvpteRouter_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InBundles is set, it can
// safely use t.GetInBundles() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InBundles == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_Counters) GetInBundles() uint64 {
	if t == nil || t.InBundles == nil {
		return 0
	}
	return *t.InBundles
}

// GetInHellos retrieves the value of the leaf InHellos from the RsvpteRouter_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InHellos is set, it can
// safely use t.GetInHellos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InHellos == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_Counters) GetInHellos() uint64 {
	if t == nil || t.InHellos == nil {
		return 0
	}
	return *t.InHellos
}

// GetInNacks retrieves the value of the leaf InNacks from the RsvpteRouter_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InNacks is set, it can
// safely use t.GetInNacks() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InNacks == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_Counters) GetInNacks() uint64 {
	if t == nil || t.InNacks == nil {
		return 0
	}
	return *t.InNacks
}

// GetInPathErrors retrieves the value of the leaf InPathErrors from the RsvpteRouter_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InPathErrors is set, it can
// safely use t.GetInPathErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InPathErrors == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_Counters) GetInPathErrors() uint64 {
	if t == nil || t.InPathErrors == nil {
		return 0
	}
	return *t.InPathErrors
}

// GetInPathTears retrieves the value of the leaf InPathTears from the RsvpteRouter_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InPathTears is set, it can
// safely use t.GetInPathTears() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InPathTears == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_Counters) GetInPathTears() uint64 {
	if t == nil || t.InPathTears == nil {
		return 0
	}
	return *t.InPathTears
}

// GetInPaths retrieves the value of the leaf InPaths from the RsvpteRouter_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InPaths is set, it can
// safely use t.GetInPaths() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InPaths == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_Counters) GetInPaths() uint64 {
	if t == nil || t.InPaths == nil {
		return 0
	}
	return *t.InPaths
}

// GetInResvConfs retrieves the value of the leaf InResvConfs from the RsvpteRouter_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InResvConfs is set, it can
// safely use t.GetInResvConfs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InResvConfs == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_Counters) GetInResvConfs() uint64 {
	if t == nil || t.InResvConfs == nil {
		return 0
	}
	return *t.InResvConfs
}

// GetInResvErrors retrieves the value of the leaf InResvErrors from the RsvpteRouter_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InResvErrors is set, it can
// safely use t.GetInResvErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InResvErrors == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_Counters) GetInResvErrors() uint64 {
	if t == nil || t.InResvErrors == nil {
		return 0
	}
	return *t.InResvErrors
}

// GetInResvTears retrieves the value of the leaf InResvTears from the RsvpteRouter_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InResvTears is set, it can
// safely use t.GetInResvTears() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InResvTears == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_Counters) GetInResvTears() uint64 {
	if t == nil || t.InResvTears == nil {
		return 0
	}
	return *t.InResvTears
}

// GetInResvs retrieves the value of the leaf InResvs from the RsvpteRouter_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InResvs is set, it can
// safely use t.GetInResvs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InResvs == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_Counters) GetInResvs() uint64 {
	if t == nil || t.InResvs == nil {
		return 0
	}
	return *t.InResvs
}

// GetInSrefreshs retrieves the value of the leaf InSrefreshs from the RsvpteRouter_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InSrefreshs is set, it can
// safely use t.GetInSrefreshs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InSrefreshs == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_Counters) GetInSrefreshs() uint64 {
	if t == nil || t.InSrefreshs == nil {
		return 0
	}
	return *t.InSrefreshs
}

// GetIngressP2PLspsConfigured retrieves the value of the leaf IngressP2PLspsConfigured from the RsvpteRouter_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressP2PLspsConfigured is set, it can
// safely use t.GetIngressP2PLspsConfigured() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressP2PLspsConfigured == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_Counters) GetIngressP2PLspsConfigured() uint64 {
	if t == nil || t.IngressP2PLspsConfigured == nil {
		return 0
	}
	return *t.IngressP2PLspsConfigured
}

// GetIngressP2PLspsUp retrieves the value of the leaf IngressP2PLspsUp from the RsvpteRouter_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressP2PLspsUp is set, it can
// safely use t.GetIngressP2PLspsUp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressP2PLspsUp == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_Counters) GetIngressP2PLspsUp() uint64 {
	if t == nil || t.IngressP2PLspsUp == nil {
		return 0
	}
	return *t.IngressP2PLspsUp
}

// GetLspFlaps retrieves the value of the leaf LspFlaps from the RsvpteRouter_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspFlaps is set, it can
// safely use t.GetLspFlaps() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspFlaps == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_Counters) GetLspFlaps() uint64 {
	if t == nil || t.LspFlaps == nil {
		return 0
	}
	return *t.LspFlaps
}

// GetOutAcks retrieves the value of the leaf OutAcks from the RsvpteRouter_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutAcks is set, it can
// safely use t.GetOutAcks() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutAcks == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_Counters) GetOutAcks() uint64 {
	if t == nil || t.OutAcks == nil {
		return 0
	}
	return *t.OutAcks
}

// GetOutBundles retrieves the value of the leaf OutBundles from the RsvpteRouter_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutBundles is set, it can
// safely use t.GetOutBundles() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutBundles == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_Counters) GetOutBundles() uint64 {
	if t == nil || t.OutBundles == nil {
		return 0
	}
	return *t.OutBundles
}

// GetOutHellos retrieves the value of the leaf OutHellos from the RsvpteRouter_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutHellos is set, it can
// safely use t.GetOutHellos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutHellos == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_Counters) GetOutHellos() uint64 {
	if t == nil || t.OutHellos == nil {
		return 0
	}
	return *t.OutHellos
}

// GetOutNacks retrieves the value of the leaf OutNacks from the RsvpteRouter_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutNacks is set, it can
// safely use t.GetOutNacks() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutNacks == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_Counters) GetOutNacks() uint64 {
	if t == nil || t.OutNacks == nil {
		return 0
	}
	return *t.OutNacks
}

// GetOutPathErrors retrieves the value of the leaf OutPathErrors from the RsvpteRouter_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutPathErrors is set, it can
// safely use t.GetOutPathErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutPathErrors == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_Counters) GetOutPathErrors() uint64 {
	if t == nil || t.OutPathErrors == nil {
		return 0
	}
	return *t.OutPathErrors
}

// GetOutPathReevaluationReqs retrieves the value of the leaf OutPathReevaluationReqs from the RsvpteRouter_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutPathReevaluationReqs is set, it can
// safely use t.GetOutPathReevaluationReqs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutPathReevaluationReqs == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_Counters) GetOutPathReevaluationReqs() uint64 {
	if t == nil || t.OutPathReevaluationReqs == nil {
		return 0
	}
	return *t.OutPathReevaluationReqs
}

// GetOutPathTears retrieves the value of the leaf OutPathTears from the RsvpteRouter_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutPathTears is set, it can
// safely use t.GetOutPathTears() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutPathTears == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_Counters) GetOutPathTears() uint64 {
	if t == nil || t.OutPathTears == nil {
		return 0
	}
	return *t.OutPathTears
}

// GetOutPaths retrieves the value of the leaf OutPaths from the RsvpteRouter_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutPaths is set, it can
// safely use t.GetOutPaths() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutPaths == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_Counters) GetOutPaths() uint64 {
	if t == nil || t.OutPaths == nil {
		return 0
	}
	return *t.OutPaths
}

// GetOutResvConfs retrieves the value of the leaf OutResvConfs from the RsvpteRouter_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutResvConfs is set, it can
// safely use t.GetOutResvConfs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutResvConfs == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_Counters) GetOutResvConfs() uint64 {
	if t == nil || t.OutResvConfs == nil {
		return 0
	}
	return *t.OutResvConfs
}

// GetOutResvErrors retrieves the value of the leaf OutResvErrors from the RsvpteRouter_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutResvErrors is set, it can
// safely use t.GetOutResvErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutResvErrors == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_Counters) GetOutResvErrors() uint64 {
	if t == nil || t.OutResvErrors == nil {
		return 0
	}
	return *t.OutResvErrors
}

// GetOutResvTears retrieves the value of the leaf OutResvTears from the RsvpteRouter_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutResvTears is set, it can
// safely use t.GetOutResvTears() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutResvTears == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_Counters) GetOutResvTears() uint64 {
	if t == nil || t.OutResvTears == nil {
		return 0
	}
	return *t.OutResvTears
}

// GetOutResvs retrieves the value of the leaf OutResvs from the RsvpteRouter_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutResvs is set, it can
// safely use t.GetOutResvs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutResvs == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_Counters) GetOutResvs() uint64 {
	if t == nil || t.OutResvs == nil {
		return 0
	}
	return *t.OutResvs
}

// GetOutSrefreshs retrieves the value of the leaf OutSrefreshs from the RsvpteRouter_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutSrefreshs is set, it can
// safely use t.GetOutSrefreshs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutSrefreshs == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_Counters) GetOutSrefreshs() uint64 {
	if t == nil || t.OutSrefreshs == nil {
		return 0
	}
	return *t.OutSrefreshs
}

// GetPathReoptimizations retrieves the value of the leaf PathReoptimizations from the RsvpteRouter_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathReoptimizations is set, it can
// safely use t.GetPathReoptimizations() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathReoptimizations == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_Counters) GetPathReoptimizations() uint64 {
	if t == nil || t.PathReoptimizations == nil {
		return 0
	}
	return *t.PathReoptimizations
}

// SetEgressP2PLspsUp sets the value of the leaf EgressP2PLspsUp in the RsvpteRouter_Counters
// struct.
func (t *RsvpteRouter_Counters) SetEgressP2PLspsUp(v uint64) {
	t.EgressP2PLspsUp = &v
}

// SetInAcks sets the value of the leaf InAcks in the RsvpteRouter_Counters
// struct.
func (t *RsvpteRouter_Counters) SetInAcks(v uint64) {
	t.InAcks = &v
}

// SetInBundles sets the value of the leaf InBundles in the RsvpteRouter_Counters
// struct.
func (t *RsvpteRouter_Counters) SetInBundles(v uint64) {
	t.InBundles = &v
}

// SetInHellos sets the value of the leaf InHellos in the RsvpteRouter_Counters
// struct.
func (t *RsvpteRouter_Counters) SetInHellos(v uint64) {
	t.InHellos = &v
}

// SetInNacks sets the value of the leaf InNacks in the RsvpteRouter_Counters
// struct.
func (t *RsvpteRouter_Counters) SetInNacks(v uint64) {
	t.InNacks = &v
}

// SetInPathErrors sets the value of the leaf InPathErrors in the RsvpteRouter_Counters
// struct.
func (t *RsvpteRouter_Counters) SetInPathErrors(v uint64) {
	t.InPathErrors = &v
}

// SetInPathTears sets the value of the leaf InPathTears in the RsvpteRouter_Counters
// struct.
func (t *RsvpteRouter_Counters) SetInPathTears(v uint64) {
	t.InPathTears = &v
}

// SetInPaths sets the value of the leaf InPaths in the RsvpteRouter_Counters
// struct.
func (t *RsvpteRouter_Counters) SetInPaths(v uint64) {
	t.InPaths = &v
}

// SetInResvConfs sets the value of the leaf InResvConfs in the RsvpteRouter_Counters
// struct.
func (t *RsvpteRouter_Counters) SetInResvConfs(v uint64) {
	t.InResvConfs = &v
}

// SetInResvErrors sets the value of the leaf InResvErrors in the RsvpteRouter_Counters
// struct.
func (t *RsvpteRouter_Counters) SetInResvErrors(v uint64) {
	t.InResvErrors = &v
}

// SetInResvTears sets the value of the leaf InResvTears in the RsvpteRouter_Counters
// struct.
func (t *RsvpteRouter_Counters) SetInResvTears(v uint64) {
	t.InResvTears = &v
}

// SetInResvs sets the value of the leaf InResvs in the RsvpteRouter_Counters
// struct.
func (t *RsvpteRouter_Counters) SetInResvs(v uint64) {
	t.InResvs = &v
}

// SetInSrefreshs sets the value of the leaf InSrefreshs in the RsvpteRouter_Counters
// struct.
func (t *RsvpteRouter_Counters) SetInSrefreshs(v uint64) {
	t.InSrefreshs = &v
}

// SetIngressP2PLspsConfigured sets the value of the leaf IngressP2PLspsConfigured in the RsvpteRouter_Counters
// struct.
func (t *RsvpteRouter_Counters) SetIngressP2PLspsConfigured(v uint64) {
	t.IngressP2PLspsConfigured = &v
}

// SetIngressP2PLspsUp sets the value of the leaf IngressP2PLspsUp in the RsvpteRouter_Counters
// struct.
func (t *RsvpteRouter_Counters) SetIngressP2PLspsUp(v uint64) {
	t.IngressP2PLspsUp = &v
}

// SetLspFlaps sets the value of the leaf LspFlaps in the RsvpteRouter_Counters
// struct.
func (t *RsvpteRouter_Counters) SetLspFlaps(v uint64) {
	t.LspFlaps = &v
}

// SetOutAcks sets the value of the leaf OutAcks in the RsvpteRouter_Counters
// struct.
func (t *RsvpteRouter_Counters) SetOutAcks(v uint64) {
	t.OutAcks = &v
}

// SetOutBundles sets the value of the leaf OutBundles in the RsvpteRouter_Counters
// struct.
func (t *RsvpteRouter_Counters) SetOutBundles(v uint64) {
	t.OutBundles = &v
}

// SetOutHellos sets the value of the leaf OutHellos in the RsvpteRouter_Counters
// struct.
func (t *RsvpteRouter_Counters) SetOutHellos(v uint64) {
	t.OutHellos = &v
}

// SetOutNacks sets the value of the leaf OutNacks in the RsvpteRouter_Counters
// struct.
func (t *RsvpteRouter_Counters) SetOutNacks(v uint64) {
	t.OutNacks = &v
}

// SetOutPathErrors sets the value of the leaf OutPathErrors in the RsvpteRouter_Counters
// struct.
func (t *RsvpteRouter_Counters) SetOutPathErrors(v uint64) {
	t.OutPathErrors = &v
}

// SetOutPathReevaluationReqs sets the value of the leaf OutPathReevaluationReqs in the RsvpteRouter_Counters
// struct.
func (t *RsvpteRouter_Counters) SetOutPathReevaluationReqs(v uint64) {
	t.OutPathReevaluationReqs = &v
}

// SetOutPathTears sets the value of the leaf OutPathTears in the RsvpteRouter_Counters
// struct.
func (t *RsvpteRouter_Counters) SetOutPathTears(v uint64) {
	t.OutPathTears = &v
}

// SetOutPaths sets the value of the leaf OutPaths in the RsvpteRouter_Counters
// struct.
func (t *RsvpteRouter_Counters) SetOutPaths(v uint64) {
	t.OutPaths = &v
}

// SetOutResvConfs sets the value of the leaf OutResvConfs in the RsvpteRouter_Counters
// struct.
func (t *RsvpteRouter_Counters) SetOutResvConfs(v uint64) {
	t.OutResvConfs = &v
}

// SetOutResvErrors sets the value of the leaf OutResvErrors in the RsvpteRouter_Counters
// struct.
func (t *RsvpteRouter_Counters) SetOutResvErrors(v uint64) {
	t.OutResvErrors = &v
}

// SetOutResvTears sets the value of the leaf OutResvTears in the RsvpteRouter_Counters
// struct.
func (t *RsvpteRouter_Counters) SetOutResvTears(v uint64) {
	t.OutResvTears = &v
}

// SetOutResvs sets the value of the leaf OutResvs in the RsvpteRouter_Counters
// struct.
func (t *RsvpteRouter_Counters) SetOutResvs(v uint64) {
	t.OutResvs = &v
}

// SetOutSrefreshs sets the value of the leaf OutSrefreshs in the RsvpteRouter_Counters
// struct.
func (t *RsvpteRouter_Counters) SetOutSrefreshs(v uint64) {
	t.OutSrefreshs = &v
}

// SetPathReoptimizations sets the value of the leaf PathReoptimizations in the RsvpteRouter_Counters
// struct.
func (t *RsvpteRouter_Counters) SetPathReoptimizations(v uint64) {
	t.PathReoptimizations = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RsvpteRouter_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RsvpteRouter_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RsvpteRouter_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RsvpteRouter_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RsvpteRouter_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RsvpteRouter_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of RsvpteRouter_Counters.
func (*RsvpteRouter_Counters) ΛBelongingModule() string {
	return "open-traffic-generator-rsvp"
}

// RsvpteRouter_LabelSwitchedPathDatabase represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase struct {
	Ipv4Lsp map[RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Key]*RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp `path:"lsps/ipv4-lsp" module:"open-traffic-generator-rsvp/open-traffic-generator-rsvp"`
}

// IsYANGGoStruct ensures that RsvpteRouter_LabelSwitchedPathDatabase implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RsvpteRouter_LabelSwitchedPathDatabase) IsYANGGoStruct() {}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Key represents the key for list Ipv4Lsp of element /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Key struct {
	SourceAddress      string `path:"source-address"`
	DestinationAddress string `path:"destination-address"`
	TunnelId           uint16 `path:"tunnel-id"`
	LspId              uint16 `path:"lsp-id"`
}

// IsYANGGoKeyStruct ensures that RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Key key struct.
func (t RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"source-address":      t.SourceAddress,
		"destination-address": t.DestinationAddress,
		"tunnel-id":           t.TunnelId,
		"lsp-id":              t.LspId,
	}, nil
}

// NewIpv4Lsp creates a new entry in the Ipv4Lsp list of the
// RsvpteRouter_LabelSwitchedPathDatabase struct. The keys of the list are populated from the input
// arguments.
func (t *RsvpteRouter_LabelSwitchedPathDatabase) NewIpv4Lsp(SourceAddress string, DestinationAddress string, TunnelId uint16, LspId uint16) (*RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv4Lsp == nil {
		t.Ipv4Lsp = make(map[RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Key]*RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp)
	}

	key := RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Key{
		SourceAddress:      SourceAddress,
		DestinationAddress: DestinationAddress,
		TunnelId:           TunnelId,
		LspId:              LspId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv4Lsp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv4Lsp", key)
	}

	t.Ipv4Lsp[key] = &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp{
		SourceAddress:      &SourceAddress,
		DestinationAddress: &DestinationAddress,
		TunnelId:           &TunnelId,
		LspId:              &LspId,
	}

	return t.Ipv4Lsp[key], nil
}

// RenameIpv4Lsp renames an entry in the list Ipv4Lsp within
// the RsvpteRouter_LabelSwitchedPathDatabase struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RsvpteRouter_LabelSwitchedPathDatabase) RenameIpv4Lsp(oldK, newK RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Key) error {
	if _, ok := t.Ipv4Lsp[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv4Lsp", newK)
	}

	e, ok := t.Ipv4Lsp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv4Lsp", oldK)
	}
	e.SourceAddress = &newK.SourceAddress
	e.DestinationAddress = &newK.DestinationAddress
	e.TunnelId = &newK.TunnelId
	e.LspId = &newK.LspId

	t.Ipv4Lsp[newK] = e
	delete(t.Ipv4Lsp, oldK)
	return nil
}

// GetOrCreateIpv4LspMap returns the list (map) from RsvpteRouter_LabelSwitchedPathDatabase.
//
// It initializes the field if not already initialized.
func (t *RsvpteRouter_LabelSwitchedPathDatabase) GetOrCreateIpv4LspMap() map[RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Key]*RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp {
	if t.Ipv4Lsp == nil {
		t.Ipv4Lsp = make(map[RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Key]*RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp)
	}
	return t.Ipv4Lsp
}

// GetOrCreateIpv4Lsp retrieves the value with the specified keys from
// the receiver RsvpteRouter_LabelSwitchedPathDatabase. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RsvpteRouter_LabelSwitchedPathDatabase) GetOrCreateIpv4Lsp(SourceAddress string, DestinationAddress string, TunnelId uint16, LspId uint16) *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp {

	key := RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Key{
		SourceAddress:      SourceAddress,
		DestinationAddress: DestinationAddress,
		TunnelId:           TunnelId,
		LspId:              LspId,
	}

	if v, ok := t.Ipv4Lsp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv4Lsp(SourceAddress, DestinationAddress, TunnelId, LspId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv4Lsp got unexpected error: %v", err))
	}
	return v
}

// GetIpv4Lsp retrieves the value with the specified key from
// the Ipv4Lsp map field of RsvpteRouter_LabelSwitchedPathDatabase. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RsvpteRouter_LabelSwitchedPathDatabase) GetIpv4Lsp(SourceAddress string, DestinationAddress string, TunnelId uint16, LspId uint16) *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp {

	if t == nil {
		return nil
	}

	key := RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Key{
		SourceAddress:      SourceAddress,
		DestinationAddress: DestinationAddress,
		TunnelId:           TunnelId,
		LspId:              LspId,
	}

	if lm, ok := t.Ipv4Lsp[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv4Lsp deletes the value with the specified keys from
// the receiver RsvpteRouter_LabelSwitchedPathDatabase. If there is no such element, the function
// is a no-op.
func (t *RsvpteRouter_LabelSwitchedPathDatabase) DeleteIpv4Lsp(SourceAddress string, DestinationAddress string, TunnelId uint16, LspId uint16) {
	key := RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Key{
		SourceAddress:      SourceAddress,
		DestinationAddress: DestinationAddress,
		TunnelId:           TunnelId,
		LspId:              LspId,
	}

	delete(t.Ipv4Lsp, key)
}

// AppendIpv4Lsp appends the supplied RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp struct to the
// list Ipv4Lsp of RsvpteRouter_LabelSwitchedPathDatabase. If the key value(s) specified in
// the supplied RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp already exist in the list, an error is
// returned.
func (t *RsvpteRouter_LabelSwitchedPathDatabase) AppendIpv4Lsp(v *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) error {
	if v.SourceAddress == nil {
		return fmt.Errorf("invalid nil key for SourceAddress")
	}

	if v.DestinationAddress == nil {
		return fmt.Errorf("invalid nil key for DestinationAddress")
	}

	if v.TunnelId == nil {
		return fmt.Errorf("invalid nil key for TunnelId")
	}

	if v.LspId == nil {
		return fmt.Errorf("invalid nil key for LspId")
	}

	key := RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Key{
		SourceAddress:      *v.SourceAddress,
		DestinationAddress: *v.DestinationAddress,
		TunnelId:           *v.TunnelId,
		LspId:              *v.LspId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv4Lsp == nil {
		t.Ipv4Lsp = make(map[RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Key]*RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp)
	}

	if _, ok := t.Ipv4Lsp[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv4Lsp %v", key)
	}

	t.Ipv4Lsp[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the RsvpteRouter_LabelSwitchedPathDatabase
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RsvpteRouter_LabelSwitchedPathDatabase) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Ipv4Lsp {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RsvpteRouter_LabelSwitchedPathDatabase) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RsvpteRouter_LabelSwitchedPathDatabase"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RsvpteRouter_LabelSwitchedPathDatabase) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RsvpteRouter_LabelSwitchedPathDatabase) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RsvpteRouter_LabelSwitchedPathDatabase.
func (*RsvpteRouter_LabelSwitchedPathDatabase) ΛBelongingModule() string {
	return "open-traffic-generator-rsvp"
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp struct {
	DestinationAddress *string                                                        `path:"state/destination-address|destination-address" module:"open-traffic-generator-rsvp/open-traffic-generator-rsvp|open-traffic-generator-rsvp" shadow-path:"destination-address" shadow-module:"open-traffic-generator-rsvp"`
	Ero                map[uint64]*RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero `path:"state/ero" module:"open-traffic-generator-rsvp/open-traffic-generator-rsvp"`
	LabelIn            RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LabelIn_Union   `path:"state/label-in" module:"open-traffic-generator-rsvp/open-traffic-generator-rsvp"`
	LabelOut           RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LabelOut_Union  `path:"state/label-out" module:"open-traffic-generator-rsvp/open-traffic-generator-rsvp"`
	LastFlapReason     E_Ipv4Lsp_LastFlapReason                                       `path:"state/last-flap-reason" module:"open-traffic-generator-rsvp/open-traffic-generator-rsvp"`
	LspId              *uint16                                                        `path:"state/lsp-id|lsp-id" module:"open-traffic-generator-rsvp/open-traffic-generator-rsvp|open-traffic-generator-rsvp" shadow-path:"lsp-id" shadow-module:"open-traffic-generator-rsvp"`
	Rro                map[uint8]*RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro  `path:"state/rro" module:"open-traffic-generator-rsvp/open-traffic-generator-rsvp"`
	SessionName        *string                                                        `path:"state/session-name" module:"open-traffic-generator-rsvp/open-traffic-generator-rsvp"`
	SessionStatus      E_Ipv4Lsp_SessionStatus                                        `path:"state/session-status" module:"open-traffic-generator-rsvp/open-traffic-generator-rsvp"`
	SourceAddress      *string                                                        `path:"state/source-address|source-address" module:"open-traffic-generator-rsvp/open-traffic-generator-rsvp|open-traffic-generator-rsvp" shadow-path:"source-address" shadow-module:"open-traffic-generator-rsvp"`
	TunnelId           *uint16                                                        `path:"state/tunnel-id|tunnel-id" module:"open-traffic-generator-rsvp/open-traffic-generator-rsvp|open-traffic-generator-rsvp" shadow-path:"tunnel-id" shadow-module:"open-traffic-generator-rsvp"`
	UpTime             *uint32                                                        `path:"state/up-time" module:"open-traffic-generator-rsvp/open-traffic-generator-rsvp"`
}

// IsYANGGoStruct ensures that RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) IsYANGGoStruct() {}

// NewEro creates a new entry in the Ero list of the
// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp struct. The keys of the list are populated from the input
// arguments.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) NewEro(Index uint64) (*RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ero == nil {
		t.Ero = make(map[uint64]*RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ero[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ero", key)
	}

	t.Ero[key] = &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero{
		Index: &Index,
	}

	return t.Ero[key], nil
}

// RenameEro renames an entry in the list Ero within
// the RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) RenameEro(oldK, newK uint64) error {
	if _, ok := t.Ero[newK]; ok {
		return fmt.Errorf("key %v already exists in Ero", newK)
	}

	e, ok := t.Ero[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ero", oldK)
	}
	e.Index = &newK

	t.Ero[newK] = e
	delete(t.Ero, oldK)
	return nil
}

// GetOrCreateEroMap returns the list (map) from RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp.
//
// It initializes the field if not already initialized.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) GetOrCreateEroMap() map[uint64]*RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero {
	if t.Ero == nil {
		t.Ero = make(map[uint64]*RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero)
	}
	return t.Ero
}

// GetOrCreateEro retrieves the value with the specified keys from
// the receiver RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) GetOrCreateEro(Index uint64) *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero {

	key := Index

	if v, ok := t.Ero[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEro(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEro got unexpected error: %v", err))
	}
	return v
}

// GetEro retrieves the value with the specified key from
// the Ero map field of RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) GetEro(Index uint64) *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Ero[key]; ok {
		return lm
	}
	return nil
}

// DeleteEro deletes the value with the specified keys from
// the receiver RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp. If there is no such element, the function
// is a no-op.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) DeleteEro(Index uint64) {
	key := Index

	delete(t.Ero, key)
}

// AppendEro appends the supplied RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero struct to the
// list Ero of RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp. If the key value(s) specified in
// the supplied RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero already exist in the list, an error is
// returned.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) AppendEro(v *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ero == nil {
		t.Ero = make(map[uint64]*RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero)
	}

	if _, ok := t.Ero[key]; ok {
		return fmt.Errorf("duplicate key for list Ero %v", key)
	}

	t.Ero[key] = v
	return nil
}

// NewRro creates a new entry in the Rro list of the
// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp struct. The keys of the list are populated from the input
// arguments.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) NewRro(Index uint8) (*RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Rro == nil {
		t.Rro = make(map[uint8]*RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Rro[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Rro", key)
	}

	t.Rro[key] = &RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro{
		Index: &Index,
	}

	return t.Rro[key], nil
}

// RenameRro renames an entry in the list Rro within
// the RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) RenameRro(oldK, newK uint8) error {
	if _, ok := t.Rro[newK]; ok {
		return fmt.Errorf("key %v already exists in Rro", newK)
	}

	e, ok := t.Rro[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Rro", oldK)
	}
	e.Index = &newK

	t.Rro[newK] = e
	delete(t.Rro, oldK)
	return nil
}

// GetOrCreateRroMap returns the list (map) from RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp.
//
// It initializes the field if not already initialized.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) GetOrCreateRroMap() map[uint8]*RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro {
	if t.Rro == nil {
		t.Rro = make(map[uint8]*RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro)
	}
	return t.Rro
}

// GetOrCreateRro retrieves the value with the specified keys from
// the receiver RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) GetOrCreateRro(Index uint8) *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro {

	key := Index

	if v, ok := t.Rro[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRro(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRro got unexpected error: %v", err))
	}
	return v
}

// GetRro retrieves the value with the specified key from
// the Rro map field of RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) GetRro(Index uint8) *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Rro[key]; ok {
		return lm
	}
	return nil
}

// DeleteRro deletes the value with the specified keys from
// the receiver RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp. If there is no such element, the function
// is a no-op.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) DeleteRro(Index uint8) {
	key := Index

	delete(t.Rro, key)
}

// AppendRro appends the supplied RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro struct to the
// list Rro of RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp. If the key value(s) specified in
// the supplied RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro already exist in the list, an error is
// returned.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) AppendRro(v *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Rro == nil {
		t.Rro = make(map[uint8]*RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro)
	}

	if _, ok := t.Rro[key]; ok {
		return fmt.Errorf("duplicate key for list Rro %v", key)
	}

	t.Rro[key] = v
	return nil
}

// GetDestinationAddress retrieves the value of the leaf DestinationAddress from the RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationAddress is set, it can
// safely use t.GetDestinationAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationAddress == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) GetDestinationAddress() string {
	if t == nil || t.DestinationAddress == nil {
		return ""
	}
	return *t.DestinationAddress
}

// GetLabelIn retrieves the value of the leaf LabelIn from the RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIn is set, it can
// safely use t.GetLabelIn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIn == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) GetLabelIn() RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LabelIn_Union {
	if t == nil || t.LabelIn == nil {
		return nil
	}
	return t.LabelIn
}

// GetLabelOut retrieves the value of the leaf LabelOut from the RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelOut is set, it can
// safely use t.GetLabelOut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelOut == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) GetLabelOut() RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LabelOut_Union {
	if t == nil || t.LabelOut == nil {
		return nil
	}
	return t.LabelOut
}

// GetLastFlapReason retrieves the value of the leaf LastFlapReason from the RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastFlapReason is set, it can
// safely use t.GetLastFlapReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastFlapReason == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) GetLastFlapReason() E_Ipv4Lsp_LastFlapReason {
	if t == nil || t.LastFlapReason == 0 {
		return 0
	}
	return t.LastFlapReason
}

// GetLspId retrieves the value of the leaf LspId from the RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspId is set, it can
// safely use t.GetLspId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspId == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) GetLspId() uint16 {
	if t == nil || t.LspId == nil {
		return 0
	}
	return *t.LspId
}

// GetSessionName retrieves the value of the leaf SessionName from the RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionName is set, it can
// safely use t.GetSessionName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionName == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) GetSessionName() string {
	if t == nil || t.SessionName == nil {
		return ""
	}
	return *t.SessionName
}

// GetSessionStatus retrieves the value of the leaf SessionStatus from the RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionStatus is set, it can
// safely use t.GetSessionStatus() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionStatus == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) GetSessionStatus() E_Ipv4Lsp_SessionStatus {
	if t == nil || t.SessionStatus == 0 {
		return 0
	}
	return t.SessionStatus
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// GetTunnelId retrieves the value of the leaf TunnelId from the RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelId is set, it can
// safely use t.GetTunnelId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelId == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) GetTunnelId() uint16 {
	if t == nil || t.TunnelId == nil {
		return 0
	}
	return *t.TunnelId
}

// GetUpTime retrieves the value of the leaf UpTime from the RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UpTime is set, it can
// safely use t.GetUpTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UpTime == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) GetUpTime() uint32 {
	if t == nil || t.UpTime == nil {
		return 0
	}
	return *t.UpTime
}

// SetDestinationAddress sets the value of the leaf DestinationAddress in the RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp
// struct.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) SetDestinationAddress(v string) {
	t.DestinationAddress = &v
}

// SetLabelIn sets the value of the leaf LabelIn in the RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp
// struct.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) SetLabelIn(v RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LabelIn_Union) {
	t.LabelIn = v
}

// SetLabelOut sets the value of the leaf LabelOut in the RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp
// struct.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) SetLabelOut(v RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_LabelOut_Union) {
	t.LabelOut = v
}

// SetLastFlapReason sets the value of the leaf LastFlapReason in the RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp
// struct.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) SetLastFlapReason(v E_Ipv4Lsp_LastFlapReason) {
	t.LastFlapReason = v
}

// SetLspId sets the value of the leaf LspId in the RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp
// struct.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) SetLspId(v uint16) {
	t.LspId = &v
}

// SetSessionName sets the value of the leaf SessionName in the RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp
// struct.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) SetSessionName(v string) {
	t.SessionName = &v
}

// SetSessionStatus sets the value of the leaf SessionStatus in the RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp
// struct.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) SetSessionStatus(v E_Ipv4Lsp_SessionStatus) {
	t.SessionStatus = v
}

// SetSourceAddress sets the value of the leaf SourceAddress in the RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp
// struct.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) SetSourceAddress(v string) {
	t.SourceAddress = &v
}

// SetTunnelId sets the value of the leaf TunnelId in the RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp
// struct.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) SetTunnelId(v uint16) {
	t.TunnelId = &v
}

// SetUpTime sets the value of the leaf UpTime in the RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp
// struct.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) SetUpTime(v uint32) {
	t.UpTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Ero {
		e.PopulateDefaults()
	}
	for _, e := range t.Rro {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp struct, which is a YANG list entry.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DestinationAddress == nil {
		return nil, fmt.Errorf("nil value for key DestinationAddress")
	}

	if t.LspId == nil {
		return nil, fmt.Errorf("nil value for key LspId")
	}

	if t.SourceAddress == nil {
		return nil, fmt.Errorf("nil value for key SourceAddress")
	}

	if t.TunnelId == nil {
		return nil, fmt.Errorf("nil value for key TunnelId")
	}

	return map[string]interface{}{
		"destination-address": *t.DestinationAddress,
		"lsp-id":              *t.LspId,
		"source-address":      *t.SourceAddress,
		"tunnel-id":           *t.TunnelId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp.
func (*RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp) ΛBelongingModule() string {
	return "open-traffic-generator-rsvp"
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/ero YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero struct {
	Asn    *uint32    `path:"state/asn" module:"open-traffic-generator-rsvp/open-traffic-generator-rsvp"`
	Index  *uint64    `path:"state/index|index" module:"open-traffic-generator-rsvp/open-traffic-generator-rsvp|open-traffic-generator-rsvp" shadow-path:"index" shadow-module:"open-traffic-generator-rsvp"`
	Prefix *string    `path:"state/prefix" module:"open-traffic-generator-rsvp/open-traffic-generator-rsvp"`
	Type   E_Ero_Type `path:"state/type" module:"open-traffic-generator-rsvp/open-traffic-generator-rsvp"`
}

// IsYANGGoStruct ensures that RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero) IsYANGGoStruct() {}

// GetAsn retrieves the value of the leaf Asn from the RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Asn is set, it can
// safely use t.GetAsn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Asn == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero) GetAsn() uint32 {
	if t == nil || t.Asn == nil {
		return 0
	}
	return *t.Asn
}

// GetIndex retrieves the value of the leaf Index from the RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero) GetIndex() uint64 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetPrefix retrieves the value of the leaf Prefix from the RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetType retrieves the value of the leaf Type from the RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero) GetType() E_Ero_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// SetAsn sets the value of the leaf Asn in the RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero
// struct.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero) SetAsn(v uint32) {
	t.Asn = &v
}

// SetIndex sets the value of the leaf Index in the RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero
// struct.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero) SetIndex(v uint64) {
	t.Index = &v
}

// SetPrefix sets the value of the leaf Prefix in the RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero
// struct.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero) SetPrefix(v string) {
	t.Prefix = &v
}

// SetType sets the value of the leaf Type in the RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero
// struct.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero) SetType(v E_Ero_Type) {
	t.Type = v
}

// PopulateDefaults recursively populates unset leaf fields in the RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero struct, which is a YANG list entry.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero.
func (*RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Ero) ΛBelongingModule() string {
	return "open-traffic-generator-rsvp"
}

// RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro represents the /open-traffic-generator-rsvp/rsvpte-routers/rsvpte-router/state/label-switched-path-database/lsps/ipv4-lsp/state/rro YANG schema element.
type RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro struct {
	Address       *string                                                                `path:"state/address" module:"open-traffic-generator-rsvp/open-traffic-generator-rsvp"`
	Index         *uint8                                                                 `path:"state/index|index" module:"open-traffic-generator-rsvp/open-traffic-generator-rsvp|open-traffic-generator-rsvp" shadow-path:"index" shadow-module:"open-traffic-generator-rsvp"`
	ReportedLabel RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro_ReportedLabel_Union `path:"state/reported-label" module:"open-traffic-generator-rsvp/open-traffic-generator-rsvp"`
}

// IsYANGGoStruct ensures that RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIndex retrieves the value of the leaf Index from the RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro) GetIndex() uint8 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetReportedLabel retrieves the value of the leaf ReportedLabel from the RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReportedLabel is set, it can
// safely use t.GetReportedLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReportedLabel == nil' before retrieving the leaf's value.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro) GetReportedLabel() RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro_ReportedLabel_Union {
	if t == nil || t.ReportedLabel == nil {
		return nil
	}
	return t.ReportedLabel
}

// SetAddress sets the value of the leaf Address in the RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro
// struct.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro) SetAddress(v string) {
	t.Address = &v
}

// SetIndex sets the value of the leaf Index in the RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro
// struct.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro) SetIndex(v uint8) {
	t.Index = &v
}

// SetReportedLabel sets the value of the leaf ReportedLabel in the RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro
// struct.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro) SetReportedLabel(v RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro_ReportedLabel_Union) {
	t.ReportedLabel = v
}

// PopulateDefaults recursively populates unset leaf fields in the RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro struct, which is a YANG list entry.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro.
func (*RsvpteRouter_LabelSwitchedPathDatabase_Ipv4Lsp_Rro) ΛBelongingModule() string {
	return "open-traffic-generator-rsvp"
}

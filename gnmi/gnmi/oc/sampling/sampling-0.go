/*
Package sampling is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.20)
using the following YANG input files:
  - gnmi-collector-metadata.yang
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-common.yang
  - public/release/models/aft/openconfig-aft-ethernet.yang
  - public/release/models/aft/openconfig-aft-ipv4.yang
  - public/release/models/aft/openconfig-aft-ipv6.yang
  - public/release/models/aft/openconfig-aft-mpls.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-pf.yang
  - public/release/models/aft/openconfig-aft-state-synced.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft-types.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/ate/openconfig-ate-flow.yang
  - public/release/models/ate/openconfig-ate-intf.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/interfaces/openconfig-if-rates.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-terminal-device.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-pf-forwarding-policies.yang
  - public/release/models/policy-forwarding/openconfig-pf-interfaces.yang
  - public/release/models/policy-forwarding/openconfig-pf-path-groups.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-routing-policy.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package sampling

import (
	oc "github.com/openconfig/ondatra/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// SamplingPath represents the /openconfig-sampling/sampling YANG schema element.
type SamplingPath struct {
	*ygnmi.NodePath
}

// SamplingPathAny represents the wildcard version of the /openconfig-sampling/sampling YANG schema element.
type SamplingPathAny struct {
	*ygnmi.NodePath
}

// Sflow (container): Top-level container for sFlow data.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "sflow"
//	Path from root:       "/sampling/sflow"
func (n *SamplingPath) Sflow() *Sampling_SflowPath {
	ps := &Sampling_SflowPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"sflow"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Sflow (container): Top-level container for sFlow data.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "sflow"
//	Path from root:       "/sampling/sflow"
func (n *SamplingPathAny) Sflow() *Sampling_SflowPathAny {
	ps := &Sampling_SflowPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sflow"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *SamplingPath) State() ygnmi.SingletonQuery[*oc.Sampling] {
	return ygnmi.NewSingletonQuery[*oc.Sampling](
		"Sampling",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *SamplingPathAny) State() ygnmi.WildcardQuery[*oc.Sampling] {
	return ygnmi.NewWildcardQuery[*oc.Sampling](
		"Sampling",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *SamplingPath) Config() ygnmi.ConfigQuery[*oc.Sampling] {
	return ygnmi.NewConfigQuery[*oc.Sampling](
		"Sampling",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *SamplingPathAny) Config() ygnmi.WildcardQuery[*oc.Sampling] {
	return ygnmi.NewWildcardQuery[*oc.Sampling](
		"Sampling",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Sampling_Sflow_AgentIdIpv4Path represents the /openconfig-sampling/sampling/sflow/state/agent-id-ipv4 YANG schema element.
type Sampling_Sflow_AgentIdIpv4Path struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Sampling_Sflow_AgentIdIpv4PathAny represents the wildcard version of the /openconfig-sampling/sampling/sflow/state/agent-id-ipv4 YANG schema element.
type Sampling_Sflow_AgentIdIpv4PathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "state/agent-id-ipv4"
//	Path from root:       "/sampling/sflow/state/agent-id-ipv4"
func (n *Sampling_Sflow_AgentIdIpv4Path) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Sampling_Sflow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "agent-id-ipv4"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Sampling_Sflow).AgentIdIpv4
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "state/agent-id-ipv4"
//	Path from root:       "/sampling/sflow/state/agent-id-ipv4"
func (n *Sampling_Sflow_AgentIdIpv4PathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Sampling_Sflow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "agent-id-ipv4"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Sampling_Sflow).AgentIdIpv4
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "config/agent-id-ipv4"
//	Path from root:       "/sampling/sflow/config/agent-id-ipv4"
func (n *Sampling_Sflow_AgentIdIpv4Path) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Sampling_Sflow",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "agent-id-ipv4"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Sampling_Sflow).AgentIdIpv4
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "config/agent-id-ipv4"
//	Path from root:       "/sampling/sflow/config/agent-id-ipv4"
func (n *Sampling_Sflow_AgentIdIpv4PathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Sampling_Sflow",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "agent-id-ipv4"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Sampling_Sflow).AgentIdIpv4
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Sampling_Sflow_AgentIdIpv6Path represents the /openconfig-sampling/sampling/sflow/state/agent-id-ipv6 YANG schema element.
type Sampling_Sflow_AgentIdIpv6Path struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Sampling_Sflow_AgentIdIpv6PathAny represents the wildcard version of the /openconfig-sampling/sampling/sflow/state/agent-id-ipv6 YANG schema element.
type Sampling_Sflow_AgentIdIpv6PathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "state/agent-id-ipv6"
//	Path from root:       "/sampling/sflow/state/agent-id-ipv6"
func (n *Sampling_Sflow_AgentIdIpv6Path) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Sampling_Sflow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "agent-id-ipv6"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Sampling_Sflow).AgentIdIpv6
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "state/agent-id-ipv6"
//	Path from root:       "/sampling/sflow/state/agent-id-ipv6"
func (n *Sampling_Sflow_AgentIdIpv6PathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Sampling_Sflow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "agent-id-ipv6"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Sampling_Sflow).AgentIdIpv6
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "config/agent-id-ipv6"
//	Path from root:       "/sampling/sflow/config/agent-id-ipv6"
func (n *Sampling_Sflow_AgentIdIpv6Path) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Sampling_Sflow",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "agent-id-ipv6"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Sampling_Sflow).AgentIdIpv6
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "config/agent-id-ipv6"
//	Path from root:       "/sampling/sflow/config/agent-id-ipv6"
func (n *Sampling_Sflow_AgentIdIpv6PathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Sampling_Sflow",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "agent-id-ipv6"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Sampling_Sflow).AgentIdIpv6
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Sampling_Sflow_DscpPath represents the /openconfig-sampling/sampling/sflow/state/dscp YANG schema element.
type Sampling_Sflow_DscpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Sampling_Sflow_DscpPathAny represents the wildcard version of the /openconfig-sampling/sampling/sflow/state/dscp YANG schema element.
type Sampling_Sflow_DscpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "state/dscp"
//	Path from root:       "/sampling/sflow/state/dscp"
func (n *Sampling_Sflow_DscpPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Sampling_Sflow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Sampling_Sflow).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "state/dscp"
//	Path from root:       "/sampling/sflow/state/dscp"
func (n *Sampling_Sflow_DscpPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Sampling_Sflow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Sampling_Sflow).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "config/dscp"
//	Path from root:       "/sampling/sflow/config/dscp"
func (n *Sampling_Sflow_DscpPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Sampling_Sflow",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Sampling_Sflow).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "config/dscp"
//	Path from root:       "/sampling/sflow/config/dscp"
func (n *Sampling_Sflow_DscpPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Sampling_Sflow",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Sampling_Sflow).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Sampling_Sflow_EgressSamplingRatePath represents the /openconfig-sampling/sampling/sflow/state/egress-sampling-rate YANG schema element.
type Sampling_Sflow_EgressSamplingRatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Sampling_Sflow_EgressSamplingRatePathAny represents the wildcard version of the /openconfig-sampling/sampling/sflow/state/egress-sampling-rate YANG schema element.
type Sampling_Sflow_EgressSamplingRatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "state/egress-sampling-rate"
//	Path from root:       "/sampling/sflow/state/egress-sampling-rate"
func (n *Sampling_Sflow_EgressSamplingRatePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Sampling_Sflow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "egress-sampling-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Sampling_Sflow).EgressSamplingRate
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "state/egress-sampling-rate"
//	Path from root:       "/sampling/sflow/state/egress-sampling-rate"
func (n *Sampling_Sflow_EgressSamplingRatePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Sampling_Sflow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "egress-sampling-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Sampling_Sflow).EgressSamplingRate
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "config/egress-sampling-rate"
//	Path from root:       "/sampling/sflow/config/egress-sampling-rate"
func (n *Sampling_Sflow_EgressSamplingRatePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Sampling_Sflow",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "egress-sampling-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Sampling_Sflow).EgressSamplingRate
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "config/egress-sampling-rate"
//	Path from root:       "/sampling/sflow/config/egress-sampling-rate"
func (n *Sampling_Sflow_EgressSamplingRatePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Sampling_Sflow",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "egress-sampling-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Sampling_Sflow).EgressSamplingRate
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Sampling_Sflow_EnabledPath represents the /openconfig-sampling/sampling/sflow/state/enabled YANG schema element.
type Sampling_Sflow_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Sampling_Sflow_EnabledPathAny represents the wildcard version of the /openconfig-sampling/sampling/sflow/state/enabled YANG schema element.
type Sampling_Sflow_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "state/enabled"
//	Path from root:       "/sampling/sflow/state/enabled"
func (n *Sampling_Sflow_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Sampling_Sflow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Sampling_Sflow).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "state/enabled"
//	Path from root:       "/sampling/sflow/state/enabled"
func (n *Sampling_Sflow_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Sampling_Sflow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Sampling_Sflow).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "config/enabled"
//	Path from root:       "/sampling/sflow/config/enabled"
func (n *Sampling_Sflow_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Sampling_Sflow",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Sampling_Sflow).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "config/enabled"
//	Path from root:       "/sampling/sflow/config/enabled"
func (n *Sampling_Sflow_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Sampling_Sflow",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Sampling_Sflow).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Sampling_Sflow_IngressSamplingRatePath represents the /openconfig-sampling/sampling/sflow/state/ingress-sampling-rate YANG schema element.
type Sampling_Sflow_IngressSamplingRatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Sampling_Sflow_IngressSamplingRatePathAny represents the wildcard version of the /openconfig-sampling/sampling/sflow/state/ingress-sampling-rate YANG schema element.
type Sampling_Sflow_IngressSamplingRatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "state/ingress-sampling-rate"
//	Path from root:       "/sampling/sflow/state/ingress-sampling-rate"
func (n *Sampling_Sflow_IngressSamplingRatePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Sampling_Sflow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ingress-sampling-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Sampling_Sflow).IngressSamplingRate
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "state/ingress-sampling-rate"
//	Path from root:       "/sampling/sflow/state/ingress-sampling-rate"
func (n *Sampling_Sflow_IngressSamplingRatePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Sampling_Sflow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ingress-sampling-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Sampling_Sflow).IngressSamplingRate
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "config/ingress-sampling-rate"
//	Path from root:       "/sampling/sflow/config/ingress-sampling-rate"
func (n *Sampling_Sflow_IngressSamplingRatePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Sampling_Sflow",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ingress-sampling-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Sampling_Sflow).IngressSamplingRate
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "config/ingress-sampling-rate"
//	Path from root:       "/sampling/sflow/config/ingress-sampling-rate"
func (n *Sampling_Sflow_IngressSamplingRatePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Sampling_Sflow",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ingress-sampling-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Sampling_Sflow).IngressSamplingRate
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Sampling_Sflow_PollingIntervalPath represents the /openconfig-sampling/sampling/sflow/state/polling-interval YANG schema element.
type Sampling_Sflow_PollingIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Sampling_Sflow_PollingIntervalPathAny represents the wildcard version of the /openconfig-sampling/sampling/sflow/state/polling-interval YANG schema element.
type Sampling_Sflow_PollingIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "state/polling-interval"
//	Path from root:       "/sampling/sflow/state/polling-interval"
func (n *Sampling_Sflow_PollingIntervalPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Sampling_Sflow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "polling-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Sampling_Sflow).PollingInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "state/polling-interval"
//	Path from root:       "/sampling/sflow/state/polling-interval"
func (n *Sampling_Sflow_PollingIntervalPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Sampling_Sflow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "polling-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Sampling_Sflow).PollingInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "config/polling-interval"
//	Path from root:       "/sampling/sflow/config/polling-interval"
func (n *Sampling_Sflow_PollingIntervalPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Sampling_Sflow",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "polling-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Sampling_Sflow).PollingInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "config/polling-interval"
//	Path from root:       "/sampling/sflow/config/polling-interval"
func (n *Sampling_Sflow_PollingIntervalPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Sampling_Sflow",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "polling-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Sampling_Sflow).PollingInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Sampling_Sflow_SampleSizePath represents the /openconfig-sampling/sampling/sflow/state/sample-size YANG schema element.
type Sampling_Sflow_SampleSizePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Sampling_Sflow_SampleSizePathAny represents the wildcard version of the /openconfig-sampling/sampling/sflow/state/sample-size YANG schema element.
type Sampling_Sflow_SampleSizePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "state/sample-size"
//	Path from root:       "/sampling/sflow/state/sample-size"
func (n *Sampling_Sflow_SampleSizePath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Sampling_Sflow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sample-size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Sampling_Sflow).SampleSize
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "state/sample-size"
//	Path from root:       "/sampling/sflow/state/sample-size"
func (n *Sampling_Sflow_SampleSizePathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Sampling_Sflow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sample-size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Sampling_Sflow).SampleSize
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "config/sample-size"
//	Path from root:       "/sampling/sflow/config/sample-size"
func (n *Sampling_Sflow_SampleSizePath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Sampling_Sflow",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "sample-size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Sampling_Sflow).SampleSize
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "config/sample-size"
//	Path from root:       "/sampling/sflow/config/sample-size"
func (n *Sampling_Sflow_SampleSizePathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Sampling_Sflow",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "sample-size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Sampling_Sflow).SampleSize
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Sampling_SflowPath represents the /openconfig-sampling/sampling/sflow YANG schema element.
type Sampling_SflowPath struct {
	*ygnmi.NodePath
}

// Sampling_SflowPathAny represents the wildcard version of the /openconfig-sampling/sampling/sflow YANG schema element.
type Sampling_SflowPathAny struct {
	*ygnmi.NodePath
}

// AgentIdIpv4 (leaf): Sets the agent identifier for IPv4 PDUs.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/agent-id-ipv4"
//	Path from root:       "/sampling/sflow/*/agent-id-ipv4"
func (n *Sampling_SflowPath) AgentIdIpv4() *Sampling_Sflow_AgentIdIpv4Path {
	ps := &Sampling_Sflow_AgentIdIpv4Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "agent-id-ipv4"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AgentIdIpv4 (leaf): Sets the agent identifier for IPv4 PDUs.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/agent-id-ipv4"
//	Path from root:       "/sampling/sflow/*/agent-id-ipv4"
func (n *Sampling_SflowPathAny) AgentIdIpv4() *Sampling_Sflow_AgentIdIpv4PathAny {
	ps := &Sampling_Sflow_AgentIdIpv4PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "agent-id-ipv4"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AgentIdIpv6 (leaf): Sets the agent identifier for IPv6 PDUs.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/agent-id-ipv6"
//	Path from root:       "/sampling/sflow/*/agent-id-ipv6"
func (n *Sampling_SflowPath) AgentIdIpv6() *Sampling_Sflow_AgentIdIpv6Path {
	ps := &Sampling_Sflow_AgentIdIpv6Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "agent-id-ipv6"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AgentIdIpv6 (leaf): Sets the agent identifier for IPv6 PDUs.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/agent-id-ipv6"
//	Path from root:       "/sampling/sflow/*/agent-id-ipv6"
func (n *Sampling_SflowPathAny) AgentIdIpv6() *Sampling_Sflow_AgentIdIpv6PathAny {
	ps := &Sampling_Sflow_AgentIdIpv6PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "agent-id-ipv6"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CollectorAny (list): List of sFlow collectors to send sampling data.  Packet
// samples are sent to all collectors specified.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "collectors/collector"
//	Path from root:       "/sampling/sflow/collectors/collector"
func (n *Sampling_SflowPath) CollectorAny() *Sampling_Sflow_CollectorPathAny {
	ps := &Sampling_Sflow_CollectorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"collectors", "collector"},
			map[string]interface{}{"address": "*", "port": "*"},
			n,
		),
	}
	return ps
}

// CollectorAny (list): List of sFlow collectors to send sampling data.  Packet
// samples are sent to all collectors specified.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "collectors/collector"
//	Path from root:       "/sampling/sflow/collectors/collector"
func (n *Sampling_SflowPathAny) CollectorAny() *Sampling_Sflow_CollectorPathAny {
	ps := &Sampling_Sflow_CollectorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"collectors", "collector"},
			map[string]interface{}{"address": "*", "port": "*"},
			n,
		),
	}
	return ps
}

// WithAddress sets Sampling_Sflow_CollectorPathAny's key "address" to the specified value.
// Address: string
func (n *Sampling_Sflow_CollectorPathAny) WithAddress(Address string) *Sampling_Sflow_CollectorPathAny {
	ygnmi.ModifyKey(n.NodePath, "address", Address)
	return n
}

// WithPort sets Sampling_Sflow_CollectorPathAny's key "port" to the specified value.
// Port: uint16
func (n *Sampling_Sflow_CollectorPathAny) WithPort(Port uint16) *Sampling_Sflow_CollectorPathAny {
	ygnmi.ModifyKey(n.NodePath, "port", Port)
	return n
}

// Collector (list): List of sFlow collectors to send sampling data.  Packet
// samples are sent to all collectors specified.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "collectors/collector"
//	Path from root:       "/sampling/sflow/collectors/collector"
//
//	Address: string
//	Port: uint16
func (n *Sampling_SflowPath) Collector(Address string, Port uint16) *Sampling_Sflow_CollectorPath {
	ps := &Sampling_Sflow_CollectorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"collectors", "collector"},
			map[string]interface{}{"address": Address, "port": Port},
			n,
		),
	}
	return ps
}

// Collector (list): List of sFlow collectors to send sampling data.  Packet
// samples are sent to all collectors specified.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "collectors/collector"
//	Path from root:       "/sampling/sflow/collectors/collector"
//
//	Address: string
//	Port: uint16
func (n *Sampling_SflowPathAny) Collector(Address string, Port uint16) *Sampling_Sflow_CollectorPathAny {
	ps := &Sampling_Sflow_CollectorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"collectors", "collector"},
			map[string]interface{}{"address": Address, "port": Port},
			n,
		),
	}
	return ps
}

// CollectorMap (list): List of sFlow collectors to send sampling data.  Packet
// samples are sent to all collectors specified.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "collectors/collector"
//	Path from root:       "/sampling/sflow/collectors/collector"
func (n *Sampling_SflowPath) CollectorMap() *Sampling_Sflow_CollectorPathMap {
	ps := &Sampling_Sflow_CollectorPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"collectors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// CollectorMap (list): List of sFlow collectors to send sampling data.  Packet
// samples are sent to all collectors specified.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "collectors/collector"
//	Path from root:       "/sampling/sflow/collectors/collector"
func (n *Sampling_SflowPathAny) CollectorMap() *Sampling_Sflow_CollectorPathMapAny {
	ps := &Sampling_Sflow_CollectorPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"collectors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Dscp (leaf): DSCP marking of packets generated by the sFlow subsystem
// on the network device.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/dscp"
//	Path from root:       "/sampling/sflow/*/dscp"
func (n *Sampling_SflowPath) Dscp() *Sampling_Sflow_DscpPath {
	ps := &Sampling_Sflow_DscpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dscp (leaf): DSCP marking of packets generated by the sFlow subsystem
// on the network device.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/dscp"
//	Path from root:       "/sampling/sflow/*/dscp"
func (n *Sampling_SflowPathAny) Dscp() *Sampling_Sflow_DscpPathAny {
	ps := &Sampling_Sflow_DscpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EgressSamplingRate (leaf): Sets the egress packet sampling rate.  The rate is expressed
// as an integer N, where the intended sampling rate is 1/N
// packets.  An implementation may implement the sampling rate as
// a statistical average, rather than a strict periodic sampling.
//
// The allowable sampling rate range is generally a property of
// the system, e.g., determined by the capability of the
// hardware.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/egress-sampling-rate"
//	Path from root:       "/sampling/sflow/*/egress-sampling-rate"
func (n *Sampling_SflowPath) EgressSamplingRate() *Sampling_Sflow_EgressSamplingRatePath {
	ps := &Sampling_Sflow_EgressSamplingRatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "egress-sampling-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EgressSamplingRate (leaf): Sets the egress packet sampling rate.  The rate is expressed
// as an integer N, where the intended sampling rate is 1/N
// packets.  An implementation may implement the sampling rate as
// a statistical average, rather than a strict periodic sampling.
//
// The allowable sampling rate range is generally a property of
// the system, e.g., determined by the capability of the
// hardware.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/egress-sampling-rate"
//	Path from root:       "/sampling/sflow/*/egress-sampling-rate"
func (n *Sampling_SflowPathAny) EgressSamplingRate() *Sampling_Sflow_EgressSamplingRatePathAny {
	ps := &Sampling_Sflow_EgressSamplingRatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "egress-sampling-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Enables or disables sFlow sampling for the device.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/enabled"
//	Path from root:       "/sampling/sflow/*/enabled"
func (n *Sampling_SflowPath) Enabled() *Sampling_Sflow_EnabledPath {
	ps := &Sampling_Sflow_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Enables or disables sFlow sampling for the device.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/enabled"
//	Path from root:       "/sampling/sflow/*/enabled"
func (n *Sampling_SflowPathAny) Enabled() *Sampling_Sflow_EnabledPathAny {
	ps := &Sampling_Sflow_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IngressSamplingRate (leaf): Sets the ingress packet sampling rate.  The rate is expressed
// as an integer N, where the intended sampling rate is 1/N
// packets.  An implementation may implement the sampling rate as
// a statistical average, rather than a strict periodic sampling.
//
// The allowable sampling rate range is generally a property of
// the system, e.g., determined by the capability of the
// hardware.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/ingress-sampling-rate"
//	Path from root:       "/sampling/sflow/*/ingress-sampling-rate"
func (n *Sampling_SflowPath) IngressSamplingRate() *Sampling_Sflow_IngressSamplingRatePath {
	ps := &Sampling_Sflow_IngressSamplingRatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ingress-sampling-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IngressSamplingRate (leaf): Sets the ingress packet sampling rate.  The rate is expressed
// as an integer N, where the intended sampling rate is 1/N
// packets.  An implementation may implement the sampling rate as
// a statistical average, rather than a strict periodic sampling.
//
// The allowable sampling rate range is generally a property of
// the system, e.g., determined by the capability of the
// hardware.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/ingress-sampling-rate"
//	Path from root:       "/sampling/sflow/*/ingress-sampling-rate"
func (n *Sampling_SflowPathAny) IngressSamplingRate() *Sampling_Sflow_IngressSamplingRatePathAny {
	ps := &Sampling_Sflow_IngressSamplingRatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ingress-sampling-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceAny (list): List of interfaces with sFlow data.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/sampling/sflow/interfaces/interface"
func (n *Sampling_SflowPath) InterfaceAny() *Sampling_Sflow_InterfacePathAny {
	ps := &Sampling_Sflow_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// InterfaceAny (list): List of interfaces with sFlow data.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/sampling/sflow/interfaces/interface"
func (n *Sampling_SflowPathAny) InterfaceAny() *Sampling_Sflow_InterfacePathAny {
	ps := &Sampling_Sflow_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Interface (list): List of interfaces with sFlow data.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/sampling/sflow/interfaces/interface"
//
//	Name: string
func (n *Sampling_SflowPath) Interface(Name string) *Sampling_Sflow_InterfacePath {
	ps := &Sampling_Sflow_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Interface (list): List of interfaces with sFlow data.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/sampling/sflow/interfaces/interface"
//
//	Name: string
func (n *Sampling_SflowPathAny) Interface(Name string) *Sampling_Sflow_InterfacePathAny {
	ps := &Sampling_Sflow_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): List of interfaces with sFlow data.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/sampling/sflow/interfaces/interface"
func (n *Sampling_SflowPath) InterfaceMap() *Sampling_Sflow_InterfacePathMap {
	ps := &Sampling_Sflow_InterfacePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): List of interfaces with sFlow data.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/sampling/sflow/interfaces/interface"
func (n *Sampling_SflowPathAny) InterfaceMap() *Sampling_Sflow_InterfacePathMapAny {
	ps := &Sampling_Sflow_InterfacePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PollingInterval (leaf): Sets the traffic sampling polling interval.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/polling-interval"
//	Path from root:       "/sampling/sflow/*/polling-interval"
func (n *Sampling_SflowPath) PollingInterval() *Sampling_Sflow_PollingIntervalPath {
	ps := &Sampling_Sflow_PollingIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "polling-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PollingInterval (leaf): Sets the traffic sampling polling interval.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/polling-interval"
//	Path from root:       "/sampling/sflow/*/polling-interval"
func (n *Sampling_SflowPathAny) PollingInterval() *Sampling_Sflow_PollingIntervalPathAny {
	ps := &Sampling_Sflow_PollingIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "polling-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SampleSize (leaf): Sets the maximum number of bytes to be copied from a
// sampled packet.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/sample-size"
//	Path from root:       "/sampling/sflow/*/sample-size"
func (n *Sampling_SflowPath) SampleSize() *Sampling_Sflow_SampleSizePath {
	ps := &Sampling_Sflow_SampleSizePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sample-size"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SampleSize (leaf): Sets the maximum number of bytes to be copied from a
// sampled packet.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/sample-size"
//	Path from root:       "/sampling/sflow/*/sample-size"
func (n *Sampling_SflowPathAny) SampleSize() *Sampling_Sflow_SampleSizePathAny {
	ps := &Sampling_Sflow_SampleSizePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sample-size"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Sampling_SflowPath) State() ygnmi.SingletonQuery[*oc.Sampling_Sflow] {
	return ygnmi.NewSingletonQuery[*oc.Sampling_Sflow](
		"Sampling_Sflow",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Sampling_SflowPathAny) State() ygnmi.WildcardQuery[*oc.Sampling_Sflow] {
	return ygnmi.NewWildcardQuery[*oc.Sampling_Sflow](
		"Sampling_Sflow",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Sampling_SflowPath) Config() ygnmi.ConfigQuery[*oc.Sampling_Sflow] {
	return ygnmi.NewConfigQuery[*oc.Sampling_Sflow](
		"Sampling_Sflow",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Sampling_SflowPathAny) Config() ygnmi.WildcardQuery[*oc.Sampling_Sflow] {
	return ygnmi.NewWildcardQuery[*oc.Sampling_Sflow](
		"Sampling_Sflow",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Sampling_Sflow_Collector_AddressPath represents the /openconfig-sampling/sampling/sflow/collectors/collector/state/address YANG schema element.
type Sampling_Sflow_Collector_AddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Sampling_Sflow_Collector_AddressPathAny represents the wildcard version of the /openconfig-sampling/sampling/sflow/collectors/collector/state/address YANG schema element.
type Sampling_Sflow_Collector_AddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "state/address"
//	Path from root:       "/sampling/sflow/collectors/collector/state/address"
func (n *Sampling_Sflow_Collector_AddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Sampling_Sflow_Collector",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Sampling_Sflow_Collector).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Collector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "state/address"
//	Path from root:       "/sampling/sflow/collectors/collector/state/address"
func (n *Sampling_Sflow_Collector_AddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Sampling_Sflow_Collector",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Sampling_Sflow_Collector).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Collector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "config/address"
//	Path from root:       "/sampling/sflow/collectors/collector/config/address"
func (n *Sampling_Sflow_Collector_AddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Sampling_Sflow_Collector",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Sampling_Sflow_Collector).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Collector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "config/address"
//	Path from root:       "/sampling/sflow/collectors/collector/config/address"
func (n *Sampling_Sflow_Collector_AddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Sampling_Sflow_Collector",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Sampling_Sflow_Collector).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Collector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Sampling_Sflow_Collector_NetworkInstancePath represents the /openconfig-sampling/sampling/sflow/collectors/collector/state/network-instance YANG schema element.
type Sampling_Sflow_Collector_NetworkInstancePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Sampling_Sflow_Collector_NetworkInstancePathAny represents the wildcard version of the /openconfig-sampling/sampling/sflow/collectors/collector/state/network-instance YANG schema element.
type Sampling_Sflow_Collector_NetworkInstancePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "state/network-instance"
//	Path from root:       "/sampling/sflow/collectors/collector/state/network-instance"
func (n *Sampling_Sflow_Collector_NetworkInstancePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Sampling_Sflow_Collector",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Sampling_Sflow_Collector).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Collector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "state/network-instance"
//	Path from root:       "/sampling/sflow/collectors/collector/state/network-instance"
func (n *Sampling_Sflow_Collector_NetworkInstancePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Sampling_Sflow_Collector",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Sampling_Sflow_Collector).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Collector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "config/network-instance"
//	Path from root:       "/sampling/sflow/collectors/collector/config/network-instance"
func (n *Sampling_Sflow_Collector_NetworkInstancePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Sampling_Sflow_Collector",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Sampling_Sflow_Collector).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Collector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "config/network-instance"
//	Path from root:       "/sampling/sflow/collectors/collector/config/network-instance"
func (n *Sampling_Sflow_Collector_NetworkInstancePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Sampling_Sflow_Collector",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Sampling_Sflow_Collector).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Collector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Sampling_Sflow_Collector_PacketsSentPath represents the /openconfig-sampling/sampling/sflow/collectors/collector/state/packets-sent YANG schema element.
type Sampling_Sflow_Collector_PacketsSentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Sampling_Sflow_Collector_PacketsSentPathAny represents the wildcard version of the /openconfig-sampling/sampling/sflow/collectors/collector/state/packets-sent YANG schema element.
type Sampling_Sflow_Collector_PacketsSentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "state/packets-sent"
//	Path from root:       "/sampling/sflow/collectors/collector/state/packets-sent"
func (n *Sampling_Sflow_Collector_PacketsSentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Sampling_Sflow_Collector",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "packets-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Sampling_Sflow_Collector).PacketsSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Collector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "state/packets-sent"
//	Path from root:       "/sampling/sflow/collectors/collector/state/packets-sent"
func (n *Sampling_Sflow_Collector_PacketsSentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Sampling_Sflow_Collector",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "packets-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Sampling_Sflow_Collector).PacketsSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Collector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Sampling_Sflow_Collector_PortPath represents the /openconfig-sampling/sampling/sflow/collectors/collector/state/port YANG schema element.
type Sampling_Sflow_Collector_PortPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Sampling_Sflow_Collector_PortPathAny represents the wildcard version of the /openconfig-sampling/sampling/sflow/collectors/collector/state/port YANG schema element.
type Sampling_Sflow_Collector_PortPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "state/port"
//	Path from root:       "/sampling/sflow/collectors/collector/state/port"
func (n *Sampling_Sflow_Collector_PortPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Sampling_Sflow_Collector",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Sampling_Sflow_Collector).Port
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Collector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "state/port"
//	Path from root:       "/sampling/sflow/collectors/collector/state/port"
func (n *Sampling_Sflow_Collector_PortPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Sampling_Sflow_Collector",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Sampling_Sflow_Collector).Port
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Collector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "config/port"
//	Path from root:       "/sampling/sflow/collectors/collector/config/port"
func (n *Sampling_Sflow_Collector_PortPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Sampling_Sflow_Collector",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Sampling_Sflow_Collector).Port
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Collector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "config/port"
//	Path from root:       "/sampling/sflow/collectors/collector/config/port"
func (n *Sampling_Sflow_Collector_PortPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Sampling_Sflow_Collector",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Sampling_Sflow_Collector).Port
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Collector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Sampling_Sflow_Collector_SourceAddressPath represents the /openconfig-sampling/sampling/sflow/collectors/collector/state/source-address YANG schema element.
type Sampling_Sflow_Collector_SourceAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Sampling_Sflow_Collector_SourceAddressPathAny represents the wildcard version of the /openconfig-sampling/sampling/sflow/collectors/collector/state/source-address YANG schema element.
type Sampling_Sflow_Collector_SourceAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "state/source-address"
//	Path from root:       "/sampling/sflow/collectors/collector/state/source-address"
func (n *Sampling_Sflow_Collector_SourceAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Sampling_Sflow_Collector",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Sampling_Sflow_Collector).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Collector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "state/source-address"
//	Path from root:       "/sampling/sflow/collectors/collector/state/source-address"
func (n *Sampling_Sflow_Collector_SourceAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Sampling_Sflow_Collector",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Sampling_Sflow_Collector).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Collector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "config/source-address"
//	Path from root:       "/sampling/sflow/collectors/collector/config/source-address"
func (n *Sampling_Sflow_Collector_SourceAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Sampling_Sflow_Collector",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Sampling_Sflow_Collector).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Collector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "config/source-address"
//	Path from root:       "/sampling/sflow/collectors/collector/config/source-address"
func (n *Sampling_Sflow_Collector_SourceAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Sampling_Sflow_Collector",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Sampling_Sflow_Collector).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Collector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Sampling_Sflow_CollectorPath represents the /openconfig-sampling/sampling/sflow/collectors/collector YANG schema element.
type Sampling_Sflow_CollectorPath struct {
	*ygnmi.NodePath
}

// Sampling_Sflow_CollectorPathAny represents the wildcard version of the /openconfig-sampling/sampling/sflow/collectors/collector YANG schema element.
type Sampling_Sflow_CollectorPathAny struct {
	*ygnmi.NodePath
}

// Sampling_Sflow_CollectorPathMap represents the /openconfig-sampling/sampling/sflow/collectors/collector YANG schema element.
type Sampling_Sflow_CollectorPathMap struct {
	*ygnmi.NodePath
}

// Sampling_Sflow_CollectorPathMapAny represents the wildcard version of the /openconfig-sampling/sampling/sflow/collectors/collector YANG schema element.
type Sampling_Sflow_CollectorPathMapAny struct {
	*ygnmi.NodePath
}

// Address (leaf): IPv4/IPv6 address of the sFlow collector.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/address"
//	Path from root:       "/sampling/sflow/collectors/collector/*/address"
func (n *Sampling_Sflow_CollectorPath) Address() *Sampling_Sflow_Collector_AddressPath {
	ps := &Sampling_Sflow_Collector_AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Address (leaf): IPv4/IPv6 address of the sFlow collector.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/address"
//	Path from root:       "/sampling/sflow/collectors/collector/*/address"
func (n *Sampling_Sflow_CollectorPathAny) Address() *Sampling_Sflow_Collector_AddressPathAny {
	ps := &Sampling_Sflow_Collector_AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NetworkInstance (leaf): Reference to the network instance used to reach the
// sFlow collector.  If uspecified, the collector destination
// is reachable in the default network instance.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/network-instance"
//	Path from root:       "/sampling/sflow/collectors/collector/*/network-instance"
func (n *Sampling_Sflow_CollectorPath) NetworkInstance() *Sampling_Sflow_Collector_NetworkInstancePath {
	ps := &Sampling_Sflow_Collector_NetworkInstancePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "network-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NetworkInstance (leaf): Reference to the network instance used to reach the
// sFlow collector.  If uspecified, the collector destination
// is reachable in the default network instance.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/network-instance"
//	Path from root:       "/sampling/sflow/collectors/collector/*/network-instance"
func (n *Sampling_Sflow_CollectorPathAny) NetworkInstance() *Sampling_Sflow_Collector_NetworkInstancePathAny {
	ps := &Sampling_Sflow_Collector_NetworkInstancePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "network-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PacketsSent (leaf): The total number of packets sampled and sent to the
// collector.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "state/packets-sent"
//	Path from root:       "/sampling/sflow/collectors/collector/state/packets-sent"
func (n *Sampling_Sflow_CollectorPath) PacketsSent() *Sampling_Sflow_Collector_PacketsSentPath {
	ps := &Sampling_Sflow_Collector_PacketsSentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "packets-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PacketsSent (leaf): The total number of packets sampled and sent to the
// collector.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "state/packets-sent"
//	Path from root:       "/sampling/sflow/collectors/collector/state/packets-sent"
func (n *Sampling_Sflow_CollectorPathAny) PacketsSent() *Sampling_Sflow_Collector_PacketsSentPathAny {
	ps := &Sampling_Sflow_Collector_PacketsSentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "packets-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Port (leaf): UDP port number for the sFlow collector.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/port"
//	Path from root:       "/sampling/sflow/collectors/collector/*/port"
func (n *Sampling_Sflow_CollectorPath) Port() *Sampling_Sflow_Collector_PortPath {
	ps := &Sampling_Sflow_Collector_PortPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Port (leaf): UDP port number for the sFlow collector.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/port"
//	Path from root:       "/sampling/sflow/collectors/collector/*/port"
func (n *Sampling_Sflow_CollectorPathAny) Port() *Sampling_Sflow_Collector_PortPathAny {
	ps := &Sampling_Sflow_Collector_PortPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): Sets the source IPv4/IPv6 address for sFlow datagrams sent
// to sFlow collectors.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/source-address"
//	Path from root:       "/sampling/sflow/collectors/collector/*/source-address"
func (n *Sampling_Sflow_CollectorPath) SourceAddress() *Sampling_Sflow_Collector_SourceAddressPath {
	ps := &Sampling_Sflow_Collector_SourceAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): Sets the source IPv4/IPv6 address for sFlow datagrams sent
// to sFlow collectors.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/source-address"
//	Path from root:       "/sampling/sflow/collectors/collector/*/source-address"
func (n *Sampling_Sflow_CollectorPathAny) SourceAddress() *Sampling_Sflow_Collector_SourceAddressPathAny {
	ps := &Sampling_Sflow_Collector_SourceAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Sampling_Sflow_CollectorPath) State() ygnmi.SingletonQuery[*oc.Sampling_Sflow_Collector] {
	return ygnmi.NewSingletonQuery[*oc.Sampling_Sflow_Collector](
		"Sampling_Sflow_Collector",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Sampling_Sflow_CollectorPathAny) State() ygnmi.WildcardQuery[*oc.Sampling_Sflow_Collector] {
	return ygnmi.NewWildcardQuery[*oc.Sampling_Sflow_Collector](
		"Sampling_Sflow_Collector",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Sampling_Sflow_CollectorPath) Config() ygnmi.ConfigQuery[*oc.Sampling_Sflow_Collector] {
	return ygnmi.NewConfigQuery[*oc.Sampling_Sflow_Collector](
		"Sampling_Sflow_Collector",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Sampling_Sflow_CollectorPathAny) Config() ygnmi.WildcardQuery[*oc.Sampling_Sflow_Collector] {
	return ygnmi.NewWildcardQuery[*oc.Sampling_Sflow_Collector](
		"Sampling_Sflow_Collector",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Sampling_Sflow_CollectorPathMap) State() ygnmi.SingletonQuery[map[oc.Sampling_Sflow_Collector_Key]*oc.Sampling_Sflow_Collector] {
	return ygnmi.NewSingletonQuery[map[oc.Sampling_Sflow_Collector_Key]*oc.Sampling_Sflow_Collector](
		"Sampling_Sflow",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.Sampling_Sflow_Collector_Key]*oc.Sampling_Sflow_Collector, bool) {
			ret := gs.(*oc.Sampling_Sflow).Collector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-sampling-sflow:collectors"},
			PostRelPath: []string{"openconfig-sampling-sflow:collector"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Sampling_Sflow_CollectorPathMapAny) State() ygnmi.WildcardQuery[map[oc.Sampling_Sflow_Collector_Key]*oc.Sampling_Sflow_Collector] {
	return ygnmi.NewWildcardQuery[map[oc.Sampling_Sflow_Collector_Key]*oc.Sampling_Sflow_Collector](
		"Sampling_Sflow",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.Sampling_Sflow_Collector_Key]*oc.Sampling_Sflow_Collector, bool) {
			ret := gs.(*oc.Sampling_Sflow).Collector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-sampling-sflow:collectors"},
			PostRelPath: []string{"openconfig-sampling-sflow:collector"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Sampling_Sflow_CollectorPathMap) Config() ygnmi.ConfigQuery[map[oc.Sampling_Sflow_Collector_Key]*oc.Sampling_Sflow_Collector] {
	return ygnmi.NewConfigQuery[map[oc.Sampling_Sflow_Collector_Key]*oc.Sampling_Sflow_Collector](
		"Sampling_Sflow",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.Sampling_Sflow_Collector_Key]*oc.Sampling_Sflow_Collector, bool) {
			ret := gs.(*oc.Sampling_Sflow).Collector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-sampling-sflow:collectors"},
			PostRelPath: []string{"openconfig-sampling-sflow:collector"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Sampling_Sflow_CollectorPathMapAny) Config() ygnmi.WildcardQuery[map[oc.Sampling_Sflow_Collector_Key]*oc.Sampling_Sflow_Collector] {
	return ygnmi.NewWildcardQuery[map[oc.Sampling_Sflow_Collector_Key]*oc.Sampling_Sflow_Collector](
		"Sampling_Sflow",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.Sampling_Sflow_Collector_Key]*oc.Sampling_Sflow_Collector, bool) {
			ret := gs.(*oc.Sampling_Sflow).Collector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-sampling-sflow:collectors"},
			PostRelPath: []string{"openconfig-sampling-sflow:collector"},
		},
	)
}

// Sampling_Sflow_Interface_EgressSamplingRatePath represents the /openconfig-sampling/sampling/sflow/interfaces/interface/state/egress-sampling-rate YANG schema element.
type Sampling_Sflow_Interface_EgressSamplingRatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Sampling_Sflow_Interface_EgressSamplingRatePathAny represents the wildcard version of the /openconfig-sampling/sampling/sflow/interfaces/interface/state/egress-sampling-rate YANG schema element.
type Sampling_Sflow_Interface_EgressSamplingRatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "state/egress-sampling-rate"
//	Path from root:       "/sampling/sflow/interfaces/interface/state/egress-sampling-rate"
func (n *Sampling_Sflow_Interface_EgressSamplingRatePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Sampling_Sflow_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "egress-sampling-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Sampling_Sflow_Interface).EgressSamplingRate
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "state/egress-sampling-rate"
//	Path from root:       "/sampling/sflow/interfaces/interface/state/egress-sampling-rate"
func (n *Sampling_Sflow_Interface_EgressSamplingRatePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Sampling_Sflow_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "egress-sampling-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Sampling_Sflow_Interface).EgressSamplingRate
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "config/egress-sampling-rate"
//	Path from root:       "/sampling/sflow/interfaces/interface/config/egress-sampling-rate"
func (n *Sampling_Sflow_Interface_EgressSamplingRatePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Sampling_Sflow_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "egress-sampling-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Sampling_Sflow_Interface).EgressSamplingRate
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "config/egress-sampling-rate"
//	Path from root:       "/sampling/sflow/interfaces/interface/config/egress-sampling-rate"
func (n *Sampling_Sflow_Interface_EgressSamplingRatePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Sampling_Sflow_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "egress-sampling-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Sampling_Sflow_Interface).EgressSamplingRate
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Sampling_Sflow_Interface_EnabledPath represents the /openconfig-sampling/sampling/sflow/interfaces/interface/state/enabled YANG schema element.
type Sampling_Sflow_Interface_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Sampling_Sflow_Interface_EnabledPathAny represents the wildcard version of the /openconfig-sampling/sampling/sflow/interfaces/interface/state/enabled YANG schema element.
type Sampling_Sflow_Interface_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "state/enabled"
//	Path from root:       "/sampling/sflow/interfaces/interface/state/enabled"
func (n *Sampling_Sflow_Interface_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Sampling_Sflow_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Sampling_Sflow_Interface).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "state/enabled"
//	Path from root:       "/sampling/sflow/interfaces/interface/state/enabled"
func (n *Sampling_Sflow_Interface_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Sampling_Sflow_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Sampling_Sflow_Interface).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "config/enabled"
//	Path from root:       "/sampling/sflow/interfaces/interface/config/enabled"
func (n *Sampling_Sflow_Interface_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Sampling_Sflow_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Sampling_Sflow_Interface).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "config/enabled"
//	Path from root:       "/sampling/sflow/interfaces/interface/config/enabled"
func (n *Sampling_Sflow_Interface_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Sampling_Sflow_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Sampling_Sflow_Interface).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Sampling_Sflow_Interface_IngressSamplingRatePath represents the /openconfig-sampling/sampling/sflow/interfaces/interface/state/ingress-sampling-rate YANG schema element.
type Sampling_Sflow_Interface_IngressSamplingRatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Sampling_Sflow_Interface_IngressSamplingRatePathAny represents the wildcard version of the /openconfig-sampling/sampling/sflow/interfaces/interface/state/ingress-sampling-rate YANG schema element.
type Sampling_Sflow_Interface_IngressSamplingRatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "state/ingress-sampling-rate"
//	Path from root:       "/sampling/sflow/interfaces/interface/state/ingress-sampling-rate"
func (n *Sampling_Sflow_Interface_IngressSamplingRatePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Sampling_Sflow_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ingress-sampling-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Sampling_Sflow_Interface).IngressSamplingRate
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "state/ingress-sampling-rate"
//	Path from root:       "/sampling/sflow/interfaces/interface/state/ingress-sampling-rate"
func (n *Sampling_Sflow_Interface_IngressSamplingRatePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Sampling_Sflow_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ingress-sampling-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Sampling_Sflow_Interface).IngressSamplingRate
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "config/ingress-sampling-rate"
//	Path from root:       "/sampling/sflow/interfaces/interface/config/ingress-sampling-rate"
func (n *Sampling_Sflow_Interface_IngressSamplingRatePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Sampling_Sflow_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ingress-sampling-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Sampling_Sflow_Interface).IngressSamplingRate
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "config/ingress-sampling-rate"
//	Path from root:       "/sampling/sflow/interfaces/interface/config/ingress-sampling-rate"
func (n *Sampling_Sflow_Interface_IngressSamplingRatePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Sampling_Sflow_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ingress-sampling-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Sampling_Sflow_Interface).IngressSamplingRate
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Sampling_Sflow_Interface_NamePath represents the /openconfig-sampling/sampling/sflow/interfaces/interface/state/name YANG schema element.
type Sampling_Sflow_Interface_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Sampling_Sflow_Interface_NamePathAny represents the wildcard version of the /openconfig-sampling/sampling/sflow/interfaces/interface/state/name YANG schema element.
type Sampling_Sflow_Interface_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "state/name"
//	Path from root:       "/sampling/sflow/interfaces/interface/state/name"
func (n *Sampling_Sflow_Interface_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Sampling_Sflow_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Sampling_Sflow_Interface).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "state/name"
//	Path from root:       "/sampling/sflow/interfaces/interface/state/name"
func (n *Sampling_Sflow_Interface_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Sampling_Sflow_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Sampling_Sflow_Interface).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "config/name"
//	Path from root:       "/sampling/sflow/interfaces/interface/config/name"
func (n *Sampling_Sflow_Interface_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Sampling_Sflow_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Sampling_Sflow_Interface).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "config/name"
//	Path from root:       "/sampling/sflow/interfaces/interface/config/name"
func (n *Sampling_Sflow_Interface_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Sampling_Sflow_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Sampling_Sflow_Interface).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Sampling_Sflow_Interface_PacketsSampledPath represents the /openconfig-sampling/sampling/sflow/interfaces/interface/state/packets-sampled YANG schema element.
type Sampling_Sflow_Interface_PacketsSampledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Sampling_Sflow_Interface_PacketsSampledPathAny represents the wildcard version of the /openconfig-sampling/sampling/sflow/interfaces/interface/state/packets-sampled YANG schema element.
type Sampling_Sflow_Interface_PacketsSampledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "state/packets-sampled"
//	Path from root:       "/sampling/sflow/interfaces/interface/state/packets-sampled"
func (n *Sampling_Sflow_Interface_PacketsSampledPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Sampling_Sflow_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "packets-sampled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Sampling_Sflow_Interface).PacketsSampled
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "state/packets-sampled"
//	Path from root:       "/sampling/sflow/interfaces/interface/state/packets-sampled"
func (n *Sampling_Sflow_Interface_PacketsSampledPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Sampling_Sflow_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "packets-sampled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Sampling_Sflow_Interface).PacketsSampled
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Sampling_Sflow_Interface_PollingIntervalPath represents the /openconfig-sampling/sampling/sflow/interfaces/interface/state/polling-interval YANG schema element.
type Sampling_Sflow_Interface_PollingIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Sampling_Sflow_Interface_PollingIntervalPathAny represents the wildcard version of the /openconfig-sampling/sampling/sflow/interfaces/interface/state/polling-interval YANG schema element.
type Sampling_Sflow_Interface_PollingIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "state/polling-interval"
//	Path from root:       "/sampling/sflow/interfaces/interface/state/polling-interval"
func (n *Sampling_Sflow_Interface_PollingIntervalPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Sampling_Sflow_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "polling-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Sampling_Sflow_Interface).PollingInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "state/polling-interval"
//	Path from root:       "/sampling/sflow/interfaces/interface/state/polling-interval"
func (n *Sampling_Sflow_Interface_PollingIntervalPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Sampling_Sflow_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "polling-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Sampling_Sflow_Interface).PollingInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "config/polling-interval"
//	Path from root:       "/sampling/sflow/interfaces/interface/config/polling-interval"
func (n *Sampling_Sflow_Interface_PollingIntervalPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Sampling_Sflow_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "polling-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Sampling_Sflow_Interface).PollingInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "config/polling-interval"
//	Path from root:       "/sampling/sflow/interfaces/interface/config/polling-interval"
func (n *Sampling_Sflow_Interface_PollingIntervalPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Sampling_Sflow_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "polling-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Sampling_Sflow_Interface).PollingInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Sampling_Sflow_InterfacePath represents the /openconfig-sampling/sampling/sflow/interfaces/interface YANG schema element.
type Sampling_Sflow_InterfacePath struct {
	*ygnmi.NodePath
}

// Sampling_Sflow_InterfacePathAny represents the wildcard version of the /openconfig-sampling/sampling/sflow/interfaces/interface YANG schema element.
type Sampling_Sflow_InterfacePathAny struct {
	*ygnmi.NodePath
}

// Sampling_Sflow_InterfacePathMap represents the /openconfig-sampling/sampling/sflow/interfaces/interface YANG schema element.
type Sampling_Sflow_InterfacePathMap struct {
	*ygnmi.NodePath
}

// Sampling_Sflow_InterfacePathMapAny represents the wildcard version of the /openconfig-sampling/sampling/sflow/interfaces/interface YANG schema element.
type Sampling_Sflow_InterfacePathMapAny struct {
	*ygnmi.NodePath
}

// EgressSamplingRate (leaf): Sets the egress packet sampling rate.  The rate is expressed
// as an integer N, where the intended sampling rate is 1/N
// packets.  An implementation may implement the sampling rate as
// a statistical average, rather than a strict periodic sampling.
//
// The allowable sampling rate range is generally a property of
// the system, e.g., determined by the capability of the
// hardware.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/egress-sampling-rate"
//	Path from root:       "/sampling/sflow/interfaces/interface/*/egress-sampling-rate"
func (n *Sampling_Sflow_InterfacePath) EgressSamplingRate() *Sampling_Sflow_Interface_EgressSamplingRatePath {
	ps := &Sampling_Sflow_Interface_EgressSamplingRatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "egress-sampling-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EgressSamplingRate (leaf): Sets the egress packet sampling rate.  The rate is expressed
// as an integer N, where the intended sampling rate is 1/N
// packets.  An implementation may implement the sampling rate as
// a statistical average, rather than a strict periodic sampling.
//
// The allowable sampling rate range is generally a property of
// the system, e.g., determined by the capability of the
// hardware.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/egress-sampling-rate"
//	Path from root:       "/sampling/sflow/interfaces/interface/*/egress-sampling-rate"
func (n *Sampling_Sflow_InterfacePathAny) EgressSamplingRate() *Sampling_Sflow_Interface_EgressSamplingRatePathAny {
	ps := &Sampling_Sflow_Interface_EgressSamplingRatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "egress-sampling-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Enables or disables sFlow on the interface.  If sFlow is
// globally disabled, this leaf is ignored.  If sFlow
// is globally enabled, this leaf may be used to disable it
// for a specific interface.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/enabled"
//	Path from root:       "/sampling/sflow/interfaces/interface/*/enabled"
func (n *Sampling_Sflow_InterfacePath) Enabled() *Sampling_Sflow_Interface_EnabledPath {
	ps := &Sampling_Sflow_Interface_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Enables or disables sFlow on the interface.  If sFlow is
// globally disabled, this leaf is ignored.  If sFlow
// is globally enabled, this leaf may be used to disable it
// for a specific interface.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/enabled"
//	Path from root:       "/sampling/sflow/interfaces/interface/*/enabled"
func (n *Sampling_Sflow_InterfacePathAny) Enabled() *Sampling_Sflow_Interface_EnabledPathAny {
	ps := &Sampling_Sflow_Interface_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IngressSamplingRate (leaf): Sets the ingress packet sampling rate.  The rate is expressed
// as an integer N, where the intended sampling rate is 1/N
// packets.  An implementation may implement the sampling rate as
// a statistical average, rather than a strict periodic sampling.
//
// The allowable sampling rate range is generally a property of
// the system, e.g., determined by the capability of the
// hardware.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/ingress-sampling-rate"
//	Path from root:       "/sampling/sflow/interfaces/interface/*/ingress-sampling-rate"
func (n *Sampling_Sflow_InterfacePath) IngressSamplingRate() *Sampling_Sflow_Interface_IngressSamplingRatePath {
	ps := &Sampling_Sflow_Interface_IngressSamplingRatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ingress-sampling-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IngressSamplingRate (leaf): Sets the ingress packet sampling rate.  The rate is expressed
// as an integer N, where the intended sampling rate is 1/N
// packets.  An implementation may implement the sampling rate as
// a statistical average, rather than a strict periodic sampling.
//
// The allowable sampling rate range is generally a property of
// the system, e.g., determined by the capability of the
// hardware.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/ingress-sampling-rate"
//	Path from root:       "/sampling/sflow/interfaces/interface/*/ingress-sampling-rate"
func (n *Sampling_Sflow_InterfacePathAny) IngressSamplingRate() *Sampling_Sflow_Interface_IngressSamplingRatePathAny {
	ps := &Sampling_Sflow_Interface_IngressSamplingRatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ingress-sampling-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Reference to the interface for sFlow configuration and
// state.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/name"
//	Path from root:       "/sampling/sflow/interfaces/interface/*/name"
func (n *Sampling_Sflow_InterfacePath) Name() *Sampling_Sflow_Interface_NamePath {
	ps := &Sampling_Sflow_Interface_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Reference to the interface for sFlow configuration and
// state.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/name"
//	Path from root:       "/sampling/sflow/interfaces/interface/*/name"
func (n *Sampling_Sflow_InterfacePathAny) Name() *Sampling_Sflow_Interface_NamePathAny {
	ps := &Sampling_Sflow_Interface_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PacketsSampled (leaf): Total number of packets sampled from the interface.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "state/packets-sampled"
//	Path from root:       "/sampling/sflow/interfaces/interface/state/packets-sampled"
func (n *Sampling_Sflow_InterfacePath) PacketsSampled() *Sampling_Sflow_Interface_PacketsSampledPath {
	ps := &Sampling_Sflow_Interface_PacketsSampledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "packets-sampled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PacketsSampled (leaf): Total number of packets sampled from the interface.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "state/packets-sampled"
//	Path from root:       "/sampling/sflow/interfaces/interface/state/packets-sampled"
func (n *Sampling_Sflow_InterfacePathAny) PacketsSampled() *Sampling_Sflow_Interface_PacketsSampledPathAny {
	ps := &Sampling_Sflow_Interface_PacketsSampledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "packets-sampled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PollingInterval (leaf): Sets the traffic sampling polling interval.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/polling-interval"
//	Path from root:       "/sampling/sflow/interfaces/interface/*/polling-interval"
func (n *Sampling_Sflow_InterfacePath) PollingInterval() *Sampling_Sflow_Interface_PollingIntervalPath {
	ps := &Sampling_Sflow_Interface_PollingIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "polling-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PollingInterval (leaf): Sets the traffic sampling polling interval.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/polling-interval"
//	Path from root:       "/sampling/sflow/interfaces/interface/*/polling-interval"
func (n *Sampling_Sflow_InterfacePathAny) PollingInterval() *Sampling_Sflow_Interface_PollingIntervalPathAny {
	ps := &Sampling_Sflow_Interface_PollingIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "polling-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Sampling_Sflow_InterfacePath) State() ygnmi.SingletonQuery[*oc.Sampling_Sflow_Interface] {
	return ygnmi.NewSingletonQuery[*oc.Sampling_Sflow_Interface](
		"Sampling_Sflow_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Sampling_Sflow_InterfacePathAny) State() ygnmi.WildcardQuery[*oc.Sampling_Sflow_Interface] {
	return ygnmi.NewWildcardQuery[*oc.Sampling_Sflow_Interface](
		"Sampling_Sflow_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Sampling_Sflow_InterfacePath) Config() ygnmi.ConfigQuery[*oc.Sampling_Sflow_Interface] {
	return ygnmi.NewConfigQuery[*oc.Sampling_Sflow_Interface](
		"Sampling_Sflow_Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Sampling_Sflow_InterfacePathAny) Config() ygnmi.WildcardQuery[*oc.Sampling_Sflow_Interface] {
	return ygnmi.NewWildcardQuery[*oc.Sampling_Sflow_Interface](
		"Sampling_Sflow_Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Sampling_Sflow_InterfacePathMap) State() ygnmi.SingletonQuery[map[string]*oc.Sampling_Sflow_Interface] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Sampling_Sflow_Interface](
		"Sampling_Sflow",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Sampling_Sflow_Interface, bool) {
			ret := gs.(*oc.Sampling_Sflow).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-sampling-sflow:interfaces"},
			PostRelPath: []string{"openconfig-sampling-sflow:interface"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Sampling_Sflow_InterfacePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Sampling_Sflow_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Sampling_Sflow_Interface](
		"Sampling_Sflow",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Sampling_Sflow_Interface, bool) {
			ret := gs.(*oc.Sampling_Sflow).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-sampling-sflow:interfaces"},
			PostRelPath: []string{"openconfig-sampling-sflow:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Sampling_Sflow_InterfacePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Sampling_Sflow_Interface] {
	return ygnmi.NewConfigQuery[map[string]*oc.Sampling_Sflow_Interface](
		"Sampling_Sflow",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Sampling_Sflow_Interface, bool) {
			ret := gs.(*oc.Sampling_Sflow).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-sampling-sflow:interfaces"},
			PostRelPath: []string{"openconfig-sampling-sflow:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Sampling_Sflow_InterfacePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Sampling_Sflow_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Sampling_Sflow_Interface](
		"Sampling_Sflow",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Sampling_Sflow_Interface, bool) {
			ret := gs.(*oc.Sampling_Sflow).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-sampling-sflow:interfaces"},
			PostRelPath: []string{"openconfig-sampling-sflow:interface"},
		},
	)
}

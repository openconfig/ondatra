/*
Package definedsets is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.20)
using the following YANG input files:
  - gnmi-collector-metadata.yang
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-common.yang
  - public/release/models/aft/openconfig-aft-ethernet.yang
  - public/release/models/aft/openconfig-aft-ipv4.yang
  - public/release/models/aft/openconfig-aft-ipv6.yang
  - public/release/models/aft/openconfig-aft-mpls.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-pf.yang
  - public/release/models/aft/openconfig-aft-state-synced.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft-types.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/ate/openconfig-ate-flow.yang
  - public/release/models/ate/openconfig-ate-intf.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/interfaces/openconfig-if-rates.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-terminal-device.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-pf-forwarding-policies.yang
  - public/release/models/policy-forwarding/openconfig-pf-interfaces.yang
  - public/release/models/policy-forwarding/openconfig-pf-path-groups.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-routing-policy.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package definedsets

import (
	"reflect"

	oc "github.com/openconfig/ondatra/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// DefinedSetsPath represents the /openconfig-defined-sets/defined-sets YANG schema element.
type DefinedSetsPath struct {
	*ygnmi.NodePath
}

// DefinedSetsPathAny represents the wildcard version of the /openconfig-defined-sets/defined-sets YANG schema element.
type DefinedSetsPathAny struct {
	*ygnmi.NodePath
}

// Ipv4PrefixSetAny (list): List of IPv4 prefix sets.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "ipv4-prefix-sets/ipv4-prefix-set"
//	Path from root:       "/defined-sets/ipv4-prefix-sets/ipv4-prefix-set"
func (n *DefinedSetsPath) Ipv4PrefixSetAny() *DefinedSets_Ipv4PrefixSetPathAny {
	ps := &DefinedSets_Ipv4PrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-prefix-sets", "ipv4-prefix-set"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Ipv4PrefixSetAny (list): List of IPv4 prefix sets.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "ipv4-prefix-sets/ipv4-prefix-set"
//	Path from root:       "/defined-sets/ipv4-prefix-sets/ipv4-prefix-set"
func (n *DefinedSetsPathAny) Ipv4PrefixSetAny() *DefinedSets_Ipv4PrefixSetPathAny {
	ps := &DefinedSets_Ipv4PrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-prefix-sets", "ipv4-prefix-set"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Ipv4PrefixSet (list): List of IPv4 prefix sets.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "ipv4-prefix-sets/ipv4-prefix-set"
//	Path from root:       "/defined-sets/ipv4-prefix-sets/ipv4-prefix-set"
//
//	Name: string
func (n *DefinedSetsPath) Ipv4PrefixSet(Name string) *DefinedSets_Ipv4PrefixSetPath {
	ps := &DefinedSets_Ipv4PrefixSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-prefix-sets", "ipv4-prefix-set"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Ipv4PrefixSet (list): List of IPv4 prefix sets.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "ipv4-prefix-sets/ipv4-prefix-set"
//	Path from root:       "/defined-sets/ipv4-prefix-sets/ipv4-prefix-set"
//
//	Name: string
func (n *DefinedSetsPathAny) Ipv4PrefixSet(Name string) *DefinedSets_Ipv4PrefixSetPathAny {
	ps := &DefinedSets_Ipv4PrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-prefix-sets", "ipv4-prefix-set"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Ipv4PrefixSetMap (list): List of IPv4 prefix sets.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "ipv4-prefix-sets/ipv4-prefix-set"
//	Path from root:       "/defined-sets/ipv4-prefix-sets/ipv4-prefix-set"
func (n *DefinedSetsPath) Ipv4PrefixSetMap() *DefinedSets_Ipv4PrefixSetPathMap {
	ps := &DefinedSets_Ipv4PrefixSetPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-prefix-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4PrefixSetMap (list): List of IPv4 prefix sets.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "ipv4-prefix-sets/ipv4-prefix-set"
//	Path from root:       "/defined-sets/ipv4-prefix-sets/ipv4-prefix-set"
func (n *DefinedSetsPathAny) Ipv4PrefixSetMap() *DefinedSets_Ipv4PrefixSetPathMapAny {
	ps := &DefinedSets_Ipv4PrefixSetPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-prefix-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6PrefixSetAny (list): List of IPv6 prefix sets. Each defined set
// is uniquely identified by a name
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "ipv6-prefix-sets/ipv6-prefix-set"
//	Path from root:       "/defined-sets/ipv6-prefix-sets/ipv6-prefix-set"
func (n *DefinedSetsPath) Ipv6PrefixSetAny() *DefinedSets_Ipv6PrefixSetPathAny {
	ps := &DefinedSets_Ipv6PrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-prefix-sets", "ipv6-prefix-set"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Ipv6PrefixSetAny (list): List of IPv6 prefix sets. Each defined set
// is uniquely identified by a name
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "ipv6-prefix-sets/ipv6-prefix-set"
//	Path from root:       "/defined-sets/ipv6-prefix-sets/ipv6-prefix-set"
func (n *DefinedSetsPathAny) Ipv6PrefixSetAny() *DefinedSets_Ipv6PrefixSetPathAny {
	ps := &DefinedSets_Ipv6PrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-prefix-sets", "ipv6-prefix-set"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Ipv6PrefixSet (list): List of IPv6 prefix sets. Each defined set
// is uniquely identified by a name
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "ipv6-prefix-sets/ipv6-prefix-set"
//	Path from root:       "/defined-sets/ipv6-prefix-sets/ipv6-prefix-set"
//
//	Name: string
func (n *DefinedSetsPath) Ipv6PrefixSet(Name string) *DefinedSets_Ipv6PrefixSetPath {
	ps := &DefinedSets_Ipv6PrefixSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-prefix-sets", "ipv6-prefix-set"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Ipv6PrefixSet (list): List of IPv6 prefix sets. Each defined set
// is uniquely identified by a name
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "ipv6-prefix-sets/ipv6-prefix-set"
//	Path from root:       "/defined-sets/ipv6-prefix-sets/ipv6-prefix-set"
//
//	Name: string
func (n *DefinedSetsPathAny) Ipv6PrefixSet(Name string) *DefinedSets_Ipv6PrefixSetPathAny {
	ps := &DefinedSets_Ipv6PrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-prefix-sets", "ipv6-prefix-set"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Ipv6PrefixSetMap (list): List of IPv6 prefix sets. Each defined set
// is uniquely identified by a name
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "ipv6-prefix-sets/ipv6-prefix-set"
//	Path from root:       "/defined-sets/ipv6-prefix-sets/ipv6-prefix-set"
func (n *DefinedSetsPath) Ipv6PrefixSetMap() *DefinedSets_Ipv6PrefixSetPathMap {
	ps := &DefinedSets_Ipv6PrefixSetPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-prefix-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6PrefixSetMap (list): List of IPv6 prefix sets. Each defined set
// is uniquely identified by a name
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "ipv6-prefix-sets/ipv6-prefix-set"
//	Path from root:       "/defined-sets/ipv6-prefix-sets/ipv6-prefix-set"
func (n *DefinedSetsPathAny) Ipv6PrefixSetMap() *DefinedSets_Ipv6PrefixSetPathMapAny {
	ps := &DefinedSets_Ipv6PrefixSetPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-prefix-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PortSetAny (list): List of port sets. Each por set is uniquely
// identified by its name
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "port-sets/port-set"
//	Path from root:       "/defined-sets/port-sets/port-set"
func (n *DefinedSetsPath) PortSetAny() *DefinedSets_PortSetPathAny {
	ps := &DefinedSets_PortSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"port-sets", "port-set"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// PortSetAny (list): List of port sets. Each por set is uniquely
// identified by its name
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "port-sets/port-set"
//	Path from root:       "/defined-sets/port-sets/port-set"
func (n *DefinedSetsPathAny) PortSetAny() *DefinedSets_PortSetPathAny {
	ps := &DefinedSets_PortSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"port-sets", "port-set"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// PortSet (list): List of port sets. Each por set is uniquely
// identified by its name
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "port-sets/port-set"
//	Path from root:       "/defined-sets/port-sets/port-set"
//
//	Name: string
func (n *DefinedSetsPath) PortSet(Name string) *DefinedSets_PortSetPath {
	ps := &DefinedSets_PortSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"port-sets", "port-set"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// PortSet (list): List of port sets. Each por set is uniquely
// identified by its name
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "port-sets/port-set"
//	Path from root:       "/defined-sets/port-sets/port-set"
//
//	Name: string
func (n *DefinedSetsPathAny) PortSet(Name string) *DefinedSets_PortSetPathAny {
	ps := &DefinedSets_PortSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"port-sets", "port-set"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// PortSetMap (list): List of port sets. Each por set is uniquely
// identified by its name
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "port-sets/port-set"
//	Path from root:       "/defined-sets/port-sets/port-set"
func (n *DefinedSetsPath) PortSetMap() *DefinedSets_PortSetPathMap {
	ps := &DefinedSets_PortSetPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"port-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PortSetMap (list): List of port sets. Each por set is uniquely
// identified by its name
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "port-sets/port-set"
//	Path from root:       "/defined-sets/port-sets/port-set"
func (n *DefinedSetsPathAny) PortSetMap() *DefinedSets_PortSetPathMapAny {
	ps := &DefinedSets_PortSetPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"port-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *DefinedSetsPath) State() ygnmi.SingletonQuery[*oc.DefinedSets] {
	return ygnmi.NewSingletonQuery[*oc.DefinedSets](
		"DefinedSets",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *DefinedSetsPathAny) State() ygnmi.WildcardQuery[*oc.DefinedSets] {
	return ygnmi.NewWildcardQuery[*oc.DefinedSets](
		"DefinedSets",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *DefinedSetsPath) Config() ygnmi.ConfigQuery[*oc.DefinedSets] {
	return ygnmi.NewConfigQuery[*oc.DefinedSets](
		"DefinedSets",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *DefinedSetsPathAny) Config() ygnmi.WildcardQuery[*oc.DefinedSets] {
	return ygnmi.NewWildcardQuery[*oc.DefinedSets](
		"DefinedSets",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// DefinedSets_Ipv4PrefixSet_DescriptionPath represents the /openconfig-defined-sets/defined-sets/ipv4-prefix-sets/ipv4-prefix-set/state/description YANG schema element.
type DefinedSets_Ipv4PrefixSet_DescriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// DefinedSets_Ipv4PrefixSet_DescriptionPathAny represents the wildcard version of the /openconfig-defined-sets/defined-sets/ipv4-prefix-sets/ipv4-prefix-set/state/description YANG schema element.
type DefinedSets_Ipv4PrefixSet_DescriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "state/description"
//	Path from root:       "/defined-sets/ipv4-prefix-sets/ipv4-prefix-set/state/description"
func (n *DefinedSets_Ipv4PrefixSet_DescriptionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"DefinedSets_Ipv4PrefixSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.DefinedSets_Ipv4PrefixSet).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_Ipv4PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "state/description"
//	Path from root:       "/defined-sets/ipv4-prefix-sets/ipv4-prefix-set/state/description"
func (n *DefinedSets_Ipv4PrefixSet_DescriptionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"DefinedSets_Ipv4PrefixSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.DefinedSets_Ipv4PrefixSet).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_Ipv4PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "config/description"
//	Path from root:       "/defined-sets/ipv4-prefix-sets/ipv4-prefix-set/config/description"
func (n *DefinedSets_Ipv4PrefixSet_DescriptionPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"DefinedSets_Ipv4PrefixSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.DefinedSets_Ipv4PrefixSet).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_Ipv4PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "config/description"
//	Path from root:       "/defined-sets/ipv4-prefix-sets/ipv4-prefix-set/config/description"
func (n *DefinedSets_Ipv4PrefixSet_DescriptionPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"DefinedSets_Ipv4PrefixSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.DefinedSets_Ipv4PrefixSet).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_Ipv4PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// DefinedSets_Ipv4PrefixSet_NamePath represents the /openconfig-defined-sets/defined-sets/ipv4-prefix-sets/ipv4-prefix-set/state/name YANG schema element.
type DefinedSets_Ipv4PrefixSet_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// DefinedSets_Ipv4PrefixSet_NamePathAny represents the wildcard version of the /openconfig-defined-sets/defined-sets/ipv4-prefix-sets/ipv4-prefix-set/state/name YANG schema element.
type DefinedSets_Ipv4PrefixSet_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "state/name"
//	Path from root:       "/defined-sets/ipv4-prefix-sets/ipv4-prefix-set/state/name"
func (n *DefinedSets_Ipv4PrefixSet_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"DefinedSets_Ipv4PrefixSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.DefinedSets_Ipv4PrefixSet).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_Ipv4PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "state/name"
//	Path from root:       "/defined-sets/ipv4-prefix-sets/ipv4-prefix-set/state/name"
func (n *DefinedSets_Ipv4PrefixSet_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"DefinedSets_Ipv4PrefixSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.DefinedSets_Ipv4PrefixSet).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_Ipv4PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "config/name"
//	Path from root:       "/defined-sets/ipv4-prefix-sets/ipv4-prefix-set/config/name"
func (n *DefinedSets_Ipv4PrefixSet_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"DefinedSets_Ipv4PrefixSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.DefinedSets_Ipv4PrefixSet).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_Ipv4PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "config/name"
//	Path from root:       "/defined-sets/ipv4-prefix-sets/ipv4-prefix-set/config/name"
func (n *DefinedSets_Ipv4PrefixSet_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"DefinedSets_Ipv4PrefixSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.DefinedSets_Ipv4PrefixSet).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_Ipv4PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// DefinedSets_Ipv4PrefixSet_PrefixPath represents the /openconfig-defined-sets/defined-sets/ipv4-prefix-sets/ipv4-prefix-set/state/prefix YANG schema element.
type DefinedSets_Ipv4PrefixSet_PrefixPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// DefinedSets_Ipv4PrefixSet_PrefixPathAny represents the wildcard version of the /openconfig-defined-sets/defined-sets/ipv4-prefix-sets/ipv4-prefix-set/state/prefix YANG schema element.
type DefinedSets_Ipv4PrefixSet_PrefixPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "state/prefix"
//	Path from root:       "/defined-sets/ipv4-prefix-sets/ipv4-prefix-set/state/prefix"
func (n *DefinedSets_Ipv4PrefixSet_PrefixPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"DefinedSets_Ipv4PrefixSet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.DefinedSets_Ipv4PrefixSet).Prefix
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_Ipv4PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "state/prefix"
//	Path from root:       "/defined-sets/ipv4-prefix-sets/ipv4-prefix-set/state/prefix"
func (n *DefinedSets_Ipv4PrefixSet_PrefixPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"DefinedSets_Ipv4PrefixSet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.DefinedSets_Ipv4PrefixSet).Prefix
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_Ipv4PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "config/prefix"
//	Path from root:       "/defined-sets/ipv4-prefix-sets/ipv4-prefix-set/config/prefix"
func (n *DefinedSets_Ipv4PrefixSet_PrefixPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"DefinedSets_Ipv4PrefixSet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.DefinedSets_Ipv4PrefixSet).Prefix
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_Ipv4PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "config/prefix"
//	Path from root:       "/defined-sets/ipv4-prefix-sets/ipv4-prefix-set/config/prefix"
func (n *DefinedSets_Ipv4PrefixSet_PrefixPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"DefinedSets_Ipv4PrefixSet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.DefinedSets_Ipv4PrefixSet).Prefix
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_Ipv4PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// DefinedSets_Ipv4PrefixSetPath represents the /openconfig-defined-sets/defined-sets/ipv4-prefix-sets/ipv4-prefix-set YANG schema element.
type DefinedSets_Ipv4PrefixSetPath struct {
	*ygnmi.NodePath
}

// DefinedSets_Ipv4PrefixSetPathAny represents the wildcard version of the /openconfig-defined-sets/defined-sets/ipv4-prefix-sets/ipv4-prefix-set YANG schema element.
type DefinedSets_Ipv4PrefixSetPathAny struct {
	*ygnmi.NodePath
}

// DefinedSets_Ipv4PrefixSetPathMap represents the /openconfig-defined-sets/defined-sets/ipv4-prefix-sets/ipv4-prefix-set YANG schema element.
type DefinedSets_Ipv4PrefixSetPathMap struct {
	*ygnmi.NodePath
}

// DefinedSets_Ipv4PrefixSetPathMapAny represents the wildcard version of the /openconfig-defined-sets/defined-sets/ipv4-prefix-sets/ipv4-prefix-set YANG schema element.
type DefinedSets_Ipv4PrefixSetPathMapAny struct {
	*ygnmi.NodePath
}

// Description (leaf): A user defined IPv4 prefix set description.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "*/description"
//	Path from root:       "/defined-sets/ipv4-prefix-sets/ipv4-prefix-set/*/description"
func (n *DefinedSets_Ipv4PrefixSetPath) Description() *DefinedSets_Ipv4PrefixSet_DescriptionPath {
	ps := &DefinedSets_Ipv4PrefixSet_DescriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Description (leaf): A user defined IPv4 prefix set description.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "*/description"
//	Path from root:       "/defined-sets/ipv4-prefix-sets/ipv4-prefix-set/*/description"
func (n *DefinedSets_Ipv4PrefixSetPathAny) Description() *DefinedSets_Ipv4PrefixSet_DescriptionPathAny {
	ps := &DefinedSets_Ipv4PrefixSet_DescriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): A user defined name of the IPv4 prefix set.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "*/name"
//	Path from root:       "/defined-sets/ipv4-prefix-sets/ipv4-prefix-set/*/name"
func (n *DefinedSets_Ipv4PrefixSetPath) Name() *DefinedSets_Ipv4PrefixSet_NamePath {
	ps := &DefinedSets_Ipv4PrefixSet_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): A user defined name of the IPv4 prefix set.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "*/name"
//	Path from root:       "/defined-sets/ipv4-prefix-sets/ipv4-prefix-set/*/name"
func (n *DefinedSets_Ipv4PrefixSetPathAny) Name() *DefinedSets_Ipv4PrefixSet_NamePathAny {
	ps := &DefinedSets_Ipv4PrefixSet_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Prefix (leaf-list): A user defined list of IPv4 prefixes to be used in match
// conditions. Each entry is a IPv4 + mask combination.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "*/prefix"
//	Path from root:       "/defined-sets/ipv4-prefix-sets/ipv4-prefix-set/*/prefix"
func (n *DefinedSets_Ipv4PrefixSetPath) Prefix() *DefinedSets_Ipv4PrefixSet_PrefixPath {
	ps := &DefinedSets_Ipv4PrefixSet_PrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Prefix (leaf-list): A user defined list of IPv4 prefixes to be used in match
// conditions. Each entry is a IPv4 + mask combination.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "*/prefix"
//	Path from root:       "/defined-sets/ipv4-prefix-sets/ipv4-prefix-set/*/prefix"
func (n *DefinedSets_Ipv4PrefixSetPathAny) Prefix() *DefinedSets_Ipv4PrefixSet_PrefixPathAny {
	ps := &DefinedSets_Ipv4PrefixSet_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *DefinedSets_Ipv4PrefixSetPath) State() ygnmi.SingletonQuery[*oc.DefinedSets_Ipv4PrefixSet] {
	return ygnmi.NewSingletonQuery[*oc.DefinedSets_Ipv4PrefixSet](
		"DefinedSets_Ipv4PrefixSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *DefinedSets_Ipv4PrefixSetPathAny) State() ygnmi.WildcardQuery[*oc.DefinedSets_Ipv4PrefixSet] {
	return ygnmi.NewWildcardQuery[*oc.DefinedSets_Ipv4PrefixSet](
		"DefinedSets_Ipv4PrefixSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *DefinedSets_Ipv4PrefixSetPath) Config() ygnmi.ConfigQuery[*oc.DefinedSets_Ipv4PrefixSet] {
	return ygnmi.NewConfigQuery[*oc.DefinedSets_Ipv4PrefixSet](
		"DefinedSets_Ipv4PrefixSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *DefinedSets_Ipv4PrefixSetPathAny) Config() ygnmi.WildcardQuery[*oc.DefinedSets_Ipv4PrefixSet] {
	return ygnmi.NewWildcardQuery[*oc.DefinedSets_Ipv4PrefixSet](
		"DefinedSets_Ipv4PrefixSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *DefinedSets_Ipv4PrefixSetPathMap) State() ygnmi.SingletonQuery[map[string]*oc.DefinedSets_Ipv4PrefixSet] {
	return ygnmi.NewSingletonQuery[map[string]*oc.DefinedSets_Ipv4PrefixSet](
		"DefinedSets",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.DefinedSets_Ipv4PrefixSet, bool) {
			ret := gs.(*oc.DefinedSets).Ipv4PrefixSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-defined-sets:ipv4-prefix-sets"},
			PostRelPath: []string{"openconfig-defined-sets:ipv4-prefix-set"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *DefinedSets_Ipv4PrefixSetPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.DefinedSets_Ipv4PrefixSet] {
	return ygnmi.NewWildcardQuery[map[string]*oc.DefinedSets_Ipv4PrefixSet](
		"DefinedSets",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.DefinedSets_Ipv4PrefixSet, bool) {
			ret := gs.(*oc.DefinedSets).Ipv4PrefixSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-defined-sets:ipv4-prefix-sets"},
			PostRelPath: []string{"openconfig-defined-sets:ipv4-prefix-set"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *DefinedSets_Ipv4PrefixSetPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.DefinedSets_Ipv4PrefixSet] {
	return ygnmi.NewConfigQuery[map[string]*oc.DefinedSets_Ipv4PrefixSet](
		"DefinedSets",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.DefinedSets_Ipv4PrefixSet, bool) {
			ret := gs.(*oc.DefinedSets).Ipv4PrefixSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-defined-sets:ipv4-prefix-sets"},
			PostRelPath: []string{"openconfig-defined-sets:ipv4-prefix-set"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *DefinedSets_Ipv4PrefixSetPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.DefinedSets_Ipv4PrefixSet] {
	return ygnmi.NewWildcardQuery[map[string]*oc.DefinedSets_Ipv4PrefixSet](
		"DefinedSets",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.DefinedSets_Ipv4PrefixSet, bool) {
			ret := gs.(*oc.DefinedSets).Ipv4PrefixSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-defined-sets:ipv4-prefix-sets"},
			PostRelPath: []string{"openconfig-defined-sets:ipv4-prefix-set"},
		},
	)
}

// DefinedSets_Ipv6PrefixSet_DescriptionPath represents the /openconfig-defined-sets/defined-sets/ipv6-prefix-sets/ipv6-prefix-set/state/description YANG schema element.
type DefinedSets_Ipv6PrefixSet_DescriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// DefinedSets_Ipv6PrefixSet_DescriptionPathAny represents the wildcard version of the /openconfig-defined-sets/defined-sets/ipv6-prefix-sets/ipv6-prefix-set/state/description YANG schema element.
type DefinedSets_Ipv6PrefixSet_DescriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "state/description"
//	Path from root:       "/defined-sets/ipv6-prefix-sets/ipv6-prefix-set/state/description"
func (n *DefinedSets_Ipv6PrefixSet_DescriptionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"DefinedSets_Ipv6PrefixSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.DefinedSets_Ipv6PrefixSet).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_Ipv6PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "state/description"
//	Path from root:       "/defined-sets/ipv6-prefix-sets/ipv6-prefix-set/state/description"
func (n *DefinedSets_Ipv6PrefixSet_DescriptionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"DefinedSets_Ipv6PrefixSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.DefinedSets_Ipv6PrefixSet).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_Ipv6PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "config/description"
//	Path from root:       "/defined-sets/ipv6-prefix-sets/ipv6-prefix-set/config/description"
func (n *DefinedSets_Ipv6PrefixSet_DescriptionPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"DefinedSets_Ipv6PrefixSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.DefinedSets_Ipv6PrefixSet).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_Ipv6PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "config/description"
//	Path from root:       "/defined-sets/ipv6-prefix-sets/ipv6-prefix-set/config/description"
func (n *DefinedSets_Ipv6PrefixSet_DescriptionPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"DefinedSets_Ipv6PrefixSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.DefinedSets_Ipv6PrefixSet).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_Ipv6PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// DefinedSets_Ipv6PrefixSet_NamePath represents the /openconfig-defined-sets/defined-sets/ipv6-prefix-sets/ipv6-prefix-set/state/name YANG schema element.
type DefinedSets_Ipv6PrefixSet_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// DefinedSets_Ipv6PrefixSet_NamePathAny represents the wildcard version of the /openconfig-defined-sets/defined-sets/ipv6-prefix-sets/ipv6-prefix-set/state/name YANG schema element.
type DefinedSets_Ipv6PrefixSet_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "state/name"
//	Path from root:       "/defined-sets/ipv6-prefix-sets/ipv6-prefix-set/state/name"
func (n *DefinedSets_Ipv6PrefixSet_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"DefinedSets_Ipv6PrefixSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.DefinedSets_Ipv6PrefixSet).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_Ipv6PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "state/name"
//	Path from root:       "/defined-sets/ipv6-prefix-sets/ipv6-prefix-set/state/name"
func (n *DefinedSets_Ipv6PrefixSet_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"DefinedSets_Ipv6PrefixSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.DefinedSets_Ipv6PrefixSet).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_Ipv6PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "config/name"
//	Path from root:       "/defined-sets/ipv6-prefix-sets/ipv6-prefix-set/config/name"
func (n *DefinedSets_Ipv6PrefixSet_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"DefinedSets_Ipv6PrefixSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.DefinedSets_Ipv6PrefixSet).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_Ipv6PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "config/name"
//	Path from root:       "/defined-sets/ipv6-prefix-sets/ipv6-prefix-set/config/name"
func (n *DefinedSets_Ipv6PrefixSet_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"DefinedSets_Ipv6PrefixSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.DefinedSets_Ipv6PrefixSet).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_Ipv6PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// DefinedSets_Ipv6PrefixSet_PrefixPath represents the /openconfig-defined-sets/defined-sets/ipv6-prefix-sets/ipv6-prefix-set/state/prefix YANG schema element.
type DefinedSets_Ipv6PrefixSet_PrefixPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// DefinedSets_Ipv6PrefixSet_PrefixPathAny represents the wildcard version of the /openconfig-defined-sets/defined-sets/ipv6-prefix-sets/ipv6-prefix-set/state/prefix YANG schema element.
type DefinedSets_Ipv6PrefixSet_PrefixPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "state/prefix"
//	Path from root:       "/defined-sets/ipv6-prefix-sets/ipv6-prefix-set/state/prefix"
func (n *DefinedSets_Ipv6PrefixSet_PrefixPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"DefinedSets_Ipv6PrefixSet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.DefinedSets_Ipv6PrefixSet).Prefix
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_Ipv6PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "state/prefix"
//	Path from root:       "/defined-sets/ipv6-prefix-sets/ipv6-prefix-set/state/prefix"
func (n *DefinedSets_Ipv6PrefixSet_PrefixPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"DefinedSets_Ipv6PrefixSet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.DefinedSets_Ipv6PrefixSet).Prefix
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_Ipv6PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "config/prefix"
//	Path from root:       "/defined-sets/ipv6-prefix-sets/ipv6-prefix-set/config/prefix"
func (n *DefinedSets_Ipv6PrefixSet_PrefixPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"DefinedSets_Ipv6PrefixSet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.DefinedSets_Ipv6PrefixSet).Prefix
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_Ipv6PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "config/prefix"
//	Path from root:       "/defined-sets/ipv6-prefix-sets/ipv6-prefix-set/config/prefix"
func (n *DefinedSets_Ipv6PrefixSet_PrefixPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"DefinedSets_Ipv6PrefixSet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.DefinedSets_Ipv6PrefixSet).Prefix
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_Ipv6PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// DefinedSets_Ipv6PrefixSetPath represents the /openconfig-defined-sets/defined-sets/ipv6-prefix-sets/ipv6-prefix-set YANG schema element.
type DefinedSets_Ipv6PrefixSetPath struct {
	*ygnmi.NodePath
}

// DefinedSets_Ipv6PrefixSetPathAny represents the wildcard version of the /openconfig-defined-sets/defined-sets/ipv6-prefix-sets/ipv6-prefix-set YANG schema element.
type DefinedSets_Ipv6PrefixSetPathAny struct {
	*ygnmi.NodePath
}

// DefinedSets_Ipv6PrefixSetPathMap represents the /openconfig-defined-sets/defined-sets/ipv6-prefix-sets/ipv6-prefix-set YANG schema element.
type DefinedSets_Ipv6PrefixSetPathMap struct {
	*ygnmi.NodePath
}

// DefinedSets_Ipv6PrefixSetPathMapAny represents the wildcard version of the /openconfig-defined-sets/defined-sets/ipv6-prefix-sets/ipv6-prefix-set YANG schema element.
type DefinedSets_Ipv6PrefixSetPathMapAny struct {
	*ygnmi.NodePath
}

// Description (leaf): A user defined IPv6 prefix set description.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "*/description"
//	Path from root:       "/defined-sets/ipv6-prefix-sets/ipv6-prefix-set/*/description"
func (n *DefinedSets_Ipv6PrefixSetPath) Description() *DefinedSets_Ipv6PrefixSet_DescriptionPath {
	ps := &DefinedSets_Ipv6PrefixSet_DescriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Description (leaf): A user defined IPv6 prefix set description.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "*/description"
//	Path from root:       "/defined-sets/ipv6-prefix-sets/ipv6-prefix-set/*/description"
func (n *DefinedSets_Ipv6PrefixSetPathAny) Description() *DefinedSets_Ipv6PrefixSet_DescriptionPathAny {
	ps := &DefinedSets_Ipv6PrefixSet_DescriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Name of the IPv6 prefix set.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "*/name"
//	Path from root:       "/defined-sets/ipv6-prefix-sets/ipv6-prefix-set/*/name"
func (n *DefinedSets_Ipv6PrefixSetPath) Name() *DefinedSets_Ipv6PrefixSet_NamePath {
	ps := &DefinedSets_Ipv6PrefixSet_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Name of the IPv6 prefix set.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "*/name"
//	Path from root:       "/defined-sets/ipv6-prefix-sets/ipv6-prefix-set/*/name"
func (n *DefinedSets_Ipv6PrefixSetPathAny) Name() *DefinedSets_Ipv6PrefixSet_NamePathAny {
	ps := &DefinedSets_Ipv6PrefixSet_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Prefix (leaf-list): A user defined list of IPv6 prefixes to be used in match
// conditions. Each entry is a IPv6 + mask combination.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "*/prefix"
//	Path from root:       "/defined-sets/ipv6-prefix-sets/ipv6-prefix-set/*/prefix"
func (n *DefinedSets_Ipv6PrefixSetPath) Prefix() *DefinedSets_Ipv6PrefixSet_PrefixPath {
	ps := &DefinedSets_Ipv6PrefixSet_PrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Prefix (leaf-list): A user defined list of IPv6 prefixes to be used in match
// conditions. Each entry is a IPv6 + mask combination.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "*/prefix"
//	Path from root:       "/defined-sets/ipv6-prefix-sets/ipv6-prefix-set/*/prefix"
func (n *DefinedSets_Ipv6PrefixSetPathAny) Prefix() *DefinedSets_Ipv6PrefixSet_PrefixPathAny {
	ps := &DefinedSets_Ipv6PrefixSet_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *DefinedSets_Ipv6PrefixSetPath) State() ygnmi.SingletonQuery[*oc.DefinedSets_Ipv6PrefixSet] {
	return ygnmi.NewSingletonQuery[*oc.DefinedSets_Ipv6PrefixSet](
		"DefinedSets_Ipv6PrefixSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *DefinedSets_Ipv6PrefixSetPathAny) State() ygnmi.WildcardQuery[*oc.DefinedSets_Ipv6PrefixSet] {
	return ygnmi.NewWildcardQuery[*oc.DefinedSets_Ipv6PrefixSet](
		"DefinedSets_Ipv6PrefixSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *DefinedSets_Ipv6PrefixSetPath) Config() ygnmi.ConfigQuery[*oc.DefinedSets_Ipv6PrefixSet] {
	return ygnmi.NewConfigQuery[*oc.DefinedSets_Ipv6PrefixSet](
		"DefinedSets_Ipv6PrefixSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *DefinedSets_Ipv6PrefixSetPathAny) Config() ygnmi.WildcardQuery[*oc.DefinedSets_Ipv6PrefixSet] {
	return ygnmi.NewWildcardQuery[*oc.DefinedSets_Ipv6PrefixSet](
		"DefinedSets_Ipv6PrefixSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *DefinedSets_Ipv6PrefixSetPathMap) State() ygnmi.SingletonQuery[map[string]*oc.DefinedSets_Ipv6PrefixSet] {
	return ygnmi.NewSingletonQuery[map[string]*oc.DefinedSets_Ipv6PrefixSet](
		"DefinedSets",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.DefinedSets_Ipv6PrefixSet, bool) {
			ret := gs.(*oc.DefinedSets).Ipv6PrefixSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-defined-sets:ipv6-prefix-sets"},
			PostRelPath: []string{"openconfig-defined-sets:ipv6-prefix-set"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *DefinedSets_Ipv6PrefixSetPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.DefinedSets_Ipv6PrefixSet] {
	return ygnmi.NewWildcardQuery[map[string]*oc.DefinedSets_Ipv6PrefixSet](
		"DefinedSets",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.DefinedSets_Ipv6PrefixSet, bool) {
			ret := gs.(*oc.DefinedSets).Ipv6PrefixSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-defined-sets:ipv6-prefix-sets"},
			PostRelPath: []string{"openconfig-defined-sets:ipv6-prefix-set"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *DefinedSets_Ipv6PrefixSetPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.DefinedSets_Ipv6PrefixSet] {
	return ygnmi.NewConfigQuery[map[string]*oc.DefinedSets_Ipv6PrefixSet](
		"DefinedSets",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.DefinedSets_Ipv6PrefixSet, bool) {
			ret := gs.(*oc.DefinedSets).Ipv6PrefixSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-defined-sets:ipv6-prefix-sets"},
			PostRelPath: []string{"openconfig-defined-sets:ipv6-prefix-set"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *DefinedSets_Ipv6PrefixSetPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.DefinedSets_Ipv6PrefixSet] {
	return ygnmi.NewWildcardQuery[map[string]*oc.DefinedSets_Ipv6PrefixSet](
		"DefinedSets",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.DefinedSets_Ipv6PrefixSet, bool) {
			ret := gs.(*oc.DefinedSets).Ipv6PrefixSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-defined-sets:ipv6-prefix-sets"},
			PostRelPath: []string{"openconfig-defined-sets:ipv6-prefix-set"},
		},
	)
}

// DefinedSets_PortSet_DescriptionPath represents the /openconfig-defined-sets/defined-sets/port-sets/port-set/state/description YANG schema element.
type DefinedSets_PortSet_DescriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// DefinedSets_PortSet_DescriptionPathAny represents the wildcard version of the /openconfig-defined-sets/defined-sets/port-sets/port-set/state/description YANG schema element.
type DefinedSets_PortSet_DescriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "state/description"
//	Path from root:       "/defined-sets/port-sets/port-set/state/description"
func (n *DefinedSets_PortSet_DescriptionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"DefinedSets_PortSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.DefinedSets_PortSet).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_PortSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "state/description"
//	Path from root:       "/defined-sets/port-sets/port-set/state/description"
func (n *DefinedSets_PortSet_DescriptionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"DefinedSets_PortSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.DefinedSets_PortSet).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_PortSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "config/description"
//	Path from root:       "/defined-sets/port-sets/port-set/config/description"
func (n *DefinedSets_PortSet_DescriptionPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"DefinedSets_PortSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.DefinedSets_PortSet).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_PortSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "config/description"
//	Path from root:       "/defined-sets/port-sets/port-set/config/description"
func (n *DefinedSets_PortSet_DescriptionPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"DefinedSets_PortSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.DefinedSets_PortSet).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_PortSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// DefinedSets_PortSet_NamePath represents the /openconfig-defined-sets/defined-sets/port-sets/port-set/state/name YANG schema element.
type DefinedSets_PortSet_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// DefinedSets_PortSet_NamePathAny represents the wildcard version of the /openconfig-defined-sets/defined-sets/port-sets/port-set/state/name YANG schema element.
type DefinedSets_PortSet_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "state/name"
//	Path from root:       "/defined-sets/port-sets/port-set/state/name"
func (n *DefinedSets_PortSet_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"DefinedSets_PortSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.DefinedSets_PortSet).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_PortSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "state/name"
//	Path from root:       "/defined-sets/port-sets/port-set/state/name"
func (n *DefinedSets_PortSet_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"DefinedSets_PortSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.DefinedSets_PortSet).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_PortSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "config/name"
//	Path from root:       "/defined-sets/port-sets/port-set/config/name"
func (n *DefinedSets_PortSet_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"DefinedSets_PortSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.DefinedSets_PortSet).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_PortSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "config/name"
//	Path from root:       "/defined-sets/port-sets/port-set/config/name"
func (n *DefinedSets_PortSet_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"DefinedSets_PortSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.DefinedSets_PortSet).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_PortSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// DefinedSets_PortSet_PortPath represents the /openconfig-defined-sets/defined-sets/port-sets/port-set/state/port YANG schema element.
type DefinedSets_PortSet_PortPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// DefinedSets_PortSet_PortPathAny represents the wildcard version of the /openconfig-defined-sets/defined-sets/port-sets/port-set/state/port YANG schema element.
type DefinedSets_PortSet_PortPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "state/port"
//	Path from root:       "/defined-sets/port-sets/port-set/state/port"
func (n *DefinedSets_PortSet_PortPath) State() ygnmi.SingletonQuery[[]oc.DefinedSets_PortSet_Port_Union] {
	return ygnmi.NewSingletonQuery[[]oc.DefinedSets_PortSet_Port_Union](
		"DefinedSets_PortSet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.DefinedSets_PortSet_Port_Union, bool) {
			ret := gs.(*oc.DefinedSets_PortSet).Port
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_PortSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "state/port"
//	Path from root:       "/defined-sets/port-sets/port-set/state/port"
func (n *DefinedSets_PortSet_PortPathAny) State() ygnmi.WildcardQuery[[]oc.DefinedSets_PortSet_Port_Union] {
	return ygnmi.NewWildcardQuery[[]oc.DefinedSets_PortSet_Port_Union](
		"DefinedSets_PortSet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.DefinedSets_PortSet_Port_Union, bool) {
			ret := gs.(*oc.DefinedSets_PortSet).Port
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_PortSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "config/port"
//	Path from root:       "/defined-sets/port-sets/port-set/config/port"
func (n *DefinedSets_PortSet_PortPath) Config() ygnmi.ConfigQuery[[]oc.DefinedSets_PortSet_Port_Union] {
	return ygnmi.NewConfigQuery[[]oc.DefinedSets_PortSet_Port_Union](
		"DefinedSets_PortSet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.DefinedSets_PortSet_Port_Union, bool) {
			ret := gs.(*oc.DefinedSets_PortSet).Port
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_PortSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "config/port"
//	Path from root:       "/defined-sets/port-sets/port-set/config/port"
func (n *DefinedSets_PortSet_PortPathAny) Config() ygnmi.WildcardQuery[[]oc.DefinedSets_PortSet_Port_Union] {
	return ygnmi.NewWildcardQuery[[]oc.DefinedSets_PortSet_Port_Union](
		"DefinedSets_PortSet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.DefinedSets_PortSet_Port_Union, bool) {
			ret := gs.(*oc.DefinedSets_PortSet).Port
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_PortSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// DefinedSets_PortSetPath represents the /openconfig-defined-sets/defined-sets/port-sets/port-set YANG schema element.
type DefinedSets_PortSetPath struct {
	*ygnmi.NodePath
}

// DefinedSets_PortSetPathAny represents the wildcard version of the /openconfig-defined-sets/defined-sets/port-sets/port-set YANG schema element.
type DefinedSets_PortSetPathAny struct {
	*ygnmi.NodePath
}

// DefinedSets_PortSetPathMap represents the /openconfig-defined-sets/defined-sets/port-sets/port-set YANG schema element.
type DefinedSets_PortSetPathMap struct {
	*ygnmi.NodePath
}

// DefinedSets_PortSetPathMapAny represents the wildcard version of the /openconfig-defined-sets/defined-sets/port-sets/port-set YANG schema element.
type DefinedSets_PortSetPathMapAny struct {
	*ygnmi.NodePath
}

// Description (leaf): A user defined description for the port set
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "*/description"
//	Path from root:       "/defined-sets/port-sets/port-set/*/description"
func (n *DefinedSets_PortSetPath) Description() *DefinedSets_PortSet_DescriptionPath {
	ps := &DefinedSets_PortSet_DescriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Description (leaf): A user defined description for the port set
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "*/description"
//	Path from root:       "/defined-sets/port-sets/port-set/*/description"
func (n *DefinedSets_PortSetPathAny) Description() *DefinedSets_PortSet_DescriptionPathAny {
	ps := &DefinedSets_PortSet_DescriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): A user defined name of the port set.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "*/name"
//	Path from root:       "/defined-sets/port-sets/port-set/*/name"
func (n *DefinedSets_PortSetPath) Name() *DefinedSets_PortSet_NamePath {
	ps := &DefinedSets_PortSet_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): A user defined name of the port set.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "*/name"
//	Path from root:       "/defined-sets/port-sets/port-set/*/name"
func (n *DefinedSets_PortSetPathAny) Name() *DefinedSets_PortSet_NamePathAny {
	ps := &DefinedSets_PortSet_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Port (leaf-list): A user defined set of ports to be
// used in the match conditions.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "*/port"
//	Path from root:       "/defined-sets/port-sets/port-set/*/port"
func (n *DefinedSets_PortSetPath) Port() *DefinedSets_PortSet_PortPath {
	ps := &DefinedSets_PortSet_PortPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Port (leaf-list): A user defined set of ports to be
// used in the match conditions.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "*/port"
//	Path from root:       "/defined-sets/port-sets/port-set/*/port"
func (n *DefinedSets_PortSetPathAny) Port() *DefinedSets_PortSet_PortPathAny {
	ps := &DefinedSets_PortSet_PortPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *DefinedSets_PortSetPath) State() ygnmi.SingletonQuery[*oc.DefinedSets_PortSet] {
	return ygnmi.NewSingletonQuery[*oc.DefinedSets_PortSet](
		"DefinedSets_PortSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *DefinedSets_PortSetPathAny) State() ygnmi.WildcardQuery[*oc.DefinedSets_PortSet] {
	return ygnmi.NewWildcardQuery[*oc.DefinedSets_PortSet](
		"DefinedSets_PortSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *DefinedSets_PortSetPath) Config() ygnmi.ConfigQuery[*oc.DefinedSets_PortSet] {
	return ygnmi.NewConfigQuery[*oc.DefinedSets_PortSet](
		"DefinedSets_PortSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *DefinedSets_PortSetPathAny) Config() ygnmi.WildcardQuery[*oc.DefinedSets_PortSet] {
	return ygnmi.NewWildcardQuery[*oc.DefinedSets_PortSet](
		"DefinedSets_PortSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *DefinedSets_PortSetPathMap) State() ygnmi.SingletonQuery[map[string]*oc.DefinedSets_PortSet] {
	return ygnmi.NewSingletonQuery[map[string]*oc.DefinedSets_PortSet](
		"DefinedSets",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.DefinedSets_PortSet, bool) {
			ret := gs.(*oc.DefinedSets).PortSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-defined-sets:port-sets"},
			PostRelPath: []string{"openconfig-defined-sets:port-set"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *DefinedSets_PortSetPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.DefinedSets_PortSet] {
	return ygnmi.NewWildcardQuery[map[string]*oc.DefinedSets_PortSet](
		"DefinedSets",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.DefinedSets_PortSet, bool) {
			ret := gs.(*oc.DefinedSets).PortSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-defined-sets:port-sets"},
			PostRelPath: []string{"openconfig-defined-sets:port-set"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *DefinedSets_PortSetPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.DefinedSets_PortSet] {
	return ygnmi.NewConfigQuery[map[string]*oc.DefinedSets_PortSet](
		"DefinedSets",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.DefinedSets_PortSet, bool) {
			ret := gs.(*oc.DefinedSets).PortSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-defined-sets:port-sets"},
			PostRelPath: []string{"openconfig-defined-sets:port-set"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *DefinedSets_PortSetPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.DefinedSets_PortSet] {
	return ygnmi.NewWildcardQuery[map[string]*oc.DefinedSets_PortSet](
		"DefinedSets",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.DefinedSets_PortSet, bool) {
			ret := gs.(*oc.DefinedSets).PortSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-defined-sets:port-sets"},
			PostRelPath: []string{"openconfig-defined-sets:port-set"},
		},
	)
}

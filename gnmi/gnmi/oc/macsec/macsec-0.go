/*
Package macsec is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.20)
using the following YANG input files:
  - gnmi-collector-metadata.yang
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-common.yang
  - public/release/models/aft/openconfig-aft-ethernet.yang
  - public/release/models/aft/openconfig-aft-ipv4.yang
  - public/release/models/aft/openconfig-aft-ipv6.yang
  - public/release/models/aft/openconfig-aft-mpls.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-pf.yang
  - public/release/models/aft/openconfig-aft-state-synced.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft-types.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/ate/openconfig-ate-flow.yang
  - public/release/models/ate/openconfig-ate-intf.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/interfaces/openconfig-if-rates.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/macsec/openconfig-macsec.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/network-instance/openconfig-network-instance-l2.yang
  - public/release/models/network-instance/openconfig-network-instance-static.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-terminal-device.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-area-interface.yang
  - public/release/models/ospf/openconfig-ospf-area.yang
  - public/release/models/ospf/openconfig-ospf-common.yang
  - public/release/models/ospf/openconfig-ospf-global.yang
  - public/release/models/ospf/openconfig-ospf-types.yang
  - public/release/models/ospf/openconfig-ospf.yang
  - public/release/models/ospf/openconfig-ospfv3-area-interface.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-pf-forwarding-policies.yang
  - public/release/models/policy-forwarding/openconfig-pf-interfaces.yang
  - public/release/models/policy-forwarding/openconfig-pf-path-groups.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-routing-policy.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package macsec

import (
	"reflect"

	oc "github.com/openconfig/ondatra/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// MacsecPath represents the /openconfig-macsec/macsec YANG schema element.
type MacsecPath struct {
	*ygnmi.NodePath
}

// MacsecPathAny represents the wildcard version of the /openconfig-macsec/macsec YANG schema element.
type MacsecPathAny struct {
	*ygnmi.NodePath
}

// InterfaceAny (list): List of interfaces on which MACsec is enabled / available
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/macsec/interfaces/interface"
func (n *MacsecPath) InterfaceAny() *Macsec_InterfacePathAny {
	ps := &Macsec_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// InterfaceAny (list): List of interfaces on which MACsec is enabled / available
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/macsec/interfaces/interface"
func (n *MacsecPathAny) InterfaceAny() *Macsec_InterfacePathAny {
	ps := &Macsec_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Interface (list): List of interfaces on which MACsec is enabled / available
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/macsec/interfaces/interface"
//
//	Name: string
func (n *MacsecPath) Interface(Name string) *Macsec_InterfacePath {
	ps := &Macsec_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Interface (list): List of interfaces on which MACsec is enabled / available
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/macsec/interfaces/interface"
//
//	Name: string
func (n *MacsecPathAny) Interface(Name string) *Macsec_InterfacePathAny {
	ps := &Macsec_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): List of interfaces on which MACsec is enabled / available
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/macsec/interfaces/interface"
func (n *MacsecPath) InterfaceMap() *Macsec_InterfacePathMap {
	ps := &Macsec_InterfacePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): List of interfaces on which MACsec is enabled / available
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/macsec/interfaces/interface"
func (n *MacsecPathAny) InterfaceMap() *Macsec_InterfacePathMapAny {
	ps := &Macsec_InterfacePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Mka (container): The MKA
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "mka"
//	Path from root:       "/macsec/mka"
func (n *MacsecPath) Mka() *Macsec_MkaPath {
	ps := &Macsec_MkaPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"mka"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Mka (container): The MKA
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "mka"
//	Path from root:       "/macsec/mka"
func (n *MacsecPathAny) Mka() *Macsec_MkaPathAny {
	ps := &Macsec_MkaPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mka"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *MacsecPath) State() ygnmi.SingletonQuery[*oc.Macsec] {
	return ygnmi.NewSingletonQuery[*oc.Macsec](
		"Macsec",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *MacsecPathAny) State() ygnmi.WildcardQuery[*oc.Macsec] {
	return ygnmi.NewWildcardQuery[*oc.Macsec](
		"Macsec",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *MacsecPath) Config() ygnmi.ConfigQuery[*oc.Macsec] {
	return ygnmi.NewConfigQuery[*oc.Macsec](
		"Macsec",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *MacsecPathAny) Config() ygnmi.WildcardQuery[*oc.Macsec] {
	return ygnmi.NewWildcardQuery[*oc.Macsec](
		"Macsec",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Interface_EnablePath represents the /openconfig-macsec/macsec/interfaces/interface/state/enable YANG schema element.
type Macsec_Interface_EnablePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Interface_EnablePathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/state/enable YANG schema element.
type Macsec_Interface_EnablePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/enable"
//	Path from root:       "/macsec/interfaces/interface/state/enable"
func (n *Macsec_Interface_EnablePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Macsec_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Macsec_Interface).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/enable"
//	Path from root:       "/macsec/interfaces/interface/state/enable"
func (n *Macsec_Interface_EnablePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Macsec_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Macsec_Interface).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "config/enable"
//	Path from root:       "/macsec/interfaces/interface/config/enable"
func (n *Macsec_Interface_EnablePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Macsec_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Macsec_Interface).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "config/enable"
//	Path from root:       "/macsec/interfaces/interface/config/enable"
func (n *Macsec_Interface_EnablePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Macsec_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Macsec_Interface).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Interface_NamePath represents the /openconfig-macsec/macsec/interfaces/interface/state/name YANG schema element.
type Macsec_Interface_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Interface_NamePathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/state/name YANG schema element.
type Macsec_Interface_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/name"
//	Path from root:       "/macsec/interfaces/interface/state/name"
func (n *Macsec_Interface_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Macsec_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Macsec_Interface).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/name"
//	Path from root:       "/macsec/interfaces/interface/state/name"
func (n *Macsec_Interface_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Macsec_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Macsec_Interface).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "config/name"
//	Path from root:       "/macsec/interfaces/interface/config/name"
func (n *Macsec_Interface_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Macsec_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Macsec_Interface).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "config/name"
//	Path from root:       "/macsec/interfaces/interface/config/name"
func (n *Macsec_Interface_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Macsec_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Macsec_Interface).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Interface_ReplayProtectionPath represents the /openconfig-macsec/macsec/interfaces/interface/state/replay-protection YANG schema element.
type Macsec_Interface_ReplayProtectionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Interface_ReplayProtectionPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/state/replay-protection YANG schema element.
type Macsec_Interface_ReplayProtectionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/replay-protection"
//	Path from root:       "/macsec/interfaces/interface/state/replay-protection"
func (n *Macsec_Interface_ReplayProtectionPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Macsec_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "replay-protection"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Macsec_Interface).ReplayProtection
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/replay-protection"
//	Path from root:       "/macsec/interfaces/interface/state/replay-protection"
func (n *Macsec_Interface_ReplayProtectionPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Macsec_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "replay-protection"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Macsec_Interface).ReplayProtection
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "config/replay-protection"
//	Path from root:       "/macsec/interfaces/interface/config/replay-protection"
func (n *Macsec_Interface_ReplayProtectionPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Macsec_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "replay-protection"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Macsec_Interface).ReplayProtection
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "config/replay-protection"
//	Path from root:       "/macsec/interfaces/interface/config/replay-protection"
func (n *Macsec_Interface_ReplayProtectionPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Macsec_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "replay-protection"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Macsec_Interface).ReplayProtection
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_InterfacePath represents the /openconfig-macsec/macsec/interfaces/interface YANG schema element.
type Macsec_InterfacePath struct {
	*ygnmi.NodePath
}

// Macsec_InterfacePathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface YANG schema element.
type Macsec_InterfacePathAny struct {
	*ygnmi.NodePath
}

// Macsec_InterfacePathMap represents the /openconfig-macsec/macsec/interfaces/interface YANG schema element.
type Macsec_InterfacePathMap struct {
	*ygnmi.NodePath
}

// Macsec_InterfacePathMapAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface YANG schema element.
type Macsec_InterfacePathMapAny struct {
	*ygnmi.NodePath
}

// Counters (container): MACsec interface counters
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/counters"
//	Path from root:       "/macsec/interfaces/interface/state/counters"
func (n *Macsec_InterfacePath) Counters() *Macsec_Interface_CountersPath {
	ps := &Macsec_Interface_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): MACsec interface counters
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/counters"
//	Path from root:       "/macsec/interfaces/interface/state/counters"
func (n *Macsec_InterfacePathAny) Counters() *Macsec_Interface_CountersPathAny {
	ps := &Macsec_Interface_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Enable (leaf): Enable MACsec on an interface
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "*/enable"
//	Path from root:       "/macsec/interfaces/interface/*/enable"
func (n *Macsec_InterfacePath) Enable() *Macsec_Interface_EnablePath {
	ps := &Macsec_Interface_EnablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enable (leaf): Enable MACsec on an interface
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "*/enable"
//	Path from root:       "/macsec/interfaces/interface/*/enable"
func (n *Macsec_InterfacePathAny) Enable() *Macsec_Interface_EnablePathAny {
	ps := &Macsec_Interface_EnablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mka (container): Enclosing container for the MKA interface
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "mka"
//	Path from root:       "/macsec/interfaces/interface/mka"
func (n *Macsec_InterfacePath) Mka() *Macsec_Interface_MkaPath {
	ps := &Macsec_Interface_MkaPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"mka"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Mka (container): Enclosing container for the MKA interface
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "mka"
//	Path from root:       "/macsec/interfaces/interface/mka"
func (n *Macsec_InterfacePathAny) Mka() *Macsec_Interface_MkaPathAny {
	ps := &Macsec_Interface_MkaPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mka"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Name (leaf): Reference to the MACsec Ethernet interface
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "*/name"
//	Path from root:       "/macsec/interfaces/interface/*/name"
func (n *Macsec_InterfacePath) Name() *Macsec_Interface_NamePath {
	ps := &Macsec_Interface_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Reference to the MACsec Ethernet interface
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "*/name"
//	Path from root:       "/macsec/interfaces/interface/*/name"
func (n *Macsec_InterfacePathAny) Name() *Macsec_Interface_NamePathAny {
	ps := &Macsec_Interface_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReplayProtection (leaf): MACsec window size, as defined by the number of out-of-order frames
// that are accepted. A value of 0 means that frames are accepted only in
// the correct order.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "*/replay-protection"
//	Path from root:       "/macsec/interfaces/interface/*/replay-protection"
func (n *Macsec_InterfacePath) ReplayProtection() *Macsec_Interface_ReplayProtectionPath {
	ps := &Macsec_Interface_ReplayProtectionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "replay-protection"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReplayProtection (leaf): MACsec window size, as defined by the number of out-of-order frames
// that are accepted. A value of 0 means that frames are accepted only in
// the correct order.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "*/replay-protection"
//	Path from root:       "/macsec/interfaces/interface/*/replay-protection"
func (n *Macsec_InterfacePathAny) ReplayProtection() *Macsec_Interface_ReplayProtectionPathAny {
	ps := &Macsec_Interface_ReplayProtectionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "replay-protection"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ScsaRxAny (list): RX Secure Channel and Secure Association Statistics
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "scsa-rx/scsa-rx"
//	Path from root:       "/macsec/interfaces/interface/scsa-rx/scsa-rx"
func (n *Macsec_InterfacePath) ScsaRxAny() *Macsec_Interface_ScsaRxPathAny {
	ps := &Macsec_Interface_ScsaRxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"scsa-rx", "scsa-rx"},
			map[string]interface{}{"sci-rx": "*"},
			n,
		),
	}
	return ps
}

// ScsaRxAny (list): RX Secure Channel and Secure Association Statistics
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "scsa-rx/scsa-rx"
//	Path from root:       "/macsec/interfaces/interface/scsa-rx/scsa-rx"
func (n *Macsec_InterfacePathAny) ScsaRxAny() *Macsec_Interface_ScsaRxPathAny {
	ps := &Macsec_Interface_ScsaRxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"scsa-rx", "scsa-rx"},
			map[string]interface{}{"sci-rx": "*"},
			n,
		),
	}
	return ps
}

// ScsaRx (list): RX Secure Channel and Secure Association Statistics
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "scsa-rx/scsa-rx"
//	Path from root:       "/macsec/interfaces/interface/scsa-rx/scsa-rx"
//
//	SciRx: string
func (n *Macsec_InterfacePath) ScsaRx(SciRx string) *Macsec_Interface_ScsaRxPath {
	ps := &Macsec_Interface_ScsaRxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"scsa-rx", "scsa-rx"},
			map[string]interface{}{"sci-rx": SciRx},
			n,
		),
	}
	return ps
}

// ScsaRx (list): RX Secure Channel and Secure Association Statistics
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "scsa-rx/scsa-rx"
//	Path from root:       "/macsec/interfaces/interface/scsa-rx/scsa-rx"
//
//	SciRx: string
func (n *Macsec_InterfacePathAny) ScsaRx(SciRx string) *Macsec_Interface_ScsaRxPathAny {
	ps := &Macsec_Interface_ScsaRxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"scsa-rx", "scsa-rx"},
			map[string]interface{}{"sci-rx": SciRx},
			n,
		),
	}
	return ps
}

// ScsaRxMap (list): RX Secure Channel and Secure Association Statistics
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "scsa-rx/scsa-rx"
//	Path from root:       "/macsec/interfaces/interface/scsa-rx/scsa-rx"
func (n *Macsec_InterfacePath) ScsaRxMap() *Macsec_Interface_ScsaRxPathMap {
	ps := &Macsec_Interface_ScsaRxPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"scsa-rx"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ScsaRxMap (list): RX Secure Channel and Secure Association Statistics
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "scsa-rx/scsa-rx"
//	Path from root:       "/macsec/interfaces/interface/scsa-rx/scsa-rx"
func (n *Macsec_InterfacePathAny) ScsaRxMap() *Macsec_Interface_ScsaRxPathMapAny {
	ps := &Macsec_Interface_ScsaRxPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"scsa-rx"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ScsaTxAny (list): TX Secure Channel and Secure Association Statistics
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "scsa-tx/scsa-tx"
//	Path from root:       "/macsec/interfaces/interface/scsa-tx/scsa-tx"
func (n *Macsec_InterfacePath) ScsaTxAny() *Macsec_Interface_ScsaTxPathAny {
	ps := &Macsec_Interface_ScsaTxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"scsa-tx", "scsa-tx"},
			map[string]interface{}{"sci-tx": "*"},
			n,
		),
	}
	return ps
}

// ScsaTxAny (list): TX Secure Channel and Secure Association Statistics
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "scsa-tx/scsa-tx"
//	Path from root:       "/macsec/interfaces/interface/scsa-tx/scsa-tx"
func (n *Macsec_InterfacePathAny) ScsaTxAny() *Macsec_Interface_ScsaTxPathAny {
	ps := &Macsec_Interface_ScsaTxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"scsa-tx", "scsa-tx"},
			map[string]interface{}{"sci-tx": "*"},
			n,
		),
	}
	return ps
}

// ScsaTx (list): TX Secure Channel and Secure Association Statistics
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "scsa-tx/scsa-tx"
//	Path from root:       "/macsec/interfaces/interface/scsa-tx/scsa-tx"
//
//	SciTx: string
func (n *Macsec_InterfacePath) ScsaTx(SciTx string) *Macsec_Interface_ScsaTxPath {
	ps := &Macsec_Interface_ScsaTxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"scsa-tx", "scsa-tx"},
			map[string]interface{}{"sci-tx": SciTx},
			n,
		),
	}
	return ps
}

// ScsaTx (list): TX Secure Channel and Secure Association Statistics
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "scsa-tx/scsa-tx"
//	Path from root:       "/macsec/interfaces/interface/scsa-tx/scsa-tx"
//
//	SciTx: string
func (n *Macsec_InterfacePathAny) ScsaTx(SciTx string) *Macsec_Interface_ScsaTxPathAny {
	ps := &Macsec_Interface_ScsaTxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"scsa-tx", "scsa-tx"},
			map[string]interface{}{"sci-tx": SciTx},
			n,
		),
	}
	return ps
}

// ScsaTxMap (list): TX Secure Channel and Secure Association Statistics
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "scsa-tx/scsa-tx"
//	Path from root:       "/macsec/interfaces/interface/scsa-tx/scsa-tx"
func (n *Macsec_InterfacePath) ScsaTxMap() *Macsec_Interface_ScsaTxPathMap {
	ps := &Macsec_Interface_ScsaTxPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"scsa-tx"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ScsaTxMap (list): TX Secure Channel and Secure Association Statistics
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "scsa-tx/scsa-tx"
//	Path from root:       "/macsec/interfaces/interface/scsa-tx/scsa-tx"
func (n *Macsec_InterfacePathAny) ScsaTxMap() *Macsec_Interface_ScsaTxPathMapAny {
	ps := &Macsec_Interface_ScsaTxPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"scsa-tx"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Macsec_InterfacePath) State() ygnmi.SingletonQuery[*oc.Macsec_Interface] {
	return ygnmi.NewSingletonQuery[*oc.Macsec_Interface](
		"Macsec_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Macsec_InterfacePathAny) State() ygnmi.WildcardQuery[*oc.Macsec_Interface] {
	return ygnmi.NewWildcardQuery[*oc.Macsec_Interface](
		"Macsec_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Macsec_InterfacePath) Config() ygnmi.ConfigQuery[*oc.Macsec_Interface] {
	return ygnmi.NewConfigQuery[*oc.Macsec_Interface](
		"Macsec_Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Macsec_InterfacePathAny) Config() ygnmi.WildcardQuery[*oc.Macsec_Interface] {
	return ygnmi.NewWildcardQuery[*oc.Macsec_Interface](
		"Macsec_Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Macsec_InterfacePathMap) State() ygnmi.SingletonQuery[map[string]*oc.Macsec_Interface] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Macsec_Interface](
		"Macsec",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Macsec_Interface, bool) {
			ret := gs.(*oc.Macsec).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-macsec:interfaces"},
			PostRelPath: []string{"openconfig-macsec:interface"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Macsec_InterfacePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Macsec_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Macsec_Interface](
		"Macsec",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Macsec_Interface, bool) {
			ret := gs.(*oc.Macsec).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-macsec:interfaces"},
			PostRelPath: []string{"openconfig-macsec:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Macsec_InterfacePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Macsec_Interface] {
	return ygnmi.NewConfigQuery[map[string]*oc.Macsec_Interface](
		"Macsec",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Macsec_Interface, bool) {
			ret := gs.(*oc.Macsec).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-macsec:interfaces"},
			PostRelPath: []string{"openconfig-macsec:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Macsec_InterfacePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Macsec_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Macsec_Interface](
		"Macsec",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Macsec_Interface, bool) {
			ret := gs.(*oc.Macsec).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-macsec:interfaces"},
			PostRelPath: []string{"openconfig-macsec:interface"},
		},
	)
}

// Macsec_Interface_Counters_RxBadtagPktsPath represents the /openconfig-macsec/macsec/interfaces/interface/state/counters/rx-badtag-pkts YANG schema element.
type Macsec_Interface_Counters_RxBadtagPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Interface_Counters_RxBadtagPktsPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/state/counters/rx-badtag-pkts YANG schema element.
type Macsec_Interface_Counters_RxBadtagPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "rx-badtag-pkts"
//	Path from root:       "/macsec/interfaces/interface/state/counters/rx-badtag-pkts"
func (n *Macsec_Interface_Counters_RxBadtagPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Macsec_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"rx-badtag-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Interface_Counters).RxBadtagPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "rx-badtag-pkts"
//	Path from root:       "/macsec/interfaces/interface/state/counters/rx-badtag-pkts"
func (n *Macsec_Interface_Counters_RxBadtagPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Macsec_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"rx-badtag-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Interface_Counters).RxBadtagPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Interface_Counters_RxLatePktsPath represents the /openconfig-macsec/macsec/interfaces/interface/state/counters/rx-late-pkts YANG schema element.
type Macsec_Interface_Counters_RxLatePktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Interface_Counters_RxLatePktsPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/state/counters/rx-late-pkts YANG schema element.
type Macsec_Interface_Counters_RxLatePktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "rx-late-pkts"
//	Path from root:       "/macsec/interfaces/interface/state/counters/rx-late-pkts"
func (n *Macsec_Interface_Counters_RxLatePktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Macsec_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"rx-late-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Interface_Counters).RxLatePkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "rx-late-pkts"
//	Path from root:       "/macsec/interfaces/interface/state/counters/rx-late-pkts"
func (n *Macsec_Interface_Counters_RxLatePktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Macsec_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"rx-late-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Interface_Counters).RxLatePkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Interface_Counters_RxNosciPktsPath represents the /openconfig-macsec/macsec/interfaces/interface/state/counters/rx-nosci-pkts YANG schema element.
type Macsec_Interface_Counters_RxNosciPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Interface_Counters_RxNosciPktsPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/state/counters/rx-nosci-pkts YANG schema element.
type Macsec_Interface_Counters_RxNosciPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "rx-nosci-pkts"
//	Path from root:       "/macsec/interfaces/interface/state/counters/rx-nosci-pkts"
func (n *Macsec_Interface_Counters_RxNosciPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Macsec_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"rx-nosci-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Interface_Counters).RxNosciPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "rx-nosci-pkts"
//	Path from root:       "/macsec/interfaces/interface/state/counters/rx-nosci-pkts"
func (n *Macsec_Interface_Counters_RxNosciPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Macsec_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"rx-nosci-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Interface_Counters).RxNosciPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Interface_Counters_RxUnknownsciPktsPath represents the /openconfig-macsec/macsec/interfaces/interface/state/counters/rx-unknownsci-pkts YANG schema element.
type Macsec_Interface_Counters_RxUnknownsciPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Interface_Counters_RxUnknownsciPktsPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/state/counters/rx-unknownsci-pkts YANG schema element.
type Macsec_Interface_Counters_RxUnknownsciPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "rx-unknownsci-pkts"
//	Path from root:       "/macsec/interfaces/interface/state/counters/rx-unknownsci-pkts"
func (n *Macsec_Interface_Counters_RxUnknownsciPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Macsec_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"rx-unknownsci-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Interface_Counters).RxUnknownsciPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "rx-unknownsci-pkts"
//	Path from root:       "/macsec/interfaces/interface/state/counters/rx-unknownsci-pkts"
func (n *Macsec_Interface_Counters_RxUnknownsciPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Macsec_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"rx-unknownsci-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Interface_Counters).RxUnknownsciPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Interface_Counters_RxUntaggedPktsPath represents the /openconfig-macsec/macsec/interfaces/interface/state/counters/rx-untagged-pkts YANG schema element.
type Macsec_Interface_Counters_RxUntaggedPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Interface_Counters_RxUntaggedPktsPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/state/counters/rx-untagged-pkts YANG schema element.
type Macsec_Interface_Counters_RxUntaggedPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "rx-untagged-pkts"
//	Path from root:       "/macsec/interfaces/interface/state/counters/rx-untagged-pkts"
func (n *Macsec_Interface_Counters_RxUntaggedPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Macsec_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"rx-untagged-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Interface_Counters).RxUntaggedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "rx-untagged-pkts"
//	Path from root:       "/macsec/interfaces/interface/state/counters/rx-untagged-pkts"
func (n *Macsec_Interface_Counters_RxUntaggedPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Macsec_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"rx-untagged-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Interface_Counters).RxUntaggedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Interface_Counters_TxUntaggedPktsPath represents the /openconfig-macsec/macsec/interfaces/interface/state/counters/tx-untagged-pkts YANG schema element.
type Macsec_Interface_Counters_TxUntaggedPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Interface_Counters_TxUntaggedPktsPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/state/counters/tx-untagged-pkts YANG schema element.
type Macsec_Interface_Counters_TxUntaggedPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "tx-untagged-pkts"
//	Path from root:       "/macsec/interfaces/interface/state/counters/tx-untagged-pkts"
func (n *Macsec_Interface_Counters_TxUntaggedPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Macsec_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"tx-untagged-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Interface_Counters).TxUntaggedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "tx-untagged-pkts"
//	Path from root:       "/macsec/interfaces/interface/state/counters/tx-untagged-pkts"
func (n *Macsec_Interface_Counters_TxUntaggedPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Macsec_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"tx-untagged-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Interface_Counters).TxUntaggedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Interface_CountersPath represents the /openconfig-macsec/macsec/interfaces/interface/state/counters YANG schema element.
type Macsec_Interface_CountersPath struct {
	*ygnmi.NodePath
}

// Macsec_Interface_CountersPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/state/counters YANG schema element.
type Macsec_Interface_CountersPathAny struct {
	*ygnmi.NodePath
}

// RxBadtagPkts (leaf): MACsec interface level Receive Bad Tag Packets counter.
// This counter will increment if MACsec is enabled on interface and
// incoming packet has incorrect MACsec tag.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "rx-badtag-pkts"
//	Path from root:       "/macsec/interfaces/interface/state/counters/rx-badtag-pkts"
func (n *Macsec_Interface_CountersPath) RxBadtagPkts() *Macsec_Interface_Counters_RxBadtagPktsPath {
	ps := &Macsec_Interface_Counters_RxBadtagPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"rx-badtag-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RxBadtagPkts (leaf): MACsec interface level Receive Bad Tag Packets counter.
// This counter will increment if MACsec is enabled on interface and
// incoming packet has incorrect MACsec tag.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "rx-badtag-pkts"
//	Path from root:       "/macsec/interfaces/interface/state/counters/rx-badtag-pkts"
func (n *Macsec_Interface_CountersPathAny) RxBadtagPkts() *Macsec_Interface_Counters_RxBadtagPktsPathAny {
	ps := &Macsec_Interface_Counters_RxBadtagPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"rx-badtag-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RxLatePkts (leaf): MACsec interface level Receive Late Packets counter.
// This counter will increment if MACsec is enabled on the interface and
// packet number of incoming packet is less than the lowest acceptable
// packet number and replay protection is enabled.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "rx-late-pkts"
//	Path from root:       "/macsec/interfaces/interface/state/counters/rx-late-pkts"
func (n *Macsec_Interface_CountersPath) RxLatePkts() *Macsec_Interface_Counters_RxLatePktsPath {
	ps := &Macsec_Interface_Counters_RxLatePktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"rx-late-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RxLatePkts (leaf): MACsec interface level Receive Late Packets counter.
// This counter will increment if MACsec is enabled on the interface and
// packet number of incoming packet is less than the lowest acceptable
// packet number and replay protection is enabled.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "rx-late-pkts"
//	Path from root:       "/macsec/interfaces/interface/state/counters/rx-late-pkts"
func (n *Macsec_Interface_CountersPathAny) RxLatePkts() *Macsec_Interface_Counters_RxLatePktsPathAny {
	ps := &Macsec_Interface_Counters_RxLatePktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"rx-late-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RxNosciPkts (leaf): MACsec interface level Receive No SCI Packets counter.
// This counter will increment if MACsec is enabled on interface and
// incoming packet does not have SCI field in MACsec tag.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "rx-nosci-pkts"
//	Path from root:       "/macsec/interfaces/interface/state/counters/rx-nosci-pkts"
func (n *Macsec_Interface_CountersPath) RxNosciPkts() *Macsec_Interface_Counters_RxNosciPktsPath {
	ps := &Macsec_Interface_Counters_RxNosciPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"rx-nosci-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RxNosciPkts (leaf): MACsec interface level Receive No SCI Packets counter.
// This counter will increment if MACsec is enabled on interface and
// incoming packet does not have SCI field in MACsec tag.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "rx-nosci-pkts"
//	Path from root:       "/macsec/interfaces/interface/state/counters/rx-nosci-pkts"
func (n *Macsec_Interface_CountersPathAny) RxNosciPkts() *Macsec_Interface_Counters_RxNosciPktsPathAny {
	ps := &Macsec_Interface_Counters_RxNosciPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"rx-nosci-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RxUnknownsciPkts (leaf): MACsec interface level Receive Unknown SCI Packets counter.
// This counter will increment if MACsec is enabled on the interface and
// SCI present in the MACsec tag of the incoming packet does not match any
// SCI present in ingress SCI table.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "rx-unknownsci-pkts"
//	Path from root:       "/macsec/interfaces/interface/state/counters/rx-unknownsci-pkts"
func (n *Macsec_Interface_CountersPath) RxUnknownsciPkts() *Macsec_Interface_Counters_RxUnknownsciPktsPath {
	ps := &Macsec_Interface_Counters_RxUnknownsciPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"rx-unknownsci-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RxUnknownsciPkts (leaf): MACsec interface level Receive Unknown SCI Packets counter.
// This counter will increment if MACsec is enabled on the interface and
// SCI present in the MACsec tag of the incoming packet does not match any
// SCI present in ingress SCI table.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "rx-unknownsci-pkts"
//	Path from root:       "/macsec/interfaces/interface/state/counters/rx-unknownsci-pkts"
func (n *Macsec_Interface_CountersPathAny) RxUnknownsciPkts() *Macsec_Interface_Counters_RxUnknownsciPktsPathAny {
	ps := &Macsec_Interface_Counters_RxUnknownsciPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"rx-unknownsci-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RxUntaggedPkts (leaf): MACsec interface level Receive untagged Packets counter.
// This counter will increment if MACsec is enabled on interface and the
// incoming packet does not have MACsec tag.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "rx-untagged-pkts"
//	Path from root:       "/macsec/interfaces/interface/state/counters/rx-untagged-pkts"
func (n *Macsec_Interface_CountersPath) RxUntaggedPkts() *Macsec_Interface_Counters_RxUntaggedPktsPath {
	ps := &Macsec_Interface_Counters_RxUntaggedPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"rx-untagged-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RxUntaggedPkts (leaf): MACsec interface level Receive untagged Packets counter.
// This counter will increment if MACsec is enabled on interface and the
// incoming packet does not have MACsec tag.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "rx-untagged-pkts"
//	Path from root:       "/macsec/interfaces/interface/state/counters/rx-untagged-pkts"
func (n *Macsec_Interface_CountersPathAny) RxUntaggedPkts() *Macsec_Interface_Counters_RxUntaggedPktsPathAny {
	ps := &Macsec_Interface_Counters_RxUntaggedPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"rx-untagged-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TxUntaggedPkts (leaf): MACsec interface level Transmit untagged Packets counter.
// This counter will increment if MACsec is enabled on interface and the
// outgoing packet is not tagged with MACsec header.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "tx-untagged-pkts"
//	Path from root:       "/macsec/interfaces/interface/state/counters/tx-untagged-pkts"
func (n *Macsec_Interface_CountersPath) TxUntaggedPkts() *Macsec_Interface_Counters_TxUntaggedPktsPath {
	ps := &Macsec_Interface_Counters_TxUntaggedPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"tx-untagged-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TxUntaggedPkts (leaf): MACsec interface level Transmit untagged Packets counter.
// This counter will increment if MACsec is enabled on interface and the
// outgoing packet is not tagged with MACsec header.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "tx-untagged-pkts"
//	Path from root:       "/macsec/interfaces/interface/state/counters/tx-untagged-pkts"
func (n *Macsec_Interface_CountersPathAny) TxUntaggedPkts() *Macsec_Interface_Counters_TxUntaggedPktsPathAny {
	ps := &Macsec_Interface_Counters_TxUntaggedPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tx-untagged-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Macsec_Interface_CountersPath) State() ygnmi.SingletonQuery[*oc.Macsec_Interface_Counters] {
	return ygnmi.NewSingletonQuery[*oc.Macsec_Interface_Counters](
		"Macsec_Interface_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Macsec_Interface_CountersPathAny) State() ygnmi.WildcardQuery[*oc.Macsec_Interface_Counters] {
	return ygnmi.NewWildcardQuery[*oc.Macsec_Interface_Counters](
		"Macsec_Interface_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Interface_Mka_KeyChainPath represents the /openconfig-macsec/macsec/interfaces/interface/mka/state/key-chain YANG schema element.
type Macsec_Interface_Mka_KeyChainPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Interface_Mka_KeyChainPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/mka/state/key-chain YANG schema element.
type Macsec_Interface_Mka_KeyChainPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/key-chain"
//	Path from root:       "/macsec/interfaces/interface/mka/state/key-chain"
func (n *Macsec_Interface_Mka_KeyChainPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Macsec_Interface_Mka",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "key-chain"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Macsec_Interface_Mka).KeyChain
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_Mka) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/key-chain"
//	Path from root:       "/macsec/interfaces/interface/mka/state/key-chain"
func (n *Macsec_Interface_Mka_KeyChainPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Macsec_Interface_Mka",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "key-chain"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Macsec_Interface_Mka).KeyChain
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_Mka) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "config/key-chain"
//	Path from root:       "/macsec/interfaces/interface/mka/config/key-chain"
func (n *Macsec_Interface_Mka_KeyChainPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Macsec_Interface_Mka",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "key-chain"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Macsec_Interface_Mka).KeyChain
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_Mka) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "config/key-chain"
//	Path from root:       "/macsec/interfaces/interface/mka/config/key-chain"
func (n *Macsec_Interface_Mka_KeyChainPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Macsec_Interface_Mka",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "key-chain"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Macsec_Interface_Mka).KeyChain
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_Mka) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Interface_Mka_MkaPolicyPath represents the /openconfig-macsec/macsec/interfaces/interface/mka/state/mka-policy YANG schema element.
type Macsec_Interface_Mka_MkaPolicyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Interface_Mka_MkaPolicyPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/mka/state/mka-policy YANG schema element.
type Macsec_Interface_Mka_MkaPolicyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/mka-policy"
//	Path from root:       "/macsec/interfaces/interface/mka/state/mka-policy"
func (n *Macsec_Interface_Mka_MkaPolicyPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Macsec_Interface_Mka",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mka-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Macsec_Interface_Mka).MkaPolicy
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_Mka) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/mka-policy"
//	Path from root:       "/macsec/interfaces/interface/mka/state/mka-policy"
func (n *Macsec_Interface_Mka_MkaPolicyPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Macsec_Interface_Mka",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mka-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Macsec_Interface_Mka).MkaPolicy
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_Mka) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "config/mka-policy"
//	Path from root:       "/macsec/interfaces/interface/mka/config/mka-policy"
func (n *Macsec_Interface_Mka_MkaPolicyPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Macsec_Interface_Mka",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mka-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Macsec_Interface_Mka).MkaPolicy
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_Mka) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "config/mka-policy"
//	Path from root:       "/macsec/interfaces/interface/mka/config/mka-policy"
func (n *Macsec_Interface_Mka_MkaPolicyPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Macsec_Interface_Mka",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mka-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Macsec_Interface_Mka).MkaPolicy
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_Mka) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Interface_MkaPath represents the /openconfig-macsec/macsec/interfaces/interface/mka YANG schema element.
type Macsec_Interface_MkaPath struct {
	*ygnmi.NodePath
}

// Macsec_Interface_MkaPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/mka YANG schema element.
type Macsec_Interface_MkaPathAny struct {
	*ygnmi.NodePath
}

// Counters (container): MKA interface counters
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/counters"
//	Path from root:       "/macsec/interfaces/interface/mka/state/counters"
func (n *Macsec_Interface_MkaPath) Counters() *Macsec_Interface_Mka_CountersPath {
	ps := &Macsec_Interface_Mka_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): MKA interface counters
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/counters"
//	Path from root:       "/macsec/interfaces/interface/mka/state/counters"
func (n *Macsec_Interface_MkaPathAny) Counters() *Macsec_Interface_Mka_CountersPathAny {
	ps := &Macsec_Interface_Mka_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// KeyChain (leaf): Configure Key Chain name
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "*/key-chain"
//	Path from root:       "/macsec/interfaces/interface/mka/*/key-chain"
func (n *Macsec_Interface_MkaPath) KeyChain() *Macsec_Interface_Mka_KeyChainPath {
	ps := &Macsec_Interface_Mka_KeyChainPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "key-chain"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// KeyChain (leaf): Configure Key Chain name
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "*/key-chain"
//	Path from root:       "/macsec/interfaces/interface/mka/*/key-chain"
func (n *Macsec_Interface_MkaPathAny) KeyChain() *Macsec_Interface_Mka_KeyChainPathAny {
	ps := &Macsec_Interface_Mka_KeyChainPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "key-chain"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MkaPolicy (leaf): Apply MKA policy on the interface
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "*/mka-policy"
//	Path from root:       "/macsec/interfaces/interface/mka/*/mka-policy"
func (n *Macsec_Interface_MkaPath) MkaPolicy() *Macsec_Interface_Mka_MkaPolicyPath {
	ps := &Macsec_Interface_Mka_MkaPolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mka-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MkaPolicy (leaf): Apply MKA policy on the interface
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "*/mka-policy"
//	Path from root:       "/macsec/interfaces/interface/mka/*/mka-policy"
func (n *Macsec_Interface_MkaPathAny) MkaPolicy() *Macsec_Interface_Mka_MkaPolicyPathAny {
	ps := &Macsec_Interface_Mka_MkaPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mka-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Macsec_Interface_MkaPath) State() ygnmi.SingletonQuery[*oc.Macsec_Interface_Mka] {
	return ygnmi.NewSingletonQuery[*oc.Macsec_Interface_Mka](
		"Macsec_Interface_Mka",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Macsec_Interface_MkaPathAny) State() ygnmi.WildcardQuery[*oc.Macsec_Interface_Mka] {
	return ygnmi.NewWildcardQuery[*oc.Macsec_Interface_Mka](
		"Macsec_Interface_Mka",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Macsec_Interface_MkaPath) Config() ygnmi.ConfigQuery[*oc.Macsec_Interface_Mka] {
	return ygnmi.NewConfigQuery[*oc.Macsec_Interface_Mka](
		"Macsec_Interface_Mka",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Macsec_Interface_MkaPathAny) Config() ygnmi.WildcardQuery[*oc.Macsec_Interface_Mka] {
	return ygnmi.NewWildcardQuery[*oc.Macsec_Interface_Mka](
		"Macsec_Interface_Mka",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Interface_Mka_Counters_InCakMkpduPath represents the /openconfig-macsec/macsec/interfaces/interface/mka/state/counters/in-cak-mkpdu YANG schema element.
type Macsec_Interface_Mka_Counters_InCakMkpduPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Interface_Mka_Counters_InCakMkpduPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/mka/state/counters/in-cak-mkpdu YANG schema element.
type Macsec_Interface_Mka_Counters_InCakMkpduPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "in-cak-mkpdu"
//	Path from root:       "/macsec/interfaces/interface/mka/state/counters/in-cak-mkpdu"
func (n *Macsec_Interface_Mka_Counters_InCakMkpduPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Macsec_Interface_Mka_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-cak-mkpdu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Interface_Mka_Counters).InCakMkpdu
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_Mka_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "in-cak-mkpdu"
//	Path from root:       "/macsec/interfaces/interface/mka/state/counters/in-cak-mkpdu"
func (n *Macsec_Interface_Mka_Counters_InCakMkpduPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Macsec_Interface_Mka_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-cak-mkpdu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Interface_Mka_Counters).InCakMkpdu
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_Mka_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Interface_Mka_Counters_InMkpduPath represents the /openconfig-macsec/macsec/interfaces/interface/mka/state/counters/in-mkpdu YANG schema element.
type Macsec_Interface_Mka_Counters_InMkpduPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Interface_Mka_Counters_InMkpduPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/mka/state/counters/in-mkpdu YANG schema element.
type Macsec_Interface_Mka_Counters_InMkpduPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "in-mkpdu"
//	Path from root:       "/macsec/interfaces/interface/mka/state/counters/in-mkpdu"
func (n *Macsec_Interface_Mka_Counters_InMkpduPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Macsec_Interface_Mka_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-mkpdu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Interface_Mka_Counters).InMkpdu
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_Mka_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "in-mkpdu"
//	Path from root:       "/macsec/interfaces/interface/mka/state/counters/in-mkpdu"
func (n *Macsec_Interface_Mka_Counters_InMkpduPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Macsec_Interface_Mka_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-mkpdu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Interface_Mka_Counters).InMkpdu
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_Mka_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Interface_Mka_Counters_InSakMkpduPath represents the /openconfig-macsec/macsec/interfaces/interface/mka/state/counters/in-sak-mkpdu YANG schema element.
type Macsec_Interface_Mka_Counters_InSakMkpduPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Interface_Mka_Counters_InSakMkpduPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/mka/state/counters/in-sak-mkpdu YANG schema element.
type Macsec_Interface_Mka_Counters_InSakMkpduPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "in-sak-mkpdu"
//	Path from root:       "/macsec/interfaces/interface/mka/state/counters/in-sak-mkpdu"
func (n *Macsec_Interface_Mka_Counters_InSakMkpduPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Macsec_Interface_Mka_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-sak-mkpdu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Interface_Mka_Counters).InSakMkpdu
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_Mka_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "in-sak-mkpdu"
//	Path from root:       "/macsec/interfaces/interface/mka/state/counters/in-sak-mkpdu"
func (n *Macsec_Interface_Mka_Counters_InSakMkpduPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Macsec_Interface_Mka_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-sak-mkpdu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Interface_Mka_Counters).InSakMkpdu
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_Mka_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Interface_Mka_Counters_OutCakMkpduPath represents the /openconfig-macsec/macsec/interfaces/interface/mka/state/counters/out-cak-mkpdu YANG schema element.
type Macsec_Interface_Mka_Counters_OutCakMkpduPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Interface_Mka_Counters_OutCakMkpduPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/mka/state/counters/out-cak-mkpdu YANG schema element.
type Macsec_Interface_Mka_Counters_OutCakMkpduPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "out-cak-mkpdu"
//	Path from root:       "/macsec/interfaces/interface/mka/state/counters/out-cak-mkpdu"
func (n *Macsec_Interface_Mka_Counters_OutCakMkpduPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Macsec_Interface_Mka_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-cak-mkpdu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Interface_Mka_Counters).OutCakMkpdu
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_Mka_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "out-cak-mkpdu"
//	Path from root:       "/macsec/interfaces/interface/mka/state/counters/out-cak-mkpdu"
func (n *Macsec_Interface_Mka_Counters_OutCakMkpduPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Macsec_Interface_Mka_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-cak-mkpdu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Interface_Mka_Counters).OutCakMkpdu
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_Mka_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Interface_Mka_Counters_OutMkpduPath represents the /openconfig-macsec/macsec/interfaces/interface/mka/state/counters/out-mkpdu YANG schema element.
type Macsec_Interface_Mka_Counters_OutMkpduPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Interface_Mka_Counters_OutMkpduPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/mka/state/counters/out-mkpdu YANG schema element.
type Macsec_Interface_Mka_Counters_OutMkpduPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "out-mkpdu"
//	Path from root:       "/macsec/interfaces/interface/mka/state/counters/out-mkpdu"
func (n *Macsec_Interface_Mka_Counters_OutMkpduPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Macsec_Interface_Mka_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-mkpdu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Interface_Mka_Counters).OutMkpdu
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_Mka_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "out-mkpdu"
//	Path from root:       "/macsec/interfaces/interface/mka/state/counters/out-mkpdu"
func (n *Macsec_Interface_Mka_Counters_OutMkpduPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Macsec_Interface_Mka_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-mkpdu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Interface_Mka_Counters).OutMkpdu
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_Mka_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Interface_Mka_Counters_OutSakMkpduPath represents the /openconfig-macsec/macsec/interfaces/interface/mka/state/counters/out-sak-mkpdu YANG schema element.
type Macsec_Interface_Mka_Counters_OutSakMkpduPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Interface_Mka_Counters_OutSakMkpduPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/mka/state/counters/out-sak-mkpdu YANG schema element.
type Macsec_Interface_Mka_Counters_OutSakMkpduPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "out-sak-mkpdu"
//	Path from root:       "/macsec/interfaces/interface/mka/state/counters/out-sak-mkpdu"
func (n *Macsec_Interface_Mka_Counters_OutSakMkpduPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Macsec_Interface_Mka_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-sak-mkpdu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Interface_Mka_Counters).OutSakMkpdu
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_Mka_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "out-sak-mkpdu"
//	Path from root:       "/macsec/interfaces/interface/mka/state/counters/out-sak-mkpdu"
func (n *Macsec_Interface_Mka_Counters_OutSakMkpduPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Macsec_Interface_Mka_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-sak-mkpdu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Interface_Mka_Counters).OutSakMkpdu
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_Mka_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Interface_Mka_CountersPath represents the /openconfig-macsec/macsec/interfaces/interface/mka/state/counters YANG schema element.
type Macsec_Interface_Mka_CountersPath struct {
	*ygnmi.NodePath
}

// Macsec_Interface_Mka_CountersPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/mka/state/counters YANG schema element.
type Macsec_Interface_Mka_CountersPathAny struct {
	*ygnmi.NodePath
}

// InCakMkpdu (leaf): Count of validated MKPDU  connectivity association key (CAK) pdus
// received.  This counter is related to the group-cak feature in the
// 802.1X-2010 standard.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "in-cak-mkpdu"
//	Path from root:       "/macsec/interfaces/interface/mka/state/counters/in-cak-mkpdu"
func (n *Macsec_Interface_Mka_CountersPath) InCakMkpdu() *Macsec_Interface_Mka_Counters_InCakMkpduPath {
	ps := &Macsec_Interface_Mka_Counters_InCakMkpduPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-cak-mkpdu"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InCakMkpdu (leaf): Count of validated MKPDU  connectivity association key (CAK) pdus
// received.  This counter is related to the group-cak feature in the
// 802.1X-2010 standard.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "in-cak-mkpdu"
//	Path from root:       "/macsec/interfaces/interface/mka/state/counters/in-cak-mkpdu"
func (n *Macsec_Interface_Mka_CountersPathAny) InCakMkpdu() *Macsec_Interface_Mka_Counters_InCakMkpduPathAny {
	ps := &Macsec_Interface_Mka_Counters_InCakMkpduPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-cak-mkpdu"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMkpdu (leaf): Validated MKPDU received count
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "in-mkpdu"
//	Path from root:       "/macsec/interfaces/interface/mka/state/counters/in-mkpdu"
func (n *Macsec_Interface_Mka_CountersPath) InMkpdu() *Macsec_Interface_Mka_Counters_InMkpduPath {
	ps := &Macsec_Interface_Mka_Counters_InMkpduPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-mkpdu"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMkpdu (leaf): Validated MKPDU received count
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "in-mkpdu"
//	Path from root:       "/macsec/interfaces/interface/mka/state/counters/in-mkpdu"
func (n *Macsec_Interface_Mka_CountersPathAny) InMkpdu() *Macsec_Interface_Mka_Counters_InMkpduPathAny {
	ps := &Macsec_Interface_Mka_Counters_InMkpduPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-mkpdu"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InSakMkpdu (leaf): Validated MKPDU received SAK count
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "in-sak-mkpdu"
//	Path from root:       "/macsec/interfaces/interface/mka/state/counters/in-sak-mkpdu"
func (n *Macsec_Interface_Mka_CountersPath) InSakMkpdu() *Macsec_Interface_Mka_Counters_InSakMkpduPath {
	ps := &Macsec_Interface_Mka_Counters_InSakMkpduPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-sak-mkpdu"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InSakMkpdu (leaf): Validated MKPDU received SAK count
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "in-sak-mkpdu"
//	Path from root:       "/macsec/interfaces/interface/mka/state/counters/in-sak-mkpdu"
func (n *Macsec_Interface_Mka_CountersPathAny) InSakMkpdu() *Macsec_Interface_Mka_Counters_InSakMkpduPathAny {
	ps := &Macsec_Interface_Mka_Counters_InSakMkpduPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-sak-mkpdu"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutCakMkpdu (leaf): Count of MKPDU connectivity association key (CAK) pdu's sent.
// This counter is related to the group-cak feature in the
// 802.1X-2010 standard.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "out-cak-mkpdu"
//	Path from root:       "/macsec/interfaces/interface/mka/state/counters/out-cak-mkpdu"
func (n *Macsec_Interface_Mka_CountersPath) OutCakMkpdu() *Macsec_Interface_Mka_Counters_OutCakMkpduPath {
	ps := &Macsec_Interface_Mka_Counters_OutCakMkpduPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-cak-mkpdu"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutCakMkpdu (leaf): Count of MKPDU connectivity association key (CAK) pdu's sent.
// This counter is related to the group-cak feature in the
// 802.1X-2010 standard.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "out-cak-mkpdu"
//	Path from root:       "/macsec/interfaces/interface/mka/state/counters/out-cak-mkpdu"
func (n *Macsec_Interface_Mka_CountersPathAny) OutCakMkpdu() *Macsec_Interface_Mka_Counters_OutCakMkpduPathAny {
	ps := &Macsec_Interface_Mka_Counters_OutCakMkpduPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-cak-mkpdu"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMkpdu (leaf): MKPDU sent count
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "out-mkpdu"
//	Path from root:       "/macsec/interfaces/interface/mka/state/counters/out-mkpdu"
func (n *Macsec_Interface_Mka_CountersPath) OutMkpdu() *Macsec_Interface_Mka_Counters_OutMkpduPath {
	ps := &Macsec_Interface_Mka_Counters_OutMkpduPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-mkpdu"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMkpdu (leaf): MKPDU sent count
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "out-mkpdu"
//	Path from root:       "/macsec/interfaces/interface/mka/state/counters/out-mkpdu"
func (n *Macsec_Interface_Mka_CountersPathAny) OutMkpdu() *Macsec_Interface_Mka_Counters_OutMkpduPathAny {
	ps := &Macsec_Interface_Mka_Counters_OutMkpduPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-mkpdu"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutSakMkpdu (leaf): MKPDU SAK sent count
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "out-sak-mkpdu"
//	Path from root:       "/macsec/interfaces/interface/mka/state/counters/out-sak-mkpdu"
func (n *Macsec_Interface_Mka_CountersPath) OutSakMkpdu() *Macsec_Interface_Mka_Counters_OutSakMkpduPath {
	ps := &Macsec_Interface_Mka_Counters_OutSakMkpduPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-sak-mkpdu"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutSakMkpdu (leaf): MKPDU SAK sent count
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "out-sak-mkpdu"
//	Path from root:       "/macsec/interfaces/interface/mka/state/counters/out-sak-mkpdu"
func (n *Macsec_Interface_Mka_CountersPathAny) OutSakMkpdu() *Macsec_Interface_Mka_Counters_OutSakMkpduPathAny {
	ps := &Macsec_Interface_Mka_Counters_OutSakMkpduPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-sak-mkpdu"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Macsec_Interface_Mka_CountersPath) State() ygnmi.SingletonQuery[*oc.Macsec_Interface_Mka_Counters] {
	return ygnmi.NewSingletonQuery[*oc.Macsec_Interface_Mka_Counters](
		"Macsec_Interface_Mka_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Macsec_Interface_Mka_CountersPathAny) State() ygnmi.WildcardQuery[*oc.Macsec_Interface_Mka_Counters] {
	return ygnmi.NewWildcardQuery[*oc.Macsec_Interface_Mka_Counters](
		"Macsec_Interface_Mka_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Interface_ScsaRx_SciRxPath represents the /openconfig-macsec/macsec/interfaces/interface/scsa-rx/scsa-rx/state/sci-rx YANG schema element.
type Macsec_Interface_ScsaRx_SciRxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Interface_ScsaRx_SciRxPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/scsa-rx/scsa-rx/state/sci-rx YANG schema element.
type Macsec_Interface_ScsaRx_SciRxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/sci-rx"
//	Path from root:       "/macsec/interfaces/interface/scsa-rx/scsa-rx/state/sci-rx"
func (n *Macsec_Interface_ScsaRx_SciRxPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Macsec_Interface_ScsaRx",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sci-rx"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Macsec_Interface_ScsaRx).SciRx
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_ScsaRx) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/sci-rx"
//	Path from root:       "/macsec/interfaces/interface/scsa-rx/scsa-rx/state/sci-rx"
func (n *Macsec_Interface_ScsaRx_SciRxPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Macsec_Interface_ScsaRx",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sci-rx"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Macsec_Interface_ScsaRx).SciRx
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_ScsaRx) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sci-rx"
//	Path from root:       ""
func (n *Macsec_Interface_ScsaRx_SciRxPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Macsec_Interface_ScsaRx",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sci-rx"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Macsec_Interface_ScsaRx).SciRx
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_ScsaRx) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sci-rx"
//	Path from root:       ""
func (n *Macsec_Interface_ScsaRx_SciRxPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Macsec_Interface_ScsaRx",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sci-rx"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Macsec_Interface_ScsaRx).SciRx
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_ScsaRx) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Interface_ScsaRxPath represents the /openconfig-macsec/macsec/interfaces/interface/scsa-rx/scsa-rx YANG schema element.
type Macsec_Interface_ScsaRxPath struct {
	*ygnmi.NodePath
}

// Macsec_Interface_ScsaRxPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/scsa-rx/scsa-rx YANG schema element.
type Macsec_Interface_ScsaRxPathAny struct {
	*ygnmi.NodePath
}

// Macsec_Interface_ScsaRxPathMap represents the /openconfig-macsec/macsec/interfaces/interface/scsa-rx/scsa-rx YANG schema element.
type Macsec_Interface_ScsaRxPathMap struct {
	*ygnmi.NodePath
}

// Macsec_Interface_ScsaRxPathMapAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/scsa-rx/scsa-rx YANG schema element.
type Macsec_Interface_ScsaRxPathMapAny struct {
	*ygnmi.NodePath
}

// Counters (container): Counters container for macsec-scsa-rx-interface-stats
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/counters"
//	Path from root:       "/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters"
func (n *Macsec_Interface_ScsaRxPath) Counters() *Macsec_Interface_ScsaRx_CountersPath {
	ps := &Macsec_Interface_ScsaRx_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Counters container for macsec-scsa-rx-interface-stats
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/counters"
//	Path from root:       "/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters"
func (n *Macsec_Interface_ScsaRxPathAny) Counters() *Macsec_Interface_ScsaRx_CountersPathAny {
	ps := &Macsec_Interface_ScsaRx_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SciRx (leaf): Secure Channel Identifier.
// Every Receive Channel is uniquely identified using this field.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "*/sci-rx"
//	Path from root:       "/macsec/interfaces/interface/scsa-rx/scsa-rx/*/sci-rx"
func (n *Macsec_Interface_ScsaRxPath) SciRx() *Macsec_Interface_ScsaRx_SciRxPath {
	ps := &Macsec_Interface_ScsaRx_SciRxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sci-rx"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SciRx (leaf): Secure Channel Identifier.
// Every Receive Channel is uniquely identified using this field.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "*/sci-rx"
//	Path from root:       "/macsec/interfaces/interface/scsa-rx/scsa-rx/*/sci-rx"
func (n *Macsec_Interface_ScsaRxPathAny) SciRx() *Macsec_Interface_ScsaRx_SciRxPathAny {
	ps := &Macsec_Interface_ScsaRx_SciRxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sci-rx"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Macsec_Interface_ScsaRxPath) State() ygnmi.SingletonQuery[*oc.Macsec_Interface_ScsaRx] {
	return ygnmi.NewSingletonQuery[*oc.Macsec_Interface_ScsaRx](
		"Macsec_Interface_ScsaRx",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Macsec_Interface_ScsaRxPathAny) State() ygnmi.WildcardQuery[*oc.Macsec_Interface_ScsaRx] {
	return ygnmi.NewWildcardQuery[*oc.Macsec_Interface_ScsaRx](
		"Macsec_Interface_ScsaRx",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Macsec_Interface_ScsaRxPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Macsec_Interface_ScsaRx] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Macsec_Interface_ScsaRx](
		"Macsec_Interface",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Macsec_Interface_ScsaRx, bool) {
			ret := gs.(*oc.Macsec_Interface).ScsaRx
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-macsec:scsa-rx"},
			PostRelPath: []string{"openconfig-macsec:scsa-rx"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Macsec_Interface_ScsaRxPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Macsec_Interface_ScsaRx] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Macsec_Interface_ScsaRx](
		"Macsec_Interface",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Macsec_Interface_ScsaRx, bool) {
			ret := gs.(*oc.Macsec_Interface).ScsaRx
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-macsec:scsa-rx"},
			PostRelPath: []string{"openconfig-macsec:scsa-rx"},
		},
	)
}

// Macsec_Interface_ScsaRx_Counters_SaInvalidPath represents the /openconfig-macsec/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters/sa-invalid YANG schema element.
type Macsec_Interface_ScsaRx_Counters_SaInvalidPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Interface_ScsaRx_Counters_SaInvalidPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters/sa-invalid YANG schema element.
type Macsec_Interface_ScsaRx_Counters_SaInvalidPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sa-invalid"
//	Path from root:       "/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters/sa-invalid"
func (n *Macsec_Interface_ScsaRx_Counters_SaInvalidPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Macsec_Interface_ScsaRx_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sa-invalid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Interface_ScsaRx_Counters).SaInvalid
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_ScsaRx_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sa-invalid"
//	Path from root:       "/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters/sa-invalid"
func (n *Macsec_Interface_ScsaRx_Counters_SaInvalidPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Macsec_Interface_ScsaRx_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sa-invalid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Interface_ScsaRx_Counters).SaInvalid
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_ScsaRx_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Interface_ScsaRx_Counters_SaValidPath represents the /openconfig-macsec/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters/sa-valid YANG schema element.
type Macsec_Interface_ScsaRx_Counters_SaValidPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Interface_ScsaRx_Counters_SaValidPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters/sa-valid YANG schema element.
type Macsec_Interface_ScsaRx_Counters_SaValidPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sa-valid"
//	Path from root:       "/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters/sa-valid"
func (n *Macsec_Interface_ScsaRx_Counters_SaValidPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Macsec_Interface_ScsaRx_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sa-valid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Interface_ScsaRx_Counters).SaValid
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_ScsaRx_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sa-valid"
//	Path from root:       "/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters/sa-valid"
func (n *Macsec_Interface_ScsaRx_Counters_SaValidPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Macsec_Interface_ScsaRx_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sa-valid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Interface_ScsaRx_Counters).SaValid
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_ScsaRx_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Interface_ScsaRx_Counters_ScInvalidPath represents the /openconfig-macsec/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters/sc-invalid YANG schema element.
type Macsec_Interface_ScsaRx_Counters_ScInvalidPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Interface_ScsaRx_Counters_ScInvalidPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters/sc-invalid YANG schema element.
type Macsec_Interface_ScsaRx_Counters_ScInvalidPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sc-invalid"
//	Path from root:       "/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters/sc-invalid"
func (n *Macsec_Interface_ScsaRx_Counters_ScInvalidPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Macsec_Interface_ScsaRx_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sc-invalid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Interface_ScsaRx_Counters).ScInvalid
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_ScsaRx_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sc-invalid"
//	Path from root:       "/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters/sc-invalid"
func (n *Macsec_Interface_ScsaRx_Counters_ScInvalidPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Macsec_Interface_ScsaRx_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sc-invalid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Interface_ScsaRx_Counters).ScInvalid
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_ScsaRx_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Interface_ScsaRx_Counters_ScValidPath represents the /openconfig-macsec/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters/sc-valid YANG schema element.
type Macsec_Interface_ScsaRx_Counters_ScValidPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Interface_ScsaRx_Counters_ScValidPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters/sc-valid YANG schema element.
type Macsec_Interface_ScsaRx_Counters_ScValidPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sc-valid"
//	Path from root:       "/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters/sc-valid"
func (n *Macsec_Interface_ScsaRx_Counters_ScValidPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Macsec_Interface_ScsaRx_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sc-valid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Interface_ScsaRx_Counters).ScValid
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_ScsaRx_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sc-valid"
//	Path from root:       "/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters/sc-valid"
func (n *Macsec_Interface_ScsaRx_Counters_ScValidPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Macsec_Interface_ScsaRx_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sc-valid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Interface_ScsaRx_Counters).ScValid
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_ScsaRx_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Interface_ScsaRx_CountersPath represents the /openconfig-macsec/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters YANG schema element.
type Macsec_Interface_ScsaRx_CountersPath struct {
	*ygnmi.NodePath
}

// Macsec_Interface_ScsaRx_CountersPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters YANG schema element.
type Macsec_Interface_ScsaRx_CountersPathAny struct {
	*ygnmi.NodePath
}

// SaInvalid (leaf): Invalid Secure Association RX Packets counter.
// This counter reflects the number of integrity check fails for received
// packets in a secure association.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sa-invalid"
//	Path from root:       "/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters/sa-invalid"
func (n *Macsec_Interface_ScsaRx_CountersPath) SaInvalid() *Macsec_Interface_ScsaRx_Counters_SaInvalidPath {
	ps := &Macsec_Interface_ScsaRx_Counters_SaInvalidPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"sa-invalid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SaInvalid (leaf): Invalid Secure Association RX Packets counter.
// This counter reflects the number of integrity check fails for received
// packets in a secure association.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sa-invalid"
//	Path from root:       "/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters/sa-invalid"
func (n *Macsec_Interface_ScsaRx_CountersPathAny) SaInvalid() *Macsec_Interface_ScsaRx_Counters_SaInvalidPathAny {
	ps := &Macsec_Interface_ScsaRx_Counters_SaInvalidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sa-invalid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SaValid (leaf): Secure Association Valid RX Packets counter.
// This counter reflects the number of packets in a secure association
// that passed integrity check.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sa-valid"
//	Path from root:       "/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters/sa-valid"
func (n *Macsec_Interface_ScsaRx_CountersPath) SaValid() *Macsec_Interface_ScsaRx_Counters_SaValidPath {
	ps := &Macsec_Interface_ScsaRx_Counters_SaValidPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"sa-valid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SaValid (leaf): Secure Association Valid RX Packets counter.
// This counter reflects the number of packets in a secure association
// that passed integrity check.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sa-valid"
//	Path from root:       "/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters/sa-valid"
func (n *Macsec_Interface_ScsaRx_CountersPathAny) SaValid() *Macsec_Interface_ScsaRx_Counters_SaValidPathAny {
	ps := &Macsec_Interface_ScsaRx_Counters_SaValidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sa-valid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ScInvalid (leaf): Invalid Secure Channel RX Packets counter.
// This counter reflects the number of invalid received packets in a
// secure channel.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sc-invalid"
//	Path from root:       "/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters/sc-invalid"
func (n *Macsec_Interface_ScsaRx_CountersPath) ScInvalid() *Macsec_Interface_ScsaRx_Counters_ScInvalidPath {
	ps := &Macsec_Interface_ScsaRx_Counters_ScInvalidPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"sc-invalid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ScInvalid (leaf): Invalid Secure Channel RX Packets counter.
// This counter reflects the number of invalid received packets in a
// secure channel.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sc-invalid"
//	Path from root:       "/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters/sc-invalid"
func (n *Macsec_Interface_ScsaRx_CountersPathAny) ScInvalid() *Macsec_Interface_ScsaRx_Counters_ScInvalidPathAny {
	ps := &Macsec_Interface_ScsaRx_Counters_ScInvalidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sc-invalid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ScValid (leaf): Valid Secure Channel RX Packets counter.
// This counter reflects the number of valid received packets in a
// secure channel.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sc-valid"
//	Path from root:       "/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters/sc-valid"
func (n *Macsec_Interface_ScsaRx_CountersPath) ScValid() *Macsec_Interface_ScsaRx_Counters_ScValidPath {
	ps := &Macsec_Interface_ScsaRx_Counters_ScValidPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"sc-valid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ScValid (leaf): Valid Secure Channel RX Packets counter.
// This counter reflects the number of valid received packets in a
// secure channel.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sc-valid"
//	Path from root:       "/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters/sc-valid"
func (n *Macsec_Interface_ScsaRx_CountersPathAny) ScValid() *Macsec_Interface_ScsaRx_Counters_ScValidPathAny {
	ps := &Macsec_Interface_ScsaRx_Counters_ScValidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sc-valid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Macsec_Interface_ScsaRx_CountersPath) State() ygnmi.SingletonQuery[*oc.Macsec_Interface_ScsaRx_Counters] {
	return ygnmi.NewSingletonQuery[*oc.Macsec_Interface_ScsaRx_Counters](
		"Macsec_Interface_ScsaRx_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Macsec_Interface_ScsaRx_CountersPathAny) State() ygnmi.WildcardQuery[*oc.Macsec_Interface_ScsaRx_Counters] {
	return ygnmi.NewWildcardQuery[*oc.Macsec_Interface_ScsaRx_Counters](
		"Macsec_Interface_ScsaRx_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Interface_ScsaTx_SciTxPath represents the /openconfig-macsec/macsec/interfaces/interface/scsa-tx/scsa-tx/state/sci-tx YANG schema element.
type Macsec_Interface_ScsaTx_SciTxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Interface_ScsaTx_SciTxPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/scsa-tx/scsa-tx/state/sci-tx YANG schema element.
type Macsec_Interface_ScsaTx_SciTxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/sci-tx"
//	Path from root:       "/macsec/interfaces/interface/scsa-tx/scsa-tx/state/sci-tx"
func (n *Macsec_Interface_ScsaTx_SciTxPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Macsec_Interface_ScsaTx",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sci-tx"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Macsec_Interface_ScsaTx).SciTx
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_ScsaTx) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/sci-tx"
//	Path from root:       "/macsec/interfaces/interface/scsa-tx/scsa-tx/state/sci-tx"
func (n *Macsec_Interface_ScsaTx_SciTxPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Macsec_Interface_ScsaTx",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sci-tx"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Macsec_Interface_ScsaTx).SciTx
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_ScsaTx) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sci-tx"
//	Path from root:       ""
func (n *Macsec_Interface_ScsaTx_SciTxPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Macsec_Interface_ScsaTx",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sci-tx"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Macsec_Interface_ScsaTx).SciTx
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_ScsaTx) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sci-tx"
//	Path from root:       ""
func (n *Macsec_Interface_ScsaTx_SciTxPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Macsec_Interface_ScsaTx",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sci-tx"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Macsec_Interface_ScsaTx).SciTx
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_ScsaTx) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Interface_ScsaTxPath represents the /openconfig-macsec/macsec/interfaces/interface/scsa-tx/scsa-tx YANG schema element.
type Macsec_Interface_ScsaTxPath struct {
	*ygnmi.NodePath
}

// Macsec_Interface_ScsaTxPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/scsa-tx/scsa-tx YANG schema element.
type Macsec_Interface_ScsaTxPathAny struct {
	*ygnmi.NodePath
}

// Macsec_Interface_ScsaTxPathMap represents the /openconfig-macsec/macsec/interfaces/interface/scsa-tx/scsa-tx YANG schema element.
type Macsec_Interface_ScsaTxPathMap struct {
	*ygnmi.NodePath
}

// Macsec_Interface_ScsaTxPathMapAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/scsa-tx/scsa-tx YANG schema element.
type Macsec_Interface_ScsaTxPathMapAny struct {
	*ygnmi.NodePath
}

// Counters (container): Counters container for macsec-scsa-tx-interface-stats
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/counters"
//	Path from root:       "/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters"
func (n *Macsec_Interface_ScsaTxPath) Counters() *Macsec_Interface_ScsaTx_CountersPath {
	ps := &Macsec_Interface_ScsaTx_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Counters container for macsec-scsa-tx-interface-stats
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/counters"
//	Path from root:       "/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters"
func (n *Macsec_Interface_ScsaTxPathAny) Counters() *Macsec_Interface_ScsaTx_CountersPathAny {
	ps := &Macsec_Interface_ScsaTx_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SciTx (leaf): Secure Channel Identifier.
// Every Transmit Channel is uniquely identified using this field.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "*/sci-tx"
//	Path from root:       "/macsec/interfaces/interface/scsa-tx/scsa-tx/*/sci-tx"
func (n *Macsec_Interface_ScsaTxPath) SciTx() *Macsec_Interface_ScsaTx_SciTxPath {
	ps := &Macsec_Interface_ScsaTx_SciTxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sci-tx"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SciTx (leaf): Secure Channel Identifier.
// Every Transmit Channel is uniquely identified using this field.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "*/sci-tx"
//	Path from root:       "/macsec/interfaces/interface/scsa-tx/scsa-tx/*/sci-tx"
func (n *Macsec_Interface_ScsaTxPathAny) SciTx() *Macsec_Interface_ScsaTx_SciTxPathAny {
	ps := &Macsec_Interface_ScsaTx_SciTxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sci-tx"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Macsec_Interface_ScsaTxPath) State() ygnmi.SingletonQuery[*oc.Macsec_Interface_ScsaTx] {
	return ygnmi.NewSingletonQuery[*oc.Macsec_Interface_ScsaTx](
		"Macsec_Interface_ScsaTx",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Macsec_Interface_ScsaTxPathAny) State() ygnmi.WildcardQuery[*oc.Macsec_Interface_ScsaTx] {
	return ygnmi.NewWildcardQuery[*oc.Macsec_Interface_ScsaTx](
		"Macsec_Interface_ScsaTx",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Macsec_Interface_ScsaTxPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Macsec_Interface_ScsaTx] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Macsec_Interface_ScsaTx](
		"Macsec_Interface",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Macsec_Interface_ScsaTx, bool) {
			ret := gs.(*oc.Macsec_Interface).ScsaTx
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-macsec:scsa-tx"},
			PostRelPath: []string{"openconfig-macsec:scsa-tx"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Macsec_Interface_ScsaTxPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Macsec_Interface_ScsaTx] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Macsec_Interface_ScsaTx](
		"Macsec_Interface",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Macsec_Interface_ScsaTx, bool) {
			ret := gs.(*oc.Macsec_Interface).ScsaTx
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-macsec:scsa-tx"},
			PostRelPath: []string{"openconfig-macsec:scsa-tx"},
		},
	)
}

// Macsec_Interface_ScsaTx_Counters_SaAuthOnlyPath represents the /openconfig-macsec/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters/sa-auth-only YANG schema element.
type Macsec_Interface_ScsaTx_Counters_SaAuthOnlyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Interface_ScsaTx_Counters_SaAuthOnlyPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters/sa-auth-only YANG schema element.
type Macsec_Interface_ScsaTx_Counters_SaAuthOnlyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sa-auth-only"
//	Path from root:       "/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters/sa-auth-only"
func (n *Macsec_Interface_ScsaTx_Counters_SaAuthOnlyPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Macsec_Interface_ScsaTx_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sa-auth-only"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Interface_ScsaTx_Counters).SaAuthOnly
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_ScsaTx_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sa-auth-only"
//	Path from root:       "/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters/sa-auth-only"
func (n *Macsec_Interface_ScsaTx_Counters_SaAuthOnlyPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Macsec_Interface_ScsaTx_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sa-auth-only"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Interface_ScsaTx_Counters).SaAuthOnly
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_ScsaTx_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Interface_ScsaTx_Counters_SaEncryptedPath represents the /openconfig-macsec/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters/sa-encrypted YANG schema element.
type Macsec_Interface_ScsaTx_Counters_SaEncryptedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Interface_ScsaTx_Counters_SaEncryptedPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters/sa-encrypted YANG schema element.
type Macsec_Interface_ScsaTx_Counters_SaEncryptedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sa-encrypted"
//	Path from root:       "/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters/sa-encrypted"
func (n *Macsec_Interface_ScsaTx_Counters_SaEncryptedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Macsec_Interface_ScsaTx_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sa-encrypted"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Interface_ScsaTx_Counters).SaEncrypted
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_ScsaTx_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sa-encrypted"
//	Path from root:       "/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters/sa-encrypted"
func (n *Macsec_Interface_ScsaTx_Counters_SaEncryptedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Macsec_Interface_ScsaTx_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sa-encrypted"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Interface_ScsaTx_Counters).SaEncrypted
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_ScsaTx_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Interface_ScsaTx_Counters_ScAuthOnlyPath represents the /openconfig-macsec/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters/sc-auth-only YANG schema element.
type Macsec_Interface_ScsaTx_Counters_ScAuthOnlyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Interface_ScsaTx_Counters_ScAuthOnlyPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters/sc-auth-only YANG schema element.
type Macsec_Interface_ScsaTx_Counters_ScAuthOnlyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sc-auth-only"
//	Path from root:       "/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters/sc-auth-only"
func (n *Macsec_Interface_ScsaTx_Counters_ScAuthOnlyPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Macsec_Interface_ScsaTx_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sc-auth-only"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Interface_ScsaTx_Counters).ScAuthOnly
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_ScsaTx_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sc-auth-only"
//	Path from root:       "/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters/sc-auth-only"
func (n *Macsec_Interface_ScsaTx_Counters_ScAuthOnlyPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Macsec_Interface_ScsaTx_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sc-auth-only"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Interface_ScsaTx_Counters).ScAuthOnly
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_ScsaTx_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Interface_ScsaTx_Counters_ScEncryptedPath represents the /openconfig-macsec/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters/sc-encrypted YANG schema element.
type Macsec_Interface_ScsaTx_Counters_ScEncryptedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Interface_ScsaTx_Counters_ScEncryptedPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters/sc-encrypted YANG schema element.
type Macsec_Interface_ScsaTx_Counters_ScEncryptedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sc-encrypted"
//	Path from root:       "/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters/sc-encrypted"
func (n *Macsec_Interface_ScsaTx_Counters_ScEncryptedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Macsec_Interface_ScsaTx_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sc-encrypted"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Interface_ScsaTx_Counters).ScEncrypted
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_ScsaTx_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sc-encrypted"
//	Path from root:       "/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters/sc-encrypted"
func (n *Macsec_Interface_ScsaTx_Counters_ScEncryptedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Macsec_Interface_ScsaTx_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sc-encrypted"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Interface_ScsaTx_Counters).ScEncrypted
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Interface_ScsaTx_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Interface_ScsaTx_CountersPath represents the /openconfig-macsec/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters YANG schema element.
type Macsec_Interface_ScsaTx_CountersPath struct {
	*ygnmi.NodePath
}

// Macsec_Interface_ScsaTx_CountersPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters YANG schema element.
type Macsec_Interface_ScsaTx_CountersPathAny struct {
	*ygnmi.NodePath
}

// SaAuthOnly (leaf): Secure Association Authenticated only TX Packets counter.
// This counter reflects the number of authenticated only, transmitted
// packets in a secure association.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sa-auth-only"
//	Path from root:       "/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters/sa-auth-only"
func (n *Macsec_Interface_ScsaTx_CountersPath) SaAuthOnly() *Macsec_Interface_ScsaTx_Counters_SaAuthOnlyPath {
	ps := &Macsec_Interface_ScsaTx_Counters_SaAuthOnlyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"sa-auth-only"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SaAuthOnly (leaf): Secure Association Authenticated only TX Packets counter.
// This counter reflects the number of authenticated only, transmitted
// packets in a secure association.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sa-auth-only"
//	Path from root:       "/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters/sa-auth-only"
func (n *Macsec_Interface_ScsaTx_CountersPathAny) SaAuthOnly() *Macsec_Interface_ScsaTx_Counters_SaAuthOnlyPathAny {
	ps := &Macsec_Interface_ScsaTx_Counters_SaAuthOnlyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sa-auth-only"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SaEncrypted (leaf): Secure Association Encrypted TX Packets counter.
// This counter reflects the number of encrypted and authenticated
// transmitted packets in a secure association.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sa-encrypted"
//	Path from root:       "/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters/sa-encrypted"
func (n *Macsec_Interface_ScsaTx_CountersPath) SaEncrypted() *Macsec_Interface_ScsaTx_Counters_SaEncryptedPath {
	ps := &Macsec_Interface_ScsaTx_Counters_SaEncryptedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"sa-encrypted"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SaEncrypted (leaf): Secure Association Encrypted TX Packets counter.
// This counter reflects the number of encrypted and authenticated
// transmitted packets in a secure association.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sa-encrypted"
//	Path from root:       "/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters/sa-encrypted"
func (n *Macsec_Interface_ScsaTx_CountersPathAny) SaEncrypted() *Macsec_Interface_ScsaTx_Counters_SaEncryptedPathAny {
	ps := &Macsec_Interface_ScsaTx_Counters_SaEncryptedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sa-encrypted"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ScAuthOnly (leaf): Secure Channel Authenticated only TX Packets counter.
// This counter reflects the number of authenticated only transmitted
// packets in a secure channel.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sc-auth-only"
//	Path from root:       "/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters/sc-auth-only"
func (n *Macsec_Interface_ScsaTx_CountersPath) ScAuthOnly() *Macsec_Interface_ScsaTx_Counters_ScAuthOnlyPath {
	ps := &Macsec_Interface_ScsaTx_Counters_ScAuthOnlyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"sc-auth-only"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ScAuthOnly (leaf): Secure Channel Authenticated only TX Packets counter.
// This counter reflects the number of authenticated only transmitted
// packets in a secure channel.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sc-auth-only"
//	Path from root:       "/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters/sc-auth-only"
func (n *Macsec_Interface_ScsaTx_CountersPathAny) ScAuthOnly() *Macsec_Interface_ScsaTx_Counters_ScAuthOnlyPathAny {
	ps := &Macsec_Interface_ScsaTx_Counters_ScAuthOnlyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sc-auth-only"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ScEncrypted (leaf): Secure Channel Encrypted TX Packets counter.
// This counter reflects the number of encrypted and authenticated
// transmitted packets in a secure channel.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sc-encrypted"
//	Path from root:       "/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters/sc-encrypted"
func (n *Macsec_Interface_ScsaTx_CountersPath) ScEncrypted() *Macsec_Interface_ScsaTx_Counters_ScEncryptedPath {
	ps := &Macsec_Interface_ScsaTx_Counters_ScEncryptedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"sc-encrypted"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ScEncrypted (leaf): Secure Channel Encrypted TX Packets counter.
// This counter reflects the number of encrypted and authenticated
// transmitted packets in a secure channel.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sc-encrypted"
//	Path from root:       "/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters/sc-encrypted"
func (n *Macsec_Interface_ScsaTx_CountersPathAny) ScEncrypted() *Macsec_Interface_ScsaTx_Counters_ScEncryptedPathAny {
	ps := &Macsec_Interface_ScsaTx_Counters_ScEncryptedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sc-encrypted"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Macsec_Interface_ScsaTx_CountersPath) State() ygnmi.SingletonQuery[*oc.Macsec_Interface_ScsaTx_Counters] {
	return ygnmi.NewSingletonQuery[*oc.Macsec_Interface_ScsaTx_Counters](
		"Macsec_Interface_ScsaTx_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Macsec_Interface_ScsaTx_CountersPathAny) State() ygnmi.WildcardQuery[*oc.Macsec_Interface_ScsaTx_Counters] {
	return ygnmi.NewWildcardQuery[*oc.Macsec_Interface_ScsaTx_Counters](
		"Macsec_Interface_ScsaTx_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_MkaPath represents the /openconfig-macsec/macsec/mka YANG schema element.
type Macsec_MkaPath struct {
	*ygnmi.NodePath
}

// Macsec_MkaPathAny represents the wildcard version of the /openconfig-macsec/macsec/mka YANG schema element.
type Macsec_MkaPathAny struct {
	*ygnmi.NodePath
}

// Counters (container): MKA global counters
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/counters"
//	Path from root:       "/macsec/mka/state/counters"
func (n *Macsec_MkaPath) Counters() *Macsec_Mka_CountersPath {
	ps := &Macsec_Mka_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): MKA global counters
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/counters"
//	Path from root:       "/macsec/mka/state/counters"
func (n *Macsec_MkaPathAny) Counters() *Macsec_Mka_CountersPathAny {
	ps := &Macsec_Mka_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PolicyAny (list): List of MKA policies
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "policies/policy"
//	Path from root:       "/macsec/mka/policies/policy"
func (n *Macsec_MkaPath) PolicyAny() *Macsec_Mka_PolicyPathAny {
	ps := &Macsec_Mka_PolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"policies", "policy"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// PolicyAny (list): List of MKA policies
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "policies/policy"
//	Path from root:       "/macsec/mka/policies/policy"
func (n *Macsec_MkaPathAny) PolicyAny() *Macsec_Mka_PolicyPathAny {
	ps := &Macsec_Mka_PolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"policies", "policy"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Policy (list): List of MKA policies
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "policies/policy"
//	Path from root:       "/macsec/mka/policies/policy"
//
//	Name: string
func (n *Macsec_MkaPath) Policy(Name string) *Macsec_Mka_PolicyPath {
	ps := &Macsec_Mka_PolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"policies", "policy"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Policy (list): List of MKA policies
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "policies/policy"
//	Path from root:       "/macsec/mka/policies/policy"
//
//	Name: string
func (n *Macsec_MkaPathAny) Policy(Name string) *Macsec_Mka_PolicyPathAny {
	ps := &Macsec_Mka_PolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"policies", "policy"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// PolicyMap (list): List of MKA policies
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "policies/policy"
//	Path from root:       "/macsec/mka/policies/policy"
func (n *Macsec_MkaPath) PolicyMap() *Macsec_Mka_PolicyPathMap {
	ps := &Macsec_Mka_PolicyPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"policies"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PolicyMap (list): List of MKA policies
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "policies/policy"
//	Path from root:       "/macsec/mka/policies/policy"
func (n *Macsec_MkaPathAny) PolicyMap() *Macsec_Mka_PolicyPathMapAny {
	ps := &Macsec_Mka_PolicyPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"policies"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Macsec_MkaPath) State() ygnmi.SingletonQuery[*oc.Macsec_Mka] {
	return ygnmi.NewSingletonQuery[*oc.Macsec_Mka](
		"Macsec_Mka",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Macsec_MkaPathAny) State() ygnmi.WildcardQuery[*oc.Macsec_Mka] {
	return ygnmi.NewWildcardQuery[*oc.Macsec_Mka](
		"Macsec_Mka",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Macsec_MkaPath) Config() ygnmi.ConfigQuery[*oc.Macsec_Mka] {
	return ygnmi.NewConfigQuery[*oc.Macsec_Mka](
		"Macsec_Mka",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Macsec_MkaPathAny) Config() ygnmi.WildcardQuery[*oc.Macsec_Mka] {
	return ygnmi.NewWildcardQuery[*oc.Macsec_Mka](
		"Macsec_Mka",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Mka_Counters_InMkpduBadPeerErrorsPath represents the /openconfig-macsec/macsec/mka/state/counters/in-mkpdu-bad-peer-errors YANG schema element.
type Macsec_Mka_Counters_InMkpduBadPeerErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Mka_Counters_InMkpduBadPeerErrorsPathAny represents the wildcard version of the /openconfig-macsec/macsec/mka/state/counters/in-mkpdu-bad-peer-errors YANG schema element.
type Macsec_Mka_Counters_InMkpduBadPeerErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "in-mkpdu-bad-peer-errors"
//	Path from root:       "/macsec/mka/state/counters/in-mkpdu-bad-peer-errors"
func (n *Macsec_Mka_Counters_InMkpduBadPeerErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Macsec_Mka_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-mkpdu-bad-peer-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Mka_Counters).InMkpduBadPeerErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "in-mkpdu-bad-peer-errors"
//	Path from root:       "/macsec/mka/state/counters/in-mkpdu-bad-peer-errors"
func (n *Macsec_Mka_Counters_InMkpduBadPeerErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Macsec_Mka_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-mkpdu-bad-peer-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Mka_Counters).InMkpduBadPeerErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Mka_Counters_InMkpduIcvVerificationErrorsPath represents the /openconfig-macsec/macsec/mka/state/counters/in-mkpdu-icv-verification-errors YANG schema element.
type Macsec_Mka_Counters_InMkpduIcvVerificationErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Mka_Counters_InMkpduIcvVerificationErrorsPathAny represents the wildcard version of the /openconfig-macsec/macsec/mka/state/counters/in-mkpdu-icv-verification-errors YANG schema element.
type Macsec_Mka_Counters_InMkpduIcvVerificationErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "in-mkpdu-icv-verification-errors"
//	Path from root:       "/macsec/mka/state/counters/in-mkpdu-icv-verification-errors"
func (n *Macsec_Mka_Counters_InMkpduIcvVerificationErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Macsec_Mka_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-mkpdu-icv-verification-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Mka_Counters).InMkpduIcvVerificationErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "in-mkpdu-icv-verification-errors"
//	Path from root:       "/macsec/mka/state/counters/in-mkpdu-icv-verification-errors"
func (n *Macsec_Mka_Counters_InMkpduIcvVerificationErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Macsec_Mka_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-mkpdu-icv-verification-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Mka_Counters).InMkpduIcvVerificationErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Mka_Counters_InMkpduPeerListErrorsPath represents the /openconfig-macsec/macsec/mka/state/counters/in-mkpdu-peer-list-errors YANG schema element.
type Macsec_Mka_Counters_InMkpduPeerListErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Mka_Counters_InMkpduPeerListErrorsPathAny represents the wildcard version of the /openconfig-macsec/macsec/mka/state/counters/in-mkpdu-peer-list-errors YANG schema element.
type Macsec_Mka_Counters_InMkpduPeerListErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "in-mkpdu-peer-list-errors"
//	Path from root:       "/macsec/mka/state/counters/in-mkpdu-peer-list-errors"
func (n *Macsec_Mka_Counters_InMkpduPeerListErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Macsec_Mka_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-mkpdu-peer-list-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Mka_Counters).InMkpduPeerListErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "in-mkpdu-peer-list-errors"
//	Path from root:       "/macsec/mka/state/counters/in-mkpdu-peer-list-errors"
func (n *Macsec_Mka_Counters_InMkpduPeerListErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Macsec_Mka_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-mkpdu-peer-list-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Mka_Counters).InMkpduPeerListErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Mka_Counters_InMkpduValidationErrorsPath represents the /openconfig-macsec/macsec/mka/state/counters/in-mkpdu-validation-errors YANG schema element.
type Macsec_Mka_Counters_InMkpduValidationErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Mka_Counters_InMkpduValidationErrorsPathAny represents the wildcard version of the /openconfig-macsec/macsec/mka/state/counters/in-mkpdu-validation-errors YANG schema element.
type Macsec_Mka_Counters_InMkpduValidationErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "in-mkpdu-validation-errors"
//	Path from root:       "/macsec/mka/state/counters/in-mkpdu-validation-errors"
func (n *Macsec_Mka_Counters_InMkpduValidationErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Macsec_Mka_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-mkpdu-validation-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Mka_Counters).InMkpduValidationErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "in-mkpdu-validation-errors"
//	Path from root:       "/macsec/mka/state/counters/in-mkpdu-validation-errors"
func (n *Macsec_Mka_Counters_InMkpduValidationErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Macsec_Mka_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-mkpdu-validation-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Mka_Counters).InMkpduValidationErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Mka_Counters_OutMkpduErrorsPath represents the /openconfig-macsec/macsec/mka/state/counters/out-mkpdu-errors YANG schema element.
type Macsec_Mka_Counters_OutMkpduErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Mka_Counters_OutMkpduErrorsPathAny represents the wildcard version of the /openconfig-macsec/macsec/mka/state/counters/out-mkpdu-errors YANG schema element.
type Macsec_Mka_Counters_OutMkpduErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "out-mkpdu-errors"
//	Path from root:       "/macsec/mka/state/counters/out-mkpdu-errors"
func (n *Macsec_Mka_Counters_OutMkpduErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Macsec_Mka_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-mkpdu-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Mka_Counters).OutMkpduErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "out-mkpdu-errors"
//	Path from root:       "/macsec/mka/state/counters/out-mkpdu-errors"
func (n *Macsec_Mka_Counters_OutMkpduErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Macsec_Mka_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-mkpdu-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Mka_Counters).OutMkpduErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Mka_Counters_SakCipherMismatchErrorsPath represents the /openconfig-macsec/macsec/mka/state/counters/sak-cipher-mismatch-errors YANG schema element.
type Macsec_Mka_Counters_SakCipherMismatchErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Mka_Counters_SakCipherMismatchErrorsPathAny represents the wildcard version of the /openconfig-macsec/macsec/mka/state/counters/sak-cipher-mismatch-errors YANG schema element.
type Macsec_Mka_Counters_SakCipherMismatchErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sak-cipher-mismatch-errors"
//	Path from root:       "/macsec/mka/state/counters/sak-cipher-mismatch-errors"
func (n *Macsec_Mka_Counters_SakCipherMismatchErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Macsec_Mka_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sak-cipher-mismatch-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Mka_Counters).SakCipherMismatchErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sak-cipher-mismatch-errors"
//	Path from root:       "/macsec/mka/state/counters/sak-cipher-mismatch-errors"
func (n *Macsec_Mka_Counters_SakCipherMismatchErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Macsec_Mka_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sak-cipher-mismatch-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Mka_Counters).SakCipherMismatchErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Mka_Counters_SakDecryptionErrorsPath represents the /openconfig-macsec/macsec/mka/state/counters/sak-decryption-errors YANG schema element.
type Macsec_Mka_Counters_SakDecryptionErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Mka_Counters_SakDecryptionErrorsPathAny represents the wildcard version of the /openconfig-macsec/macsec/mka/state/counters/sak-decryption-errors YANG schema element.
type Macsec_Mka_Counters_SakDecryptionErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sak-decryption-errors"
//	Path from root:       "/macsec/mka/state/counters/sak-decryption-errors"
func (n *Macsec_Mka_Counters_SakDecryptionErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Macsec_Mka_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sak-decryption-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Mka_Counters).SakDecryptionErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sak-decryption-errors"
//	Path from root:       "/macsec/mka/state/counters/sak-decryption-errors"
func (n *Macsec_Mka_Counters_SakDecryptionErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Macsec_Mka_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sak-decryption-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Mka_Counters).SakDecryptionErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Mka_Counters_SakEncryptionErrorsPath represents the /openconfig-macsec/macsec/mka/state/counters/sak-encryption-errors YANG schema element.
type Macsec_Mka_Counters_SakEncryptionErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Mka_Counters_SakEncryptionErrorsPathAny represents the wildcard version of the /openconfig-macsec/macsec/mka/state/counters/sak-encryption-errors YANG schema element.
type Macsec_Mka_Counters_SakEncryptionErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sak-encryption-errors"
//	Path from root:       "/macsec/mka/state/counters/sak-encryption-errors"
func (n *Macsec_Mka_Counters_SakEncryptionErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Macsec_Mka_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sak-encryption-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Mka_Counters).SakEncryptionErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sak-encryption-errors"
//	Path from root:       "/macsec/mka/state/counters/sak-encryption-errors"
func (n *Macsec_Mka_Counters_SakEncryptionErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Macsec_Mka_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sak-encryption-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Mka_Counters).SakEncryptionErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Mka_Counters_SakGenerationErrorsPath represents the /openconfig-macsec/macsec/mka/state/counters/sak-generation-errors YANG schema element.
type Macsec_Mka_Counters_SakGenerationErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Mka_Counters_SakGenerationErrorsPathAny represents the wildcard version of the /openconfig-macsec/macsec/mka/state/counters/sak-generation-errors YANG schema element.
type Macsec_Mka_Counters_SakGenerationErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sak-generation-errors"
//	Path from root:       "/macsec/mka/state/counters/sak-generation-errors"
func (n *Macsec_Mka_Counters_SakGenerationErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Macsec_Mka_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sak-generation-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Mka_Counters).SakGenerationErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sak-generation-errors"
//	Path from root:       "/macsec/mka/state/counters/sak-generation-errors"
func (n *Macsec_Mka_Counters_SakGenerationErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Macsec_Mka_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sak-generation-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Mka_Counters).SakGenerationErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Mka_Counters_SakHashErrorsPath represents the /openconfig-macsec/macsec/mka/state/counters/sak-hash-errors YANG schema element.
type Macsec_Mka_Counters_SakHashErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Mka_Counters_SakHashErrorsPathAny represents the wildcard version of the /openconfig-macsec/macsec/mka/state/counters/sak-hash-errors YANG schema element.
type Macsec_Mka_Counters_SakHashErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sak-hash-errors"
//	Path from root:       "/macsec/mka/state/counters/sak-hash-errors"
func (n *Macsec_Mka_Counters_SakHashErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Macsec_Mka_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sak-hash-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Mka_Counters).SakHashErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sak-hash-errors"
//	Path from root:       "/macsec/mka/state/counters/sak-hash-errors"
func (n *Macsec_Mka_Counters_SakHashErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Macsec_Mka_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sak-hash-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Macsec_Mka_Counters).SakHashErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Mka_CountersPath represents the /openconfig-macsec/macsec/mka/state/counters YANG schema element.
type Macsec_Mka_CountersPath struct {
	*ygnmi.NodePath
}

// Macsec_Mka_CountersPathAny represents the wildcard version of the /openconfig-macsec/macsec/mka/state/counters YANG schema element.
type Macsec_Mka_CountersPathAny struct {
	*ygnmi.NodePath
}

// InMkpduBadPeerErrors (leaf): MKPDU RX bad peer message number error count
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "in-mkpdu-bad-peer-errors"
//	Path from root:       "/macsec/mka/state/counters/in-mkpdu-bad-peer-errors"
func (n *Macsec_Mka_CountersPath) InMkpduBadPeerErrors() *Macsec_Mka_Counters_InMkpduBadPeerErrorsPath {
	ps := &Macsec_Mka_Counters_InMkpduBadPeerErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-mkpdu-bad-peer-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMkpduBadPeerErrors (leaf): MKPDU RX bad peer message number error count
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "in-mkpdu-bad-peer-errors"
//	Path from root:       "/macsec/mka/state/counters/in-mkpdu-bad-peer-errors"
func (n *Macsec_Mka_CountersPathAny) InMkpduBadPeerErrors() *Macsec_Mka_Counters_InMkpduBadPeerErrorsPathAny {
	ps := &Macsec_Mka_Counters_InMkpduBadPeerErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-mkpdu-bad-peer-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMkpduIcvVerificationErrors (leaf): MKPDU RX ICV verification error count
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "in-mkpdu-icv-verification-errors"
//	Path from root:       "/macsec/mka/state/counters/in-mkpdu-icv-verification-errors"
func (n *Macsec_Mka_CountersPath) InMkpduIcvVerificationErrors() *Macsec_Mka_Counters_InMkpduIcvVerificationErrorsPath {
	ps := &Macsec_Mka_Counters_InMkpduIcvVerificationErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-mkpdu-icv-verification-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMkpduIcvVerificationErrors (leaf): MKPDU RX ICV verification error count
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "in-mkpdu-icv-verification-errors"
//	Path from root:       "/macsec/mka/state/counters/in-mkpdu-icv-verification-errors"
func (n *Macsec_Mka_CountersPathAny) InMkpduIcvVerificationErrors() *Macsec_Mka_Counters_InMkpduIcvVerificationErrorsPathAny {
	ps := &Macsec_Mka_Counters_InMkpduIcvVerificationErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-mkpdu-icv-verification-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMkpduPeerListErrors (leaf): MKPDU RX non-recent peer list Message Number error count
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "in-mkpdu-peer-list-errors"
//	Path from root:       "/macsec/mka/state/counters/in-mkpdu-peer-list-errors"
func (n *Macsec_Mka_CountersPath) InMkpduPeerListErrors() *Macsec_Mka_Counters_InMkpduPeerListErrorsPath {
	ps := &Macsec_Mka_Counters_InMkpduPeerListErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-mkpdu-peer-list-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMkpduPeerListErrors (leaf): MKPDU RX non-recent peer list Message Number error count
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "in-mkpdu-peer-list-errors"
//	Path from root:       "/macsec/mka/state/counters/in-mkpdu-peer-list-errors"
func (n *Macsec_Mka_CountersPathAny) InMkpduPeerListErrors() *Macsec_Mka_Counters_InMkpduPeerListErrorsPathAny {
	ps := &Macsec_Mka_Counters_InMkpduPeerListErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-mkpdu-peer-list-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMkpduValidationErrors (leaf): MKPDU RX validation error count
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "in-mkpdu-validation-errors"
//	Path from root:       "/macsec/mka/state/counters/in-mkpdu-validation-errors"
func (n *Macsec_Mka_CountersPath) InMkpduValidationErrors() *Macsec_Mka_Counters_InMkpduValidationErrorsPath {
	ps := &Macsec_Mka_Counters_InMkpduValidationErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-mkpdu-validation-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMkpduValidationErrors (leaf): MKPDU RX validation error count
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "in-mkpdu-validation-errors"
//	Path from root:       "/macsec/mka/state/counters/in-mkpdu-validation-errors"
func (n *Macsec_Mka_CountersPathAny) InMkpduValidationErrors() *Macsec_Mka_Counters_InMkpduValidationErrorsPathAny {
	ps := &Macsec_Mka_Counters_InMkpduValidationErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-mkpdu-validation-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMkpduErrors (leaf): MKPDU TX error count
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "out-mkpdu-errors"
//	Path from root:       "/macsec/mka/state/counters/out-mkpdu-errors"
func (n *Macsec_Mka_CountersPath) OutMkpduErrors() *Macsec_Mka_Counters_OutMkpduErrorsPath {
	ps := &Macsec_Mka_Counters_OutMkpduErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-mkpdu-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMkpduErrors (leaf): MKPDU TX error count
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "out-mkpdu-errors"
//	Path from root:       "/macsec/mka/state/counters/out-mkpdu-errors"
func (n *Macsec_Mka_CountersPathAny) OutMkpduErrors() *Macsec_Mka_Counters_OutMkpduErrorsPathAny {
	ps := &Macsec_Mka_Counters_OutMkpduErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-mkpdu-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SakCipherMismatchErrors (leaf): MKA error SAK cipher mismatch count
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sak-cipher-mismatch-errors"
//	Path from root:       "/macsec/mka/state/counters/sak-cipher-mismatch-errors"
func (n *Macsec_Mka_CountersPath) SakCipherMismatchErrors() *Macsec_Mka_Counters_SakCipherMismatchErrorsPath {
	ps := &Macsec_Mka_Counters_SakCipherMismatchErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"sak-cipher-mismatch-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SakCipherMismatchErrors (leaf): MKA error SAK cipher mismatch count
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sak-cipher-mismatch-errors"
//	Path from root:       "/macsec/mka/state/counters/sak-cipher-mismatch-errors"
func (n *Macsec_Mka_CountersPathAny) SakCipherMismatchErrors() *Macsec_Mka_Counters_SakCipherMismatchErrorsPathAny {
	ps := &Macsec_Mka_Counters_SakCipherMismatchErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sak-cipher-mismatch-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SakDecryptionErrors (leaf): MKA error SAK decryption/unwrap count
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sak-decryption-errors"
//	Path from root:       "/macsec/mka/state/counters/sak-decryption-errors"
func (n *Macsec_Mka_CountersPath) SakDecryptionErrors() *Macsec_Mka_Counters_SakDecryptionErrorsPath {
	ps := &Macsec_Mka_Counters_SakDecryptionErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"sak-decryption-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SakDecryptionErrors (leaf): MKA error SAK decryption/unwrap count
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sak-decryption-errors"
//	Path from root:       "/macsec/mka/state/counters/sak-decryption-errors"
func (n *Macsec_Mka_CountersPathAny) SakDecryptionErrors() *Macsec_Mka_Counters_SakDecryptionErrorsPathAny {
	ps := &Macsec_Mka_Counters_SakDecryptionErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sak-decryption-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SakEncryptionErrors (leaf): MKA error SAK encryption/wrap count
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sak-encryption-errors"
//	Path from root:       "/macsec/mka/state/counters/sak-encryption-errors"
func (n *Macsec_Mka_CountersPath) SakEncryptionErrors() *Macsec_Mka_Counters_SakEncryptionErrorsPath {
	ps := &Macsec_Mka_Counters_SakEncryptionErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"sak-encryption-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SakEncryptionErrors (leaf): MKA error SAK encryption/wrap count
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sak-encryption-errors"
//	Path from root:       "/macsec/mka/state/counters/sak-encryption-errors"
func (n *Macsec_Mka_CountersPathAny) SakEncryptionErrors() *Macsec_Mka_Counters_SakEncryptionErrorsPathAny {
	ps := &Macsec_Mka_Counters_SakEncryptionErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sak-encryption-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SakGenerationErrors (leaf): MKA error SAK generation count
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sak-generation-errors"
//	Path from root:       "/macsec/mka/state/counters/sak-generation-errors"
func (n *Macsec_Mka_CountersPath) SakGenerationErrors() *Macsec_Mka_Counters_SakGenerationErrorsPath {
	ps := &Macsec_Mka_Counters_SakGenerationErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"sak-generation-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SakGenerationErrors (leaf): MKA error SAK generation count
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sak-generation-errors"
//	Path from root:       "/macsec/mka/state/counters/sak-generation-errors"
func (n *Macsec_Mka_CountersPathAny) SakGenerationErrors() *Macsec_Mka_Counters_SakGenerationErrorsPathAny {
	ps := &Macsec_Mka_Counters_SakGenerationErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sak-generation-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SakHashErrors (leaf): MKA error Hash Key generation count
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sak-hash-errors"
//	Path from root:       "/macsec/mka/state/counters/sak-hash-errors"
func (n *Macsec_Mka_CountersPath) SakHashErrors() *Macsec_Mka_Counters_SakHashErrorsPath {
	ps := &Macsec_Mka_Counters_SakHashErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"sak-hash-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SakHashErrors (leaf): MKA error Hash Key generation count
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "sak-hash-errors"
//	Path from root:       "/macsec/mka/state/counters/sak-hash-errors"
func (n *Macsec_Mka_CountersPathAny) SakHashErrors() *Macsec_Mka_Counters_SakHashErrorsPathAny {
	ps := &Macsec_Mka_Counters_SakHashErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sak-hash-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Macsec_Mka_CountersPath) State() ygnmi.SingletonQuery[*oc.Macsec_Mka_Counters] {
	return ygnmi.NewSingletonQuery[*oc.Macsec_Mka_Counters](
		"Macsec_Mka_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Macsec_Mka_CountersPathAny) State() ygnmi.WildcardQuery[*oc.Macsec_Mka_Counters] {
	return ygnmi.NewWildcardQuery[*oc.Macsec_Mka_Counters](
		"Macsec_Mka_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Mka_Policy_ConfidentialityOffsetPath represents the /openconfig-macsec/macsec/mka/policies/policy/state/confidentiality-offset YANG schema element.
type Macsec_Mka_Policy_ConfidentialityOffsetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Mka_Policy_ConfidentialityOffsetPathAny represents the wildcard version of the /openconfig-macsec/macsec/mka/policies/policy/state/confidentiality-offset YANG schema element.
type Macsec_Mka_Policy_ConfidentialityOffsetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/confidentiality-offset"
//	Path from root:       "/macsec/mka/policies/policy/state/confidentiality-offset"
func (n *Macsec_Mka_Policy_ConfidentialityOffsetPath) State() ygnmi.SingletonQuery[oc.E_Macsec_ConfidentialityOffset] {
	return ygnmi.NewSingletonQuery[oc.E_Macsec_ConfidentialityOffset](
		"Macsec_Mka_Policy",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "confidentiality-offset"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Macsec_ConfidentialityOffset, bool) {
			ret := gs.(*oc.Macsec_Mka_Policy).ConfidentialityOffset
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/confidentiality-offset"
//	Path from root:       "/macsec/mka/policies/policy/state/confidentiality-offset"
func (n *Macsec_Mka_Policy_ConfidentialityOffsetPathAny) State() ygnmi.WildcardQuery[oc.E_Macsec_ConfidentialityOffset] {
	return ygnmi.NewWildcardQuery[oc.E_Macsec_ConfidentialityOffset](
		"Macsec_Mka_Policy",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "confidentiality-offset"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Macsec_ConfidentialityOffset, bool) {
			ret := gs.(*oc.Macsec_Mka_Policy).ConfidentialityOffset
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "config/confidentiality-offset"
//	Path from root:       "/macsec/mka/policies/policy/config/confidentiality-offset"
func (n *Macsec_Mka_Policy_ConfidentialityOffsetPath) Config() ygnmi.ConfigQuery[oc.E_Macsec_ConfidentialityOffset] {
	return ygnmi.NewConfigQuery[oc.E_Macsec_ConfidentialityOffset](
		"Macsec_Mka_Policy",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "confidentiality-offset"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Macsec_ConfidentialityOffset, bool) {
			ret := gs.(*oc.Macsec_Mka_Policy).ConfidentialityOffset
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "config/confidentiality-offset"
//	Path from root:       "/macsec/mka/policies/policy/config/confidentiality-offset"
func (n *Macsec_Mka_Policy_ConfidentialityOffsetPathAny) Config() ygnmi.WildcardQuery[oc.E_Macsec_ConfidentialityOffset] {
	return ygnmi.NewWildcardQuery[oc.E_Macsec_ConfidentialityOffset](
		"Macsec_Mka_Policy",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "confidentiality-offset"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Macsec_ConfidentialityOffset, bool) {
			ret := gs.(*oc.Macsec_Mka_Policy).ConfidentialityOffset
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Mka_Policy_DelayProtectionPath represents the /openconfig-macsec/macsec/mka/policies/policy/state/delay-protection YANG schema element.
type Macsec_Mka_Policy_DelayProtectionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Mka_Policy_DelayProtectionPathAny represents the wildcard version of the /openconfig-macsec/macsec/mka/policies/policy/state/delay-protection YANG schema element.
type Macsec_Mka_Policy_DelayProtectionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/delay-protection"
//	Path from root:       "/macsec/mka/policies/policy/state/delay-protection"
func (n *Macsec_Mka_Policy_DelayProtectionPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Macsec_Mka_Policy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "delay-protection"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Macsec_Mka_Policy).DelayProtection
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/delay-protection"
//	Path from root:       "/macsec/mka/policies/policy/state/delay-protection"
func (n *Macsec_Mka_Policy_DelayProtectionPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Macsec_Mka_Policy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "delay-protection"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Macsec_Mka_Policy).DelayProtection
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "config/delay-protection"
//	Path from root:       "/macsec/mka/policies/policy/config/delay-protection"
func (n *Macsec_Mka_Policy_DelayProtectionPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Macsec_Mka_Policy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "delay-protection"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Macsec_Mka_Policy).DelayProtection
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "config/delay-protection"
//	Path from root:       "/macsec/mka/policies/policy/config/delay-protection"
func (n *Macsec_Mka_Policy_DelayProtectionPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Macsec_Mka_Policy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "delay-protection"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Macsec_Mka_Policy).DelayProtection
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Mka_Policy_IncludeIcvIndicatorPath represents the /openconfig-macsec/macsec/mka/policies/policy/state/include-icv-indicator YANG schema element.
type Macsec_Mka_Policy_IncludeIcvIndicatorPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Mka_Policy_IncludeIcvIndicatorPathAny represents the wildcard version of the /openconfig-macsec/macsec/mka/policies/policy/state/include-icv-indicator YANG schema element.
type Macsec_Mka_Policy_IncludeIcvIndicatorPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/include-icv-indicator"
//	Path from root:       "/macsec/mka/policies/policy/state/include-icv-indicator"
func (n *Macsec_Mka_Policy_IncludeIcvIndicatorPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Macsec_Mka_Policy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "include-icv-indicator"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Macsec_Mka_Policy).IncludeIcvIndicator
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/include-icv-indicator"
//	Path from root:       "/macsec/mka/policies/policy/state/include-icv-indicator"
func (n *Macsec_Mka_Policy_IncludeIcvIndicatorPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Macsec_Mka_Policy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "include-icv-indicator"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Macsec_Mka_Policy).IncludeIcvIndicator
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "config/include-icv-indicator"
//	Path from root:       "/macsec/mka/policies/policy/config/include-icv-indicator"
func (n *Macsec_Mka_Policy_IncludeIcvIndicatorPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Macsec_Mka_Policy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "include-icv-indicator"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Macsec_Mka_Policy).IncludeIcvIndicator
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "config/include-icv-indicator"
//	Path from root:       "/macsec/mka/policies/policy/config/include-icv-indicator"
func (n *Macsec_Mka_Policy_IncludeIcvIndicatorPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Macsec_Mka_Policy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "include-icv-indicator"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Macsec_Mka_Policy).IncludeIcvIndicator
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Mka_Policy_IncludeSciPath represents the /openconfig-macsec/macsec/mka/policies/policy/state/include-sci YANG schema element.
type Macsec_Mka_Policy_IncludeSciPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Mka_Policy_IncludeSciPathAny represents the wildcard version of the /openconfig-macsec/macsec/mka/policies/policy/state/include-sci YANG schema element.
type Macsec_Mka_Policy_IncludeSciPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/include-sci"
//	Path from root:       "/macsec/mka/policies/policy/state/include-sci"
func (n *Macsec_Mka_Policy_IncludeSciPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Macsec_Mka_Policy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "include-sci"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Macsec_Mka_Policy).IncludeSci
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/include-sci"
//	Path from root:       "/macsec/mka/policies/policy/state/include-sci"
func (n *Macsec_Mka_Policy_IncludeSciPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Macsec_Mka_Policy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "include-sci"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Macsec_Mka_Policy).IncludeSci
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "config/include-sci"
//	Path from root:       "/macsec/mka/policies/policy/config/include-sci"
func (n *Macsec_Mka_Policy_IncludeSciPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Macsec_Mka_Policy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "include-sci"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Macsec_Mka_Policy).IncludeSci
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "config/include-sci"
//	Path from root:       "/macsec/mka/policies/policy/config/include-sci"
func (n *Macsec_Mka_Policy_IncludeSciPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Macsec_Mka_Policy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "include-sci"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Macsec_Mka_Policy).IncludeSci
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Mka_Policy_KeyServerPriorityPath represents the /openconfig-macsec/macsec/mka/policies/policy/state/key-server-priority YANG schema element.
type Macsec_Mka_Policy_KeyServerPriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Mka_Policy_KeyServerPriorityPathAny represents the wildcard version of the /openconfig-macsec/macsec/mka/policies/policy/state/key-server-priority YANG schema element.
type Macsec_Mka_Policy_KeyServerPriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/key-server-priority"
//	Path from root:       "/macsec/mka/policies/policy/state/key-server-priority"
func (n *Macsec_Mka_Policy_KeyServerPriorityPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Macsec_Mka_Policy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "key-server-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Macsec_Mka_Policy).KeyServerPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/key-server-priority"
//	Path from root:       "/macsec/mka/policies/policy/state/key-server-priority"
func (n *Macsec_Mka_Policy_KeyServerPriorityPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Macsec_Mka_Policy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "key-server-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Macsec_Mka_Policy).KeyServerPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "config/key-server-priority"
//	Path from root:       "/macsec/mka/policies/policy/config/key-server-priority"
func (n *Macsec_Mka_Policy_KeyServerPriorityPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Macsec_Mka_Policy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "key-server-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Macsec_Mka_Policy).KeyServerPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "config/key-server-priority"
//	Path from root:       "/macsec/mka/policies/policy/config/key-server-priority"
func (n *Macsec_Mka_Policy_KeyServerPriorityPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Macsec_Mka_Policy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "key-server-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Macsec_Mka_Policy).KeyServerPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Mka_Policy_MacsecCipherSuitePath represents the /openconfig-macsec/macsec/mka/policies/policy/state/macsec-cipher-suite YANG schema element.
type Macsec_Mka_Policy_MacsecCipherSuitePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Mka_Policy_MacsecCipherSuitePathAny represents the wildcard version of the /openconfig-macsec/macsec/mka/policies/policy/state/macsec-cipher-suite YANG schema element.
type Macsec_Mka_Policy_MacsecCipherSuitePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/macsec-cipher-suite"
//	Path from root:       "/macsec/mka/policies/policy/state/macsec-cipher-suite"
func (n *Macsec_Mka_Policy_MacsecCipherSuitePath) State() ygnmi.SingletonQuery[[]oc.E_Macsec_MacsecCipherSuite] {
	return ygnmi.NewSingletonQuery[[]oc.E_Macsec_MacsecCipherSuite](
		"Macsec_Mka_Policy",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "macsec-cipher-suite"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_Macsec_MacsecCipherSuite, bool) {
			ret := gs.(*oc.Macsec_Mka_Policy).MacsecCipherSuite
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/macsec-cipher-suite"
//	Path from root:       "/macsec/mka/policies/policy/state/macsec-cipher-suite"
func (n *Macsec_Mka_Policy_MacsecCipherSuitePathAny) State() ygnmi.WildcardQuery[[]oc.E_Macsec_MacsecCipherSuite] {
	return ygnmi.NewWildcardQuery[[]oc.E_Macsec_MacsecCipherSuite](
		"Macsec_Mka_Policy",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "macsec-cipher-suite"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_Macsec_MacsecCipherSuite, bool) {
			ret := gs.(*oc.Macsec_Mka_Policy).MacsecCipherSuite
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "config/macsec-cipher-suite"
//	Path from root:       "/macsec/mka/policies/policy/config/macsec-cipher-suite"
func (n *Macsec_Mka_Policy_MacsecCipherSuitePath) Config() ygnmi.ConfigQuery[[]oc.E_Macsec_MacsecCipherSuite] {
	return ygnmi.NewConfigQuery[[]oc.E_Macsec_MacsecCipherSuite](
		"Macsec_Mka_Policy",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "macsec-cipher-suite"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_Macsec_MacsecCipherSuite, bool) {
			ret := gs.(*oc.Macsec_Mka_Policy).MacsecCipherSuite
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "config/macsec-cipher-suite"
//	Path from root:       "/macsec/mka/policies/policy/config/macsec-cipher-suite"
func (n *Macsec_Mka_Policy_MacsecCipherSuitePathAny) Config() ygnmi.WildcardQuery[[]oc.E_Macsec_MacsecCipherSuite] {
	return ygnmi.NewWildcardQuery[[]oc.E_Macsec_MacsecCipherSuite](
		"Macsec_Mka_Policy",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "macsec-cipher-suite"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_Macsec_MacsecCipherSuite, bool) {
			ret := gs.(*oc.Macsec_Mka_Policy).MacsecCipherSuite
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Mka_Policy_NamePath represents the /openconfig-macsec/macsec/mka/policies/policy/state/name YANG schema element.
type Macsec_Mka_Policy_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Mka_Policy_NamePathAny represents the wildcard version of the /openconfig-macsec/macsec/mka/policies/policy/state/name YANG schema element.
type Macsec_Mka_Policy_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/name"
//	Path from root:       "/macsec/mka/policies/policy/state/name"
func (n *Macsec_Mka_Policy_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Macsec_Mka_Policy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Macsec_Mka_Policy).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/name"
//	Path from root:       "/macsec/mka/policies/policy/state/name"
func (n *Macsec_Mka_Policy_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Macsec_Mka_Policy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Macsec_Mka_Policy).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "config/name"
//	Path from root:       "/macsec/mka/policies/policy/config/name"
func (n *Macsec_Mka_Policy_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Macsec_Mka_Policy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Macsec_Mka_Policy).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "config/name"
//	Path from root:       "/macsec/mka/policies/policy/config/name"
func (n *Macsec_Mka_Policy_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Macsec_Mka_Policy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Macsec_Mka_Policy).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Mka_Policy_SakRekeyIntervalPath represents the /openconfig-macsec/macsec/mka/policies/policy/state/sak-rekey-interval YANG schema element.
type Macsec_Mka_Policy_SakRekeyIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Mka_Policy_SakRekeyIntervalPathAny represents the wildcard version of the /openconfig-macsec/macsec/mka/policies/policy/state/sak-rekey-interval YANG schema element.
type Macsec_Mka_Policy_SakRekeyIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/sak-rekey-interval"
//	Path from root:       "/macsec/mka/policies/policy/state/sak-rekey-interval"
func (n *Macsec_Mka_Policy_SakRekeyIntervalPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Macsec_Mka_Policy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sak-rekey-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Macsec_Mka_Policy).SakRekeyInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/sak-rekey-interval"
//	Path from root:       "/macsec/mka/policies/policy/state/sak-rekey-interval"
func (n *Macsec_Mka_Policy_SakRekeyIntervalPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Macsec_Mka_Policy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sak-rekey-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Macsec_Mka_Policy).SakRekeyInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "config/sak-rekey-interval"
//	Path from root:       "/macsec/mka/policies/policy/config/sak-rekey-interval"
func (n *Macsec_Mka_Policy_SakRekeyIntervalPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Macsec_Mka_Policy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "sak-rekey-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Macsec_Mka_Policy).SakRekeyInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "config/sak-rekey-interval"
//	Path from root:       "/macsec/mka/policies/policy/config/sak-rekey-interval"
func (n *Macsec_Mka_Policy_SakRekeyIntervalPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Macsec_Mka_Policy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "sak-rekey-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Macsec_Mka_Policy).SakRekeyInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Mka_Policy_SakRekeyOnLivePeerLossPath represents the /openconfig-macsec/macsec/mka/policies/policy/state/sak-rekey-on-live-peer-loss YANG schema element.
type Macsec_Mka_Policy_SakRekeyOnLivePeerLossPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Mka_Policy_SakRekeyOnLivePeerLossPathAny represents the wildcard version of the /openconfig-macsec/macsec/mka/policies/policy/state/sak-rekey-on-live-peer-loss YANG schema element.
type Macsec_Mka_Policy_SakRekeyOnLivePeerLossPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/sak-rekey-on-live-peer-loss"
//	Path from root:       "/macsec/mka/policies/policy/state/sak-rekey-on-live-peer-loss"
func (n *Macsec_Mka_Policy_SakRekeyOnLivePeerLossPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Macsec_Mka_Policy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sak-rekey-on-live-peer-loss"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Macsec_Mka_Policy).SakRekeyOnLivePeerLoss
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/sak-rekey-on-live-peer-loss"
//	Path from root:       "/macsec/mka/policies/policy/state/sak-rekey-on-live-peer-loss"
func (n *Macsec_Mka_Policy_SakRekeyOnLivePeerLossPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Macsec_Mka_Policy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sak-rekey-on-live-peer-loss"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Macsec_Mka_Policy).SakRekeyOnLivePeerLoss
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "config/sak-rekey-on-live-peer-loss"
//	Path from root:       "/macsec/mka/policies/policy/config/sak-rekey-on-live-peer-loss"
func (n *Macsec_Mka_Policy_SakRekeyOnLivePeerLossPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Macsec_Mka_Policy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "sak-rekey-on-live-peer-loss"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Macsec_Mka_Policy).SakRekeyOnLivePeerLoss
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "config/sak-rekey-on-live-peer-loss"
//	Path from root:       "/macsec/mka/policies/policy/config/sak-rekey-on-live-peer-loss"
func (n *Macsec_Mka_Policy_SakRekeyOnLivePeerLossPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Macsec_Mka_Policy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "sak-rekey-on-live-peer-loss"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Macsec_Mka_Policy).SakRekeyOnLivePeerLoss
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Mka_Policy_UseUpdatedEthHeaderPath represents the /openconfig-macsec/macsec/mka/policies/policy/state/use-updated-eth-header YANG schema element.
type Macsec_Mka_Policy_UseUpdatedEthHeaderPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Macsec_Mka_Policy_UseUpdatedEthHeaderPathAny represents the wildcard version of the /openconfig-macsec/macsec/mka/policies/policy/state/use-updated-eth-header YANG schema element.
type Macsec_Mka_Policy_UseUpdatedEthHeaderPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/use-updated-eth-header"
//	Path from root:       "/macsec/mka/policies/policy/state/use-updated-eth-header"
func (n *Macsec_Mka_Policy_UseUpdatedEthHeaderPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Macsec_Mka_Policy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "use-updated-eth-header"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Macsec_Mka_Policy).UseUpdatedEthHeader
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "state/use-updated-eth-header"
//	Path from root:       "/macsec/mka/policies/policy/state/use-updated-eth-header"
func (n *Macsec_Mka_Policy_UseUpdatedEthHeaderPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Macsec_Mka_Policy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "use-updated-eth-header"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Macsec_Mka_Policy).UseUpdatedEthHeader
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "config/use-updated-eth-header"
//	Path from root:       "/macsec/mka/policies/policy/config/use-updated-eth-header"
func (n *Macsec_Mka_Policy_UseUpdatedEthHeaderPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Macsec_Mka_Policy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "use-updated-eth-header"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Macsec_Mka_Policy).UseUpdatedEthHeader
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "config/use-updated-eth-header"
//	Path from root:       "/macsec/mka/policies/policy/config/use-updated-eth-header"
func (n *Macsec_Mka_Policy_UseUpdatedEthHeaderPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Macsec_Mka_Policy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "use-updated-eth-header"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Macsec_Mka_Policy).UseUpdatedEthHeader
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Macsec_Mka_PolicyPath represents the /openconfig-macsec/macsec/mka/policies/policy YANG schema element.
type Macsec_Mka_PolicyPath struct {
	*ygnmi.NodePath
}

// Macsec_Mka_PolicyPathAny represents the wildcard version of the /openconfig-macsec/macsec/mka/policies/policy YANG schema element.
type Macsec_Mka_PolicyPathAny struct {
	*ygnmi.NodePath
}

// Macsec_Mka_PolicyPathMap represents the /openconfig-macsec/macsec/mka/policies/policy YANG schema element.
type Macsec_Mka_PolicyPathMap struct {
	*ygnmi.NodePath
}

// Macsec_Mka_PolicyPathMapAny represents the wildcard version of the /openconfig-macsec/macsec/mka/policies/policy YANG schema element.
type Macsec_Mka_PolicyPathMapAny struct {
	*ygnmi.NodePath
}

// ConfidentialityOffset (leaf): The confidentiality offset specifies a number of octets in an Ethernet
// frame that are sent in unencrypted plain-text
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "*/confidentiality-offset"
//	Path from root:       "/macsec/mka/policies/policy/*/confidentiality-offset"
func (n *Macsec_Mka_PolicyPath) ConfidentialityOffset() *Macsec_Mka_Policy_ConfidentialityOffsetPath {
	ps := &Macsec_Mka_Policy_ConfidentialityOffsetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "confidentiality-offset"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConfidentialityOffset (leaf): The confidentiality offset specifies a number of octets in an Ethernet
// frame that are sent in unencrypted plain-text
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "*/confidentiality-offset"
//	Path from root:       "/macsec/mka/policies/policy/*/confidentiality-offset"
func (n *Macsec_Mka_PolicyPathAny) ConfidentialityOffset() *Macsec_Mka_Policy_ConfidentialityOffsetPathAny {
	ps := &Macsec_Mka_Policy_ConfidentialityOffsetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "confidentiality-offset"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DelayProtection (leaf): Traffic delayed longer than 2 seconds is rejected by the interfaces
// enabled with delay protection.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "*/delay-protection"
//	Path from root:       "/macsec/mka/policies/policy/*/delay-protection"
func (n *Macsec_Mka_PolicyPath) DelayProtection() *Macsec_Mka_Policy_DelayProtectionPath {
	ps := &Macsec_Mka_Policy_DelayProtectionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "delay-protection"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DelayProtection (leaf): Traffic delayed longer than 2 seconds is rejected by the interfaces
// enabled with delay protection.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "*/delay-protection"
//	Path from root:       "/macsec/mka/policies/policy/*/delay-protection"
func (n *Macsec_Mka_PolicyPathAny) DelayProtection() *Macsec_Mka_Policy_DelayProtectionPathAny {
	ps := &Macsec_Mka_Policy_DelayProtectionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "delay-protection"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IncludeIcvIndicator (leaf): Generate and include an Integrity Check Value (ICV) field in the MKPDU.
// For compatibility with previous MACsec implementation that do not
// require an ICV
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "*/include-icv-indicator"
//	Path from root:       "/macsec/mka/policies/policy/*/include-icv-indicator"
func (n *Macsec_Mka_PolicyPath) IncludeIcvIndicator() *Macsec_Mka_Policy_IncludeIcvIndicatorPath {
	ps := &Macsec_Mka_Policy_IncludeIcvIndicatorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "include-icv-indicator"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IncludeIcvIndicator (leaf): Generate and include an Integrity Check Value (ICV) field in the MKPDU.
// For compatibility with previous MACsec implementation that do not
// require an ICV
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "*/include-icv-indicator"
//	Path from root:       "/macsec/mka/policies/policy/*/include-icv-indicator"
func (n *Macsec_Mka_PolicyPathAny) IncludeIcvIndicator() *Macsec_Mka_Policy_IncludeIcvIndicatorPathAny {
	ps := &Macsec_Mka_Policy_IncludeIcvIndicatorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "include-icv-indicator"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IncludeSci (leaf): Generate and include a Secure Channel Identifier (SCI).
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "*/include-sci"
//	Path from root:       "/macsec/mka/policies/policy/*/include-sci"
func (n *Macsec_Mka_PolicyPath) IncludeSci() *Macsec_Mka_Policy_IncludeSciPath {
	ps := &Macsec_Mka_Policy_IncludeSciPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "include-sci"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IncludeSci (leaf): Generate and include a Secure Channel Identifier (SCI).
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "*/include-sci"
//	Path from root:       "/macsec/mka/policies/policy/*/include-sci"
func (n *Macsec_Mka_PolicyPathAny) IncludeSci() *Macsec_Mka_Policy_IncludeSciPathAny {
	ps := &Macsec_Mka_Policy_IncludeSciPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "include-sci"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// KeyServerPriority (leaf): Specifies the key server priority used by the MACsec Key Agreement
// (MKA) protocol to select the key server when MACsec is enabled using
// static connectivity association key (CAK) security mode. The switch with
// the lower priority-number is selected as the key server. If the
// priority-number is identical on both sides of a point-to-point link, the
// MKA protocol selects the device with the lower MAC address as the key
// server
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "*/key-server-priority"
//	Path from root:       "/macsec/mka/policies/policy/*/key-server-priority"
func (n *Macsec_Mka_PolicyPath) KeyServerPriority() *Macsec_Mka_Policy_KeyServerPriorityPath {
	ps := &Macsec_Mka_Policy_KeyServerPriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "key-server-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// KeyServerPriority (leaf): Specifies the key server priority used by the MACsec Key Agreement
// (MKA) protocol to select the key server when MACsec is enabled using
// static connectivity association key (CAK) security mode. The switch with
// the lower priority-number is selected as the key server. If the
// priority-number is identical on both sides of a point-to-point link, the
// MKA protocol selects the device with the lower MAC address as the key
// server
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "*/key-server-priority"
//	Path from root:       "/macsec/mka/policies/policy/*/key-server-priority"
func (n *Macsec_Mka_PolicyPathAny) KeyServerPriority() *Macsec_Mka_Policy_KeyServerPriorityPathAny {
	ps := &Macsec_Mka_Policy_KeyServerPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "key-server-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacsecCipherSuite (leaf-list): Set Cipher suite(s) for SAK derivation
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "*/macsec-cipher-suite"
//	Path from root:       "/macsec/mka/policies/policy/*/macsec-cipher-suite"
func (n *Macsec_Mka_PolicyPath) MacsecCipherSuite() *Macsec_Mka_Policy_MacsecCipherSuitePath {
	ps := &Macsec_Mka_Policy_MacsecCipherSuitePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "macsec-cipher-suite"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacsecCipherSuite (leaf-list): Set Cipher suite(s) for SAK derivation
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "*/macsec-cipher-suite"
//	Path from root:       "/macsec/mka/policies/policy/*/macsec-cipher-suite"
func (n *Macsec_Mka_PolicyPathAny) MacsecCipherSuite() *Macsec_Mka_Policy_MacsecCipherSuitePathAny {
	ps := &Macsec_Mka_Policy_MacsecCipherSuitePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "macsec-cipher-suite"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Name of the MKA policy.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "*/name"
//	Path from root:       "/macsec/mka/policies/policy/*/name"
func (n *Macsec_Mka_PolicyPath) Name() *Macsec_Mka_Policy_NamePath {
	ps := &Macsec_Mka_Policy_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Name of the MKA policy.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "*/name"
//	Path from root:       "/macsec/mka/policies/policy/*/name"
func (n *Macsec_Mka_PolicyPathAny) Name() *Macsec_Mka_Policy_NamePathAny {
	ps := &Macsec_Mka_Policy_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SakRekeyInterval (leaf): SAK Rekey interval in seconds. The default value is 0 where no rekey is
// performed.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "*/sak-rekey-interval"
//	Path from root:       "/macsec/mka/policies/policy/*/sak-rekey-interval"
func (n *Macsec_Mka_PolicyPath) SakRekeyInterval() *Macsec_Mka_Policy_SakRekeyIntervalPath {
	ps := &Macsec_Mka_Policy_SakRekeyIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sak-rekey-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SakRekeyInterval (leaf): SAK Rekey interval in seconds. The default value is 0 where no rekey is
// performed.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "*/sak-rekey-interval"
//	Path from root:       "/macsec/mka/policies/policy/*/sak-rekey-interval"
func (n *Macsec_Mka_PolicyPathAny) SakRekeyInterval() *Macsec_Mka_Policy_SakRekeyIntervalPathAny {
	ps := &Macsec_Mka_Policy_SakRekeyIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sak-rekey-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SakRekeyOnLivePeerLoss (leaf): Rekey on peer loss
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "*/sak-rekey-on-live-peer-loss"
//	Path from root:       "/macsec/mka/policies/policy/*/sak-rekey-on-live-peer-loss"
func (n *Macsec_Mka_PolicyPath) SakRekeyOnLivePeerLoss() *Macsec_Mka_Policy_SakRekeyOnLivePeerLossPath {
	ps := &Macsec_Mka_Policy_SakRekeyOnLivePeerLossPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sak-rekey-on-live-peer-loss"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SakRekeyOnLivePeerLoss (leaf): Rekey on peer loss
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "*/sak-rekey-on-live-peer-loss"
//	Path from root:       "/macsec/mka/policies/policy/*/sak-rekey-on-live-peer-loss"
func (n *Macsec_Mka_PolicyPathAny) SakRekeyOnLivePeerLoss() *Macsec_Mka_Policy_SakRekeyOnLivePeerLossPathAny {
	ps := &Macsec_Mka_Policy_SakRekeyOnLivePeerLossPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sak-rekey-on-live-peer-loss"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UseUpdatedEthHeader (leaf): Use updated ethernet header for ICV calculation. In case the Ethernet
// frame headers change, use the updated headers to calculate the ICV.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "*/use-updated-eth-header"
//	Path from root:       "/macsec/mka/policies/policy/*/use-updated-eth-header"
func (n *Macsec_Mka_PolicyPath) UseUpdatedEthHeader() *Macsec_Mka_Policy_UseUpdatedEthHeaderPath {
	ps := &Macsec_Mka_Policy_UseUpdatedEthHeaderPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "use-updated-eth-header"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UseUpdatedEthHeader (leaf): Use updated ethernet header for ICV calculation. In case the Ethernet
// frame headers change, use the updated headers to calculate the ICV.
//
//	Defining module:      "openconfig-macsec"
//	Instantiating module: "openconfig-macsec"
//	Path from parent:     "*/use-updated-eth-header"
//	Path from root:       "/macsec/mka/policies/policy/*/use-updated-eth-header"
func (n *Macsec_Mka_PolicyPathAny) UseUpdatedEthHeader() *Macsec_Mka_Policy_UseUpdatedEthHeaderPathAny {
	ps := &Macsec_Mka_Policy_UseUpdatedEthHeaderPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "use-updated-eth-header"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Macsec_Mka_PolicyPath) State() ygnmi.SingletonQuery[*oc.Macsec_Mka_Policy] {
	return ygnmi.NewSingletonQuery[*oc.Macsec_Mka_Policy](
		"Macsec_Mka_Policy",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Macsec_Mka_PolicyPathAny) State() ygnmi.WildcardQuery[*oc.Macsec_Mka_Policy] {
	return ygnmi.NewWildcardQuery[*oc.Macsec_Mka_Policy](
		"Macsec_Mka_Policy",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Macsec_Mka_PolicyPath) Config() ygnmi.ConfigQuery[*oc.Macsec_Mka_Policy] {
	return ygnmi.NewConfigQuery[*oc.Macsec_Mka_Policy](
		"Macsec_Mka_Policy",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Macsec_Mka_PolicyPathAny) Config() ygnmi.WildcardQuery[*oc.Macsec_Mka_Policy] {
	return ygnmi.NewWildcardQuery[*oc.Macsec_Mka_Policy](
		"Macsec_Mka_Policy",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Macsec_Mka_PolicyPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Macsec_Mka_Policy] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Macsec_Mka_Policy](
		"Macsec_Mka",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Macsec_Mka_Policy, bool) {
			ret := gs.(*oc.Macsec_Mka).Policy
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-macsec:policies"},
			PostRelPath: []string{"openconfig-macsec:policy"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Macsec_Mka_PolicyPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Macsec_Mka_Policy] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Macsec_Mka_Policy](
		"Macsec_Mka",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Macsec_Mka_Policy, bool) {
			ret := gs.(*oc.Macsec_Mka).Policy
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-macsec:policies"},
			PostRelPath: []string{"openconfig-macsec:policy"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Macsec_Mka_PolicyPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Macsec_Mka_Policy] {
	return ygnmi.NewConfigQuery[map[string]*oc.Macsec_Mka_Policy](
		"Macsec_Mka",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Macsec_Mka_Policy, bool) {
			ret := gs.(*oc.Macsec_Mka).Policy
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-macsec:policies"},
			PostRelPath: []string{"openconfig-macsec:policy"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Macsec_Mka_PolicyPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Macsec_Mka_Policy] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Macsec_Mka_Policy](
		"Macsec_Mka",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Macsec_Mka_Policy, bool) {
			ret := gs.(*oc.Macsec_Mka).Policy
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Macsec_Mka) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-macsec:policies"},
			PostRelPath: []string{"openconfig-macsec:policy"},
		},
	)
}

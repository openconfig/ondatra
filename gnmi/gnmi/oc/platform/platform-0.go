/*
Package platform is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.20)
using the following YANG input files:
  - gnmi-collector-metadata.yang
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-common.yang
  - public/release/models/aft/openconfig-aft-ethernet.yang
  - public/release/models/aft/openconfig-aft-ipv4.yang
  - public/release/models/aft/openconfig-aft-ipv6.yang
  - public/release/models/aft/openconfig-aft-mpls.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-pf.yang
  - public/release/models/aft/openconfig-aft-state-synced.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft-types.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/ate/openconfig-ate-flow.yang
  - public/release/models/ate/openconfig-ate-intf.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/interfaces/openconfig-if-rates.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-terminal-device.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-pf-forwarding-policies.yang
  - public/release/models/policy-forwarding/openconfig-pf-interfaces.yang
  - public/release/models/policy-forwarding/openconfig-pf-path-groups.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-routing-policy.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package platform

import (
	"reflect"

	oc "github.com/openconfig/ondatra/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Component_AllocatedPowerPath represents the /openconfig-platform/components/component/state/allocated-power YANG schema element.
type Component_AllocatedPowerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_AllocatedPowerPathAny represents the wildcard version of the /openconfig-platform/components/component/state/allocated-power YANG schema element.
type Component_AllocatedPowerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/allocated-power"
//	Path from root:       "/components/component/state/allocated-power"
func (n *Component_AllocatedPowerPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "allocated-power"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Component).AllocatedPower
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/allocated-power"
//	Path from root:       "/components/component/state/allocated-power"
func (n *Component_AllocatedPowerPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "allocated-power"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Component).AllocatedPower
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_BaseMacAddressPath represents the /openconfig-platform/components/component/state/base-mac-address YANG schema element.
type Component_BaseMacAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_BaseMacAddressPathAny represents the wildcard version of the /openconfig-platform/components/component/state/base-mac-address YANG schema element.
type Component_BaseMacAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/base-mac-address"
//	Path from root:       "/components/component/state/base-mac-address"
func (n *Component_BaseMacAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "base-mac-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).BaseMacAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/base-mac-address"
//	Path from root:       "/components/component/state/base-mac-address"
func (n *Component_BaseMacAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "base-mac-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).BaseMacAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_BootTimePath represents the /openconfig-platform/components/component/state/boot-time YANG schema element.
type Component_BootTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_BootTimePathAny represents the wildcard version of the /openconfig-platform/components/component/state/boot-time YANG schema element.
type Component_BootTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/boot-time"
//	Path from root:       "/components/component/state/boot-time"
func (n *Component_BootTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "boot-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component).BootTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/boot-time"
//	Path from root:       "/components/component/state/boot-time"
func (n *Component_BootTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "boot-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component).BootTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_CleiCodePath represents the /openconfig-platform/components/component/state/clei-code YANG schema element.
type Component_CleiCodePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_CleiCodePathAny represents the wildcard version of the /openconfig-platform/components/component/state/clei-code YANG schema element.
type Component_CleiCodePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/clei-code"
//	Path from root:       "/components/component/state/clei-code"
func (n *Component_CleiCodePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "clei-code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).CleiCode
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/clei-code"
//	Path from root:       "/components/component/state/clei-code"
func (n *Component_CleiCodePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "clei-code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).CleiCode
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_DescriptionPath represents the /openconfig-platform/components/component/state/description YANG schema element.
type Component_DescriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_DescriptionPathAny represents the wildcard version of the /openconfig-platform/components/component/state/description YANG schema element.
type Component_DescriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/description"
//	Path from root:       "/components/component/state/description"
func (n *Component_DescriptionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/description"
//	Path from root:       "/components/component/state/description"
func (n *Component_DescriptionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_EmptyPath represents the /openconfig-platform/components/component/state/empty YANG schema element.
type Component_EmptyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_EmptyPathAny represents the wildcard version of the /openconfig-platform/components/component/state/empty YANG schema element.
type Component_EmptyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/empty"
//	Path from root:       "/components/component/state/empty"
func (n *Component_EmptyPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "empty"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component).Empty
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/empty"
//	Path from root:       "/components/component/state/empty"
func (n *Component_EmptyPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "empty"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component).Empty
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_EntityIdPath represents the /openconfig-platform/components/component/state/entity-id YANG schema element.
type Component_EntityIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_EntityIdPathAny represents the wildcard version of the /openconfig-platform/components/component/state/entity-id YANG schema element.
type Component_EntityIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-ext"
//	Instantiating module: "openconfig-platform-ext"
//	Path from parent:     "state/entity-id"
//	Path from root:       "/components/component/state/entity-id"
func (n *Component_EntityIdPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "entity-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Component).EntityId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-ext"
//	Instantiating module: "openconfig-platform-ext"
//	Path from parent:     "state/entity-id"
//	Path from root:       "/components/component/state/entity-id"
func (n *Component_EntityIdPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "entity-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Component).EntityId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_EquipmentFailurePath represents the /openconfig-platform/components/component/state/equipment-failure YANG schema element.
type Component_EquipmentFailurePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_EquipmentFailurePathAny represents the wildcard version of the /openconfig-platform/components/component/state/equipment-failure YANG schema element.
type Component_EquipmentFailurePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-alarms"
//	Path from parent:     "state/equipment-failure"
//	Path from root:       "/components/component/state/equipment-failure"
func (n *Component_EquipmentFailurePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "equipment-failure"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component).EquipmentFailure
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-alarms"
//	Path from parent:     "state/equipment-failure"
//	Path from root:       "/components/component/state/equipment-failure"
func (n *Component_EquipmentFailurePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "equipment-failure"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component).EquipmentFailure
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_EquipmentMismatchPath represents the /openconfig-platform/components/component/state/equipment-mismatch YANG schema element.
type Component_EquipmentMismatchPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_EquipmentMismatchPathAny represents the wildcard version of the /openconfig-platform/components/component/state/equipment-mismatch YANG schema element.
type Component_EquipmentMismatchPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-alarms"
//	Path from parent:     "state/equipment-mismatch"
//	Path from root:       "/components/component/state/equipment-mismatch"
func (n *Component_EquipmentMismatchPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "equipment-mismatch"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component).EquipmentMismatch
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-alarms"
//	Path from parent:     "state/equipment-mismatch"
//	Path from root:       "/components/component/state/equipment-mismatch"
func (n *Component_EquipmentMismatchPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "equipment-mismatch"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component).EquipmentMismatch
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_FirmwareVersionPath represents the /openconfig-platform/components/component/state/firmware-version YANG schema element.
type Component_FirmwareVersionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_FirmwareVersionPathAny represents the wildcard version of the /openconfig-platform/components/component/state/firmware-version YANG schema element.
type Component_FirmwareVersionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/firmware-version"
//	Path from root:       "/components/component/state/firmware-version"
func (n *Component_FirmwareVersionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "firmware-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).FirmwareVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/firmware-version"
//	Path from root:       "/components/component/state/firmware-version"
func (n *Component_FirmwareVersionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "firmware-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).FirmwareVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_HardwareVersionPath represents the /openconfig-platform/components/component/state/hardware-version YANG schema element.
type Component_HardwareVersionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_HardwareVersionPathAny represents the wildcard version of the /openconfig-platform/components/component/state/hardware-version YANG schema element.
type Component_HardwareVersionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/hardware-version"
//	Path from root:       "/components/component/state/hardware-version"
func (n *Component_HardwareVersionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hardware-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).HardwareVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/hardware-version"
//	Path from root:       "/components/component/state/hardware-version"
func (n *Component_HardwareVersionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hardware-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).HardwareVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IdPath represents the /openconfig-platform/components/component/state/id YANG schema element.
type Component_IdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IdPathAny represents the wildcard version of the /openconfig-platform/components/component/state/id YANG schema element.
type Component_IdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/id"
//	Path from root:       "/components/component/state/id"
func (n *Component_IdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/id"
//	Path from root:       "/components/component/state/id"
func (n *Component_IdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_InstallComponentPath represents the /openconfig-platform/components/component/state/install-component YANG schema element.
type Component_InstallComponentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_InstallComponentPathAny represents the wildcard version of the /openconfig-platform/components/component/state/install-component YANG schema element.
type Component_InstallComponentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/install-component"
//	Path from root:       "/components/component/state/install-component"
func (n *Component_InstallComponentPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "install-component"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).InstallComponent
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/install-component"
//	Path from root:       "/components/component/state/install-component"
func (n *Component_InstallComponentPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "install-component"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).InstallComponent
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_InstallPositionPath represents the /openconfig-platform/components/component/state/install-position YANG schema element.
type Component_InstallPositionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_InstallPositionPathAny represents the wildcard version of the /openconfig-platform/components/component/state/install-position YANG schema element.
type Component_InstallPositionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/install-position"
//	Path from root:       "/components/component/state/install-position"
func (n *Component_InstallPositionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "install-position"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).InstallPosition
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/install-position"
//	Path from root:       "/components/component/state/install-position"
func (n *Component_InstallPositionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "install-position"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).InstallPosition
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_LastPoweroffTimePath represents the /openconfig-platform/components/component/state/last-poweroff-time YANG schema element.
type Component_LastPoweroffTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_LastPoweroffTimePathAny represents the wildcard version of the /openconfig-platform/components/component/state/last-poweroff-time YANG schema element.
type Component_LastPoweroffTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/last-poweroff-time"
//	Path from root:       "/components/component/state/last-poweroff-time"
func (n *Component_LastPoweroffTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-poweroff-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component).LastPoweroffTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/last-poweroff-time"
//	Path from root:       "/components/component/state/last-poweroff-time"
func (n *Component_LastPoweroffTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-poweroff-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component).LastPoweroffTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_LastRebootReasonPath represents the /openconfig-platform/components/component/state/last-reboot-reason YANG schema element.
type Component_LastRebootReasonPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_LastRebootReasonPathAny represents the wildcard version of the /openconfig-platform/components/component/state/last-reboot-reason YANG schema element.
type Component_LastRebootReasonPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/last-reboot-reason"
//	Path from root:       "/components/component/state/last-reboot-reason"
func (n *Component_LastRebootReasonPath) State() ygnmi.SingletonQuery[oc.E_PlatformTypes_COMPONENT_REBOOT_REASON] {
	return ygnmi.NewSingletonQuery[oc.E_PlatformTypes_COMPONENT_REBOOT_REASON](
		"Component",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-reboot-reason"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PlatformTypes_COMPONENT_REBOOT_REASON, bool) {
			ret := gs.(*oc.Component).LastRebootReason
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/last-reboot-reason"
//	Path from root:       "/components/component/state/last-reboot-reason"
func (n *Component_LastRebootReasonPathAny) State() ygnmi.WildcardQuery[oc.E_PlatformTypes_COMPONENT_REBOOT_REASON] {
	return ygnmi.NewWildcardQuery[oc.E_PlatformTypes_COMPONENT_REBOOT_REASON](
		"Component",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-reboot-reason"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PlatformTypes_COMPONENT_REBOOT_REASON, bool) {
			ret := gs.(*oc.Component).LastRebootReason
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_LastRebootTimePath represents the /openconfig-platform/components/component/state/last-reboot-time YANG schema element.
type Component_LastRebootTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_LastRebootTimePathAny represents the wildcard version of the /openconfig-platform/components/component/state/last-reboot-time YANG schema element.
type Component_LastRebootTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/last-reboot-time"
//	Path from root:       "/components/component/state/last-reboot-time"
func (n *Component_LastRebootTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-reboot-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component).LastRebootTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/last-reboot-time"
//	Path from root:       "/components/component/state/last-reboot-time"
func (n *Component_LastRebootTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-reboot-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component).LastRebootTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_LastSwitchoverTimePath represents the /openconfig-platform/components/component/state/last-switchover-time YANG schema element.
type Component_LastSwitchoverTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_LastSwitchoverTimePathAny represents the wildcard version of the /openconfig-platform/components/component/state/last-switchover-time YANG schema element.
type Component_LastSwitchoverTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/last-switchover-time"
//	Path from root:       "/components/component/state/last-switchover-time"
func (n *Component_LastSwitchoverTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-switchover-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component).LastSwitchoverTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/last-switchover-time"
//	Path from root:       "/components/component/state/last-switchover-time"
func (n *Component_LastSwitchoverTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-switchover-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component).LastSwitchoverTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_LocationPath represents the /openconfig-platform/components/component/state/location YANG schema element.
type Component_LocationPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_LocationPathAny represents the wildcard version of the /openconfig-platform/components/component/state/location YANG schema element.
type Component_LocationPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/location"
//	Path from root:       "/components/component/state/location"
func (n *Component_LocationPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "location"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).Location
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/location"
//	Path from root:       "/components/component/state/location"
func (n *Component_LocationPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "location"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).Location
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_MfgDatePath represents the /openconfig-platform/components/component/state/mfg-date YANG schema element.
type Component_MfgDatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_MfgDatePathAny represents the wildcard version of the /openconfig-platform/components/component/state/mfg-date YANG schema element.
type Component_MfgDatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/mfg-date"
//	Path from root:       "/components/component/state/mfg-date"
func (n *Component_MfgDatePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mfg-date"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).MfgDate
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/mfg-date"
//	Path from root:       "/components/component/state/mfg-date"
func (n *Component_MfgDatePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mfg-date"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).MfgDate
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_MfgNamePath represents the /openconfig-platform/components/component/state/mfg-name YANG schema element.
type Component_MfgNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_MfgNamePathAny represents the wildcard version of the /openconfig-platform/components/component/state/mfg-name YANG schema element.
type Component_MfgNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/mfg-name"
//	Path from root:       "/components/component/state/mfg-name"
func (n *Component_MfgNamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mfg-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).MfgName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/mfg-name"
//	Path from root:       "/components/component/state/mfg-name"
func (n *Component_MfgNamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mfg-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).MfgName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_ModelNamePath represents the /openconfig-platform/components/component/state/model-name YANG schema element.
type Component_ModelNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_ModelNamePathAny represents the wildcard version of the /openconfig-platform/components/component/state/model-name YANG schema element.
type Component_ModelNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/model-name"
//	Path from root:       "/components/component/state/model-name"
func (n *Component_ModelNamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "model-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).ModelName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/model-name"
//	Path from root:       "/components/component/state/model-name"
func (n *Component_ModelNamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "model-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).ModelName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_NamePath represents the /openconfig-platform/components/component/state/name YANG schema element.
type Component_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_NamePathAny represents the wildcard version of the /openconfig-platform/components/component/state/name YANG schema element.
type Component_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/state/name"
func (n *Component_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/state/name"
func (n *Component_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/name"
//	Path from root:       "/components/component/config/name"
func (n *Component_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Component",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/name"
//	Path from root:       "/components/component/config/name"
func (n *Component_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OperStatusPath represents the /openconfig-platform/components/component/state/oper-status YANG schema element.
type Component_OperStatusPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OperStatusPathAny represents the wildcard version of the /openconfig-platform/components/component/state/oper-status YANG schema element.
type Component_OperStatusPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/oper-status"
//	Path from root:       "/components/component/state/oper-status"
func (n *Component_OperStatusPath) State() ygnmi.SingletonQuery[oc.E_PlatformTypes_COMPONENT_OPER_STATUS] {
	return ygnmi.NewSingletonQuery[oc.E_PlatformTypes_COMPONENT_OPER_STATUS](
		"Component",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oper-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PlatformTypes_COMPONENT_OPER_STATUS, bool) {
			ret := gs.(*oc.Component).OperStatus
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/oper-status"
//	Path from root:       "/components/component/state/oper-status"
func (n *Component_OperStatusPathAny) State() ygnmi.WildcardQuery[oc.E_PlatformTypes_COMPONENT_OPER_STATUS] {
	return ygnmi.NewWildcardQuery[oc.E_PlatformTypes_COMPONENT_OPER_STATUS](
		"Component",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oper-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PlatformTypes_COMPONENT_OPER_STATUS, bool) {
			ret := gs.(*oc.Component).OperStatus
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_ParentPath represents the /openconfig-platform/components/component/state/parent YANG schema element.
type Component_ParentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_ParentPathAny represents the wildcard version of the /openconfig-platform/components/component/state/parent YANG schema element.
type Component_ParentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/parent"
//	Path from root:       "/components/component/state/parent"
func (n *Component_ParentPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "parent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).Parent
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/parent"
//	Path from root:       "/components/component/state/parent"
func (n *Component_ParentPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "parent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).Parent
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_PartNoPath represents the /openconfig-platform/components/component/state/part-no YANG schema element.
type Component_PartNoPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_PartNoPathAny represents the wildcard version of the /openconfig-platform/components/component/state/part-no YANG schema element.
type Component_PartNoPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/part-no"
//	Path from root:       "/components/component/state/part-no"
func (n *Component_PartNoPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "part-no"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).PartNo
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/part-no"
//	Path from root:       "/components/component/state/part-no"
func (n *Component_PartNoPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "part-no"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).PartNo
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_RedundantRolePath represents the /openconfig-platform/components/component/state/redundant-role YANG schema element.
type Component_RedundantRolePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_RedundantRolePathAny represents the wildcard version of the /openconfig-platform/components/component/state/redundant-role YANG schema element.
type Component_RedundantRolePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/redundant-role"
//	Path from root:       "/components/component/state/redundant-role"
func (n *Component_RedundantRolePath) State() ygnmi.SingletonQuery[oc.E_Platform_ComponentRedundantRole] {
	return ygnmi.NewSingletonQuery[oc.E_Platform_ComponentRedundantRole](
		"Component",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "redundant-role"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Platform_ComponentRedundantRole, bool) {
			ret := gs.(*oc.Component).RedundantRole
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/redundant-role"
//	Path from root:       "/components/component/state/redundant-role"
func (n *Component_RedundantRolePathAny) State() ygnmi.WildcardQuery[oc.E_Platform_ComponentRedundantRole] {
	return ygnmi.NewWildcardQuery[oc.E_Platform_ComponentRedundantRole](
		"Component",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "redundant-role"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Platform_ComponentRedundantRole, bool) {
			ret := gs.(*oc.Component).RedundantRole
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_RemovablePath represents the /openconfig-platform/components/component/state/removable YANG schema element.
type Component_RemovablePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_RemovablePathAny represents the wildcard version of the /openconfig-platform/components/component/state/removable YANG schema element.
type Component_RemovablePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/removable"
//	Path from root:       "/components/component/state/removable"
func (n *Component_RemovablePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "removable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component).Removable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/removable"
//	Path from root:       "/components/component/state/removable"
func (n *Component_RemovablePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "removable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component).Removable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_SerialNoPath represents the /openconfig-platform/components/component/state/serial-no YANG schema element.
type Component_SerialNoPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_SerialNoPathAny represents the wildcard version of the /openconfig-platform/components/component/state/serial-no YANG schema element.
type Component_SerialNoPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/serial-no"
//	Path from root:       "/components/component/state/serial-no"
func (n *Component_SerialNoPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "serial-no"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).SerialNo
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/serial-no"
//	Path from root:       "/components/component/state/serial-no"
func (n *Component_SerialNoPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "serial-no"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).SerialNo
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_SoftwareVersionPath represents the /openconfig-platform/components/component/state/software-version YANG schema element.
type Component_SoftwareVersionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_SoftwareVersionPathAny represents the wildcard version of the /openconfig-platform/components/component/state/software-version YANG schema element.
type Component_SoftwareVersionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/software-version"
//	Path from root:       "/components/component/state/software-version"
func (n *Component_SoftwareVersionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "software-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).SoftwareVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/software-version"
//	Path from root:       "/components/component/state/software-version"
func (n *Component_SoftwareVersionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "software-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).SoftwareVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_SwitchoverReadyPath represents the /openconfig-platform/components/component/state/switchover-ready YANG schema element.
type Component_SwitchoverReadyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_SwitchoverReadyPathAny represents the wildcard version of the /openconfig-platform/components/component/state/switchover-ready YANG schema element.
type Component_SwitchoverReadyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/switchover-ready"
//	Path from root:       "/components/component/state/switchover-ready"
func (n *Component_SwitchoverReadyPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "switchover-ready"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component).SwitchoverReady
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/switchover-ready"
//	Path from root:       "/components/component/state/switchover-ready"
func (n *Component_SwitchoverReadyPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "switchover-ready"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component).SwitchoverReady
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_TypePath represents the /openconfig-platform/components/component/state/type YANG schema element.
type Component_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_TypePathAny represents the wildcard version of the /openconfig-platform/components/component/state/type YANG schema element.
type Component_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/type"
//	Path from root:       "/components/component/state/type"
func (n *Component_TypePath) State() ygnmi.SingletonQuery[oc.Component_Type_Union] {
	return ygnmi.NewSingletonQuery[oc.Component_Type_Union](
		"Component",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Component_Type_Union, bool) {
			ret := gs.(*oc.Component).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/type"
//	Path from root:       "/components/component/state/type"
func (n *Component_TypePathAny) State() ygnmi.WildcardQuery[oc.Component_Type_Union] {
	return ygnmi.NewWildcardQuery[oc.Component_Type_Union](
		"Component",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Component_Type_Union, bool) {
			ret := gs.(*oc.Component).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_UsedPowerPath represents the /openconfig-platform/components/component/state/used-power YANG schema element.
type Component_UsedPowerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_UsedPowerPathAny represents the wildcard version of the /openconfig-platform/components/component/state/used-power YANG schema element.
type Component_UsedPowerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-power"
//	Path from root:       "/components/component/state/used-power"
func (n *Component_UsedPowerPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used-power"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Component).UsedPower
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-power"
//	Path from root:       "/components/component/state/used-power"
func (n *Component_UsedPowerPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used-power"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Component).UsedPower
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// ComponentPath represents the /openconfig-platform/components/component YANG schema element.
type ComponentPath struct {
	*ygnmi.NodePath
}

// ComponentPathAny represents the wildcard version of the /openconfig-platform/components/component YANG schema element.
type ComponentPathAny struct {
	*ygnmi.NodePath
}

// ComponentPathMap represents the /openconfig-platform/components/component YANG schema element.
type ComponentPathMap struct {
	*ygnmi.NodePath
}

// ComponentPathMapAny represents the wildcard version of the /openconfig-platform/components/component YANG schema element.
type ComponentPathMapAny struct {
	*ygnmi.NodePath
}

// AllocatedPower (leaf): Power allocated by the system for the component.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/allocated-power"
//	Path from root:       "/components/component/state/allocated-power"
func (n *ComponentPath) AllocatedPower() *Component_AllocatedPowerPath {
	ps := &Component_AllocatedPowerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "allocated-power"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AllocatedPower (leaf): Power allocated by the system for the component.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/allocated-power"
//	Path from root:       "/components/component/state/allocated-power"
func (n *ComponentPathAny) AllocatedPower() *Component_AllocatedPowerPathAny {
	ps := &Component_AllocatedPowerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "allocated-power"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Backplane (container): Data for backplane components
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "backplane"
//	Path from root:       "/components/component/backplane"
func (n *ComponentPath) Backplane() *Component_BackplanePath {
	ps := &Component_BackplanePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"backplane"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Backplane (container): Data for backplane components
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "backplane"
//	Path from root:       "/components/component/backplane"
func (n *ComponentPathAny) Backplane() *Component_BackplanePathAny {
	ps := &Component_BackplanePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"backplane"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// BaseMacAddress (leaf): This is a MAC address representing the root or primary MAC
// address for a component.  Components such as CHASSIS and
// CONTROLLER_CARD are expected to provide a base-mac-address.  The
// base mac-address for CHASSIS and a PRIMARY CONTROLLER_CARD may
// contain the same value.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/base-mac-address"
//	Path from root:       "/components/component/state/base-mac-address"
func (n *ComponentPath) BaseMacAddress() *Component_BaseMacAddressPath {
	ps := &Component_BaseMacAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "base-mac-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BaseMacAddress (leaf): This is a MAC address representing the root or primary MAC
// address for a component.  Components such as CHASSIS and
// CONTROLLER_CARD are expected to provide a base-mac-address.  The
// base mac-address for CHASSIS and a PRIMARY CONTROLLER_CARD may
// contain the same value.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/base-mac-address"
//	Path from root:       "/components/component/state/base-mac-address"
func (n *ComponentPathAny) BaseMacAddress() *Component_BaseMacAddressPathAny {
	ps := &Component_BaseMacAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "base-mac-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BootTime (leaf): This timestamp indicates the time that the component was started.
// The value is the timestamp in nanoseconds relative to the Unix
// Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/boot-time"
//	Path from root:       "/components/component/state/boot-time"
func (n *ComponentPath) BootTime() *Component_BootTimePath {
	ps := &Component_BootTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "boot-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BootTime (leaf): This timestamp indicates the time that the component was started.
// The value is the timestamp in nanoseconds relative to the Unix
// Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/boot-time"
//	Path from root:       "/components/component/state/boot-time"
func (n *ComponentPathAny) BootTime() *Component_BootTimePathAny {
	ps := &Component_BootTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "boot-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Chassis (container): Data for chassis components
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "chassis"
//	Path from root:       "/components/component/chassis"
func (n *ComponentPath) Chassis() *Component_ChassisPath {
	ps := &Component_ChassisPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"chassis"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Chassis (container): Data for chassis components
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "chassis"
//	Path from root:       "/components/component/chassis"
func (n *ComponentPathAny) Chassis() *Component_ChassisPathAny {
	ps := &Component_ChassisPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"chassis"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// CleiCode (leaf): Common Language Equipment Identifier (CLEI) code of the
// component.  This should be present in particular if the
// component is also an FRU (field replaceable unit)
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/clei-code"
//	Path from root:       "/components/component/state/clei-code"
func (n *ComponentPath) CleiCode() *Component_CleiCodePath {
	ps := &Component_CleiCodePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "clei-code"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CleiCode (leaf): Common Language Equipment Identifier (CLEI) code of the
// component.  This should be present in particular if the
// component is also an FRU (field replaceable unit)
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/clei-code"
//	Path from root:       "/components/component/state/clei-code"
func (n *ComponentPathAny) CleiCode() *Component_CleiCodePathAny {
	ps := &Component_CleiCodePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "clei-code"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ControllerCard (container): Data for controller card components, i.e., for components
// with type=CONTROLLER_CARD
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "controller-card"
//	Path from root:       "/components/component/controller-card"
func (n *ComponentPath) ControllerCard() *Component_ControllerCardPath {
	ps := &Component_ControllerCardPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"controller-card"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ControllerCard (container): Data for controller card components, i.e., for components
// with type=CONTROLLER_CARD
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "controller-card"
//	Path from root:       "/components/component/controller-card"
func (n *ComponentPathAny) ControllerCard() *Component_ControllerCardPathAny {
	ps := &Component_ControllerCardPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"controller-card"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Cpu (container): Data for cpu components
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "cpu"
//	Path from root:       "/components/component/cpu"
func (n *ComponentPath) Cpu() *Component_CpuPath {
	ps := &Component_CpuPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"cpu"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Cpu (container): Data for cpu components
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "cpu"
//	Path from root:       "/components/component/cpu"
func (n *ComponentPathAny) Cpu() *Component_CpuPathAny {
	ps := &Component_CpuPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"cpu"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Description (leaf): System-supplied description of the component
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/description"
//	Path from root:       "/components/component/state/description"
func (n *ComponentPath) Description() *Component_DescriptionPath {
	ps := &Component_DescriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Description (leaf): System-supplied description of the component
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/description"
//	Path from root:       "/components/component/state/description"
func (n *ComponentPathAny) Description() *Component_DescriptionPathAny {
	ps := &Component_DescriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Empty (leaf): The empty leaf may be used by the device to indicate that a
// component position exists but is not populated.  Using this
// flag, it is possible for the management system to learn how
// many positions are available (e.g., occupied vs. empty
// linecard slots in a chassis).
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/empty"
//	Path from root:       "/components/component/state/empty"
func (n *ComponentPath) Empty() *Component_EmptyPath {
	ps := &Component_EmptyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "empty"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Empty (leaf): The empty leaf may be used by the device to indicate that a
// component position exists but is not populated.  Using this
// flag, it is possible for the management system to learn how
// many positions are available (e.g., occupied vs. empty
// linecard slots in a chassis).
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/empty"
//	Path from root:       "/components/component/state/empty"
func (n *ComponentPathAny) Empty() *Component_EmptyPathAny {
	ps := &Component_EmptyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "empty"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EntityId (leaf): A unique numeric identifier assigned by the system to the
// component. This identifier may be used to represent the
// corresponding SNMP Entity MIB identifier.
//
//	Defining module:      "openconfig-platform-ext"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/entity-id"
//	Path from root:       "/components/component/state/entity-id"
func (n *ComponentPath) EntityId() *Component_EntityIdPath {
	ps := &Component_EntityIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "entity-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EntityId (leaf): A unique numeric identifier assigned by the system to the
// component. This identifier may be used to represent the
// corresponding SNMP Entity MIB identifier.
//
//	Defining module:      "openconfig-platform-ext"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/entity-id"
//	Path from root:       "/components/component/state/entity-id"
func (n *ComponentPathAny) EntityId() *Component_EntityIdPathAny {
	ps := &Component_EntityIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "entity-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EquipmentFailure (leaf): If true, the hardware indicates that the component's physical equipment
// has failed
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/equipment-failure"
//	Path from root:       "/components/component/state/equipment-failure"
func (n *ComponentPath) EquipmentFailure() *Component_EquipmentFailurePath {
	ps := &Component_EquipmentFailurePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "equipment-failure"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EquipmentFailure (leaf): If true, the hardware indicates that the component's physical equipment
// has failed
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/equipment-failure"
//	Path from root:       "/components/component/state/equipment-failure"
func (n *ComponentPathAny) EquipmentFailure() *Component_EquipmentFailurePathAny {
	ps := &Component_EquipmentFailurePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "equipment-failure"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EquipmentMismatch (leaf): If true, the hardware indicates that the component inserted into the
// affected component's physical location is of a different type than what
// is configured
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/equipment-mismatch"
//	Path from root:       "/components/component/state/equipment-mismatch"
func (n *ComponentPath) EquipmentMismatch() *Component_EquipmentMismatchPath {
	ps := &Component_EquipmentMismatchPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "equipment-mismatch"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EquipmentMismatch (leaf): If true, the hardware indicates that the component inserted into the
// affected component's physical location is of a different type than what
// is configured
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/equipment-mismatch"
//	Path from root:       "/components/component/state/equipment-mismatch"
func (n *ComponentPathAny) EquipmentMismatch() *Component_EquipmentMismatchPathAny {
	ps := &Component_EquipmentMismatchPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "equipment-mismatch"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Fabric (container): Data for fabric components
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "fabric"
//	Path from root:       "/components/component/fabric"
func (n *ComponentPath) Fabric() *Component_FabricPath {
	ps := &Component_FabricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"fabric"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Fabric (container): Data for fabric components
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "fabric"
//	Path from root:       "/components/component/fabric"
func (n *ComponentPathAny) Fabric() *Component_FabricPathAny {
	ps := &Component_FabricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"fabric"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Fan (container): Data for fan components
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "fan"
//	Path from root:       "/components/component/fan"
func (n *ComponentPath) Fan() *Component_FanPath {
	ps := &Component_FanPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"fan"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Fan (container): Data for fan components
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "fan"
//	Path from root:       "/components/component/fan"
func (n *ComponentPathAny) Fan() *Component_FanPathAny {
	ps := &Component_FanPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"fan"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// FirmwareVersion (leaf): For hardware components, this is the version of associated
// firmware that is running on the component, if applicable.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/firmware-version"
//	Path from root:       "/components/component/state/firmware-version"
func (n *ComponentPath) FirmwareVersion() *Component_FirmwareVersionPath {
	ps := &Component_FirmwareVersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "firmware-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FirmwareVersion (leaf): For hardware components, this is the version of associated
// firmware that is running on the component, if applicable.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/firmware-version"
//	Path from root:       "/components/component/state/firmware-version"
func (n *ComponentPathAny) FirmwareVersion() *Component_FirmwareVersionPathAny {
	ps := &Component_FirmwareVersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "firmware-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HardwareVersion (leaf): For hardware components, this is the hardware revision of
// the component.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/hardware-version"
//	Path from root:       "/components/component/state/hardware-version"
func (n *ComponentPath) HardwareVersion() *Component_HardwareVersionPath {
	ps := &Component_HardwareVersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "hardware-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HardwareVersion (leaf): For hardware components, this is the hardware revision of
// the component.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/hardware-version"
//	Path from root:       "/components/component/state/hardware-version"
func (n *ComponentPathAny) HardwareVersion() *Component_HardwareVersionPathAny {
	ps := &Component_HardwareVersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "hardware-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): Unique identifier assigned by the system for the
// component
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/id"
//	Path from root:       "/components/component/state/id"
func (n *ComponentPath) Id() *Component_IdPath {
	ps := &Component_IdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): Unique identifier assigned by the system for the
// component
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/id"
//	Path from root:       "/components/component/state/id"
func (n *ComponentPathAny) Id() *Component_IdPathAny {
	ps := &Component_IdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InstallComponent (leaf): This leaf contains the name of the ancestor component which
// contains the 'install-position'.  This creates a distinct
// mapping between a removable component and the target component
// it is installed into.  Note there may be zero or more
// intermediate components between the removable component and
// the install-component.
//
// For example, consider the component tree
// PORT ['eth1/2']-> INTEGRATED_CIRCUIT ['npu1']-> LINECARD ['lc1'].
// The PORT has an install-position of '2' and install-component named
// 'lc1'.  The intermediate INTEGRATED-CIRCUIT component is not
// present in either install-position or install-component leaves.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/install-component"
//	Path from root:       "/components/component/state/install-component"
func (n *ComponentPath) InstallComponent() *Component_InstallComponentPath {
	ps := &Component_InstallComponentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "install-component"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InstallComponent (leaf): This leaf contains the name of the ancestor component which
// contains the 'install-position'.  This creates a distinct
// mapping between a removable component and the target component
// it is installed into.  Note there may be zero or more
// intermediate components between the removable component and
// the install-component.
//
// For example, consider the component tree
// PORT ['eth1/2']-> INTEGRATED_CIRCUIT ['npu1']-> LINECARD ['lc1'].
// The PORT has an install-position of '2' and install-component named
// 'lc1'.  The intermediate INTEGRATED-CIRCUIT component is not
// present in either install-position or install-component leaves.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/install-component"
//	Path from root:       "/components/component/state/install-component"
func (n *ComponentPathAny) InstallComponent() *Component_InstallComponentPathAny {
	ps := &Component_InstallComponentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "install-component"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InstallPosition (leaf): System-supplied index to a position where this component is
// installed.  The position may be referred in device documenation
// as a port, slot, bay, socket, etc.  This string must only
// indicate the name of the position, and not any indication of
// the name of the parent component within the system.  Instead,
// parent component name should be present in the 'parent' leaf.
//
// Typically the install-position is a number, but it is observed
// that some devices may use letters or alphanumerics.  The
// position name should be the same name used to physically
// identify the position in documentation or printed on the
// device.
//
// Any component which is removable is expected to have
// an install-position and an install-component which points to
// an ancestor component where the connection occurs.
//
// For component types that have an explicit slot-id attribute,
// such as LINECARD, the system should populate slot-id,
// install-position and install-component.  This will facilitate a
// transition to deprecate slot-id.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/install-position"
//	Path from root:       "/components/component/state/install-position"
func (n *ComponentPath) InstallPosition() *Component_InstallPositionPath {
	ps := &Component_InstallPositionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "install-position"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InstallPosition (leaf): System-supplied index to a position where this component is
// installed.  The position may be referred in device documenation
// as a port, slot, bay, socket, etc.  This string must only
// indicate the name of the position, and not any indication of
// the name of the parent component within the system.  Instead,
// parent component name should be present in the 'parent' leaf.
//
// Typically the install-position is a number, but it is observed
// that some devices may use letters or alphanumerics.  The
// position name should be the same name used to physically
// identify the position in documentation or printed on the
// device.
//
// Any component which is removable is expected to have
// an install-position and an install-component which points to
// an ancestor component where the connection occurs.
//
// For component types that have an explicit slot-id attribute,
// such as LINECARD, the system should populate slot-id,
// install-position and install-component.  This will facilitate a
// transition to deprecate slot-id.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/install-position"
//	Path from root:       "/components/component/state/install-position"
func (n *ComponentPathAny) InstallPosition() *Component_InstallPositionPathAny {
	ps := &Component_InstallPositionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "install-position"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IntegratedCircuit (container): Data for chip components, such as ASIC, NPUs, etc.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "integrated-circuit"
//	Path from root:       "/components/component/integrated-circuit"
func (n *ComponentPath) IntegratedCircuit() *Component_IntegratedCircuitPath {
	ps := &Component_IntegratedCircuitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"integrated-circuit"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// IntegratedCircuit (container): Data for chip components, such as ASIC, NPUs, etc.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "integrated-circuit"
//	Path from root:       "/components/component/integrated-circuit"
func (n *ComponentPathAny) IntegratedCircuit() *Component_IntegratedCircuitPathAny {
	ps := &Component_IntegratedCircuitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"integrated-circuit"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LastPoweroffReason (container): Records last power-off reason for a component.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/last-poweroff-reason"
//	Path from root:       "/components/component/state/last-poweroff-reason"
func (n *ComponentPath) LastPoweroffReason() *Component_LastPoweroffReasonPath {
	ps := &Component_LastPoweroffReasonPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-poweroff-reason"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LastPoweroffReason (container): Records last power-off reason for a component.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/last-poweroff-reason"
//	Path from root:       "/components/component/state/last-poweroff-reason"
func (n *ComponentPathAny) LastPoweroffReason() *Component_LastPoweroffReasonPathAny {
	ps := &Component_LastPoweroffReasonPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-poweroff-reason"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LastPoweroffTime (leaf): This records the last time a component was directly powered
// down. The value is a Unix Epoch timestamp (nanoseconds since
// Jan 1, 1970 00:00:00 UTC). Component power-off can be:
// - USER_INITIATED
// - SYSTEM_INITIATED
// - POWER_FAILURE
// This field is only updated when power is shut off.  It is not
// updated during reboots; those are tracked in the 'boot-time'
// leaf.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/last-poweroff-time"
//	Path from root:       "/components/component/state/last-poweroff-time"
func (n *ComponentPath) LastPoweroffTime() *Component_LastPoweroffTimePath {
	ps := &Component_LastPoweroffTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-poweroff-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastPoweroffTime (leaf): This records the last time a component was directly powered
// down. The value is a Unix Epoch timestamp (nanoseconds since
// Jan 1, 1970 00:00:00 UTC). Component power-off can be:
// - USER_INITIATED
// - SYSTEM_INITIATED
// - POWER_FAILURE
// This field is only updated when power is shut off.  It is not
// updated during reboots; those are tracked in the 'boot-time'
// leaf.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/last-poweroff-time"
//	Path from root:       "/components/component/state/last-poweroff-time"
func (n *ComponentPathAny) LastPoweroffTime() *Component_LastPoweroffTimePathAny {
	ps := &Component_LastPoweroffTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-poweroff-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastRebootReason (leaf): This reports the reason of the last reboot of the component.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/last-reboot-reason"
//	Path from root:       "/components/component/state/last-reboot-reason"
func (n *ComponentPath) LastRebootReason() *Component_LastRebootReasonPath {
	ps := &Component_LastRebootReasonPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-reboot-reason"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastRebootReason (leaf): This reports the reason of the last reboot of the component.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/last-reboot-reason"
//	Path from root:       "/components/component/state/last-reboot-reason"
func (n *ComponentPathAny) LastRebootReason() *Component_LastRebootReasonPathAny {
	ps := &Component_LastRebootReasonPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-reboot-reason"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastRebootTime (leaf): This reports the time of the last reboot of the component. The
// value is the timestamp in nanoseconds relative to the Unix Epoch
// (Jan 1, 1970 00:00:00 UTC). This timer is updated when the component
// starts up, either due to a power-on event or a reboot.  This timer
// is not updated during power shutdowns; those are tracked in
// the 'last-poweroff-time' leaf.
// This leaf is deprecated and the boot-time leaf should be used
// instead.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/last-reboot-time"
//	Path from root:       "/components/component/state/last-reboot-time"
func (n *ComponentPath) LastRebootTime() *Component_LastRebootTimePath {
	ps := &Component_LastRebootTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-reboot-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastRebootTime (leaf): This reports the time of the last reboot of the component. The
// value is the timestamp in nanoseconds relative to the Unix Epoch
// (Jan 1, 1970 00:00:00 UTC). This timer is updated when the component
// starts up, either due to a power-on event or a reboot.  This timer
// is not updated during power shutdowns; those are tracked in
// the 'last-poweroff-time' leaf.
// This leaf is deprecated and the boot-time leaf should be used
// instead.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/last-reboot-time"
//	Path from root:       "/components/component/state/last-reboot-time"
func (n *ComponentPathAny) LastRebootTime() *Component_LastRebootTimePathAny {
	ps := &Component_LastRebootTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-reboot-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastSwitchoverReason (container): For components that have redundant roles (e.g. two
// supervisors in a device, one as primary the other as secondary),
// this reports the reason of the last change of the
// component's role.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/last-switchover-reason"
//	Path from root:       "/components/component/state/last-switchover-reason"
func (n *ComponentPath) LastSwitchoverReason() *Component_LastSwitchoverReasonPath {
	ps := &Component_LastSwitchoverReasonPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-switchover-reason"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LastSwitchoverReason (container): For components that have redundant roles (e.g. two
// supervisors in a device, one as primary the other as secondary),
// this reports the reason of the last change of the
// component's role.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/last-switchover-reason"
//	Path from root:       "/components/component/state/last-switchover-reason"
func (n *ComponentPathAny) LastSwitchoverReason() *Component_LastSwitchoverReasonPathAny {
	ps := &Component_LastSwitchoverReasonPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-switchover-reason"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LastSwitchoverTime (leaf): For components that have redundant roles (e.g. two
// supervisors in a device, one as primary the other as
// secondary), this reports the time of the last change of
// the component's role. The value is the timestamp in
// nanoseconds relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/last-switchover-time"
//	Path from root:       "/components/component/state/last-switchover-time"
func (n *ComponentPath) LastSwitchoverTime() *Component_LastSwitchoverTimePath {
	ps := &Component_LastSwitchoverTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-switchover-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastSwitchoverTime (leaf): For components that have redundant roles (e.g. two
// supervisors in a device, one as primary the other as
// secondary), this reports the time of the last change of
// the component's role. The value is the timestamp in
// nanoseconds relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/last-switchover-time"
//	Path from root:       "/components/component/state/last-switchover-time"
func (n *ComponentPathAny) LastSwitchoverTime() *Component_LastSwitchoverTimePathAny {
	ps := &Component_LastSwitchoverTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-switchover-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Linecard (container): Top-level container for linecard data
//
//	Defining module:      "openconfig-platform-linecard"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "linecard"
//	Path from root:       "/components/component/linecard"
func (n *ComponentPath) Linecard() *Component_LinecardPath {
	ps := &Component_LinecardPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"linecard"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Linecard (container): Top-level container for linecard data
//
//	Defining module:      "openconfig-platform-linecard"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "linecard"
//	Path from root:       "/components/component/linecard"
func (n *ComponentPathAny) Linecard() *Component_LinecardPathAny {
	ps := &Component_LinecardPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"linecard"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Location (leaf): System-supplied description of the location of the
// component within the system. This could be a bay position,
// slot number, socket location, etc. For component types that
// have an explicit slot-id attribute, such as linecards, the
// system should populate the more specific slot-id.
//
// This leaf is deprecated and replaced by install-position and
// install-component.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/location"
//	Path from root:       "/components/component/state/location"
func (n *ComponentPath) Location() *Component_LocationPath {
	ps := &Component_LocationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "location"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Location (leaf): System-supplied description of the location of the
// component within the system. This could be a bay position,
// slot number, socket location, etc. For component types that
// have an explicit slot-id attribute, such as linecards, the
// system should populate the more specific slot-id.
//
// This leaf is deprecated and replaced by install-position and
// install-component.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/location"
//	Path from root:       "/components/component/state/location"
func (n *ComponentPathAny) Location() *Component_LocationPathAny {
	ps := &Component_LocationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "location"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Memory (container): For components that have associated memory, these values
// report information about available and utilized memory.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/memory"
//	Path from root:       "/components/component/state/memory"
func (n *ComponentPath) Memory() *Component_MemoryPath {
	ps := &Component_MemoryPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "memory"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Memory (container): For components that have associated memory, these values
// report information about available and utilized memory.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/memory"
//	Path from root:       "/components/component/state/memory"
func (n *ComponentPathAny) Memory() *Component_MemoryPathAny {
	ps := &Component_MemoryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "memory"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MfgDate (leaf): System-supplied representation of the component's
// manufacturing date.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/mfg-date"
//	Path from root:       "/components/component/state/mfg-date"
func (n *ComponentPath) MfgDate() *Component_MfgDatePath {
	ps := &Component_MfgDatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "mfg-date"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MfgDate (leaf): System-supplied representation of the component's
// manufacturing date.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/mfg-date"
//	Path from root:       "/components/component/state/mfg-date"
func (n *ComponentPathAny) MfgDate() *Component_MfgDatePathAny {
	ps := &Component_MfgDatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "mfg-date"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MfgName (leaf): System-supplied identifier for the manufacturer of the
// component.  This data is particularly useful when a
// component manufacturer is different than the overall
// device vendor.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/mfg-name"
//	Path from root:       "/components/component/state/mfg-name"
func (n *ComponentPath) MfgName() *Component_MfgNamePath {
	ps := &Component_MfgNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "mfg-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MfgName (leaf): System-supplied identifier for the manufacturer of the
// component.  This data is particularly useful when a
// component manufacturer is different than the overall
// device vendor.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/mfg-name"
//	Path from root:       "/components/component/state/mfg-name"
func (n *ComponentPathAny) MfgName() *Component_MfgNamePathAny {
	ps := &Component_MfgNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "mfg-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ModelName (leaf): Model name that would be found in a catalog of stock keeping
// units (SKU) and should be the orderable name of the
// component.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/model-name"
//	Path from root:       "/components/component/state/model-name"
func (n *ComponentPath) ModelName() *Component_ModelNamePath {
	ps := &Component_ModelNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "model-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ModelName (leaf): Model name that would be found in a catalog of stock keeping
// units (SKU) and should be the orderable name of the
// component.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/model-name"
//	Path from root:       "/components/component/state/model-name"
func (n *ComponentPathAny) ModelName() *Component_ModelNamePathAny {
	ps := &Component_ModelNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "model-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Device name for the component -- this may not be a
// configurable parameter on many implementations.  Where
// component preconfiguration is supported, for example,
// the component name may be configurable.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/*/name"
func (n *ComponentPath) Name() *Component_NamePath {
	ps := &Component_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Device name for the component -- this may not be a
// configurable parameter on many implementations.  Where
// component preconfiguration is supported, for example,
// the component name may be configurable.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/*/name"
func (n *ComponentPathAny) Name() *Component_NamePathAny {
	ps := &Component_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OperStatus (leaf): If applicable, this reports the current operational status
// of the component.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/oper-status"
//	Path from root:       "/components/component/state/oper-status"
func (n *ComponentPath) OperStatus() *Component_OperStatusPath {
	ps := &Component_OperStatusPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oper-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OperStatus (leaf): If applicable, this reports the current operational status
// of the component.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/oper-status"
//	Path from root:       "/components/component/state/oper-status"
func (n *ComponentPathAny) OperStatus() *Component_OperStatusPathAny {
	ps := &Component_OperStatusPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oper-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OpticalChannel (container): Enclosing container for the list of optical channels
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "optical-channel"
//	Path from root:       "/components/component/optical-channel"
func (n *ComponentPath) OpticalChannel() *Component_OpticalChannelPath {
	ps := &Component_OpticalChannelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"optical-channel"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// OpticalChannel (container): Enclosing container for the list of optical channels
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "optical-channel"
//	Path from root:       "/components/component/optical-channel"
func (n *ComponentPathAny) OpticalChannel() *Component_OpticalChannelPathAny {
	ps := &Component_OpticalChannelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"optical-channel"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Parent (leaf): Reference to the name of the parent component.  Note that
// this reference must be kept synchronized with the
// corresponding subcomponent reference from the parent
// component.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/parent"
//	Path from root:       "/components/component/state/parent"
func (n *ComponentPath) Parent() *Component_ParentPath {
	ps := &Component_ParentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "parent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Parent (leaf): Reference to the name of the parent component.  Note that
// this reference must be kept synchronized with the
// corresponding subcomponent reference from the parent
// component.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/parent"
//	Path from root:       "/components/component/state/parent"
func (n *ComponentPathAny) Parent() *Component_ParentPathAny {
	ps := &Component_ParentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "parent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PartNo (leaf): System-assigned part number for the component.  This should
// be present in particular if the component is also an FRU
// (field replaceable unit)
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/part-no"
//	Path from root:       "/components/component/state/part-no"
func (n *ComponentPath) PartNo() *Component_PartNoPath {
	ps := &Component_PartNoPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "part-no"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PartNo (leaf): System-assigned part number for the component.  This should
// be present in particular if the component is also an FRU
// (field replaceable unit)
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/part-no"
//	Path from root:       "/components/component/state/part-no"
func (n *ComponentPathAny) PartNo() *Component_PartNoPathAny {
	ps := &Component_PartNoPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "part-no"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Pcie (container): Components that are connected to the system over the Peripheral
// Component Interconnect Express (PCIe), report the fatal, non-fatal
// and correctable PCIe error counts.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/pcie"
//	Path from root:       "/components/component/state/pcie"
func (n *ComponentPath) Pcie() *Component_PciePath {
	ps := &Component_PciePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "pcie"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Pcie (container): Components that are connected to the system over the Peripheral
// Component Interconnect Express (PCIe), report the fatal, non-fatal
// and correctable PCIe error counts.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/pcie"
//	Path from root:       "/components/component/state/pcie"
func (n *ComponentPathAny) Pcie() *Component_PciePathAny {
	ps := &Component_PciePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "pcie"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Port (container): Data for physical port components
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "port"
//	Path from root:       "/components/component/port"
func (n *ComponentPath) Port() *Component_PortPath {
	ps := &Component_PortPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"port"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Port (container): Data for physical port components
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "port"
//	Path from root:       "/components/component/port"
func (n *ComponentPathAny) Port() *Component_PortPathAny {
	ps := &Component_PortPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"port"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PowerSupply (container): Data for power supply components
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "power-supply"
//	Path from root:       "/components/component/power-supply"
func (n *ComponentPath) PowerSupply() *Component_PowerSupplyPath {
	ps := &Component_PowerSupplyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"power-supply"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PowerSupply (container): Data for power supply components
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "power-supply"
//	Path from root:       "/components/component/power-supply"
func (n *ComponentPathAny) PowerSupply() *Component_PowerSupplyPathAny {
	ps := &Component_PowerSupplyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"power-supply"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PropertyAny (list): List of system properties for the component
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "properties/property"
//	Path from root:       "/components/component/properties/property"
func (n *ComponentPath) PropertyAny() *Component_PropertyPathAny {
	ps := &Component_PropertyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"properties", "property"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// PropertyAny (list): List of system properties for the component
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "properties/property"
//	Path from root:       "/components/component/properties/property"
func (n *ComponentPathAny) PropertyAny() *Component_PropertyPathAny {
	ps := &Component_PropertyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"properties", "property"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Property (list): List of system properties for the component
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "properties/property"
//	Path from root:       "/components/component/properties/property"
//
//	Name: string
func (n *ComponentPath) Property(Name string) *Component_PropertyPath {
	ps := &Component_PropertyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"properties", "property"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Property (list): List of system properties for the component
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "properties/property"
//	Path from root:       "/components/component/properties/property"
//
//	Name: string
func (n *ComponentPathAny) Property(Name string) *Component_PropertyPathAny {
	ps := &Component_PropertyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"properties", "property"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// PropertyMap (list): List of system properties for the component
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "properties/property"
//	Path from root:       "/components/component/properties/property"
func (n *ComponentPath) PropertyMap() *Component_PropertyPathMap {
	ps := &Component_PropertyPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"properties"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PropertyMap (list): List of system properties for the component
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "properties/property"
//	Path from root:       "/components/component/properties/property"
func (n *ComponentPathAny) PropertyMap() *Component_PropertyPathMapAny {
	ps := &Component_PropertyPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"properties"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RedundantRole (leaf): For components that have redundant roles (e.g. two
// supervisors in a device, one as primary the other as secondary),
// this reports the role of the component.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/redundant-role"
//	Path from root:       "/components/component/state/redundant-role"
func (n *ComponentPath) RedundantRole() *Component_RedundantRolePath {
	ps := &Component_RedundantRolePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "redundant-role"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RedundantRole (leaf): For components that have redundant roles (e.g. two
// supervisors in a device, one as primary the other as secondary),
// this reports the role of the component.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/redundant-role"
//	Path from root:       "/components/component/state/redundant-role"
func (n *ComponentPathAny) RedundantRole() *Component_RedundantRolePathAny {
	ps := &Component_RedundantRolePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "redundant-role"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Removable (leaf): If true, this component is removable or is a field
// replaceable unit
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/removable"
//	Path from root:       "/components/component/state/removable"
func (n *ComponentPath) Removable() *Component_RemovablePath {
	ps := &Component_RemovablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "removable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Removable (leaf): If true, this component is removable or is a field
// replaceable unit
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/removable"
//	Path from root:       "/components/component/state/removable"
func (n *ComponentPathAny) Removable() *Component_RemovablePathAny {
	ps := &Component_RemovablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "removable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SerialNo (leaf): System-assigned serial number of the component.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/serial-no"
//	Path from root:       "/components/component/state/serial-no"
func (n *ComponentPath) SerialNo() *Component_SerialNoPath {
	ps := &Component_SerialNoPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "serial-no"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SerialNo (leaf): System-assigned serial number of the component.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/serial-no"
//	Path from root:       "/components/component/state/serial-no"
func (n *ComponentPathAny) SerialNo() *Component_SerialNoPathAny {
	ps := &Component_SerialNoPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "serial-no"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SoftwareModule (container): Data for software module components, i.e., for components
// with type=SOFTWARE_MODULE
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "software-module"
//	Path from root:       "/components/component/software-module"
func (n *ComponentPath) SoftwareModule() *Component_SoftwareModulePath {
	ps := &Component_SoftwareModulePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"software-module"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SoftwareModule (container): Data for software module components, i.e., for components
// with type=SOFTWARE_MODULE
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "software-module"
//	Path from root:       "/components/component/software-module"
func (n *ComponentPathAny) SoftwareModule() *Component_SoftwareModulePathAny {
	ps := &Component_SoftwareModulePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"software-module"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SoftwareVersion (leaf): For software components such as operating system or other
// software module, this is the version of the currently
// running software.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/software-version"
//	Path from root:       "/components/component/state/software-version"
func (n *ComponentPath) SoftwareVersion() *Component_SoftwareVersionPath {
	ps := &Component_SoftwareVersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "software-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SoftwareVersion (leaf): For software components such as operating system or other
// software module, this is the version of the currently
// running software.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/software-version"
//	Path from root:       "/components/component/state/software-version"
func (n *ComponentPathAny) SoftwareVersion() *Component_SoftwareVersionPathAny {
	ps := &Component_SoftwareVersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "software-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Storage (container): Data for storage components
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "storage"
//	Path from root:       "/components/component/storage"
func (n *ComponentPath) Storage() *Component_StoragePath {
	ps := &Component_StoragePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"storage"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Storage (container): Data for storage components
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "storage"
//	Path from root:       "/components/component/storage"
func (n *ComponentPathAny) Storage() *Component_StoragePathAny {
	ps := &Component_StoragePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"storage"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SubcomponentAny (list): List of subcomponent references
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "subcomponents/subcomponent"
//	Path from root:       "/components/component/subcomponents/subcomponent"
func (n *ComponentPath) SubcomponentAny() *Component_SubcomponentPathAny {
	ps := &Component_SubcomponentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"subcomponents", "subcomponent"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// SubcomponentAny (list): List of subcomponent references
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "subcomponents/subcomponent"
//	Path from root:       "/components/component/subcomponents/subcomponent"
func (n *ComponentPathAny) SubcomponentAny() *Component_SubcomponentPathAny {
	ps := &Component_SubcomponentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"subcomponents", "subcomponent"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Subcomponent (list): List of subcomponent references
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "subcomponents/subcomponent"
//	Path from root:       "/components/component/subcomponents/subcomponent"
//
//	Name: string
func (n *ComponentPath) Subcomponent(Name string) *Component_SubcomponentPath {
	ps := &Component_SubcomponentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"subcomponents", "subcomponent"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Subcomponent (list): List of subcomponent references
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "subcomponents/subcomponent"
//	Path from root:       "/components/component/subcomponents/subcomponent"
//
//	Name: string
func (n *ComponentPathAny) Subcomponent(Name string) *Component_SubcomponentPathAny {
	ps := &Component_SubcomponentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"subcomponents", "subcomponent"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// SubcomponentMap (list): List of subcomponent references
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "subcomponents/subcomponent"
//	Path from root:       "/components/component/subcomponents/subcomponent"
func (n *ComponentPath) SubcomponentMap() *Component_SubcomponentPathMap {
	ps := &Component_SubcomponentPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"subcomponents"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SubcomponentMap (list): List of subcomponent references
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "subcomponents/subcomponent"
//	Path from root:       "/components/component/subcomponents/subcomponent"
func (n *ComponentPathAny) SubcomponentMap() *Component_SubcomponentPathMapAny {
	ps := &Component_SubcomponentPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"subcomponents"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SwitchoverReady (leaf): For components that have redundant roles, this reports a value
// that indicates if the component is ready to support failover.
//
// The components with a redundant-role should reflect the overall
// system's switchover status.  For example, two supervisors in a
// device, one as primary and the other as secondary, should both
// report the same value.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/switchover-ready"
//	Path from root:       "/components/component/state/switchover-ready"
func (n *ComponentPath) SwitchoverReady() *Component_SwitchoverReadyPath {
	ps := &Component_SwitchoverReadyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "switchover-ready"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SwitchoverReady (leaf): For components that have redundant roles, this reports a value
// that indicates if the component is ready to support failover.
//
// The components with a redundant-role should reflect the overall
// system's switchover status.  For example, two supervisors in a
// device, one as primary and the other as secondary, should both
// report the same value.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/switchover-ready"
//	Path from root:       "/components/component/state/switchover-ready"
func (n *ComponentPathAny) SwitchoverReady() *Component_SwitchoverReadyPathAny {
	ps := &Component_SwitchoverReadyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "switchover-ready"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Temperature (container): Temperature in degrees Celsius of the component. Values include
// the instantaneous, average, minimum, and maximum statistics. If
// avg/min/max statistics are not supported, the target is expected
// to just supply the instant value
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/temperature"
//	Path from root:       "/components/component/state/temperature"
func (n *ComponentPath) Temperature() *Component_TemperaturePath {
	ps := &Component_TemperaturePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "temperature"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Temperature (container): Temperature in degrees Celsius of the component. Values include
// the instantaneous, average, minimum, and maximum statistics. If
// avg/min/max statistics are not supported, the target is expected
// to just supply the instant value
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/temperature"
//	Path from root:       "/components/component/state/temperature"
func (n *ComponentPathAny) Temperature() *Component_TemperaturePathAny {
	ps := &Component_TemperaturePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "temperature"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Transceiver (container): Top-level container for client port transceiver data
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "transceiver"
//	Path from root:       "/components/component/transceiver"
func (n *ComponentPath) Transceiver() *Component_TransceiverPath {
	ps := &Component_TransceiverPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"transceiver"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Transceiver (container): Top-level container for client port transceiver data
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "transceiver"
//	Path from root:       "/components/component/transceiver"
func (n *ComponentPathAny) Transceiver() *Component_TransceiverPathAny {
	ps := &Component_TransceiverPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"transceiver"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Type (leaf): Type of component as identified by the system
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/type"
//	Path from root:       "/components/component/state/type"
func (n *ComponentPath) Type() *Component_TypePath {
	ps := &Component_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Type of component as identified by the system
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/type"
//	Path from root:       "/components/component/state/type"
func (n *ComponentPathAny) Type() *Component_TypePathAny {
	ps := &Component_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UsedPower (leaf): Actual power used by the component.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-power"
//	Path from root:       "/components/component/state/used-power"
func (n *ComponentPath) UsedPower() *Component_UsedPowerPath {
	ps := &Component_UsedPowerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "used-power"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UsedPower (leaf): Actual power used by the component.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-power"
//	Path from root:       "/components/component/state/used-power"
func (n *ComponentPathAny) UsedPower() *Component_UsedPowerPathAny {
	ps := &Component_UsedPowerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "used-power"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *ComponentPath) State() ygnmi.SingletonQuery[*oc.Component] {
	return ygnmi.NewSingletonQuery[*oc.Component](
		"Component",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *ComponentPathAny) State() ygnmi.WildcardQuery[*oc.Component] {
	return ygnmi.NewWildcardQuery[*oc.Component](
		"Component",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *ComponentPath) Config() ygnmi.ConfigQuery[*oc.Component] {
	return ygnmi.NewConfigQuery[*oc.Component](
		"Component",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *ComponentPathAny) Config() ygnmi.WildcardQuery[*oc.Component] {
	return ygnmi.NewWildcardQuery[*oc.Component](
		"Component",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *ComponentPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Component] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Component](
		"Root",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component, bool) {
			ret := gs.(*oc.Root).Component
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Root) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform:components"},
			PostRelPath: []string{"openconfig-platform:component"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *ComponentPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Component] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Component](
		"Root",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component, bool) {
			ret := gs.(*oc.Root).Component
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Root) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform:components"},
			PostRelPath: []string{"openconfig-platform:component"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *ComponentPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Component] {
	return ygnmi.NewConfigQuery[map[string]*oc.Component](
		"Root",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component, bool) {
			ret := gs.(*oc.Root).Component
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Root) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform:components"},
			PostRelPath: []string{"openconfig-platform:component"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *ComponentPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Component] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Component](
		"Root",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component, bool) {
			ret := gs.(*oc.Root).Component
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Root) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform:components"},
			PostRelPath: []string{"openconfig-platform:component"},
		},
	)
}

// Component_BackplanePath represents the /openconfig-platform/components/component/backplane YANG schema element.
type Component_BackplanePath struct {
	*ygnmi.NodePath
}

// Component_BackplanePathAny represents the wildcard version of the /openconfig-platform/components/component/backplane YANG schema element.
type Component_BackplanePathAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_BackplanePath) State() ygnmi.SingletonQuery[*oc.Component_Backplane] {
	return ygnmi.NewSingletonQuery[*oc.Component_Backplane](
		"Component_Backplane",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_BackplanePathAny) State() ygnmi.WildcardQuery[*oc.Component_Backplane] {
	return ygnmi.NewWildcardQuery[*oc.Component_Backplane](
		"Component_Backplane",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_BackplanePath) Config() ygnmi.ConfigQuery[*oc.Component_Backplane] {
	return ygnmi.NewConfigQuery[*oc.Component_Backplane](
		"Component_Backplane",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_BackplanePathAny) Config() ygnmi.WildcardQuery[*oc.Component_Backplane] {
	return ygnmi.NewWildcardQuery[*oc.Component_Backplane](
		"Component_Backplane",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_ChassisPath represents the /openconfig-platform/components/component/chassis YANG schema element.
type Component_ChassisPath struct {
	*ygnmi.NodePath
}

// Component_ChassisPathAny represents the wildcard version of the /openconfig-platform/components/component/chassis YANG schema element.
type Component_ChassisPathAny struct {
	*ygnmi.NodePath
}

// Utilization (container): Resource utilization of the component.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "utilization"
//	Path from root:       "/components/component/chassis/utilization"
func (n *Component_ChassisPath) Utilization() *Component_Chassis_UtilizationPath {
	ps := &Component_Chassis_UtilizationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"utilization"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Utilization (container): Resource utilization of the component.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "utilization"
//	Path from root:       "/components/component/chassis/utilization"
func (n *Component_ChassisPathAny) Utilization() *Component_Chassis_UtilizationPathAny {
	ps := &Component_Chassis_UtilizationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"utilization"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_ChassisPath) State() ygnmi.SingletonQuery[*oc.Component_Chassis] {
	return ygnmi.NewSingletonQuery[*oc.Component_Chassis](
		"Component_Chassis",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_ChassisPathAny) State() ygnmi.WildcardQuery[*oc.Component_Chassis] {
	return ygnmi.NewWildcardQuery[*oc.Component_Chassis](
		"Component_Chassis",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_ChassisPath) Config() ygnmi.ConfigQuery[*oc.Component_Chassis] {
	return ygnmi.NewConfigQuery[*oc.Component_Chassis](
		"Component_Chassis",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_ChassisPathAny) Config() ygnmi.WildcardQuery[*oc.Component_Chassis] {
	return ygnmi.NewWildcardQuery[*oc.Component_Chassis](
		"Component_Chassis",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Chassis_UtilizationPath represents the /openconfig-platform/components/component/chassis/utilization YANG schema element.
type Component_Chassis_UtilizationPath struct {
	*ygnmi.NodePath
}

// Component_Chassis_UtilizationPathAny represents the wildcard version of the /openconfig-platform/components/component/chassis/utilization YANG schema element.
type Component_Chassis_UtilizationPathAny struct {
	*ygnmi.NodePath
}

// ResourceAny (list): List of resources, keyed by resource name.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "resources/resource"
//	Path from root:       "/components/component/chassis/utilization/resources/resource"
func (n *Component_Chassis_UtilizationPath) ResourceAny() *Component_Chassis_Utilization_ResourcePathAny {
	ps := &Component_Chassis_Utilization_ResourcePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// ResourceAny (list): List of resources, keyed by resource name.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "resources/resource"
//	Path from root:       "/components/component/chassis/utilization/resources/resource"
func (n *Component_Chassis_UtilizationPathAny) ResourceAny() *Component_Chassis_Utilization_ResourcePathAny {
	ps := &Component_Chassis_Utilization_ResourcePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Resource (list): List of resources, keyed by resource name.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "resources/resource"
//	Path from root:       "/components/component/chassis/utilization/resources/resource"
//
//	Name: string
func (n *Component_Chassis_UtilizationPath) Resource(Name string) *Component_Chassis_Utilization_ResourcePath {
	ps := &Component_Chassis_Utilization_ResourcePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Resource (list): List of resources, keyed by resource name.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "resources/resource"
//	Path from root:       "/components/component/chassis/utilization/resources/resource"
//
//	Name: string
func (n *Component_Chassis_UtilizationPathAny) Resource(Name string) *Component_Chassis_Utilization_ResourcePathAny {
	ps := &Component_Chassis_Utilization_ResourcePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// ResourceMap (list): List of resources, keyed by resource name.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "resources/resource"
//	Path from root:       "/components/component/chassis/utilization/resources/resource"
func (n *Component_Chassis_UtilizationPath) ResourceMap() *Component_Chassis_Utilization_ResourcePathMap {
	ps := &Component_Chassis_Utilization_ResourcePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"resources"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ResourceMap (list): List of resources, keyed by resource name.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "resources/resource"
//	Path from root:       "/components/component/chassis/utilization/resources/resource"
func (n *Component_Chassis_UtilizationPathAny) ResourceMap() *Component_Chassis_Utilization_ResourcePathMapAny {
	ps := &Component_Chassis_Utilization_ResourcePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"resources"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Chassis_UtilizationPath) State() ygnmi.SingletonQuery[*oc.Component_Chassis_Utilization] {
	return ygnmi.NewSingletonQuery[*oc.Component_Chassis_Utilization](
		"Component_Chassis_Utilization",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Chassis_UtilizationPathAny) State() ygnmi.WildcardQuery[*oc.Component_Chassis_Utilization] {
	return ygnmi.NewWildcardQuery[*oc.Component_Chassis_Utilization](
		"Component_Chassis_Utilization",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Chassis_UtilizationPath) Config() ygnmi.ConfigQuery[*oc.Component_Chassis_Utilization] {
	return ygnmi.NewConfigQuery[*oc.Component_Chassis_Utilization](
		"Component_Chassis_Utilization",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Chassis_UtilizationPathAny) Config() ygnmi.WildcardQuery[*oc.Component_Chassis_Utilization] {
	return ygnmi.NewWildcardQuery[*oc.Component_Chassis_Utilization](
		"Component_Chassis_Utilization",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Chassis_Utilization_Resource_CommittedPath represents the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/committed YANG schema element.
type Component_Chassis_Utilization_Resource_CommittedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Chassis_Utilization_Resource_CommittedPathAny represents the wildcard version of the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/committed YANG schema element.
type Component_Chassis_Utilization_Resource_CommittedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/committed"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/committed"
func (n *Component_Chassis_Utilization_Resource_CommittedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Chassis_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "committed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization_Resource).Committed
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/committed"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/committed"
func (n *Component_Chassis_Utilization_Resource_CommittedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Chassis_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "committed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization_Resource).Committed
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Chassis_Utilization_Resource_FreePath represents the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/free YANG schema element.
type Component_Chassis_Utilization_Resource_FreePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Chassis_Utilization_Resource_FreePathAny represents the wildcard version of the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/free YANG schema element.
type Component_Chassis_Utilization_Resource_FreePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/free"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/free"
func (n *Component_Chassis_Utilization_Resource_FreePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Chassis_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "free"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization_Resource).Free
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/free"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/free"
func (n *Component_Chassis_Utilization_Resource_FreePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Chassis_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "free"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization_Resource).Free
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Chassis_Utilization_Resource_HighWatermarkPath represents the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/high-watermark YANG schema element.
type Component_Chassis_Utilization_Resource_HighWatermarkPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Chassis_Utilization_Resource_HighWatermarkPathAny represents the wildcard version of the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/high-watermark YANG schema element.
type Component_Chassis_Utilization_Resource_HighWatermarkPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/high-watermark"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/high-watermark"
func (n *Component_Chassis_Utilization_Resource_HighWatermarkPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Chassis_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "high-watermark"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization_Resource).HighWatermark
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/high-watermark"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/high-watermark"
func (n *Component_Chassis_Utilization_Resource_HighWatermarkPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Chassis_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "high-watermark"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization_Resource).HighWatermark
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Chassis_Utilization_Resource_LastHighWatermarkPath represents the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/last-high-watermark YANG schema element.
type Component_Chassis_Utilization_Resource_LastHighWatermarkPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Chassis_Utilization_Resource_LastHighWatermarkPathAny represents the wildcard version of the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/last-high-watermark YANG schema element.
type Component_Chassis_Utilization_Resource_LastHighWatermarkPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/last-high-watermark"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/last-high-watermark"
func (n *Component_Chassis_Utilization_Resource_LastHighWatermarkPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Chassis_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-high-watermark"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization_Resource).LastHighWatermark
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/last-high-watermark"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/last-high-watermark"
func (n *Component_Chassis_Utilization_Resource_LastHighWatermarkPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Chassis_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-high-watermark"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization_Resource).LastHighWatermark
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Chassis_Utilization_Resource_MaxLimitPath represents the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/max-limit YANG schema element.
type Component_Chassis_Utilization_Resource_MaxLimitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Chassis_Utilization_Resource_MaxLimitPathAny represents the wildcard version of the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/max-limit YANG schema element.
type Component_Chassis_Utilization_Resource_MaxLimitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/max-limit"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/max-limit"
func (n *Component_Chassis_Utilization_Resource_MaxLimitPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Chassis_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization_Resource).MaxLimit
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/max-limit"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/max-limit"
func (n *Component_Chassis_Utilization_Resource_MaxLimitPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Chassis_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization_Resource).MaxLimit
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Chassis_Utilization_Resource_NamePath represents the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/name YANG schema element.
type Component_Chassis_Utilization_Resource_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Chassis_Utilization_Resource_NamePathAny represents the wildcard version of the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/name YANG schema element.
type Component_Chassis_Utilization_Resource_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/name"
func (n *Component_Chassis_Utilization_Resource_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_Chassis_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization_Resource).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/name"
func (n *Component_Chassis_Utilization_Resource_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_Chassis_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization_Resource).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/name"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/config/name"
func (n *Component_Chassis_Utilization_Resource_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Component_Chassis_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization_Resource).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/name"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/config/name"
func (n *Component_Chassis_Utilization_Resource_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_Chassis_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization_Resource).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Chassis_Utilization_Resource_UsedPath represents the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/used YANG schema element.
type Component_Chassis_Utilization_Resource_UsedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Chassis_Utilization_Resource_UsedPathAny represents the wildcard version of the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/used YANG schema element.
type Component_Chassis_Utilization_Resource_UsedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/used"
func (n *Component_Chassis_Utilization_Resource_UsedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Chassis_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization_Resource).Used
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/used"
func (n *Component_Chassis_Utilization_Resource_UsedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Chassis_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization_Resource).Used
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Chassis_Utilization_Resource_UsedThresholdUpperPath represents the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/used-threshold-upper YANG schema element.
type Component_Chassis_Utilization_Resource_UsedThresholdUpperPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Chassis_Utilization_Resource_UsedThresholdUpperPathAny represents the wildcard version of the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/used-threshold-upper YANG schema element.
type Component_Chassis_Utilization_Resource_UsedThresholdUpperPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-threshold-upper"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/used-threshold-upper"
func (n *Component_Chassis_Utilization_Resource_UsedThresholdUpperPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Component_Chassis_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization_Resource).UsedThresholdUpper
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-threshold-upper"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/used-threshold-upper"
func (n *Component_Chassis_Utilization_Resource_UsedThresholdUpperPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_Chassis_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization_Resource).UsedThresholdUpper
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/used-threshold-upper"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/config/used-threshold-upper"
func (n *Component_Chassis_Utilization_Resource_UsedThresholdUpperPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Component_Chassis_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "used-threshold-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization_Resource).UsedThresholdUpper
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/used-threshold-upper"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/config/used-threshold-upper"
func (n *Component_Chassis_Utilization_Resource_UsedThresholdUpperPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_Chassis_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "used-threshold-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization_Resource).UsedThresholdUpper
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Chassis_Utilization_Resource_UsedThresholdUpperClearPath represents the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/used-threshold-upper-clear YANG schema element.
type Component_Chassis_Utilization_Resource_UsedThresholdUpperClearPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Chassis_Utilization_Resource_UsedThresholdUpperClearPathAny represents the wildcard version of the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/used-threshold-upper-clear YANG schema element.
type Component_Chassis_Utilization_Resource_UsedThresholdUpperClearPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-threshold-upper-clear"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/used-threshold-upper-clear"
func (n *Component_Chassis_Utilization_Resource_UsedThresholdUpperClearPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Component_Chassis_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization_Resource).UsedThresholdUpperClear
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-threshold-upper-clear"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/used-threshold-upper-clear"
func (n *Component_Chassis_Utilization_Resource_UsedThresholdUpperClearPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_Chassis_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization_Resource).UsedThresholdUpperClear
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/used-threshold-upper-clear"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/config/used-threshold-upper-clear"
func (n *Component_Chassis_Utilization_Resource_UsedThresholdUpperClearPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Component_Chassis_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "used-threshold-upper-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization_Resource).UsedThresholdUpperClear
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/used-threshold-upper-clear"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/config/used-threshold-upper-clear"
func (n *Component_Chassis_Utilization_Resource_UsedThresholdUpperClearPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_Chassis_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "used-threshold-upper-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization_Resource).UsedThresholdUpperClear
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Chassis_Utilization_Resource_UsedThresholdUpperExceededPath represents the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/used-threshold-upper-exceeded YANG schema element.
type Component_Chassis_Utilization_Resource_UsedThresholdUpperExceededPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Chassis_Utilization_Resource_UsedThresholdUpperExceededPathAny represents the wildcard version of the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/used-threshold-upper-exceeded YANG schema element.
type Component_Chassis_Utilization_Resource_UsedThresholdUpperExceededPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-threshold-upper-exceeded"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/used-threshold-upper-exceeded"
func (n *Component_Chassis_Utilization_Resource_UsedThresholdUpperExceededPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component_Chassis_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper-exceeded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization_Resource).UsedThresholdUpperExceeded
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-threshold-upper-exceeded"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/used-threshold-upper-exceeded"
func (n *Component_Chassis_Utilization_Resource_UsedThresholdUpperExceededPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_Chassis_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper-exceeded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization_Resource).UsedThresholdUpperExceeded
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Chassis_Utilization_ResourcePath represents the /openconfig-platform/components/component/chassis/utilization/resources/resource YANG schema element.
type Component_Chassis_Utilization_ResourcePath struct {
	*ygnmi.NodePath
}

// Component_Chassis_Utilization_ResourcePathAny represents the wildcard version of the /openconfig-platform/components/component/chassis/utilization/resources/resource YANG schema element.
type Component_Chassis_Utilization_ResourcePathAny struct {
	*ygnmi.NodePath
}

// Component_Chassis_Utilization_ResourcePathMap represents the /openconfig-platform/components/component/chassis/utilization/resources/resource YANG schema element.
type Component_Chassis_Utilization_ResourcePathMap struct {
	*ygnmi.NodePath
}

// Component_Chassis_Utilization_ResourcePathMapAny represents the wildcard version of the /openconfig-platform/components/component/chassis/utilization/resources/resource YANG schema element.
type Component_Chassis_Utilization_ResourcePathMapAny struct {
	*ygnmi.NodePath
}

// Committed (leaf): Number of entries currently reserved for this resource. This is only
// relevant to tables which allocate a block of resource for a given
// feature.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/committed"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/committed"
func (n *Component_Chassis_Utilization_ResourcePath) Committed() *Component_Chassis_Utilization_Resource_CommittedPath {
	ps := &Component_Chassis_Utilization_Resource_CommittedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "committed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Committed (leaf): Number of entries currently reserved for this resource. This is only
// relevant to tables which allocate a block of resource for a given
// feature.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/committed"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/committed"
func (n *Component_Chassis_Utilization_ResourcePathAny) Committed() *Component_Chassis_Utilization_Resource_CommittedPathAny {
	ps := &Component_Chassis_Utilization_Resource_CommittedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "committed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Free (leaf): Number of entries available to use.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/free"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/free"
func (n *Component_Chassis_Utilization_ResourcePath) Free() *Component_Chassis_Utilization_Resource_FreePath {
	ps := &Component_Chassis_Utilization_Resource_FreePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "free"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Free (leaf): Number of entries available to use.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/free"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/free"
func (n *Component_Chassis_Utilization_ResourcePathAny) Free() *Component_Chassis_Utilization_Resource_FreePathAny {
	ps := &Component_Chassis_Utilization_Resource_FreePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "free"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HighWatermark (leaf): A watermark of highest number of entries used for this resource.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/high-watermark"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/high-watermark"
func (n *Component_Chassis_Utilization_ResourcePath) HighWatermark() *Component_Chassis_Utilization_Resource_HighWatermarkPath {
	ps := &Component_Chassis_Utilization_Resource_HighWatermarkPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "high-watermark"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HighWatermark (leaf): A watermark of highest number of entries used for this resource.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/high-watermark"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/high-watermark"
func (n *Component_Chassis_Utilization_ResourcePathAny) HighWatermark() *Component_Chassis_Utilization_Resource_HighWatermarkPathAny {
	ps := &Component_Chassis_Utilization_Resource_HighWatermarkPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "high-watermark"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastHighWatermark (leaf): The timestamp when the high-watermark was last updated. The value
// is the timestamp in nanoseconds relative to the Unix Epoch
// (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/last-high-watermark"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/last-high-watermark"
func (n *Component_Chassis_Utilization_ResourcePath) LastHighWatermark() *Component_Chassis_Utilization_Resource_LastHighWatermarkPath {
	ps := &Component_Chassis_Utilization_Resource_LastHighWatermarkPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-high-watermark"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastHighWatermark (leaf): The timestamp when the high-watermark was last updated. The value
// is the timestamp in nanoseconds relative to the Unix Epoch
// (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/last-high-watermark"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/last-high-watermark"
func (n *Component_Chassis_Utilization_ResourcePathAny) LastHighWatermark() *Component_Chassis_Utilization_Resource_LastHighWatermarkPathAny {
	ps := &Component_Chassis_Utilization_Resource_LastHighWatermarkPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-high-watermark"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxLimit (leaf): Maximum number of entries available for the resource. The value
// is the theoretical maximum resource utilization possible.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/max-limit"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/max-limit"
func (n *Component_Chassis_Utilization_ResourcePath) MaxLimit() *Component_Chassis_Utilization_Resource_MaxLimitPath {
	ps := &Component_Chassis_Utilization_Resource_MaxLimitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "max-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxLimit (leaf): Maximum number of entries available for the resource. The value
// is the theoretical maximum resource utilization possible.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/max-limit"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/max-limit"
func (n *Component_Chassis_Utilization_ResourcePathAny) MaxLimit() *Component_Chassis_Utilization_Resource_MaxLimitPathAny {
	ps := &Component_Chassis_Utilization_Resource_MaxLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "max-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Resource name within the component.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/*/name"
func (n *Component_Chassis_Utilization_ResourcePath) Name() *Component_Chassis_Utilization_Resource_NamePath {
	ps := &Component_Chassis_Utilization_Resource_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Resource name within the component.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/*/name"
func (n *Component_Chassis_Utilization_ResourcePathAny) Name() *Component_Chassis_Utilization_Resource_NamePathAny {
	ps := &Component_Chassis_Utilization_Resource_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Used (leaf): Number of entries currently in use for the resource.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/used"
func (n *Component_Chassis_Utilization_ResourcePath) Used() *Component_Chassis_Utilization_Resource_UsedPath {
	ps := &Component_Chassis_Utilization_Resource_UsedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "used"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Used (leaf): Number of entries currently in use for the resource.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/used"
func (n *Component_Chassis_Utilization_ResourcePathAny) Used() *Component_Chassis_Utilization_Resource_UsedPathAny {
	ps := &Component_Chassis_Utilization_Resource_UsedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "used"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UsedThresholdUpper (leaf): The used percentage value (used / (used + free) * 100) that
// when crossed will set utilization-threshold-exceeded to 'true'.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/used-threshold-upper"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/*/used-threshold-upper"
func (n *Component_Chassis_Utilization_ResourcePath) UsedThresholdUpper() *Component_Chassis_Utilization_Resource_UsedThresholdUpperPath {
	ps := &Component_Chassis_Utilization_Resource_UsedThresholdUpperPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "used-threshold-upper"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UsedThresholdUpper (leaf): The used percentage value (used / (used + free) * 100) that
// when crossed will set utilization-threshold-exceeded to 'true'.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/used-threshold-upper"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/*/used-threshold-upper"
func (n *Component_Chassis_Utilization_ResourcePathAny) UsedThresholdUpper() *Component_Chassis_Utilization_Resource_UsedThresholdUpperPathAny {
	ps := &Component_Chassis_Utilization_Resource_UsedThresholdUpperPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "used-threshold-upper"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UsedThresholdUpperClear (leaf): The used percentage value (used / (used + free) * 100) that when
// crossed will set utilization-threshold-exceeded to 'false'.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/used-threshold-upper-clear"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/*/used-threshold-upper-clear"
func (n *Component_Chassis_Utilization_ResourcePath) UsedThresholdUpperClear() *Component_Chassis_Utilization_Resource_UsedThresholdUpperClearPath {
	ps := &Component_Chassis_Utilization_Resource_UsedThresholdUpperClearPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "used-threshold-upper-clear"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UsedThresholdUpperClear (leaf): The used percentage value (used / (used + free) * 100) that when
// crossed will set utilization-threshold-exceeded to 'false'.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/used-threshold-upper-clear"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/*/used-threshold-upper-clear"
func (n *Component_Chassis_Utilization_ResourcePathAny) UsedThresholdUpperClear() *Component_Chassis_Utilization_Resource_UsedThresholdUpperClearPathAny {
	ps := &Component_Chassis_Utilization_Resource_UsedThresholdUpperClearPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "used-threshold-upper-clear"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UsedThresholdUpperExceeded (leaf): This value is set to true when the used percentage value
// (used / (used + free) * 100) has crossed the used-threshold-upper for this
// resource and false when the used percentage value has crossed the configured
// used-threshold-upper-clear value for this resource.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-threshold-upper-exceeded"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/used-threshold-upper-exceeded"
func (n *Component_Chassis_Utilization_ResourcePath) UsedThresholdUpperExceeded() *Component_Chassis_Utilization_Resource_UsedThresholdUpperExceededPath {
	ps := &Component_Chassis_Utilization_Resource_UsedThresholdUpperExceededPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper-exceeded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UsedThresholdUpperExceeded (leaf): This value is set to true when the used percentage value
// (used / (used + free) * 100) has crossed the used-threshold-upper for this
// resource and false when the used percentage value has crossed the configured
// used-threshold-upper-clear value for this resource.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-threshold-upper-exceeded"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/used-threshold-upper-exceeded"
func (n *Component_Chassis_Utilization_ResourcePathAny) UsedThresholdUpperExceeded() *Component_Chassis_Utilization_Resource_UsedThresholdUpperExceededPathAny {
	ps := &Component_Chassis_Utilization_Resource_UsedThresholdUpperExceededPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper-exceeded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Chassis_Utilization_ResourcePath) State() ygnmi.SingletonQuery[*oc.Component_Chassis_Utilization_Resource] {
	return ygnmi.NewSingletonQuery[*oc.Component_Chassis_Utilization_Resource](
		"Component_Chassis_Utilization_Resource",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Chassis_Utilization_ResourcePathAny) State() ygnmi.WildcardQuery[*oc.Component_Chassis_Utilization_Resource] {
	return ygnmi.NewWildcardQuery[*oc.Component_Chassis_Utilization_Resource](
		"Component_Chassis_Utilization_Resource",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Chassis_Utilization_ResourcePath) Config() ygnmi.ConfigQuery[*oc.Component_Chassis_Utilization_Resource] {
	return ygnmi.NewConfigQuery[*oc.Component_Chassis_Utilization_Resource](
		"Component_Chassis_Utilization_Resource",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Chassis_Utilization_ResourcePathAny) Config() ygnmi.WildcardQuery[*oc.Component_Chassis_Utilization_Resource] {
	return ygnmi.NewWildcardQuery[*oc.Component_Chassis_Utilization_Resource](
		"Component_Chassis_Utilization_Resource",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Chassis_Utilization_ResourcePathMap) State() ygnmi.SingletonQuery[map[string]*oc.Component_Chassis_Utilization_Resource] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Component_Chassis_Utilization_Resource](
		"Component_Chassis_Utilization",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_Chassis_Utilization_Resource, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization).Resource
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform:resources"},
			PostRelPath: []string{"openconfig-platform:resource"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Chassis_Utilization_ResourcePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Component_Chassis_Utilization_Resource] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Component_Chassis_Utilization_Resource](
		"Component_Chassis_Utilization",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_Chassis_Utilization_Resource, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization).Resource
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform:resources"},
			PostRelPath: []string{"openconfig-platform:resource"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Chassis_Utilization_ResourcePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Component_Chassis_Utilization_Resource] {
	return ygnmi.NewConfigQuery[map[string]*oc.Component_Chassis_Utilization_Resource](
		"Component_Chassis_Utilization",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_Chassis_Utilization_Resource, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization).Resource
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform:resources"},
			PostRelPath: []string{"openconfig-platform:resource"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Chassis_Utilization_ResourcePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Component_Chassis_Utilization_Resource] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Component_Chassis_Utilization_Resource](
		"Component_Chassis_Utilization",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_Chassis_Utilization_Resource, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization).Resource
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform:resources"},
			PostRelPath: []string{"openconfig-platform:resource"},
		},
	)
}

// Component_ControllerCard_PowerAdminStatePath represents the /openconfig-platform/components/component/controller-card/state/power-admin-state YANG schema element.
type Component_ControllerCard_PowerAdminStatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_ControllerCard_PowerAdminStatePathAny represents the wildcard version of the /openconfig-platform/components/component/controller-card/state/power-admin-state YANG schema element.
type Component_ControllerCard_PowerAdminStatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-controller-card"
//	Path from parent:     "state/power-admin-state"
//	Path from root:       "/components/component/controller-card/state/power-admin-state"
func (n *Component_ControllerCard_PowerAdminStatePath) State() ygnmi.SingletonQuery[oc.E_Platform_ComponentPowerType] {
	return ygnmi.NewSingletonQuery[oc.E_Platform_ComponentPowerType](
		"Component_ControllerCard",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "power-admin-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Platform_ComponentPowerType, bool) {
			ret := gs.(*oc.Component_ControllerCard).PowerAdminState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_ControllerCard) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-controller-card"
//	Path from parent:     "state/power-admin-state"
//	Path from root:       "/components/component/controller-card/state/power-admin-state"
func (n *Component_ControllerCard_PowerAdminStatePathAny) State() ygnmi.WildcardQuery[oc.E_Platform_ComponentPowerType] {
	return ygnmi.NewWildcardQuery[oc.E_Platform_ComponentPowerType](
		"Component_ControllerCard",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "power-admin-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Platform_ComponentPowerType, bool) {
			ret := gs.(*oc.Component_ControllerCard).PowerAdminState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_ControllerCard) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-controller-card"
//	Path from parent:     "config/power-admin-state"
//	Path from root:       "/components/component/controller-card/config/power-admin-state"
func (n *Component_ControllerCard_PowerAdminStatePath) Config() ygnmi.ConfigQuery[oc.E_Platform_ComponentPowerType] {
	return ygnmi.NewConfigQuery[oc.E_Platform_ComponentPowerType](
		"Component_ControllerCard",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "power-admin-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Platform_ComponentPowerType, bool) {
			ret := gs.(*oc.Component_ControllerCard).PowerAdminState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_ControllerCard) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-controller-card"
//	Path from parent:     "config/power-admin-state"
//	Path from root:       "/components/component/controller-card/config/power-admin-state"
func (n *Component_ControllerCard_PowerAdminStatePathAny) Config() ygnmi.WildcardQuery[oc.E_Platform_ComponentPowerType] {
	return ygnmi.NewWildcardQuery[oc.E_Platform_ComponentPowerType](
		"Component_ControllerCard",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "power-admin-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Platform_ComponentPowerType, bool) {
			ret := gs.(*oc.Component_ControllerCard).PowerAdminState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_ControllerCard) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_ControllerCardPath represents the /openconfig-platform/components/component/controller-card YANG schema element.
type Component_ControllerCardPath struct {
	*ygnmi.NodePath
}

// Component_ControllerCardPathAny represents the wildcard version of the /openconfig-platform/components/component/controller-card YANG schema element.
type Component_ControllerCardPathAny struct {
	*ygnmi.NodePath
}

// PowerAdminState (leaf): When set to POWER_DISABLED, the component should be shut down by removing
// electrical power.  This is intended to be used to prevent the component
// from becoming active even after a reboot of the system. A component
// (if controller-card) may not honor power-admin-state depending on rules
// defined in the description of the component config container.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/power-admin-state"
//	Path from root:       "/components/component/controller-card/*/power-admin-state"
func (n *Component_ControllerCardPath) PowerAdminState() *Component_ControllerCard_PowerAdminStatePath {
	ps := &Component_ControllerCard_PowerAdminStatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "power-admin-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PowerAdminState (leaf): When set to POWER_DISABLED, the component should be shut down by removing
// electrical power.  This is intended to be used to prevent the component
// from becoming active even after a reboot of the system. A component
// (if controller-card) may not honor power-admin-state depending on rules
// defined in the description of the component config container.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/power-admin-state"
//	Path from root:       "/components/component/controller-card/*/power-admin-state"
func (n *Component_ControllerCardPathAny) PowerAdminState() *Component_ControllerCard_PowerAdminStatePathAny {
	ps := &Component_ControllerCard_PowerAdminStatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "power-admin-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_ControllerCardPath) State() ygnmi.SingletonQuery[*oc.Component_ControllerCard] {
	return ygnmi.NewSingletonQuery[*oc.Component_ControllerCard](
		"Component_ControllerCard",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_ControllerCardPathAny) State() ygnmi.WildcardQuery[*oc.Component_ControllerCard] {
	return ygnmi.NewWildcardQuery[*oc.Component_ControllerCard](
		"Component_ControllerCard",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_ControllerCardPath) Config() ygnmi.ConfigQuery[*oc.Component_ControllerCard] {
	return ygnmi.NewConfigQuery[*oc.Component_ControllerCard](
		"Component_ControllerCard",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_ControllerCardPathAny) Config() ygnmi.WildcardQuery[*oc.Component_ControllerCard] {
	return ygnmi.NewWildcardQuery[*oc.Component_ControllerCard](
		"Component_ControllerCard",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_CpuPath represents the /openconfig-platform/components/component/cpu YANG schema element.
type Component_CpuPath struct {
	*ygnmi.NodePath
}

// Component_CpuPathAny represents the wildcard version of the /openconfig-platform/components/component/cpu YANG schema element.
type Component_CpuPathAny struct {
	*ygnmi.NodePath
}

// Utilization (container): Statistics representing CPU utilization of the
// component.
//
//	Defining module:      "openconfig-platform-cpu"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "utilization"
//	Path from root:       "/components/component/cpu/utilization"
func (n *Component_CpuPath) Utilization() *Component_Cpu_UtilizationPath {
	ps := &Component_Cpu_UtilizationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"utilization"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Utilization (container): Statistics representing CPU utilization of the
// component.
//
//	Defining module:      "openconfig-platform-cpu"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "utilization"
//	Path from root:       "/components/component/cpu/utilization"
func (n *Component_CpuPathAny) Utilization() *Component_Cpu_UtilizationPathAny {
	ps := &Component_Cpu_UtilizationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"utilization"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_CpuPath) State() ygnmi.SingletonQuery[*oc.Component_Cpu] {
	return ygnmi.NewSingletonQuery[*oc.Component_Cpu](
		"Component_Cpu",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_CpuPathAny) State() ygnmi.WildcardQuery[*oc.Component_Cpu] {
	return ygnmi.NewWildcardQuery[*oc.Component_Cpu](
		"Component_Cpu",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_CpuPath) Config() ygnmi.ConfigQuery[*oc.Component_Cpu] {
	return ygnmi.NewConfigQuery[*oc.Component_Cpu](
		"Component_Cpu",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_CpuPathAny) Config() ygnmi.WildcardQuery[*oc.Component_Cpu] {
	return ygnmi.NewWildcardQuery[*oc.Component_Cpu](
		"Component_Cpu",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Cpu_Utilization_AvgPath represents the /openconfig-platform/components/component/cpu/utilization/state/avg YANG schema element.
type Component_Cpu_Utilization_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Cpu_Utilization_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/cpu/utilization/state/avg YANG schema element.
type Component_Cpu_Utilization_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-cpu"
//	Path from parent:     "state/avg"
//	Path from root:       "/components/component/cpu/utilization/state/avg"
func (n *Component_Cpu_Utilization_AvgPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Component_Cpu_Utilization",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Cpu_Utilization).Avg
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Cpu_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-cpu"
//	Path from parent:     "state/avg"
//	Path from root:       "/components/component/cpu/utilization/state/avg"
func (n *Component_Cpu_Utilization_AvgPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_Cpu_Utilization",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Cpu_Utilization).Avg
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Cpu_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Cpu_Utilization_InstantPath represents the /openconfig-platform/components/component/cpu/utilization/state/instant YANG schema element.
type Component_Cpu_Utilization_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Cpu_Utilization_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/cpu/utilization/state/instant YANG schema element.
type Component_Cpu_Utilization_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-cpu"
//	Path from parent:     "state/instant"
//	Path from root:       "/components/component/cpu/utilization/state/instant"
func (n *Component_Cpu_Utilization_InstantPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Component_Cpu_Utilization",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Cpu_Utilization).Instant
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Cpu_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-cpu"
//	Path from parent:     "state/instant"
//	Path from root:       "/components/component/cpu/utilization/state/instant"
func (n *Component_Cpu_Utilization_InstantPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_Cpu_Utilization",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Cpu_Utilization).Instant
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Cpu_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Cpu_Utilization_IntervalPath represents the /openconfig-platform/components/component/cpu/utilization/state/interval YANG schema element.
type Component_Cpu_Utilization_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Cpu_Utilization_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/cpu/utilization/state/interval YANG schema element.
type Component_Cpu_Utilization_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-cpu"
//	Path from parent:     "state/interval"
//	Path from root:       "/components/component/cpu/utilization/state/interval"
func (n *Component_Cpu_Utilization_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Cpu_Utilization",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Cpu_Utilization).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Cpu_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-cpu"
//	Path from parent:     "state/interval"
//	Path from root:       "/components/component/cpu/utilization/state/interval"
func (n *Component_Cpu_Utilization_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Cpu_Utilization",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Cpu_Utilization).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Cpu_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Cpu_Utilization_MaxPath represents the /openconfig-platform/components/component/cpu/utilization/state/max YANG schema element.
type Component_Cpu_Utilization_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Cpu_Utilization_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/cpu/utilization/state/max YANG schema element.
type Component_Cpu_Utilization_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-cpu"
//	Path from parent:     "state/max"
//	Path from root:       "/components/component/cpu/utilization/state/max"
func (n *Component_Cpu_Utilization_MaxPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Component_Cpu_Utilization",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Cpu_Utilization).Max
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Cpu_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-cpu"
//	Path from parent:     "state/max"
//	Path from root:       "/components/component/cpu/utilization/state/max"
func (n *Component_Cpu_Utilization_MaxPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_Cpu_Utilization",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Cpu_Utilization).Max
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Cpu_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Cpu_Utilization_MaxTimePath represents the /openconfig-platform/components/component/cpu/utilization/state/max-time YANG schema element.
type Component_Cpu_Utilization_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Cpu_Utilization_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/cpu/utilization/state/max-time YANG schema element.
type Component_Cpu_Utilization_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-cpu"
//	Path from parent:     "state/max-time"
//	Path from root:       "/components/component/cpu/utilization/state/max-time"
func (n *Component_Cpu_Utilization_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Cpu_Utilization",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Cpu_Utilization).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Cpu_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-cpu"
//	Path from parent:     "state/max-time"
//	Path from root:       "/components/component/cpu/utilization/state/max-time"
func (n *Component_Cpu_Utilization_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Cpu_Utilization",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Cpu_Utilization).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Cpu_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Cpu_Utilization_MinPath represents the /openconfig-platform/components/component/cpu/utilization/state/min YANG schema element.
type Component_Cpu_Utilization_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Cpu_Utilization_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/cpu/utilization/state/min YANG schema element.
type Component_Cpu_Utilization_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-cpu"
//	Path from parent:     "state/min"
//	Path from root:       "/components/component/cpu/utilization/state/min"
func (n *Component_Cpu_Utilization_MinPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Component_Cpu_Utilization",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Cpu_Utilization).Min
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Cpu_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-cpu"
//	Path from parent:     "state/min"
//	Path from root:       "/components/component/cpu/utilization/state/min"
func (n *Component_Cpu_Utilization_MinPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_Cpu_Utilization",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Cpu_Utilization).Min
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Cpu_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Cpu_Utilization_MinTimePath represents the /openconfig-platform/components/component/cpu/utilization/state/min-time YANG schema element.
type Component_Cpu_Utilization_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Cpu_Utilization_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/cpu/utilization/state/min-time YANG schema element.
type Component_Cpu_Utilization_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-cpu"
//	Path from parent:     "state/min-time"
//	Path from root:       "/components/component/cpu/utilization/state/min-time"
func (n *Component_Cpu_Utilization_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Cpu_Utilization",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Cpu_Utilization).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Cpu_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-cpu"
//	Path from parent:     "state/min-time"
//	Path from root:       "/components/component/cpu/utilization/state/min-time"
func (n *Component_Cpu_Utilization_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Cpu_Utilization",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Cpu_Utilization).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Cpu_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Cpu_UtilizationPath represents the /openconfig-platform/components/component/cpu/utilization YANG schema element.
type Component_Cpu_UtilizationPath struct {
	*ygnmi.NodePath
}

// Component_Cpu_UtilizationPathAny represents the wildcard version of the /openconfig-platform/components/component/cpu/utilization YANG schema element.
type Component_Cpu_UtilizationPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/avg"
//	Path from root:       "/components/component/cpu/utilization/state/avg"
func (n *Component_Cpu_UtilizationPath) Avg() *Component_Cpu_Utilization_AvgPath {
	ps := &Component_Cpu_Utilization_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/avg"
//	Path from root:       "/components/component/cpu/utilization/state/avg"
func (n *Component_Cpu_UtilizationPathAny) Avg() *Component_Cpu_Utilization_AvgPathAny {
	ps := &Component_Cpu_Utilization_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous percentage value.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/instant"
//	Path from root:       "/components/component/cpu/utilization/state/instant"
func (n *Component_Cpu_UtilizationPath) Instant() *Component_Cpu_Utilization_InstantPath {
	ps := &Component_Cpu_Utilization_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous percentage value.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/instant"
//	Path from root:       "/components/component/cpu/utilization/state/instant"
func (n *Component_Cpu_UtilizationPathAny) Instant() *Component_Cpu_Utilization_InstantPathAny {
	ps := &Component_Cpu_Utilization_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/interval"
//	Path from root:       "/components/component/cpu/utilization/state/interval"
func (n *Component_Cpu_UtilizationPath) Interval() *Component_Cpu_Utilization_IntervalPath {
	ps := &Component_Cpu_Utilization_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/interval"
//	Path from root:       "/components/component/cpu/utilization/state/interval"
func (n *Component_Cpu_UtilizationPathAny) Interval() *Component_Cpu_Utilization_IntervalPathAny {
	ps := &Component_Cpu_Utilization_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/max"
//	Path from root:       "/components/component/cpu/utilization/state/max"
func (n *Component_Cpu_UtilizationPath) Max() *Component_Cpu_Utilization_MaxPath {
	ps := &Component_Cpu_Utilization_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/max"
//	Path from root:       "/components/component/cpu/utilization/state/max"
func (n *Component_Cpu_UtilizationPathAny) Max() *Component_Cpu_Utilization_MaxPathAny {
	ps := &Component_Cpu_Utilization_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "state/max-time"
//		Path from root:       "/components/component/cpu/utilization/state/max-time"
func (n *Component_Cpu_UtilizationPath) MaxTime() *Component_Cpu_Utilization_MaxTimePath {
	ps := &Component_Cpu_Utilization_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "state/max-time"
//		Path from root:       "/components/component/cpu/utilization/state/max-time"
func (n *Component_Cpu_UtilizationPathAny) MaxTime() *Component_Cpu_Utilization_MaxTimePathAny {
	ps := &Component_Cpu_Utilization_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/min"
//	Path from root:       "/components/component/cpu/utilization/state/min"
func (n *Component_Cpu_UtilizationPath) Min() *Component_Cpu_Utilization_MinPath {
	ps := &Component_Cpu_Utilization_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/min"
//	Path from root:       "/components/component/cpu/utilization/state/min"
func (n *Component_Cpu_UtilizationPathAny) Min() *Component_Cpu_Utilization_MinPathAny {
	ps := &Component_Cpu_Utilization_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "state/min-time"
//		Path from root:       "/components/component/cpu/utilization/state/min-time"
func (n *Component_Cpu_UtilizationPath) MinTime() *Component_Cpu_Utilization_MinTimePath {
	ps := &Component_Cpu_Utilization_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "state/min-time"
//		Path from root:       "/components/component/cpu/utilization/state/min-time"
func (n *Component_Cpu_UtilizationPathAny) MinTime() *Component_Cpu_Utilization_MinTimePathAny {
	ps := &Component_Cpu_Utilization_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Cpu_UtilizationPath) State() ygnmi.SingletonQuery[*oc.Component_Cpu_Utilization] {
	return ygnmi.NewSingletonQuery[*oc.Component_Cpu_Utilization](
		"Component_Cpu_Utilization",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Cpu_UtilizationPathAny) State() ygnmi.WildcardQuery[*oc.Component_Cpu_Utilization] {
	return ygnmi.NewWildcardQuery[*oc.Component_Cpu_Utilization](
		"Component_Cpu_Utilization",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Cpu_UtilizationPath) Config() ygnmi.ConfigQuery[*oc.Component_Cpu_Utilization] {
	return ygnmi.NewConfigQuery[*oc.Component_Cpu_Utilization](
		"Component_Cpu_Utilization",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Cpu_UtilizationPathAny) Config() ygnmi.WildcardQuery[*oc.Component_Cpu_Utilization] {
	return ygnmi.NewWildcardQuery[*oc.Component_Cpu_Utilization](
		"Component_Cpu_Utilization",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Fabric_PowerAdminStatePath represents the /openconfig-platform/components/component/fabric/state/power-admin-state YANG schema element.
type Component_Fabric_PowerAdminStatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Fabric_PowerAdminStatePathAny represents the wildcard version of the /openconfig-platform/components/component/fabric/state/power-admin-state YANG schema element.
type Component_Fabric_PowerAdminStatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-fabric"
//	Path from parent:     "state/power-admin-state"
//	Path from root:       "/components/component/fabric/state/power-admin-state"
func (n *Component_Fabric_PowerAdminStatePath) State() ygnmi.SingletonQuery[oc.E_Platform_ComponentPowerType] {
	return ygnmi.NewSingletonQuery[oc.E_Platform_ComponentPowerType](
		"Component_Fabric",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "power-admin-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Platform_ComponentPowerType, bool) {
			ret := gs.(*oc.Component_Fabric).PowerAdminState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Fabric) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-fabric"
//	Path from parent:     "state/power-admin-state"
//	Path from root:       "/components/component/fabric/state/power-admin-state"
func (n *Component_Fabric_PowerAdminStatePathAny) State() ygnmi.WildcardQuery[oc.E_Platform_ComponentPowerType] {
	return ygnmi.NewWildcardQuery[oc.E_Platform_ComponentPowerType](
		"Component_Fabric",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "power-admin-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Platform_ComponentPowerType, bool) {
			ret := gs.(*oc.Component_Fabric).PowerAdminState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Fabric) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-fabric"
//	Path from parent:     "config/power-admin-state"
//	Path from root:       "/components/component/fabric/config/power-admin-state"
func (n *Component_Fabric_PowerAdminStatePath) Config() ygnmi.ConfigQuery[oc.E_Platform_ComponentPowerType] {
	return ygnmi.NewConfigQuery[oc.E_Platform_ComponentPowerType](
		"Component_Fabric",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "power-admin-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Platform_ComponentPowerType, bool) {
			ret := gs.(*oc.Component_Fabric).PowerAdminState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Fabric) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-fabric"
//	Path from parent:     "config/power-admin-state"
//	Path from root:       "/components/component/fabric/config/power-admin-state"
func (n *Component_Fabric_PowerAdminStatePathAny) Config() ygnmi.WildcardQuery[oc.E_Platform_ComponentPowerType] {
	return ygnmi.NewWildcardQuery[oc.E_Platform_ComponentPowerType](
		"Component_Fabric",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "power-admin-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Platform_ComponentPowerType, bool) {
			ret := gs.(*oc.Component_Fabric).PowerAdminState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Fabric) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_FabricPath represents the /openconfig-platform/components/component/fabric YANG schema element.
type Component_FabricPath struct {
	*ygnmi.NodePath
}

// Component_FabricPathAny represents the wildcard version of the /openconfig-platform/components/component/fabric YANG schema element.
type Component_FabricPathAny struct {
	*ygnmi.NodePath
}

// PowerAdminState (leaf): When set to POWER_DISABLED, the component should be shut down by removing
// electrical power.  This is intended to be used to prevent the component
// from becoming active even after a reboot of the system. A component
// (if controller-card) may not honor power-admin-state depending on rules
// defined in the description of the component config container.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/power-admin-state"
//	Path from root:       "/components/component/fabric/*/power-admin-state"
func (n *Component_FabricPath) PowerAdminState() *Component_Fabric_PowerAdminStatePath {
	ps := &Component_Fabric_PowerAdminStatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "power-admin-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PowerAdminState (leaf): When set to POWER_DISABLED, the component should be shut down by removing
// electrical power.  This is intended to be used to prevent the component
// from becoming active even after a reboot of the system. A component
// (if controller-card) may not honor power-admin-state depending on rules
// defined in the description of the component config container.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/power-admin-state"
//	Path from root:       "/components/component/fabric/*/power-admin-state"
func (n *Component_FabricPathAny) PowerAdminState() *Component_Fabric_PowerAdminStatePathAny {
	ps := &Component_Fabric_PowerAdminStatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "power-admin-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_FabricPath) State() ygnmi.SingletonQuery[*oc.Component_Fabric] {
	return ygnmi.NewSingletonQuery[*oc.Component_Fabric](
		"Component_Fabric",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_FabricPathAny) State() ygnmi.WildcardQuery[*oc.Component_Fabric] {
	return ygnmi.NewWildcardQuery[*oc.Component_Fabric](
		"Component_Fabric",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_FabricPath) Config() ygnmi.ConfigQuery[*oc.Component_Fabric] {
	return ygnmi.NewConfigQuery[*oc.Component_Fabric](
		"Component_Fabric",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_FabricPathAny) Config() ygnmi.WildcardQuery[*oc.Component_Fabric] {
	return ygnmi.NewWildcardQuery[*oc.Component_Fabric](
		"Component_Fabric",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Fan_SpeedPath represents the /openconfig-platform/components/component/fan/state/speed YANG schema element.
type Component_Fan_SpeedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Fan_SpeedPathAny represents the wildcard version of the /openconfig-platform/components/component/fan/state/speed YANG schema element.
type Component_Fan_SpeedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-fan"
//	Instantiating module: "openconfig-platform-fan"
//	Path from parent:     "state/speed"
//	Path from root:       "/components/component/fan/state/speed"
func (n *Component_Fan_SpeedPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Component_Fan",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "speed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Component_Fan).Speed
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Fan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-fan"
//	Instantiating module: "openconfig-platform-fan"
//	Path from parent:     "state/speed"
//	Path from root:       "/components/component/fan/state/speed"
func (n *Component_Fan_SpeedPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Component_Fan",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "speed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Component_Fan).Speed
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Fan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_FanPath represents the /openconfig-platform/components/component/fan YANG schema element.
type Component_FanPath struct {
	*ygnmi.NodePath
}

// Component_FanPathAny represents the wildcard version of the /openconfig-platform/components/component/fan YANG schema element.
type Component_FanPathAny struct {
	*ygnmi.NodePath
}

// Speed (leaf): Current (instantaneous) fan speed
//
//	Defining module:      "openconfig-platform-fan"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/speed"
//	Path from root:       "/components/component/fan/state/speed"
func (n *Component_FanPath) Speed() *Component_Fan_SpeedPath {
	ps := &Component_Fan_SpeedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "speed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Speed (leaf): Current (instantaneous) fan speed
//
//	Defining module:      "openconfig-platform-fan"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/speed"
//	Path from root:       "/components/component/fan/state/speed"
func (n *Component_FanPathAny) Speed() *Component_Fan_SpeedPathAny {
	ps := &Component_Fan_SpeedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "speed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_FanPath) State() ygnmi.SingletonQuery[*oc.Component_Fan] {
	return ygnmi.NewSingletonQuery[*oc.Component_Fan](
		"Component_Fan",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_FanPathAny) State() ygnmi.WildcardQuery[*oc.Component_Fan] {
	return ygnmi.NewWildcardQuery[*oc.Component_Fan](
		"Component_Fan",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_FanPath) Config() ygnmi.ConfigQuery[*oc.Component_Fan] {
	return ygnmi.NewConfigQuery[*oc.Component_Fan](
		"Component_Fan",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_FanPathAny) Config() ygnmi.WildcardQuery[*oc.Component_Fan] {
	return ygnmi.NewWildcardQuery[*oc.Component_Fan](
		"Component_Fan",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_NodeIdPath represents the /openconfig-platform/components/component/integrated-circuit/state/node-id YANG schema element.
type Component_IntegratedCircuit_NodeIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_NodeIdPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/state/node-id YANG schema element.
type Component_IntegratedCircuit_NodeIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-p4rt"
//	Instantiating module: "openconfig-p4rt"
//	Path from parent:     "state/node-id"
//	Path from root:       "/components/component/integrated-circuit/state/node-id"
func (n *Component_IntegratedCircuit_NodeIdPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "node-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit).NodeId
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-p4rt"
//	Instantiating module: "openconfig-p4rt"
//	Path from parent:     "state/node-id"
//	Path from root:       "/components/component/integrated-circuit/state/node-id"
func (n *Component_IntegratedCircuit_NodeIdPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "node-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit).NodeId
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-p4rt"
//	Instantiating module: "openconfig-p4rt"
//	Path from parent:     "config/node-id"
//	Path from root:       "/components/component/integrated-circuit/config/node-id"
func (n *Component_IntegratedCircuit_NodeIdPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"Component_IntegratedCircuit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "node-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit).NodeId
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-p4rt"
//	Instantiating module: "openconfig-p4rt"
//	Path from parent:     "config/node-id"
//	Path from root:       "/components/component/integrated-circuit/config/node-id"
func (n *Component_IntegratedCircuit_NodeIdPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "node-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit).NodeId
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuitPath represents the /openconfig-platform/components/component/integrated-circuit YANG schema element.
type Component_IntegratedCircuitPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuitPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit YANG schema element.
type Component_IntegratedCircuitPathAny struct {
	*ygnmi.NodePath
}

// BackplaneFacingCapacity (container): This container allows a particular INTEGRATED_CIRCUIT to report its
// available backplane-facing bandwidth. Where an integrated circuit is connected
// by one or more links to the system's backplane, the capacity is the total cross-
// sectional bandwidth available from the input ports of the integrated circuit
// across the fabric. The capacity should also reflect the operational status of
// the links.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "backplane-facing-capacity"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity"
func (n *Component_IntegratedCircuitPath) BackplaneFacingCapacity() *Component_IntegratedCircuit_BackplaneFacingCapacityPath {
	ps := &Component_IntegratedCircuit_BackplaneFacingCapacityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"backplane-facing-capacity"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// BackplaneFacingCapacity (container): This container allows a particular INTEGRATED_CIRCUIT to report its
// available backplane-facing bandwidth. Where an integrated circuit is connected
// by one or more links to the system's backplane, the capacity is the total cross-
// sectional bandwidth available from the input ports of the integrated circuit
// across the fabric. The capacity should also reflect the operational status of
// the links.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "backplane-facing-capacity"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity"
func (n *Component_IntegratedCircuitPathAny) BackplaneFacingCapacity() *Component_IntegratedCircuit_BackplaneFacingCapacityPathAny {
	ps := &Component_IntegratedCircuit_BackplaneFacingCapacityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"backplane-facing-capacity"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Memory (container): Container for integrated circuit memory.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "memory"
//	Path from root:       "/components/component/integrated-circuit/memory"
func (n *Component_IntegratedCircuitPath) Memory() *Component_IntegratedCircuit_MemoryPath {
	ps := &Component_IntegratedCircuit_MemoryPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"memory"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Memory (container): Container for integrated circuit memory.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "memory"
//	Path from root:       "/components/component/integrated-circuit/memory"
func (n *Component_IntegratedCircuitPathAny) Memory() *Component_IntegratedCircuit_MemoryPathAny {
	ps := &Component_IntegratedCircuit_MemoryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"memory"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NodeId (leaf): The numeric ID (device_id) used by the controller to address
// the integrated circuit, which may be referred to as a 'device',
// 'node' or 'target' by the P4RT specification.
//
// Each switching ASIC (i.e., node) is addressed by the external
// entity based on its numeric identifier.
//
// The node ID is specified in addition to the string identifier
// assigned to the integrated circuit within the
// /components/component list.
//
//	Defining module:      "openconfig-p4rt"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/node-id"
//	Path from root:       "/components/component/integrated-circuit/*/node-id"
func (n *Component_IntegratedCircuitPath) NodeId() *Component_IntegratedCircuit_NodeIdPath {
	ps := &Component_IntegratedCircuit_NodeIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "node-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NodeId (leaf): The numeric ID (device_id) used by the controller to address
// the integrated circuit, which may be referred to as a 'device',
// 'node' or 'target' by the P4RT specification.
//
// Each switching ASIC (i.e., node) is addressed by the external
// entity based on its numeric identifier.
//
// The node ID is specified in addition to the string identifier
// assigned to the integrated circuit within the
// /components/component list.
//
//	Defining module:      "openconfig-p4rt"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/node-id"
//	Path from root:       "/components/component/integrated-circuit/*/node-id"
func (n *Component_IntegratedCircuitPathAny) NodeId() *Component_IntegratedCircuit_NodeIdPathAny {
	ps := &Component_IntegratedCircuit_NodeIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "node-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PipelineCounters (container): Top-level container for the packet, drop, and error counters for the
// five NPU sub-blocks.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "pipeline-counters"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters"
func (n *Component_IntegratedCircuitPath) PipelineCounters() *Component_IntegratedCircuit_PipelineCountersPath {
	ps := &Component_IntegratedCircuit_PipelineCountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"pipeline-counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PipelineCounters (container): Top-level container for the packet, drop, and error counters for the
// five NPU sub-blocks.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "pipeline-counters"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters"
func (n *Component_IntegratedCircuitPathAny) PipelineCounters() *Component_IntegratedCircuit_PipelineCountersPathAny {
	ps := &Component_IntegratedCircuit_PipelineCountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"pipeline-counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Utilization (container): Resource utilization of the component.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "utilization"
//	Path from root:       "/components/component/integrated-circuit/utilization"
func (n *Component_IntegratedCircuitPath) Utilization() *Component_IntegratedCircuit_UtilizationPath {
	ps := &Component_IntegratedCircuit_UtilizationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"utilization"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Utilization (container): Resource utilization of the component.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "utilization"
//	Path from root:       "/components/component/integrated-circuit/utilization"
func (n *Component_IntegratedCircuitPathAny) Utilization() *Component_IntegratedCircuit_UtilizationPathAny {
	ps := &Component_IntegratedCircuit_UtilizationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"utilization"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuitPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit](
		"Component_IntegratedCircuit",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuitPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit](
		"Component_IntegratedCircuit",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuitPath) Config() ygnmi.ConfigQuery[*oc.Component_IntegratedCircuit] {
	return ygnmi.NewConfigQuery[*oc.Component_IntegratedCircuit](
		"Component_IntegratedCircuit",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuitPathAny) Config() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit](
		"Component_IntegratedCircuit",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_BackplaneFacingCapacity_AvailablePctPath represents the /openconfig-platform/components/component/integrated-circuit/backplane-facing-capacity/state/available-pct YANG schema element.
type Component_IntegratedCircuit_BackplaneFacingCapacity_AvailablePctPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_BackplaneFacingCapacity_AvailablePctPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/backplane-facing-capacity/state/available-pct YANG schema element.
type Component_IntegratedCircuit_BackplaneFacingCapacity_AvailablePctPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform-integrated-circuit"
//	Path from parent:     "state/available-pct"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/available-pct"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacity_AvailablePctPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Component_IntegratedCircuit_BackplaneFacingCapacity",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "available-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_BackplaneFacingCapacity).AvailablePct
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_BackplaneFacingCapacity) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform-integrated-circuit"
//	Path from parent:     "state/available-pct"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/available-pct"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacity_AvailablePctPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Component_IntegratedCircuit_BackplaneFacingCapacity",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "available-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_BackplaneFacingCapacity).AvailablePct
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_BackplaneFacingCapacity) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_BackplaneFacingCapacity_ConsumedCapacityPath represents the /openconfig-platform/components/component/integrated-circuit/backplane-facing-capacity/state/consumed-capacity YANG schema element.
type Component_IntegratedCircuit_BackplaneFacingCapacity_ConsumedCapacityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_BackplaneFacingCapacity_ConsumedCapacityPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/backplane-facing-capacity/state/consumed-capacity YANG schema element.
type Component_IntegratedCircuit_BackplaneFacingCapacity_ConsumedCapacityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform-integrated-circuit"
//	Path from parent:     "state/consumed-capacity"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/consumed-capacity"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacity_ConsumedCapacityPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_BackplaneFacingCapacity",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "consumed-capacity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_BackplaneFacingCapacity).ConsumedCapacity
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_BackplaneFacingCapacity) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform-integrated-circuit"
//	Path from parent:     "state/consumed-capacity"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/consumed-capacity"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacity_ConsumedCapacityPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_BackplaneFacingCapacity",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "consumed-capacity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_BackplaneFacingCapacity).ConsumedCapacity
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_BackplaneFacingCapacity) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_BackplaneFacingCapacity_TotalPath represents the /openconfig-platform/components/component/integrated-circuit/backplane-facing-capacity/state/total YANG schema element.
type Component_IntegratedCircuit_BackplaneFacingCapacity_TotalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_BackplaneFacingCapacity_TotalPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/backplane-facing-capacity/state/total YANG schema element.
type Component_IntegratedCircuit_BackplaneFacingCapacity_TotalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform-integrated-circuit"
//	Path from parent:     "state/total"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/total"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacity_TotalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_BackplaneFacingCapacity",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "total"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_BackplaneFacingCapacity).Total
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_BackplaneFacingCapacity) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform-integrated-circuit"
//	Path from parent:     "state/total"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/total"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacity_TotalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_BackplaneFacingCapacity",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "total"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_BackplaneFacingCapacity).Total
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_BackplaneFacingCapacity) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_BackplaneFacingCapacity_TotalOperationalCapacityPath represents the /openconfig-platform/components/component/integrated-circuit/backplane-facing-capacity/state/total-operational-capacity YANG schema element.
type Component_IntegratedCircuit_BackplaneFacingCapacity_TotalOperationalCapacityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_BackplaneFacingCapacity_TotalOperationalCapacityPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/backplane-facing-capacity/state/total-operational-capacity YANG schema element.
type Component_IntegratedCircuit_BackplaneFacingCapacity_TotalOperationalCapacityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform-integrated-circuit"
//	Path from parent:     "state/total-operational-capacity"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/total-operational-capacity"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacity_TotalOperationalCapacityPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_BackplaneFacingCapacity",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "total-operational-capacity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_BackplaneFacingCapacity).TotalOperationalCapacity
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_BackplaneFacingCapacity) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform-integrated-circuit"
//	Path from parent:     "state/total-operational-capacity"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/total-operational-capacity"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacity_TotalOperationalCapacityPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_BackplaneFacingCapacity",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "total-operational-capacity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_BackplaneFacingCapacity).TotalOperationalCapacity
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_BackplaneFacingCapacity) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_BackplaneFacingCapacityPath represents the /openconfig-platform/components/component/integrated-circuit/backplane-facing-capacity YANG schema element.
type Component_IntegratedCircuit_BackplaneFacingCapacityPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_BackplaneFacingCapacityPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/backplane-facing-capacity YANG schema element.
type Component_IntegratedCircuit_BackplaneFacingCapacityPathAny struct {
	*ygnmi.NodePath
}

// AvailablePct (leaf): Percentage of the total backplane-facing capacity that is currently available to the front
// panel ports taking into account failures and/or degradation within the system.
//
// In the case that there is more backplane-facing capacity available than the front-panel
// ports consume, this value may be greater than 100%.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/available-pct"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/available-pct"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacityPath) AvailablePct() *Component_IntegratedCircuit_BackplaneFacingCapacity_AvailablePctPath {
	ps := &Component_IntegratedCircuit_BackplaneFacingCapacity_AvailablePctPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "available-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AvailablePct (leaf): Percentage of the total backplane-facing capacity that is currently available to the front
// panel ports taking into account failures and/or degradation within the system.
//
// In the case that there is more backplane-facing capacity available than the front-panel
// ports consume, this value may be greater than 100%.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/available-pct"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/available-pct"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacityPathAny) AvailablePct() *Component_IntegratedCircuit_BackplaneFacingCapacity_AvailablePctPathAny {
	ps := &Component_IntegratedCircuit_BackplaneFacingCapacity_AvailablePctPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "available-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConsumedCapacity (leaf): Backplane-facing capacity that is consumed by front-panel ports that are connected
// to the integrated circuit and are operationally up.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/consumed-capacity"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/consumed-capacity"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacityPath) ConsumedCapacity() *Component_IntegratedCircuit_BackplaneFacingCapacity_ConsumedCapacityPath {
	ps := &Component_IntegratedCircuit_BackplaneFacingCapacity_ConsumedCapacityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "consumed-capacity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConsumedCapacity (leaf): Backplane-facing capacity that is consumed by front-panel ports that are connected
// to the integrated circuit and are operationally up.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/consumed-capacity"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/consumed-capacity"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacityPathAny) ConsumedCapacity() *Component_IntegratedCircuit_BackplaneFacingCapacity_ConsumedCapacityPathAny {
	ps := &Component_IntegratedCircuit_BackplaneFacingCapacity_ConsumedCapacityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "consumed-capacity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Total (leaf): Total backplane-facing capacity that is available in the presence
// of no link failures or degradation.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/total"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/total"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacityPath) Total() *Component_IntegratedCircuit_BackplaneFacingCapacity_TotalPath {
	ps := &Component_IntegratedCircuit_BackplaneFacingCapacity_TotalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "total"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Total (leaf): Total backplane-facing capacity that is available in the presence
// of no link failures or degradation.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/total"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/total"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacityPathAny) Total() *Component_IntegratedCircuit_BackplaneFacingCapacity_TotalPathAny {
	ps := &Component_IntegratedCircuit_BackplaneFacingCapacity_TotalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "total"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalOperationalCapacity (leaf): Total backplane-facing capacity that is currently available based
// on the active links.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/total-operational-capacity"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/total-operational-capacity"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacityPath) TotalOperationalCapacity() *Component_IntegratedCircuit_BackplaneFacingCapacity_TotalOperationalCapacityPath {
	ps := &Component_IntegratedCircuit_BackplaneFacingCapacity_TotalOperationalCapacityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "total-operational-capacity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalOperationalCapacity (leaf): Total backplane-facing capacity that is currently available based
// on the active links.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/total-operational-capacity"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/total-operational-capacity"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacityPathAny) TotalOperationalCapacity() *Component_IntegratedCircuit_BackplaneFacingCapacity_TotalOperationalCapacityPathAny {
	ps := &Component_IntegratedCircuit_BackplaneFacingCapacity_TotalOperationalCapacityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "total-operational-capacity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_BackplaneFacingCapacityPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_BackplaneFacingCapacity] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_BackplaneFacingCapacity](
		"Component_IntegratedCircuit_BackplaneFacingCapacity",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_BackplaneFacingCapacityPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_BackplaneFacingCapacity] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_BackplaneFacingCapacity](
		"Component_IntegratedCircuit_BackplaneFacingCapacity",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_BackplaneFacingCapacityPath) Config() ygnmi.ConfigQuery[*oc.Component_IntegratedCircuit_BackplaneFacingCapacity] {
	return ygnmi.NewConfigQuery[*oc.Component_IntegratedCircuit_BackplaneFacingCapacity](
		"Component_IntegratedCircuit_BackplaneFacingCapacity",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_BackplaneFacingCapacityPathAny) Config() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_BackplaneFacingCapacity] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_BackplaneFacingCapacity](
		"Component_IntegratedCircuit_BackplaneFacingCapacity",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_Memory_CorrectedParityErrorsPath represents the /openconfig-platform/components/component/integrated-circuit/memory/state/corrected-parity-errors YANG schema element.
type Component_IntegratedCircuit_Memory_CorrectedParityErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_Memory_CorrectedParityErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/memory/state/corrected-parity-errors YANG schema element.
type Component_IntegratedCircuit_Memory_CorrectedParityErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform-integrated-circuit"
//	Path from parent:     "state/corrected-parity-errors"
//	Path from root:       "/components/component/integrated-circuit/memory/state/corrected-parity-errors"
func (n *Component_IntegratedCircuit_Memory_CorrectedParityErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_Memory",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "corrected-parity-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Memory).CorrectedParityErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Memory) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform-integrated-circuit"
//	Path from parent:     "state/corrected-parity-errors"
//	Path from root:       "/components/component/integrated-circuit/memory/state/corrected-parity-errors"
func (n *Component_IntegratedCircuit_Memory_CorrectedParityErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_Memory",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "corrected-parity-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Memory).CorrectedParityErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Memory) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_Memory_TotalParityErrorsPath represents the /openconfig-platform/components/component/integrated-circuit/memory/state/total-parity-errors YANG schema element.
type Component_IntegratedCircuit_Memory_TotalParityErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_Memory_TotalParityErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/memory/state/total-parity-errors YANG schema element.
type Component_IntegratedCircuit_Memory_TotalParityErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform-integrated-circuit"
//	Path from parent:     "state/total-parity-errors"
//	Path from root:       "/components/component/integrated-circuit/memory/state/total-parity-errors"
func (n *Component_IntegratedCircuit_Memory_TotalParityErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_Memory",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "total-parity-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Memory).TotalParityErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Memory) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform-integrated-circuit"
//	Path from parent:     "state/total-parity-errors"
//	Path from root:       "/components/component/integrated-circuit/memory/state/total-parity-errors"
func (n *Component_IntegratedCircuit_Memory_TotalParityErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_Memory",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "total-parity-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Memory).TotalParityErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Memory) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_Memory_UncorrectedParityErrorsPath represents the /openconfig-platform/components/component/integrated-circuit/memory/state/uncorrected-parity-errors YANG schema element.
type Component_IntegratedCircuit_Memory_UncorrectedParityErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_Memory_UncorrectedParityErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/memory/state/uncorrected-parity-errors YANG schema element.
type Component_IntegratedCircuit_Memory_UncorrectedParityErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform-integrated-circuit"
//	Path from parent:     "state/uncorrected-parity-errors"
//	Path from root:       "/components/component/integrated-circuit/memory/state/uncorrected-parity-errors"
func (n *Component_IntegratedCircuit_Memory_UncorrectedParityErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_Memory",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "uncorrected-parity-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Memory).UncorrectedParityErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Memory) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform-integrated-circuit"
//	Path from parent:     "state/uncorrected-parity-errors"
//	Path from root:       "/components/component/integrated-circuit/memory/state/uncorrected-parity-errors"
func (n *Component_IntegratedCircuit_Memory_UncorrectedParityErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_Memory",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "uncorrected-parity-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Memory).UncorrectedParityErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Memory) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_MemoryPath represents the /openconfig-platform/components/component/integrated-circuit/memory YANG schema element.
type Component_IntegratedCircuit_MemoryPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_MemoryPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/memory YANG schema element.
type Component_IntegratedCircuit_MemoryPathAny struct {
	*ygnmi.NodePath
}

// CorrectedParityErrors (leaf): Number of corrected parity errors. Single bit ECC errors can be
// detected and corrected by most integrated circuits.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/corrected-parity-errors"
//	Path from root:       "/components/component/integrated-circuit/memory/state/corrected-parity-errors"
func (n *Component_IntegratedCircuit_MemoryPath) CorrectedParityErrors() *Component_IntegratedCircuit_Memory_CorrectedParityErrorsPath {
	ps := &Component_IntegratedCircuit_Memory_CorrectedParityErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "corrected-parity-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CorrectedParityErrors (leaf): Number of corrected parity errors. Single bit ECC errors can be
// detected and corrected by most integrated circuits.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/corrected-parity-errors"
//	Path from root:       "/components/component/integrated-circuit/memory/state/corrected-parity-errors"
func (n *Component_IntegratedCircuit_MemoryPathAny) CorrectedParityErrors() *Component_IntegratedCircuit_Memory_CorrectedParityErrorsPathAny {
	ps := &Component_IntegratedCircuit_Memory_CorrectedParityErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "corrected-parity-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalParityErrors (leaf): Total number of parity errors. This includes both the corrected and
// uncorrected parity errors.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/total-parity-errors"
//	Path from root:       "/components/component/integrated-circuit/memory/state/total-parity-errors"
func (n *Component_IntegratedCircuit_MemoryPath) TotalParityErrors() *Component_IntegratedCircuit_Memory_TotalParityErrorsPath {
	ps := &Component_IntegratedCircuit_Memory_TotalParityErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "total-parity-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalParityErrors (leaf): Total number of parity errors. This includes both the corrected and
// uncorrected parity errors.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/total-parity-errors"
//	Path from root:       "/components/component/integrated-circuit/memory/state/total-parity-errors"
func (n *Component_IntegratedCircuit_MemoryPathAny) TotalParityErrors() *Component_IntegratedCircuit_Memory_TotalParityErrorsPathAny {
	ps := &Component_IntegratedCircuit_Memory_TotalParityErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "total-parity-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UncorrectedParityErrors (leaf): Number of uncorrected parity errors. Multi-bit ECC errors can be
// detected but cannot be corrected by most integrated circuits.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/uncorrected-parity-errors"
//	Path from root:       "/components/component/integrated-circuit/memory/state/uncorrected-parity-errors"
func (n *Component_IntegratedCircuit_MemoryPath) UncorrectedParityErrors() *Component_IntegratedCircuit_Memory_UncorrectedParityErrorsPath {
	ps := &Component_IntegratedCircuit_Memory_UncorrectedParityErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "uncorrected-parity-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UncorrectedParityErrors (leaf): Number of uncorrected parity errors. Multi-bit ECC errors can be
// detected but cannot be corrected by most integrated circuits.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/uncorrected-parity-errors"
//	Path from root:       "/components/component/integrated-circuit/memory/state/uncorrected-parity-errors"
func (n *Component_IntegratedCircuit_MemoryPathAny) UncorrectedParityErrors() *Component_IntegratedCircuit_Memory_UncorrectedParityErrorsPathAny {
	ps := &Component_IntegratedCircuit_Memory_UncorrectedParityErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "uncorrected-parity-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_MemoryPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_Memory] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_Memory](
		"Component_IntegratedCircuit_Memory",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_MemoryPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_Memory] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_Memory](
		"Component_IntegratedCircuit_Memory",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_MemoryPath) Config() ygnmi.ConfigQuery[*oc.Component_IntegratedCircuit_Memory] {
	return ygnmi.NewConfigQuery[*oc.Component_IntegratedCircuit_Memory](
		"Component_IntegratedCircuit_Memory",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_MemoryPathAny) Config() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_Memory] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_Memory](
		"Component_IntegratedCircuit_Memory",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCountersPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters YANG schema element.
type Component_IntegratedCircuit_PipelineCountersPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCountersPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters YANG schema element.
type Component_IntegratedCircuit_PipelineCountersPathAny struct {
	*ygnmi.NodePath
}

// ControlPlaneTraffic (container): Counters that are related to traffic destined to the control-plane.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "control-plane-traffic"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/control-plane-traffic"
func (n *Component_IntegratedCircuit_PipelineCountersPath) ControlPlaneTraffic() *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTrafficPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_ControlPlaneTrafficPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"control-plane-traffic"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ControlPlaneTraffic (container): Counters that are related to traffic destined to the control-plane.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "control-plane-traffic"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/control-plane-traffic"
func (n *Component_IntegratedCircuit_PipelineCountersPathAny) ControlPlaneTraffic() *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTrafficPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_ControlPlaneTrafficPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"control-plane-traffic"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Drop (container): IC drop counters for all five NPU sub-blocks.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "drop"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop"
func (n *Component_IntegratedCircuit_PipelineCountersPath) Drop() *Component_IntegratedCircuit_PipelineCounters_DropPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_DropPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"drop"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Drop (container): IC drop counters for all five NPU sub-blocks.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "drop"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop"
func (n *Component_IntegratedCircuit_PipelineCountersPathAny) Drop() *Component_IntegratedCircuit_PipelineCounters_DropPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_DropPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"drop"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Errors (container): IC errors for all five NPU sub-blocks.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "errors"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors"
func (n *Component_IntegratedCircuit_PipelineCountersPath) Errors() *Component_IntegratedCircuit_PipelineCounters_ErrorsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_ErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"errors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Errors (container): IC errors for all five NPU sub-blocks.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "errors"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors"
func (n *Component_IntegratedCircuit_PipelineCountersPathAny) Errors() *Component_IntegratedCircuit_PipelineCounters_ErrorsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_ErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"errors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Packet (container): IC packet counters for all five NPU sub-blocks.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "packet"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet"
func (n *Component_IntegratedCircuit_PipelineCountersPath) Packet() *Component_IntegratedCircuit_PipelineCounters_PacketPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_PacketPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"packet"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Packet (container): IC packet counters for all five NPU sub-blocks.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "packet"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet"
func (n *Component_IntegratedCircuit_PipelineCountersPathAny) Packet() *Component_IntegratedCircuit_PipelineCounters_PacketPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_PacketPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"packet"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCountersPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters](
		"Component_IntegratedCircuit_PipelineCounters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCountersPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters](
		"Component_IntegratedCircuit_PipelineCounters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_DroppedAggregatePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/dropped-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_DroppedAggregatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_DroppedAggregatePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/dropped-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_DroppedAggregatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/dropped-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/dropped-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_DroppedAggregatePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dropped-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic).DroppedAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/dropped-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/dropped-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_DroppedAggregatePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dropped-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic).DroppedAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_DroppedBytesAggregatePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/dropped-bytes-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_DroppedBytesAggregatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_DroppedBytesAggregatePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/dropped-bytes-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_DroppedBytesAggregatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/dropped-bytes-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/dropped-bytes-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_DroppedBytesAggregatePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dropped-bytes-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic).DroppedBytesAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/dropped-bytes-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/dropped-bytes-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_DroppedBytesAggregatePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dropped-bytes-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic).DroppedBytesAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_QueuedAggregatePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/queued-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_QueuedAggregatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_QueuedAggregatePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/queued-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_QueuedAggregatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/queued-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/queued-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_QueuedAggregatePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "queued-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic).QueuedAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/queued-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/queued-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_QueuedAggregatePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "queued-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic).QueuedAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_QueuedBytesAggregatePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/queued-bytes-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_QueuedBytesAggregatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_QueuedBytesAggregatePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/queued-bytes-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_QueuedBytesAggregatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/queued-bytes-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/queued-bytes-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_QueuedBytesAggregatePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "queued-bytes-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic).QueuedBytesAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/queued-bytes-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/queued-bytes-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_QueuedBytesAggregatePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "queued-bytes-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic).QueuedBytesAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_ControlPlaneTrafficPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/control-plane-traffic YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_ControlPlaneTrafficPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_ControlPlaneTrafficPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/control-plane-traffic YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_ControlPlaneTrafficPathAny struct {
	*ygnmi.NodePath
}

// DroppedAggregate (leaf): This captures the aggregation of all counters where the switch has dropped
// traffic related to the control-plane.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/dropped-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/dropped-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTrafficPath) DroppedAggregate() *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_DroppedAggregatePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_DroppedAggregatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dropped-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DroppedAggregate (leaf): This captures the aggregation of all counters where the switch has dropped
// traffic related to the control-plane.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/dropped-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/dropped-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTrafficPathAny) DroppedAggregate() *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_DroppedAggregatePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_DroppedAggregatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dropped-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DroppedBytesAggregate (leaf): This captures the aggregation of all counters in bytes where the switch has
// dropped traffic related to the control-plane.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/dropped-bytes-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/dropped-bytes-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTrafficPath) DroppedBytesAggregate() *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_DroppedBytesAggregatePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_DroppedBytesAggregatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dropped-bytes-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DroppedBytesAggregate (leaf): This captures the aggregation of all counters in bytes where the switch has
// dropped traffic related to the control-plane.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/dropped-bytes-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/dropped-bytes-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTrafficPathAny) DroppedBytesAggregate() *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_DroppedBytesAggregatePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_DroppedBytesAggregatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dropped-bytes-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// QueuedAggregate (leaf): This captures the aggregation of all counters where the switch has enqueued
// traffic related to the control-plane.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/queued-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/queued-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTrafficPath) QueuedAggregate() *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_QueuedAggregatePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_QueuedAggregatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "queued-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// QueuedAggregate (leaf): This captures the aggregation of all counters where the switch has enqueued
// traffic related to the control-plane.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/queued-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/queued-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTrafficPathAny) QueuedAggregate() *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_QueuedAggregatePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_QueuedAggregatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "queued-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// QueuedBytesAggregate (leaf): This captures the aggregation of all counters in bytes where the switch has
// enqueued traffic related to the control-plane.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/queued-bytes-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/queued-bytes-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTrafficPath) QueuedBytesAggregate() *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_QueuedBytesAggregatePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_QueuedBytesAggregatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "queued-bytes-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// QueuedBytesAggregate (leaf): This captures the aggregation of all counters in bytes where the switch has
// enqueued traffic related to the control-plane.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/queued-bytes-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/queued-bytes-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTrafficPathAny) QueuedBytesAggregate() *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_QueuedBytesAggregatePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_QueuedBytesAggregatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "queued-bytes-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Vendor (container): Counters within these containers are defined and augmented by vendors.
// As each ASIC and vendor has different implementation and internal
// parts where packets may be dropped at any point in time. Providing
// vendor-specific counters provides better visibility into control-plane traffic.
//
// The recommended usage of this container is to create an augment at
// .../pipeline-counter/control-plane-traffic/vendor that contains additional
// vendor/platform specific containers.
//
// e.g.
//
//	augment /components/component/integrated-circuit/pipeline-counter/control-plane-traffic/vendor {
//	 container <vendor name> {
//	   container <platform name> {
//	     container state {
//	       leaf counter-a {
//	         uses control-plane-traffic-vendor-counters;
//	       }
//
//	       leaf counter-b {
//	         uses control-plane-traffic-vendor-counters;
//	       }
//	     }
//	   }
//	 }
//	}
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "vendor"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/vendor"
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTrafficPath) Vendor() *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_VendorPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_VendorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"vendor"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Vendor (container): Counters within these containers are defined and augmented by vendors.
// As each ASIC and vendor has different implementation and internal
// parts where packets may be dropped at any point in time. Providing
// vendor-specific counters provides better visibility into control-plane traffic.
//
// The recommended usage of this container is to create an augment at
// .../pipeline-counter/control-plane-traffic/vendor that contains additional
// vendor/platform specific containers.
//
// e.g.
//
//	augment /components/component/integrated-circuit/pipeline-counter/control-plane-traffic/vendor {
//	 container <vendor name> {
//	   container <platform name> {
//	     container state {
//	       leaf counter-a {
//	         uses control-plane-traffic-vendor-counters;
//	       }
//
//	       leaf counter-b {
//	         uses control-plane-traffic-vendor-counters;
//	       }
//	     }
//	   }
//	 }
//	}
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "vendor"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/vendor"
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTrafficPathAny) Vendor() *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_VendorPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_VendorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vendor"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTrafficPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic](
		"Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTrafficPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic](
		"Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_VendorPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/vendor YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_VendorPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_VendorPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/vendor YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_VendorPathAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_VendorPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_Vendor] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_Vendor](
		"Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_Vendor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_VendorPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_Vendor] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_Vendor](
		"Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_Vendor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_AdverseAggregatePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/state/adverse-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_AdverseAggregatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_AdverseAggregatePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/state/adverse-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_AdverseAggregatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/adverse-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/state/adverse-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_AdverseAggregatePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "adverse-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop).AdverseAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/adverse-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/state/adverse-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_AdverseAggregatePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "adverse-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop).AdverseAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_CongestionAggregatePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/state/congestion-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_CongestionAggregatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_CongestionAggregatePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/state/congestion-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_CongestionAggregatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/congestion-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/state/congestion-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_CongestionAggregatePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "congestion-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop).CongestionAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/congestion-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/state/congestion-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_CongestionAggregatePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "congestion-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop).CongestionAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_NoRoutePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/state/no-route YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_NoRoutePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_NoRoutePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/state/no-route YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_NoRoutePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/no-route"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/state/no-route"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_NoRoutePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "no-route"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop).NoRoute
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/no-route"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/state/no-route"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_NoRoutePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "no-route"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop).NoRoute
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_PacketProcessingAggregatePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/state/packet-processing-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_PacketProcessingAggregatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_PacketProcessingAggregatePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/state/packet-processing-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_PacketProcessingAggregatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/packet-processing-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/state/packet-processing-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_PacketProcessingAggregatePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "packet-processing-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop).PacketProcessingAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/packet-processing-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/state/packet-processing-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_PacketProcessingAggregatePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "packet-processing-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop).PacketProcessingAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_UrpfAggregatePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/state/urpf-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_UrpfAggregatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_UrpfAggregatePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/state/urpf-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_UrpfAggregatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/urpf-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/state/urpf-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_UrpfAggregatePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "urpf-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop).UrpfAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/urpf-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/state/urpf-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_UrpfAggregatePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "urpf-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop).UrpfAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_DropPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_DropPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_DropPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_DropPathAny struct {
	*ygnmi.NodePath
}

// AdverseAggregate (leaf): This captures the aggregation of all counters where the switch is
// unexpectedly dropping packets. Occurrence of these drops on a stable
// (no recent hardware or config changes) and otherwise healthy
// switch needs further investigation.
// This leaf counts packet discarded as result of corrupted
// programming state in an INTEGRATED_CIRCUIT or corrupted data
// structures of packet descriptors.
//
// Note: corrupted packets received on ingress interfaces should be counted
// in `/interfaces/interface/state/counters/in-errors` and NOT counted as
// adverse-aggregate. This is because incoming corrupted packets are NOT
// a signal of adverse state of an INTEGRATED_CIRCUIT but rather of an
// entity adjacent to the Interface, such as a cable or transceiver). Therefore
// such drops SHOULD NOT be counted as adverse-aggregate to preserve
// a clean signal of INTEGRATED_CIRCUIT adverse state.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/adverse-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/state/adverse-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPath) AdverseAggregate() *Component_IntegratedCircuit_PipelineCounters_Drop_AdverseAggregatePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_AdverseAggregatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "adverse-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdverseAggregate (leaf): This captures the aggregation of all counters where the switch is
// unexpectedly dropping packets. Occurrence of these drops on a stable
// (no recent hardware or config changes) and otherwise healthy
// switch needs further investigation.
// This leaf counts packet discarded as result of corrupted
// programming state in an INTEGRATED_CIRCUIT or corrupted data
// structures of packet descriptors.
//
// Note: corrupted packets received on ingress interfaces should be counted
// in `/interfaces/interface/state/counters/in-errors` and NOT counted as
// adverse-aggregate. This is because incoming corrupted packets are NOT
// a signal of adverse state of an INTEGRATED_CIRCUIT but rather of an
// entity adjacent to the Interface, such as a cable or transceiver). Therefore
// such drops SHOULD NOT be counted as adverse-aggregate to preserve
// a clean signal of INTEGRATED_CIRCUIT adverse state.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/adverse-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/state/adverse-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPathAny) AdverseAggregate() *Component_IntegratedCircuit_PipelineCounters_Drop_AdverseAggregatePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_AdverseAggregatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "adverse-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CongestionAggregate (leaf): This tracks the aggregation of all counters where the expected
// conditions of packet drops due to internal congestion in some block of
// the hardware that may not be visible in through other congestion
// indicators like interface discards or queue drop counters.
//
// This leaf counts packet discarded as result of exceeding
// performance limits of an INTEGRATED_CIRCUT, when it processes
// non-corrupted packets using legitimate, non-corrupted programming
// state of the INTEGRATED_CIRCUIT.
//
// The typical example is overloading given IC with higher packet rate (pps)
// then given chip can handle. For example, let's assume chip X can process
// 3.6Bpps of incoming traffic and 2000 Mpps. However if average incoming
// packet size is 150B, at full ingress rate this become 3000Mpps. Hence
// 1/3 of packets would be cropped and should be counted against
// congestion-aggregate.
//
// Another example is the case when some INTEGRATED_CIRCUIT internal data bus is
// too narrow/slow for handling traffic. For example let's assume chip X needs to send
// 3Tbps of traffic to an external buffer memory which has only 2Tbps access I/O.  In
// this case packets would be discarded, because of congestion of memory I/O bus
// which is part of the INTEGRATED_CIRCUIT.  Depending on the design of the
// INTEGRATED_CIRCUIT, packets could be discarded even if interface queues are
// not full, hence this scenario is NOT treated as QoS queue tail-drops nor WRED drops.
//
// Yet another example is the case where extremely large and long
// ACL/filter requires more cycles to process than the INTEGRATED_CIRCUIT
// has budgeted.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/congestion-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/state/congestion-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPath) CongestionAggregate() *Component_IntegratedCircuit_PipelineCounters_Drop_CongestionAggregatePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_CongestionAggregatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "congestion-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CongestionAggregate (leaf): This tracks the aggregation of all counters where the expected
// conditions of packet drops due to internal congestion in some block of
// the hardware that may not be visible in through other congestion
// indicators like interface discards or queue drop counters.
//
// This leaf counts packet discarded as result of exceeding
// performance limits of an INTEGRATED_CIRCUT, when it processes
// non-corrupted packets using legitimate, non-corrupted programming
// state of the INTEGRATED_CIRCUIT.
//
// The typical example is overloading given IC with higher packet rate (pps)
// then given chip can handle. For example, let's assume chip X can process
// 3.6Bpps of incoming traffic and 2000 Mpps. However if average incoming
// packet size is 150B, at full ingress rate this become 3000Mpps. Hence
// 1/3 of packets would be cropped and should be counted against
// congestion-aggregate.
//
// Another example is the case when some INTEGRATED_CIRCUIT internal data bus is
// too narrow/slow for handling traffic. For example let's assume chip X needs to send
// 3Tbps of traffic to an external buffer memory which has only 2Tbps access I/O.  In
// this case packets would be discarded, because of congestion of memory I/O bus
// which is part of the INTEGRATED_CIRCUIT.  Depending on the design of the
// INTEGRATED_CIRCUIT, packets could be discarded even if interface queues are
// not full, hence this scenario is NOT treated as QoS queue tail-drops nor WRED drops.
//
// Yet another example is the case where extremely large and long
// ACL/filter requires more cycles to process than the INTEGRATED_CIRCUIT
// has budgeted.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/congestion-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/state/congestion-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPathAny) CongestionAggregate() *Component_IntegratedCircuit_PipelineCounters_Drop_CongestionAggregatePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_CongestionAggregatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "congestion-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FabricBlock (container): The IC fabric block subsystem connects the IC to the external
// systems fabric subsystem
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "fabric-block"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPath) FabricBlock() *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"fabric-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// FabricBlock (container): The IC fabric block subsystem connects the IC to the external
// systems fabric subsystem
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "fabric-block"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPathAny) FabricBlock() *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"fabric-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// HostInterfaceBlock (container): The IC host interface block subsystem connects the IC to the
// external systems host or control subsystem
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "host-interface-block"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPath) HostInterfaceBlock() *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-interface-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// HostInterfaceBlock (container): The IC host interface block subsystem connects the IC to the
// external systems host or control subsystem
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "host-interface-block"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPathAny) HostInterfaceBlock() *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-interface-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceBlock (container): The IC interface subsystem connects the IC to the external PHY or
// MAC.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interface-block"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/interface-block"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPath) InterfaceBlock() *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlockPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlockPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceBlock (container): The IC interface subsystem connects the IC to the external PHY or
// MAC.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interface-block"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/interface-block"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPathAny) InterfaceBlock() *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlockPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlockPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LookupBlock (container): The IC lookup subsystem perform the next hop lookup of the packet
// and other forwarding features such as firewall filters.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "lookup-block"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPath) LookupBlock() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"lookup-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LookupBlock (container): The IC lookup subsystem perform the next hop lookup of the packet
// and other forwarding features such as firewall filters.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "lookup-block"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPathAny) LookupBlock() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lookup-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NoRoute (leaf): This aggregation of counters represents the conditions in which
// packets are dropped due to no FIB entry for this ipv4 or ipv6 lookup.
//
// This counter and the packet-processing-aggregate counter should be
// incremented for each no-route packet drop.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/no-route"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/state/no-route"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPath) NoRoute() *Component_IntegratedCircuit_PipelineCounters_Drop_NoRoutePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_NoRoutePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "no-route"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NoRoute (leaf): This aggregation of counters represents the conditions in which
// packets are dropped due to no FIB entry for this ipv4 or ipv6 lookup.
//
// This counter and the packet-processing-aggregate counter should be
// incremented for each no-route packet drop.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/no-route"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/state/no-route"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPathAny) NoRoute() *Component_IntegratedCircuit_PipelineCounters_Drop_NoRoutePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_NoRoutePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "no-route"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PacketProcessingAggregate (leaf): This aggregation of counters represents the conditions in which
// packets are dropped due to legitimate forwarding decisions (ACL drops,
// No Route etc.)
// This counter counts packet discarded as result of processing
// non-corrupted packet against legitimate, non-corrupted state
// of INTEGRATED_CIRCUIT program (FIB content, ACL content, rate-limiting token-buckets)
// which mandate packet drop. The examples of this class of discard are:
// - dropping packets which destination address to no match any FIB entry
// - dropping packets which destination address matches FIB entry pointing
// to discard next-hop (e.g. route to null0)
// - dropping packts due to ACL/packet filter decission
// - dropping packets due to its TTL = 1
// - dropping packets due to its size exceeds egress interface MTU and
// packet can't be fragmented (IPv6 or do not fragment bit is set)
// -  dropping packets due to uRPF rules (note: packet is counted here and
// in separate, urpf-aggregate counter simultaneously)
// - etc
//
// Note:The INTEGRATED_CIRCUIT is doing exactly what it is programmed
// to do, and the packet is parsable.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/packet-processing-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/state/packet-processing-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPath) PacketProcessingAggregate() *Component_IntegratedCircuit_PipelineCounters_Drop_PacketProcessingAggregatePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_PacketProcessingAggregatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "packet-processing-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PacketProcessingAggregate (leaf): This aggregation of counters represents the conditions in which
// packets are dropped due to legitimate forwarding decisions (ACL drops,
// No Route etc.)
// This counter counts packet discarded as result of processing
// non-corrupted packet against legitimate, non-corrupted state
// of INTEGRATED_CIRCUIT program (FIB content, ACL content, rate-limiting token-buckets)
// which mandate packet drop. The examples of this class of discard are:
// - dropping packets which destination address to no match any FIB entry
// - dropping packets which destination address matches FIB entry pointing
// to discard next-hop (e.g. route to null0)
// - dropping packts due to ACL/packet filter decission
// - dropping packets due to its TTL = 1
// - dropping packets due to its size exceeds egress interface MTU and
// packet can't be fragmented (IPv6 or do not fragment bit is set)
// -  dropping packets due to uRPF rules (note: packet is counted here and
// in separate, urpf-aggregate counter simultaneously)
// - etc
//
// Note:The INTEGRATED_CIRCUIT is doing exactly what it is programmed
// to do, and the packet is parsable.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/packet-processing-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/state/packet-processing-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPathAny) PacketProcessingAggregate() *Component_IntegratedCircuit_PipelineCounters_Drop_PacketProcessingAggregatePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_PacketProcessingAggregatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "packet-processing-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// QueueingBlock (container): The IC queueing subsystem buffers the packet while processing it
// and queues the packet for delivery to the next stage
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "queueing-block"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/queueing-block"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPath) QueueingBlock() *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlockPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlockPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"queueing-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// QueueingBlock (container): The IC queueing subsystem buffers the packet while processing it
// and queues the packet for delivery to the next stage
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "queueing-block"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/queueing-block"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPathAny) QueueingBlock() *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlockPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlockPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queueing-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// UrpfAggregate (leaf): This aggregation of counters represents the conditions in which
// packets are dropped due to failing uRPF lookup check.  This counter
// and the packet-processing-aggregate counter should be incremented
// for each uRPF packet drop.
// This counter counts packet discarded as result of Unicast Reverse
// Path Forwarding verification.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/urpf-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/state/urpf-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPath) UrpfAggregate() *Component_IntegratedCircuit_PipelineCounters_Drop_UrpfAggregatePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_UrpfAggregatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "urpf-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UrpfAggregate (leaf): This aggregation of counters represents the conditions in which
// packets are dropped due to failing uRPF lookup check.  This counter
// and the packet-processing-aggregate counter should be incremented
// for each uRPF packet drop.
// This counter counts packet discarded as result of Unicast Reverse
// Path Forwarding verification.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/urpf-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/state/urpf-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPathAny) UrpfAggregate() *Component_IntegratedCircuit_PipelineCounters_Drop_UrpfAggregatePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_UrpfAggregatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "urpf-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Vendor (container): Counters within these containers are defined and augmented by vendors.
// As each ASIC and vendor has different implementation and internal
// parts where packets may be dropped at any point in time. Providing
// specific hardware counters provides better visibility into traffic drop.
//
// The recommended usage of this container is to create an augment at
// .../pipeline-counter/drop/vendor that contains additional vendor/platform
// specific containers.
//
// e.g.
//
//	augment /components/component/integrated-circuit/pipeline-counter/drop/vendor {
//	 container <vendor name> {
//	   container <platform name> {
//	     uses pipeline-vendor-drop-containers;
//	   }
//	 }
//	}
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "vendor"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/vendor"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPath) Vendor() *Component_IntegratedCircuit_PipelineCounters_Drop_VendorPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_VendorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"vendor"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Vendor (container): Counters within these containers are defined and augmented by vendors.
// As each ASIC and vendor has different implementation and internal
// parts where packets may be dropped at any point in time. Providing
// specific hardware counters provides better visibility into traffic drop.
//
// The recommended usage of this container is to create an augment at
// .../pipeline-counter/drop/vendor that contains additional vendor/platform
// specific containers.
//
// e.g.
//
//	augment /components/component/integrated-circuit/pipeline-counter/drop/vendor {
//	 container <vendor name> {
//	   container <platform name> {
//	     uses pipeline-vendor-drop-containers;
//	   }
//	 }
//	}
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "vendor"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/vendor"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPathAny) Vendor() *Component_IntegratedCircuit_PipelineCounters_Drop_VendorPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_VendorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vendor"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_DropPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop](
		"Component_IntegratedCircuit_PipelineCounters_Drop",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_DropPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop](
		"Component_IntegratedCircuit_PipelineCounters_Drop",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_FabricAggregatePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/fabric-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_FabricAggregatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_FabricAggregatePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/fabric-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_FabricAggregatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/fabric-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/fabric-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_FabricAggregatePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fabric-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock).FabricAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/fabric-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/fabric-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_FabricAggregatePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fabric-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock).FabricAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_InHighPriorityPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/in-high-priority YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_InHighPriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_InHighPriorityPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/in-high-priority YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_InHighPriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-high-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/in-high-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_InHighPriorityPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-high-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock).InHighPriority
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-high-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/in-high-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_InHighPriorityPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-high-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock).InHighPriority
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_InLowPriorityPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/in-low-priority YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_InLowPriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_InLowPriorityPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/in-low-priority YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_InLowPriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-low-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/in-low-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_InLowPriorityPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-low-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock).InLowPriority
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-low-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/in-low-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_InLowPriorityPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-low-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock).InLowPriority
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_LostPacketsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/lost-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_LostPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_LostPacketsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/lost-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_LostPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/lost-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/lost-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_LostPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lost-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock).LostPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/lost-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/lost-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_LostPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lost-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock).LostPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OutHighPriorityPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/out-high-priority YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OutHighPriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OutHighPriorityPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/out-high-priority YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OutHighPriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-high-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/out-high-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OutHighPriorityPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-high-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock).OutHighPriority
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-high-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/out-high-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OutHighPriorityPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-high-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock).OutHighPriority
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OutLowPriorityPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/out-low-priority YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OutLowPriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OutLowPriorityPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/out-low-priority YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OutLowPriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-low-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/out-low-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OutLowPriorityPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-low-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock).OutLowPriority
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-low-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/out-low-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OutLowPriorityPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-low-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock).OutLowPriority
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OversubscriptionPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/oversubscription YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OversubscriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OversubscriptionPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/oversubscription YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OversubscriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/oversubscription"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/oversubscription"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OversubscriptionPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oversubscription"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock).Oversubscription
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/oversubscription"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/oversubscription"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OversubscriptionPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oversubscription"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock).Oversubscription
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/fabric-block YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/fabric-block YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPathAny struct {
	*ygnmi.NodePath
}

// FabricAggregate (leaf): Aggregate of fabric-in and fabric-out drops.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fabric-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/fabric-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPath) FabricAggregate() *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_FabricAggregatePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_FabricAggregatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fabric-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FabricAggregate (leaf): Aggregate of fabric-in and fabric-out drops.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fabric-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/fabric-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPathAny) FabricAggregate() *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_FabricAggregatePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_FabricAggregatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fabric-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InHighPriority (leaf): Incoming high priority drops towards this integrated-circuit
// subsystem block from the previous NPU sub-block or interface.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-high-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/in-high-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPath) InHighPriority() *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_InHighPriorityPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_InHighPriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-high-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InHighPriority (leaf): Incoming high priority drops towards this integrated-circuit
// subsystem block from the previous NPU sub-block or interface.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-high-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/in-high-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPathAny) InHighPriority() *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_InHighPriorityPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_InHighPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-high-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InLowPriority (leaf): Incoming low priority drops towards this integrated-circuit
// subsystem block from the previous NPU sub-block or interface.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-low-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/in-low-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPath) InLowPriority() *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_InLowPriorityPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_InLowPriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-low-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InLowPriority (leaf): Incoming low priority drops towards this integrated-circuit
// subsystem block from the previous NPU sub-block or interface.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-low-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/in-low-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPathAny) InLowPriority() *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_InLowPriorityPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_InLowPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-low-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LostPackets (leaf): Fabric drops due to re-ordering, or due to packets arriving late, or
// due to some loss in the fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/lost-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/lost-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPath) LostPackets() *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_LostPacketsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_LostPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "lost-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LostPackets (leaf): Fabric drops due to re-ordering, or due to packets arriving late, or
// due to some loss in the fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/lost-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/lost-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPathAny) LostPackets() *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_LostPacketsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_LostPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "lost-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutHighPriority (leaf): Outgoing high priority drops towards the fabric/interface from this
// integrated-circuit subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-high-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/out-high-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPath) OutHighPriority() *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OutHighPriorityPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OutHighPriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-high-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutHighPriority (leaf): Outgoing high priority drops towards the fabric/interface from this
// integrated-circuit subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-high-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/out-high-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPathAny) OutHighPriority() *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OutHighPriorityPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OutHighPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-high-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLowPriority (leaf): Outgoing low priority drops towards the fabric/interface from this
// integrated-circuit subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-low-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/out-low-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPath) OutLowPriority() *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OutLowPriorityPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OutLowPriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-low-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLowPriority (leaf): Outgoing low priority drops towards the fabric/interface from this
// integrated-circuit subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-low-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/out-low-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPathAny) OutLowPriority() *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OutLowPriorityPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OutLowPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-low-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Oversubscription (leaf): Number of packets dropped due to oversubscription of the
// integrated-circuit subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/oversubscription"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/oversubscription"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPath) Oversubscription() *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OversubscriptionPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OversubscriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oversubscription"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Oversubscription (leaf): Number of packets dropped due to oversubscription of the
// integrated-circuit subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/oversubscription"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/oversubscription"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPathAny) Oversubscription() *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OversubscriptionPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OversubscriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oversubscription"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock](
		"Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock](
		"Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_FragmentPuntPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/fragment-punt YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_FragmentPuntPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_FragmentPuntPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/fragment-punt YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_FragmentPuntPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/fragment-punt"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/fragment-punt"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_FragmentPuntPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fragment-punt"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock).FragmentPunt
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/fragment-punt"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/fragment-punt"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_FragmentPuntPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fragment-punt"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock).FragmentPunt
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_HostAggregatePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/host-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_HostAggregatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_HostAggregatePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/host-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_HostAggregatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/host-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/host-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_HostAggregatePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "host-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock).HostAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/host-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/host-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_HostAggregatePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "host-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock).HostAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_InHighPriorityPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/in-high-priority YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_InHighPriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_InHighPriorityPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/in-high-priority YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_InHighPriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-high-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/in-high-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_InHighPriorityPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-high-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock).InHighPriority
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-high-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/in-high-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_InHighPriorityPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-high-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock).InHighPriority
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_InLowPriorityPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/in-low-priority YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_InLowPriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_InLowPriorityPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/in-low-priority YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_InLowPriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-low-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/in-low-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_InLowPriorityPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-low-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock).InLowPriority
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-low-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/in-low-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_InLowPriorityPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-low-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock).InLowPriority
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OutHighPriorityPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/out-high-priority YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OutHighPriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OutHighPriorityPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/out-high-priority YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OutHighPriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-high-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/out-high-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OutHighPriorityPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-high-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock).OutHighPriority
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-high-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/out-high-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OutHighPriorityPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-high-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock).OutHighPriority
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OutLowPriorityPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/out-low-priority YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OutLowPriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OutLowPriorityPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/out-low-priority YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OutLowPriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-low-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/out-low-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OutLowPriorityPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-low-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock).OutLowPriority
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-low-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/out-low-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OutLowPriorityPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-low-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock).OutLowPriority
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OversubscriptionPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/oversubscription YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OversubscriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OversubscriptionPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/oversubscription YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OversubscriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/oversubscription"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/oversubscription"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OversubscriptionPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oversubscription"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock).Oversubscription
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/oversubscription"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/oversubscription"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OversubscriptionPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oversubscription"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock).Oversubscription
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_RateLimitPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/rate-limit YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_RateLimitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_RateLimitPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/rate-limit YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_RateLimitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/rate-limit"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/rate-limit"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_RateLimitPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "rate-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock).RateLimit
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/rate-limit"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/rate-limit"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_RateLimitPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "rate-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock).RateLimit
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPathAny struct {
	*ygnmi.NodePath
}

// FragmentPunt (leaf): The packets that were failed to punt to CPU due to policing rate.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fragment-punt"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/fragment-punt"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPath) FragmentPunt() *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_FragmentPuntPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_FragmentPuntPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fragment-punt"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FragmentPunt (leaf): The packets that were failed to punt to CPU due to policing rate.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fragment-punt"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/fragment-punt"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPathAny) FragmentPunt() *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_FragmentPuntPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_FragmentPuntPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fragment-punt"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HostAggregate (leaf): Aggregate of all the drops in the host path.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/host-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/host-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPath) HostAggregate() *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_HostAggregatePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_HostAggregatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "host-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HostAggregate (leaf): Aggregate of all the drops in the host path.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/host-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/host-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPathAny) HostAggregate() *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_HostAggregatePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_HostAggregatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "host-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InHighPriority (leaf): Incoming high priority drops towards this integrated-circuit
// subsystem block from the previous NPU sub-block or interface.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-high-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/in-high-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPath) InHighPriority() *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_InHighPriorityPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_InHighPriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-high-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InHighPriority (leaf): Incoming high priority drops towards this integrated-circuit
// subsystem block from the previous NPU sub-block or interface.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-high-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/in-high-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPathAny) InHighPriority() *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_InHighPriorityPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_InHighPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-high-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InLowPriority (leaf): Incoming low priority drops towards this integrated-circuit
// subsystem block from the previous NPU sub-block or interface.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-low-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/in-low-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPath) InLowPriority() *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_InLowPriorityPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_InLowPriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-low-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InLowPriority (leaf): Incoming low priority drops towards this integrated-circuit
// subsystem block from the previous NPU sub-block or interface.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-low-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/in-low-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPathAny) InLowPriority() *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_InLowPriorityPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_InLowPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-low-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutHighPriority (leaf): Outgoing high priority drops towards the fabric/interface from this
// integrated-circuit subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-high-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/out-high-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPath) OutHighPriority() *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OutHighPriorityPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OutHighPriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-high-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutHighPriority (leaf): Outgoing high priority drops towards the fabric/interface from this
// integrated-circuit subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-high-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/out-high-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPathAny) OutHighPriority() *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OutHighPriorityPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OutHighPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-high-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLowPriority (leaf): Outgoing low priority drops towards the fabric/interface from this
// integrated-circuit subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-low-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/out-low-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPath) OutLowPriority() *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OutLowPriorityPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OutLowPriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-low-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLowPriority (leaf): Outgoing low priority drops towards the fabric/interface from this
// integrated-circuit subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-low-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/out-low-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPathAny) OutLowPriority() *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OutLowPriorityPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OutLowPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-low-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Oversubscription (leaf): Number of packets dropped due to oversubscription of the
// integrated-circuit subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/oversubscription"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/oversubscription"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPath) Oversubscription() *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OversubscriptionPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OversubscriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oversubscription"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Oversubscription (leaf): Number of packets dropped due to oversubscription of the
// integrated-circuit subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/oversubscription"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/oversubscription"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPathAny) Oversubscription() *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OversubscriptionPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OversubscriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oversubscription"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RateLimit (leaf): Packet drops due to the rate limit in the integrated-circuit host
// subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/rate-limit"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/rate-limit"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPath) RateLimit() *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_RateLimitPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_RateLimitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "rate-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RateLimit (leaf): Packet drops due to the rate limit in the integrated-circuit host
// subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/rate-limit"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/rate-limit"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPathAny) RateLimit() *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_RateLimitPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_RateLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "rate-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock](
		"Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock](
		"Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_InDropsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/interface-block/state/in-drops YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_InDropsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_InDropsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/interface-block/state/in-drops YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_InDropsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-drops"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/interface-block/state/in-drops"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_InDropsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-drops"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock).InDrops
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-drops"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/interface-block/state/in-drops"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_InDropsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-drops"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock).InDrops
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_OutDropsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/interface-block/state/out-drops YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_OutDropsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_OutDropsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/interface-block/state/out-drops YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_OutDropsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-drops"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/interface-block/state/out-drops"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_OutDropsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-drops"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock).OutDrops
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-drops"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/interface-block/state/out-drops"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_OutDropsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-drops"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock).OutDrops
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_OversubscriptionPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/interface-block/state/oversubscription YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_OversubscriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_OversubscriptionPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/interface-block/state/oversubscription YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_OversubscriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/oversubscription"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/interface-block/state/oversubscription"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_OversubscriptionPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oversubscription"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock).Oversubscription
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/oversubscription"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/interface-block/state/oversubscription"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_OversubscriptionPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oversubscription"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock).Oversubscription
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlockPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/interface-block YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlockPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlockPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/interface-block YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlockPathAny struct {
	*ygnmi.NodePath
}

// InDrops (leaf): Incoming drops towards the integrated-circuit interface
// subsystem block from the interfaces due to any reason.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-drops"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/interface-block/state/in-drops"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlockPath) InDrops() *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_InDropsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_InDropsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-drops"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InDrops (leaf): Incoming drops towards the integrated-circuit interface
// subsystem block from the interfaces due to any reason.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-drops"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/interface-block/state/in-drops"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlockPathAny) InDrops() *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_InDropsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_InDropsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-drops"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutDrops (leaf): Outgoing drops towards the interfaces from the
// integrated-circuit interface subsystem block due to any reason.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-drops"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/interface-block/state/out-drops"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlockPath) OutDrops() *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_OutDropsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_OutDropsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-drops"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutDrops (leaf): Outgoing drops towards the interfaces from the
// integrated-circuit interface subsystem block due to any reason.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-drops"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/interface-block/state/out-drops"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlockPathAny) OutDrops() *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_OutDropsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_OutDropsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-drops"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Oversubscription (leaf): Number of packets dropped due to oversubscription of the
// integrated-circuit subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/oversubscription"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/interface-block/state/oversubscription"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlockPath) Oversubscription() *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_OversubscriptionPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_OversubscriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oversubscription"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Oversubscription (leaf): Number of packets dropped due to oversubscription of the
// integrated-circuit subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/oversubscription"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/interface-block/state/oversubscription"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlockPathAny) Oversubscription() *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_OversubscriptionPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_OversubscriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oversubscription"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlockPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock](
		"Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlockPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock](
		"Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_AclDropsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/acl-drops YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_AclDropsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_AclDropsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/acl-drops YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_AclDropsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/acl-drops"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/acl-drops"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_AclDropsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "acl-drops"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).AclDrops
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/acl-drops"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/acl-drops"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_AclDropsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "acl-drops"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).AclDrops
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_ForwardingPolicyPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/forwarding-policy YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_ForwardingPolicyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_ForwardingPolicyPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/forwarding-policy YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_ForwardingPolicyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/forwarding-policy"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/forwarding-policy"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_ForwardingPolicyPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "forwarding-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).ForwardingPolicy
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/forwarding-policy"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/forwarding-policy"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_ForwardingPolicyPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "forwarding-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).ForwardingPolicy
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_FragmentTotalDropsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/fragment-total-drops YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_FragmentTotalDropsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_FragmentTotalDropsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/fragment-total-drops YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_FragmentTotalDropsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/fragment-total-drops"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/fragment-total-drops"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_FragmentTotalDropsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fragment-total-drops"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).FragmentTotalDrops
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/fragment-total-drops"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/fragment-total-drops"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_FragmentTotalDropsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fragment-total-drops"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).FragmentTotalDrops
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_IncorrectSoftwareStatePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/incorrect-software-state YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_IncorrectSoftwareStatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_IncorrectSoftwareStatePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/incorrect-software-state YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_IncorrectSoftwareStatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/incorrect-software-state"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/incorrect-software-state"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_IncorrectSoftwareStatePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "incorrect-software-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).IncorrectSoftwareState
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/incorrect-software-state"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/incorrect-software-state"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_IncorrectSoftwareStatePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "incorrect-software-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).IncorrectSoftwareState
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_InvalidPacketPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/invalid-packet YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_InvalidPacketPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_InvalidPacketPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/invalid-packet YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_InvalidPacketPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/invalid-packet"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/invalid-packet"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_InvalidPacketPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "invalid-packet"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).InvalidPacket
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/invalid-packet"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/invalid-packet"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_InvalidPacketPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "invalid-packet"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).InvalidPacket
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_LookupAggregatePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/lookup-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_LookupAggregatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_LookupAggregatePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/lookup-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_LookupAggregatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/lookup-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/lookup-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_LookupAggregatePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lookup-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).LookupAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/lookup-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/lookup-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_LookupAggregatePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lookup-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).LookupAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoLabelPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/no-label YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoLabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoLabelPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/no-label YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoLabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/no-label"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/no-label"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoLabelPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "no-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).NoLabel
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/no-label"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/no-label"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoLabelPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "no-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).NoLabel
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoNexthopPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/no-nexthop YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoNexthopPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoNexthopPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/no-nexthop YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoNexthopPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/no-nexthop"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/no-nexthop"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoNexthopPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "no-nexthop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).NoNexthop
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/no-nexthop"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/no-nexthop"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoNexthopPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "no-nexthop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).NoNexthop
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoRoutePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/no-route YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoRoutePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoRoutePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/no-route YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoRoutePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/no-route"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/no-route"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoRoutePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "no-route"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).NoRoute
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/no-route"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/no-route"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoRoutePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "no-route"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).NoRoute
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_OversubscriptionPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/oversubscription YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_OversubscriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_OversubscriptionPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/oversubscription YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_OversubscriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/oversubscription"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/oversubscription"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_OversubscriptionPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oversubscription"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).Oversubscription
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/oversubscription"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/oversubscription"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_OversubscriptionPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oversubscription"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).Oversubscription
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_RateLimitPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/rate-limit YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_RateLimitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_RateLimitPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/rate-limit YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_RateLimitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/rate-limit"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/rate-limit"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_RateLimitPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "rate-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).RateLimit
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/rate-limit"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/rate-limit"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_RateLimitPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "rate-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).RateLimit
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPathAny struct {
	*ygnmi.NodePath
}

// AclDrops (leaf): Packets dropped due to firewall or acl terms.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/acl-drops"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/acl-drops"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPath) AclDrops() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_AclDropsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_AclDropsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "acl-drops"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AclDrops (leaf): Packets dropped due to firewall or acl terms.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/acl-drops"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/acl-drops"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPathAny) AclDrops() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_AclDropsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_AclDropsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "acl-drops"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ForwardingPolicy (leaf): Packets dropped due to either a filter applied as part of a forwarding
// policy or dropped due to a policy-based-routing policy lookup.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/forwarding-policy"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/forwarding-policy"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPath) ForwardingPolicy() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_ForwardingPolicyPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_ForwardingPolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "forwarding-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ForwardingPolicy (leaf): Packets dropped due to either a filter applied as part of a forwarding
// policy or dropped due to a policy-based-routing policy lookup.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/forwarding-policy"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/forwarding-policy"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPathAny) ForwardingPolicy() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_ForwardingPolicyPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_ForwardingPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "forwarding-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FragmentTotalDrops (leaf): Total number of packets dropped that could not be fragmented by NPU
// due to DF bit.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fragment-total-drops"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/fragment-total-drops"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPath) FragmentTotalDrops() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_FragmentTotalDropsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_FragmentTotalDropsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fragment-total-drops"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FragmentTotalDrops (leaf): Total number of packets dropped that could not be fragmented by NPU
// due to DF bit.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fragment-total-drops"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/fragment-total-drops"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPathAny) FragmentTotalDrops() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_FragmentTotalDropsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_FragmentTotalDropsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fragment-total-drops"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IncorrectSoftwareState (leaf): Packets dropped due to any incorrect or invalid software state of the
// forwarding structures during lookup.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/incorrect-software-state"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/incorrect-software-state"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPath) IncorrectSoftwareState() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_IncorrectSoftwareStatePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_IncorrectSoftwareStatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "incorrect-software-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IncorrectSoftwareState (leaf): Packets dropped due to any incorrect or invalid software state of the
// forwarding structures during lookup.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/incorrect-software-state"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/incorrect-software-state"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPathAny) IncorrectSoftwareState() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_IncorrectSoftwareStatePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_IncorrectSoftwareStatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "incorrect-software-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InvalidPacket (leaf): Packets dropped due to invalid packet format for ipv4, ipv6, or MPLS.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/invalid-packet"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/invalid-packet"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPath) InvalidPacket() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_InvalidPacketPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_InvalidPacketPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "invalid-packet"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InvalidPacket (leaf): Packets dropped due to invalid packet format for ipv4, ipv6, or MPLS.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/invalid-packet"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/invalid-packet"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPathAny) InvalidPacket() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_InvalidPacketPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_InvalidPacketPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "invalid-packet"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LookupAggregate (leaf): Packets dropped due to aggregate lookup drop counters - this counter
// is sometimes referred to as Normal Discards or
// ENQ_DISCARDED_PACKET_COUNTER.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/lookup-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/lookup-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPath) LookupAggregate() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_LookupAggregatePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_LookupAggregatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "lookup-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LookupAggregate (leaf): Packets dropped due to aggregate lookup drop counters - this counter
// is sometimes referred to as Normal Discards or
// ENQ_DISCARDED_PACKET_COUNTER.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/lookup-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/lookup-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPathAny) LookupAggregate() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_LookupAggregatePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_LookupAggregatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "lookup-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NoLabel (leaf): Packets dropped due to no FIB entry for this MPLS label.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/no-label"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/no-label"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPath) NoLabel() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoLabelPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoLabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "no-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NoLabel (leaf): Packets dropped due to no FIB entry for this MPLS label.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/no-label"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/no-label"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPathAny) NoLabel() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoLabelPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoLabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "no-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NoNexthop (leaf): Packets dropped due to no nexthop information - either the nexthop is
// not programmed, or there is an invalid nexthop, or there is no ARP
// information so the nexthop is in invalid state.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/no-nexthop"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/no-nexthop"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPath) NoNexthop() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoNexthopPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoNexthopPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "no-nexthop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NoNexthop (leaf): Packets dropped due to no nexthop information - either the nexthop is
// not programmed, or there is an invalid nexthop, or there is no ARP
// information so the nexthop is in invalid state.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/no-nexthop"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/no-nexthop"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPathAny) NoNexthop() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoNexthopPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoNexthopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "no-nexthop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NoRoute (leaf): Packets dropped due to no FIB entry for this ipv4 or ipv6 lookup.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/no-route"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/no-route"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPath) NoRoute() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoRoutePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoRoutePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "no-route"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NoRoute (leaf): Packets dropped due to no FIB entry for this ipv4 or ipv6 lookup.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/no-route"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/no-route"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPathAny) NoRoute() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoRoutePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoRoutePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "no-route"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Oversubscription (leaf): Number of packets dropped due to oversubscription of the
// integrated-circuit subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/oversubscription"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/oversubscription"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPath) Oversubscription() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_OversubscriptionPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_OversubscriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oversubscription"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Oversubscription (leaf): Number of packets dropped due to oversubscription of the
// integrated-circuit subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/oversubscription"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/oversubscription"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPathAny) Oversubscription() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_OversubscriptionPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_OversubscriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oversubscription"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RateLimit (leaf): Packets dropped due to rate limiters - either user configured rate
// limiters or system rate limiters in the forwarding path.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/rate-limit"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/rate-limit"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPath) RateLimit() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_RateLimitPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_RateLimitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "rate-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RateLimit (leaf): Packets dropped due to rate limiters - either user configured rate
// limiters or system rate limiters in the forwarding path.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/rate-limit"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/rate-limit"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPathAny) RateLimit() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_RateLimitPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_RateLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "rate-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_IncorrectStatePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/incorrect-state YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_IncorrectStatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_IncorrectStatePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/incorrect-state YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_IncorrectStatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/incorrect-state"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/incorrect-state"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_IncorrectStatePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "incorrect-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock).IncorrectState
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/incorrect-state"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/incorrect-state"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_IncorrectStatePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "incorrect-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock).IncorrectState
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_LookupQueuePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/lookup-queue YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_LookupQueuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_LookupQueuePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/lookup-queue YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_LookupQueuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/lookup-queue"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/lookup-queue"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_LookupQueuePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lookup-queue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock).LookupQueue
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/lookup-queue"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/lookup-queue"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_LookupQueuePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lookup-queue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock).LookupQueue
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_MemoryLimitPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/memory-limit YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_MemoryLimitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_MemoryLimitPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/memory-limit YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_MemoryLimitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/memory-limit"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/memory-limit"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_MemoryLimitPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "memory-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock).MemoryLimit
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/memory-limit"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/memory-limit"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_MemoryLimitPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "memory-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock).MemoryLimit
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_OversubscriptionPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/oversubscription YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_OversubscriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_OversubscriptionPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/oversubscription YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_OversubscriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/oversubscription"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/oversubscription"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_OversubscriptionPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oversubscription"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock).Oversubscription
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/oversubscription"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/oversubscription"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_OversubscriptionPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oversubscription"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock).Oversubscription
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlockPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/queueing-block YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlockPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlockPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/queueing-block YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlockPathAny struct {
	*ygnmi.NodePath
}

// IncorrectState (leaf): Packets dropped due to hardware of software incorrect state of VOQs,
// or fabric queues, or interface queues.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/incorrect-state"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/incorrect-state"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlockPath) IncorrectState() *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_IncorrectStatePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_IncorrectStatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "incorrect-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IncorrectState (leaf): Packets dropped due to hardware of software incorrect state of VOQs,
// or fabric queues, or interface queues.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/incorrect-state"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/incorrect-state"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlockPathAny) IncorrectState() *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_IncorrectStatePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_IncorrectStatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "incorrect-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LookupQueue (leaf): Packets dropped in either the lookup or recirculation path.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/lookup-queue"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/lookup-queue"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlockPath) LookupQueue() *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_LookupQueuePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_LookupQueuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "lookup-queue"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LookupQueue (leaf): Packets dropped in either the lookup or recirculation path.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/lookup-queue"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/lookup-queue"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlockPathAny) LookupQueue() *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_LookupQueuePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_LookupQueuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "lookup-queue"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MemoryLimit (leaf): Packets dropped due to running out of the queue memory.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/memory-limit"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/memory-limit"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlockPath) MemoryLimit() *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_MemoryLimitPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_MemoryLimitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "memory-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MemoryLimit (leaf): Packets dropped due to running out of the queue memory.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/memory-limit"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/memory-limit"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlockPathAny) MemoryLimit() *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_MemoryLimitPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_MemoryLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "memory-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Oversubscription (leaf): Number of packets dropped due to oversubscription of the
// integrated-circuit subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/oversubscription"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/oversubscription"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlockPath) Oversubscription() *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_OversubscriptionPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_OversubscriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oversubscription"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Oversubscription (leaf): Number of packets dropped due to oversubscription of the
// integrated-circuit subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/oversubscription"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/oversubscription"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlockPathAny) Oversubscription() *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_OversubscriptionPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_OversubscriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oversubscription"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlockPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock](
		"Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlockPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock](
		"Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_VendorPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/vendor YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_VendorPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Drop_VendorPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/vendor YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_VendorPathAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_VendorPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_Vendor] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_Vendor](
		"Component_IntegratedCircuit_PipelineCounters_Drop_Vendor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_VendorPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_Vendor] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_Vendor](
		"Component_IntegratedCircuit_PipelineCounters_Drop_Vendor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_ErrorsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_ErrorsPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_ErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_ErrorsPathAny struct {
	*ygnmi.NodePath
}

// FabricBlockErrorAny (list): An individual error within the fabric block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "fabric-block/fabric-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error"
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPath) FabricBlockErrorAny() *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"fabric-block", "fabric-block-error"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// FabricBlockErrorAny (list): An individual error within the fabric block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "fabric-block/fabric-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error"
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPathAny) FabricBlockErrorAny() *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"fabric-block", "fabric-block-error"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// FabricBlockError (list): An individual error within the fabric block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "fabric-block/fabric-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error"
//
//	Name: string
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPath) FabricBlockError(Name string) *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"fabric-block", "fabric-block-error"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// FabricBlockError (list): An individual error within the fabric block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "fabric-block/fabric-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error"
//
//	Name: string
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPathAny) FabricBlockError(Name string) *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"fabric-block", "fabric-block-error"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// FabricBlockErrorMap (list): An individual error within the fabric block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "fabric-block/fabric-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error"
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPath) FabricBlockErrorMap() *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathMap {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"fabric-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// FabricBlockErrorMap (list): An individual error within the fabric block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "fabric-block/fabric-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error"
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPathAny) FabricBlockErrorMap() *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathMapAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"fabric-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// HostInterfaceErrorAny (list): An individual error within the host interface block. Each error
// counter is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "host-interface-block/host-interface-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error"
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPath) HostInterfaceErrorAny() *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-interface-block", "host-interface-error"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// HostInterfaceErrorAny (list): An individual error within the host interface block. Each error
// counter is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "host-interface-block/host-interface-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error"
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPathAny) HostInterfaceErrorAny() *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-interface-block", "host-interface-error"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// HostInterfaceError (list): An individual error within the host interface block. Each error
// counter is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "host-interface-block/host-interface-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error"
//
//	Name: string
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPath) HostInterfaceError(Name string) *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-interface-block", "host-interface-error"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// HostInterfaceError (list): An individual error within the host interface block. Each error
// counter is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "host-interface-block/host-interface-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error"
//
//	Name: string
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPathAny) HostInterfaceError(Name string) *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-interface-block", "host-interface-error"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// HostInterfaceErrorMap (list): An individual error within the host interface block. Each error
// counter is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "host-interface-block/host-interface-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error"
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPath) HostInterfaceErrorMap() *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathMap {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-interface-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// HostInterfaceErrorMap (list): An individual error within the host interface block. Each error
// counter is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "host-interface-block/host-interface-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error"
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPathAny) HostInterfaceErrorMap() *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathMapAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-interface-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceBlockErrorAny (list): An individual error within the interface block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interface-block/interface-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error"
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPath) InterfaceBlockErrorAny() *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-block", "interface-block-error"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// InterfaceBlockErrorAny (list): An individual error within the interface block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interface-block/interface-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error"
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPathAny) InterfaceBlockErrorAny() *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-block", "interface-block-error"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// InterfaceBlockError (list): An individual error within the interface block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interface-block/interface-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error"
//
//	Name: string
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPath) InterfaceBlockError(Name string) *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-block", "interface-block-error"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// InterfaceBlockError (list): An individual error within the interface block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interface-block/interface-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error"
//
//	Name: string
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPathAny) InterfaceBlockError(Name string) *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-block", "interface-block-error"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// InterfaceBlockErrorMap (list): An individual error within the interface block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interface-block/interface-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error"
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPath) InterfaceBlockErrorMap() *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathMap {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceBlockErrorMap (list): An individual error within the interface block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interface-block/interface-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error"
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPathAny) InterfaceBlockErrorMap() *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathMapAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LookupBlockErrorAny (list): An individual error within the lookup block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "lookup-block/lookup-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error"
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPath) LookupBlockErrorAny() *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lookup-block", "lookup-block-error"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// LookupBlockErrorAny (list): An individual error within the lookup block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "lookup-block/lookup-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error"
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPathAny) LookupBlockErrorAny() *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lookup-block", "lookup-block-error"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// LookupBlockError (list): An individual error within the lookup block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "lookup-block/lookup-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error"
//
//	Name: string
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPath) LookupBlockError(Name string) *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"lookup-block", "lookup-block-error"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// LookupBlockError (list): An individual error within the lookup block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "lookup-block/lookup-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error"
//
//	Name: string
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPathAny) LookupBlockError(Name string) *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lookup-block", "lookup-block-error"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// LookupBlockErrorMap (list): An individual error within the lookup block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "lookup-block/lookup-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error"
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPath) LookupBlockErrorMap() *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathMap {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"lookup-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LookupBlockErrorMap (list): An individual error within the lookup block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "lookup-block/lookup-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error"
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPathAny) LookupBlockErrorMap() *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathMapAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lookup-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// QueueingBlockErrorAny (list): An individual error within the queueing block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "queueing-block/queueing-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error"
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPath) QueueingBlockErrorAny() *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queueing-block", "queueing-block-error"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// QueueingBlockErrorAny (list): An individual error within the queueing block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "queueing-block/queueing-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error"
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPathAny) QueueingBlockErrorAny() *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queueing-block", "queueing-block-error"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// QueueingBlockError (list): An individual error within the queueing block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "queueing-block/queueing-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error"
//
//	Name: string
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPath) QueueingBlockError(Name string) *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"queueing-block", "queueing-block-error"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// QueueingBlockError (list): An individual error within the queueing block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "queueing-block/queueing-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error"
//
//	Name: string
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPathAny) QueueingBlockError(Name string) *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queueing-block", "queueing-block-error"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// QueueingBlockErrorMap (list): An individual error within the queueing block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "queueing-block/queueing-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error"
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPath) QueueingBlockErrorMap() *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathMap {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"queueing-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// QueueingBlockErrorMap (list): An individual error within the queueing block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "queueing-block/queueing-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error"
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPathAny) QueueingBlockErrorMap() *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathMapAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queueing-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors](
		"Component_IntegratedCircuit_PipelineCounters_Errors",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors](
		"Component_IntegratedCircuit_PipelineCounters_Errors",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ActionPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/action YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ActionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ActionPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/action YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ActionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/action"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/action"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ActionPath) State() ygnmi.SingletonQuery[[]oc.E_FabricBlockError_Action] {
	return ygnmi.NewSingletonQuery[[]oc.E_FabricBlockError_Action](
		"Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_FabricBlockError_Action, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError).Action
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/action"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/action"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ActionPathAny) State() ygnmi.WildcardQuery[[]oc.E_FabricBlockError_Action] {
	return ygnmi.NewWildcardQuery[[]oc.E_FabricBlockError_Action](
		"Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_FabricBlockError_Action, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError).Action
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ActivePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/active YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ActivePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ActivePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/active YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ActivePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/active"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/active"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ActivePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/active"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/active"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ActivePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_CountPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/count YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_CountPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_CountPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/count YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_CountPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/count"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/count"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_CountPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "count"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError).Count
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/count"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/count"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_CountPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "count"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError).Count
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_LevelPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/level YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_LevelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_LevelPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/level YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_LevelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/level"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/level"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_LevelPath) State() ygnmi.SingletonQuery[oc.E_FabricBlockError_Level] {
	return ygnmi.NewSingletonQuery[oc.E_FabricBlockError_Level](
		"Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "level"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_FabricBlockError_Level, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError).Level
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/level"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/level"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_LevelPathAny) State() ygnmi.WildcardQuery[oc.E_FabricBlockError_Level] {
	return ygnmi.NewWildcardQuery[oc.E_FabricBlockError_Level](
		"Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "level"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_FabricBlockError_Level, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError).Level
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_NamePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/name YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_NamePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/name YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/name"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/name"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ThresholdPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/threshold YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ThresholdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ThresholdPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/threshold YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ThresholdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/threshold"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/threshold"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ThresholdPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError).Threshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/threshold"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/threshold"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ThresholdPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError).Threshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathAny struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathMap represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathMap struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathMapAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathMapAny struct {
	*ygnmi.NodePath
}

// Action (leaf-list): Error actions that are taken by the system - log, linecard reboot,
// linecard offline, NPU reset, NPU offline, gather diagnostic data,
// raise an alarm.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/action"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/action"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPath) Action() *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ActionPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ActionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "action"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Action (leaf-list): Error actions that are taken by the system - log, linecard reboot,
// linecard offline, NPU reset, NPU offline, gather diagnostic data,
// raise an alarm.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/action"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/action"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathAny) Action() *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ActionPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ActionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "action"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Active (leaf): The error is currently in an active state. When the system detects
// that the specified threshold is exceeded, this value should be set to
// true.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/active"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/active"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPath) Active() *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ActivePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ActivePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Active (leaf): The error is currently in an active state. When the system detects
// that the specified threshold is exceeded, this value should be set to
// true.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/active"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/active"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathAny) Active() *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ActivePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ActivePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Count (leaf): Total count of errors of this type.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/count"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/count"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPath) Count() *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_CountPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_CountPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "count"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Count (leaf): Total count of errors of this type.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/count"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/count"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathAny) Count() *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_CountPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_CountPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "count"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Level (leaf): The severity of the error that is being recorded by the system. This
// value can be used by a consumer to determine the action when this error
// is recorded.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/level"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/level"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPath) Level() *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_LevelPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_LevelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "level"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Level (leaf): The severity of the error that is being recorded by the system. This
// value can be used by a consumer to determine the action when this error
// is recorded.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/level"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/level"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathAny) Level() *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_LevelPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_LevelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "level"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Name of the interrupt, hardware error, or software error in the NPU.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/*/name"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPath) Name() *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_NamePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Name of the interrupt, hardware error, or software error in the NPU.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/*/name"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathAny) Name() *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_NamePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Threshold (leaf): Number of errors before a recovery action is automatically
// taken by the system.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/threshold"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/threshold"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPath) Threshold() *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ThresholdPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ThresholdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Threshold (leaf): Number of errors before a recovery action is automatically
// taken by the system.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/threshold"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/threshold"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathAny) Threshold() *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ThresholdPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError](
		"Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError](
		"Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError](
		"Component_IntegratedCircuit_PipelineCounters_Errors",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors).FabricBlockError
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-pipeline-counters:fabric-block"},
			PostRelPath: []string{"openconfig-platform-pipeline-counters:fabric-block-error"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError](
		"Component_IntegratedCircuit_PipelineCounters_Errors",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors).FabricBlockError
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-pipeline-counters:fabric-block"},
			PostRelPath: []string{"openconfig-platform-pipeline-counters:fabric-block-error"},
		},
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ActionPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/action YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ActionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ActionPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/action YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ActionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/action"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/action"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ActionPath) State() ygnmi.SingletonQuery[[]oc.E_FabricBlockError_Action] {
	return ygnmi.NewSingletonQuery[[]oc.E_FabricBlockError_Action](
		"Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_FabricBlockError_Action, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError).Action
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/action"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/action"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ActionPathAny) State() ygnmi.WildcardQuery[[]oc.E_FabricBlockError_Action] {
	return ygnmi.NewWildcardQuery[[]oc.E_FabricBlockError_Action](
		"Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_FabricBlockError_Action, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError).Action
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ActivePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/active YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ActivePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ActivePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/active YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ActivePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/active"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/active"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ActivePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/active"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/active"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ActivePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_CountPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/count YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_CountPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_CountPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/count YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_CountPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/count"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/count"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_CountPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "count"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError).Count
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/count"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/count"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_CountPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "count"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError).Count
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_LevelPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/level YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_LevelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_LevelPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/level YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_LevelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/level"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/level"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_LevelPath) State() ygnmi.SingletonQuery[oc.E_FabricBlockError_Level] {
	return ygnmi.NewSingletonQuery[oc.E_FabricBlockError_Level](
		"Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "level"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_FabricBlockError_Level, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError).Level
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/level"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/level"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_LevelPathAny) State() ygnmi.WildcardQuery[oc.E_FabricBlockError_Level] {
	return ygnmi.NewWildcardQuery[oc.E_FabricBlockError_Level](
		"Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "level"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_FabricBlockError_Level, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError).Level
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_NamePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/name YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_NamePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/name YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/name"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/name"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ThresholdPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/threshold YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ThresholdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ThresholdPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/threshold YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ThresholdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/threshold"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/threshold"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ThresholdPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError).Threshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/threshold"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/threshold"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ThresholdPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError).Threshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathAny struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathMap represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathMap struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathMapAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathMapAny struct {
	*ygnmi.NodePath
}

// Action (leaf-list): Error actions that are taken by the system - log, linecard reboot,
// linecard offline, NPU reset, NPU offline, gather diagnostic data,
// raise an alarm.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/action"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/action"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPath) Action() *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ActionPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ActionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "action"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Action (leaf-list): Error actions that are taken by the system - log, linecard reboot,
// linecard offline, NPU reset, NPU offline, gather diagnostic data,
// raise an alarm.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/action"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/action"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathAny) Action() *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ActionPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ActionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "action"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Active (leaf): The error is currently in an active state. When the system detects
// that the specified threshold is exceeded, this value should be set to
// true.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/active"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/active"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPath) Active() *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ActivePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ActivePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Active (leaf): The error is currently in an active state. When the system detects
// that the specified threshold is exceeded, this value should be set to
// true.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/active"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/active"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathAny) Active() *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ActivePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ActivePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Count (leaf): Total count of errors of this type.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/count"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/count"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPath) Count() *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_CountPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_CountPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "count"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Count (leaf): Total count of errors of this type.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/count"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/count"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathAny) Count() *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_CountPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_CountPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "count"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Level (leaf): The severity of the error that is being recorded by the system. This
// value can be used by a consumer to determine the action when this error
// is recorded.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/level"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/level"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPath) Level() *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_LevelPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_LevelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "level"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Level (leaf): The severity of the error that is being recorded by the system. This
// value can be used by a consumer to determine the action when this error
// is recorded.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/level"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/level"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathAny) Level() *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_LevelPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_LevelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "level"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Name of the interrupt, hardware error, or software error in the NPU.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/*/name"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPath) Name() *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_NamePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Name of the interrupt, hardware error, or software error in the NPU.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/*/name"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathAny) Name() *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_NamePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Threshold (leaf): Number of errors before a recovery action is automatically
// taken by the system.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/threshold"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/threshold"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPath) Threshold() *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ThresholdPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ThresholdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Threshold (leaf): Number of errors before a recovery action is automatically
// taken by the system.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/threshold"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/threshold"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathAny) Threshold() *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ThresholdPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError](
		"Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError](
		"Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError](
		"Component_IntegratedCircuit_PipelineCounters_Errors",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors).HostInterfaceError
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-pipeline-counters:host-interface-block"},
			PostRelPath: []string{"openconfig-platform-pipeline-counters:host-interface-error"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError](
		"Component_IntegratedCircuit_PipelineCounters_Errors",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors).HostInterfaceError
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-pipeline-counters:host-interface-block"},
			PostRelPath: []string{"openconfig-platform-pipeline-counters:host-interface-error"},
		},
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ActionPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/action YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ActionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ActionPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/action YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ActionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/action"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/action"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ActionPath) State() ygnmi.SingletonQuery[[]oc.E_FabricBlockError_Action] {
	return ygnmi.NewSingletonQuery[[]oc.E_FabricBlockError_Action](
		"Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_FabricBlockError_Action, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError).Action
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/action"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/action"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ActionPathAny) State() ygnmi.WildcardQuery[[]oc.E_FabricBlockError_Action] {
	return ygnmi.NewWildcardQuery[[]oc.E_FabricBlockError_Action](
		"Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_FabricBlockError_Action, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError).Action
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ActivePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/active YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ActivePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ActivePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/active YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ActivePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/active"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/active"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ActivePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/active"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/active"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ActivePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_CountPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/count YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_CountPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_CountPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/count YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_CountPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/count"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/count"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_CountPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "count"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError).Count
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/count"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/count"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_CountPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "count"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError).Count
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_LevelPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/level YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_LevelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_LevelPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/level YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_LevelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/level"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/level"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_LevelPath) State() ygnmi.SingletonQuery[oc.E_FabricBlockError_Level] {
	return ygnmi.NewSingletonQuery[oc.E_FabricBlockError_Level](
		"Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "level"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_FabricBlockError_Level, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError).Level
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/level"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/level"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_LevelPathAny) State() ygnmi.WildcardQuery[oc.E_FabricBlockError_Level] {
	return ygnmi.NewWildcardQuery[oc.E_FabricBlockError_Level](
		"Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "level"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_FabricBlockError_Level, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError).Level
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_NamePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/name YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_NamePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/name YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/name"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/name"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ThresholdPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/threshold YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ThresholdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ThresholdPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/threshold YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ThresholdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/threshold"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/threshold"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ThresholdPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError).Threshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/threshold"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/threshold"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ThresholdPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError).Threshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathAny struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathMap represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathMap struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathMapAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathMapAny struct {
	*ygnmi.NodePath
}

// Action (leaf-list): Error actions that are taken by the system - log, linecard reboot,
// linecard offline, NPU reset, NPU offline, gather diagnostic data,
// raise an alarm.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/action"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/action"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPath) Action() *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ActionPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ActionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "action"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Action (leaf-list): Error actions that are taken by the system - log, linecard reboot,
// linecard offline, NPU reset, NPU offline, gather diagnostic data,
// raise an alarm.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/action"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/action"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathAny) Action() *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ActionPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ActionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "action"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Active (leaf): The error is currently in an active state. When the system detects
// that the specified threshold is exceeded, this value should be set to
// true.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/active"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/active"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPath) Active() *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ActivePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ActivePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Active (leaf): The error is currently in an active state. When the system detects
// that the specified threshold is exceeded, this value should be set to
// true.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/active"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/active"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathAny) Active() *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ActivePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ActivePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Count (leaf): Total count of errors of this type.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/count"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/count"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPath) Count() *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_CountPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_CountPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "count"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Count (leaf): Total count of errors of this type.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/count"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/count"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathAny) Count() *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_CountPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_CountPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "count"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Level (leaf): The severity of the error that is being recorded by the system. This
// value can be used by a consumer to determine the action when this error
// is recorded.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/level"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/level"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPath) Level() *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_LevelPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_LevelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "level"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Level (leaf): The severity of the error that is being recorded by the system. This
// value can be used by a consumer to determine the action when this error
// is recorded.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/level"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/level"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathAny) Level() *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_LevelPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_LevelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "level"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Name of the interrupt, hardware error, or software error in the NPU.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/*/name"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPath) Name() *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_NamePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Name of the interrupt, hardware error, or software error in the NPU.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/*/name"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathAny) Name() *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_NamePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Threshold (leaf): Number of errors before a recovery action is automatically
// taken by the system.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/threshold"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/threshold"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPath) Threshold() *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ThresholdPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ThresholdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Threshold (leaf): Number of errors before a recovery action is automatically
// taken by the system.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/threshold"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/threshold"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathAny) Threshold() *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ThresholdPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError](
		"Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError](
		"Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError](
		"Component_IntegratedCircuit_PipelineCounters_Errors",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors).InterfaceBlockError
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-pipeline-counters:interface-block"},
			PostRelPath: []string{"openconfig-platform-pipeline-counters:interface-block-error"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError](
		"Component_IntegratedCircuit_PipelineCounters_Errors",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors).InterfaceBlockError
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-pipeline-counters:interface-block"},
			PostRelPath: []string{"openconfig-platform-pipeline-counters:interface-block-error"},
		},
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ActionPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/action YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ActionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ActionPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/action YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ActionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/action"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/action"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ActionPath) State() ygnmi.SingletonQuery[[]oc.E_FabricBlockError_Action] {
	return ygnmi.NewSingletonQuery[[]oc.E_FabricBlockError_Action](
		"Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_FabricBlockError_Action, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError).Action
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/action"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/action"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ActionPathAny) State() ygnmi.WildcardQuery[[]oc.E_FabricBlockError_Action] {
	return ygnmi.NewWildcardQuery[[]oc.E_FabricBlockError_Action](
		"Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_FabricBlockError_Action, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError).Action
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ActivePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/active YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ActivePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ActivePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/active YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ActivePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/active"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/active"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ActivePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/active"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/active"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ActivePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_CountPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/count YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_CountPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_CountPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/count YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_CountPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/count"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/count"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_CountPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "count"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError).Count
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/count"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/count"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_CountPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "count"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError).Count
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_LevelPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/level YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_LevelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_LevelPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/level YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_LevelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/level"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/level"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_LevelPath) State() ygnmi.SingletonQuery[oc.E_FabricBlockError_Level] {
	return ygnmi.NewSingletonQuery[oc.E_FabricBlockError_Level](
		"Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "level"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_FabricBlockError_Level, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError).Level
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/level"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/level"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_LevelPathAny) State() ygnmi.WildcardQuery[oc.E_FabricBlockError_Level] {
	return ygnmi.NewWildcardQuery[oc.E_FabricBlockError_Level](
		"Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "level"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_FabricBlockError_Level, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError).Level
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_NamePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/name YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_NamePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/name YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/name"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/name"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ThresholdPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/threshold YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ThresholdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ThresholdPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/threshold YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ThresholdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/threshold"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/threshold"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ThresholdPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError).Threshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/threshold"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/threshold"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ThresholdPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError).Threshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathAny struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathMap represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathMap struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathMapAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathMapAny struct {
	*ygnmi.NodePath
}

// Action (leaf-list): Error actions that are taken by the system - log, linecard reboot,
// linecard offline, NPU reset, NPU offline, gather diagnostic data,
// raise an alarm.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/action"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/action"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPath) Action() *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ActionPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ActionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "action"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Action (leaf-list): Error actions that are taken by the system - log, linecard reboot,
// linecard offline, NPU reset, NPU offline, gather diagnostic data,
// raise an alarm.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/action"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/action"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathAny) Action() *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ActionPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ActionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "action"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Active (leaf): The error is currently in an active state. When the system detects
// that the specified threshold is exceeded, this value should be set to
// true.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/active"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/active"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPath) Active() *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ActivePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ActivePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Active (leaf): The error is currently in an active state. When the system detects
// that the specified threshold is exceeded, this value should be set to
// true.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/active"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/active"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathAny) Active() *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ActivePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ActivePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Count (leaf): Total count of errors of this type.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/count"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/count"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPath) Count() *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_CountPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_CountPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "count"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Count (leaf): Total count of errors of this type.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/count"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/count"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathAny) Count() *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_CountPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_CountPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "count"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Level (leaf): The severity of the error that is being recorded by the system. This
// value can be used by a consumer to determine the action when this error
// is recorded.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/level"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/level"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPath) Level() *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_LevelPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_LevelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "level"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Level (leaf): The severity of the error that is being recorded by the system. This
// value can be used by a consumer to determine the action when this error
// is recorded.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/level"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/level"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathAny) Level() *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_LevelPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_LevelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "level"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Name of the interrupt, hardware error, or software error in the NPU.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/*/name"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPath) Name() *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_NamePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Name of the interrupt, hardware error, or software error in the NPU.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/*/name"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathAny) Name() *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_NamePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Threshold (leaf): Number of errors before a recovery action is automatically
// taken by the system.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/threshold"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/threshold"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPath) Threshold() *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ThresholdPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ThresholdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Threshold (leaf): Number of errors before a recovery action is automatically
// taken by the system.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/threshold"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/threshold"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathAny) Threshold() *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ThresholdPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError](
		"Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError](
		"Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError](
		"Component_IntegratedCircuit_PipelineCounters_Errors",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors).LookupBlockError
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-pipeline-counters:lookup-block"},
			PostRelPath: []string{"openconfig-platform-pipeline-counters:lookup-block-error"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError](
		"Component_IntegratedCircuit_PipelineCounters_Errors",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors).LookupBlockError
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-pipeline-counters:lookup-block"},
			PostRelPath: []string{"openconfig-platform-pipeline-counters:lookup-block-error"},
		},
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ActionPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/action YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ActionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ActionPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/action YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ActionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/action"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/action"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ActionPath) State() ygnmi.SingletonQuery[[]oc.E_FabricBlockError_Action] {
	return ygnmi.NewSingletonQuery[[]oc.E_FabricBlockError_Action](
		"Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_FabricBlockError_Action, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError).Action
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/action"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/action"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ActionPathAny) State() ygnmi.WildcardQuery[[]oc.E_FabricBlockError_Action] {
	return ygnmi.NewWildcardQuery[[]oc.E_FabricBlockError_Action](
		"Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_FabricBlockError_Action, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError).Action
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ActivePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/active YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ActivePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ActivePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/active YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ActivePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/active"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/active"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ActivePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/active"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/active"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ActivePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_CountPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/count YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_CountPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_CountPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/count YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_CountPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/count"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/count"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_CountPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "count"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError).Count
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/count"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/count"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_CountPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "count"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError).Count
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_LevelPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/level YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_LevelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_LevelPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/level YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_LevelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/level"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/level"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_LevelPath) State() ygnmi.SingletonQuery[oc.E_FabricBlockError_Level] {
	return ygnmi.NewSingletonQuery[oc.E_FabricBlockError_Level](
		"Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "level"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_FabricBlockError_Level, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError).Level
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/level"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/level"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_LevelPathAny) State() ygnmi.WildcardQuery[oc.E_FabricBlockError_Level] {
	return ygnmi.NewWildcardQuery[oc.E_FabricBlockError_Level](
		"Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "level"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_FabricBlockError_Level, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError).Level
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_NamePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/name YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_NamePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/name YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/name"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/name"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ThresholdPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/threshold YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ThresholdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ThresholdPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/threshold YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ThresholdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/threshold"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/threshold"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ThresholdPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError).Threshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/threshold"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/threshold"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ThresholdPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError).Threshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathAny struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathMap represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathMap struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathMapAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathMapAny struct {
	*ygnmi.NodePath
}

// Action (leaf-list): Error actions that are taken by the system - log, linecard reboot,
// linecard offline, NPU reset, NPU offline, gather diagnostic data,
// raise an alarm.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/action"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/action"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPath) Action() *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ActionPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ActionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "action"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Action (leaf-list): Error actions that are taken by the system - log, linecard reboot,
// linecard offline, NPU reset, NPU offline, gather diagnostic data,
// raise an alarm.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/action"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/action"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathAny) Action() *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ActionPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ActionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "action"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Active (leaf): The error is currently in an active state. When the system detects
// that the specified threshold is exceeded, this value should be set to
// true.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/active"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/active"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPath) Active() *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ActivePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ActivePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Active (leaf): The error is currently in an active state. When the system detects
// that the specified threshold is exceeded, this value should be set to
// true.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/active"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/active"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathAny) Active() *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ActivePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ActivePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Count (leaf): Total count of errors of this type.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/count"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/count"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPath) Count() *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_CountPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_CountPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "count"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Count (leaf): Total count of errors of this type.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/count"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/count"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathAny) Count() *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_CountPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_CountPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "count"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Level (leaf): The severity of the error that is being recorded by the system. This
// value can be used by a consumer to determine the action when this error
// is recorded.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/level"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/level"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPath) Level() *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_LevelPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_LevelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "level"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Level (leaf): The severity of the error that is being recorded by the system. This
// value can be used by a consumer to determine the action when this error
// is recorded.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/level"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/level"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathAny) Level() *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_LevelPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_LevelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "level"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Name of the interrupt, hardware error, or software error in the NPU.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/*/name"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPath) Name() *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_NamePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Name of the interrupt, hardware error, or software error in the NPU.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/*/name"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathAny) Name() *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_NamePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Threshold (leaf): Number of errors before a recovery action is automatically
// taken by the system.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/threshold"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/threshold"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPath) Threshold() *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ThresholdPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ThresholdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Threshold (leaf): Number of errors before a recovery action is automatically
// taken by the system.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/threshold"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/threshold"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathAny) Threshold() *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ThresholdPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError](
		"Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError](
		"Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError](
		"Component_IntegratedCircuit_PipelineCounters_Errors",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors).QueueingBlockError
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-pipeline-counters:queueing-block"},
			PostRelPath: []string{"openconfig-platform-pipeline-counters:queueing-block-error"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError](
		"Component_IntegratedCircuit_PipelineCounters_Errors",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors).QueueingBlockError
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-pipeline-counters:queueing-block"},
			PostRelPath: []string{"openconfig-platform-pipeline-counters:queueing-block-error"},
		},
	)
}

// Component_IntegratedCircuit_PipelineCounters_PacketPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_PacketPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_PacketPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_PacketPathAny struct {
	*ygnmi.NodePath
}

// FabricBlock (container): The IC fabric block subsystem connects the IC to the external
// systems fabric subsystem
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "fabric-block"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block"
func (n *Component_IntegratedCircuit_PipelineCounters_PacketPath) FabricBlock() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"fabric-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// FabricBlock (container): The IC fabric block subsystem connects the IC to the external
// systems fabric subsystem
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "fabric-block"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block"
func (n *Component_IntegratedCircuit_PipelineCounters_PacketPathAny) FabricBlock() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"fabric-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// HostInterfaceBlock (container): The IC host interface block subsystem connects the IC to the
// external systems host or control subsystem
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "host-interface-block"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block"
func (n *Component_IntegratedCircuit_PipelineCounters_PacketPath) HostInterfaceBlock() *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-interface-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// HostInterfaceBlock (container): The IC host interface block subsystem connects the IC to the
// external systems host or control subsystem
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "host-interface-block"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block"
func (n *Component_IntegratedCircuit_PipelineCounters_PacketPathAny) HostInterfaceBlock() *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-interface-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceBlock (container): The IC interface subsystem connects the IC to the external PHY or
// MAC.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interface-block"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/interface-block"
func (n *Component_IntegratedCircuit_PipelineCounters_PacketPath) InterfaceBlock() *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlockPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlockPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceBlock (container): The IC interface subsystem connects the IC to the external PHY or
// MAC.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interface-block"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/interface-block"
func (n *Component_IntegratedCircuit_PipelineCounters_PacketPathAny) InterfaceBlock() *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlockPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlockPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LookupBlock (container): The IC lookup subsystem perform the next hop lookup of the packet
// and other forwarding features such as firewall filters.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "lookup-block"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block"
func (n *Component_IntegratedCircuit_PipelineCounters_PacketPath) LookupBlock() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"lookup-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LookupBlock (container): The IC lookup subsystem perform the next hop lookup of the packet
// and other forwarding features such as firewall filters.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "lookup-block"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block"
func (n *Component_IntegratedCircuit_PipelineCounters_PacketPathAny) LookupBlock() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lookup-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// QueueingBlock (container): The IC queueing subsystem buffers the packet while processing it
// and queues the packet for delivery to the next stage
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "queueing-block"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block"
func (n *Component_IntegratedCircuit_PipelineCounters_PacketPath) QueueingBlock() *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"queueing-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// QueueingBlock (container): The IC queueing subsystem buffers the packet while processing it
// and queues the packet for delivery to the next stage
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "queueing-block"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block"
func (n *Component_IntegratedCircuit_PipelineCounters_PacketPathAny) QueueingBlock() *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queueing-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_PacketPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet](
		"Component_IntegratedCircuit_PipelineCounters_Packet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_PacketPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet](
		"Component_IntegratedCircuit_PipelineCounters_Packet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InBytesPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InBytesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InBytesPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InBytesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InBytesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).InBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InBytesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).InBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InCellsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-cells YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InCellsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InCellsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-cells YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InCellsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InCellsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-cells"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).InCells
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InCellsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-cells"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).InCells
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InHighPriorityCellsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-high-priority-cells YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InHighPriorityCellsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InHighPriorityCellsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-high-priority-cells YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InHighPriorityCellsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-high-priority-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-high-priority-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InHighPriorityCellsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-high-priority-cells"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).InHighPriorityCells
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-high-priority-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-high-priority-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InHighPriorityCellsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-high-priority-cells"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).InHighPriorityCells
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InHighPriorityPacketsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-high-priority-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InHighPriorityPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InHighPriorityPacketsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-high-priority-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InHighPriorityPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-high-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-high-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InHighPriorityPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-high-priority-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).InHighPriorityPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-high-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-high-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InHighPriorityPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-high-priority-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).InHighPriorityPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InLowPriorityCellsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-low-priority-cells YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InLowPriorityCellsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InLowPriorityCellsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-low-priority-cells YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InLowPriorityCellsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-low-priority-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-low-priority-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InLowPriorityCellsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-low-priority-cells"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).InLowPriorityCells
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-low-priority-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-low-priority-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InLowPriorityCellsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-low-priority-cells"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).InLowPriorityCells
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InLowPriorityPacketsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-low-priority-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InLowPriorityPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InLowPriorityPacketsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-low-priority-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InLowPriorityPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-low-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-low-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InLowPriorityPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-low-priority-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).InLowPriorityPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-low-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-low-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InLowPriorityPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-low-priority-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).InLowPriorityPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InPacketsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InPacketsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).InPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).InPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutBytesPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutBytesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutBytesPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutBytesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutBytesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).OutBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutBytesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).OutBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutCellsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-cells YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutCellsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutCellsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-cells YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutCellsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutCellsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-cells"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).OutCells
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutCellsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-cells"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).OutCells
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutHighPriorityCellsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-high-priority-cells YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutHighPriorityCellsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutHighPriorityCellsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-high-priority-cells YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutHighPriorityCellsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-high-priority-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-high-priority-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutHighPriorityCellsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-high-priority-cells"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).OutHighPriorityCells
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-high-priority-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-high-priority-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutHighPriorityCellsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-high-priority-cells"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).OutHighPriorityCells
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutHighPriorityPacketsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-high-priority-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutHighPriorityPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutHighPriorityPacketsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-high-priority-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutHighPriorityPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-high-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-high-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutHighPriorityPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-high-priority-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).OutHighPriorityPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-high-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-high-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutHighPriorityPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-high-priority-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).OutHighPriorityPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutLowPriorityCellsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-low-priority-cells YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutLowPriorityCellsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutLowPriorityCellsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-low-priority-cells YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutLowPriorityCellsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-low-priority-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-low-priority-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutLowPriorityCellsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-low-priority-cells"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).OutLowPriorityCells
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-low-priority-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-low-priority-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutLowPriorityCellsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-low-priority-cells"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).OutLowPriorityCells
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutLowPriorityPacketsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-low-priority-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutLowPriorityPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutLowPriorityPacketsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-low-priority-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutLowPriorityPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-low-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-low-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutLowPriorityPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-low-priority-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).OutLowPriorityPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-low-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-low-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutLowPriorityPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-low-priority-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).OutLowPriorityPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutPacketsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutPacketsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).OutPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).OutPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPathAny struct {
	*ygnmi.NodePath
}

// InBytes (leaf): Incoming bytes towards the integrated-circuit interface
// subsystem block from the line interfaces or fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPath) InBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InBytesPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InBytesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InBytes (leaf): Incoming bytes towards the integrated-circuit interface
// subsystem block from the line interfaces or fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPathAny) InBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InBytesPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InBytesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InCells (leaf): Incoming cells towards the integrated-circuit fabric
// subsystem block from the previous NPU sub block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPath) InCells() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InCellsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InCellsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-cells"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InCells (leaf): Incoming cells towards the integrated-circuit fabric
// subsystem block from the previous NPU sub block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPathAny) InCells() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InCellsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InCellsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-cells"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InHighPriorityCells (leaf): Incoming high priority cells towards the integrated-circuit fabric
// subsystem block from the previous NPU sub block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-high-priority-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-high-priority-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPath) InHighPriorityCells() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InHighPriorityCellsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InHighPriorityCellsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-high-priority-cells"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InHighPriorityCells (leaf): Incoming high priority cells towards the integrated-circuit fabric
// subsystem block from the previous NPU sub block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-high-priority-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-high-priority-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPathAny) InHighPriorityCells() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InHighPriorityCellsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InHighPriorityCellsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-high-priority-cells"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InHighPriorityPackets (leaf): Incoming high priority packets towards the integrated-circuit
// fabric subsystem block from the previous NPU sub block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-high-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-high-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPath) InHighPriorityPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InHighPriorityPacketsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InHighPriorityPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-high-priority-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InHighPriorityPackets (leaf): Incoming high priority packets towards the integrated-circuit
// fabric subsystem block from the previous NPU sub block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-high-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-high-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPathAny) InHighPriorityPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InHighPriorityPacketsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InHighPriorityPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-high-priority-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InLowPriorityCells (leaf): Incoming low priority cells towards the integrated-circuit fabric
// subsystem block from the previous NPU sub block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-low-priority-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-low-priority-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPath) InLowPriorityCells() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InLowPriorityCellsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InLowPriorityCellsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-low-priority-cells"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InLowPriorityCells (leaf): Incoming low priority cells towards the integrated-circuit fabric
// subsystem block from the previous NPU sub block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-low-priority-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-low-priority-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPathAny) InLowPriorityCells() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InLowPriorityCellsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InLowPriorityCellsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-low-priority-cells"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InLowPriorityPackets (leaf): Incoming low priority packets towards the integrated-circuit fabric
// subsystem block from the previous NPU sub block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-low-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-low-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPath) InLowPriorityPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InLowPriorityPacketsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InLowPriorityPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-low-priority-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InLowPriorityPackets (leaf): Incoming low priority packets towards the integrated-circuit fabric
// subsystem block from the previous NPU sub block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-low-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-low-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPathAny) InLowPriorityPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InLowPriorityPacketsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InLowPriorityPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-low-priority-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPackets (leaf): Incoming packets towards the integrated-circuit interface
// subsystem block from the line interfaces or fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPath) InPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InPacketsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPackets (leaf): Incoming packets towards the integrated-circuit interface
// subsystem block from the line interfaces or fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPathAny) InPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InPacketsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutBytes (leaf): Outgoing bytes towards the line interfaces or fabric from the
// integrated-circuit interface subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPath) OutBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutBytesPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutBytesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutBytes (leaf): Outgoing bytes towards the line interfaces or fabric from the
// integrated-circuit interface subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPathAny) OutBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutBytesPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutBytesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutCells (leaf): Outgoing cells towards the fabric from the
// integrated-circuit fabric subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPath) OutCells() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutCellsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutCellsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-cells"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutCells (leaf): Outgoing cells towards the fabric from the
// integrated-circuit fabric subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPathAny) OutCells() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutCellsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutCellsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-cells"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutHighPriorityCells (leaf): Outgoing high priority cells towards the fabric from the
// integrated-circuit fabric subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-high-priority-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-high-priority-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPath) OutHighPriorityCells() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutHighPriorityCellsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutHighPriorityCellsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-high-priority-cells"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutHighPriorityCells (leaf): Outgoing high priority cells towards the fabric from the
// integrated-circuit fabric subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-high-priority-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-high-priority-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPathAny) OutHighPriorityCells() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutHighPriorityCellsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutHighPriorityCellsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-high-priority-cells"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutHighPriorityPackets (leaf): Outgoing high priority packets towards the fabric from the
// integrated-circuit fabric subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-high-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-high-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPath) OutHighPriorityPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutHighPriorityPacketsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutHighPriorityPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-high-priority-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutHighPriorityPackets (leaf): Outgoing high priority packets towards the fabric from the
// integrated-circuit fabric subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-high-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-high-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPathAny) OutHighPriorityPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutHighPriorityPacketsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutHighPriorityPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-high-priority-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLowPriorityCells (leaf): Outgoing low priority cells towards the fabric from the
// integrated-circuit fabric subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-low-priority-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-low-priority-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPath) OutLowPriorityCells() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutLowPriorityCellsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutLowPriorityCellsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-low-priority-cells"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLowPriorityCells (leaf): Outgoing low priority cells towards the fabric from the
// integrated-circuit fabric subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-low-priority-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-low-priority-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPathAny) OutLowPriorityCells() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutLowPriorityCellsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutLowPriorityCellsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-low-priority-cells"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLowPriorityPackets (leaf): Outgoing low priority packets towards the fabric from the
// integrated-circuit fabric subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-low-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-low-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPath) OutLowPriorityPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutLowPriorityPacketsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutLowPriorityPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-low-priority-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLowPriorityPackets (leaf): Outgoing low priority packets towards the fabric from the
// integrated-circuit fabric subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-low-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-low-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPathAny) OutLowPriorityPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutLowPriorityPacketsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutLowPriorityPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-low-priority-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPackets (leaf): Outgoing packets towards the line interfaces or fabric from the
// integrated-circuit interface subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPath) OutPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutPacketsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPackets (leaf): Outgoing packets towards the line interfaces or fabric from the
// integrated-circuit interface subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPathAny) OutPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutPacketsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_FragmentPuntPktsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/fragment-punt-pkts YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_FragmentPuntPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_FragmentPuntPktsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/fragment-punt-pkts YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_FragmentPuntPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/fragment-punt-pkts"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/fragment-punt-pkts"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_FragmentPuntPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fragment-punt-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock).FragmentPuntPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/fragment-punt-pkts"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/fragment-punt-pkts"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_FragmentPuntPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fragment-punt-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock).FragmentPuntPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InBytesPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InBytesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InBytesPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InBytesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InBytesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock).InBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InBytesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock).InBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InHighPriorityPacketsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-high-priority-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InHighPriorityPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InHighPriorityPacketsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-high-priority-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InHighPriorityPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-high-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-high-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InHighPriorityPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-high-priority-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock).InHighPriorityPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-high-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-high-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InHighPriorityPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-high-priority-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock).InHighPriorityPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InLowPriorityPacketsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-low-priority-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InLowPriorityPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InLowPriorityPacketsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-low-priority-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InLowPriorityPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-low-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-low-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InLowPriorityPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-low-priority-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock).InLowPriorityPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-low-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-low-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InLowPriorityPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-low-priority-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock).InLowPriorityPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InPacketsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InPacketsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock).InPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock).InPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutBytesPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutBytesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutBytesPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutBytesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutBytesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock).OutBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutBytesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock).OutBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutHighPriorityPacketsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-high-priority-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutHighPriorityPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutHighPriorityPacketsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-high-priority-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutHighPriorityPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-high-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-high-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutHighPriorityPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-high-priority-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock).OutHighPriorityPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-high-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-high-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutHighPriorityPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-high-priority-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock).OutHighPriorityPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutLowPriorityPacketsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-low-priority-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutLowPriorityPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutLowPriorityPacketsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-low-priority-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutLowPriorityPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-low-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-low-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutLowPriorityPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-low-priority-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock).OutLowPriorityPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-low-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-low-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutLowPriorityPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-low-priority-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock).OutLowPriorityPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutPacketsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutPacketsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock).OutPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock).OutPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPathAny struct {
	*ygnmi.NodePath
}

// FragmentPuntPkts (leaf): The packets that were successfully punted to CPU due to egress MTU
// exceeded.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fragment-punt-pkts"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/fragment-punt-pkts"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPath) FragmentPuntPkts() *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_FragmentPuntPktsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_FragmentPuntPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fragment-punt-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FragmentPuntPkts (leaf): The packets that were successfully punted to CPU due to egress MTU
// exceeded.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fragment-punt-pkts"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/fragment-punt-pkts"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPathAny) FragmentPuntPkts() *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_FragmentPuntPktsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_FragmentPuntPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fragment-punt-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InBytes (leaf): Incoming bytes towards the integrated-circuit interface
// subsystem block from the line interfaces or fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPath) InBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InBytesPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InBytesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InBytes (leaf): Incoming bytes towards the integrated-circuit interface
// subsystem block from the line interfaces or fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPathAny) InBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InBytesPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InBytesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InHighPriorityPackets (leaf): Incoming high priority packets towards the integrated-circuit
// fabric subsystem block from the previous NPU sub block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-high-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-high-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPath) InHighPriorityPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InHighPriorityPacketsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InHighPriorityPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-high-priority-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InHighPriorityPackets (leaf): Incoming high priority packets towards the integrated-circuit
// fabric subsystem block from the previous NPU sub block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-high-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-high-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPathAny) InHighPriorityPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InHighPriorityPacketsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InHighPriorityPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-high-priority-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InLowPriorityPackets (leaf): Incoming low priority packets towards the integrated-circuit fabric
// subsystem block from the previous NPU sub block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-low-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-low-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPath) InLowPriorityPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InLowPriorityPacketsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InLowPriorityPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-low-priority-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InLowPriorityPackets (leaf): Incoming low priority packets towards the integrated-circuit fabric
// subsystem block from the previous NPU sub block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-low-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-low-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPathAny) InLowPriorityPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InLowPriorityPacketsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InLowPriorityPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-low-priority-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPackets (leaf): Incoming packets towards the integrated-circuit interface
// subsystem block from the line interfaces or fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPath) InPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InPacketsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPackets (leaf): Incoming packets towards the integrated-circuit interface
// subsystem block from the line interfaces or fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPathAny) InPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InPacketsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutBytes (leaf): Outgoing bytes towards the line interfaces or fabric from the
// integrated-circuit interface subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPath) OutBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutBytesPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutBytesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutBytes (leaf): Outgoing bytes towards the line interfaces or fabric from the
// integrated-circuit interface subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPathAny) OutBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutBytesPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutBytesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutHighPriorityPackets (leaf): Outgoing high priority packets towards the fabric from the
// integrated-circuit fabric subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-high-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-high-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPath) OutHighPriorityPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutHighPriorityPacketsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutHighPriorityPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-high-priority-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutHighPriorityPackets (leaf): Outgoing high priority packets towards the fabric from the
// integrated-circuit fabric subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-high-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-high-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPathAny) OutHighPriorityPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutHighPriorityPacketsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutHighPriorityPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-high-priority-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLowPriorityPackets (leaf): Outgoing low priority packets towards the fabric from the
// integrated-circuit fabric subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-low-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-low-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPath) OutLowPriorityPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutLowPriorityPacketsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutLowPriorityPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-low-priority-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLowPriorityPackets (leaf): Outgoing low priority packets towards the fabric from the
// integrated-circuit fabric subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-low-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-low-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPathAny) OutLowPriorityPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutLowPriorityPacketsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutLowPriorityPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-low-priority-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPackets (leaf): Outgoing packets towards the line interfaces or fabric from the
// integrated-circuit interface subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPath) OutPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutPacketsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPackets (leaf): Outgoing packets towards the line interfaces or fabric from the
// integrated-circuit interface subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPathAny) OutPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutPacketsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock](
		"Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock](
		"Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_InBytesPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/in-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_InBytesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_InBytesPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/in-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_InBytesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/in-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_InBytesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock).InBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/in-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_InBytesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock).InBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_InPacketsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/in-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_InPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_InPacketsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/in-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_InPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/in-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_InPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock).InPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/in-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_InPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock).InPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_OutBytesPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/out-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_OutBytesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_OutBytesPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/out-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_OutBytesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/out-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_OutBytesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock).OutBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/out-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_OutBytesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock).OutBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_OutPacketsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/out-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_OutPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_OutPacketsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/out-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_OutPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/out-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_OutPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock).OutPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/out-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_OutPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock).OutPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlockPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/interface-block YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlockPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlockPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/interface-block YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlockPathAny struct {
	*ygnmi.NodePath
}

// InBytes (leaf): Incoming bytes towards the integrated-circuit interface
// subsystem block from the line interfaces or fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/in-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlockPath) InBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_InBytesPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_InBytesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InBytes (leaf): Incoming bytes towards the integrated-circuit interface
// subsystem block from the line interfaces or fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/in-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlockPathAny) InBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_InBytesPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_InBytesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPackets (leaf): Incoming packets towards the integrated-circuit interface
// subsystem block from the line interfaces or fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/in-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlockPath) InPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_InPacketsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_InPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPackets (leaf): Incoming packets towards the integrated-circuit interface
// subsystem block from the line interfaces or fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/in-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlockPathAny) InPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_InPacketsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_InPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutBytes (leaf): Outgoing bytes towards the line interfaces or fabric from the
// integrated-circuit interface subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/out-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlockPath) OutBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_OutBytesPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_OutBytesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutBytes (leaf): Outgoing bytes towards the line interfaces or fabric from the
// integrated-circuit interface subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/out-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlockPathAny) OutBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_OutBytesPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_OutBytesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPackets (leaf): Outgoing packets towards the line interfaces or fabric from the
// integrated-circuit interface subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/out-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlockPath) OutPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_OutPacketsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_OutPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPackets (leaf): Outgoing packets towards the line interfaces or fabric from the
// integrated-circuit interface subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/out-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlockPathAny) OutPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_OutPacketsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_OutPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlockPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock](
		"Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlockPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock](
		"Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryTotalBytesPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-total-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryTotalBytesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryTotalBytesPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-total-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryTotalBytesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/acl-memory-total-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-total-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryTotalBytesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "acl-memory-total-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).AclMemoryTotalBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/acl-memory-total-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-total-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryTotalBytesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "acl-memory-total-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).AclMemoryTotalBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryTotalEntriesPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-total-entries YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryTotalEntriesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryTotalEntriesPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-total-entries YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryTotalEntriesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/acl-memory-total-entries"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-total-entries"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryTotalEntriesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "acl-memory-total-entries"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).AclMemoryTotalEntries
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/acl-memory-total-entries"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-total-entries"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryTotalEntriesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "acl-memory-total-entries"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).AclMemoryTotalEntries
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryUsedBytesPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-used-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryUsedBytesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryUsedBytesPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-used-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryUsedBytesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/acl-memory-used-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-used-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryUsedBytesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "acl-memory-used-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).AclMemoryUsedBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/acl-memory-used-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-used-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryUsedBytesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "acl-memory-used-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).AclMemoryUsedBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryUsedEntriesPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-used-entries YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryUsedEntriesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryUsedEntriesPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-used-entries YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryUsedEntriesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/acl-memory-used-entries"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-used-entries"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryUsedEntriesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "acl-memory-used-entries"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).AclMemoryUsedEntries
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/acl-memory-used-entries"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-used-entries"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryUsedEntriesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "acl-memory-used-entries"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).AclMemoryUsedEntries
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_FragmentTotalPktsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/fragment-total-pkts YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_FragmentTotalPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_FragmentTotalPktsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/fragment-total-pkts YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_FragmentTotalPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/fragment-total-pkts"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/fragment-total-pkts"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_FragmentTotalPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fragment-total-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).FragmentTotalPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/fragment-total-pkts"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/fragment-total-pkts"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_FragmentTotalPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fragment-total-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).FragmentTotalPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_InBytesPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/in-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_InBytesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_InBytesPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/in-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_InBytesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/in-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_InBytesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).InBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/in-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_InBytesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).InBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_InPacketsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/in-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_InPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_InPacketsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/in-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_InPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/in-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_InPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).InPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/in-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_InPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).InPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupMemoryPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/lookup-memory YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupMemoryPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupMemoryPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/lookup-memory YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupMemoryPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/lookup-memory"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/lookup-memory"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupMemoryPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lookup-memory"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).LookupMemory
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/lookup-memory"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/lookup-memory"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupMemoryPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lookup-memory"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).LookupMemory
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupMemoryUsedPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/lookup-memory-used YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupMemoryUsedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupMemoryUsedPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/lookup-memory-used YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupMemoryUsedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/lookup-memory-used"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/lookup-memory-used"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupMemoryUsedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lookup-memory-used"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).LookupMemoryUsed
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/lookup-memory-used"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/lookup-memory-used"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupMemoryUsedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lookup-memory-used"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).LookupMemoryUsed
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupUtilizationPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/lookup-utilization YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupUtilizationPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupUtilizationPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/lookup-utilization YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupUtilizationPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/lookup-utilization"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/lookup-utilization"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupUtilizationPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lookup-utilization"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).LookupUtilization
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/lookup-utilization"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/lookup-utilization"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupUtilizationPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lookup-utilization"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).LookupUtilization
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_NexthopMemoryPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/nexthop-memory YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_NexthopMemoryPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_NexthopMemoryPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/nexthop-memory YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_NexthopMemoryPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/nexthop-memory"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/nexthop-memory"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_NexthopMemoryPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "nexthop-memory"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).NexthopMemory
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/nexthop-memory"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/nexthop-memory"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_NexthopMemoryPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "nexthop-memory"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).NexthopMemory
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_NexthopMemoryUsedPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/nexthop-memory-used YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_NexthopMemoryUsedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_NexthopMemoryUsedPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/nexthop-memory-used YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_NexthopMemoryUsedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/nexthop-memory-used"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/nexthop-memory-used"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_NexthopMemoryUsedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "nexthop-memory-used"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).NexthopMemoryUsed
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/nexthop-memory-used"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/nexthop-memory-used"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_NexthopMemoryUsedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "nexthop-memory-used"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).NexthopMemoryUsed
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_OutBytesPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/out-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_OutBytesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_OutBytesPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/out-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_OutBytesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/out-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_OutBytesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).OutBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/out-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_OutBytesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).OutBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_OutPacketsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/out-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_OutPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_OutPacketsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/out-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_OutPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/out-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_OutPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).OutPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/out-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_OutPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).OutPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPathAny struct {
	*ygnmi.NodePath
}

// AclMemoryTotalBytes (leaf): Total firewall or ACL memory counter measured in bytes.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/acl-memory-total-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-total-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPath) AclMemoryTotalBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryTotalBytesPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryTotalBytesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "acl-memory-total-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AclMemoryTotalBytes (leaf): Total firewall or ACL memory counter measured in bytes.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/acl-memory-total-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-total-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPathAny) AclMemoryTotalBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryTotalBytesPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryTotalBytesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "acl-memory-total-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AclMemoryTotalEntries (leaf): Total firewall or ACL memory counter measured in entries.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/acl-memory-total-entries"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-total-entries"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPath) AclMemoryTotalEntries() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryTotalEntriesPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryTotalEntriesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "acl-memory-total-entries"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AclMemoryTotalEntries (leaf): Total firewall or ACL memory counter measured in entries.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/acl-memory-total-entries"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-total-entries"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPathAny) AclMemoryTotalEntries() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryTotalEntriesPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryTotalEntriesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "acl-memory-total-entries"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AclMemoryUsedBytes (leaf): Amount of used firewall or ACL memory counter measured in bytes.
// The number of used bytes must include the bytes
// that are 'allocated but free' if the memory reaping algorithm makes
// these bytes practically unusable
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/acl-memory-used-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-used-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPath) AclMemoryUsedBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryUsedBytesPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryUsedBytesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "acl-memory-used-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AclMemoryUsedBytes (leaf): Amount of used firewall or ACL memory counter measured in bytes.
// The number of used bytes must include the bytes
// that are 'allocated but free' if the memory reaping algorithm makes
// these bytes practically unusable
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/acl-memory-used-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-used-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPathAny) AclMemoryUsedBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryUsedBytesPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryUsedBytesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "acl-memory-used-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AclMemoryUsedEntries (leaf): Amount of used firewall or ACL memory counter measured in entries.
// The number of used entries must include the entries
// that are 'allocated but free' if the memory reaping algorithm makes
// these entries practically unusable.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/acl-memory-used-entries"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-used-entries"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPath) AclMemoryUsedEntries() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryUsedEntriesPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryUsedEntriesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "acl-memory-used-entries"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AclMemoryUsedEntries (leaf): Amount of used firewall or ACL memory counter measured in entries.
// The number of used entries must include the entries
// that are 'allocated but free' if the memory reaping algorithm makes
// these entries practically unusable.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/acl-memory-used-entries"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-used-entries"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPathAny) AclMemoryUsedEntries() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryUsedEntriesPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryUsedEntriesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "acl-memory-used-entries"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FragmentTotalPkts (leaf): Total number of fragments generated by the CPU.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fragment-total-pkts"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/fragment-total-pkts"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPath) FragmentTotalPkts() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_FragmentTotalPktsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_FragmentTotalPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fragment-total-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FragmentTotalPkts (leaf): Total number of fragments generated by the CPU.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fragment-total-pkts"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/fragment-total-pkts"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPathAny) FragmentTotalPkts() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_FragmentTotalPktsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_FragmentTotalPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fragment-total-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InBytes (leaf): Incoming bytes towards the integrated-circuit interface
// subsystem block from the line interfaces or fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/in-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPath) InBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_InBytesPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_InBytesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InBytes (leaf): Incoming bytes towards the integrated-circuit interface
// subsystem block from the line interfaces or fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/in-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPathAny) InBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_InBytesPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_InBytesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPackets (leaf): Incoming packets towards the integrated-circuit interface
// subsystem block from the line interfaces or fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/in-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPath) InPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_InPacketsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_InPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPackets (leaf): Incoming packets towards the integrated-circuit interface
// subsystem block from the line interfaces or fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/in-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPathAny) InPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_InPacketsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_InPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LookupMemory (leaf): The total amount of memory available in the lookup subsystem.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/lookup-memory"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/lookup-memory"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPath) LookupMemory() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupMemoryPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupMemoryPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "lookup-memory"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LookupMemory (leaf): The total amount of memory available in the lookup subsystem.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/lookup-memory"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/lookup-memory"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPathAny) LookupMemory() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupMemoryPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupMemoryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "lookup-memory"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LookupMemoryUsed (leaf): The amount of memory used in the lookup subsystem.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/lookup-memory-used"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/lookup-memory-used"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPath) LookupMemoryUsed() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupMemoryUsedPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupMemoryUsedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "lookup-memory-used"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LookupMemoryUsed (leaf): The amount of memory used in the lookup subsystem.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/lookup-memory-used"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/lookup-memory-used"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPathAny) LookupMemoryUsed() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupMemoryUsedPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupMemoryUsedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "lookup-memory-used"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LookupUtilization (leaf): The integrated-circuit lookup subsystem block utilization percentage.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/lookup-utilization"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/lookup-utilization"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPath) LookupUtilization() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupUtilizationPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupUtilizationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "lookup-utilization"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LookupUtilization (leaf): The integrated-circuit lookup subsystem block utilization percentage.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/lookup-utilization"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/lookup-utilization"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPathAny) LookupUtilization() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupUtilizationPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupUtilizationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "lookup-utilization"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NexthopMemory (leaf): The total amount of nexthop memory available in the lookup subsystem.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/nexthop-memory"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/nexthop-memory"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPath) NexthopMemory() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_NexthopMemoryPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_NexthopMemoryPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "nexthop-memory"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NexthopMemory (leaf): The total amount of nexthop memory available in the lookup subsystem.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/nexthop-memory"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/nexthop-memory"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPathAny) NexthopMemory() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_NexthopMemoryPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_NexthopMemoryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "nexthop-memory"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NexthopMemoryUsed (leaf): The amount of nexthops memory used in the lookup subsystem.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/nexthop-memory-used"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/nexthop-memory-used"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPath) NexthopMemoryUsed() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_NexthopMemoryUsedPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_NexthopMemoryUsedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "nexthop-memory-used"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NexthopMemoryUsed (leaf): The amount of nexthops memory used in the lookup subsystem.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/nexthop-memory-used"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/nexthop-memory-used"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPathAny) NexthopMemoryUsed() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_NexthopMemoryUsedPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_NexthopMemoryUsedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "nexthop-memory-used"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutBytes (leaf): Outgoing bytes towards the line interfaces or fabric from the
// integrated-circuit interface subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/out-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPath) OutBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_OutBytesPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_OutBytesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutBytes (leaf): Outgoing bytes towards the line interfaces or fabric from the
// integrated-circuit interface subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/out-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPathAny) OutBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_OutBytesPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_OutBytesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPackets (leaf): Outgoing packets towards the line interfaces or fabric from the
// integrated-circuit interface subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/out-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPath) OutPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_OutPacketsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_OutPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPackets (leaf): Outgoing packets towards the line interfaces or fabric from the
// integrated-circuit interface subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/out-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPathAny) OutPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_OutPacketsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_OutPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_InBytesPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/in-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_InBytesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_InBytesPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/in-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_InBytesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/in-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_InBytesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock).InBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/in-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_InBytesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock).InBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_InPacketsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/in-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_InPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_InPacketsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/in-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_InPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/in-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_InPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock).InPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/in-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_InPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock).InPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_LoopbackBytesPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/loopback-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_LoopbackBytesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_LoopbackBytesPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/loopback-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_LoopbackBytesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/loopback-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/loopback-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_LoopbackBytesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "loopback-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock).LoopbackBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/loopback-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/loopback-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_LoopbackBytesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "loopback-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock).LoopbackBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_LoopbackPacketsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/loopback-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_LoopbackPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_LoopbackPacketsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/loopback-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_LoopbackPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/loopback-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/loopback-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_LoopbackPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "loopback-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock).LoopbackPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/loopback-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/loopback-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_LoopbackPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "loopback-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock).LoopbackPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_OutBytesPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/out-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_OutBytesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_OutBytesPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/out-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_OutBytesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/out-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_OutBytesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock).OutBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/out-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_OutBytesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock).OutBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_OutPacketsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/out-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_OutPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_OutPacketsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/out-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_OutPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/out-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_OutPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock).OutPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/out-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_OutPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock).OutPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_QueueMemoryPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/queue-memory YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_QueueMemoryPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_QueueMemoryPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/queue-memory YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_QueueMemoryPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/queue-memory"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/queue-memory"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_QueueMemoryPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "queue-memory"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock).QueueMemory
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/queue-memory"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/queue-memory"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_QueueMemoryPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "queue-memory"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock).QueueMemory
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_QueueMemoryUsedPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/queue-memory-used YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_QueueMemoryUsedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_QueueMemoryUsedPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/queue-memory-used YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_QueueMemoryUsedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/queue-memory-used"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/queue-memory-used"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_QueueMemoryUsedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "queue-memory-used"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock).QueueMemoryUsed
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/queue-memory-used"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/queue-memory-used"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_QueueMemoryUsedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "queue-memory-used"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock).QueueMemoryUsed
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/queueing-block YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/queueing-block YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPathAny struct {
	*ygnmi.NodePath
}

// InBytes (leaf): Incoming bytes towards the integrated-circuit interface
// subsystem block from the line interfaces or fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/in-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPath) InBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_InBytesPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_InBytesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InBytes (leaf): Incoming bytes towards the integrated-circuit interface
// subsystem block from the line interfaces or fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/in-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPathAny) InBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_InBytesPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_InBytesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPackets (leaf): Incoming packets towards the integrated-circuit interface
// subsystem block from the line interfaces or fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/in-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPath) InPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_InPacketsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_InPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPackets (leaf): Incoming packets towards the integrated-circuit interface
// subsystem block from the line interfaces or fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/in-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPathAny) InPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_InPacketsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_InPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LoopbackBytes (leaf): The number of bytes in the loopback or re-circulate subsystem.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/loopback-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/loopback-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPath) LoopbackBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_LoopbackBytesPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_LoopbackBytesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "loopback-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LoopbackBytes (leaf): The number of bytes in the loopback or re-circulate subsystem.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/loopback-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/loopback-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPathAny) LoopbackBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_LoopbackBytesPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_LoopbackBytesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "loopback-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LoopbackPackets (leaf): The number of packets in the loopback or re-circulate subsystem.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/loopback-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/loopback-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPath) LoopbackPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_LoopbackPacketsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_LoopbackPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "loopback-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LoopbackPackets (leaf): The number of packets in the loopback or re-circulate subsystem.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/loopback-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/loopback-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPathAny) LoopbackPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_LoopbackPacketsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_LoopbackPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "loopback-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutBytes (leaf): Outgoing bytes towards the line interfaces or fabric from the
// integrated-circuit interface subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/out-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPath) OutBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_OutBytesPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_OutBytesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutBytes (leaf): Outgoing bytes towards the line interfaces or fabric from the
// integrated-circuit interface subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/out-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPathAny) OutBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_OutBytesPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_OutBytesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPackets (leaf): Outgoing packets towards the line interfaces or fabric from the
// integrated-circuit interface subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/out-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPath) OutPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_OutPacketsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_OutPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPackets (leaf): Outgoing packets towards the line interfaces or fabric from the
// integrated-circuit interface subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/out-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPathAny) OutPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_OutPacketsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_OutPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// QueueMemory (leaf): The total amount of memory available in the queue subsystem.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/queue-memory"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/queue-memory"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPath) QueueMemory() *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_QueueMemoryPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_QueueMemoryPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "queue-memory"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// QueueMemory (leaf): The total amount of memory available in the queue subsystem.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/queue-memory"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/queue-memory"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPathAny) QueueMemory() *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_QueueMemoryPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_QueueMemoryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "queue-memory"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// QueueMemoryUsed (leaf): The amount of memory used in the queue subsystem.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/queue-memory-used"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/queue-memory-used"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPath) QueueMemoryUsed() *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_QueueMemoryUsedPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_QueueMemoryUsedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "queue-memory-used"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// QueueMemoryUsed (leaf): The amount of memory used in the queue subsystem.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/queue-memory-used"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/queue-memory-used"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPathAny) QueueMemoryUsed() *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_QueueMemoryUsedPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_QueueMemoryUsedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "queue-memory-used"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock](
		"Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock](
		"Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_UtilizationPath represents the /openconfig-platform/components/component/integrated-circuit/utilization YANG schema element.
type Component_IntegratedCircuit_UtilizationPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_UtilizationPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization YANG schema element.
type Component_IntegratedCircuit_UtilizationPathAny struct {
	*ygnmi.NodePath
}

// ResourceAny (list): List of resources, keyed by resource name.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "resources/resource"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource"
func (n *Component_IntegratedCircuit_UtilizationPath) ResourceAny() *Component_IntegratedCircuit_Utilization_ResourcePathAny {
	ps := &Component_IntegratedCircuit_Utilization_ResourcePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// ResourceAny (list): List of resources, keyed by resource name.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "resources/resource"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource"
func (n *Component_IntegratedCircuit_UtilizationPathAny) ResourceAny() *Component_IntegratedCircuit_Utilization_ResourcePathAny {
	ps := &Component_IntegratedCircuit_Utilization_ResourcePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Resource (list): List of resources, keyed by resource name.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "resources/resource"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource"
//
//	Name: string
func (n *Component_IntegratedCircuit_UtilizationPath) Resource(Name string) *Component_IntegratedCircuit_Utilization_ResourcePath {
	ps := &Component_IntegratedCircuit_Utilization_ResourcePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Resource (list): List of resources, keyed by resource name.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "resources/resource"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource"
//
//	Name: string
func (n *Component_IntegratedCircuit_UtilizationPathAny) Resource(Name string) *Component_IntegratedCircuit_Utilization_ResourcePathAny {
	ps := &Component_IntegratedCircuit_Utilization_ResourcePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// ResourceMap (list): List of resources, keyed by resource name.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "resources/resource"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource"
func (n *Component_IntegratedCircuit_UtilizationPath) ResourceMap() *Component_IntegratedCircuit_Utilization_ResourcePathMap {
	ps := &Component_IntegratedCircuit_Utilization_ResourcePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"resources"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ResourceMap (list): List of resources, keyed by resource name.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "resources/resource"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource"
func (n *Component_IntegratedCircuit_UtilizationPathAny) ResourceMap() *Component_IntegratedCircuit_Utilization_ResourcePathMapAny {
	ps := &Component_IntegratedCircuit_Utilization_ResourcePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"resources"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_UtilizationPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_Utilization] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_Utilization](
		"Component_IntegratedCircuit_Utilization",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_UtilizationPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_Utilization] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_Utilization](
		"Component_IntegratedCircuit_Utilization",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_UtilizationPath) Config() ygnmi.ConfigQuery[*oc.Component_IntegratedCircuit_Utilization] {
	return ygnmi.NewConfigQuery[*oc.Component_IntegratedCircuit_Utilization](
		"Component_IntegratedCircuit_Utilization",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_UtilizationPathAny) Config() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_Utilization] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_Utilization](
		"Component_IntegratedCircuit_Utilization",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_Utilization_Resource_CommittedPath represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/committed YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_CommittedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_Utilization_Resource_CommittedPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/committed YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_CommittedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/committed"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/committed"
func (n *Component_IntegratedCircuit_Utilization_Resource_CommittedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "committed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).Committed
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/committed"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/committed"
func (n *Component_IntegratedCircuit_Utilization_Resource_CommittedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "committed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).Committed
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_Utilization_Resource_FreePath represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/free YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_FreePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_Utilization_Resource_FreePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/free YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_FreePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/free"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/free"
func (n *Component_IntegratedCircuit_Utilization_Resource_FreePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "free"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).Free
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/free"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/free"
func (n *Component_IntegratedCircuit_Utilization_Resource_FreePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "free"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).Free
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_Utilization_Resource_HighWatermarkPath represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/high-watermark YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_HighWatermarkPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_Utilization_Resource_HighWatermarkPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/high-watermark YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_HighWatermarkPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/high-watermark"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/high-watermark"
func (n *Component_IntegratedCircuit_Utilization_Resource_HighWatermarkPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "high-watermark"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).HighWatermark
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/high-watermark"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/high-watermark"
func (n *Component_IntegratedCircuit_Utilization_Resource_HighWatermarkPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "high-watermark"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).HighWatermark
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_Utilization_Resource_LastHighWatermarkPath represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/last-high-watermark YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_LastHighWatermarkPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_Utilization_Resource_LastHighWatermarkPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/last-high-watermark YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_LastHighWatermarkPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/last-high-watermark"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/last-high-watermark"
func (n *Component_IntegratedCircuit_Utilization_Resource_LastHighWatermarkPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-high-watermark"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).LastHighWatermark
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/last-high-watermark"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/last-high-watermark"
func (n *Component_IntegratedCircuit_Utilization_Resource_LastHighWatermarkPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-high-watermark"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).LastHighWatermark
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_Utilization_Resource_MaxLimitPath represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/max-limit YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_MaxLimitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_Utilization_Resource_MaxLimitPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/max-limit YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_MaxLimitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/max-limit"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/max-limit"
func (n *Component_IntegratedCircuit_Utilization_Resource_MaxLimitPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).MaxLimit
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/max-limit"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/max-limit"
func (n *Component_IntegratedCircuit_Utilization_Resource_MaxLimitPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).MaxLimit
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_Utilization_Resource_NamePath represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/name YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_Utilization_Resource_NamePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/name YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/name"
func (n *Component_IntegratedCircuit_Utilization_Resource_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/name"
func (n *Component_IntegratedCircuit_Utilization_Resource_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/name"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/config/name"
func (n *Component_IntegratedCircuit_Utilization_Resource_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Component_IntegratedCircuit_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/name"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/config/name"
func (n *Component_IntegratedCircuit_Utilization_Resource_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_IntegratedCircuit_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_Utilization_Resource_UsedPath represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/used YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_UsedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_Utilization_Resource_UsedPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/used YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_UsedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/used"
func (n *Component_IntegratedCircuit_Utilization_Resource_UsedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).Used
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/used"
func (n *Component_IntegratedCircuit_Utilization_Resource_UsedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).Used
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperPath represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/used-threshold-upper YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/used-threshold-upper YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-threshold-upper"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/used-threshold-upper"
func (n *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).UsedThresholdUpper
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-threshold-upper"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/used-threshold-upper"
func (n *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).UsedThresholdUpper
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/used-threshold-upper"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/config/used-threshold-upper"
func (n *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Component_IntegratedCircuit_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "used-threshold-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).UsedThresholdUpper
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/used-threshold-upper"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/config/used-threshold-upper"
func (n *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_IntegratedCircuit_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "used-threshold-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).UsedThresholdUpper
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperClearPath represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/used-threshold-upper-clear YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperClearPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperClearPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/used-threshold-upper-clear YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperClearPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-threshold-upper-clear"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/used-threshold-upper-clear"
func (n *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperClearPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).UsedThresholdUpperClear
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-threshold-upper-clear"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/used-threshold-upper-clear"
func (n *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperClearPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).UsedThresholdUpperClear
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/used-threshold-upper-clear"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/config/used-threshold-upper-clear"
func (n *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperClearPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Component_IntegratedCircuit_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "used-threshold-upper-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).UsedThresholdUpperClear
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/used-threshold-upper-clear"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/config/used-threshold-upper-clear"
func (n *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperClearPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_IntegratedCircuit_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "used-threshold-upper-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).UsedThresholdUpperClear
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperExceededPath represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/used-threshold-upper-exceeded YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperExceededPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperExceededPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/used-threshold-upper-exceeded YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperExceededPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-threshold-upper-exceeded"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/used-threshold-upper-exceeded"
func (n *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperExceededPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper-exceeded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).UsedThresholdUpperExceeded
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-threshold-upper-exceeded"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/used-threshold-upper-exceeded"
func (n *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperExceededPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper-exceeded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).UsedThresholdUpperExceeded
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_Utilization_ResourcePath represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource YANG schema element.
type Component_IntegratedCircuit_Utilization_ResourcePath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_Utilization_ResourcePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource YANG schema element.
type Component_IntegratedCircuit_Utilization_ResourcePathAny struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_Utilization_ResourcePathMap represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource YANG schema element.
type Component_IntegratedCircuit_Utilization_ResourcePathMap struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_Utilization_ResourcePathMapAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource YANG schema element.
type Component_IntegratedCircuit_Utilization_ResourcePathMapAny struct {
	*ygnmi.NodePath
}

// Committed (leaf): Number of entries currently reserved for this resource. This is only
// relevant to tables which allocate a block of resource for a given
// feature.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/committed"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/committed"
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) Committed() *Component_IntegratedCircuit_Utilization_Resource_CommittedPath {
	ps := &Component_IntegratedCircuit_Utilization_Resource_CommittedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "committed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Committed (leaf): Number of entries currently reserved for this resource. This is only
// relevant to tables which allocate a block of resource for a given
// feature.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/committed"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/committed"
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) Committed() *Component_IntegratedCircuit_Utilization_Resource_CommittedPathAny {
	ps := &Component_IntegratedCircuit_Utilization_Resource_CommittedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "committed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Free (leaf): Number of entries available to use.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/free"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/free"
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) Free() *Component_IntegratedCircuit_Utilization_Resource_FreePath {
	ps := &Component_IntegratedCircuit_Utilization_Resource_FreePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "free"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Free (leaf): Number of entries available to use.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/free"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/free"
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) Free() *Component_IntegratedCircuit_Utilization_Resource_FreePathAny {
	ps := &Component_IntegratedCircuit_Utilization_Resource_FreePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "free"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HighWatermark (leaf): A watermark of highest number of entries used for this resource.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/high-watermark"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/high-watermark"
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) HighWatermark() *Component_IntegratedCircuit_Utilization_Resource_HighWatermarkPath {
	ps := &Component_IntegratedCircuit_Utilization_Resource_HighWatermarkPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "high-watermark"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HighWatermark (leaf): A watermark of highest number of entries used for this resource.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/high-watermark"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/high-watermark"
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) HighWatermark() *Component_IntegratedCircuit_Utilization_Resource_HighWatermarkPathAny {
	ps := &Component_IntegratedCircuit_Utilization_Resource_HighWatermarkPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "high-watermark"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastHighWatermark (leaf): The timestamp when the high-watermark was last updated. The value
// is the timestamp in nanoseconds relative to the Unix Epoch
// (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/last-high-watermark"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/last-high-watermark"
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) LastHighWatermark() *Component_IntegratedCircuit_Utilization_Resource_LastHighWatermarkPath {
	ps := &Component_IntegratedCircuit_Utilization_Resource_LastHighWatermarkPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-high-watermark"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastHighWatermark (leaf): The timestamp when the high-watermark was last updated. The value
// is the timestamp in nanoseconds relative to the Unix Epoch
// (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/last-high-watermark"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/last-high-watermark"
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) LastHighWatermark() *Component_IntegratedCircuit_Utilization_Resource_LastHighWatermarkPathAny {
	ps := &Component_IntegratedCircuit_Utilization_Resource_LastHighWatermarkPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-high-watermark"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxLimit (leaf): Maximum number of entries available for the resource. The value
// is the theoretical maximum resource utilization possible.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/max-limit"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/max-limit"
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) MaxLimit() *Component_IntegratedCircuit_Utilization_Resource_MaxLimitPath {
	ps := &Component_IntegratedCircuit_Utilization_Resource_MaxLimitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "max-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxLimit (leaf): Maximum number of entries available for the resource. The value
// is the theoretical maximum resource utilization possible.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/max-limit"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/max-limit"
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) MaxLimit() *Component_IntegratedCircuit_Utilization_Resource_MaxLimitPathAny {
	ps := &Component_IntegratedCircuit_Utilization_Resource_MaxLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "max-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Resource name within the component.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/*/name"
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) Name() *Component_IntegratedCircuit_Utilization_Resource_NamePath {
	ps := &Component_IntegratedCircuit_Utilization_Resource_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Resource name within the component.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/*/name"
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) Name() *Component_IntegratedCircuit_Utilization_Resource_NamePathAny {
	ps := &Component_IntegratedCircuit_Utilization_Resource_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Used (leaf): Number of entries currently in use for the resource.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/used"
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) Used() *Component_IntegratedCircuit_Utilization_Resource_UsedPath {
	ps := &Component_IntegratedCircuit_Utilization_Resource_UsedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "used"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Used (leaf): Number of entries currently in use for the resource.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/used"
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) Used() *Component_IntegratedCircuit_Utilization_Resource_UsedPathAny {
	ps := &Component_IntegratedCircuit_Utilization_Resource_UsedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "used"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UsedThresholdUpper (leaf): The used percentage value (used / (used + free) * 100) that
// when crossed will set utilization-threshold-exceeded to 'true'.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/used-threshold-upper"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/*/used-threshold-upper"
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) UsedThresholdUpper() *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperPath {
	ps := &Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "used-threshold-upper"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UsedThresholdUpper (leaf): The used percentage value (used / (used + free) * 100) that
// when crossed will set utilization-threshold-exceeded to 'true'.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/used-threshold-upper"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/*/used-threshold-upper"
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) UsedThresholdUpper() *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperPathAny {
	ps := &Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "used-threshold-upper"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UsedThresholdUpperClear (leaf): The used percentage value (used / (used + free) * 100) that when
// crossed will set utilization-threshold-exceeded to 'false'.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/used-threshold-upper-clear"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/*/used-threshold-upper-clear"
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) UsedThresholdUpperClear() *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperClearPath {
	ps := &Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperClearPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "used-threshold-upper-clear"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UsedThresholdUpperClear (leaf): The used percentage value (used / (used + free) * 100) that when
// crossed will set utilization-threshold-exceeded to 'false'.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/used-threshold-upper-clear"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/*/used-threshold-upper-clear"
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) UsedThresholdUpperClear() *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperClearPathAny {
	ps := &Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperClearPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "used-threshold-upper-clear"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UsedThresholdUpperExceeded (leaf): This value is set to true when the used percentage value
// (used / (used + free) * 100) has crossed the used-threshold-upper for this
// resource and false when the used percentage value has crossed the configured
// used-threshold-upper-clear value for this resource.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-threshold-upper-exceeded"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/used-threshold-upper-exceeded"
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) UsedThresholdUpperExceeded() *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperExceededPath {
	ps := &Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperExceededPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper-exceeded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UsedThresholdUpperExceeded (leaf): This value is set to true when the used percentage value
// (used / (used + free) * 100) has crossed the used-threshold-upper for this
// resource and false when the used percentage value has crossed the configured
// used-threshold-upper-clear value for this resource.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-threshold-upper-exceeded"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/used-threshold-upper-exceeded"
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) UsedThresholdUpperExceeded() *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperExceededPathAny {
	ps := &Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperExceededPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper-exceeded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_Utilization_Resource] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_Utilization_Resource](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_Utilization_Resource] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_Utilization_Resource](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) Config() ygnmi.ConfigQuery[*oc.Component_IntegratedCircuit_Utilization_Resource] {
	return ygnmi.NewConfigQuery[*oc.Component_IntegratedCircuit_Utilization_Resource](
		"Component_IntegratedCircuit_Utilization_Resource",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) Config() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_Utilization_Resource] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_Utilization_Resource](
		"Component_IntegratedCircuit_Utilization_Resource",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_Utilization_ResourcePathMap) State() ygnmi.SingletonQuery[map[string]*oc.Component_IntegratedCircuit_Utilization_Resource] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Component_IntegratedCircuit_Utilization_Resource](
		"Component_IntegratedCircuit_Utilization",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_IntegratedCircuit_Utilization_Resource, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization).Resource
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform:resources"},
			PostRelPath: []string{"openconfig-platform:resource"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_Utilization_ResourcePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Component_IntegratedCircuit_Utilization_Resource] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Component_IntegratedCircuit_Utilization_Resource](
		"Component_IntegratedCircuit_Utilization",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_IntegratedCircuit_Utilization_Resource, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization).Resource
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform:resources"},
			PostRelPath: []string{"openconfig-platform:resource"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_Utilization_ResourcePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Component_IntegratedCircuit_Utilization_Resource] {
	return ygnmi.NewConfigQuery[map[string]*oc.Component_IntegratedCircuit_Utilization_Resource](
		"Component_IntegratedCircuit_Utilization",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_IntegratedCircuit_Utilization_Resource, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization).Resource
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform:resources"},
			PostRelPath: []string{"openconfig-platform:resource"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_Utilization_ResourcePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Component_IntegratedCircuit_Utilization_Resource] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Component_IntegratedCircuit_Utilization_Resource](
		"Component_IntegratedCircuit_Utilization",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_IntegratedCircuit_Utilization_Resource, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization).Resource
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform:resources"},
			PostRelPath: []string{"openconfig-platform:resource"},
		},
	)
}

// Component_LastPoweroffReason_DetailsPath represents the /openconfig-platform/components/component/state/last-poweroff-reason/details YANG schema element.
type Component_LastPoweroffReason_DetailsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_LastPoweroffReason_DetailsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/last-poweroff-reason/details YANG schema element.
type Component_LastPoweroffReason_DetailsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "details"
//	Path from root:       "/components/component/state/last-poweroff-reason/details"
func (n *Component_LastPoweroffReason_DetailsPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_LastPoweroffReason",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"details"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_LastPoweroffReason).Details
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_LastPoweroffReason) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "details"
//	Path from root:       "/components/component/state/last-poweroff-reason/details"
func (n *Component_LastPoweroffReason_DetailsPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_LastPoweroffReason",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"details"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_LastPoweroffReason).Details
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_LastPoweroffReason) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_LastPoweroffReason_TriggerPath represents the /openconfig-platform/components/component/state/last-poweroff-reason/trigger YANG schema element.
type Component_LastPoweroffReason_TriggerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_LastPoweroffReason_TriggerPathAny represents the wildcard version of the /openconfig-platform/components/component/state/last-poweroff-reason/trigger YANG schema element.
type Component_LastPoweroffReason_TriggerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "trigger"
//	Path from root:       "/components/component/state/last-poweroff-reason/trigger"
func (n *Component_LastPoweroffReason_TriggerPath) State() ygnmi.SingletonQuery[oc.E_PlatformTypes_ComponentLastPoweroffReasonTrigger] {
	return ygnmi.NewSingletonQuery[oc.E_PlatformTypes_ComponentLastPoweroffReasonTrigger](
		"Component_LastPoweroffReason",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"trigger"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PlatformTypes_ComponentLastPoweroffReasonTrigger, bool) {
			ret := gs.(*oc.Component_LastPoweroffReason).Trigger
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_LastPoweroffReason) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "trigger"
//	Path from root:       "/components/component/state/last-poweroff-reason/trigger"
func (n *Component_LastPoweroffReason_TriggerPathAny) State() ygnmi.WildcardQuery[oc.E_PlatformTypes_ComponentLastPoweroffReasonTrigger] {
	return ygnmi.NewWildcardQuery[oc.E_PlatformTypes_ComponentLastPoweroffReasonTrigger](
		"Component_LastPoweroffReason",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"trigger"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PlatformTypes_ComponentLastPoweroffReasonTrigger, bool) {
			ret := gs.(*oc.Component_LastPoweroffReason).Trigger
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_LastPoweroffReason) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_LastPoweroffReasonPath represents the /openconfig-platform/components/component/state/last-poweroff-reason YANG schema element.
type Component_LastPoweroffReasonPath struct {
	*ygnmi.NodePath
}

// Component_LastPoweroffReasonPathAny represents the wildcard version of the /openconfig-platform/components/component/state/last-poweroff-reason YANG schema element.
type Component_LastPoweroffReasonPathAny struct {
	*ygnmi.NodePath
}

// Details (leaf): Provides a detailed reason for component power-off.
// For system-initiated power-offs, this field can include
// specific causes (e.g., critical errors resulting in a
// controller-card bootloop).
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "details"
//	Path from root:       "/components/component/state/last-poweroff-reason/details"
func (n *Component_LastPoweroffReasonPath) Details() *Component_LastPoweroffReason_DetailsPath {
	ps := &Component_LastPoweroffReason_DetailsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"details"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Details (leaf): Provides a detailed reason for component power-off.
// For system-initiated power-offs, this field can include
// specific causes (e.g., critical errors resulting in a
// controller-card bootloop).
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "details"
//	Path from root:       "/components/component/state/last-poweroff-reason/details"
func (n *Component_LastPoweroffReasonPathAny) Details() *Component_LastPoweroffReason_DetailsPathAny {
	ps := &Component_LastPoweroffReason_DetailsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"details"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Trigger (leaf): Records the generic triggers for the last poweroff
// event. Component power-off can be triggered
// in various ways,
//   - USER_INITIATED
//   - SYSTEM_INITIATED
//   - POWER_FAILURE
//
// This field is not updated during reboots; those are
// tracked in the 'last-reboot-reason' leaf.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "trigger"
//	Path from root:       "/components/component/state/last-poweroff-reason/trigger"
func (n *Component_LastPoweroffReasonPath) Trigger() *Component_LastPoweroffReason_TriggerPath {
	ps := &Component_LastPoweroffReason_TriggerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"trigger"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Trigger (leaf): Records the generic triggers for the last poweroff
// event. Component power-off can be triggered
// in various ways,
//   - USER_INITIATED
//   - SYSTEM_INITIATED
//   - POWER_FAILURE
//
// This field is not updated during reboots; those are
// tracked in the 'last-reboot-reason' leaf.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "trigger"
//	Path from root:       "/components/component/state/last-poweroff-reason/trigger"
func (n *Component_LastPoweroffReasonPathAny) Trigger() *Component_LastPoweroffReason_TriggerPathAny {
	ps := &Component_LastPoweroffReason_TriggerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"trigger"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_LastPoweroffReasonPath) State() ygnmi.SingletonQuery[*oc.Component_LastPoweroffReason] {
	return ygnmi.NewSingletonQuery[*oc.Component_LastPoweroffReason](
		"Component_LastPoweroffReason",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_LastPoweroffReasonPathAny) State() ygnmi.WildcardQuery[*oc.Component_LastPoweroffReason] {
	return ygnmi.NewWildcardQuery[*oc.Component_LastPoweroffReason](
		"Component_LastPoweroffReason",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_LastSwitchoverReason_DetailsPath represents the /openconfig-platform/components/component/state/last-switchover-reason/details YANG schema element.
type Component_LastSwitchoverReason_DetailsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_LastSwitchoverReason_DetailsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/last-switchover-reason/details YANG schema element.
type Component_LastSwitchoverReason_DetailsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "details"
//	Path from root:       "/components/component/state/last-switchover-reason/details"
func (n *Component_LastSwitchoverReason_DetailsPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_LastSwitchoverReason",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"details"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_LastSwitchoverReason).Details
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_LastSwitchoverReason) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "details"
//	Path from root:       "/components/component/state/last-switchover-reason/details"
func (n *Component_LastSwitchoverReason_DetailsPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_LastSwitchoverReason",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"details"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_LastSwitchoverReason).Details
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_LastSwitchoverReason) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_LastSwitchoverReason_TriggerPath represents the /openconfig-platform/components/component/state/last-switchover-reason/trigger YANG schema element.
type Component_LastSwitchoverReason_TriggerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_LastSwitchoverReason_TriggerPathAny represents the wildcard version of the /openconfig-platform/components/component/state/last-switchover-reason/trigger YANG schema element.
type Component_LastSwitchoverReason_TriggerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "trigger"
//	Path from root:       "/components/component/state/last-switchover-reason/trigger"
func (n *Component_LastSwitchoverReason_TriggerPath) State() ygnmi.SingletonQuery[oc.E_PlatformTypes_ComponentRedundantRoleSwitchoverReasonTrigger] {
	return ygnmi.NewSingletonQuery[oc.E_PlatformTypes_ComponentRedundantRoleSwitchoverReasonTrigger](
		"Component_LastSwitchoverReason",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"trigger"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PlatformTypes_ComponentRedundantRoleSwitchoverReasonTrigger, bool) {
			ret := gs.(*oc.Component_LastSwitchoverReason).Trigger
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_LastSwitchoverReason) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "trigger"
//	Path from root:       "/components/component/state/last-switchover-reason/trigger"
func (n *Component_LastSwitchoverReason_TriggerPathAny) State() ygnmi.WildcardQuery[oc.E_PlatformTypes_ComponentRedundantRoleSwitchoverReasonTrigger] {
	return ygnmi.NewWildcardQuery[oc.E_PlatformTypes_ComponentRedundantRoleSwitchoverReasonTrigger](
		"Component_LastSwitchoverReason",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"trigger"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PlatformTypes_ComponentRedundantRoleSwitchoverReasonTrigger, bool) {
			ret := gs.(*oc.Component_LastSwitchoverReason).Trigger
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_LastSwitchoverReason) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_LastSwitchoverReasonPath represents the /openconfig-platform/components/component/state/last-switchover-reason YANG schema element.
type Component_LastSwitchoverReasonPath struct {
	*ygnmi.NodePath
}

// Component_LastSwitchoverReasonPathAny represents the wildcard version of the /openconfig-platform/components/component/state/last-switchover-reason YANG schema element.
type Component_LastSwitchoverReasonPathAny struct {
	*ygnmi.NodePath
}

// Details (leaf): Records detailed description of why the switchover happens.
// For example, when system initiated the switchover, this leaf
// can be used to record the specific reason, e.g. due to critical
// errors of the routing daemon in the primary role.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "details"
//	Path from root:       "/components/component/state/last-switchover-reason/details"
func (n *Component_LastSwitchoverReasonPath) Details() *Component_LastSwitchoverReason_DetailsPath {
	ps := &Component_LastSwitchoverReason_DetailsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"details"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Details (leaf): Records detailed description of why the switchover happens.
// For example, when system initiated the switchover, this leaf
// can be used to record the specific reason, e.g. due to critical
// errors of the routing daemon in the primary role.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "details"
//	Path from root:       "/components/component/state/last-switchover-reason/details"
func (n *Component_LastSwitchoverReasonPathAny) Details() *Component_LastSwitchoverReason_DetailsPathAny {
	ps := &Component_LastSwitchoverReason_DetailsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"details"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Trigger (leaf): Records the generic triggers, e.g. user or system
// initiated the switchover.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "trigger"
//	Path from root:       "/components/component/state/last-switchover-reason/trigger"
func (n *Component_LastSwitchoverReasonPath) Trigger() *Component_LastSwitchoverReason_TriggerPath {
	ps := &Component_LastSwitchoverReason_TriggerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"trigger"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Trigger (leaf): Records the generic triggers, e.g. user or system
// initiated the switchover.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "trigger"
//	Path from root:       "/components/component/state/last-switchover-reason/trigger"
func (n *Component_LastSwitchoverReasonPathAny) Trigger() *Component_LastSwitchoverReason_TriggerPathAny {
	ps := &Component_LastSwitchoverReason_TriggerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"trigger"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_LastSwitchoverReasonPath) State() ygnmi.SingletonQuery[*oc.Component_LastSwitchoverReason] {
	return ygnmi.NewSingletonQuery[*oc.Component_LastSwitchoverReason](
		"Component_LastSwitchoverReason",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_LastSwitchoverReasonPathAny) State() ygnmi.WildcardQuery[*oc.Component_LastSwitchoverReason] {
	return ygnmi.NewWildcardQuery[*oc.Component_LastSwitchoverReason](
		"Component_LastSwitchoverReason",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Linecard_PowerAdminStatePath represents the /openconfig-platform/components/component/linecard/state/power-admin-state YANG schema element.
type Component_Linecard_PowerAdminStatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Linecard_PowerAdminStatePathAny represents the wildcard version of the /openconfig-platform/components/component/linecard/state/power-admin-state YANG schema element.
type Component_Linecard_PowerAdminStatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "state/power-admin-state"
//	Path from root:       "/components/component/linecard/state/power-admin-state"
func (n *Component_Linecard_PowerAdminStatePath) State() ygnmi.SingletonQuery[oc.E_Platform_ComponentPowerType] {
	return ygnmi.NewSingletonQuery[oc.E_Platform_ComponentPowerType](
		"Component_Linecard",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "power-admin-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Platform_ComponentPowerType, bool) {
			ret := gs.(*oc.Component_Linecard).PowerAdminState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "state/power-admin-state"
//	Path from root:       "/components/component/linecard/state/power-admin-state"
func (n *Component_Linecard_PowerAdminStatePathAny) State() ygnmi.WildcardQuery[oc.E_Platform_ComponentPowerType] {
	return ygnmi.NewWildcardQuery[oc.E_Platform_ComponentPowerType](
		"Component_Linecard",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "power-admin-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Platform_ComponentPowerType, bool) {
			ret := gs.(*oc.Component_Linecard).PowerAdminState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "config/power-admin-state"
//	Path from root:       "/components/component/linecard/config/power-admin-state"
func (n *Component_Linecard_PowerAdminStatePath) Config() ygnmi.ConfigQuery[oc.E_Platform_ComponentPowerType] {
	return ygnmi.NewConfigQuery[oc.E_Platform_ComponentPowerType](
		"Component_Linecard",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "power-admin-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Platform_ComponentPowerType, bool) {
			ret := gs.(*oc.Component_Linecard).PowerAdminState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "config/power-admin-state"
//	Path from root:       "/components/component/linecard/config/power-admin-state"
func (n *Component_Linecard_PowerAdminStatePathAny) Config() ygnmi.WildcardQuery[oc.E_Platform_ComponentPowerType] {
	return ygnmi.NewWildcardQuery[oc.E_Platform_ComponentPowerType](
		"Component_Linecard",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "power-admin-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Platform_ComponentPowerType, bool) {
			ret := gs.(*oc.Component_Linecard).PowerAdminState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Linecard_SlotIdPath represents the /openconfig-platform/components/component/linecard/state/slot-id YANG schema element.
type Component_Linecard_SlotIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Linecard_SlotIdPathAny represents the wildcard version of the /openconfig-platform/components/component/linecard/state/slot-id YANG schema element.
type Component_Linecard_SlotIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-linecard"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "state/slot-id"
//	Path from root:       "/components/component/linecard/state/slot-id"
func (n *Component_Linecard_SlotIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_Linecard",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "slot-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Linecard).SlotId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-linecard"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "state/slot-id"
//	Path from root:       "/components/component/linecard/state/slot-id"
func (n *Component_Linecard_SlotIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_Linecard",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "slot-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Linecard).SlotId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_LinecardPath represents the /openconfig-platform/components/component/linecard YANG schema element.
type Component_LinecardPath struct {
	*ygnmi.NodePath
}

// Component_LinecardPathAny represents the wildcard version of the /openconfig-platform/components/component/linecard YANG schema element.
type Component_LinecardPathAny struct {
	*ygnmi.NodePath
}

// PowerAdminState (leaf): When set to POWER_DISABLED, the component should be shut down by removing
// electrical power.  This is intended to be used to prevent the component
// from becoming active even after a reboot of the system. A component
// (if controller-card) may not honor power-admin-state depending on rules
// defined in the description of the component config container.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/power-admin-state"
//	Path from root:       "/components/component/linecard/*/power-admin-state"
func (n *Component_LinecardPath) PowerAdminState() *Component_Linecard_PowerAdminStatePath {
	ps := &Component_Linecard_PowerAdminStatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "power-admin-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PowerAdminState (leaf): When set to POWER_DISABLED, the component should be shut down by removing
// electrical power.  This is intended to be used to prevent the component
// from becoming active even after a reboot of the system. A component
// (if controller-card) may not honor power-admin-state depending on rules
// defined in the description of the component config container.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/power-admin-state"
//	Path from root:       "/components/component/linecard/*/power-admin-state"
func (n *Component_LinecardPathAny) PowerAdminState() *Component_Linecard_PowerAdminStatePathAny {
	ps := &Component_Linecard_PowerAdminStatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "power-admin-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SlotId (leaf): Identifier for the slot or chassis position in which the
// linecard is installed.
//
// This leaf is deprecated and will be replaced by install-position
// and install-component leaves in a future major revision of this
// model.
//
//	Defining module:      "openconfig-platform-linecard"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/slot-id"
//	Path from root:       "/components/component/linecard/state/slot-id"
func (n *Component_LinecardPath) SlotId() *Component_Linecard_SlotIdPath {
	ps := &Component_Linecard_SlotIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "slot-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SlotId (leaf): Identifier for the slot or chassis position in which the
// linecard is installed.
//
// This leaf is deprecated and will be replaced by install-position
// and install-component leaves in a future major revision of this
// model.
//
//	Defining module:      "openconfig-platform-linecard"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/slot-id"
//	Path from root:       "/components/component/linecard/state/slot-id"
func (n *Component_LinecardPathAny) SlotId() *Component_Linecard_SlotIdPathAny {
	ps := &Component_Linecard_SlotIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "slot-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Utilization (container): Resource utilization of the component.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "utilization"
//	Path from root:       "/components/component/linecard/utilization"
func (n *Component_LinecardPath) Utilization() *Component_Linecard_UtilizationPath {
	ps := &Component_Linecard_UtilizationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"utilization"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Utilization (container): Resource utilization of the component.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "utilization"
//	Path from root:       "/components/component/linecard/utilization"
func (n *Component_LinecardPathAny) Utilization() *Component_Linecard_UtilizationPathAny {
	ps := &Component_Linecard_UtilizationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"utilization"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_LinecardPath) State() ygnmi.SingletonQuery[*oc.Component_Linecard] {
	return ygnmi.NewSingletonQuery[*oc.Component_Linecard](
		"Component_Linecard",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_LinecardPathAny) State() ygnmi.WildcardQuery[*oc.Component_Linecard] {
	return ygnmi.NewWildcardQuery[*oc.Component_Linecard](
		"Component_Linecard",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_LinecardPath) Config() ygnmi.ConfigQuery[*oc.Component_Linecard] {
	return ygnmi.NewConfigQuery[*oc.Component_Linecard](
		"Component_Linecard",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_LinecardPathAny) Config() ygnmi.WildcardQuery[*oc.Component_Linecard] {
	return ygnmi.NewWildcardQuery[*oc.Component_Linecard](
		"Component_Linecard",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Linecard_UtilizationPath represents the /openconfig-platform/components/component/linecard/utilization YANG schema element.
type Component_Linecard_UtilizationPath struct {
	*ygnmi.NodePath
}

// Component_Linecard_UtilizationPathAny represents the wildcard version of the /openconfig-platform/components/component/linecard/utilization YANG schema element.
type Component_Linecard_UtilizationPathAny struct {
	*ygnmi.NodePath
}

// ResourceAny (list): List of resources, keyed by resource name.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "resources/resource"
//	Path from root:       "/components/component/linecard/utilization/resources/resource"
func (n *Component_Linecard_UtilizationPath) ResourceAny() *Component_Linecard_Utilization_ResourcePathAny {
	ps := &Component_Linecard_Utilization_ResourcePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// ResourceAny (list): List of resources, keyed by resource name.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "resources/resource"
//	Path from root:       "/components/component/linecard/utilization/resources/resource"
func (n *Component_Linecard_UtilizationPathAny) ResourceAny() *Component_Linecard_Utilization_ResourcePathAny {
	ps := &Component_Linecard_Utilization_ResourcePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Resource (list): List of resources, keyed by resource name.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "resources/resource"
//	Path from root:       "/components/component/linecard/utilization/resources/resource"
//
//	Name: string
func (n *Component_Linecard_UtilizationPath) Resource(Name string) *Component_Linecard_Utilization_ResourcePath {
	ps := &Component_Linecard_Utilization_ResourcePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Resource (list): List of resources, keyed by resource name.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "resources/resource"
//	Path from root:       "/components/component/linecard/utilization/resources/resource"
//
//	Name: string
func (n *Component_Linecard_UtilizationPathAny) Resource(Name string) *Component_Linecard_Utilization_ResourcePathAny {
	ps := &Component_Linecard_Utilization_ResourcePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// ResourceMap (list): List of resources, keyed by resource name.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "resources/resource"
//	Path from root:       "/components/component/linecard/utilization/resources/resource"
func (n *Component_Linecard_UtilizationPath) ResourceMap() *Component_Linecard_Utilization_ResourcePathMap {
	ps := &Component_Linecard_Utilization_ResourcePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"resources"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ResourceMap (list): List of resources, keyed by resource name.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "resources/resource"
//	Path from root:       "/components/component/linecard/utilization/resources/resource"
func (n *Component_Linecard_UtilizationPathAny) ResourceMap() *Component_Linecard_Utilization_ResourcePathMapAny {
	ps := &Component_Linecard_Utilization_ResourcePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"resources"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Linecard_UtilizationPath) State() ygnmi.SingletonQuery[*oc.Component_Linecard_Utilization] {
	return ygnmi.NewSingletonQuery[*oc.Component_Linecard_Utilization](
		"Component_Linecard_Utilization",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Linecard_UtilizationPathAny) State() ygnmi.WildcardQuery[*oc.Component_Linecard_Utilization] {
	return ygnmi.NewWildcardQuery[*oc.Component_Linecard_Utilization](
		"Component_Linecard_Utilization",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Linecard_UtilizationPath) Config() ygnmi.ConfigQuery[*oc.Component_Linecard_Utilization] {
	return ygnmi.NewConfigQuery[*oc.Component_Linecard_Utilization](
		"Component_Linecard_Utilization",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Linecard_UtilizationPathAny) Config() ygnmi.WildcardQuery[*oc.Component_Linecard_Utilization] {
	return ygnmi.NewWildcardQuery[*oc.Component_Linecard_Utilization](
		"Component_Linecard_Utilization",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Linecard_Utilization_Resource_CommittedPath represents the /openconfig-platform/components/component/linecard/utilization/resources/resource/state/committed YANG schema element.
type Component_Linecard_Utilization_Resource_CommittedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Linecard_Utilization_Resource_CommittedPathAny represents the wildcard version of the /openconfig-platform/components/component/linecard/utilization/resources/resource/state/committed YANG schema element.
type Component_Linecard_Utilization_Resource_CommittedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "state/committed"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/committed"
func (n *Component_Linecard_Utilization_Resource_CommittedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Linecard_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "committed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization_Resource).Committed
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "state/committed"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/committed"
func (n *Component_Linecard_Utilization_Resource_CommittedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Linecard_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "committed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization_Resource).Committed
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Linecard_Utilization_Resource_FreePath represents the /openconfig-platform/components/component/linecard/utilization/resources/resource/state/free YANG schema element.
type Component_Linecard_Utilization_Resource_FreePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Linecard_Utilization_Resource_FreePathAny represents the wildcard version of the /openconfig-platform/components/component/linecard/utilization/resources/resource/state/free YANG schema element.
type Component_Linecard_Utilization_Resource_FreePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "state/free"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/free"
func (n *Component_Linecard_Utilization_Resource_FreePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Linecard_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "free"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization_Resource).Free
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "state/free"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/free"
func (n *Component_Linecard_Utilization_Resource_FreePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Linecard_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "free"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization_Resource).Free
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Linecard_Utilization_Resource_HighWatermarkPath represents the /openconfig-platform/components/component/linecard/utilization/resources/resource/state/high-watermark YANG schema element.
type Component_Linecard_Utilization_Resource_HighWatermarkPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Linecard_Utilization_Resource_HighWatermarkPathAny represents the wildcard version of the /openconfig-platform/components/component/linecard/utilization/resources/resource/state/high-watermark YANG schema element.
type Component_Linecard_Utilization_Resource_HighWatermarkPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "state/high-watermark"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/high-watermark"
func (n *Component_Linecard_Utilization_Resource_HighWatermarkPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Linecard_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "high-watermark"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization_Resource).HighWatermark
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "state/high-watermark"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/high-watermark"
func (n *Component_Linecard_Utilization_Resource_HighWatermarkPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Linecard_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "high-watermark"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization_Resource).HighWatermark
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Linecard_Utilization_Resource_LastHighWatermarkPath represents the /openconfig-platform/components/component/linecard/utilization/resources/resource/state/last-high-watermark YANG schema element.
type Component_Linecard_Utilization_Resource_LastHighWatermarkPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Linecard_Utilization_Resource_LastHighWatermarkPathAny represents the wildcard version of the /openconfig-platform/components/component/linecard/utilization/resources/resource/state/last-high-watermark YANG schema element.
type Component_Linecard_Utilization_Resource_LastHighWatermarkPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "state/last-high-watermark"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/last-high-watermark"
func (n *Component_Linecard_Utilization_Resource_LastHighWatermarkPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Linecard_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-high-watermark"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization_Resource).LastHighWatermark
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "state/last-high-watermark"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/last-high-watermark"
func (n *Component_Linecard_Utilization_Resource_LastHighWatermarkPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Linecard_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-high-watermark"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization_Resource).LastHighWatermark
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Linecard_Utilization_Resource_MaxLimitPath represents the /openconfig-platform/components/component/linecard/utilization/resources/resource/state/max-limit YANG schema element.
type Component_Linecard_Utilization_Resource_MaxLimitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Linecard_Utilization_Resource_MaxLimitPathAny represents the wildcard version of the /openconfig-platform/components/component/linecard/utilization/resources/resource/state/max-limit YANG schema element.
type Component_Linecard_Utilization_Resource_MaxLimitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "state/max-limit"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/max-limit"
func (n *Component_Linecard_Utilization_Resource_MaxLimitPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Linecard_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization_Resource).MaxLimit
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "state/max-limit"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/max-limit"
func (n *Component_Linecard_Utilization_Resource_MaxLimitPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Linecard_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization_Resource).MaxLimit
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Linecard_Utilization_Resource_NamePath represents the /openconfig-platform/components/component/linecard/utilization/resources/resource/state/name YANG schema element.
type Component_Linecard_Utilization_Resource_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Linecard_Utilization_Resource_NamePathAny represents the wildcard version of the /openconfig-platform/components/component/linecard/utilization/resources/resource/state/name YANG schema element.
type Component_Linecard_Utilization_Resource_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/name"
func (n *Component_Linecard_Utilization_Resource_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_Linecard_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization_Resource).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/name"
func (n *Component_Linecard_Utilization_Resource_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_Linecard_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization_Resource).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "config/name"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/config/name"
func (n *Component_Linecard_Utilization_Resource_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Component_Linecard_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization_Resource).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "config/name"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/config/name"
func (n *Component_Linecard_Utilization_Resource_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_Linecard_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization_Resource).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Linecard_Utilization_Resource_UsedPath represents the /openconfig-platform/components/component/linecard/utilization/resources/resource/state/used YANG schema element.
type Component_Linecard_Utilization_Resource_UsedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Linecard_Utilization_Resource_UsedPathAny represents the wildcard version of the /openconfig-platform/components/component/linecard/utilization/resources/resource/state/used YANG schema element.
type Component_Linecard_Utilization_Resource_UsedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "state/used"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/used"
func (n *Component_Linecard_Utilization_Resource_UsedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Linecard_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization_Resource).Used
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "state/used"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/used"
func (n *Component_Linecard_Utilization_Resource_UsedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Linecard_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization_Resource).Used
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Linecard_Utilization_Resource_UsedThresholdUpperPath represents the /openconfig-platform/components/component/linecard/utilization/resources/resource/state/used-threshold-upper YANG schema element.
type Component_Linecard_Utilization_Resource_UsedThresholdUpperPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Linecard_Utilization_Resource_UsedThresholdUpperPathAny represents the wildcard version of the /openconfig-platform/components/component/linecard/utilization/resources/resource/state/used-threshold-upper YANG schema element.
type Component_Linecard_Utilization_Resource_UsedThresholdUpperPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "state/used-threshold-upper"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/used-threshold-upper"
func (n *Component_Linecard_Utilization_Resource_UsedThresholdUpperPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Component_Linecard_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization_Resource).UsedThresholdUpper
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "state/used-threshold-upper"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/used-threshold-upper"
func (n *Component_Linecard_Utilization_Resource_UsedThresholdUpperPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_Linecard_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization_Resource).UsedThresholdUpper
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "config/used-threshold-upper"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/config/used-threshold-upper"
func (n *Component_Linecard_Utilization_Resource_UsedThresholdUpperPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Component_Linecard_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "used-threshold-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization_Resource).UsedThresholdUpper
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "config/used-threshold-upper"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/config/used-threshold-upper"
func (n *Component_Linecard_Utilization_Resource_UsedThresholdUpperPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_Linecard_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "used-threshold-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization_Resource).UsedThresholdUpper
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Linecard_Utilization_Resource_UsedThresholdUpperClearPath represents the /openconfig-platform/components/component/linecard/utilization/resources/resource/state/used-threshold-upper-clear YANG schema element.
type Component_Linecard_Utilization_Resource_UsedThresholdUpperClearPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Linecard_Utilization_Resource_UsedThresholdUpperClearPathAny represents the wildcard version of the /openconfig-platform/components/component/linecard/utilization/resources/resource/state/used-threshold-upper-clear YANG schema element.
type Component_Linecard_Utilization_Resource_UsedThresholdUpperClearPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "state/used-threshold-upper-clear"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/used-threshold-upper-clear"
func (n *Component_Linecard_Utilization_Resource_UsedThresholdUpperClearPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Component_Linecard_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization_Resource).UsedThresholdUpperClear
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "state/used-threshold-upper-clear"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/used-threshold-upper-clear"
func (n *Component_Linecard_Utilization_Resource_UsedThresholdUpperClearPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_Linecard_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization_Resource).UsedThresholdUpperClear
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "config/used-threshold-upper-clear"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/config/used-threshold-upper-clear"
func (n *Component_Linecard_Utilization_Resource_UsedThresholdUpperClearPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Component_Linecard_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "used-threshold-upper-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization_Resource).UsedThresholdUpperClear
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "config/used-threshold-upper-clear"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/config/used-threshold-upper-clear"
func (n *Component_Linecard_Utilization_Resource_UsedThresholdUpperClearPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_Linecard_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "used-threshold-upper-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization_Resource).UsedThresholdUpperClear
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Linecard_Utilization_Resource_UsedThresholdUpperExceededPath represents the /openconfig-platform/components/component/linecard/utilization/resources/resource/state/used-threshold-upper-exceeded YANG schema element.
type Component_Linecard_Utilization_Resource_UsedThresholdUpperExceededPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Linecard_Utilization_Resource_UsedThresholdUpperExceededPathAny represents the wildcard version of the /openconfig-platform/components/component/linecard/utilization/resources/resource/state/used-threshold-upper-exceeded YANG schema element.
type Component_Linecard_Utilization_Resource_UsedThresholdUpperExceededPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "state/used-threshold-upper-exceeded"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/used-threshold-upper-exceeded"
func (n *Component_Linecard_Utilization_Resource_UsedThresholdUpperExceededPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component_Linecard_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper-exceeded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization_Resource).UsedThresholdUpperExceeded
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "state/used-threshold-upper-exceeded"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/used-threshold-upper-exceeded"
func (n *Component_Linecard_Utilization_Resource_UsedThresholdUpperExceededPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_Linecard_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper-exceeded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization_Resource).UsedThresholdUpperExceeded
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Linecard_Utilization_ResourcePath represents the /openconfig-platform/components/component/linecard/utilization/resources/resource YANG schema element.
type Component_Linecard_Utilization_ResourcePath struct {
	*ygnmi.NodePath
}

// Component_Linecard_Utilization_ResourcePathAny represents the wildcard version of the /openconfig-platform/components/component/linecard/utilization/resources/resource YANG schema element.
type Component_Linecard_Utilization_ResourcePathAny struct {
	*ygnmi.NodePath
}

// Component_Linecard_Utilization_ResourcePathMap represents the /openconfig-platform/components/component/linecard/utilization/resources/resource YANG schema element.
type Component_Linecard_Utilization_ResourcePathMap struct {
	*ygnmi.NodePath
}

// Component_Linecard_Utilization_ResourcePathMapAny represents the wildcard version of the /openconfig-platform/components/component/linecard/utilization/resources/resource YANG schema element.
type Component_Linecard_Utilization_ResourcePathMapAny struct {
	*ygnmi.NodePath
}

// Committed (leaf): Number of entries currently reserved for this resource. This is only
// relevant to tables which allocate a block of resource for a given
// feature.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/committed"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/committed"
func (n *Component_Linecard_Utilization_ResourcePath) Committed() *Component_Linecard_Utilization_Resource_CommittedPath {
	ps := &Component_Linecard_Utilization_Resource_CommittedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "committed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Committed (leaf): Number of entries currently reserved for this resource. This is only
// relevant to tables which allocate a block of resource for a given
// feature.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/committed"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/committed"
func (n *Component_Linecard_Utilization_ResourcePathAny) Committed() *Component_Linecard_Utilization_Resource_CommittedPathAny {
	ps := &Component_Linecard_Utilization_Resource_CommittedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "committed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Free (leaf): Number of entries available to use.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/free"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/free"
func (n *Component_Linecard_Utilization_ResourcePath) Free() *Component_Linecard_Utilization_Resource_FreePath {
	ps := &Component_Linecard_Utilization_Resource_FreePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "free"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Free (leaf): Number of entries available to use.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/free"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/free"
func (n *Component_Linecard_Utilization_ResourcePathAny) Free() *Component_Linecard_Utilization_Resource_FreePathAny {
	ps := &Component_Linecard_Utilization_Resource_FreePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "free"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HighWatermark (leaf): A watermark of highest number of entries used for this resource.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/high-watermark"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/high-watermark"
func (n *Component_Linecard_Utilization_ResourcePath) HighWatermark() *Component_Linecard_Utilization_Resource_HighWatermarkPath {
	ps := &Component_Linecard_Utilization_Resource_HighWatermarkPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "high-watermark"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HighWatermark (leaf): A watermark of highest number of entries used for this resource.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/high-watermark"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/high-watermark"
func (n *Component_Linecard_Utilization_ResourcePathAny) HighWatermark() *Component_Linecard_Utilization_Resource_HighWatermarkPathAny {
	ps := &Component_Linecard_Utilization_Resource_HighWatermarkPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "high-watermark"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastHighWatermark (leaf): The timestamp when the high-watermark was last updated. The value
// is the timestamp in nanoseconds relative to the Unix Epoch
// (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/last-high-watermark"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/last-high-watermark"
func (n *Component_Linecard_Utilization_ResourcePath) LastHighWatermark() *Component_Linecard_Utilization_Resource_LastHighWatermarkPath {
	ps := &Component_Linecard_Utilization_Resource_LastHighWatermarkPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-high-watermark"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastHighWatermark (leaf): The timestamp when the high-watermark was last updated. The value
// is the timestamp in nanoseconds relative to the Unix Epoch
// (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/last-high-watermark"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/last-high-watermark"
func (n *Component_Linecard_Utilization_ResourcePathAny) LastHighWatermark() *Component_Linecard_Utilization_Resource_LastHighWatermarkPathAny {
	ps := &Component_Linecard_Utilization_Resource_LastHighWatermarkPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-high-watermark"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxLimit (leaf): Maximum number of entries available for the resource. The value
// is the theoretical maximum resource utilization possible.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/max-limit"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/max-limit"
func (n *Component_Linecard_Utilization_ResourcePath) MaxLimit() *Component_Linecard_Utilization_Resource_MaxLimitPath {
	ps := &Component_Linecard_Utilization_Resource_MaxLimitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "max-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxLimit (leaf): Maximum number of entries available for the resource. The value
// is the theoretical maximum resource utilization possible.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/max-limit"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/max-limit"
func (n *Component_Linecard_Utilization_ResourcePathAny) MaxLimit() *Component_Linecard_Utilization_Resource_MaxLimitPathAny {
	ps := &Component_Linecard_Utilization_Resource_MaxLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "max-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Resource name within the component.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/*/name"
func (n *Component_Linecard_Utilization_ResourcePath) Name() *Component_Linecard_Utilization_Resource_NamePath {
	ps := &Component_Linecard_Utilization_Resource_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Resource name within the component.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/*/name"
func (n *Component_Linecard_Utilization_ResourcePathAny) Name() *Component_Linecard_Utilization_Resource_NamePathAny {
	ps := &Component_Linecard_Utilization_Resource_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Used (leaf): Number of entries currently in use for the resource.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/used"
func (n *Component_Linecard_Utilization_ResourcePath) Used() *Component_Linecard_Utilization_Resource_UsedPath {
	ps := &Component_Linecard_Utilization_Resource_UsedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "used"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Used (leaf): Number of entries currently in use for the resource.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/used"
func (n *Component_Linecard_Utilization_ResourcePathAny) Used() *Component_Linecard_Utilization_Resource_UsedPathAny {
	ps := &Component_Linecard_Utilization_Resource_UsedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "used"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UsedThresholdUpper (leaf): The used percentage value (used / (used + free) * 100) that
// when crossed will set utilization-threshold-exceeded to 'true'.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/used-threshold-upper"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/*/used-threshold-upper"
func (n *Component_Linecard_Utilization_ResourcePath) UsedThresholdUpper() *Component_Linecard_Utilization_Resource_UsedThresholdUpperPath {
	ps := &Component_Linecard_Utilization_Resource_UsedThresholdUpperPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "used-threshold-upper"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UsedThresholdUpper (leaf): The used percentage value (used / (used + free) * 100) that
// when crossed will set utilization-threshold-exceeded to 'true'.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/used-threshold-upper"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/*/used-threshold-upper"
func (n *Component_Linecard_Utilization_ResourcePathAny) UsedThresholdUpper() *Component_Linecard_Utilization_Resource_UsedThresholdUpperPathAny {
	ps := &Component_Linecard_Utilization_Resource_UsedThresholdUpperPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "used-threshold-upper"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UsedThresholdUpperClear (leaf): The used percentage value (used / (used + free) * 100) that when
// crossed will set utilization-threshold-exceeded to 'false'.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/used-threshold-upper-clear"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/*/used-threshold-upper-clear"
func (n *Component_Linecard_Utilization_ResourcePath) UsedThresholdUpperClear() *Component_Linecard_Utilization_Resource_UsedThresholdUpperClearPath {
	ps := &Component_Linecard_Utilization_Resource_UsedThresholdUpperClearPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "used-threshold-upper-clear"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UsedThresholdUpperClear (leaf): The used percentage value (used / (used + free) * 100) that when
// crossed will set utilization-threshold-exceeded to 'false'.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/used-threshold-upper-clear"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/*/used-threshold-upper-clear"
func (n *Component_Linecard_Utilization_ResourcePathAny) UsedThresholdUpperClear() *Component_Linecard_Utilization_Resource_UsedThresholdUpperClearPathAny {
	ps := &Component_Linecard_Utilization_Resource_UsedThresholdUpperClearPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "used-threshold-upper-clear"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UsedThresholdUpperExceeded (leaf): This value is set to true when the used percentage value
// (used / (used + free) * 100) has crossed the used-threshold-upper for this
// resource and false when the used percentage value has crossed the configured
// used-threshold-upper-clear value for this resource.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-threshold-upper-exceeded"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/used-threshold-upper-exceeded"
func (n *Component_Linecard_Utilization_ResourcePath) UsedThresholdUpperExceeded() *Component_Linecard_Utilization_Resource_UsedThresholdUpperExceededPath {
	ps := &Component_Linecard_Utilization_Resource_UsedThresholdUpperExceededPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper-exceeded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UsedThresholdUpperExceeded (leaf): This value is set to true when the used percentage value
// (used / (used + free) * 100) has crossed the used-threshold-upper for this
// resource and false when the used percentage value has crossed the configured
// used-threshold-upper-clear value for this resource.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-threshold-upper-exceeded"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/used-threshold-upper-exceeded"
func (n *Component_Linecard_Utilization_ResourcePathAny) UsedThresholdUpperExceeded() *Component_Linecard_Utilization_Resource_UsedThresholdUpperExceededPathAny {
	ps := &Component_Linecard_Utilization_Resource_UsedThresholdUpperExceededPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper-exceeded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Linecard_Utilization_ResourcePath) State() ygnmi.SingletonQuery[*oc.Component_Linecard_Utilization_Resource] {
	return ygnmi.NewSingletonQuery[*oc.Component_Linecard_Utilization_Resource](
		"Component_Linecard_Utilization_Resource",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Linecard_Utilization_ResourcePathAny) State() ygnmi.WildcardQuery[*oc.Component_Linecard_Utilization_Resource] {
	return ygnmi.NewWildcardQuery[*oc.Component_Linecard_Utilization_Resource](
		"Component_Linecard_Utilization_Resource",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Linecard_Utilization_ResourcePath) Config() ygnmi.ConfigQuery[*oc.Component_Linecard_Utilization_Resource] {
	return ygnmi.NewConfigQuery[*oc.Component_Linecard_Utilization_Resource](
		"Component_Linecard_Utilization_Resource",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Linecard_Utilization_ResourcePathAny) Config() ygnmi.WildcardQuery[*oc.Component_Linecard_Utilization_Resource] {
	return ygnmi.NewWildcardQuery[*oc.Component_Linecard_Utilization_Resource](
		"Component_Linecard_Utilization_Resource",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Linecard_Utilization_ResourcePathMap) State() ygnmi.SingletonQuery[map[string]*oc.Component_Linecard_Utilization_Resource] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Component_Linecard_Utilization_Resource](
		"Component_Linecard_Utilization",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_Linecard_Utilization_Resource, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization).Resource
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-linecard:resources"},
			PostRelPath: []string{"openconfig-platform-linecard:resource"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Linecard_Utilization_ResourcePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Component_Linecard_Utilization_Resource] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Component_Linecard_Utilization_Resource](
		"Component_Linecard_Utilization",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_Linecard_Utilization_Resource, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization).Resource
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-linecard:resources"},
			PostRelPath: []string{"openconfig-platform-linecard:resource"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Linecard_Utilization_ResourcePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Component_Linecard_Utilization_Resource] {
	return ygnmi.NewConfigQuery[map[string]*oc.Component_Linecard_Utilization_Resource](
		"Component_Linecard_Utilization",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_Linecard_Utilization_Resource, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization).Resource
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-linecard:resources"},
			PostRelPath: []string{"openconfig-platform-linecard:resource"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Linecard_Utilization_ResourcePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Component_Linecard_Utilization_Resource] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Component_Linecard_Utilization_Resource](
		"Component_Linecard_Utilization",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_Linecard_Utilization_Resource, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization).Resource
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-linecard:resources"},
			PostRelPath: []string{"openconfig-platform-linecard:resource"},
		},
	)
}

// Component_Memory_AvailablePath represents the /openconfig-platform/components/component/state/memory/available YANG schema element.
type Component_Memory_AvailablePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Memory_AvailablePathAny represents the wildcard version of the /openconfig-platform/components/component/state/memory/available YANG schema element.
type Component_Memory_AvailablePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "available"
//	Path from root:       "/components/component/state/memory/available"
func (n *Component_Memory_AvailablePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Memory",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"available"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Memory).Available
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Memory) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "available"
//	Path from root:       "/components/component/state/memory/available"
func (n *Component_Memory_AvailablePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Memory",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"available"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Memory).Available
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Memory) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Memory_UtilizedPath represents the /openconfig-platform/components/component/state/memory/utilized YANG schema element.
type Component_Memory_UtilizedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Memory_UtilizedPathAny represents the wildcard version of the /openconfig-platform/components/component/state/memory/utilized YANG schema element.
type Component_Memory_UtilizedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "utilized"
//	Path from root:       "/components/component/state/memory/utilized"
func (n *Component_Memory_UtilizedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Memory",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"utilized"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Memory).Utilized
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Memory) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "utilized"
//	Path from root:       "/components/component/state/memory/utilized"
func (n *Component_Memory_UtilizedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Memory",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"utilized"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Memory).Utilized
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Memory) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_MemoryPath represents the /openconfig-platform/components/component/state/memory YANG schema element.
type Component_MemoryPath struct {
	*ygnmi.NodePath
}

// Component_MemoryPathAny represents the wildcard version of the /openconfig-platform/components/component/state/memory YANG schema element.
type Component_MemoryPathAny struct {
	*ygnmi.NodePath
}

// Available (leaf): The available memory physically installed, or logically
// allocated to the component.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "available"
//	Path from root:       "/components/component/state/memory/available"
func (n *Component_MemoryPath) Available() *Component_Memory_AvailablePath {
	ps := &Component_Memory_AvailablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"available"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Available (leaf): The available memory physically installed, or logically
// allocated to the component.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "available"
//	Path from root:       "/components/component/state/memory/available"
func (n *Component_MemoryPathAny) Available() *Component_Memory_AvailablePathAny {
	ps := &Component_Memory_AvailablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"available"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Utilized (leaf): The memory currently in use by processes running on
// the component, not considering reserved memory that is
// not available for use.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "utilized"
//	Path from root:       "/components/component/state/memory/utilized"
func (n *Component_MemoryPath) Utilized() *Component_Memory_UtilizedPath {
	ps := &Component_Memory_UtilizedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"utilized"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Utilized (leaf): The memory currently in use by processes running on
// the component, not considering reserved memory that is
// not available for use.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "utilized"
//	Path from root:       "/components/component/state/memory/utilized"
func (n *Component_MemoryPathAny) Utilized() *Component_Memory_UtilizedPathAny {
	ps := &Component_Memory_UtilizedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"utilized"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_MemoryPath) State() ygnmi.SingletonQuery[*oc.Component_Memory] {
	return ygnmi.NewSingletonQuery[*oc.Component_Memory](
		"Component_Memory",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_MemoryPathAny) State() ygnmi.WildcardQuery[*oc.Component_Memory] {
	return ygnmi.NewWildcardQuery[*oc.Component_Memory](
		"Component_Memory",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_FecUncorrectableBlocksPath represents the /openconfig-platform/components/component/optical-channel/state/fec-uncorrectable-blocks YANG schema element.
type Component_OpticalChannel_FecUncorrectableBlocksPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_FecUncorrectableBlocksPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/fec-uncorrectable-blocks YANG schema element.
type Component_OpticalChannel_FecUncorrectableBlocksPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/fec-uncorrectable-blocks"
//	Path from root:       "/components/component/optical-channel/state/fec-uncorrectable-blocks"
func (n *Component_OpticalChannel_FecUncorrectableBlocksPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fec-uncorrectable-blocks"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel).FecUncorrectableBlocks
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/fec-uncorrectable-blocks"
//	Path from root:       "/components/component/optical-channel/state/fec-uncorrectable-blocks"
func (n *Component_OpticalChannel_FecUncorrectableBlocksPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fec-uncorrectable-blocks"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel).FecUncorrectableBlocks
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_FrequencyPath represents the /openconfig-platform/components/component/optical-channel/state/frequency YANG schema element.
type Component_OpticalChannel_FrequencyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_FrequencyPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/frequency YANG schema element.
type Component_OpticalChannel_FrequencyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/frequency"
//	Path from root:       "/components/component/optical-channel/state/frequency"
func (n *Component_OpticalChannel_FrequencyPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "frequency"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel).Frequency
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/frequency"
//	Path from root:       "/components/component/optical-channel/state/frequency"
func (n *Component_OpticalChannel_FrequencyPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "frequency"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel).Frequency
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/frequency"
//	Path from root:       "/components/component/optical-channel/config/frequency"
func (n *Component_OpticalChannel_FrequencyPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"Component_OpticalChannel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "frequency"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel).Frequency
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/frequency"
//	Path from root:       "/components/component/optical-channel/config/frequency"
func (n *Component_OpticalChannel_FrequencyPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "frequency"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel).Frequency
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_GroupIdPath represents the /openconfig-platform/components/component/optical-channel/state/group-id YANG schema element.
type Component_OpticalChannel_GroupIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_GroupIdPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/group-id YANG schema element.
type Component_OpticalChannel_GroupIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/group-id"
//	Path from root:       "/components/component/optical-channel/state/group-id"
func (n *Component_OpticalChannel_GroupIdPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Component_OpticalChannel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "group-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Component_OpticalChannel).GroupId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/group-id"
//	Path from root:       "/components/component/optical-channel/state/group-id"
func (n *Component_OpticalChannel_GroupIdPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Component_OpticalChannel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "group-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Component_OpticalChannel).GroupId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_LinePortPath represents the /openconfig-platform/components/component/optical-channel/state/line-port YANG schema element.
type Component_OpticalChannel_LinePortPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_LinePortPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/line-port YANG schema element.
type Component_OpticalChannel_LinePortPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/line-port"
//	Path from root:       "/components/component/optical-channel/state/line-port"
func (n *Component_OpticalChannel_LinePortPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_OpticalChannel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "line-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_OpticalChannel).LinePort
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/line-port"
//	Path from root:       "/components/component/optical-channel/state/line-port"
func (n *Component_OpticalChannel_LinePortPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_OpticalChannel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "line-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_OpticalChannel).LinePort
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/line-port"
//	Path from root:       "/components/component/optical-channel/config/line-port"
func (n *Component_OpticalChannel_LinePortPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Component_OpticalChannel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "line-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_OpticalChannel).LinePort
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/line-port"
//	Path from root:       "/components/component/optical-channel/config/line-port"
func (n *Component_OpticalChannel_LinePortPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_OpticalChannel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "line-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_OpticalChannel).LinePort
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_LogicalChannelAssignmentPath represents the /openconfig-platform/components/component/optical-channel/state/logical-channel-assignment YANG schema element.
type Component_OpticalChannel_LogicalChannelAssignmentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_LogicalChannelAssignmentPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/logical-channel-assignment YANG schema element.
type Component_OpticalChannel_LogicalChannelAssignmentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/logical-channel-assignment"
//	Path from root:       "/components/component/optical-channel/state/logical-channel-assignment"
func (n *Component_OpticalChannel_LogicalChannelAssignmentPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Component_OpticalChannel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "logical-channel-assignment"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Component_OpticalChannel).LogicalChannelAssignment
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/logical-channel-assignment"
//	Path from root:       "/components/component/optical-channel/state/logical-channel-assignment"
func (n *Component_OpticalChannel_LogicalChannelAssignmentPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Component_OpticalChannel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "logical-channel-assignment"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Component_OpticalChannel).LogicalChannelAssignment
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_OperationalModePath represents the /openconfig-platform/components/component/optical-channel/state/operational-mode YANG schema element.
type Component_OpticalChannel_OperationalModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_OperationalModePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/operational-mode YANG schema element.
type Component_OpticalChannel_OperationalModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/operational-mode"
//	Path from root:       "/components/component/optical-channel/state/operational-mode"
func (n *Component_OpticalChannel_OperationalModePath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Component_OpticalChannel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "operational-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Component_OpticalChannel).OperationalMode
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/operational-mode"
//	Path from root:       "/components/component/optical-channel/state/operational-mode"
func (n *Component_OpticalChannel_OperationalModePathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Component_OpticalChannel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "operational-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Component_OpticalChannel).OperationalMode
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/operational-mode"
//	Path from root:       "/components/component/optical-channel/config/operational-mode"
func (n *Component_OpticalChannel_OperationalModePath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Component_OpticalChannel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "operational-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Component_OpticalChannel).OperationalMode
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/operational-mode"
//	Path from root:       "/components/component/optical-channel/config/operational-mode"
func (n *Component_OpticalChannel_OperationalModePathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Component_OpticalChannel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "operational-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Component_OpticalChannel).OperationalMode
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_TargetOutputPowerPath represents the /openconfig-platform/components/component/optical-channel/state/target-output-power YANG schema element.
type Component_OpticalChannel_TargetOutputPowerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_TargetOutputPowerPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/target-output-power YANG schema element.
type Component_OpticalChannel_TargetOutputPowerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/target-output-power"
//	Path from root:       "/components/component/optical-channel/state/target-output-power"
func (n *Component_OpticalChannel_TargetOutputPowerPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "target-output-power"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel).TargetOutputPower
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/target-output-power"
//	Path from root:       "/components/component/optical-channel/state/target-output-power"
func (n *Component_OpticalChannel_TargetOutputPowerPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "target-output-power"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel).TargetOutputPower
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/target-output-power"
//	Path from root:       "/components/component/optical-channel/config/target-output-power"
func (n *Component_OpticalChannel_TargetOutputPowerPath) Config() ygnmi.ConfigQuery[float64] {
	return ygnmi.NewConfigQuery[float64](
		"Component_OpticalChannel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "target-output-power"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel).TargetOutputPower
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/target-output-power"
//	Path from root:       "/components/component/optical-channel/config/target-output-power"
func (n *Component_OpticalChannel_TargetOutputPowerPathAny) Config() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "target-output-power"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel).TargetOutputPower
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannelPath represents the /openconfig-platform/components/component/optical-channel YANG schema element.
type Component_OpticalChannelPath struct {
	*ygnmi.NodePath
}

// Component_OpticalChannelPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel YANG schema element.
type Component_OpticalChannelPathAny struct {
	*ygnmi.NodePath
}

// CarrierFrequencyOffset (container): Carrier frequency offset in MHz with 1 decimal precision.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not supported,
// the target is expected to just supply the instant value.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/carrier-frequency-offset"
//	Path from root:       "/components/component/optical-channel/state/carrier-frequency-offset"
func (n *Component_OpticalChannelPath) CarrierFrequencyOffset() *Component_OpticalChannel_CarrierFrequencyOffsetPath {
	ps := &Component_OpticalChannel_CarrierFrequencyOffsetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "carrier-frequency-offset"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// CarrierFrequencyOffset (container): Carrier frequency offset in MHz with 1 decimal precision.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not supported,
// the target is expected to just supply the instant value.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/carrier-frequency-offset"
//	Path from root:       "/components/component/optical-channel/state/carrier-frequency-offset"
func (n *Component_OpticalChannelPathAny) CarrierFrequencyOffset() *Component_OpticalChannel_CarrierFrequencyOffsetPathAny {
	ps := &Component_OpticalChannel_CarrierFrequencyOffsetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "carrier-frequency-offset"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ChromaticDispersion (container): Chromatic Dispersion of an optical channel in
// picoseconds / nanometer (ps/nm) as reported by receiver
// with two decimal precision. Values include the instantaneous,
// average, minimum, and maximum statistics. If avg/min/max
// statistics are not supported, the target is expected to just
// supply the instant value
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/chromatic-dispersion"
//	Path from root:       "/components/component/optical-channel/state/chromatic-dispersion"
func (n *Component_OpticalChannelPath) ChromaticDispersion() *Component_OpticalChannel_ChromaticDispersionPath {
	ps := &Component_OpticalChannel_ChromaticDispersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "chromatic-dispersion"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ChromaticDispersion (container): Chromatic Dispersion of an optical channel in
// picoseconds / nanometer (ps/nm) as reported by receiver
// with two decimal precision. Values include the instantaneous,
// average, minimum, and maximum statistics. If avg/min/max
// statistics are not supported, the target is expected to just
// supply the instant value
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/chromatic-dispersion"
//	Path from root:       "/components/component/optical-channel/state/chromatic-dispersion"
func (n *Component_OpticalChannelPathAny) ChromaticDispersion() *Component_OpticalChannel_ChromaticDispersionPathAny {
	ps := &Component_OpticalChannel_ChromaticDispersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "chromatic-dispersion"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Esnr (container): Electrical signal to noise ratio. Baud rate
// normalized signal to noise ratio based on
// error vector magnitude in dB with two decimal
// precision. Values include the instantaneous, average,
// minimum, and maximum statistics. If avg/min/max
// statistics are not supported, the target is expected
// to just supply the instant value
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/esnr"
//	Path from root:       "/components/component/optical-channel/state/esnr"
func (n *Component_OpticalChannelPath) Esnr() *Component_OpticalChannel_EsnrPath {
	ps := &Component_OpticalChannel_EsnrPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "esnr"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Esnr (container): Electrical signal to noise ratio. Baud rate
// normalized signal to noise ratio based on
// error vector magnitude in dB with two decimal
// precision. Values include the instantaneous, average,
// minimum, and maximum statistics. If avg/min/max
// statistics are not supported, the target is expected
// to just supply the instant value
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/esnr"
//	Path from root:       "/components/component/optical-channel/state/esnr"
func (n *Component_OpticalChannelPathAny) Esnr() *Component_OpticalChannel_EsnrPathAny {
	ps := &Component_OpticalChannel_EsnrPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "esnr"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// FecUncorrectableBlocks (leaf): The number of blocks or frames that were uncorrectable by
// the FEC
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fec-uncorrectable-blocks"
//	Path from root:       "/components/component/optical-channel/state/fec-uncorrectable-blocks"
func (n *Component_OpticalChannelPath) FecUncorrectableBlocks() *Component_OpticalChannel_FecUncorrectableBlocksPath {
	ps := &Component_OpticalChannel_FecUncorrectableBlocksPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fec-uncorrectable-blocks"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FecUncorrectableBlocks (leaf): The number of blocks or frames that were uncorrectable by
// the FEC
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fec-uncorrectable-blocks"
//	Path from root:       "/components/component/optical-channel/state/fec-uncorrectable-blocks"
func (n *Component_OpticalChannelPathAny) FecUncorrectableBlocks() *Component_OpticalChannel_FecUncorrectableBlocksPathAny {
	ps := &Component_OpticalChannel_FecUncorrectableBlocksPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fec-uncorrectable-blocks"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Frequency (leaf): Frequency of the optical channel, expressed in MHz
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/frequency"
//	Path from root:       "/components/component/optical-channel/*/frequency"
func (n *Component_OpticalChannelPath) Frequency() *Component_OpticalChannel_FrequencyPath {
	ps := &Component_OpticalChannel_FrequencyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "frequency"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Frequency (leaf): Frequency of the optical channel, expressed in MHz
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/frequency"
//	Path from root:       "/components/component/optical-channel/*/frequency"
func (n *Component_OpticalChannelPathAny) Frequency() *Component_OpticalChannel_FrequencyPathAny {
	ps := &Component_OpticalChannel_FrequencyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "frequency"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// GroupId (leaf): If the device places constraints on which optical
// channels must be managed together (e.g., transmitted on the
// same line port), it can indicate that by setting the group-id
// to the same value across related optical channels.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/group-id"
//	Path from root:       "/components/component/optical-channel/state/group-id"
func (n *Component_OpticalChannelPath) GroupId() *Component_OpticalChannel_GroupIdPath {
	ps := &Component_OpticalChannel_GroupIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "group-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// GroupId (leaf): If the device places constraints on which optical
// channels must be managed together (e.g., transmitted on the
// same line port), it can indicate that by setting the group-id
// to the same value across related optical channels.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/group-id"
//	Path from root:       "/components/component/optical-channel/state/group-id"
func (n *Component_OpticalChannelPathAny) GroupId() *Component_OpticalChannel_GroupIdPathAny {
	ps := &Component_OpticalChannel_GroupIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "group-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InputPower (container): The input optical power of a physical channel in units
// of 0.01dBm, which may be associated with individual
// physical channels, or an aggregate of multiple physical
// channels (i.e., for the overall transceiver). For an
// aggregate, this may be a measurement from a photodetector
// or a a calculation performed on the device by summing up
// all of the related individual physical channels.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value. When the physical channel has a leafref to
// an optical channel component and the module-functional-type is
// TYPE_DIGITAL_COHERENT_OPTIC this represents the aggregate
// total optical power value (signal and noise) whereas
// optical power value within the optical-channel represents
// the signal power
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/input-power"
//	Path from root:       "/components/component/optical-channel/state/input-power"
func (n *Component_OpticalChannelPath) InputPower() *Component_OpticalChannel_InputPowerPath {
	ps := &Component_OpticalChannel_InputPowerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "input-power"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InputPower (container): The input optical power of a physical channel in units
// of 0.01dBm, which may be associated with individual
// physical channels, or an aggregate of multiple physical
// channels (i.e., for the overall transceiver). For an
// aggregate, this may be a measurement from a photodetector
// or a a calculation performed on the device by summing up
// all of the related individual physical channels.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value. When the physical channel has a leafref to
// an optical channel component and the module-functional-type is
// TYPE_DIGITAL_COHERENT_OPTIC this represents the aggregate
// total optical power value (signal and noise) whereas
// optical power value within the optical-channel represents
// the signal power
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/input-power"
//	Path from root:       "/components/component/optical-channel/state/input-power"
func (n *Component_OpticalChannelPathAny) InputPower() *Component_OpticalChannel_InputPowerPathAny {
	ps := &Component_OpticalChannel_InputPowerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "input-power"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LaserBiasCurrent (container): The current applied by the system to the transmit laser to
// achieve the output power. The current is expressed in mA
// with up to two decimal precision. Values include the
// instantaneous, average, minimum, and maximum statistics.
// If avg/min/max statistics are not supported, the target is
// expected to just supply the instant value. In some cases,
// such as when the physical channel has a leafref to an optical
// channel component and the module-functional-type is
// TYPE_DIGITAL_COHERENT_OPTIC this grouping will NOT be used
// as the data will be within the optical-channel
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/laser-bias-current"
//	Path from root:       "/components/component/optical-channel/state/laser-bias-current"
func (n *Component_OpticalChannelPath) LaserBiasCurrent() *Component_OpticalChannel_LaserBiasCurrentPath {
	ps := &Component_OpticalChannel_LaserBiasCurrentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "laser-bias-current"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LaserBiasCurrent (container): The current applied by the system to the transmit laser to
// achieve the output power. The current is expressed in mA
// with up to two decimal precision. Values include the
// instantaneous, average, minimum, and maximum statistics.
// If avg/min/max statistics are not supported, the target is
// expected to just supply the instant value. In some cases,
// such as when the physical channel has a leafref to an optical
// channel component and the module-functional-type is
// TYPE_DIGITAL_COHERENT_OPTIC this grouping will NOT be used
// as the data will be within the optical-channel
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/laser-bias-current"
//	Path from root:       "/components/component/optical-channel/state/laser-bias-current"
func (n *Component_OpticalChannelPathAny) LaserBiasCurrent() *Component_OpticalChannel_LaserBiasCurrentPathAny {
	ps := &Component_OpticalChannel_LaserBiasCurrentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "laser-bias-current"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LinePort (leaf): Reference to the line-side physical port that carries
// this optical channel.  The target port should be
// a component in the physical inventory data model.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/line-port"
//	Path from root:       "/components/component/optical-channel/*/line-port"
func (n *Component_OpticalChannelPath) LinePort() *Component_OpticalChannel_LinePortPath {
	ps := &Component_OpticalChannel_LinePortPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "line-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LinePort (leaf): Reference to the line-side physical port that carries
// this optical channel.  The target port should be
// a component in the physical inventory data model.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/line-port"
//	Path from root:       "/components/component/optical-channel/*/line-port"
func (n *Component_OpticalChannelPathAny) LinePort() *Component_OpticalChannel_LinePortPathAny {
	ps := &Component_OpticalChannel_LinePortPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "line-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LogicalChannelAssignment (leaf): Reference to the logical channel that is directly assigned
// to this optical channel if it is assigned to a logical channel.
// The logical channel must also reference this optical channel at
// logical-channel-assignments/assignment/state/optical-channel
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/logical-channel-assignment"
//	Path from root:       "/components/component/optical-channel/state/logical-channel-assignment"
func (n *Component_OpticalChannelPath) LogicalChannelAssignment() *Component_OpticalChannel_LogicalChannelAssignmentPath {
	ps := &Component_OpticalChannel_LogicalChannelAssignmentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "logical-channel-assignment"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LogicalChannelAssignment (leaf): Reference to the logical channel that is directly assigned
// to this optical channel if it is assigned to a logical channel.
// The logical channel must also reference this optical channel at
// logical-channel-assignments/assignment/state/optical-channel
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/logical-channel-assignment"
//	Path from root:       "/components/component/optical-channel/state/logical-channel-assignment"
func (n *Component_OpticalChannelPathAny) LogicalChannelAssignment() *Component_OpticalChannel_LogicalChannelAssignmentPathAny {
	ps := &Component_OpticalChannel_LogicalChannelAssignmentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "logical-channel-assignment"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ModulationErrorRatio (container): Modulation error ratio in dB with two decimal precision. Values
// include the instantaneous, average, minimum, and maximum statistics.
// If avg/min/max statistics are not supported, the target is
// expected to just supply the instant value.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/modulation-error-ratio"
//	Path from root:       "/components/component/optical-channel/state/modulation-error-ratio"
func (n *Component_OpticalChannelPath) ModulationErrorRatio() *Component_OpticalChannel_ModulationErrorRatioPath {
	ps := &Component_OpticalChannel_ModulationErrorRatioPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "modulation-error-ratio"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ModulationErrorRatio (container): Modulation error ratio in dB with two decimal precision. Values
// include the instantaneous, average, minimum, and maximum statistics.
// If avg/min/max statistics are not supported, the target is
// expected to just supply the instant value.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/modulation-error-ratio"
//	Path from root:       "/components/component/optical-channel/state/modulation-error-ratio"
func (n *Component_OpticalChannelPathAny) ModulationErrorRatio() *Component_OpticalChannel_ModulationErrorRatioPathAny {
	ps := &Component_OpticalChannel_ModulationErrorRatioPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "modulation-error-ratio"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ModulatorBiasXPhase (container): The X-Phase bias of the coherent modulator. This is
// represented as a percentage with 2 decimal precision. This
// term is defined by OIF Implementation Agreement for
// Coherent CMIS. Values include the instantaneous, average,
// minimum, and maximum statistics. If avg/min/max statistics
// are not supported, the target is expected to just supply
// the instant value.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/modulator-bias-x-phase"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-x-phase"
func (n *Component_OpticalChannelPath) ModulatorBiasXPhase() *Component_OpticalChannel_ModulatorBiasXPhasePath {
	ps := &Component_OpticalChannel_ModulatorBiasXPhasePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "modulator-bias-x-phase"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ModulatorBiasXPhase (container): The X-Phase bias of the coherent modulator. This is
// represented as a percentage with 2 decimal precision. This
// term is defined by OIF Implementation Agreement for
// Coherent CMIS. Values include the instantaneous, average,
// minimum, and maximum statistics. If avg/min/max statistics
// are not supported, the target is expected to just supply
// the instant value.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/modulator-bias-x-phase"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-x-phase"
func (n *Component_OpticalChannelPathAny) ModulatorBiasXPhase() *Component_OpticalChannel_ModulatorBiasXPhasePathAny {
	ps := &Component_OpticalChannel_ModulatorBiasXPhasePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "modulator-bias-x-phase"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ModulatorBiasXi (container): The bias on in-phase path and Polarization X of
// the coherent modulator. This is represented as a percentage
// with 2 decimal precision. This term is defined by OIF
// Implementation Agreement for Coherent CMIS. Values include
// the instantaneous, average, minimum, and maximum statistics.
// If avg/min/max statistics are not supported, the target is
// expected to just supply the instant value.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/modulator-bias-xi"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xi"
func (n *Component_OpticalChannelPath) ModulatorBiasXi() *Component_OpticalChannel_ModulatorBiasXiPath {
	ps := &Component_OpticalChannel_ModulatorBiasXiPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "modulator-bias-xi"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ModulatorBiasXi (container): The bias on in-phase path and Polarization X of
// the coherent modulator. This is represented as a percentage
// with 2 decimal precision. This term is defined by OIF
// Implementation Agreement for Coherent CMIS. Values include
// the instantaneous, average, minimum, and maximum statistics.
// If avg/min/max statistics are not supported, the target is
// expected to just supply the instant value.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/modulator-bias-xi"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xi"
func (n *Component_OpticalChannelPathAny) ModulatorBiasXi() *Component_OpticalChannel_ModulatorBiasXiPathAny {
	ps := &Component_OpticalChannel_ModulatorBiasXiPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "modulator-bias-xi"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ModulatorBiasXq (container): The bias on quadrature path and Polarization X of
// the coherent modulator. This is represented as a percentage
// with 2 decimal precision. This term is defined by OIF
// Implementation Agreement for Coherent CMIS. Values include
// the instantaneous, average, minimum, and maximum statistics.
// If avg/min/max statistics are not supported, the target is
// expected to just supply the instant value.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/modulator-bias-xq"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xq"
func (n *Component_OpticalChannelPath) ModulatorBiasXq() *Component_OpticalChannel_ModulatorBiasXqPath {
	ps := &Component_OpticalChannel_ModulatorBiasXqPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "modulator-bias-xq"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ModulatorBiasXq (container): The bias on quadrature path and Polarization X of
// the coherent modulator. This is represented as a percentage
// with 2 decimal precision. This term is defined by OIF
// Implementation Agreement for Coherent CMIS. Values include
// the instantaneous, average, minimum, and maximum statistics.
// If avg/min/max statistics are not supported, the target is
// expected to just supply the instant value.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/modulator-bias-xq"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xq"
func (n *Component_OpticalChannelPathAny) ModulatorBiasXq() *Component_OpticalChannel_ModulatorBiasXqPathAny {
	ps := &Component_OpticalChannel_ModulatorBiasXqPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "modulator-bias-xq"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ModulatorBiasYPhase (container): The Y-Phase bias of the coherent modulator. This is
// represented as a percentage with 2 decimal precision. This
// term is defined by OIF Implementation Agreement for
// Coherent CMIS. Values include the instantaneous, average,
// minimum, and maximum statistics. If avg/min/max statistics
// are not supported, the target is expected to just supply
// the instant value.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/modulator-bias-y-phase"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-y-phase"
func (n *Component_OpticalChannelPath) ModulatorBiasYPhase() *Component_OpticalChannel_ModulatorBiasYPhasePath {
	ps := &Component_OpticalChannel_ModulatorBiasYPhasePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "modulator-bias-y-phase"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ModulatorBiasYPhase (container): The Y-Phase bias of the coherent modulator. This is
// represented as a percentage with 2 decimal precision. This
// term is defined by OIF Implementation Agreement for
// Coherent CMIS. Values include the instantaneous, average,
// minimum, and maximum statistics. If avg/min/max statistics
// are not supported, the target is expected to just supply
// the instant value.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/modulator-bias-y-phase"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-y-phase"
func (n *Component_OpticalChannelPathAny) ModulatorBiasYPhase() *Component_OpticalChannel_ModulatorBiasYPhasePathAny {
	ps := &Component_OpticalChannel_ModulatorBiasYPhasePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "modulator-bias-y-phase"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ModulatorBiasYi (container): The bias on in-phase path and Polarization Y of
// the coherent modulator. This is represented as a percentage
// with 2 decimal precision. This term is defined by OIF
// Implementation Agreement for Coherent CMIS. Values include
// the instantaneous, average, minimum, and maximum statistics.
// If avg/min/max statistics are not supported, the target is
// expected to just supply the instant value.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/modulator-bias-yi"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yi"
func (n *Component_OpticalChannelPath) ModulatorBiasYi() *Component_OpticalChannel_ModulatorBiasYiPath {
	ps := &Component_OpticalChannel_ModulatorBiasYiPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "modulator-bias-yi"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ModulatorBiasYi (container): The bias on in-phase path and Polarization Y of
// the coherent modulator. This is represented as a percentage
// with 2 decimal precision. This term is defined by OIF
// Implementation Agreement for Coherent CMIS. Values include
// the instantaneous, average, minimum, and maximum statistics.
// If avg/min/max statistics are not supported, the target is
// expected to just supply the instant value.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/modulator-bias-yi"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yi"
func (n *Component_OpticalChannelPathAny) ModulatorBiasYi() *Component_OpticalChannel_ModulatorBiasYiPathAny {
	ps := &Component_OpticalChannel_ModulatorBiasYiPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "modulator-bias-yi"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ModulatorBiasYq (container): The bias on quadrature path and Polarization Y of
// the coherent modulator. This is represented as a percentage
// with 2 decimal precision. This term is defined by OIF
// Implementation Agreement for Coherent CMIS. Values include
// the instantaneous, average, minimum, and maximum statistics.
// If avg/min/max statistics are not supported, the target is
// expected to just supply the instant value.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/modulator-bias-yq"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yq"
func (n *Component_OpticalChannelPath) ModulatorBiasYq() *Component_OpticalChannel_ModulatorBiasYqPath {
	ps := &Component_OpticalChannel_ModulatorBiasYqPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "modulator-bias-yq"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ModulatorBiasYq (container): The bias on quadrature path and Polarization Y of
// the coherent modulator. This is represented as a percentage
// with 2 decimal precision. This term is defined by OIF
// Implementation Agreement for Coherent CMIS. Values include
// the instantaneous, average, minimum, and maximum statistics.
// If avg/min/max statistics are not supported, the target is
// expected to just supply the instant value.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/modulator-bias-yq"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yq"
func (n *Component_OpticalChannelPathAny) ModulatorBiasYq() *Component_OpticalChannel_ModulatorBiasYqPathAny {
	ps := &Component_OpticalChannel_ModulatorBiasYqPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "modulator-bias-yq"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// OperationalMode (leaf): Vendor-specific mode identifier -- sets the operational
// mode for the channel.  The specified operational mode must
// exist in the list of supported operational modes supplied
// by the device
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/operational-mode"
//	Path from root:       "/components/component/optical-channel/*/operational-mode"
func (n *Component_OpticalChannelPath) OperationalMode() *Component_OpticalChannel_OperationalModePath {
	ps := &Component_OpticalChannel_OperationalModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "operational-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OperationalMode (leaf): Vendor-specific mode identifier -- sets the operational
// mode for the channel.  The specified operational mode must
// exist in the list of supported operational modes supplied
// by the device
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/operational-mode"
//	Path from root:       "/components/component/optical-channel/*/operational-mode"
func (n *Component_OpticalChannelPathAny) OperationalMode() *Component_OpticalChannel_OperationalModePathAny {
	ps := &Component_OpticalChannel_OperationalModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "operational-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Osnr (container): Optical signal to noise ratio at 12.5GHz noise bandwidth
// in dB with two decimal precision. Values include the
// instantaneous, average, minimum, and maximum statistics.
// If avg/min/max statistics are not supported, the target
// is expected to just supply the instant value.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/osnr"
//	Path from root:       "/components/component/optical-channel/state/osnr"
func (n *Component_OpticalChannelPath) Osnr() *Component_OpticalChannel_OsnrPath {
	ps := &Component_OpticalChannel_OsnrPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "osnr"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Osnr (container): Optical signal to noise ratio at 12.5GHz noise bandwidth
// in dB with two decimal precision. Values include the
// instantaneous, average, minimum, and maximum statistics.
// If avg/min/max statistics are not supported, the target
// is expected to just supply the instant value.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/osnr"
//	Path from root:       "/components/component/optical-channel/state/osnr"
func (n *Component_OpticalChannelPathAny) Osnr() *Component_OpticalChannel_OsnrPathAny {
	ps := &Component_OpticalChannel_OsnrPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "osnr"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// OutputPower (container): The output optical power of a physical channel in units
// of 0.01dBm, which may be associated with individual
// physical channels, or an aggregate of multiple physical
// channels (i.e., for the overall transceiver). For an
// aggregate, this may be a measurement from a photodetector
// or a a calculation performed on the device by summing up
// all of the related individual physical channels.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value. In some cases, such as when the physical
// channel has a leafref to an optical channel component and the
// module-functional-type is TYPE_DIGITAL_COHERENT_OPTIC this
// grouping will NOT be used as the data will be within the
// optical-channel
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/output-power"
//	Path from root:       "/components/component/optical-channel/state/output-power"
func (n *Component_OpticalChannelPath) OutputPower() *Component_OpticalChannel_OutputPowerPath {
	ps := &Component_OpticalChannel_OutputPowerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "output-power"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// OutputPower (container): The output optical power of a physical channel in units
// of 0.01dBm, which may be associated with individual
// physical channels, or an aggregate of multiple physical
// channels (i.e., for the overall transceiver). For an
// aggregate, this may be a measurement from a photodetector
// or a a calculation performed on the device by summing up
// all of the related individual physical channels.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value. In some cases, such as when the physical
// channel has a leafref to an optical channel component and the
// module-functional-type is TYPE_DIGITAL_COHERENT_OPTIC this
// grouping will NOT be used as the data will be within the
// optical-channel
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/output-power"
//	Path from root:       "/components/component/optical-channel/state/output-power"
func (n *Component_OpticalChannelPathAny) OutputPower() *Component_OpticalChannel_OutputPowerPathAny {
	ps := &Component_OpticalChannel_OutputPowerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "output-power"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PolarizationDependentLoss (container): Polarization Dependent Loss of an optical channel
// in dB as reported by receiver with two decimal precision.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/polarization-dependent-loss"
//	Path from root:       "/components/component/optical-channel/state/polarization-dependent-loss"
func (n *Component_OpticalChannelPath) PolarizationDependentLoss() *Component_OpticalChannel_PolarizationDependentLossPath {
	ps := &Component_OpticalChannel_PolarizationDependentLossPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "polarization-dependent-loss"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PolarizationDependentLoss (container): Polarization Dependent Loss of an optical channel
// in dB as reported by receiver with two decimal precision.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/polarization-dependent-loss"
//	Path from root:       "/components/component/optical-channel/state/polarization-dependent-loss"
func (n *Component_OpticalChannelPathAny) PolarizationDependentLoss() *Component_OpticalChannel_PolarizationDependentLossPathAny {
	ps := &Component_OpticalChannel_PolarizationDependentLossPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "polarization-dependent-loss"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PolarizationModeDispersion (container): Polarization Mode Dispersion of an optical channel
// in picosends (ps) as reported by receiver with two decimal
// precision. Values include the instantaneous, average,
// minimum, and maximum statistics. If avg/min/max statistics
// are not supported, the target is expected to just supply the
// instant value
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/polarization-mode-dispersion"
//	Path from root:       "/components/component/optical-channel/state/polarization-mode-dispersion"
func (n *Component_OpticalChannelPath) PolarizationModeDispersion() *Component_OpticalChannel_PolarizationModeDispersionPath {
	ps := &Component_OpticalChannel_PolarizationModeDispersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "polarization-mode-dispersion"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PolarizationModeDispersion (container): Polarization Mode Dispersion of an optical channel
// in picosends (ps) as reported by receiver with two decimal
// precision. Values include the instantaneous, average,
// minimum, and maximum statistics. If avg/min/max statistics
// are not supported, the target is expected to just supply the
// instant value
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/polarization-mode-dispersion"
//	Path from root:       "/components/component/optical-channel/state/polarization-mode-dispersion"
func (n *Component_OpticalChannelPathAny) PolarizationModeDispersion() *Component_OpticalChannel_PolarizationModeDispersionPathAny {
	ps := &Component_OpticalChannel_PolarizationModeDispersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "polarization-mode-dispersion"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PostFecBer (container): Bit error rate after forward error correction -- computed
// value with 18 decimal precision. Note that decimal64
// supports values as small as i x 10^-18 where i is an
// integer. Values smaller than this should be reported as 0
// to inidicate error free or near error free performance.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/post-fec-ber"
//	Path from root:       "/components/component/optical-channel/state/post-fec-ber"
func (n *Component_OpticalChannelPath) PostFecBer() *Component_OpticalChannel_PostFecBerPath {
	ps := &Component_OpticalChannel_PostFecBerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "post-fec-ber"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PostFecBer (container): Bit error rate after forward error correction -- computed
// value with 18 decimal precision. Note that decimal64
// supports values as small as i x 10^-18 where i is an
// integer. Values smaller than this should be reported as 0
// to inidicate error free or near error free performance.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/post-fec-ber"
//	Path from root:       "/components/component/optical-channel/state/post-fec-ber"
func (n *Component_OpticalChannelPathAny) PostFecBer() *Component_OpticalChannel_PostFecBerPathAny {
	ps := &Component_OpticalChannel_PostFecBerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "post-fec-ber"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PreFecBer (container): Bit error rate before forward error correction -- computed
// value with 18 decimal precision. Note that decimal64
// supports values as small as i x 10^-18 where i is an
// integer. Values smaller than this should be reported as 0
// to inidicate error free or near error free performance.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/pre-fec-ber"
//	Path from root:       "/components/component/optical-channel/state/pre-fec-ber"
func (n *Component_OpticalChannelPath) PreFecBer() *Component_OpticalChannel_PreFecBerPath {
	ps := &Component_OpticalChannel_PreFecBerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "pre-fec-ber"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PreFecBer (container): Bit error rate before forward error correction -- computed
// value with 18 decimal precision. Note that decimal64
// supports values as small as i x 10^-18 where i is an
// integer. Values smaller than this should be reported as 0
// to inidicate error free or near error free performance.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/pre-fec-ber"
//	Path from root:       "/components/component/optical-channel/state/pre-fec-ber"
func (n *Component_OpticalChannelPathAny) PreFecBer() *Component_OpticalChannel_PreFecBerPathAny {
	ps := &Component_OpticalChannel_PreFecBerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "pre-fec-ber"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// QValue (container): Quality value (factor) in dB of a channel with two
// decimal precision. Values include the instantaneous,
// average, minimum, and maximum statistics. If avg/min/max
// statistics are not supported, the target is expected
// to just supply the instant value
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/q-value"
//	Path from root:       "/components/component/optical-channel/state/q-value"
func (n *Component_OpticalChannelPath) QValue() *Component_OpticalChannel_QValuePath {
	ps := &Component_OpticalChannel_QValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "q-value"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// QValue (container): Quality value (factor) in dB of a channel with two
// decimal precision. Values include the instantaneous,
// average, minimum, and maximum statistics. If avg/min/max
// statistics are not supported, the target is expected
// to just supply the instant value
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/q-value"
//	Path from root:       "/components/component/optical-channel/state/q-value"
func (n *Component_OpticalChannelPathAny) QValue() *Component_OpticalChannel_QValuePathAny {
	ps := &Component_OpticalChannel_QValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "q-value"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SecondOrderPolarizationModeDispersion (container): Second Order Polarization Mode Dispersion of an optical
// channel in picoseconds squared (ps^2) as reported by
// receiver with two decimal precision. Values include the
// instantaneous, average, minimum, and maximum statistics.
// If avg/min/max statistics are not supported, the target
// is expected to just supply the instant value
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/second-order-polarization-mode-dispersion"
//	Path from root:       "/components/component/optical-channel/state/second-order-polarization-mode-dispersion"
func (n *Component_OpticalChannelPath) SecondOrderPolarizationModeDispersion() *Component_OpticalChannel_SecondOrderPolarizationModeDispersionPath {
	ps := &Component_OpticalChannel_SecondOrderPolarizationModeDispersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "second-order-polarization-mode-dispersion"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SecondOrderPolarizationModeDispersion (container): Second Order Polarization Mode Dispersion of an optical
// channel in picoseconds squared (ps^2) as reported by
// receiver with two decimal precision. Values include the
// instantaneous, average, minimum, and maximum statistics.
// If avg/min/max statistics are not supported, the target
// is expected to just supply the instant value
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/second-order-polarization-mode-dispersion"
//	Path from root:       "/components/component/optical-channel/state/second-order-polarization-mode-dispersion"
func (n *Component_OpticalChannelPathAny) SecondOrderPolarizationModeDispersion() *Component_OpticalChannel_SecondOrderPolarizationModeDispersionPathAny {
	ps := &Component_OpticalChannel_SecondOrderPolarizationModeDispersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "second-order-polarization-mode-dispersion"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SopRoc (container): State-of-polarization rate-of-change (SOP-ROC) in krad/s with 1
// decimal precision. This term is defined by OIF Implementation
// Agreement for Coherent CMIS. Values include the instantaneous,
// average, minimum, and maximum statistics. If avg/min/max
// statistics are not supported, the target is expected to just
// supply the instant value.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/sop-roc"
//	Path from root:       "/components/component/optical-channel/state/sop-roc"
func (n *Component_OpticalChannelPath) SopRoc() *Component_OpticalChannel_SopRocPath {
	ps := &Component_OpticalChannel_SopRocPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sop-roc"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SopRoc (container): State-of-polarization rate-of-change (SOP-ROC) in krad/s with 1
// decimal precision. This term is defined by OIF Implementation
// Agreement for Coherent CMIS. Values include the instantaneous,
// average, minimum, and maximum statistics. If avg/min/max
// statistics are not supported, the target is expected to just
// supply the instant value.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/sop-roc"
//	Path from root:       "/components/component/optical-channel/state/sop-roc"
func (n *Component_OpticalChannelPathAny) SopRoc() *Component_OpticalChannel_SopRocPathAny {
	ps := &Component_OpticalChannel_SopRocPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sop-roc"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TargetOutputPower (leaf): Target output optical power level of the optical channel,
// expressed in increments of 0.01 dBm (decibel-milliwats)
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/target-output-power"
//	Path from root:       "/components/component/optical-channel/*/target-output-power"
func (n *Component_OpticalChannelPath) TargetOutputPower() *Component_OpticalChannel_TargetOutputPowerPath {
	ps := &Component_OpticalChannel_TargetOutputPowerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "target-output-power"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TargetOutputPower (leaf): Target output optical power level of the optical channel,
// expressed in increments of 0.01 dBm (decibel-milliwats)
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/target-output-power"
//	Path from root:       "/components/component/optical-channel/*/target-output-power"
func (n *Component_OpticalChannelPathAny) TargetOutputPower() *Component_OpticalChannel_TargetOutputPowerPathAny {
	ps := &Component_OpticalChannel_TargetOutputPowerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "target-output-power"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannelPath) State() ygnmi.SingletonQuery[*oc.Component_OpticalChannel] {
	return ygnmi.NewSingletonQuery[*oc.Component_OpticalChannel](
		"Component_OpticalChannel",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannelPathAny) State() ygnmi.WildcardQuery[*oc.Component_OpticalChannel] {
	return ygnmi.NewWildcardQuery[*oc.Component_OpticalChannel](
		"Component_OpticalChannel",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannelPath) Config() ygnmi.ConfigQuery[*oc.Component_OpticalChannel] {
	return ygnmi.NewConfigQuery[*oc.Component_OpticalChannel](
		"Component_OpticalChannel",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannelPathAny) Config() ygnmi.WildcardQuery[*oc.Component_OpticalChannel] {
	return ygnmi.NewWildcardQuery[*oc.Component_OpticalChannel](
		"Component_OpticalChannel",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_CarrierFrequencyOffset_AvgPath represents the /openconfig-platform/components/component/optical-channel/state/carrier-frequency-offset/avg YANG schema element.
type Component_OpticalChannel_CarrierFrequencyOffset_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_CarrierFrequencyOffset_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/carrier-frequency-offset/avg YANG schema element.
type Component_OpticalChannel_CarrierFrequencyOffset_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/carrier-frequency-offset/avg"
func (n *Component_OpticalChannel_CarrierFrequencyOffset_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_CarrierFrequencyOffset",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_CarrierFrequencyOffset).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_CarrierFrequencyOffset) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/carrier-frequency-offset/avg"
func (n *Component_OpticalChannel_CarrierFrequencyOffset_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_CarrierFrequencyOffset",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_CarrierFrequencyOffset).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_CarrierFrequencyOffset) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_CarrierFrequencyOffset_InstantPath represents the /openconfig-platform/components/component/optical-channel/state/carrier-frequency-offset/instant YANG schema element.
type Component_OpticalChannel_CarrierFrequencyOffset_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_CarrierFrequencyOffset_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/carrier-frequency-offset/instant YANG schema element.
type Component_OpticalChannel_CarrierFrequencyOffset_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/carrier-frequency-offset/instant"
func (n *Component_OpticalChannel_CarrierFrequencyOffset_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_CarrierFrequencyOffset",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_CarrierFrequencyOffset).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_CarrierFrequencyOffset) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/carrier-frequency-offset/instant"
func (n *Component_OpticalChannel_CarrierFrequencyOffset_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_CarrierFrequencyOffset",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_CarrierFrequencyOffset).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_CarrierFrequencyOffset) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_CarrierFrequencyOffset_IntervalPath represents the /openconfig-platform/components/component/optical-channel/state/carrier-frequency-offset/interval YANG schema element.
type Component_OpticalChannel_CarrierFrequencyOffset_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_CarrierFrequencyOffset_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/carrier-frequency-offset/interval YANG schema element.
type Component_OpticalChannel_CarrierFrequencyOffset_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/carrier-frequency-offset/interval"
func (n *Component_OpticalChannel_CarrierFrequencyOffset_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_CarrierFrequencyOffset",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_CarrierFrequencyOffset).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_CarrierFrequencyOffset) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/carrier-frequency-offset/interval"
func (n *Component_OpticalChannel_CarrierFrequencyOffset_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_CarrierFrequencyOffset",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_CarrierFrequencyOffset).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_CarrierFrequencyOffset) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_CarrierFrequencyOffset_MaxPath represents the /openconfig-platform/components/component/optical-channel/state/carrier-frequency-offset/max YANG schema element.
type Component_OpticalChannel_CarrierFrequencyOffset_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_CarrierFrequencyOffset_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/carrier-frequency-offset/max YANG schema element.
type Component_OpticalChannel_CarrierFrequencyOffset_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/carrier-frequency-offset/max"
func (n *Component_OpticalChannel_CarrierFrequencyOffset_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_CarrierFrequencyOffset",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_CarrierFrequencyOffset).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_CarrierFrequencyOffset) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/carrier-frequency-offset/max"
func (n *Component_OpticalChannel_CarrierFrequencyOffset_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_CarrierFrequencyOffset",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_CarrierFrequencyOffset).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_CarrierFrequencyOffset) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_CarrierFrequencyOffset_MaxTimePath represents the /openconfig-platform/components/component/optical-channel/state/carrier-frequency-offset/max-time YANG schema element.
type Component_OpticalChannel_CarrierFrequencyOffset_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_CarrierFrequencyOffset_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/carrier-frequency-offset/max-time YANG schema element.
type Component_OpticalChannel_CarrierFrequencyOffset_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/optical-channel/state/carrier-frequency-offset/max-time"
func (n *Component_OpticalChannel_CarrierFrequencyOffset_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_CarrierFrequencyOffset",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_CarrierFrequencyOffset).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_CarrierFrequencyOffset) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/optical-channel/state/carrier-frequency-offset/max-time"
func (n *Component_OpticalChannel_CarrierFrequencyOffset_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_CarrierFrequencyOffset",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_CarrierFrequencyOffset).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_CarrierFrequencyOffset) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_CarrierFrequencyOffset_MinPath represents the /openconfig-platform/components/component/optical-channel/state/carrier-frequency-offset/min YANG schema element.
type Component_OpticalChannel_CarrierFrequencyOffset_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_CarrierFrequencyOffset_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/carrier-frequency-offset/min YANG schema element.
type Component_OpticalChannel_CarrierFrequencyOffset_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/carrier-frequency-offset/min"
func (n *Component_OpticalChannel_CarrierFrequencyOffset_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_CarrierFrequencyOffset",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_CarrierFrequencyOffset).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_CarrierFrequencyOffset) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/carrier-frequency-offset/min"
func (n *Component_OpticalChannel_CarrierFrequencyOffset_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_CarrierFrequencyOffset",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_CarrierFrequencyOffset).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_CarrierFrequencyOffset) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_CarrierFrequencyOffset_MinTimePath represents the /openconfig-platform/components/component/optical-channel/state/carrier-frequency-offset/min-time YANG schema element.
type Component_OpticalChannel_CarrierFrequencyOffset_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_CarrierFrequencyOffset_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/carrier-frequency-offset/min-time YANG schema element.
type Component_OpticalChannel_CarrierFrequencyOffset_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/optical-channel/state/carrier-frequency-offset/min-time"
func (n *Component_OpticalChannel_CarrierFrequencyOffset_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_CarrierFrequencyOffset",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_CarrierFrequencyOffset).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_CarrierFrequencyOffset) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/optical-channel/state/carrier-frequency-offset/min-time"
func (n *Component_OpticalChannel_CarrierFrequencyOffset_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_CarrierFrequencyOffset",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_CarrierFrequencyOffset).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_CarrierFrequencyOffset) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_CarrierFrequencyOffsetPath represents the /openconfig-platform/components/component/optical-channel/state/carrier-frequency-offset YANG schema element.
type Component_OpticalChannel_CarrierFrequencyOffsetPath struct {
	*ygnmi.NodePath
}

// Component_OpticalChannel_CarrierFrequencyOffsetPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/carrier-frequency-offset YANG schema element.
type Component_OpticalChannel_CarrierFrequencyOffsetPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/carrier-frequency-offset/avg"
func (n *Component_OpticalChannel_CarrierFrequencyOffsetPath) Avg() *Component_OpticalChannel_CarrierFrequencyOffset_AvgPath {
	ps := &Component_OpticalChannel_CarrierFrequencyOffset_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/carrier-frequency-offset/avg"
func (n *Component_OpticalChannel_CarrierFrequencyOffsetPathAny) Avg() *Component_OpticalChannel_CarrierFrequencyOffset_AvgPathAny {
	ps := &Component_OpticalChannel_CarrierFrequencyOffset_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/carrier-frequency-offset/instant"
func (n *Component_OpticalChannel_CarrierFrequencyOffsetPath) Instant() *Component_OpticalChannel_CarrierFrequencyOffset_InstantPath {
	ps := &Component_OpticalChannel_CarrierFrequencyOffset_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/carrier-frequency-offset/instant"
func (n *Component_OpticalChannel_CarrierFrequencyOffsetPathAny) Instant() *Component_OpticalChannel_CarrierFrequencyOffset_InstantPathAny {
	ps := &Component_OpticalChannel_CarrierFrequencyOffset_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/carrier-frequency-offset/interval"
func (n *Component_OpticalChannel_CarrierFrequencyOffsetPath) Interval() *Component_OpticalChannel_CarrierFrequencyOffset_IntervalPath {
	ps := &Component_OpticalChannel_CarrierFrequencyOffset_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/carrier-frequency-offset/interval"
func (n *Component_OpticalChannel_CarrierFrequencyOffsetPathAny) Interval() *Component_OpticalChannel_CarrierFrequencyOffset_IntervalPathAny {
	ps := &Component_OpticalChannel_CarrierFrequencyOffset_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/carrier-frequency-offset/max"
func (n *Component_OpticalChannel_CarrierFrequencyOffsetPath) Max() *Component_OpticalChannel_CarrierFrequencyOffset_MaxPath {
	ps := &Component_OpticalChannel_CarrierFrequencyOffset_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/carrier-frequency-offset/max"
func (n *Component_OpticalChannel_CarrierFrequencyOffsetPathAny) Max() *Component_OpticalChannel_CarrierFrequencyOffset_MaxPathAny {
	ps := &Component_OpticalChannel_CarrierFrequencyOffset_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/optical-channel/state/carrier-frequency-offset/max-time"
func (n *Component_OpticalChannel_CarrierFrequencyOffsetPath) MaxTime() *Component_OpticalChannel_CarrierFrequencyOffset_MaxTimePath {
	ps := &Component_OpticalChannel_CarrierFrequencyOffset_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/optical-channel/state/carrier-frequency-offset/max-time"
func (n *Component_OpticalChannel_CarrierFrequencyOffsetPathAny) MaxTime() *Component_OpticalChannel_CarrierFrequencyOffset_MaxTimePathAny {
	ps := &Component_OpticalChannel_CarrierFrequencyOffset_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/carrier-frequency-offset/min"
func (n *Component_OpticalChannel_CarrierFrequencyOffsetPath) Min() *Component_OpticalChannel_CarrierFrequencyOffset_MinPath {
	ps := &Component_OpticalChannel_CarrierFrequencyOffset_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/carrier-frequency-offset/min"
func (n *Component_OpticalChannel_CarrierFrequencyOffsetPathAny) Min() *Component_OpticalChannel_CarrierFrequencyOffset_MinPathAny {
	ps := &Component_OpticalChannel_CarrierFrequencyOffset_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/optical-channel/state/carrier-frequency-offset/min-time"
func (n *Component_OpticalChannel_CarrierFrequencyOffsetPath) MinTime() *Component_OpticalChannel_CarrierFrequencyOffset_MinTimePath {
	ps := &Component_OpticalChannel_CarrierFrequencyOffset_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/optical-channel/state/carrier-frequency-offset/min-time"
func (n *Component_OpticalChannel_CarrierFrequencyOffsetPathAny) MinTime() *Component_OpticalChannel_CarrierFrequencyOffset_MinTimePathAny {
	ps := &Component_OpticalChannel_CarrierFrequencyOffset_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannel_CarrierFrequencyOffsetPath) State() ygnmi.SingletonQuery[*oc.Component_OpticalChannel_CarrierFrequencyOffset] {
	return ygnmi.NewSingletonQuery[*oc.Component_OpticalChannel_CarrierFrequencyOffset](
		"Component_OpticalChannel_CarrierFrequencyOffset",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannel_CarrierFrequencyOffsetPathAny) State() ygnmi.WildcardQuery[*oc.Component_OpticalChannel_CarrierFrequencyOffset] {
	return ygnmi.NewWildcardQuery[*oc.Component_OpticalChannel_CarrierFrequencyOffset](
		"Component_OpticalChannel_CarrierFrequencyOffset",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ChromaticDispersion_AvgPath represents the /openconfig-platform/components/component/optical-channel/state/chromatic-dispersion/avg YANG schema element.
type Component_OpticalChannel_ChromaticDispersion_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ChromaticDispersion_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/chromatic-dispersion/avg YANG schema element.
type Component_OpticalChannel_ChromaticDispersion_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/chromatic-dispersion/avg"
func (n *Component_OpticalChannel_ChromaticDispersion_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_ChromaticDispersion",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ChromaticDispersion).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ChromaticDispersion) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/chromatic-dispersion/avg"
func (n *Component_OpticalChannel_ChromaticDispersion_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_ChromaticDispersion",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ChromaticDispersion).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ChromaticDispersion) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ChromaticDispersion_InstantPath represents the /openconfig-platform/components/component/optical-channel/state/chromatic-dispersion/instant YANG schema element.
type Component_OpticalChannel_ChromaticDispersion_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ChromaticDispersion_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/chromatic-dispersion/instant YANG schema element.
type Component_OpticalChannel_ChromaticDispersion_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/chromatic-dispersion/instant"
func (n *Component_OpticalChannel_ChromaticDispersion_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_ChromaticDispersion",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ChromaticDispersion).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ChromaticDispersion) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/chromatic-dispersion/instant"
func (n *Component_OpticalChannel_ChromaticDispersion_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_ChromaticDispersion",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ChromaticDispersion).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ChromaticDispersion) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ChromaticDispersion_IntervalPath represents the /openconfig-platform/components/component/optical-channel/state/chromatic-dispersion/interval YANG schema element.
type Component_OpticalChannel_ChromaticDispersion_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ChromaticDispersion_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/chromatic-dispersion/interval YANG schema element.
type Component_OpticalChannel_ChromaticDispersion_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/chromatic-dispersion/interval"
func (n *Component_OpticalChannel_ChromaticDispersion_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_ChromaticDispersion",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ChromaticDispersion).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ChromaticDispersion) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/chromatic-dispersion/interval"
func (n *Component_OpticalChannel_ChromaticDispersion_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_ChromaticDispersion",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ChromaticDispersion).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ChromaticDispersion) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ChromaticDispersion_MaxPath represents the /openconfig-platform/components/component/optical-channel/state/chromatic-dispersion/max YANG schema element.
type Component_OpticalChannel_ChromaticDispersion_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ChromaticDispersion_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/chromatic-dispersion/max YANG schema element.
type Component_OpticalChannel_ChromaticDispersion_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/chromatic-dispersion/max"
func (n *Component_OpticalChannel_ChromaticDispersion_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_ChromaticDispersion",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ChromaticDispersion).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ChromaticDispersion) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/chromatic-dispersion/max"
func (n *Component_OpticalChannel_ChromaticDispersion_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_ChromaticDispersion",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ChromaticDispersion).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ChromaticDispersion) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ChromaticDispersion_MaxTimePath represents the /openconfig-platform/components/component/optical-channel/state/chromatic-dispersion/max-time YANG schema element.
type Component_OpticalChannel_ChromaticDispersion_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ChromaticDispersion_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/chromatic-dispersion/max-time YANG schema element.
type Component_OpticalChannel_ChromaticDispersion_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/optical-channel/state/chromatic-dispersion/max-time"
func (n *Component_OpticalChannel_ChromaticDispersion_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_ChromaticDispersion",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ChromaticDispersion).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ChromaticDispersion) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/optical-channel/state/chromatic-dispersion/max-time"
func (n *Component_OpticalChannel_ChromaticDispersion_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_ChromaticDispersion",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ChromaticDispersion).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ChromaticDispersion) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ChromaticDispersion_MinPath represents the /openconfig-platform/components/component/optical-channel/state/chromatic-dispersion/min YANG schema element.
type Component_OpticalChannel_ChromaticDispersion_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ChromaticDispersion_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/chromatic-dispersion/min YANG schema element.
type Component_OpticalChannel_ChromaticDispersion_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/chromatic-dispersion/min"
func (n *Component_OpticalChannel_ChromaticDispersion_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_ChromaticDispersion",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ChromaticDispersion).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ChromaticDispersion) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/chromatic-dispersion/min"
func (n *Component_OpticalChannel_ChromaticDispersion_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_ChromaticDispersion",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ChromaticDispersion).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ChromaticDispersion) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ChromaticDispersion_MinTimePath represents the /openconfig-platform/components/component/optical-channel/state/chromatic-dispersion/min-time YANG schema element.
type Component_OpticalChannel_ChromaticDispersion_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ChromaticDispersion_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/chromatic-dispersion/min-time YANG schema element.
type Component_OpticalChannel_ChromaticDispersion_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/optical-channel/state/chromatic-dispersion/min-time"
func (n *Component_OpticalChannel_ChromaticDispersion_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_ChromaticDispersion",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ChromaticDispersion).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ChromaticDispersion) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/optical-channel/state/chromatic-dispersion/min-time"
func (n *Component_OpticalChannel_ChromaticDispersion_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_ChromaticDispersion",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ChromaticDispersion).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ChromaticDispersion) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ChromaticDispersionPath represents the /openconfig-platform/components/component/optical-channel/state/chromatic-dispersion YANG schema element.
type Component_OpticalChannel_ChromaticDispersionPath struct {
	*ygnmi.NodePath
}

// Component_OpticalChannel_ChromaticDispersionPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/chromatic-dispersion YANG schema element.
type Component_OpticalChannel_ChromaticDispersionPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/chromatic-dispersion/avg"
func (n *Component_OpticalChannel_ChromaticDispersionPath) Avg() *Component_OpticalChannel_ChromaticDispersion_AvgPath {
	ps := &Component_OpticalChannel_ChromaticDispersion_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/chromatic-dispersion/avg"
func (n *Component_OpticalChannel_ChromaticDispersionPathAny) Avg() *Component_OpticalChannel_ChromaticDispersion_AvgPathAny {
	ps := &Component_OpticalChannel_ChromaticDispersion_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/chromatic-dispersion/instant"
func (n *Component_OpticalChannel_ChromaticDispersionPath) Instant() *Component_OpticalChannel_ChromaticDispersion_InstantPath {
	ps := &Component_OpticalChannel_ChromaticDispersion_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/chromatic-dispersion/instant"
func (n *Component_OpticalChannel_ChromaticDispersionPathAny) Instant() *Component_OpticalChannel_ChromaticDispersion_InstantPathAny {
	ps := &Component_OpticalChannel_ChromaticDispersion_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/chromatic-dispersion/interval"
func (n *Component_OpticalChannel_ChromaticDispersionPath) Interval() *Component_OpticalChannel_ChromaticDispersion_IntervalPath {
	ps := &Component_OpticalChannel_ChromaticDispersion_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/chromatic-dispersion/interval"
func (n *Component_OpticalChannel_ChromaticDispersionPathAny) Interval() *Component_OpticalChannel_ChromaticDispersion_IntervalPathAny {
	ps := &Component_OpticalChannel_ChromaticDispersion_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/chromatic-dispersion/max"
func (n *Component_OpticalChannel_ChromaticDispersionPath) Max() *Component_OpticalChannel_ChromaticDispersion_MaxPath {
	ps := &Component_OpticalChannel_ChromaticDispersion_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/chromatic-dispersion/max"
func (n *Component_OpticalChannel_ChromaticDispersionPathAny) Max() *Component_OpticalChannel_ChromaticDispersion_MaxPathAny {
	ps := &Component_OpticalChannel_ChromaticDispersion_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/optical-channel/state/chromatic-dispersion/max-time"
func (n *Component_OpticalChannel_ChromaticDispersionPath) MaxTime() *Component_OpticalChannel_ChromaticDispersion_MaxTimePath {
	ps := &Component_OpticalChannel_ChromaticDispersion_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/optical-channel/state/chromatic-dispersion/max-time"
func (n *Component_OpticalChannel_ChromaticDispersionPathAny) MaxTime() *Component_OpticalChannel_ChromaticDispersion_MaxTimePathAny {
	ps := &Component_OpticalChannel_ChromaticDispersion_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/chromatic-dispersion/min"
func (n *Component_OpticalChannel_ChromaticDispersionPath) Min() *Component_OpticalChannel_ChromaticDispersion_MinPath {
	ps := &Component_OpticalChannel_ChromaticDispersion_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/chromatic-dispersion/min"
func (n *Component_OpticalChannel_ChromaticDispersionPathAny) Min() *Component_OpticalChannel_ChromaticDispersion_MinPathAny {
	ps := &Component_OpticalChannel_ChromaticDispersion_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/optical-channel/state/chromatic-dispersion/min-time"
func (n *Component_OpticalChannel_ChromaticDispersionPath) MinTime() *Component_OpticalChannel_ChromaticDispersion_MinTimePath {
	ps := &Component_OpticalChannel_ChromaticDispersion_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/optical-channel/state/chromatic-dispersion/min-time"
func (n *Component_OpticalChannel_ChromaticDispersionPathAny) MinTime() *Component_OpticalChannel_ChromaticDispersion_MinTimePathAny {
	ps := &Component_OpticalChannel_ChromaticDispersion_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannel_ChromaticDispersionPath) State() ygnmi.SingletonQuery[*oc.Component_OpticalChannel_ChromaticDispersion] {
	return ygnmi.NewSingletonQuery[*oc.Component_OpticalChannel_ChromaticDispersion](
		"Component_OpticalChannel_ChromaticDispersion",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannel_ChromaticDispersionPathAny) State() ygnmi.WildcardQuery[*oc.Component_OpticalChannel_ChromaticDispersion] {
	return ygnmi.NewWildcardQuery[*oc.Component_OpticalChannel_ChromaticDispersion](
		"Component_OpticalChannel_ChromaticDispersion",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_Esnr_AvgPath represents the /openconfig-platform/components/component/optical-channel/state/esnr/avg YANG schema element.
type Component_OpticalChannel_Esnr_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_Esnr_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/esnr/avg YANG schema element.
type Component_OpticalChannel_Esnr_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/esnr/avg"
func (n *Component_OpticalChannel_Esnr_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_Esnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_Esnr).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_Esnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/esnr/avg"
func (n *Component_OpticalChannel_Esnr_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_Esnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_Esnr).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_Esnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_Esnr_InstantPath represents the /openconfig-platform/components/component/optical-channel/state/esnr/instant YANG schema element.
type Component_OpticalChannel_Esnr_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_Esnr_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/esnr/instant YANG schema element.
type Component_OpticalChannel_Esnr_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/esnr/instant"
func (n *Component_OpticalChannel_Esnr_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_Esnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_Esnr).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_Esnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/esnr/instant"
func (n *Component_OpticalChannel_Esnr_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_Esnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_Esnr).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_Esnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_Esnr_IntervalPath represents the /openconfig-platform/components/component/optical-channel/state/esnr/interval YANG schema element.
type Component_OpticalChannel_Esnr_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_Esnr_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/esnr/interval YANG schema element.
type Component_OpticalChannel_Esnr_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/esnr/interval"
func (n *Component_OpticalChannel_Esnr_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_Esnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_Esnr).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_Esnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/esnr/interval"
func (n *Component_OpticalChannel_Esnr_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_Esnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_Esnr).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_Esnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_Esnr_MaxPath represents the /openconfig-platform/components/component/optical-channel/state/esnr/max YANG schema element.
type Component_OpticalChannel_Esnr_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_Esnr_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/esnr/max YANG schema element.
type Component_OpticalChannel_Esnr_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/esnr/max"
func (n *Component_OpticalChannel_Esnr_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_Esnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_Esnr).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_Esnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/esnr/max"
func (n *Component_OpticalChannel_Esnr_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_Esnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_Esnr).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_Esnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_Esnr_MaxTimePath represents the /openconfig-platform/components/component/optical-channel/state/esnr/max-time YANG schema element.
type Component_OpticalChannel_Esnr_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_Esnr_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/esnr/max-time YANG schema element.
type Component_OpticalChannel_Esnr_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/optical-channel/state/esnr/max-time"
func (n *Component_OpticalChannel_Esnr_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_Esnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_Esnr).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_Esnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/optical-channel/state/esnr/max-time"
func (n *Component_OpticalChannel_Esnr_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_Esnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_Esnr).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_Esnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_Esnr_MinPath represents the /openconfig-platform/components/component/optical-channel/state/esnr/min YANG schema element.
type Component_OpticalChannel_Esnr_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_Esnr_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/esnr/min YANG schema element.
type Component_OpticalChannel_Esnr_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/esnr/min"
func (n *Component_OpticalChannel_Esnr_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_Esnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_Esnr).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_Esnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/esnr/min"
func (n *Component_OpticalChannel_Esnr_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_Esnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_Esnr).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_Esnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_Esnr_MinTimePath represents the /openconfig-platform/components/component/optical-channel/state/esnr/min-time YANG schema element.
type Component_OpticalChannel_Esnr_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_Esnr_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/esnr/min-time YANG schema element.
type Component_OpticalChannel_Esnr_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/optical-channel/state/esnr/min-time"
func (n *Component_OpticalChannel_Esnr_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_Esnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_Esnr).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_Esnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/optical-channel/state/esnr/min-time"
func (n *Component_OpticalChannel_Esnr_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_Esnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_Esnr).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_Esnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_EsnrPath represents the /openconfig-platform/components/component/optical-channel/state/esnr YANG schema element.
type Component_OpticalChannel_EsnrPath struct {
	*ygnmi.NodePath
}

// Component_OpticalChannel_EsnrPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/esnr YANG schema element.
type Component_OpticalChannel_EsnrPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/esnr/avg"
func (n *Component_OpticalChannel_EsnrPath) Avg() *Component_OpticalChannel_Esnr_AvgPath {
	ps := &Component_OpticalChannel_Esnr_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/esnr/avg"
func (n *Component_OpticalChannel_EsnrPathAny) Avg() *Component_OpticalChannel_Esnr_AvgPathAny {
	ps := &Component_OpticalChannel_Esnr_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/esnr/instant"
func (n *Component_OpticalChannel_EsnrPath) Instant() *Component_OpticalChannel_Esnr_InstantPath {
	ps := &Component_OpticalChannel_Esnr_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/esnr/instant"
func (n *Component_OpticalChannel_EsnrPathAny) Instant() *Component_OpticalChannel_Esnr_InstantPathAny {
	ps := &Component_OpticalChannel_Esnr_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/esnr/interval"
func (n *Component_OpticalChannel_EsnrPath) Interval() *Component_OpticalChannel_Esnr_IntervalPath {
	ps := &Component_OpticalChannel_Esnr_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/esnr/interval"
func (n *Component_OpticalChannel_EsnrPathAny) Interval() *Component_OpticalChannel_Esnr_IntervalPathAny {
	ps := &Component_OpticalChannel_Esnr_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/esnr/max"
func (n *Component_OpticalChannel_EsnrPath) Max() *Component_OpticalChannel_Esnr_MaxPath {
	ps := &Component_OpticalChannel_Esnr_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/esnr/max"
func (n *Component_OpticalChannel_EsnrPathAny) Max() *Component_OpticalChannel_Esnr_MaxPathAny {
	ps := &Component_OpticalChannel_Esnr_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/optical-channel/state/esnr/max-time"
func (n *Component_OpticalChannel_EsnrPath) MaxTime() *Component_OpticalChannel_Esnr_MaxTimePath {
	ps := &Component_OpticalChannel_Esnr_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/optical-channel/state/esnr/max-time"
func (n *Component_OpticalChannel_EsnrPathAny) MaxTime() *Component_OpticalChannel_Esnr_MaxTimePathAny {
	ps := &Component_OpticalChannel_Esnr_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/esnr/min"
func (n *Component_OpticalChannel_EsnrPath) Min() *Component_OpticalChannel_Esnr_MinPath {
	ps := &Component_OpticalChannel_Esnr_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/esnr/min"
func (n *Component_OpticalChannel_EsnrPathAny) Min() *Component_OpticalChannel_Esnr_MinPathAny {
	ps := &Component_OpticalChannel_Esnr_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/optical-channel/state/esnr/min-time"
func (n *Component_OpticalChannel_EsnrPath) MinTime() *Component_OpticalChannel_Esnr_MinTimePath {
	ps := &Component_OpticalChannel_Esnr_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/optical-channel/state/esnr/min-time"
func (n *Component_OpticalChannel_EsnrPathAny) MinTime() *Component_OpticalChannel_Esnr_MinTimePathAny {
	ps := &Component_OpticalChannel_Esnr_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannel_EsnrPath) State() ygnmi.SingletonQuery[*oc.Component_OpticalChannel_Esnr] {
	return ygnmi.NewSingletonQuery[*oc.Component_OpticalChannel_Esnr](
		"Component_OpticalChannel_Esnr",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannel_EsnrPathAny) State() ygnmi.WildcardQuery[*oc.Component_OpticalChannel_Esnr] {
	return ygnmi.NewWildcardQuery[*oc.Component_OpticalChannel_Esnr](
		"Component_OpticalChannel_Esnr",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_InputPower_AvgPath represents the /openconfig-platform/components/component/optical-channel/state/input-power/avg YANG schema element.
type Component_OpticalChannel_InputPower_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_InputPower_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/input-power/avg YANG schema element.
type Component_OpticalChannel_InputPower_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/input-power/avg"
func (n *Component_OpticalChannel_InputPower_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_InputPower).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/input-power/avg"
func (n *Component_OpticalChannel_InputPower_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_InputPower).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_InputPower_InstantPath represents the /openconfig-platform/components/component/optical-channel/state/input-power/instant YANG schema element.
type Component_OpticalChannel_InputPower_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_InputPower_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/input-power/instant YANG schema element.
type Component_OpticalChannel_InputPower_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/input-power/instant"
func (n *Component_OpticalChannel_InputPower_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_InputPower).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/input-power/instant"
func (n *Component_OpticalChannel_InputPower_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_InputPower).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_InputPower_IntervalPath represents the /openconfig-platform/components/component/optical-channel/state/input-power/interval YANG schema element.
type Component_OpticalChannel_InputPower_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_InputPower_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/input-power/interval YANG schema element.
type Component_OpticalChannel_InputPower_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/input-power/interval"
func (n *Component_OpticalChannel_InputPower_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_InputPower).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/input-power/interval"
func (n *Component_OpticalChannel_InputPower_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_InputPower).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_InputPower_MaxPath represents the /openconfig-platform/components/component/optical-channel/state/input-power/max YANG schema element.
type Component_OpticalChannel_InputPower_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_InputPower_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/input-power/max YANG schema element.
type Component_OpticalChannel_InputPower_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/input-power/max"
func (n *Component_OpticalChannel_InputPower_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_InputPower).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/input-power/max"
func (n *Component_OpticalChannel_InputPower_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_InputPower).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_InputPower_MaxTimePath represents the /openconfig-platform/components/component/optical-channel/state/input-power/max-time YANG schema element.
type Component_OpticalChannel_InputPower_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_InputPower_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/input-power/max-time YANG schema element.
type Component_OpticalChannel_InputPower_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/optical-channel/state/input-power/max-time"
func (n *Component_OpticalChannel_InputPower_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_InputPower).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/optical-channel/state/input-power/max-time"
func (n *Component_OpticalChannel_InputPower_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_InputPower).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_InputPower_MinPath represents the /openconfig-platform/components/component/optical-channel/state/input-power/min YANG schema element.
type Component_OpticalChannel_InputPower_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_InputPower_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/input-power/min YANG schema element.
type Component_OpticalChannel_InputPower_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/input-power/min"
func (n *Component_OpticalChannel_InputPower_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_InputPower).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/input-power/min"
func (n *Component_OpticalChannel_InputPower_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_InputPower).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_InputPower_MinTimePath represents the /openconfig-platform/components/component/optical-channel/state/input-power/min-time YANG schema element.
type Component_OpticalChannel_InputPower_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_InputPower_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/input-power/min-time YANG schema element.
type Component_OpticalChannel_InputPower_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/optical-channel/state/input-power/min-time"
func (n *Component_OpticalChannel_InputPower_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_InputPower).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/optical-channel/state/input-power/min-time"
func (n *Component_OpticalChannel_InputPower_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_InputPower).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_InputPowerPath represents the /openconfig-platform/components/component/optical-channel/state/input-power YANG schema element.
type Component_OpticalChannel_InputPowerPath struct {
	*ygnmi.NodePath
}

// Component_OpticalChannel_InputPowerPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/input-power YANG schema element.
type Component_OpticalChannel_InputPowerPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/input-power/avg"
func (n *Component_OpticalChannel_InputPowerPath) Avg() *Component_OpticalChannel_InputPower_AvgPath {
	ps := &Component_OpticalChannel_InputPower_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/input-power/avg"
func (n *Component_OpticalChannel_InputPowerPathAny) Avg() *Component_OpticalChannel_InputPower_AvgPathAny {
	ps := &Component_OpticalChannel_InputPower_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/input-power/instant"
func (n *Component_OpticalChannel_InputPowerPath) Instant() *Component_OpticalChannel_InputPower_InstantPath {
	ps := &Component_OpticalChannel_InputPower_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/input-power/instant"
func (n *Component_OpticalChannel_InputPowerPathAny) Instant() *Component_OpticalChannel_InputPower_InstantPathAny {
	ps := &Component_OpticalChannel_InputPower_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/input-power/interval"
func (n *Component_OpticalChannel_InputPowerPath) Interval() *Component_OpticalChannel_InputPower_IntervalPath {
	ps := &Component_OpticalChannel_InputPower_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/input-power/interval"
func (n *Component_OpticalChannel_InputPowerPathAny) Interval() *Component_OpticalChannel_InputPower_IntervalPathAny {
	ps := &Component_OpticalChannel_InputPower_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/input-power/max"
func (n *Component_OpticalChannel_InputPowerPath) Max() *Component_OpticalChannel_InputPower_MaxPath {
	ps := &Component_OpticalChannel_InputPower_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/input-power/max"
func (n *Component_OpticalChannel_InputPowerPathAny) Max() *Component_OpticalChannel_InputPower_MaxPathAny {
	ps := &Component_OpticalChannel_InputPower_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/optical-channel/state/input-power/max-time"
func (n *Component_OpticalChannel_InputPowerPath) MaxTime() *Component_OpticalChannel_InputPower_MaxTimePath {
	ps := &Component_OpticalChannel_InputPower_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/optical-channel/state/input-power/max-time"
func (n *Component_OpticalChannel_InputPowerPathAny) MaxTime() *Component_OpticalChannel_InputPower_MaxTimePathAny {
	ps := &Component_OpticalChannel_InputPower_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/input-power/min"
func (n *Component_OpticalChannel_InputPowerPath) Min() *Component_OpticalChannel_InputPower_MinPath {
	ps := &Component_OpticalChannel_InputPower_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/input-power/min"
func (n *Component_OpticalChannel_InputPowerPathAny) Min() *Component_OpticalChannel_InputPower_MinPathAny {
	ps := &Component_OpticalChannel_InputPower_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/optical-channel/state/input-power/min-time"
func (n *Component_OpticalChannel_InputPowerPath) MinTime() *Component_OpticalChannel_InputPower_MinTimePath {
	ps := &Component_OpticalChannel_InputPower_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/optical-channel/state/input-power/min-time"
func (n *Component_OpticalChannel_InputPowerPathAny) MinTime() *Component_OpticalChannel_InputPower_MinTimePathAny {
	ps := &Component_OpticalChannel_InputPower_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannel_InputPowerPath) State() ygnmi.SingletonQuery[*oc.Component_OpticalChannel_InputPower] {
	return ygnmi.NewSingletonQuery[*oc.Component_OpticalChannel_InputPower](
		"Component_OpticalChannel_InputPower",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannel_InputPowerPathAny) State() ygnmi.WildcardQuery[*oc.Component_OpticalChannel_InputPower] {
	return ygnmi.NewWildcardQuery[*oc.Component_OpticalChannel_InputPower](
		"Component_OpticalChannel_InputPower",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_LaserBiasCurrent_AvgPath represents the /openconfig-platform/components/component/optical-channel/state/laser-bias-current/avg YANG schema element.
type Component_OpticalChannel_LaserBiasCurrent_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_LaserBiasCurrent_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/laser-bias-current/avg YANG schema element.
type Component_OpticalChannel_LaserBiasCurrent_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/laser-bias-current/avg"
func (n *Component_OpticalChannel_LaserBiasCurrent_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_LaserBiasCurrent).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/laser-bias-current/avg"
func (n *Component_OpticalChannel_LaserBiasCurrent_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_LaserBiasCurrent).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_LaserBiasCurrent_InstantPath represents the /openconfig-platform/components/component/optical-channel/state/laser-bias-current/instant YANG schema element.
type Component_OpticalChannel_LaserBiasCurrent_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_LaserBiasCurrent_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/laser-bias-current/instant YANG schema element.
type Component_OpticalChannel_LaserBiasCurrent_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/laser-bias-current/instant"
func (n *Component_OpticalChannel_LaserBiasCurrent_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_LaserBiasCurrent).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/laser-bias-current/instant"
func (n *Component_OpticalChannel_LaserBiasCurrent_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_LaserBiasCurrent).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_LaserBiasCurrent_IntervalPath represents the /openconfig-platform/components/component/optical-channel/state/laser-bias-current/interval YANG schema element.
type Component_OpticalChannel_LaserBiasCurrent_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_LaserBiasCurrent_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/laser-bias-current/interval YANG schema element.
type Component_OpticalChannel_LaserBiasCurrent_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/laser-bias-current/interval"
func (n *Component_OpticalChannel_LaserBiasCurrent_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_LaserBiasCurrent).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/laser-bias-current/interval"
func (n *Component_OpticalChannel_LaserBiasCurrent_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_LaserBiasCurrent).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_LaserBiasCurrent_MaxPath represents the /openconfig-platform/components/component/optical-channel/state/laser-bias-current/max YANG schema element.
type Component_OpticalChannel_LaserBiasCurrent_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_LaserBiasCurrent_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/laser-bias-current/max YANG schema element.
type Component_OpticalChannel_LaserBiasCurrent_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/laser-bias-current/max"
func (n *Component_OpticalChannel_LaserBiasCurrent_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_LaserBiasCurrent).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/laser-bias-current/max"
func (n *Component_OpticalChannel_LaserBiasCurrent_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_LaserBiasCurrent).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_LaserBiasCurrent_MaxTimePath represents the /openconfig-platform/components/component/optical-channel/state/laser-bias-current/max-time YANG schema element.
type Component_OpticalChannel_LaserBiasCurrent_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_LaserBiasCurrent_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/laser-bias-current/max-time YANG schema element.
type Component_OpticalChannel_LaserBiasCurrent_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/optical-channel/state/laser-bias-current/max-time"
func (n *Component_OpticalChannel_LaserBiasCurrent_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_LaserBiasCurrent).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/optical-channel/state/laser-bias-current/max-time"
func (n *Component_OpticalChannel_LaserBiasCurrent_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_LaserBiasCurrent).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_LaserBiasCurrent_MinPath represents the /openconfig-platform/components/component/optical-channel/state/laser-bias-current/min YANG schema element.
type Component_OpticalChannel_LaserBiasCurrent_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_LaserBiasCurrent_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/laser-bias-current/min YANG schema element.
type Component_OpticalChannel_LaserBiasCurrent_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/laser-bias-current/min"
func (n *Component_OpticalChannel_LaserBiasCurrent_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_LaserBiasCurrent).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/laser-bias-current/min"
func (n *Component_OpticalChannel_LaserBiasCurrent_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_LaserBiasCurrent).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_LaserBiasCurrent_MinTimePath represents the /openconfig-platform/components/component/optical-channel/state/laser-bias-current/min-time YANG schema element.
type Component_OpticalChannel_LaserBiasCurrent_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_LaserBiasCurrent_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/laser-bias-current/min-time YANG schema element.
type Component_OpticalChannel_LaserBiasCurrent_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/optical-channel/state/laser-bias-current/min-time"
func (n *Component_OpticalChannel_LaserBiasCurrent_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_LaserBiasCurrent).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/optical-channel/state/laser-bias-current/min-time"
func (n *Component_OpticalChannel_LaserBiasCurrent_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_LaserBiasCurrent).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_LaserBiasCurrentPath represents the /openconfig-platform/components/component/optical-channel/state/laser-bias-current YANG schema element.
type Component_OpticalChannel_LaserBiasCurrentPath struct {
	*ygnmi.NodePath
}

// Component_OpticalChannel_LaserBiasCurrentPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/laser-bias-current YANG schema element.
type Component_OpticalChannel_LaserBiasCurrentPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/laser-bias-current/avg"
func (n *Component_OpticalChannel_LaserBiasCurrentPath) Avg() *Component_OpticalChannel_LaserBiasCurrent_AvgPath {
	ps := &Component_OpticalChannel_LaserBiasCurrent_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/laser-bias-current/avg"
func (n *Component_OpticalChannel_LaserBiasCurrentPathAny) Avg() *Component_OpticalChannel_LaserBiasCurrent_AvgPathAny {
	ps := &Component_OpticalChannel_LaserBiasCurrent_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/laser-bias-current/instant"
func (n *Component_OpticalChannel_LaserBiasCurrentPath) Instant() *Component_OpticalChannel_LaserBiasCurrent_InstantPath {
	ps := &Component_OpticalChannel_LaserBiasCurrent_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/laser-bias-current/instant"
func (n *Component_OpticalChannel_LaserBiasCurrentPathAny) Instant() *Component_OpticalChannel_LaserBiasCurrent_InstantPathAny {
	ps := &Component_OpticalChannel_LaserBiasCurrent_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/laser-bias-current/interval"
func (n *Component_OpticalChannel_LaserBiasCurrentPath) Interval() *Component_OpticalChannel_LaserBiasCurrent_IntervalPath {
	ps := &Component_OpticalChannel_LaserBiasCurrent_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/laser-bias-current/interval"
func (n *Component_OpticalChannel_LaserBiasCurrentPathAny) Interval() *Component_OpticalChannel_LaserBiasCurrent_IntervalPathAny {
	ps := &Component_OpticalChannel_LaserBiasCurrent_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/laser-bias-current/max"
func (n *Component_OpticalChannel_LaserBiasCurrentPath) Max() *Component_OpticalChannel_LaserBiasCurrent_MaxPath {
	ps := &Component_OpticalChannel_LaserBiasCurrent_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/laser-bias-current/max"
func (n *Component_OpticalChannel_LaserBiasCurrentPathAny) Max() *Component_OpticalChannel_LaserBiasCurrent_MaxPathAny {
	ps := &Component_OpticalChannel_LaserBiasCurrent_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/optical-channel/state/laser-bias-current/max-time"
func (n *Component_OpticalChannel_LaserBiasCurrentPath) MaxTime() *Component_OpticalChannel_LaserBiasCurrent_MaxTimePath {
	ps := &Component_OpticalChannel_LaserBiasCurrent_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/optical-channel/state/laser-bias-current/max-time"
func (n *Component_OpticalChannel_LaserBiasCurrentPathAny) MaxTime() *Component_OpticalChannel_LaserBiasCurrent_MaxTimePathAny {
	ps := &Component_OpticalChannel_LaserBiasCurrent_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/laser-bias-current/min"
func (n *Component_OpticalChannel_LaserBiasCurrentPath) Min() *Component_OpticalChannel_LaserBiasCurrent_MinPath {
	ps := &Component_OpticalChannel_LaserBiasCurrent_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/laser-bias-current/min"
func (n *Component_OpticalChannel_LaserBiasCurrentPathAny) Min() *Component_OpticalChannel_LaserBiasCurrent_MinPathAny {
	ps := &Component_OpticalChannel_LaserBiasCurrent_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/optical-channel/state/laser-bias-current/min-time"
func (n *Component_OpticalChannel_LaserBiasCurrentPath) MinTime() *Component_OpticalChannel_LaserBiasCurrent_MinTimePath {
	ps := &Component_OpticalChannel_LaserBiasCurrent_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/optical-channel/state/laser-bias-current/min-time"
func (n *Component_OpticalChannel_LaserBiasCurrentPathAny) MinTime() *Component_OpticalChannel_LaserBiasCurrent_MinTimePathAny {
	ps := &Component_OpticalChannel_LaserBiasCurrent_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannel_LaserBiasCurrentPath) State() ygnmi.SingletonQuery[*oc.Component_OpticalChannel_LaserBiasCurrent] {
	return ygnmi.NewSingletonQuery[*oc.Component_OpticalChannel_LaserBiasCurrent](
		"Component_OpticalChannel_LaserBiasCurrent",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannel_LaserBiasCurrentPathAny) State() ygnmi.WildcardQuery[*oc.Component_OpticalChannel_LaserBiasCurrent] {
	return ygnmi.NewWildcardQuery[*oc.Component_OpticalChannel_LaserBiasCurrent](
		"Component_OpticalChannel_LaserBiasCurrent",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulationErrorRatio_AvgPath represents the /openconfig-platform/components/component/optical-channel/state/modulation-error-ratio/avg YANG schema element.
type Component_OpticalChannel_ModulationErrorRatio_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulationErrorRatio_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulation-error-ratio/avg YANG schema element.
type Component_OpticalChannel_ModulationErrorRatio_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/modulation-error-ratio/avg"
func (n *Component_OpticalChannel_ModulationErrorRatio_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_ModulationErrorRatio",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulationErrorRatio).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulationErrorRatio) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/modulation-error-ratio/avg"
func (n *Component_OpticalChannel_ModulationErrorRatio_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_ModulationErrorRatio",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulationErrorRatio).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulationErrorRatio) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulationErrorRatio_InstantPath represents the /openconfig-platform/components/component/optical-channel/state/modulation-error-ratio/instant YANG schema element.
type Component_OpticalChannel_ModulationErrorRatio_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulationErrorRatio_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulation-error-ratio/instant YANG schema element.
type Component_OpticalChannel_ModulationErrorRatio_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/modulation-error-ratio/instant"
func (n *Component_OpticalChannel_ModulationErrorRatio_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_ModulationErrorRatio",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulationErrorRatio).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulationErrorRatio) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/modulation-error-ratio/instant"
func (n *Component_OpticalChannel_ModulationErrorRatio_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_ModulationErrorRatio",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulationErrorRatio).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulationErrorRatio) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulationErrorRatio_IntervalPath represents the /openconfig-platform/components/component/optical-channel/state/modulation-error-ratio/interval YANG schema element.
type Component_OpticalChannel_ModulationErrorRatio_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulationErrorRatio_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulation-error-ratio/interval YANG schema element.
type Component_OpticalChannel_ModulationErrorRatio_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/modulation-error-ratio/interval"
func (n *Component_OpticalChannel_ModulationErrorRatio_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_ModulationErrorRatio",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulationErrorRatio).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulationErrorRatio) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/modulation-error-ratio/interval"
func (n *Component_OpticalChannel_ModulationErrorRatio_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_ModulationErrorRatio",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulationErrorRatio).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulationErrorRatio) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulationErrorRatio_MaxPath represents the /openconfig-platform/components/component/optical-channel/state/modulation-error-ratio/max YANG schema element.
type Component_OpticalChannel_ModulationErrorRatio_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulationErrorRatio_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulation-error-ratio/max YANG schema element.
type Component_OpticalChannel_ModulationErrorRatio_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/modulation-error-ratio/max"
func (n *Component_OpticalChannel_ModulationErrorRatio_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_ModulationErrorRatio",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulationErrorRatio).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulationErrorRatio) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/modulation-error-ratio/max"
func (n *Component_OpticalChannel_ModulationErrorRatio_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_ModulationErrorRatio",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulationErrorRatio).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulationErrorRatio) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulationErrorRatio_MaxTimePath represents the /openconfig-platform/components/component/optical-channel/state/modulation-error-ratio/max-time YANG schema element.
type Component_OpticalChannel_ModulationErrorRatio_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulationErrorRatio_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulation-error-ratio/max-time YANG schema element.
type Component_OpticalChannel_ModulationErrorRatio_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/optical-channel/state/modulation-error-ratio/max-time"
func (n *Component_OpticalChannel_ModulationErrorRatio_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_ModulationErrorRatio",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulationErrorRatio).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulationErrorRatio) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/optical-channel/state/modulation-error-ratio/max-time"
func (n *Component_OpticalChannel_ModulationErrorRatio_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_ModulationErrorRatio",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulationErrorRatio).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulationErrorRatio) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulationErrorRatio_MinPath represents the /openconfig-platform/components/component/optical-channel/state/modulation-error-ratio/min YANG schema element.
type Component_OpticalChannel_ModulationErrorRatio_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulationErrorRatio_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulation-error-ratio/min YANG schema element.
type Component_OpticalChannel_ModulationErrorRatio_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/modulation-error-ratio/min"
func (n *Component_OpticalChannel_ModulationErrorRatio_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_ModulationErrorRatio",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulationErrorRatio).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulationErrorRatio) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/modulation-error-ratio/min"
func (n *Component_OpticalChannel_ModulationErrorRatio_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_ModulationErrorRatio",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulationErrorRatio).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulationErrorRatio) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulationErrorRatio_MinTimePath represents the /openconfig-platform/components/component/optical-channel/state/modulation-error-ratio/min-time YANG schema element.
type Component_OpticalChannel_ModulationErrorRatio_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulationErrorRatio_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulation-error-ratio/min-time YANG schema element.
type Component_OpticalChannel_ModulationErrorRatio_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/optical-channel/state/modulation-error-ratio/min-time"
func (n *Component_OpticalChannel_ModulationErrorRatio_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_ModulationErrorRatio",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulationErrorRatio).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulationErrorRatio) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/optical-channel/state/modulation-error-ratio/min-time"
func (n *Component_OpticalChannel_ModulationErrorRatio_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_ModulationErrorRatio",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulationErrorRatio).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulationErrorRatio) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulationErrorRatioPath represents the /openconfig-platform/components/component/optical-channel/state/modulation-error-ratio YANG schema element.
type Component_OpticalChannel_ModulationErrorRatioPath struct {
	*ygnmi.NodePath
}

// Component_OpticalChannel_ModulationErrorRatioPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulation-error-ratio YANG schema element.
type Component_OpticalChannel_ModulationErrorRatioPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/modulation-error-ratio/avg"
func (n *Component_OpticalChannel_ModulationErrorRatioPath) Avg() *Component_OpticalChannel_ModulationErrorRatio_AvgPath {
	ps := &Component_OpticalChannel_ModulationErrorRatio_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/modulation-error-ratio/avg"
func (n *Component_OpticalChannel_ModulationErrorRatioPathAny) Avg() *Component_OpticalChannel_ModulationErrorRatio_AvgPathAny {
	ps := &Component_OpticalChannel_ModulationErrorRatio_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/modulation-error-ratio/instant"
func (n *Component_OpticalChannel_ModulationErrorRatioPath) Instant() *Component_OpticalChannel_ModulationErrorRatio_InstantPath {
	ps := &Component_OpticalChannel_ModulationErrorRatio_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/modulation-error-ratio/instant"
func (n *Component_OpticalChannel_ModulationErrorRatioPathAny) Instant() *Component_OpticalChannel_ModulationErrorRatio_InstantPathAny {
	ps := &Component_OpticalChannel_ModulationErrorRatio_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/modulation-error-ratio/interval"
func (n *Component_OpticalChannel_ModulationErrorRatioPath) Interval() *Component_OpticalChannel_ModulationErrorRatio_IntervalPath {
	ps := &Component_OpticalChannel_ModulationErrorRatio_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/modulation-error-ratio/interval"
func (n *Component_OpticalChannel_ModulationErrorRatioPathAny) Interval() *Component_OpticalChannel_ModulationErrorRatio_IntervalPathAny {
	ps := &Component_OpticalChannel_ModulationErrorRatio_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/modulation-error-ratio/max"
func (n *Component_OpticalChannel_ModulationErrorRatioPath) Max() *Component_OpticalChannel_ModulationErrorRatio_MaxPath {
	ps := &Component_OpticalChannel_ModulationErrorRatio_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/modulation-error-ratio/max"
func (n *Component_OpticalChannel_ModulationErrorRatioPathAny) Max() *Component_OpticalChannel_ModulationErrorRatio_MaxPathAny {
	ps := &Component_OpticalChannel_ModulationErrorRatio_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/optical-channel/state/modulation-error-ratio/max-time"
func (n *Component_OpticalChannel_ModulationErrorRatioPath) MaxTime() *Component_OpticalChannel_ModulationErrorRatio_MaxTimePath {
	ps := &Component_OpticalChannel_ModulationErrorRatio_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/optical-channel/state/modulation-error-ratio/max-time"
func (n *Component_OpticalChannel_ModulationErrorRatioPathAny) MaxTime() *Component_OpticalChannel_ModulationErrorRatio_MaxTimePathAny {
	ps := &Component_OpticalChannel_ModulationErrorRatio_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/modulation-error-ratio/min"
func (n *Component_OpticalChannel_ModulationErrorRatioPath) Min() *Component_OpticalChannel_ModulationErrorRatio_MinPath {
	ps := &Component_OpticalChannel_ModulationErrorRatio_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/modulation-error-ratio/min"
func (n *Component_OpticalChannel_ModulationErrorRatioPathAny) Min() *Component_OpticalChannel_ModulationErrorRatio_MinPathAny {
	ps := &Component_OpticalChannel_ModulationErrorRatio_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/optical-channel/state/modulation-error-ratio/min-time"
func (n *Component_OpticalChannel_ModulationErrorRatioPath) MinTime() *Component_OpticalChannel_ModulationErrorRatio_MinTimePath {
	ps := &Component_OpticalChannel_ModulationErrorRatio_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/optical-channel/state/modulation-error-ratio/min-time"
func (n *Component_OpticalChannel_ModulationErrorRatioPathAny) MinTime() *Component_OpticalChannel_ModulationErrorRatio_MinTimePathAny {
	ps := &Component_OpticalChannel_ModulationErrorRatio_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannel_ModulationErrorRatioPath) State() ygnmi.SingletonQuery[*oc.Component_OpticalChannel_ModulationErrorRatio] {
	return ygnmi.NewSingletonQuery[*oc.Component_OpticalChannel_ModulationErrorRatio](
		"Component_OpticalChannel_ModulationErrorRatio",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannel_ModulationErrorRatioPathAny) State() ygnmi.WildcardQuery[*oc.Component_OpticalChannel_ModulationErrorRatio] {
	return ygnmi.NewWildcardQuery[*oc.Component_OpticalChannel_ModulationErrorRatio](
		"Component_OpticalChannel_ModulationErrorRatio",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasXPhase_AvgPath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-x-phase/avg YANG schema element.
type Component_OpticalChannel_ModulatorBiasXPhase_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulatorBiasXPhase_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-x-phase/avg YANG schema element.
type Component_OpticalChannel_ModulatorBiasXPhase_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-x-phase/avg"
func (n *Component_OpticalChannel_ModulatorBiasXPhase_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_ModulatorBiasXPhase",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasXPhase).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasXPhase) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-x-phase/avg"
func (n *Component_OpticalChannel_ModulatorBiasXPhase_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_ModulatorBiasXPhase",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasXPhase).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasXPhase) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasXPhase_InstantPath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-x-phase/instant YANG schema element.
type Component_OpticalChannel_ModulatorBiasXPhase_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulatorBiasXPhase_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-x-phase/instant YANG schema element.
type Component_OpticalChannel_ModulatorBiasXPhase_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-x-phase/instant"
func (n *Component_OpticalChannel_ModulatorBiasXPhase_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_ModulatorBiasXPhase",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasXPhase).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasXPhase) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-x-phase/instant"
func (n *Component_OpticalChannel_ModulatorBiasXPhase_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_ModulatorBiasXPhase",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasXPhase).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasXPhase) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasXPhase_IntervalPath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-x-phase/interval YANG schema element.
type Component_OpticalChannel_ModulatorBiasXPhase_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulatorBiasXPhase_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-x-phase/interval YANG schema element.
type Component_OpticalChannel_ModulatorBiasXPhase_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-x-phase/interval"
func (n *Component_OpticalChannel_ModulatorBiasXPhase_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_ModulatorBiasXPhase",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasXPhase).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasXPhase) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-x-phase/interval"
func (n *Component_OpticalChannel_ModulatorBiasXPhase_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_ModulatorBiasXPhase",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasXPhase).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasXPhase) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasXPhase_MaxPath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-x-phase/max YANG schema element.
type Component_OpticalChannel_ModulatorBiasXPhase_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulatorBiasXPhase_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-x-phase/max YANG schema element.
type Component_OpticalChannel_ModulatorBiasXPhase_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-x-phase/max"
func (n *Component_OpticalChannel_ModulatorBiasXPhase_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_ModulatorBiasXPhase",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasXPhase).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasXPhase) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-x-phase/max"
func (n *Component_OpticalChannel_ModulatorBiasXPhase_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_ModulatorBiasXPhase",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasXPhase).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasXPhase) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasXPhase_MaxTimePath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-x-phase/max-time YANG schema element.
type Component_OpticalChannel_ModulatorBiasXPhase_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulatorBiasXPhase_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-x-phase/max-time YANG schema element.
type Component_OpticalChannel_ModulatorBiasXPhase_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-x-phase/max-time"
func (n *Component_OpticalChannel_ModulatorBiasXPhase_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_ModulatorBiasXPhase",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasXPhase).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasXPhase) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-x-phase/max-time"
func (n *Component_OpticalChannel_ModulatorBiasXPhase_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_ModulatorBiasXPhase",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasXPhase).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasXPhase) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasXPhase_MinPath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-x-phase/min YANG schema element.
type Component_OpticalChannel_ModulatorBiasXPhase_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulatorBiasXPhase_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-x-phase/min YANG schema element.
type Component_OpticalChannel_ModulatorBiasXPhase_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-x-phase/min"
func (n *Component_OpticalChannel_ModulatorBiasXPhase_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_ModulatorBiasXPhase",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasXPhase).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasXPhase) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-x-phase/min"
func (n *Component_OpticalChannel_ModulatorBiasXPhase_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_ModulatorBiasXPhase",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasXPhase).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasXPhase) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasXPhase_MinTimePath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-x-phase/min-time YANG schema element.
type Component_OpticalChannel_ModulatorBiasXPhase_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulatorBiasXPhase_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-x-phase/min-time YANG schema element.
type Component_OpticalChannel_ModulatorBiasXPhase_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-x-phase/min-time"
func (n *Component_OpticalChannel_ModulatorBiasXPhase_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_ModulatorBiasXPhase",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasXPhase).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasXPhase) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-x-phase/min-time"
func (n *Component_OpticalChannel_ModulatorBiasXPhase_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_ModulatorBiasXPhase",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasXPhase).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasXPhase) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasXPhasePath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-x-phase YANG schema element.
type Component_OpticalChannel_ModulatorBiasXPhasePath struct {
	*ygnmi.NodePath
}

// Component_OpticalChannel_ModulatorBiasXPhasePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-x-phase YANG schema element.
type Component_OpticalChannel_ModulatorBiasXPhasePathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-x-phase/avg"
func (n *Component_OpticalChannel_ModulatorBiasXPhasePath) Avg() *Component_OpticalChannel_ModulatorBiasXPhase_AvgPath {
	ps := &Component_OpticalChannel_ModulatorBiasXPhase_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-x-phase/avg"
func (n *Component_OpticalChannel_ModulatorBiasXPhasePathAny) Avg() *Component_OpticalChannel_ModulatorBiasXPhase_AvgPathAny {
	ps := &Component_OpticalChannel_ModulatorBiasXPhase_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-x-phase/instant"
func (n *Component_OpticalChannel_ModulatorBiasXPhasePath) Instant() *Component_OpticalChannel_ModulatorBiasXPhase_InstantPath {
	ps := &Component_OpticalChannel_ModulatorBiasXPhase_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-x-phase/instant"
func (n *Component_OpticalChannel_ModulatorBiasXPhasePathAny) Instant() *Component_OpticalChannel_ModulatorBiasXPhase_InstantPathAny {
	ps := &Component_OpticalChannel_ModulatorBiasXPhase_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-x-phase/interval"
func (n *Component_OpticalChannel_ModulatorBiasXPhasePath) Interval() *Component_OpticalChannel_ModulatorBiasXPhase_IntervalPath {
	ps := &Component_OpticalChannel_ModulatorBiasXPhase_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-x-phase/interval"
func (n *Component_OpticalChannel_ModulatorBiasXPhasePathAny) Interval() *Component_OpticalChannel_ModulatorBiasXPhase_IntervalPathAny {
	ps := &Component_OpticalChannel_ModulatorBiasXPhase_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-x-phase/max"
func (n *Component_OpticalChannel_ModulatorBiasXPhasePath) Max() *Component_OpticalChannel_ModulatorBiasXPhase_MaxPath {
	ps := &Component_OpticalChannel_ModulatorBiasXPhase_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-x-phase/max"
func (n *Component_OpticalChannel_ModulatorBiasXPhasePathAny) Max() *Component_OpticalChannel_ModulatorBiasXPhase_MaxPathAny {
	ps := &Component_OpticalChannel_ModulatorBiasXPhase_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/optical-channel/state/modulator-bias-x-phase/max-time"
func (n *Component_OpticalChannel_ModulatorBiasXPhasePath) MaxTime() *Component_OpticalChannel_ModulatorBiasXPhase_MaxTimePath {
	ps := &Component_OpticalChannel_ModulatorBiasXPhase_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/optical-channel/state/modulator-bias-x-phase/max-time"
func (n *Component_OpticalChannel_ModulatorBiasXPhasePathAny) MaxTime() *Component_OpticalChannel_ModulatorBiasXPhase_MaxTimePathAny {
	ps := &Component_OpticalChannel_ModulatorBiasXPhase_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-x-phase/min"
func (n *Component_OpticalChannel_ModulatorBiasXPhasePath) Min() *Component_OpticalChannel_ModulatorBiasXPhase_MinPath {
	ps := &Component_OpticalChannel_ModulatorBiasXPhase_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-x-phase/min"
func (n *Component_OpticalChannel_ModulatorBiasXPhasePathAny) Min() *Component_OpticalChannel_ModulatorBiasXPhase_MinPathAny {
	ps := &Component_OpticalChannel_ModulatorBiasXPhase_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/optical-channel/state/modulator-bias-x-phase/min-time"
func (n *Component_OpticalChannel_ModulatorBiasXPhasePath) MinTime() *Component_OpticalChannel_ModulatorBiasXPhase_MinTimePath {
	ps := &Component_OpticalChannel_ModulatorBiasXPhase_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/optical-channel/state/modulator-bias-x-phase/min-time"
func (n *Component_OpticalChannel_ModulatorBiasXPhasePathAny) MinTime() *Component_OpticalChannel_ModulatorBiasXPhase_MinTimePathAny {
	ps := &Component_OpticalChannel_ModulatorBiasXPhase_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannel_ModulatorBiasXPhasePath) State() ygnmi.SingletonQuery[*oc.Component_OpticalChannel_ModulatorBiasXPhase] {
	return ygnmi.NewSingletonQuery[*oc.Component_OpticalChannel_ModulatorBiasXPhase](
		"Component_OpticalChannel_ModulatorBiasXPhase",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannel_ModulatorBiasXPhasePathAny) State() ygnmi.WildcardQuery[*oc.Component_OpticalChannel_ModulatorBiasXPhase] {
	return ygnmi.NewWildcardQuery[*oc.Component_OpticalChannel_ModulatorBiasXPhase](
		"Component_OpticalChannel_ModulatorBiasXPhase",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasXi_AvgPath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-xi/avg YANG schema element.
type Component_OpticalChannel_ModulatorBiasXi_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulatorBiasXi_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-xi/avg YANG schema element.
type Component_OpticalChannel_ModulatorBiasXi_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xi/avg"
func (n *Component_OpticalChannel_ModulatorBiasXi_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_ModulatorBiasXi",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasXi).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasXi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xi/avg"
func (n *Component_OpticalChannel_ModulatorBiasXi_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_ModulatorBiasXi",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasXi).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasXi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasXi_InstantPath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-xi/instant YANG schema element.
type Component_OpticalChannel_ModulatorBiasXi_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulatorBiasXi_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-xi/instant YANG schema element.
type Component_OpticalChannel_ModulatorBiasXi_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xi/instant"
func (n *Component_OpticalChannel_ModulatorBiasXi_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_ModulatorBiasXi",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasXi).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasXi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xi/instant"
func (n *Component_OpticalChannel_ModulatorBiasXi_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_ModulatorBiasXi",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasXi).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasXi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasXi_IntervalPath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-xi/interval YANG schema element.
type Component_OpticalChannel_ModulatorBiasXi_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulatorBiasXi_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-xi/interval YANG schema element.
type Component_OpticalChannel_ModulatorBiasXi_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xi/interval"
func (n *Component_OpticalChannel_ModulatorBiasXi_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_ModulatorBiasXi",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasXi).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasXi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xi/interval"
func (n *Component_OpticalChannel_ModulatorBiasXi_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_ModulatorBiasXi",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasXi).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasXi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasXi_MaxPath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-xi/max YANG schema element.
type Component_OpticalChannel_ModulatorBiasXi_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulatorBiasXi_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-xi/max YANG schema element.
type Component_OpticalChannel_ModulatorBiasXi_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xi/max"
func (n *Component_OpticalChannel_ModulatorBiasXi_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_ModulatorBiasXi",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasXi).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasXi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xi/max"
func (n *Component_OpticalChannel_ModulatorBiasXi_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_ModulatorBiasXi",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasXi).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasXi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasXi_MaxTimePath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-xi/max-time YANG schema element.
type Component_OpticalChannel_ModulatorBiasXi_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulatorBiasXi_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-xi/max-time YANG schema element.
type Component_OpticalChannel_ModulatorBiasXi_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xi/max-time"
func (n *Component_OpticalChannel_ModulatorBiasXi_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_ModulatorBiasXi",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasXi).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasXi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xi/max-time"
func (n *Component_OpticalChannel_ModulatorBiasXi_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_ModulatorBiasXi",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasXi).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasXi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasXi_MinPath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-xi/min YANG schema element.
type Component_OpticalChannel_ModulatorBiasXi_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulatorBiasXi_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-xi/min YANG schema element.
type Component_OpticalChannel_ModulatorBiasXi_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xi/min"
func (n *Component_OpticalChannel_ModulatorBiasXi_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_ModulatorBiasXi",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasXi).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasXi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xi/min"
func (n *Component_OpticalChannel_ModulatorBiasXi_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_ModulatorBiasXi",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasXi).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasXi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasXi_MinTimePath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-xi/min-time YANG schema element.
type Component_OpticalChannel_ModulatorBiasXi_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulatorBiasXi_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-xi/min-time YANG schema element.
type Component_OpticalChannel_ModulatorBiasXi_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xi/min-time"
func (n *Component_OpticalChannel_ModulatorBiasXi_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_ModulatorBiasXi",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasXi).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasXi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xi/min-time"
func (n *Component_OpticalChannel_ModulatorBiasXi_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_ModulatorBiasXi",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasXi).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasXi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasXiPath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-xi YANG schema element.
type Component_OpticalChannel_ModulatorBiasXiPath struct {
	*ygnmi.NodePath
}

// Component_OpticalChannel_ModulatorBiasXiPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-xi YANG schema element.
type Component_OpticalChannel_ModulatorBiasXiPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xi/avg"
func (n *Component_OpticalChannel_ModulatorBiasXiPath) Avg() *Component_OpticalChannel_ModulatorBiasXi_AvgPath {
	ps := &Component_OpticalChannel_ModulatorBiasXi_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xi/avg"
func (n *Component_OpticalChannel_ModulatorBiasXiPathAny) Avg() *Component_OpticalChannel_ModulatorBiasXi_AvgPathAny {
	ps := &Component_OpticalChannel_ModulatorBiasXi_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xi/instant"
func (n *Component_OpticalChannel_ModulatorBiasXiPath) Instant() *Component_OpticalChannel_ModulatorBiasXi_InstantPath {
	ps := &Component_OpticalChannel_ModulatorBiasXi_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xi/instant"
func (n *Component_OpticalChannel_ModulatorBiasXiPathAny) Instant() *Component_OpticalChannel_ModulatorBiasXi_InstantPathAny {
	ps := &Component_OpticalChannel_ModulatorBiasXi_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xi/interval"
func (n *Component_OpticalChannel_ModulatorBiasXiPath) Interval() *Component_OpticalChannel_ModulatorBiasXi_IntervalPath {
	ps := &Component_OpticalChannel_ModulatorBiasXi_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xi/interval"
func (n *Component_OpticalChannel_ModulatorBiasXiPathAny) Interval() *Component_OpticalChannel_ModulatorBiasXi_IntervalPathAny {
	ps := &Component_OpticalChannel_ModulatorBiasXi_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xi/max"
func (n *Component_OpticalChannel_ModulatorBiasXiPath) Max() *Component_OpticalChannel_ModulatorBiasXi_MaxPath {
	ps := &Component_OpticalChannel_ModulatorBiasXi_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xi/max"
func (n *Component_OpticalChannel_ModulatorBiasXiPathAny) Max() *Component_OpticalChannel_ModulatorBiasXi_MaxPathAny {
	ps := &Component_OpticalChannel_ModulatorBiasXi_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/optical-channel/state/modulator-bias-xi/max-time"
func (n *Component_OpticalChannel_ModulatorBiasXiPath) MaxTime() *Component_OpticalChannel_ModulatorBiasXi_MaxTimePath {
	ps := &Component_OpticalChannel_ModulatorBiasXi_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/optical-channel/state/modulator-bias-xi/max-time"
func (n *Component_OpticalChannel_ModulatorBiasXiPathAny) MaxTime() *Component_OpticalChannel_ModulatorBiasXi_MaxTimePathAny {
	ps := &Component_OpticalChannel_ModulatorBiasXi_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xi/min"
func (n *Component_OpticalChannel_ModulatorBiasXiPath) Min() *Component_OpticalChannel_ModulatorBiasXi_MinPath {
	ps := &Component_OpticalChannel_ModulatorBiasXi_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xi/min"
func (n *Component_OpticalChannel_ModulatorBiasXiPathAny) Min() *Component_OpticalChannel_ModulatorBiasXi_MinPathAny {
	ps := &Component_OpticalChannel_ModulatorBiasXi_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/optical-channel/state/modulator-bias-xi/min-time"
func (n *Component_OpticalChannel_ModulatorBiasXiPath) MinTime() *Component_OpticalChannel_ModulatorBiasXi_MinTimePath {
	ps := &Component_OpticalChannel_ModulatorBiasXi_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/optical-channel/state/modulator-bias-xi/min-time"
func (n *Component_OpticalChannel_ModulatorBiasXiPathAny) MinTime() *Component_OpticalChannel_ModulatorBiasXi_MinTimePathAny {
	ps := &Component_OpticalChannel_ModulatorBiasXi_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannel_ModulatorBiasXiPath) State() ygnmi.SingletonQuery[*oc.Component_OpticalChannel_ModulatorBiasXi] {
	return ygnmi.NewSingletonQuery[*oc.Component_OpticalChannel_ModulatorBiasXi](
		"Component_OpticalChannel_ModulatorBiasXi",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannel_ModulatorBiasXiPathAny) State() ygnmi.WildcardQuery[*oc.Component_OpticalChannel_ModulatorBiasXi] {
	return ygnmi.NewWildcardQuery[*oc.Component_OpticalChannel_ModulatorBiasXi](
		"Component_OpticalChannel_ModulatorBiasXi",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasXq_AvgPath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-xq/avg YANG schema element.
type Component_OpticalChannel_ModulatorBiasXq_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulatorBiasXq_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-xq/avg YANG schema element.
type Component_OpticalChannel_ModulatorBiasXq_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xq/avg"
func (n *Component_OpticalChannel_ModulatorBiasXq_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_ModulatorBiasXq",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasXq).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasXq) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xq/avg"
func (n *Component_OpticalChannel_ModulatorBiasXq_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_ModulatorBiasXq",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasXq).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasXq) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasXq_InstantPath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-xq/instant YANG schema element.
type Component_OpticalChannel_ModulatorBiasXq_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulatorBiasXq_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-xq/instant YANG schema element.
type Component_OpticalChannel_ModulatorBiasXq_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xq/instant"
func (n *Component_OpticalChannel_ModulatorBiasXq_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_ModulatorBiasXq",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasXq).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasXq) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xq/instant"
func (n *Component_OpticalChannel_ModulatorBiasXq_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_ModulatorBiasXq",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasXq).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasXq) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasXq_IntervalPath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-xq/interval YANG schema element.
type Component_OpticalChannel_ModulatorBiasXq_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulatorBiasXq_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-xq/interval YANG schema element.
type Component_OpticalChannel_ModulatorBiasXq_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xq/interval"
func (n *Component_OpticalChannel_ModulatorBiasXq_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_ModulatorBiasXq",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasXq).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasXq) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xq/interval"
func (n *Component_OpticalChannel_ModulatorBiasXq_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_ModulatorBiasXq",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasXq).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasXq) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasXq_MaxPath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-xq/max YANG schema element.
type Component_OpticalChannel_ModulatorBiasXq_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulatorBiasXq_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-xq/max YANG schema element.
type Component_OpticalChannel_ModulatorBiasXq_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xq/max"
func (n *Component_OpticalChannel_ModulatorBiasXq_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_ModulatorBiasXq",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasXq).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasXq) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xq/max"
func (n *Component_OpticalChannel_ModulatorBiasXq_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_ModulatorBiasXq",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasXq).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasXq) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasXq_MaxTimePath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-xq/max-time YANG schema element.
type Component_OpticalChannel_ModulatorBiasXq_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulatorBiasXq_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-xq/max-time YANG schema element.
type Component_OpticalChannel_ModulatorBiasXq_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xq/max-time"
func (n *Component_OpticalChannel_ModulatorBiasXq_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_ModulatorBiasXq",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasXq).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasXq) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xq/max-time"
func (n *Component_OpticalChannel_ModulatorBiasXq_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_ModulatorBiasXq",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasXq).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasXq) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasXq_MinPath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-xq/min YANG schema element.
type Component_OpticalChannel_ModulatorBiasXq_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulatorBiasXq_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-xq/min YANG schema element.
type Component_OpticalChannel_ModulatorBiasXq_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xq/min"
func (n *Component_OpticalChannel_ModulatorBiasXq_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_ModulatorBiasXq",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasXq).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasXq) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xq/min"
func (n *Component_OpticalChannel_ModulatorBiasXq_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_ModulatorBiasXq",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasXq).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasXq) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasXq_MinTimePath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-xq/min-time YANG schema element.
type Component_OpticalChannel_ModulatorBiasXq_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulatorBiasXq_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-xq/min-time YANG schema element.
type Component_OpticalChannel_ModulatorBiasXq_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xq/min-time"
func (n *Component_OpticalChannel_ModulatorBiasXq_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_ModulatorBiasXq",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasXq).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasXq) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xq/min-time"
func (n *Component_OpticalChannel_ModulatorBiasXq_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_ModulatorBiasXq",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasXq).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasXq) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasXqPath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-xq YANG schema element.
type Component_OpticalChannel_ModulatorBiasXqPath struct {
	*ygnmi.NodePath
}

// Component_OpticalChannel_ModulatorBiasXqPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-xq YANG schema element.
type Component_OpticalChannel_ModulatorBiasXqPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xq/avg"
func (n *Component_OpticalChannel_ModulatorBiasXqPath) Avg() *Component_OpticalChannel_ModulatorBiasXq_AvgPath {
	ps := &Component_OpticalChannel_ModulatorBiasXq_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xq/avg"
func (n *Component_OpticalChannel_ModulatorBiasXqPathAny) Avg() *Component_OpticalChannel_ModulatorBiasXq_AvgPathAny {
	ps := &Component_OpticalChannel_ModulatorBiasXq_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xq/instant"
func (n *Component_OpticalChannel_ModulatorBiasXqPath) Instant() *Component_OpticalChannel_ModulatorBiasXq_InstantPath {
	ps := &Component_OpticalChannel_ModulatorBiasXq_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xq/instant"
func (n *Component_OpticalChannel_ModulatorBiasXqPathAny) Instant() *Component_OpticalChannel_ModulatorBiasXq_InstantPathAny {
	ps := &Component_OpticalChannel_ModulatorBiasXq_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xq/interval"
func (n *Component_OpticalChannel_ModulatorBiasXqPath) Interval() *Component_OpticalChannel_ModulatorBiasXq_IntervalPath {
	ps := &Component_OpticalChannel_ModulatorBiasXq_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xq/interval"
func (n *Component_OpticalChannel_ModulatorBiasXqPathAny) Interval() *Component_OpticalChannel_ModulatorBiasXq_IntervalPathAny {
	ps := &Component_OpticalChannel_ModulatorBiasXq_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xq/max"
func (n *Component_OpticalChannel_ModulatorBiasXqPath) Max() *Component_OpticalChannel_ModulatorBiasXq_MaxPath {
	ps := &Component_OpticalChannel_ModulatorBiasXq_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xq/max"
func (n *Component_OpticalChannel_ModulatorBiasXqPathAny) Max() *Component_OpticalChannel_ModulatorBiasXq_MaxPathAny {
	ps := &Component_OpticalChannel_ModulatorBiasXq_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/optical-channel/state/modulator-bias-xq/max-time"
func (n *Component_OpticalChannel_ModulatorBiasXqPath) MaxTime() *Component_OpticalChannel_ModulatorBiasXq_MaxTimePath {
	ps := &Component_OpticalChannel_ModulatorBiasXq_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/optical-channel/state/modulator-bias-xq/max-time"
func (n *Component_OpticalChannel_ModulatorBiasXqPathAny) MaxTime() *Component_OpticalChannel_ModulatorBiasXq_MaxTimePathAny {
	ps := &Component_OpticalChannel_ModulatorBiasXq_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xq/min"
func (n *Component_OpticalChannel_ModulatorBiasXqPath) Min() *Component_OpticalChannel_ModulatorBiasXq_MinPath {
	ps := &Component_OpticalChannel_ModulatorBiasXq_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-xq/min"
func (n *Component_OpticalChannel_ModulatorBiasXqPathAny) Min() *Component_OpticalChannel_ModulatorBiasXq_MinPathAny {
	ps := &Component_OpticalChannel_ModulatorBiasXq_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/optical-channel/state/modulator-bias-xq/min-time"
func (n *Component_OpticalChannel_ModulatorBiasXqPath) MinTime() *Component_OpticalChannel_ModulatorBiasXq_MinTimePath {
	ps := &Component_OpticalChannel_ModulatorBiasXq_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/optical-channel/state/modulator-bias-xq/min-time"
func (n *Component_OpticalChannel_ModulatorBiasXqPathAny) MinTime() *Component_OpticalChannel_ModulatorBiasXq_MinTimePathAny {
	ps := &Component_OpticalChannel_ModulatorBiasXq_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannel_ModulatorBiasXqPath) State() ygnmi.SingletonQuery[*oc.Component_OpticalChannel_ModulatorBiasXq] {
	return ygnmi.NewSingletonQuery[*oc.Component_OpticalChannel_ModulatorBiasXq](
		"Component_OpticalChannel_ModulatorBiasXq",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannel_ModulatorBiasXqPathAny) State() ygnmi.WildcardQuery[*oc.Component_OpticalChannel_ModulatorBiasXq] {
	return ygnmi.NewWildcardQuery[*oc.Component_OpticalChannel_ModulatorBiasXq](
		"Component_OpticalChannel_ModulatorBiasXq",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasYPhase_AvgPath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-y-phase/avg YANG schema element.
type Component_OpticalChannel_ModulatorBiasYPhase_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulatorBiasYPhase_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-y-phase/avg YANG schema element.
type Component_OpticalChannel_ModulatorBiasYPhase_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-y-phase/avg"
func (n *Component_OpticalChannel_ModulatorBiasYPhase_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_ModulatorBiasYPhase",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasYPhase).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasYPhase) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-y-phase/avg"
func (n *Component_OpticalChannel_ModulatorBiasYPhase_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_ModulatorBiasYPhase",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasYPhase).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasYPhase) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasYPhase_InstantPath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-y-phase/instant YANG schema element.
type Component_OpticalChannel_ModulatorBiasYPhase_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulatorBiasYPhase_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-y-phase/instant YANG schema element.
type Component_OpticalChannel_ModulatorBiasYPhase_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-y-phase/instant"
func (n *Component_OpticalChannel_ModulatorBiasYPhase_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_ModulatorBiasYPhase",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasYPhase).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasYPhase) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-y-phase/instant"
func (n *Component_OpticalChannel_ModulatorBiasYPhase_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_ModulatorBiasYPhase",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasYPhase).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasYPhase) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasYPhase_IntervalPath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-y-phase/interval YANG schema element.
type Component_OpticalChannel_ModulatorBiasYPhase_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulatorBiasYPhase_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-y-phase/interval YANG schema element.
type Component_OpticalChannel_ModulatorBiasYPhase_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-y-phase/interval"
func (n *Component_OpticalChannel_ModulatorBiasYPhase_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_ModulatorBiasYPhase",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasYPhase).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasYPhase) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-y-phase/interval"
func (n *Component_OpticalChannel_ModulatorBiasYPhase_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_ModulatorBiasYPhase",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasYPhase).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasYPhase) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasYPhase_MaxPath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-y-phase/max YANG schema element.
type Component_OpticalChannel_ModulatorBiasYPhase_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulatorBiasYPhase_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-y-phase/max YANG schema element.
type Component_OpticalChannel_ModulatorBiasYPhase_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-y-phase/max"
func (n *Component_OpticalChannel_ModulatorBiasYPhase_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_ModulatorBiasYPhase",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasYPhase).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasYPhase) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-y-phase/max"
func (n *Component_OpticalChannel_ModulatorBiasYPhase_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_ModulatorBiasYPhase",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasYPhase).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasYPhase) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasYPhase_MaxTimePath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-y-phase/max-time YANG schema element.
type Component_OpticalChannel_ModulatorBiasYPhase_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulatorBiasYPhase_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-y-phase/max-time YANG schema element.
type Component_OpticalChannel_ModulatorBiasYPhase_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-y-phase/max-time"
func (n *Component_OpticalChannel_ModulatorBiasYPhase_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_ModulatorBiasYPhase",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasYPhase).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasYPhase) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-y-phase/max-time"
func (n *Component_OpticalChannel_ModulatorBiasYPhase_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_ModulatorBiasYPhase",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasYPhase).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasYPhase) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasYPhase_MinPath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-y-phase/min YANG schema element.
type Component_OpticalChannel_ModulatorBiasYPhase_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulatorBiasYPhase_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-y-phase/min YANG schema element.
type Component_OpticalChannel_ModulatorBiasYPhase_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-y-phase/min"
func (n *Component_OpticalChannel_ModulatorBiasYPhase_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_ModulatorBiasYPhase",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasYPhase).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasYPhase) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-y-phase/min"
func (n *Component_OpticalChannel_ModulatorBiasYPhase_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_ModulatorBiasYPhase",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasYPhase).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasYPhase) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasYPhase_MinTimePath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-y-phase/min-time YANG schema element.
type Component_OpticalChannel_ModulatorBiasYPhase_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulatorBiasYPhase_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-y-phase/min-time YANG schema element.
type Component_OpticalChannel_ModulatorBiasYPhase_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-y-phase/min-time"
func (n *Component_OpticalChannel_ModulatorBiasYPhase_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_ModulatorBiasYPhase",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasYPhase).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasYPhase) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-y-phase/min-time"
func (n *Component_OpticalChannel_ModulatorBiasYPhase_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_ModulatorBiasYPhase",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasYPhase).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasYPhase) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasYPhasePath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-y-phase YANG schema element.
type Component_OpticalChannel_ModulatorBiasYPhasePath struct {
	*ygnmi.NodePath
}

// Component_OpticalChannel_ModulatorBiasYPhasePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-y-phase YANG schema element.
type Component_OpticalChannel_ModulatorBiasYPhasePathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-y-phase/avg"
func (n *Component_OpticalChannel_ModulatorBiasYPhasePath) Avg() *Component_OpticalChannel_ModulatorBiasYPhase_AvgPath {
	ps := &Component_OpticalChannel_ModulatorBiasYPhase_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-y-phase/avg"
func (n *Component_OpticalChannel_ModulatorBiasYPhasePathAny) Avg() *Component_OpticalChannel_ModulatorBiasYPhase_AvgPathAny {
	ps := &Component_OpticalChannel_ModulatorBiasYPhase_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-y-phase/instant"
func (n *Component_OpticalChannel_ModulatorBiasYPhasePath) Instant() *Component_OpticalChannel_ModulatorBiasYPhase_InstantPath {
	ps := &Component_OpticalChannel_ModulatorBiasYPhase_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-y-phase/instant"
func (n *Component_OpticalChannel_ModulatorBiasYPhasePathAny) Instant() *Component_OpticalChannel_ModulatorBiasYPhase_InstantPathAny {
	ps := &Component_OpticalChannel_ModulatorBiasYPhase_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-y-phase/interval"
func (n *Component_OpticalChannel_ModulatorBiasYPhasePath) Interval() *Component_OpticalChannel_ModulatorBiasYPhase_IntervalPath {
	ps := &Component_OpticalChannel_ModulatorBiasYPhase_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-y-phase/interval"
func (n *Component_OpticalChannel_ModulatorBiasYPhasePathAny) Interval() *Component_OpticalChannel_ModulatorBiasYPhase_IntervalPathAny {
	ps := &Component_OpticalChannel_ModulatorBiasYPhase_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-y-phase/max"
func (n *Component_OpticalChannel_ModulatorBiasYPhasePath) Max() *Component_OpticalChannel_ModulatorBiasYPhase_MaxPath {
	ps := &Component_OpticalChannel_ModulatorBiasYPhase_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-y-phase/max"
func (n *Component_OpticalChannel_ModulatorBiasYPhasePathAny) Max() *Component_OpticalChannel_ModulatorBiasYPhase_MaxPathAny {
	ps := &Component_OpticalChannel_ModulatorBiasYPhase_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/optical-channel/state/modulator-bias-y-phase/max-time"
func (n *Component_OpticalChannel_ModulatorBiasYPhasePath) MaxTime() *Component_OpticalChannel_ModulatorBiasYPhase_MaxTimePath {
	ps := &Component_OpticalChannel_ModulatorBiasYPhase_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/optical-channel/state/modulator-bias-y-phase/max-time"
func (n *Component_OpticalChannel_ModulatorBiasYPhasePathAny) MaxTime() *Component_OpticalChannel_ModulatorBiasYPhase_MaxTimePathAny {
	ps := &Component_OpticalChannel_ModulatorBiasYPhase_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-y-phase/min"
func (n *Component_OpticalChannel_ModulatorBiasYPhasePath) Min() *Component_OpticalChannel_ModulatorBiasYPhase_MinPath {
	ps := &Component_OpticalChannel_ModulatorBiasYPhase_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-y-phase/min"
func (n *Component_OpticalChannel_ModulatorBiasYPhasePathAny) Min() *Component_OpticalChannel_ModulatorBiasYPhase_MinPathAny {
	ps := &Component_OpticalChannel_ModulatorBiasYPhase_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/optical-channel/state/modulator-bias-y-phase/min-time"
func (n *Component_OpticalChannel_ModulatorBiasYPhasePath) MinTime() *Component_OpticalChannel_ModulatorBiasYPhase_MinTimePath {
	ps := &Component_OpticalChannel_ModulatorBiasYPhase_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/optical-channel/state/modulator-bias-y-phase/min-time"
func (n *Component_OpticalChannel_ModulatorBiasYPhasePathAny) MinTime() *Component_OpticalChannel_ModulatorBiasYPhase_MinTimePathAny {
	ps := &Component_OpticalChannel_ModulatorBiasYPhase_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannel_ModulatorBiasYPhasePath) State() ygnmi.SingletonQuery[*oc.Component_OpticalChannel_ModulatorBiasYPhase] {
	return ygnmi.NewSingletonQuery[*oc.Component_OpticalChannel_ModulatorBiasYPhase](
		"Component_OpticalChannel_ModulatorBiasYPhase",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannel_ModulatorBiasYPhasePathAny) State() ygnmi.WildcardQuery[*oc.Component_OpticalChannel_ModulatorBiasYPhase] {
	return ygnmi.NewWildcardQuery[*oc.Component_OpticalChannel_ModulatorBiasYPhase](
		"Component_OpticalChannel_ModulatorBiasYPhase",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasYi_AvgPath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-yi/avg YANG schema element.
type Component_OpticalChannel_ModulatorBiasYi_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulatorBiasYi_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-yi/avg YANG schema element.
type Component_OpticalChannel_ModulatorBiasYi_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yi/avg"
func (n *Component_OpticalChannel_ModulatorBiasYi_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_ModulatorBiasYi",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasYi).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasYi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yi/avg"
func (n *Component_OpticalChannel_ModulatorBiasYi_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_ModulatorBiasYi",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasYi).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasYi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasYi_InstantPath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-yi/instant YANG schema element.
type Component_OpticalChannel_ModulatorBiasYi_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulatorBiasYi_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-yi/instant YANG schema element.
type Component_OpticalChannel_ModulatorBiasYi_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yi/instant"
func (n *Component_OpticalChannel_ModulatorBiasYi_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_ModulatorBiasYi",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasYi).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasYi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yi/instant"
func (n *Component_OpticalChannel_ModulatorBiasYi_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_ModulatorBiasYi",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasYi).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasYi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasYi_IntervalPath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-yi/interval YANG schema element.
type Component_OpticalChannel_ModulatorBiasYi_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulatorBiasYi_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-yi/interval YANG schema element.
type Component_OpticalChannel_ModulatorBiasYi_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yi/interval"
func (n *Component_OpticalChannel_ModulatorBiasYi_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_ModulatorBiasYi",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasYi).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasYi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yi/interval"
func (n *Component_OpticalChannel_ModulatorBiasYi_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_ModulatorBiasYi",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasYi).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasYi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasYi_MaxPath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-yi/max YANG schema element.
type Component_OpticalChannel_ModulatorBiasYi_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulatorBiasYi_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-yi/max YANG schema element.
type Component_OpticalChannel_ModulatorBiasYi_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yi/max"
func (n *Component_OpticalChannel_ModulatorBiasYi_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_ModulatorBiasYi",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasYi).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasYi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yi/max"
func (n *Component_OpticalChannel_ModulatorBiasYi_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_ModulatorBiasYi",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasYi).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasYi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasYi_MaxTimePath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-yi/max-time YANG schema element.
type Component_OpticalChannel_ModulatorBiasYi_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulatorBiasYi_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-yi/max-time YANG schema element.
type Component_OpticalChannel_ModulatorBiasYi_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yi/max-time"
func (n *Component_OpticalChannel_ModulatorBiasYi_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_ModulatorBiasYi",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasYi).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasYi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yi/max-time"
func (n *Component_OpticalChannel_ModulatorBiasYi_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_ModulatorBiasYi",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasYi).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasYi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasYi_MinPath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-yi/min YANG schema element.
type Component_OpticalChannel_ModulatorBiasYi_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulatorBiasYi_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-yi/min YANG schema element.
type Component_OpticalChannel_ModulatorBiasYi_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yi/min"
func (n *Component_OpticalChannel_ModulatorBiasYi_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_ModulatorBiasYi",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasYi).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasYi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yi/min"
func (n *Component_OpticalChannel_ModulatorBiasYi_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_ModulatorBiasYi",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasYi).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasYi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasYi_MinTimePath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-yi/min-time YANG schema element.
type Component_OpticalChannel_ModulatorBiasYi_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulatorBiasYi_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-yi/min-time YANG schema element.
type Component_OpticalChannel_ModulatorBiasYi_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yi/min-time"
func (n *Component_OpticalChannel_ModulatorBiasYi_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_ModulatorBiasYi",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasYi).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasYi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yi/min-time"
func (n *Component_OpticalChannel_ModulatorBiasYi_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_ModulatorBiasYi",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasYi).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasYi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasYiPath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-yi YANG schema element.
type Component_OpticalChannel_ModulatorBiasYiPath struct {
	*ygnmi.NodePath
}

// Component_OpticalChannel_ModulatorBiasYiPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-yi YANG schema element.
type Component_OpticalChannel_ModulatorBiasYiPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yi/avg"
func (n *Component_OpticalChannel_ModulatorBiasYiPath) Avg() *Component_OpticalChannel_ModulatorBiasYi_AvgPath {
	ps := &Component_OpticalChannel_ModulatorBiasYi_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yi/avg"
func (n *Component_OpticalChannel_ModulatorBiasYiPathAny) Avg() *Component_OpticalChannel_ModulatorBiasYi_AvgPathAny {
	ps := &Component_OpticalChannel_ModulatorBiasYi_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yi/instant"
func (n *Component_OpticalChannel_ModulatorBiasYiPath) Instant() *Component_OpticalChannel_ModulatorBiasYi_InstantPath {
	ps := &Component_OpticalChannel_ModulatorBiasYi_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yi/instant"
func (n *Component_OpticalChannel_ModulatorBiasYiPathAny) Instant() *Component_OpticalChannel_ModulatorBiasYi_InstantPathAny {
	ps := &Component_OpticalChannel_ModulatorBiasYi_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yi/interval"
func (n *Component_OpticalChannel_ModulatorBiasYiPath) Interval() *Component_OpticalChannel_ModulatorBiasYi_IntervalPath {
	ps := &Component_OpticalChannel_ModulatorBiasYi_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yi/interval"
func (n *Component_OpticalChannel_ModulatorBiasYiPathAny) Interval() *Component_OpticalChannel_ModulatorBiasYi_IntervalPathAny {
	ps := &Component_OpticalChannel_ModulatorBiasYi_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yi/max"
func (n *Component_OpticalChannel_ModulatorBiasYiPath) Max() *Component_OpticalChannel_ModulatorBiasYi_MaxPath {
	ps := &Component_OpticalChannel_ModulatorBiasYi_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yi/max"
func (n *Component_OpticalChannel_ModulatorBiasYiPathAny) Max() *Component_OpticalChannel_ModulatorBiasYi_MaxPathAny {
	ps := &Component_OpticalChannel_ModulatorBiasYi_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/optical-channel/state/modulator-bias-yi/max-time"
func (n *Component_OpticalChannel_ModulatorBiasYiPath) MaxTime() *Component_OpticalChannel_ModulatorBiasYi_MaxTimePath {
	ps := &Component_OpticalChannel_ModulatorBiasYi_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/optical-channel/state/modulator-bias-yi/max-time"
func (n *Component_OpticalChannel_ModulatorBiasYiPathAny) MaxTime() *Component_OpticalChannel_ModulatorBiasYi_MaxTimePathAny {
	ps := &Component_OpticalChannel_ModulatorBiasYi_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yi/min"
func (n *Component_OpticalChannel_ModulatorBiasYiPath) Min() *Component_OpticalChannel_ModulatorBiasYi_MinPath {
	ps := &Component_OpticalChannel_ModulatorBiasYi_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yi/min"
func (n *Component_OpticalChannel_ModulatorBiasYiPathAny) Min() *Component_OpticalChannel_ModulatorBiasYi_MinPathAny {
	ps := &Component_OpticalChannel_ModulatorBiasYi_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/optical-channel/state/modulator-bias-yi/min-time"
func (n *Component_OpticalChannel_ModulatorBiasYiPath) MinTime() *Component_OpticalChannel_ModulatorBiasYi_MinTimePath {
	ps := &Component_OpticalChannel_ModulatorBiasYi_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/optical-channel/state/modulator-bias-yi/min-time"
func (n *Component_OpticalChannel_ModulatorBiasYiPathAny) MinTime() *Component_OpticalChannel_ModulatorBiasYi_MinTimePathAny {
	ps := &Component_OpticalChannel_ModulatorBiasYi_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannel_ModulatorBiasYiPath) State() ygnmi.SingletonQuery[*oc.Component_OpticalChannel_ModulatorBiasYi] {
	return ygnmi.NewSingletonQuery[*oc.Component_OpticalChannel_ModulatorBiasYi](
		"Component_OpticalChannel_ModulatorBiasYi",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannel_ModulatorBiasYiPathAny) State() ygnmi.WildcardQuery[*oc.Component_OpticalChannel_ModulatorBiasYi] {
	return ygnmi.NewWildcardQuery[*oc.Component_OpticalChannel_ModulatorBiasYi](
		"Component_OpticalChannel_ModulatorBiasYi",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasYq_AvgPath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-yq/avg YANG schema element.
type Component_OpticalChannel_ModulatorBiasYq_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulatorBiasYq_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-yq/avg YANG schema element.
type Component_OpticalChannel_ModulatorBiasYq_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yq/avg"
func (n *Component_OpticalChannel_ModulatorBiasYq_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_ModulatorBiasYq",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasYq).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasYq) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yq/avg"
func (n *Component_OpticalChannel_ModulatorBiasYq_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_ModulatorBiasYq",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasYq).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasYq) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasYq_InstantPath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-yq/instant YANG schema element.
type Component_OpticalChannel_ModulatorBiasYq_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulatorBiasYq_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-yq/instant YANG schema element.
type Component_OpticalChannel_ModulatorBiasYq_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yq/instant"
func (n *Component_OpticalChannel_ModulatorBiasYq_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_ModulatorBiasYq",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasYq).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasYq) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yq/instant"
func (n *Component_OpticalChannel_ModulatorBiasYq_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_ModulatorBiasYq",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasYq).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasYq) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasYq_IntervalPath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-yq/interval YANG schema element.
type Component_OpticalChannel_ModulatorBiasYq_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulatorBiasYq_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-yq/interval YANG schema element.
type Component_OpticalChannel_ModulatorBiasYq_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yq/interval"
func (n *Component_OpticalChannel_ModulatorBiasYq_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_ModulatorBiasYq",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasYq).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasYq) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yq/interval"
func (n *Component_OpticalChannel_ModulatorBiasYq_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_ModulatorBiasYq",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasYq).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasYq) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasYq_MaxPath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-yq/max YANG schema element.
type Component_OpticalChannel_ModulatorBiasYq_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulatorBiasYq_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-yq/max YANG schema element.
type Component_OpticalChannel_ModulatorBiasYq_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yq/max"
func (n *Component_OpticalChannel_ModulatorBiasYq_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_ModulatorBiasYq",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasYq).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasYq) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yq/max"
func (n *Component_OpticalChannel_ModulatorBiasYq_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_ModulatorBiasYq",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasYq).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasYq) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasYq_MaxTimePath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-yq/max-time YANG schema element.
type Component_OpticalChannel_ModulatorBiasYq_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulatorBiasYq_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-yq/max-time YANG schema element.
type Component_OpticalChannel_ModulatorBiasYq_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yq/max-time"
func (n *Component_OpticalChannel_ModulatorBiasYq_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_ModulatorBiasYq",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasYq).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasYq) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yq/max-time"
func (n *Component_OpticalChannel_ModulatorBiasYq_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_ModulatorBiasYq",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasYq).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasYq) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasYq_MinPath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-yq/min YANG schema element.
type Component_OpticalChannel_ModulatorBiasYq_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulatorBiasYq_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-yq/min YANG schema element.
type Component_OpticalChannel_ModulatorBiasYq_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yq/min"
func (n *Component_OpticalChannel_ModulatorBiasYq_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_ModulatorBiasYq",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasYq).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasYq) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yq/min"
func (n *Component_OpticalChannel_ModulatorBiasYq_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_ModulatorBiasYq",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasYq).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasYq) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasYq_MinTimePath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-yq/min-time YANG schema element.
type Component_OpticalChannel_ModulatorBiasYq_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_ModulatorBiasYq_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-yq/min-time YANG schema element.
type Component_OpticalChannel_ModulatorBiasYq_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yq/min-time"
func (n *Component_OpticalChannel_ModulatorBiasYq_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_ModulatorBiasYq",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasYq).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasYq) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yq/min-time"
func (n *Component_OpticalChannel_ModulatorBiasYq_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_ModulatorBiasYq",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_ModulatorBiasYq).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_ModulatorBiasYq) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_ModulatorBiasYqPath represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-yq YANG schema element.
type Component_OpticalChannel_ModulatorBiasYqPath struct {
	*ygnmi.NodePath
}

// Component_OpticalChannel_ModulatorBiasYqPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/modulator-bias-yq YANG schema element.
type Component_OpticalChannel_ModulatorBiasYqPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yq/avg"
func (n *Component_OpticalChannel_ModulatorBiasYqPath) Avg() *Component_OpticalChannel_ModulatorBiasYq_AvgPath {
	ps := &Component_OpticalChannel_ModulatorBiasYq_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yq/avg"
func (n *Component_OpticalChannel_ModulatorBiasYqPathAny) Avg() *Component_OpticalChannel_ModulatorBiasYq_AvgPathAny {
	ps := &Component_OpticalChannel_ModulatorBiasYq_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yq/instant"
func (n *Component_OpticalChannel_ModulatorBiasYqPath) Instant() *Component_OpticalChannel_ModulatorBiasYq_InstantPath {
	ps := &Component_OpticalChannel_ModulatorBiasYq_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yq/instant"
func (n *Component_OpticalChannel_ModulatorBiasYqPathAny) Instant() *Component_OpticalChannel_ModulatorBiasYq_InstantPathAny {
	ps := &Component_OpticalChannel_ModulatorBiasYq_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yq/interval"
func (n *Component_OpticalChannel_ModulatorBiasYqPath) Interval() *Component_OpticalChannel_ModulatorBiasYq_IntervalPath {
	ps := &Component_OpticalChannel_ModulatorBiasYq_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yq/interval"
func (n *Component_OpticalChannel_ModulatorBiasYqPathAny) Interval() *Component_OpticalChannel_ModulatorBiasYq_IntervalPathAny {
	ps := &Component_OpticalChannel_ModulatorBiasYq_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yq/max"
func (n *Component_OpticalChannel_ModulatorBiasYqPath) Max() *Component_OpticalChannel_ModulatorBiasYq_MaxPath {
	ps := &Component_OpticalChannel_ModulatorBiasYq_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yq/max"
func (n *Component_OpticalChannel_ModulatorBiasYqPathAny) Max() *Component_OpticalChannel_ModulatorBiasYq_MaxPathAny {
	ps := &Component_OpticalChannel_ModulatorBiasYq_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/optical-channel/state/modulator-bias-yq/max-time"
func (n *Component_OpticalChannel_ModulatorBiasYqPath) MaxTime() *Component_OpticalChannel_ModulatorBiasYq_MaxTimePath {
	ps := &Component_OpticalChannel_ModulatorBiasYq_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/optical-channel/state/modulator-bias-yq/max-time"
func (n *Component_OpticalChannel_ModulatorBiasYqPathAny) MaxTime() *Component_OpticalChannel_ModulatorBiasYq_MaxTimePathAny {
	ps := &Component_OpticalChannel_ModulatorBiasYq_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yq/min"
func (n *Component_OpticalChannel_ModulatorBiasYqPath) Min() *Component_OpticalChannel_ModulatorBiasYq_MinPath {
	ps := &Component_OpticalChannel_ModulatorBiasYq_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/modulator-bias-yq/min"
func (n *Component_OpticalChannel_ModulatorBiasYqPathAny) Min() *Component_OpticalChannel_ModulatorBiasYq_MinPathAny {
	ps := &Component_OpticalChannel_ModulatorBiasYq_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/optical-channel/state/modulator-bias-yq/min-time"
func (n *Component_OpticalChannel_ModulatorBiasYqPath) MinTime() *Component_OpticalChannel_ModulatorBiasYq_MinTimePath {
	ps := &Component_OpticalChannel_ModulatorBiasYq_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/optical-channel/state/modulator-bias-yq/min-time"
func (n *Component_OpticalChannel_ModulatorBiasYqPathAny) MinTime() *Component_OpticalChannel_ModulatorBiasYq_MinTimePathAny {
	ps := &Component_OpticalChannel_ModulatorBiasYq_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannel_ModulatorBiasYqPath) State() ygnmi.SingletonQuery[*oc.Component_OpticalChannel_ModulatorBiasYq] {
	return ygnmi.NewSingletonQuery[*oc.Component_OpticalChannel_ModulatorBiasYq](
		"Component_OpticalChannel_ModulatorBiasYq",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannel_ModulatorBiasYqPathAny) State() ygnmi.WildcardQuery[*oc.Component_OpticalChannel_ModulatorBiasYq] {
	return ygnmi.NewWildcardQuery[*oc.Component_OpticalChannel_ModulatorBiasYq](
		"Component_OpticalChannel_ModulatorBiasYq",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_Osnr_AvgPath represents the /openconfig-platform/components/component/optical-channel/state/osnr/avg YANG schema element.
type Component_OpticalChannel_Osnr_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_Osnr_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/osnr/avg YANG schema element.
type Component_OpticalChannel_Osnr_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/osnr/avg"
func (n *Component_OpticalChannel_Osnr_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_Osnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_Osnr).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_Osnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/osnr/avg"
func (n *Component_OpticalChannel_Osnr_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_Osnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_Osnr).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_Osnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_Osnr_InstantPath represents the /openconfig-platform/components/component/optical-channel/state/osnr/instant YANG schema element.
type Component_OpticalChannel_Osnr_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_Osnr_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/osnr/instant YANG schema element.
type Component_OpticalChannel_Osnr_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/osnr/instant"
func (n *Component_OpticalChannel_Osnr_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_Osnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_Osnr).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_Osnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/osnr/instant"
func (n *Component_OpticalChannel_Osnr_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_Osnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_Osnr).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_Osnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_Osnr_IntervalPath represents the /openconfig-platform/components/component/optical-channel/state/osnr/interval YANG schema element.
type Component_OpticalChannel_Osnr_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_Osnr_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/osnr/interval YANG schema element.
type Component_OpticalChannel_Osnr_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/osnr/interval"
func (n *Component_OpticalChannel_Osnr_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_Osnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_Osnr).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_Osnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/osnr/interval"
func (n *Component_OpticalChannel_Osnr_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_Osnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_Osnr).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_Osnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_Osnr_MaxPath represents the /openconfig-platform/components/component/optical-channel/state/osnr/max YANG schema element.
type Component_OpticalChannel_Osnr_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_Osnr_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/osnr/max YANG schema element.
type Component_OpticalChannel_Osnr_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/osnr/max"
func (n *Component_OpticalChannel_Osnr_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_Osnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_Osnr).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_Osnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/osnr/max"
func (n *Component_OpticalChannel_Osnr_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_Osnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_Osnr).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_Osnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_Osnr_MaxTimePath represents the /openconfig-platform/components/component/optical-channel/state/osnr/max-time YANG schema element.
type Component_OpticalChannel_Osnr_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_Osnr_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/osnr/max-time YANG schema element.
type Component_OpticalChannel_Osnr_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/optical-channel/state/osnr/max-time"
func (n *Component_OpticalChannel_Osnr_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_Osnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_Osnr).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_Osnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/optical-channel/state/osnr/max-time"
func (n *Component_OpticalChannel_Osnr_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_Osnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_Osnr).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_Osnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_Osnr_MinPath represents the /openconfig-platform/components/component/optical-channel/state/osnr/min YANG schema element.
type Component_OpticalChannel_Osnr_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_Osnr_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/osnr/min YANG schema element.
type Component_OpticalChannel_Osnr_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/osnr/min"
func (n *Component_OpticalChannel_Osnr_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_Osnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_Osnr).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_Osnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/osnr/min"
func (n *Component_OpticalChannel_Osnr_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_Osnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_Osnr).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_Osnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_Osnr_MinTimePath represents the /openconfig-platform/components/component/optical-channel/state/osnr/min-time YANG schema element.
type Component_OpticalChannel_Osnr_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_Osnr_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/osnr/min-time YANG schema element.
type Component_OpticalChannel_Osnr_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/optical-channel/state/osnr/min-time"
func (n *Component_OpticalChannel_Osnr_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_Osnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_Osnr).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_Osnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/optical-channel/state/osnr/min-time"
func (n *Component_OpticalChannel_Osnr_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_Osnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_Osnr).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_Osnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_OsnrPath represents the /openconfig-platform/components/component/optical-channel/state/osnr YANG schema element.
type Component_OpticalChannel_OsnrPath struct {
	*ygnmi.NodePath
}

// Component_OpticalChannel_OsnrPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/osnr YANG schema element.
type Component_OpticalChannel_OsnrPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/osnr/avg"
func (n *Component_OpticalChannel_OsnrPath) Avg() *Component_OpticalChannel_Osnr_AvgPath {
	ps := &Component_OpticalChannel_Osnr_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/osnr/avg"
func (n *Component_OpticalChannel_OsnrPathAny) Avg() *Component_OpticalChannel_Osnr_AvgPathAny {
	ps := &Component_OpticalChannel_Osnr_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/osnr/instant"
func (n *Component_OpticalChannel_OsnrPath) Instant() *Component_OpticalChannel_Osnr_InstantPath {
	ps := &Component_OpticalChannel_Osnr_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/osnr/instant"
func (n *Component_OpticalChannel_OsnrPathAny) Instant() *Component_OpticalChannel_Osnr_InstantPathAny {
	ps := &Component_OpticalChannel_Osnr_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/osnr/interval"
func (n *Component_OpticalChannel_OsnrPath) Interval() *Component_OpticalChannel_Osnr_IntervalPath {
	ps := &Component_OpticalChannel_Osnr_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/osnr/interval"
func (n *Component_OpticalChannel_OsnrPathAny) Interval() *Component_OpticalChannel_Osnr_IntervalPathAny {
	ps := &Component_OpticalChannel_Osnr_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/osnr/max"
func (n *Component_OpticalChannel_OsnrPath) Max() *Component_OpticalChannel_Osnr_MaxPath {
	ps := &Component_OpticalChannel_Osnr_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/osnr/max"
func (n *Component_OpticalChannel_OsnrPathAny) Max() *Component_OpticalChannel_Osnr_MaxPathAny {
	ps := &Component_OpticalChannel_Osnr_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/optical-channel/state/osnr/max-time"
func (n *Component_OpticalChannel_OsnrPath) MaxTime() *Component_OpticalChannel_Osnr_MaxTimePath {
	ps := &Component_OpticalChannel_Osnr_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/optical-channel/state/osnr/max-time"
func (n *Component_OpticalChannel_OsnrPathAny) MaxTime() *Component_OpticalChannel_Osnr_MaxTimePathAny {
	ps := &Component_OpticalChannel_Osnr_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/osnr/min"
func (n *Component_OpticalChannel_OsnrPath) Min() *Component_OpticalChannel_Osnr_MinPath {
	ps := &Component_OpticalChannel_Osnr_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/osnr/min"
func (n *Component_OpticalChannel_OsnrPathAny) Min() *Component_OpticalChannel_Osnr_MinPathAny {
	ps := &Component_OpticalChannel_Osnr_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/optical-channel/state/osnr/min-time"
func (n *Component_OpticalChannel_OsnrPath) MinTime() *Component_OpticalChannel_Osnr_MinTimePath {
	ps := &Component_OpticalChannel_Osnr_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/optical-channel/state/osnr/min-time"
func (n *Component_OpticalChannel_OsnrPathAny) MinTime() *Component_OpticalChannel_Osnr_MinTimePathAny {
	ps := &Component_OpticalChannel_Osnr_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannel_OsnrPath) State() ygnmi.SingletonQuery[*oc.Component_OpticalChannel_Osnr] {
	return ygnmi.NewSingletonQuery[*oc.Component_OpticalChannel_Osnr](
		"Component_OpticalChannel_Osnr",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannel_OsnrPathAny) State() ygnmi.WildcardQuery[*oc.Component_OpticalChannel_Osnr] {
	return ygnmi.NewWildcardQuery[*oc.Component_OpticalChannel_Osnr](
		"Component_OpticalChannel_Osnr",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_OutputPower_AvgPath represents the /openconfig-platform/components/component/optical-channel/state/output-power/avg YANG schema element.
type Component_OpticalChannel_OutputPower_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_OutputPower_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/output-power/avg YANG schema element.
type Component_OpticalChannel_OutputPower_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/output-power/avg"
func (n *Component_OpticalChannel_OutputPower_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_OutputPower).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/output-power/avg"
func (n *Component_OpticalChannel_OutputPower_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_OutputPower).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_OutputPower_InstantPath represents the /openconfig-platform/components/component/optical-channel/state/output-power/instant YANG schema element.
type Component_OpticalChannel_OutputPower_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_OutputPower_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/output-power/instant YANG schema element.
type Component_OpticalChannel_OutputPower_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/output-power/instant"
func (n *Component_OpticalChannel_OutputPower_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_OutputPower).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/output-power/instant"
func (n *Component_OpticalChannel_OutputPower_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_OutputPower).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_OutputPower_IntervalPath represents the /openconfig-platform/components/component/optical-channel/state/output-power/interval YANG schema element.
type Component_OpticalChannel_OutputPower_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_OutputPower_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/output-power/interval YANG schema element.
type Component_OpticalChannel_OutputPower_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/output-power/interval"
func (n *Component_OpticalChannel_OutputPower_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_OutputPower).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/output-power/interval"
func (n *Component_OpticalChannel_OutputPower_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_OutputPower).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_OutputPower_MaxPath represents the /openconfig-platform/components/component/optical-channel/state/output-power/max YANG schema element.
type Component_OpticalChannel_OutputPower_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_OutputPower_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/output-power/max YANG schema element.
type Component_OpticalChannel_OutputPower_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/output-power/max"
func (n *Component_OpticalChannel_OutputPower_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_OutputPower).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/output-power/max"
func (n *Component_OpticalChannel_OutputPower_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_OutputPower).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_OutputPower_MaxTimePath represents the /openconfig-platform/components/component/optical-channel/state/output-power/max-time YANG schema element.
type Component_OpticalChannel_OutputPower_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_OutputPower_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/output-power/max-time YANG schema element.
type Component_OpticalChannel_OutputPower_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/optical-channel/state/output-power/max-time"
func (n *Component_OpticalChannel_OutputPower_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_OutputPower).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/optical-channel/state/output-power/max-time"
func (n *Component_OpticalChannel_OutputPower_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_OutputPower).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_OutputPower_MinPath represents the /openconfig-platform/components/component/optical-channel/state/output-power/min YANG schema element.
type Component_OpticalChannel_OutputPower_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_OutputPower_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/output-power/min YANG schema element.
type Component_OpticalChannel_OutputPower_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/output-power/min"
func (n *Component_OpticalChannel_OutputPower_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_OutputPower).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/output-power/min"
func (n *Component_OpticalChannel_OutputPower_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_OutputPower).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_OutputPower_MinTimePath represents the /openconfig-platform/components/component/optical-channel/state/output-power/min-time YANG schema element.
type Component_OpticalChannel_OutputPower_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_OutputPower_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/output-power/min-time YANG schema element.
type Component_OpticalChannel_OutputPower_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/optical-channel/state/output-power/min-time"
func (n *Component_OpticalChannel_OutputPower_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_OutputPower).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/optical-channel/state/output-power/min-time"
func (n *Component_OpticalChannel_OutputPower_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_OutputPower).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_OutputPowerPath represents the /openconfig-platform/components/component/optical-channel/state/output-power YANG schema element.
type Component_OpticalChannel_OutputPowerPath struct {
	*ygnmi.NodePath
}

// Component_OpticalChannel_OutputPowerPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/output-power YANG schema element.
type Component_OpticalChannel_OutputPowerPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/output-power/avg"
func (n *Component_OpticalChannel_OutputPowerPath) Avg() *Component_OpticalChannel_OutputPower_AvgPath {
	ps := &Component_OpticalChannel_OutputPower_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/output-power/avg"
func (n *Component_OpticalChannel_OutputPowerPathAny) Avg() *Component_OpticalChannel_OutputPower_AvgPathAny {
	ps := &Component_OpticalChannel_OutputPower_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/output-power/instant"
func (n *Component_OpticalChannel_OutputPowerPath) Instant() *Component_OpticalChannel_OutputPower_InstantPath {
	ps := &Component_OpticalChannel_OutputPower_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/output-power/instant"
func (n *Component_OpticalChannel_OutputPowerPathAny) Instant() *Component_OpticalChannel_OutputPower_InstantPathAny {
	ps := &Component_OpticalChannel_OutputPower_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/output-power/interval"
func (n *Component_OpticalChannel_OutputPowerPath) Interval() *Component_OpticalChannel_OutputPower_IntervalPath {
	ps := &Component_OpticalChannel_OutputPower_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/output-power/interval"
func (n *Component_OpticalChannel_OutputPowerPathAny) Interval() *Component_OpticalChannel_OutputPower_IntervalPathAny {
	ps := &Component_OpticalChannel_OutputPower_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/output-power/max"
func (n *Component_OpticalChannel_OutputPowerPath) Max() *Component_OpticalChannel_OutputPower_MaxPath {
	ps := &Component_OpticalChannel_OutputPower_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/output-power/max"
func (n *Component_OpticalChannel_OutputPowerPathAny) Max() *Component_OpticalChannel_OutputPower_MaxPathAny {
	ps := &Component_OpticalChannel_OutputPower_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/optical-channel/state/output-power/max-time"
func (n *Component_OpticalChannel_OutputPowerPath) MaxTime() *Component_OpticalChannel_OutputPower_MaxTimePath {
	ps := &Component_OpticalChannel_OutputPower_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/optical-channel/state/output-power/max-time"
func (n *Component_OpticalChannel_OutputPowerPathAny) MaxTime() *Component_OpticalChannel_OutputPower_MaxTimePathAny {
	ps := &Component_OpticalChannel_OutputPower_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/output-power/min"
func (n *Component_OpticalChannel_OutputPowerPath) Min() *Component_OpticalChannel_OutputPower_MinPath {
	ps := &Component_OpticalChannel_OutputPower_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/output-power/min"
func (n *Component_OpticalChannel_OutputPowerPathAny) Min() *Component_OpticalChannel_OutputPower_MinPathAny {
	ps := &Component_OpticalChannel_OutputPower_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/optical-channel/state/output-power/min-time"
func (n *Component_OpticalChannel_OutputPowerPath) MinTime() *Component_OpticalChannel_OutputPower_MinTimePath {
	ps := &Component_OpticalChannel_OutputPower_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/optical-channel/state/output-power/min-time"
func (n *Component_OpticalChannel_OutputPowerPathAny) MinTime() *Component_OpticalChannel_OutputPower_MinTimePathAny {
	ps := &Component_OpticalChannel_OutputPower_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannel_OutputPowerPath) State() ygnmi.SingletonQuery[*oc.Component_OpticalChannel_OutputPower] {
	return ygnmi.NewSingletonQuery[*oc.Component_OpticalChannel_OutputPower](
		"Component_OpticalChannel_OutputPower",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannel_OutputPowerPathAny) State() ygnmi.WildcardQuery[*oc.Component_OpticalChannel_OutputPower] {
	return ygnmi.NewWildcardQuery[*oc.Component_OpticalChannel_OutputPower](
		"Component_OpticalChannel_OutputPower",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_PolarizationDependentLoss_AvgPath represents the /openconfig-platform/components/component/optical-channel/state/polarization-dependent-loss/avg YANG schema element.
type Component_OpticalChannel_PolarizationDependentLoss_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_PolarizationDependentLoss_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/polarization-dependent-loss/avg YANG schema element.
type Component_OpticalChannel_PolarizationDependentLoss_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/polarization-dependent-loss/avg"
func (n *Component_OpticalChannel_PolarizationDependentLoss_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_PolarizationDependentLoss",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PolarizationDependentLoss).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PolarizationDependentLoss) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/polarization-dependent-loss/avg"
func (n *Component_OpticalChannel_PolarizationDependentLoss_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_PolarizationDependentLoss",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PolarizationDependentLoss).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PolarizationDependentLoss) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_PolarizationDependentLoss_InstantPath represents the /openconfig-platform/components/component/optical-channel/state/polarization-dependent-loss/instant YANG schema element.
type Component_OpticalChannel_PolarizationDependentLoss_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_PolarizationDependentLoss_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/polarization-dependent-loss/instant YANG schema element.
type Component_OpticalChannel_PolarizationDependentLoss_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/polarization-dependent-loss/instant"
func (n *Component_OpticalChannel_PolarizationDependentLoss_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_PolarizationDependentLoss",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PolarizationDependentLoss).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PolarizationDependentLoss) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/polarization-dependent-loss/instant"
func (n *Component_OpticalChannel_PolarizationDependentLoss_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_PolarizationDependentLoss",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PolarizationDependentLoss).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PolarizationDependentLoss) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_PolarizationDependentLoss_IntervalPath represents the /openconfig-platform/components/component/optical-channel/state/polarization-dependent-loss/interval YANG schema element.
type Component_OpticalChannel_PolarizationDependentLoss_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_PolarizationDependentLoss_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/polarization-dependent-loss/interval YANG schema element.
type Component_OpticalChannel_PolarizationDependentLoss_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/polarization-dependent-loss/interval"
func (n *Component_OpticalChannel_PolarizationDependentLoss_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_PolarizationDependentLoss",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PolarizationDependentLoss).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PolarizationDependentLoss) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/polarization-dependent-loss/interval"
func (n *Component_OpticalChannel_PolarizationDependentLoss_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_PolarizationDependentLoss",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PolarizationDependentLoss).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PolarizationDependentLoss) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_PolarizationDependentLoss_MaxPath represents the /openconfig-platform/components/component/optical-channel/state/polarization-dependent-loss/max YANG schema element.
type Component_OpticalChannel_PolarizationDependentLoss_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_PolarizationDependentLoss_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/polarization-dependent-loss/max YANG schema element.
type Component_OpticalChannel_PolarizationDependentLoss_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/polarization-dependent-loss/max"
func (n *Component_OpticalChannel_PolarizationDependentLoss_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_PolarizationDependentLoss",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PolarizationDependentLoss).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PolarizationDependentLoss) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/polarization-dependent-loss/max"
func (n *Component_OpticalChannel_PolarizationDependentLoss_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_PolarizationDependentLoss",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PolarizationDependentLoss).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PolarizationDependentLoss) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_PolarizationDependentLoss_MaxTimePath represents the /openconfig-platform/components/component/optical-channel/state/polarization-dependent-loss/max-time YANG schema element.
type Component_OpticalChannel_PolarizationDependentLoss_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_PolarizationDependentLoss_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/polarization-dependent-loss/max-time YANG schema element.
type Component_OpticalChannel_PolarizationDependentLoss_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/optical-channel/state/polarization-dependent-loss/max-time"
func (n *Component_OpticalChannel_PolarizationDependentLoss_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_PolarizationDependentLoss",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PolarizationDependentLoss).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PolarizationDependentLoss) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/optical-channel/state/polarization-dependent-loss/max-time"
func (n *Component_OpticalChannel_PolarizationDependentLoss_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_PolarizationDependentLoss",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PolarizationDependentLoss).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PolarizationDependentLoss) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_PolarizationDependentLoss_MinPath represents the /openconfig-platform/components/component/optical-channel/state/polarization-dependent-loss/min YANG schema element.
type Component_OpticalChannel_PolarizationDependentLoss_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_PolarizationDependentLoss_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/polarization-dependent-loss/min YANG schema element.
type Component_OpticalChannel_PolarizationDependentLoss_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/polarization-dependent-loss/min"
func (n *Component_OpticalChannel_PolarizationDependentLoss_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_PolarizationDependentLoss",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PolarizationDependentLoss).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PolarizationDependentLoss) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/polarization-dependent-loss/min"
func (n *Component_OpticalChannel_PolarizationDependentLoss_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_PolarizationDependentLoss",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PolarizationDependentLoss).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PolarizationDependentLoss) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_PolarizationDependentLoss_MinTimePath represents the /openconfig-platform/components/component/optical-channel/state/polarization-dependent-loss/min-time YANG schema element.
type Component_OpticalChannel_PolarizationDependentLoss_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_PolarizationDependentLoss_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/polarization-dependent-loss/min-time YANG schema element.
type Component_OpticalChannel_PolarizationDependentLoss_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/optical-channel/state/polarization-dependent-loss/min-time"
func (n *Component_OpticalChannel_PolarizationDependentLoss_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_PolarizationDependentLoss",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PolarizationDependentLoss).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PolarizationDependentLoss) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/optical-channel/state/polarization-dependent-loss/min-time"
func (n *Component_OpticalChannel_PolarizationDependentLoss_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_PolarizationDependentLoss",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PolarizationDependentLoss).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PolarizationDependentLoss) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_PolarizationDependentLossPath represents the /openconfig-platform/components/component/optical-channel/state/polarization-dependent-loss YANG schema element.
type Component_OpticalChannel_PolarizationDependentLossPath struct {
	*ygnmi.NodePath
}

// Component_OpticalChannel_PolarizationDependentLossPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/polarization-dependent-loss YANG schema element.
type Component_OpticalChannel_PolarizationDependentLossPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/polarization-dependent-loss/avg"
func (n *Component_OpticalChannel_PolarizationDependentLossPath) Avg() *Component_OpticalChannel_PolarizationDependentLoss_AvgPath {
	ps := &Component_OpticalChannel_PolarizationDependentLoss_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/polarization-dependent-loss/avg"
func (n *Component_OpticalChannel_PolarizationDependentLossPathAny) Avg() *Component_OpticalChannel_PolarizationDependentLoss_AvgPathAny {
	ps := &Component_OpticalChannel_PolarizationDependentLoss_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/polarization-dependent-loss/instant"
func (n *Component_OpticalChannel_PolarizationDependentLossPath) Instant() *Component_OpticalChannel_PolarizationDependentLoss_InstantPath {
	ps := &Component_OpticalChannel_PolarizationDependentLoss_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/polarization-dependent-loss/instant"
func (n *Component_OpticalChannel_PolarizationDependentLossPathAny) Instant() *Component_OpticalChannel_PolarizationDependentLoss_InstantPathAny {
	ps := &Component_OpticalChannel_PolarizationDependentLoss_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/polarization-dependent-loss/interval"
func (n *Component_OpticalChannel_PolarizationDependentLossPath) Interval() *Component_OpticalChannel_PolarizationDependentLoss_IntervalPath {
	ps := &Component_OpticalChannel_PolarizationDependentLoss_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/polarization-dependent-loss/interval"
func (n *Component_OpticalChannel_PolarizationDependentLossPathAny) Interval() *Component_OpticalChannel_PolarizationDependentLoss_IntervalPathAny {
	ps := &Component_OpticalChannel_PolarizationDependentLoss_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/polarization-dependent-loss/max"
func (n *Component_OpticalChannel_PolarizationDependentLossPath) Max() *Component_OpticalChannel_PolarizationDependentLoss_MaxPath {
	ps := &Component_OpticalChannel_PolarizationDependentLoss_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/polarization-dependent-loss/max"
func (n *Component_OpticalChannel_PolarizationDependentLossPathAny) Max() *Component_OpticalChannel_PolarizationDependentLoss_MaxPathAny {
	ps := &Component_OpticalChannel_PolarizationDependentLoss_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/optical-channel/state/polarization-dependent-loss/max-time"
func (n *Component_OpticalChannel_PolarizationDependentLossPath) MaxTime() *Component_OpticalChannel_PolarizationDependentLoss_MaxTimePath {
	ps := &Component_OpticalChannel_PolarizationDependentLoss_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/optical-channel/state/polarization-dependent-loss/max-time"
func (n *Component_OpticalChannel_PolarizationDependentLossPathAny) MaxTime() *Component_OpticalChannel_PolarizationDependentLoss_MaxTimePathAny {
	ps := &Component_OpticalChannel_PolarizationDependentLoss_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/polarization-dependent-loss/min"
func (n *Component_OpticalChannel_PolarizationDependentLossPath) Min() *Component_OpticalChannel_PolarizationDependentLoss_MinPath {
	ps := &Component_OpticalChannel_PolarizationDependentLoss_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/polarization-dependent-loss/min"
func (n *Component_OpticalChannel_PolarizationDependentLossPathAny) Min() *Component_OpticalChannel_PolarizationDependentLoss_MinPathAny {
	ps := &Component_OpticalChannel_PolarizationDependentLoss_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/optical-channel/state/polarization-dependent-loss/min-time"
func (n *Component_OpticalChannel_PolarizationDependentLossPath) MinTime() *Component_OpticalChannel_PolarizationDependentLoss_MinTimePath {
	ps := &Component_OpticalChannel_PolarizationDependentLoss_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/optical-channel/state/polarization-dependent-loss/min-time"
func (n *Component_OpticalChannel_PolarizationDependentLossPathAny) MinTime() *Component_OpticalChannel_PolarizationDependentLoss_MinTimePathAny {
	ps := &Component_OpticalChannel_PolarizationDependentLoss_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannel_PolarizationDependentLossPath) State() ygnmi.SingletonQuery[*oc.Component_OpticalChannel_PolarizationDependentLoss] {
	return ygnmi.NewSingletonQuery[*oc.Component_OpticalChannel_PolarizationDependentLoss](
		"Component_OpticalChannel_PolarizationDependentLoss",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannel_PolarizationDependentLossPathAny) State() ygnmi.WildcardQuery[*oc.Component_OpticalChannel_PolarizationDependentLoss] {
	return ygnmi.NewWildcardQuery[*oc.Component_OpticalChannel_PolarizationDependentLoss](
		"Component_OpticalChannel_PolarizationDependentLoss",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_PolarizationModeDispersion_AvgPath represents the /openconfig-platform/components/component/optical-channel/state/polarization-mode-dispersion/avg YANG schema element.
type Component_OpticalChannel_PolarizationModeDispersion_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_PolarizationModeDispersion_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/polarization-mode-dispersion/avg YANG schema element.
type Component_OpticalChannel_PolarizationModeDispersion_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/polarization-mode-dispersion/avg"
func (n *Component_OpticalChannel_PolarizationModeDispersion_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_PolarizationModeDispersion",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PolarizationModeDispersion).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PolarizationModeDispersion) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/polarization-mode-dispersion/avg"
func (n *Component_OpticalChannel_PolarizationModeDispersion_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_PolarizationModeDispersion",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PolarizationModeDispersion).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PolarizationModeDispersion) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_PolarizationModeDispersion_InstantPath represents the /openconfig-platform/components/component/optical-channel/state/polarization-mode-dispersion/instant YANG schema element.
type Component_OpticalChannel_PolarizationModeDispersion_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_PolarizationModeDispersion_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/polarization-mode-dispersion/instant YANG schema element.
type Component_OpticalChannel_PolarizationModeDispersion_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/polarization-mode-dispersion/instant"
func (n *Component_OpticalChannel_PolarizationModeDispersion_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_PolarizationModeDispersion",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PolarizationModeDispersion).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PolarizationModeDispersion) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/polarization-mode-dispersion/instant"
func (n *Component_OpticalChannel_PolarizationModeDispersion_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_PolarizationModeDispersion",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PolarizationModeDispersion).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PolarizationModeDispersion) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_PolarizationModeDispersion_IntervalPath represents the /openconfig-platform/components/component/optical-channel/state/polarization-mode-dispersion/interval YANG schema element.
type Component_OpticalChannel_PolarizationModeDispersion_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_PolarizationModeDispersion_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/polarization-mode-dispersion/interval YANG schema element.
type Component_OpticalChannel_PolarizationModeDispersion_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/polarization-mode-dispersion/interval"
func (n *Component_OpticalChannel_PolarizationModeDispersion_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_PolarizationModeDispersion",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PolarizationModeDispersion).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PolarizationModeDispersion) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/polarization-mode-dispersion/interval"
func (n *Component_OpticalChannel_PolarizationModeDispersion_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_PolarizationModeDispersion",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PolarizationModeDispersion).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PolarizationModeDispersion) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_PolarizationModeDispersion_MaxPath represents the /openconfig-platform/components/component/optical-channel/state/polarization-mode-dispersion/max YANG schema element.
type Component_OpticalChannel_PolarizationModeDispersion_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_PolarizationModeDispersion_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/polarization-mode-dispersion/max YANG schema element.
type Component_OpticalChannel_PolarizationModeDispersion_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/polarization-mode-dispersion/max"
func (n *Component_OpticalChannel_PolarizationModeDispersion_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_PolarizationModeDispersion",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PolarizationModeDispersion).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PolarizationModeDispersion) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/polarization-mode-dispersion/max"
func (n *Component_OpticalChannel_PolarizationModeDispersion_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_PolarizationModeDispersion",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PolarizationModeDispersion).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PolarizationModeDispersion) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_PolarizationModeDispersion_MaxTimePath represents the /openconfig-platform/components/component/optical-channel/state/polarization-mode-dispersion/max-time YANG schema element.
type Component_OpticalChannel_PolarizationModeDispersion_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_PolarizationModeDispersion_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/polarization-mode-dispersion/max-time YANG schema element.
type Component_OpticalChannel_PolarizationModeDispersion_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/optical-channel/state/polarization-mode-dispersion/max-time"
func (n *Component_OpticalChannel_PolarizationModeDispersion_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_PolarizationModeDispersion",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PolarizationModeDispersion).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PolarizationModeDispersion) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/optical-channel/state/polarization-mode-dispersion/max-time"
func (n *Component_OpticalChannel_PolarizationModeDispersion_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_PolarizationModeDispersion",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PolarizationModeDispersion).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PolarizationModeDispersion) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_PolarizationModeDispersion_MinPath represents the /openconfig-platform/components/component/optical-channel/state/polarization-mode-dispersion/min YANG schema element.
type Component_OpticalChannel_PolarizationModeDispersion_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_PolarizationModeDispersion_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/polarization-mode-dispersion/min YANG schema element.
type Component_OpticalChannel_PolarizationModeDispersion_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/polarization-mode-dispersion/min"
func (n *Component_OpticalChannel_PolarizationModeDispersion_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_PolarizationModeDispersion",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PolarizationModeDispersion).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PolarizationModeDispersion) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/polarization-mode-dispersion/min"
func (n *Component_OpticalChannel_PolarizationModeDispersion_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_PolarizationModeDispersion",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PolarizationModeDispersion).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PolarizationModeDispersion) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_PolarizationModeDispersion_MinTimePath represents the /openconfig-platform/components/component/optical-channel/state/polarization-mode-dispersion/min-time YANG schema element.
type Component_OpticalChannel_PolarizationModeDispersion_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_PolarizationModeDispersion_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/polarization-mode-dispersion/min-time YANG schema element.
type Component_OpticalChannel_PolarizationModeDispersion_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/optical-channel/state/polarization-mode-dispersion/min-time"
func (n *Component_OpticalChannel_PolarizationModeDispersion_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_PolarizationModeDispersion",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PolarizationModeDispersion).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PolarizationModeDispersion) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/optical-channel/state/polarization-mode-dispersion/min-time"
func (n *Component_OpticalChannel_PolarizationModeDispersion_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_PolarizationModeDispersion",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PolarizationModeDispersion).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PolarizationModeDispersion) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_PolarizationModeDispersionPath represents the /openconfig-platform/components/component/optical-channel/state/polarization-mode-dispersion YANG schema element.
type Component_OpticalChannel_PolarizationModeDispersionPath struct {
	*ygnmi.NodePath
}

// Component_OpticalChannel_PolarizationModeDispersionPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/polarization-mode-dispersion YANG schema element.
type Component_OpticalChannel_PolarizationModeDispersionPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/polarization-mode-dispersion/avg"
func (n *Component_OpticalChannel_PolarizationModeDispersionPath) Avg() *Component_OpticalChannel_PolarizationModeDispersion_AvgPath {
	ps := &Component_OpticalChannel_PolarizationModeDispersion_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/polarization-mode-dispersion/avg"
func (n *Component_OpticalChannel_PolarizationModeDispersionPathAny) Avg() *Component_OpticalChannel_PolarizationModeDispersion_AvgPathAny {
	ps := &Component_OpticalChannel_PolarizationModeDispersion_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/polarization-mode-dispersion/instant"
func (n *Component_OpticalChannel_PolarizationModeDispersionPath) Instant() *Component_OpticalChannel_PolarizationModeDispersion_InstantPath {
	ps := &Component_OpticalChannel_PolarizationModeDispersion_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/polarization-mode-dispersion/instant"
func (n *Component_OpticalChannel_PolarizationModeDispersionPathAny) Instant() *Component_OpticalChannel_PolarizationModeDispersion_InstantPathAny {
	ps := &Component_OpticalChannel_PolarizationModeDispersion_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/polarization-mode-dispersion/interval"
func (n *Component_OpticalChannel_PolarizationModeDispersionPath) Interval() *Component_OpticalChannel_PolarizationModeDispersion_IntervalPath {
	ps := &Component_OpticalChannel_PolarizationModeDispersion_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/polarization-mode-dispersion/interval"
func (n *Component_OpticalChannel_PolarizationModeDispersionPathAny) Interval() *Component_OpticalChannel_PolarizationModeDispersion_IntervalPathAny {
	ps := &Component_OpticalChannel_PolarizationModeDispersion_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/polarization-mode-dispersion/max"
func (n *Component_OpticalChannel_PolarizationModeDispersionPath) Max() *Component_OpticalChannel_PolarizationModeDispersion_MaxPath {
	ps := &Component_OpticalChannel_PolarizationModeDispersion_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/polarization-mode-dispersion/max"
func (n *Component_OpticalChannel_PolarizationModeDispersionPathAny) Max() *Component_OpticalChannel_PolarizationModeDispersion_MaxPathAny {
	ps := &Component_OpticalChannel_PolarizationModeDispersion_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/optical-channel/state/polarization-mode-dispersion/max-time"
func (n *Component_OpticalChannel_PolarizationModeDispersionPath) MaxTime() *Component_OpticalChannel_PolarizationModeDispersion_MaxTimePath {
	ps := &Component_OpticalChannel_PolarizationModeDispersion_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/optical-channel/state/polarization-mode-dispersion/max-time"
func (n *Component_OpticalChannel_PolarizationModeDispersionPathAny) MaxTime() *Component_OpticalChannel_PolarizationModeDispersion_MaxTimePathAny {
	ps := &Component_OpticalChannel_PolarizationModeDispersion_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/polarization-mode-dispersion/min"
func (n *Component_OpticalChannel_PolarizationModeDispersionPath) Min() *Component_OpticalChannel_PolarizationModeDispersion_MinPath {
	ps := &Component_OpticalChannel_PolarizationModeDispersion_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/polarization-mode-dispersion/min"
func (n *Component_OpticalChannel_PolarizationModeDispersionPathAny) Min() *Component_OpticalChannel_PolarizationModeDispersion_MinPathAny {
	ps := &Component_OpticalChannel_PolarizationModeDispersion_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/optical-channel/state/polarization-mode-dispersion/min-time"
func (n *Component_OpticalChannel_PolarizationModeDispersionPath) MinTime() *Component_OpticalChannel_PolarizationModeDispersion_MinTimePath {
	ps := &Component_OpticalChannel_PolarizationModeDispersion_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/optical-channel/state/polarization-mode-dispersion/min-time"
func (n *Component_OpticalChannel_PolarizationModeDispersionPathAny) MinTime() *Component_OpticalChannel_PolarizationModeDispersion_MinTimePathAny {
	ps := &Component_OpticalChannel_PolarizationModeDispersion_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannel_PolarizationModeDispersionPath) State() ygnmi.SingletonQuery[*oc.Component_OpticalChannel_PolarizationModeDispersion] {
	return ygnmi.NewSingletonQuery[*oc.Component_OpticalChannel_PolarizationModeDispersion](
		"Component_OpticalChannel_PolarizationModeDispersion",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannel_PolarizationModeDispersionPathAny) State() ygnmi.WildcardQuery[*oc.Component_OpticalChannel_PolarizationModeDispersion] {
	return ygnmi.NewWildcardQuery[*oc.Component_OpticalChannel_PolarizationModeDispersion](
		"Component_OpticalChannel_PolarizationModeDispersion",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_PostFecBer_AvgPath represents the /openconfig-platform/components/component/optical-channel/state/post-fec-ber/avg YANG schema element.
type Component_OpticalChannel_PostFecBer_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_PostFecBer_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/post-fec-ber/avg YANG schema element.
type Component_OpticalChannel_PostFecBer_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/post-fec-ber/avg"
func (n *Component_OpticalChannel_PostFecBer_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PostFecBer).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/post-fec-ber/avg"
func (n *Component_OpticalChannel_PostFecBer_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PostFecBer).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_PostFecBer_InstantPath represents the /openconfig-platform/components/component/optical-channel/state/post-fec-ber/instant YANG schema element.
type Component_OpticalChannel_PostFecBer_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_PostFecBer_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/post-fec-ber/instant YANG schema element.
type Component_OpticalChannel_PostFecBer_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/post-fec-ber/instant"
func (n *Component_OpticalChannel_PostFecBer_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PostFecBer).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/post-fec-ber/instant"
func (n *Component_OpticalChannel_PostFecBer_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PostFecBer).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_PostFecBer_IntervalPath represents the /openconfig-platform/components/component/optical-channel/state/post-fec-ber/interval YANG schema element.
type Component_OpticalChannel_PostFecBer_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_PostFecBer_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/post-fec-ber/interval YANG schema element.
type Component_OpticalChannel_PostFecBer_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/post-fec-ber/interval"
func (n *Component_OpticalChannel_PostFecBer_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PostFecBer).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/post-fec-ber/interval"
func (n *Component_OpticalChannel_PostFecBer_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PostFecBer).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_PostFecBer_MaxPath represents the /openconfig-platform/components/component/optical-channel/state/post-fec-ber/max YANG schema element.
type Component_OpticalChannel_PostFecBer_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_PostFecBer_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/post-fec-ber/max YANG schema element.
type Component_OpticalChannel_PostFecBer_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/post-fec-ber/max"
func (n *Component_OpticalChannel_PostFecBer_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PostFecBer).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/post-fec-ber/max"
func (n *Component_OpticalChannel_PostFecBer_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PostFecBer).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_PostFecBer_MaxTimePath represents the /openconfig-platform/components/component/optical-channel/state/post-fec-ber/max-time YANG schema element.
type Component_OpticalChannel_PostFecBer_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_PostFecBer_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/post-fec-ber/max-time YANG schema element.
type Component_OpticalChannel_PostFecBer_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/optical-channel/state/post-fec-ber/max-time"
func (n *Component_OpticalChannel_PostFecBer_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PostFecBer).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/optical-channel/state/post-fec-ber/max-time"
func (n *Component_OpticalChannel_PostFecBer_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PostFecBer).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_PostFecBer_MinPath represents the /openconfig-platform/components/component/optical-channel/state/post-fec-ber/min YANG schema element.
type Component_OpticalChannel_PostFecBer_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_PostFecBer_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/post-fec-ber/min YANG schema element.
type Component_OpticalChannel_PostFecBer_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/post-fec-ber/min"
func (n *Component_OpticalChannel_PostFecBer_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PostFecBer).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/post-fec-ber/min"
func (n *Component_OpticalChannel_PostFecBer_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PostFecBer).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_PostFecBer_MinTimePath represents the /openconfig-platform/components/component/optical-channel/state/post-fec-ber/min-time YANG schema element.
type Component_OpticalChannel_PostFecBer_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_PostFecBer_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/post-fec-ber/min-time YANG schema element.
type Component_OpticalChannel_PostFecBer_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/optical-channel/state/post-fec-ber/min-time"
func (n *Component_OpticalChannel_PostFecBer_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PostFecBer).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/optical-channel/state/post-fec-ber/min-time"
func (n *Component_OpticalChannel_PostFecBer_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PostFecBer).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_PostFecBerPath represents the /openconfig-platform/components/component/optical-channel/state/post-fec-ber YANG schema element.
type Component_OpticalChannel_PostFecBerPath struct {
	*ygnmi.NodePath
}

// Component_OpticalChannel_PostFecBerPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/post-fec-ber YANG schema element.
type Component_OpticalChannel_PostFecBerPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/post-fec-ber/avg"
func (n *Component_OpticalChannel_PostFecBerPath) Avg() *Component_OpticalChannel_PostFecBer_AvgPath {
	ps := &Component_OpticalChannel_PostFecBer_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/post-fec-ber/avg"
func (n *Component_OpticalChannel_PostFecBerPathAny) Avg() *Component_OpticalChannel_PostFecBer_AvgPathAny {
	ps := &Component_OpticalChannel_PostFecBer_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/post-fec-ber/instant"
func (n *Component_OpticalChannel_PostFecBerPath) Instant() *Component_OpticalChannel_PostFecBer_InstantPath {
	ps := &Component_OpticalChannel_PostFecBer_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/post-fec-ber/instant"
func (n *Component_OpticalChannel_PostFecBerPathAny) Instant() *Component_OpticalChannel_PostFecBer_InstantPathAny {
	ps := &Component_OpticalChannel_PostFecBer_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/post-fec-ber/interval"
func (n *Component_OpticalChannel_PostFecBerPath) Interval() *Component_OpticalChannel_PostFecBer_IntervalPath {
	ps := &Component_OpticalChannel_PostFecBer_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/post-fec-ber/interval"
func (n *Component_OpticalChannel_PostFecBerPathAny) Interval() *Component_OpticalChannel_PostFecBer_IntervalPathAny {
	ps := &Component_OpticalChannel_PostFecBer_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/post-fec-ber/max"
func (n *Component_OpticalChannel_PostFecBerPath) Max() *Component_OpticalChannel_PostFecBer_MaxPath {
	ps := &Component_OpticalChannel_PostFecBer_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/post-fec-ber/max"
func (n *Component_OpticalChannel_PostFecBerPathAny) Max() *Component_OpticalChannel_PostFecBer_MaxPathAny {
	ps := &Component_OpticalChannel_PostFecBer_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/optical-channel/state/post-fec-ber/max-time"
func (n *Component_OpticalChannel_PostFecBerPath) MaxTime() *Component_OpticalChannel_PostFecBer_MaxTimePath {
	ps := &Component_OpticalChannel_PostFecBer_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/optical-channel/state/post-fec-ber/max-time"
func (n *Component_OpticalChannel_PostFecBerPathAny) MaxTime() *Component_OpticalChannel_PostFecBer_MaxTimePathAny {
	ps := &Component_OpticalChannel_PostFecBer_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/post-fec-ber/min"
func (n *Component_OpticalChannel_PostFecBerPath) Min() *Component_OpticalChannel_PostFecBer_MinPath {
	ps := &Component_OpticalChannel_PostFecBer_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/post-fec-ber/min"
func (n *Component_OpticalChannel_PostFecBerPathAny) Min() *Component_OpticalChannel_PostFecBer_MinPathAny {
	ps := &Component_OpticalChannel_PostFecBer_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/optical-channel/state/post-fec-ber/min-time"
func (n *Component_OpticalChannel_PostFecBerPath) MinTime() *Component_OpticalChannel_PostFecBer_MinTimePath {
	ps := &Component_OpticalChannel_PostFecBer_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/optical-channel/state/post-fec-ber/min-time"
func (n *Component_OpticalChannel_PostFecBerPathAny) MinTime() *Component_OpticalChannel_PostFecBer_MinTimePathAny {
	ps := &Component_OpticalChannel_PostFecBer_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannel_PostFecBerPath) State() ygnmi.SingletonQuery[*oc.Component_OpticalChannel_PostFecBer] {
	return ygnmi.NewSingletonQuery[*oc.Component_OpticalChannel_PostFecBer](
		"Component_OpticalChannel_PostFecBer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannel_PostFecBerPathAny) State() ygnmi.WildcardQuery[*oc.Component_OpticalChannel_PostFecBer] {
	return ygnmi.NewWildcardQuery[*oc.Component_OpticalChannel_PostFecBer](
		"Component_OpticalChannel_PostFecBer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_PreFecBer_AvgPath represents the /openconfig-platform/components/component/optical-channel/state/pre-fec-ber/avg YANG schema element.
type Component_OpticalChannel_PreFecBer_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_PreFecBer_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/pre-fec-ber/avg YANG schema element.
type Component_OpticalChannel_PreFecBer_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/pre-fec-ber/avg"
func (n *Component_OpticalChannel_PreFecBer_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PreFecBer).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/pre-fec-ber/avg"
func (n *Component_OpticalChannel_PreFecBer_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PreFecBer).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_PreFecBer_InstantPath represents the /openconfig-platform/components/component/optical-channel/state/pre-fec-ber/instant YANG schema element.
type Component_OpticalChannel_PreFecBer_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_PreFecBer_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/pre-fec-ber/instant YANG schema element.
type Component_OpticalChannel_PreFecBer_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/pre-fec-ber/instant"
func (n *Component_OpticalChannel_PreFecBer_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PreFecBer).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/pre-fec-ber/instant"
func (n *Component_OpticalChannel_PreFecBer_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PreFecBer).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_PreFecBer_IntervalPath represents the /openconfig-platform/components/component/optical-channel/state/pre-fec-ber/interval YANG schema element.
type Component_OpticalChannel_PreFecBer_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_PreFecBer_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/pre-fec-ber/interval YANG schema element.
type Component_OpticalChannel_PreFecBer_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/pre-fec-ber/interval"
func (n *Component_OpticalChannel_PreFecBer_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PreFecBer).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/pre-fec-ber/interval"
func (n *Component_OpticalChannel_PreFecBer_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PreFecBer).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_PreFecBer_MaxPath represents the /openconfig-platform/components/component/optical-channel/state/pre-fec-ber/max YANG schema element.
type Component_OpticalChannel_PreFecBer_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_PreFecBer_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/pre-fec-ber/max YANG schema element.
type Component_OpticalChannel_PreFecBer_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/pre-fec-ber/max"
func (n *Component_OpticalChannel_PreFecBer_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PreFecBer).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/pre-fec-ber/max"
func (n *Component_OpticalChannel_PreFecBer_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PreFecBer).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_PreFecBer_MaxTimePath represents the /openconfig-platform/components/component/optical-channel/state/pre-fec-ber/max-time YANG schema element.
type Component_OpticalChannel_PreFecBer_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_PreFecBer_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/pre-fec-ber/max-time YANG schema element.
type Component_OpticalChannel_PreFecBer_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/optical-channel/state/pre-fec-ber/max-time"
func (n *Component_OpticalChannel_PreFecBer_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PreFecBer).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/optical-channel/state/pre-fec-ber/max-time"
func (n *Component_OpticalChannel_PreFecBer_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PreFecBer).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_PreFecBer_MinPath represents the /openconfig-platform/components/component/optical-channel/state/pre-fec-ber/min YANG schema element.
type Component_OpticalChannel_PreFecBer_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_PreFecBer_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/pre-fec-ber/min YANG schema element.
type Component_OpticalChannel_PreFecBer_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/pre-fec-ber/min"
func (n *Component_OpticalChannel_PreFecBer_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PreFecBer).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/pre-fec-ber/min"
func (n *Component_OpticalChannel_PreFecBer_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PreFecBer).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_PreFecBer_MinTimePath represents the /openconfig-platform/components/component/optical-channel/state/pre-fec-ber/min-time YANG schema element.
type Component_OpticalChannel_PreFecBer_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_PreFecBer_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/pre-fec-ber/min-time YANG schema element.
type Component_OpticalChannel_PreFecBer_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/optical-channel/state/pre-fec-ber/min-time"
func (n *Component_OpticalChannel_PreFecBer_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PreFecBer).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/optical-channel/state/pre-fec-ber/min-time"
func (n *Component_OpticalChannel_PreFecBer_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_PreFecBer).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_PreFecBerPath represents the /openconfig-platform/components/component/optical-channel/state/pre-fec-ber YANG schema element.
type Component_OpticalChannel_PreFecBerPath struct {
	*ygnmi.NodePath
}

// Component_OpticalChannel_PreFecBerPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/pre-fec-ber YANG schema element.
type Component_OpticalChannel_PreFecBerPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/pre-fec-ber/avg"
func (n *Component_OpticalChannel_PreFecBerPath) Avg() *Component_OpticalChannel_PreFecBer_AvgPath {
	ps := &Component_OpticalChannel_PreFecBer_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/pre-fec-ber/avg"
func (n *Component_OpticalChannel_PreFecBerPathAny) Avg() *Component_OpticalChannel_PreFecBer_AvgPathAny {
	ps := &Component_OpticalChannel_PreFecBer_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/pre-fec-ber/instant"
func (n *Component_OpticalChannel_PreFecBerPath) Instant() *Component_OpticalChannel_PreFecBer_InstantPath {
	ps := &Component_OpticalChannel_PreFecBer_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/pre-fec-ber/instant"
func (n *Component_OpticalChannel_PreFecBerPathAny) Instant() *Component_OpticalChannel_PreFecBer_InstantPathAny {
	ps := &Component_OpticalChannel_PreFecBer_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/pre-fec-ber/interval"
func (n *Component_OpticalChannel_PreFecBerPath) Interval() *Component_OpticalChannel_PreFecBer_IntervalPath {
	ps := &Component_OpticalChannel_PreFecBer_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/pre-fec-ber/interval"
func (n *Component_OpticalChannel_PreFecBerPathAny) Interval() *Component_OpticalChannel_PreFecBer_IntervalPathAny {
	ps := &Component_OpticalChannel_PreFecBer_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/pre-fec-ber/max"
func (n *Component_OpticalChannel_PreFecBerPath) Max() *Component_OpticalChannel_PreFecBer_MaxPath {
	ps := &Component_OpticalChannel_PreFecBer_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/pre-fec-ber/max"
func (n *Component_OpticalChannel_PreFecBerPathAny) Max() *Component_OpticalChannel_PreFecBer_MaxPathAny {
	ps := &Component_OpticalChannel_PreFecBer_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/optical-channel/state/pre-fec-ber/max-time"
func (n *Component_OpticalChannel_PreFecBerPath) MaxTime() *Component_OpticalChannel_PreFecBer_MaxTimePath {
	ps := &Component_OpticalChannel_PreFecBer_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/optical-channel/state/pre-fec-ber/max-time"
func (n *Component_OpticalChannel_PreFecBerPathAny) MaxTime() *Component_OpticalChannel_PreFecBer_MaxTimePathAny {
	ps := &Component_OpticalChannel_PreFecBer_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/pre-fec-ber/min"
func (n *Component_OpticalChannel_PreFecBerPath) Min() *Component_OpticalChannel_PreFecBer_MinPath {
	ps := &Component_OpticalChannel_PreFecBer_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/pre-fec-ber/min"
func (n *Component_OpticalChannel_PreFecBerPathAny) Min() *Component_OpticalChannel_PreFecBer_MinPathAny {
	ps := &Component_OpticalChannel_PreFecBer_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/optical-channel/state/pre-fec-ber/min-time"
func (n *Component_OpticalChannel_PreFecBerPath) MinTime() *Component_OpticalChannel_PreFecBer_MinTimePath {
	ps := &Component_OpticalChannel_PreFecBer_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/optical-channel/state/pre-fec-ber/min-time"
func (n *Component_OpticalChannel_PreFecBerPathAny) MinTime() *Component_OpticalChannel_PreFecBer_MinTimePathAny {
	ps := &Component_OpticalChannel_PreFecBer_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannel_PreFecBerPath) State() ygnmi.SingletonQuery[*oc.Component_OpticalChannel_PreFecBer] {
	return ygnmi.NewSingletonQuery[*oc.Component_OpticalChannel_PreFecBer](
		"Component_OpticalChannel_PreFecBer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannel_PreFecBerPathAny) State() ygnmi.WildcardQuery[*oc.Component_OpticalChannel_PreFecBer] {
	return ygnmi.NewWildcardQuery[*oc.Component_OpticalChannel_PreFecBer](
		"Component_OpticalChannel_PreFecBer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_QValue_AvgPath represents the /openconfig-platform/components/component/optical-channel/state/q-value/avg YANG schema element.
type Component_OpticalChannel_QValue_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_QValue_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/q-value/avg YANG schema element.
type Component_OpticalChannel_QValue_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/q-value/avg"
func (n *Component_OpticalChannel_QValue_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_QValue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_QValue).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_QValue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/q-value/avg"
func (n *Component_OpticalChannel_QValue_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_QValue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_QValue).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_QValue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_QValue_InstantPath represents the /openconfig-platform/components/component/optical-channel/state/q-value/instant YANG schema element.
type Component_OpticalChannel_QValue_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_QValue_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/q-value/instant YANG schema element.
type Component_OpticalChannel_QValue_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/q-value/instant"
func (n *Component_OpticalChannel_QValue_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_QValue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_QValue).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_QValue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/q-value/instant"
func (n *Component_OpticalChannel_QValue_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_QValue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_QValue).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_QValue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_QValue_IntervalPath represents the /openconfig-platform/components/component/optical-channel/state/q-value/interval YANG schema element.
type Component_OpticalChannel_QValue_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_QValue_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/q-value/interval YANG schema element.
type Component_OpticalChannel_QValue_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/q-value/interval"
func (n *Component_OpticalChannel_QValue_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_QValue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_QValue).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_QValue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/q-value/interval"
func (n *Component_OpticalChannel_QValue_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_QValue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_QValue).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_QValue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_QValue_MaxPath represents the /openconfig-platform/components/component/optical-channel/state/q-value/max YANG schema element.
type Component_OpticalChannel_QValue_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_QValue_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/q-value/max YANG schema element.
type Component_OpticalChannel_QValue_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/q-value/max"
func (n *Component_OpticalChannel_QValue_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_QValue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_QValue).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_QValue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/q-value/max"
func (n *Component_OpticalChannel_QValue_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_QValue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_QValue).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_QValue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_QValue_MaxTimePath represents the /openconfig-platform/components/component/optical-channel/state/q-value/max-time YANG schema element.
type Component_OpticalChannel_QValue_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_QValue_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/q-value/max-time YANG schema element.
type Component_OpticalChannel_QValue_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/optical-channel/state/q-value/max-time"
func (n *Component_OpticalChannel_QValue_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_QValue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_QValue).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_QValue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/optical-channel/state/q-value/max-time"
func (n *Component_OpticalChannel_QValue_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_QValue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_QValue).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_QValue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_QValue_MinPath represents the /openconfig-platform/components/component/optical-channel/state/q-value/min YANG schema element.
type Component_OpticalChannel_QValue_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_QValue_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/q-value/min YANG schema element.
type Component_OpticalChannel_QValue_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/q-value/min"
func (n *Component_OpticalChannel_QValue_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_QValue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_QValue).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_QValue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/q-value/min"
func (n *Component_OpticalChannel_QValue_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_QValue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_QValue).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_QValue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_QValue_MinTimePath represents the /openconfig-platform/components/component/optical-channel/state/q-value/min-time YANG schema element.
type Component_OpticalChannel_QValue_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_QValue_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/q-value/min-time YANG schema element.
type Component_OpticalChannel_QValue_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/optical-channel/state/q-value/min-time"
func (n *Component_OpticalChannel_QValue_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_QValue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_QValue).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_QValue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/optical-channel/state/q-value/min-time"
func (n *Component_OpticalChannel_QValue_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_QValue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_QValue).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_QValue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_QValuePath represents the /openconfig-platform/components/component/optical-channel/state/q-value YANG schema element.
type Component_OpticalChannel_QValuePath struct {
	*ygnmi.NodePath
}

// Component_OpticalChannel_QValuePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/q-value YANG schema element.
type Component_OpticalChannel_QValuePathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/q-value/avg"
func (n *Component_OpticalChannel_QValuePath) Avg() *Component_OpticalChannel_QValue_AvgPath {
	ps := &Component_OpticalChannel_QValue_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/q-value/avg"
func (n *Component_OpticalChannel_QValuePathAny) Avg() *Component_OpticalChannel_QValue_AvgPathAny {
	ps := &Component_OpticalChannel_QValue_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/q-value/instant"
func (n *Component_OpticalChannel_QValuePath) Instant() *Component_OpticalChannel_QValue_InstantPath {
	ps := &Component_OpticalChannel_QValue_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/q-value/instant"
func (n *Component_OpticalChannel_QValuePathAny) Instant() *Component_OpticalChannel_QValue_InstantPathAny {
	ps := &Component_OpticalChannel_QValue_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/q-value/interval"
func (n *Component_OpticalChannel_QValuePath) Interval() *Component_OpticalChannel_QValue_IntervalPath {
	ps := &Component_OpticalChannel_QValue_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/q-value/interval"
func (n *Component_OpticalChannel_QValuePathAny) Interval() *Component_OpticalChannel_QValue_IntervalPathAny {
	ps := &Component_OpticalChannel_QValue_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/q-value/max"
func (n *Component_OpticalChannel_QValuePath) Max() *Component_OpticalChannel_QValue_MaxPath {
	ps := &Component_OpticalChannel_QValue_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/q-value/max"
func (n *Component_OpticalChannel_QValuePathAny) Max() *Component_OpticalChannel_QValue_MaxPathAny {
	ps := &Component_OpticalChannel_QValue_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/optical-channel/state/q-value/max-time"
func (n *Component_OpticalChannel_QValuePath) MaxTime() *Component_OpticalChannel_QValue_MaxTimePath {
	ps := &Component_OpticalChannel_QValue_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/optical-channel/state/q-value/max-time"
func (n *Component_OpticalChannel_QValuePathAny) MaxTime() *Component_OpticalChannel_QValue_MaxTimePathAny {
	ps := &Component_OpticalChannel_QValue_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/q-value/min"
func (n *Component_OpticalChannel_QValuePath) Min() *Component_OpticalChannel_QValue_MinPath {
	ps := &Component_OpticalChannel_QValue_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/q-value/min"
func (n *Component_OpticalChannel_QValuePathAny) Min() *Component_OpticalChannel_QValue_MinPathAny {
	ps := &Component_OpticalChannel_QValue_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/optical-channel/state/q-value/min-time"
func (n *Component_OpticalChannel_QValuePath) MinTime() *Component_OpticalChannel_QValue_MinTimePath {
	ps := &Component_OpticalChannel_QValue_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/optical-channel/state/q-value/min-time"
func (n *Component_OpticalChannel_QValuePathAny) MinTime() *Component_OpticalChannel_QValue_MinTimePathAny {
	ps := &Component_OpticalChannel_QValue_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannel_QValuePath) State() ygnmi.SingletonQuery[*oc.Component_OpticalChannel_QValue] {
	return ygnmi.NewSingletonQuery[*oc.Component_OpticalChannel_QValue](
		"Component_OpticalChannel_QValue",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannel_QValuePathAny) State() ygnmi.WildcardQuery[*oc.Component_OpticalChannel_QValue] {
	return ygnmi.NewWildcardQuery[*oc.Component_OpticalChannel_QValue](
		"Component_OpticalChannel_QValue",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_SecondOrderPolarizationModeDispersion_AvgPath represents the /openconfig-platform/components/component/optical-channel/state/second-order-polarization-mode-dispersion/avg YANG schema element.
type Component_OpticalChannel_SecondOrderPolarizationModeDispersion_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_SecondOrderPolarizationModeDispersion_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/second-order-polarization-mode-dispersion/avg YANG schema element.
type Component_OpticalChannel_SecondOrderPolarizationModeDispersion_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/second-order-polarization-mode-dispersion/avg"
func (n *Component_OpticalChannel_SecondOrderPolarizationModeDispersion_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_SecondOrderPolarizationModeDispersion",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_SecondOrderPolarizationModeDispersion).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_OpticalChannel_SecondOrderPolarizationModeDispersion)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/second-order-polarization-mode-dispersion/avg"
func (n *Component_OpticalChannel_SecondOrderPolarizationModeDispersion_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_SecondOrderPolarizationModeDispersion",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_SecondOrderPolarizationModeDispersion).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_OpticalChannel_SecondOrderPolarizationModeDispersion)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_SecondOrderPolarizationModeDispersion_InstantPath represents the /openconfig-platform/components/component/optical-channel/state/second-order-polarization-mode-dispersion/instant YANG schema element.
type Component_OpticalChannel_SecondOrderPolarizationModeDispersion_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_SecondOrderPolarizationModeDispersion_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/second-order-polarization-mode-dispersion/instant YANG schema element.
type Component_OpticalChannel_SecondOrderPolarizationModeDispersion_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/second-order-polarization-mode-dispersion/instant"
func (n *Component_OpticalChannel_SecondOrderPolarizationModeDispersion_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_SecondOrderPolarizationModeDispersion",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_SecondOrderPolarizationModeDispersion).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_OpticalChannel_SecondOrderPolarizationModeDispersion)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/second-order-polarization-mode-dispersion/instant"
func (n *Component_OpticalChannel_SecondOrderPolarizationModeDispersion_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_SecondOrderPolarizationModeDispersion",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_SecondOrderPolarizationModeDispersion).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_OpticalChannel_SecondOrderPolarizationModeDispersion)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_SecondOrderPolarizationModeDispersion_IntervalPath represents the /openconfig-platform/components/component/optical-channel/state/second-order-polarization-mode-dispersion/interval YANG schema element.
type Component_OpticalChannel_SecondOrderPolarizationModeDispersion_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_SecondOrderPolarizationModeDispersion_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/second-order-polarization-mode-dispersion/interval YANG schema element.
type Component_OpticalChannel_SecondOrderPolarizationModeDispersion_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/second-order-polarization-mode-dispersion/interval"
func (n *Component_OpticalChannel_SecondOrderPolarizationModeDispersion_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_SecondOrderPolarizationModeDispersion",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_SecondOrderPolarizationModeDispersion).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_OpticalChannel_SecondOrderPolarizationModeDispersion)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/second-order-polarization-mode-dispersion/interval"
func (n *Component_OpticalChannel_SecondOrderPolarizationModeDispersion_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_SecondOrderPolarizationModeDispersion",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_SecondOrderPolarizationModeDispersion).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_OpticalChannel_SecondOrderPolarizationModeDispersion)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_SecondOrderPolarizationModeDispersion_MaxPath represents the /openconfig-platform/components/component/optical-channel/state/second-order-polarization-mode-dispersion/max YANG schema element.
type Component_OpticalChannel_SecondOrderPolarizationModeDispersion_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_SecondOrderPolarizationModeDispersion_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/second-order-polarization-mode-dispersion/max YANG schema element.
type Component_OpticalChannel_SecondOrderPolarizationModeDispersion_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/second-order-polarization-mode-dispersion/max"
func (n *Component_OpticalChannel_SecondOrderPolarizationModeDispersion_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_SecondOrderPolarizationModeDispersion",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_SecondOrderPolarizationModeDispersion).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_OpticalChannel_SecondOrderPolarizationModeDispersion)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/second-order-polarization-mode-dispersion/max"
func (n *Component_OpticalChannel_SecondOrderPolarizationModeDispersion_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_SecondOrderPolarizationModeDispersion",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_SecondOrderPolarizationModeDispersion).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_OpticalChannel_SecondOrderPolarizationModeDispersion)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_SecondOrderPolarizationModeDispersion_MaxTimePath represents the /openconfig-platform/components/component/optical-channel/state/second-order-polarization-mode-dispersion/max-time YANG schema element.
type Component_OpticalChannel_SecondOrderPolarizationModeDispersion_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_SecondOrderPolarizationModeDispersion_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/second-order-polarization-mode-dispersion/max-time YANG schema element.
type Component_OpticalChannel_SecondOrderPolarizationModeDispersion_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/optical-channel/state/second-order-polarization-mode-dispersion/max-time"
func (n *Component_OpticalChannel_SecondOrderPolarizationModeDispersion_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_SecondOrderPolarizationModeDispersion",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_SecondOrderPolarizationModeDispersion).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_OpticalChannel_SecondOrderPolarizationModeDispersion)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/optical-channel/state/second-order-polarization-mode-dispersion/max-time"
func (n *Component_OpticalChannel_SecondOrderPolarizationModeDispersion_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_SecondOrderPolarizationModeDispersion",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_SecondOrderPolarizationModeDispersion).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_OpticalChannel_SecondOrderPolarizationModeDispersion)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_SecondOrderPolarizationModeDispersion_MinPath represents the /openconfig-platform/components/component/optical-channel/state/second-order-polarization-mode-dispersion/min YANG schema element.
type Component_OpticalChannel_SecondOrderPolarizationModeDispersion_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_SecondOrderPolarizationModeDispersion_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/second-order-polarization-mode-dispersion/min YANG schema element.
type Component_OpticalChannel_SecondOrderPolarizationModeDispersion_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/second-order-polarization-mode-dispersion/min"
func (n *Component_OpticalChannel_SecondOrderPolarizationModeDispersion_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_SecondOrderPolarizationModeDispersion",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_SecondOrderPolarizationModeDispersion).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_OpticalChannel_SecondOrderPolarizationModeDispersion)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/second-order-polarization-mode-dispersion/min"
func (n *Component_OpticalChannel_SecondOrderPolarizationModeDispersion_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_SecondOrderPolarizationModeDispersion",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_SecondOrderPolarizationModeDispersion).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_OpticalChannel_SecondOrderPolarizationModeDispersion)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_SecondOrderPolarizationModeDispersion_MinTimePath represents the /openconfig-platform/components/component/optical-channel/state/second-order-polarization-mode-dispersion/min-time YANG schema element.
type Component_OpticalChannel_SecondOrderPolarizationModeDispersion_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_SecondOrderPolarizationModeDispersion_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/second-order-polarization-mode-dispersion/min-time YANG schema element.
type Component_OpticalChannel_SecondOrderPolarizationModeDispersion_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/optical-channel/state/second-order-polarization-mode-dispersion/min-time"
func (n *Component_OpticalChannel_SecondOrderPolarizationModeDispersion_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_SecondOrderPolarizationModeDispersion",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_SecondOrderPolarizationModeDispersion).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_OpticalChannel_SecondOrderPolarizationModeDispersion)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/optical-channel/state/second-order-polarization-mode-dispersion/min-time"
func (n *Component_OpticalChannel_SecondOrderPolarizationModeDispersion_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_SecondOrderPolarizationModeDispersion",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_SecondOrderPolarizationModeDispersion).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_OpticalChannel_SecondOrderPolarizationModeDispersion)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_SecondOrderPolarizationModeDispersionPath represents the /openconfig-platform/components/component/optical-channel/state/second-order-polarization-mode-dispersion YANG schema element.
type Component_OpticalChannel_SecondOrderPolarizationModeDispersionPath struct {
	*ygnmi.NodePath
}

// Component_OpticalChannel_SecondOrderPolarizationModeDispersionPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/second-order-polarization-mode-dispersion YANG schema element.
type Component_OpticalChannel_SecondOrderPolarizationModeDispersionPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/second-order-polarization-mode-dispersion/avg"
func (n *Component_OpticalChannel_SecondOrderPolarizationModeDispersionPath) Avg() *Component_OpticalChannel_SecondOrderPolarizationModeDispersion_AvgPath {
	ps := &Component_OpticalChannel_SecondOrderPolarizationModeDispersion_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/second-order-polarization-mode-dispersion/avg"
func (n *Component_OpticalChannel_SecondOrderPolarizationModeDispersionPathAny) Avg() *Component_OpticalChannel_SecondOrderPolarizationModeDispersion_AvgPathAny {
	ps := &Component_OpticalChannel_SecondOrderPolarizationModeDispersion_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/second-order-polarization-mode-dispersion/instant"
func (n *Component_OpticalChannel_SecondOrderPolarizationModeDispersionPath) Instant() *Component_OpticalChannel_SecondOrderPolarizationModeDispersion_InstantPath {
	ps := &Component_OpticalChannel_SecondOrderPolarizationModeDispersion_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/second-order-polarization-mode-dispersion/instant"
func (n *Component_OpticalChannel_SecondOrderPolarizationModeDispersionPathAny) Instant() *Component_OpticalChannel_SecondOrderPolarizationModeDispersion_InstantPathAny {
	ps := &Component_OpticalChannel_SecondOrderPolarizationModeDispersion_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/second-order-polarization-mode-dispersion/interval"
func (n *Component_OpticalChannel_SecondOrderPolarizationModeDispersionPath) Interval() *Component_OpticalChannel_SecondOrderPolarizationModeDispersion_IntervalPath {
	ps := &Component_OpticalChannel_SecondOrderPolarizationModeDispersion_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/second-order-polarization-mode-dispersion/interval"
func (n *Component_OpticalChannel_SecondOrderPolarizationModeDispersionPathAny) Interval() *Component_OpticalChannel_SecondOrderPolarizationModeDispersion_IntervalPathAny {
	ps := &Component_OpticalChannel_SecondOrderPolarizationModeDispersion_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/second-order-polarization-mode-dispersion/max"
func (n *Component_OpticalChannel_SecondOrderPolarizationModeDispersionPath) Max() *Component_OpticalChannel_SecondOrderPolarizationModeDispersion_MaxPath {
	ps := &Component_OpticalChannel_SecondOrderPolarizationModeDispersion_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/second-order-polarization-mode-dispersion/max"
func (n *Component_OpticalChannel_SecondOrderPolarizationModeDispersionPathAny) Max() *Component_OpticalChannel_SecondOrderPolarizationModeDispersion_MaxPathAny {
	ps := &Component_OpticalChannel_SecondOrderPolarizationModeDispersion_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/optical-channel/state/second-order-polarization-mode-dispersion/max-time"
func (n *Component_OpticalChannel_SecondOrderPolarizationModeDispersionPath) MaxTime() *Component_OpticalChannel_SecondOrderPolarizationModeDispersion_MaxTimePath {
	ps := &Component_OpticalChannel_SecondOrderPolarizationModeDispersion_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/optical-channel/state/second-order-polarization-mode-dispersion/max-time"
func (n *Component_OpticalChannel_SecondOrderPolarizationModeDispersionPathAny) MaxTime() *Component_OpticalChannel_SecondOrderPolarizationModeDispersion_MaxTimePathAny {
	ps := &Component_OpticalChannel_SecondOrderPolarizationModeDispersion_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/second-order-polarization-mode-dispersion/min"
func (n *Component_OpticalChannel_SecondOrderPolarizationModeDispersionPath) Min() *Component_OpticalChannel_SecondOrderPolarizationModeDispersion_MinPath {
	ps := &Component_OpticalChannel_SecondOrderPolarizationModeDispersion_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/second-order-polarization-mode-dispersion/min"
func (n *Component_OpticalChannel_SecondOrderPolarizationModeDispersionPathAny) Min() *Component_OpticalChannel_SecondOrderPolarizationModeDispersion_MinPathAny {
	ps := &Component_OpticalChannel_SecondOrderPolarizationModeDispersion_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/optical-channel/state/second-order-polarization-mode-dispersion/min-time"
func (n *Component_OpticalChannel_SecondOrderPolarizationModeDispersionPath) MinTime() *Component_OpticalChannel_SecondOrderPolarizationModeDispersion_MinTimePath {
	ps := &Component_OpticalChannel_SecondOrderPolarizationModeDispersion_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/optical-channel/state/second-order-polarization-mode-dispersion/min-time"
func (n *Component_OpticalChannel_SecondOrderPolarizationModeDispersionPathAny) MinTime() *Component_OpticalChannel_SecondOrderPolarizationModeDispersion_MinTimePathAny {
	ps := &Component_OpticalChannel_SecondOrderPolarizationModeDispersion_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannel_SecondOrderPolarizationModeDispersionPath) State() ygnmi.SingletonQuery[*oc.Component_OpticalChannel_SecondOrderPolarizationModeDispersion] {
	return ygnmi.NewSingletonQuery[*oc.Component_OpticalChannel_SecondOrderPolarizationModeDispersion](
		"Component_OpticalChannel_SecondOrderPolarizationModeDispersion",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannel_SecondOrderPolarizationModeDispersionPathAny) State() ygnmi.WildcardQuery[*oc.Component_OpticalChannel_SecondOrderPolarizationModeDispersion] {
	return ygnmi.NewWildcardQuery[*oc.Component_OpticalChannel_SecondOrderPolarizationModeDispersion](
		"Component_OpticalChannel_SecondOrderPolarizationModeDispersion",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_SopRoc_AvgPath represents the /openconfig-platform/components/component/optical-channel/state/sop-roc/avg YANG schema element.
type Component_OpticalChannel_SopRoc_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_SopRoc_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/sop-roc/avg YANG schema element.
type Component_OpticalChannel_SopRoc_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/sop-roc/avg"
func (n *Component_OpticalChannel_SopRoc_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_SopRoc",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_SopRoc).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_SopRoc) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/sop-roc/avg"
func (n *Component_OpticalChannel_SopRoc_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_SopRoc",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_SopRoc).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_SopRoc) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_SopRoc_InstantPath represents the /openconfig-platform/components/component/optical-channel/state/sop-roc/instant YANG schema element.
type Component_OpticalChannel_SopRoc_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_SopRoc_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/sop-roc/instant YANG schema element.
type Component_OpticalChannel_SopRoc_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/sop-roc/instant"
func (n *Component_OpticalChannel_SopRoc_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_SopRoc",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_SopRoc).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_SopRoc) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/sop-roc/instant"
func (n *Component_OpticalChannel_SopRoc_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_SopRoc",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_SopRoc).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_SopRoc) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_SopRoc_IntervalPath represents the /openconfig-platform/components/component/optical-channel/state/sop-roc/interval YANG schema element.
type Component_OpticalChannel_SopRoc_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_SopRoc_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/sop-roc/interval YANG schema element.
type Component_OpticalChannel_SopRoc_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/sop-roc/interval"
func (n *Component_OpticalChannel_SopRoc_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_SopRoc",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_SopRoc).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_SopRoc) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/sop-roc/interval"
func (n *Component_OpticalChannel_SopRoc_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_SopRoc",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_SopRoc).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_SopRoc) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_SopRoc_MaxPath represents the /openconfig-platform/components/component/optical-channel/state/sop-roc/max YANG schema element.
type Component_OpticalChannel_SopRoc_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_SopRoc_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/sop-roc/max YANG schema element.
type Component_OpticalChannel_SopRoc_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/sop-roc/max"
func (n *Component_OpticalChannel_SopRoc_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_SopRoc",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_SopRoc).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_SopRoc) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/sop-roc/max"
func (n *Component_OpticalChannel_SopRoc_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_SopRoc",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_SopRoc).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_SopRoc) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_SopRoc_MaxTimePath represents the /openconfig-platform/components/component/optical-channel/state/sop-roc/max-time YANG schema element.
type Component_OpticalChannel_SopRoc_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_SopRoc_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/sop-roc/max-time YANG schema element.
type Component_OpticalChannel_SopRoc_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/optical-channel/state/sop-roc/max-time"
func (n *Component_OpticalChannel_SopRoc_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_SopRoc",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_SopRoc).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_SopRoc) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/optical-channel/state/sop-roc/max-time"
func (n *Component_OpticalChannel_SopRoc_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_SopRoc",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_SopRoc).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_SopRoc) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_SopRoc_MinPath represents the /openconfig-platform/components/component/optical-channel/state/sop-roc/min YANG schema element.
type Component_OpticalChannel_SopRoc_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_SopRoc_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/sop-roc/min YANG schema element.
type Component_OpticalChannel_SopRoc_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/sop-roc/min"
func (n *Component_OpticalChannel_SopRoc_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_OpticalChannel_SopRoc",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_SopRoc).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_SopRoc) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/sop-roc/min"
func (n *Component_OpticalChannel_SopRoc_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_OpticalChannel_SopRoc",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_SopRoc).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_SopRoc) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_SopRoc_MinTimePath represents the /openconfig-platform/components/component/optical-channel/state/sop-roc/min-time YANG schema element.
type Component_OpticalChannel_SopRoc_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_OpticalChannel_SopRoc_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/sop-roc/min-time YANG schema element.
type Component_OpticalChannel_SopRoc_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/optical-channel/state/sop-roc/min-time"
func (n *Component_OpticalChannel_SopRoc_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_OpticalChannel_SopRoc",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_SopRoc).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_SopRoc) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/optical-channel/state/sop-roc/min-time"
func (n *Component_OpticalChannel_SopRoc_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_OpticalChannel_SopRoc",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_OpticalChannel_SopRoc).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_OpticalChannel_SopRoc) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_OpticalChannel_SopRocPath represents the /openconfig-platform/components/component/optical-channel/state/sop-roc YANG schema element.
type Component_OpticalChannel_SopRocPath struct {
	*ygnmi.NodePath
}

// Component_OpticalChannel_SopRocPathAny represents the wildcard version of the /openconfig-platform/components/component/optical-channel/state/sop-roc YANG schema element.
type Component_OpticalChannel_SopRocPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/sop-roc/avg"
func (n *Component_OpticalChannel_SopRocPath) Avg() *Component_OpticalChannel_SopRoc_AvgPath {
	ps := &Component_OpticalChannel_SopRoc_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/optical-channel/state/sop-roc/avg"
func (n *Component_OpticalChannel_SopRocPathAny) Avg() *Component_OpticalChannel_SopRoc_AvgPathAny {
	ps := &Component_OpticalChannel_SopRoc_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/sop-roc/instant"
func (n *Component_OpticalChannel_SopRocPath) Instant() *Component_OpticalChannel_SopRoc_InstantPath {
	ps := &Component_OpticalChannel_SopRoc_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/optical-channel/state/sop-roc/instant"
func (n *Component_OpticalChannel_SopRocPathAny) Instant() *Component_OpticalChannel_SopRoc_InstantPathAny {
	ps := &Component_OpticalChannel_SopRoc_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/sop-roc/interval"
func (n *Component_OpticalChannel_SopRocPath) Interval() *Component_OpticalChannel_SopRoc_IntervalPath {
	ps := &Component_OpticalChannel_SopRoc_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/optical-channel/state/sop-roc/interval"
func (n *Component_OpticalChannel_SopRocPathAny) Interval() *Component_OpticalChannel_SopRoc_IntervalPathAny {
	ps := &Component_OpticalChannel_SopRoc_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/sop-roc/max"
func (n *Component_OpticalChannel_SopRocPath) Max() *Component_OpticalChannel_SopRoc_MaxPath {
	ps := &Component_OpticalChannel_SopRoc_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/optical-channel/state/sop-roc/max"
func (n *Component_OpticalChannel_SopRocPathAny) Max() *Component_OpticalChannel_SopRoc_MaxPathAny {
	ps := &Component_OpticalChannel_SopRoc_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/optical-channel/state/sop-roc/max-time"
func (n *Component_OpticalChannel_SopRocPath) MaxTime() *Component_OpticalChannel_SopRoc_MaxTimePath {
	ps := &Component_OpticalChannel_SopRoc_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/optical-channel/state/sop-roc/max-time"
func (n *Component_OpticalChannel_SopRocPathAny) MaxTime() *Component_OpticalChannel_SopRoc_MaxTimePathAny {
	ps := &Component_OpticalChannel_SopRoc_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/sop-roc/min"
func (n *Component_OpticalChannel_SopRocPath) Min() *Component_OpticalChannel_SopRoc_MinPath {
	ps := &Component_OpticalChannel_SopRoc_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/optical-channel/state/sop-roc/min"
func (n *Component_OpticalChannel_SopRocPathAny) Min() *Component_OpticalChannel_SopRoc_MinPathAny {
	ps := &Component_OpticalChannel_SopRoc_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/optical-channel/state/sop-roc/min-time"
func (n *Component_OpticalChannel_SopRocPath) MinTime() *Component_OpticalChannel_SopRoc_MinTimePath {
	ps := &Component_OpticalChannel_SopRoc_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/optical-channel/state/sop-roc/min-time"
func (n *Component_OpticalChannel_SopRocPathAny) MinTime() *Component_OpticalChannel_SopRoc_MinTimePathAny {
	ps := &Component_OpticalChannel_SopRoc_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannel_SopRocPath) State() ygnmi.SingletonQuery[*oc.Component_OpticalChannel_SopRoc] {
	return ygnmi.NewSingletonQuery[*oc.Component_OpticalChannel_SopRoc](
		"Component_OpticalChannel_SopRoc",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_OpticalChannel_SopRocPathAny) State() ygnmi.WildcardQuery[*oc.Component_OpticalChannel_SopRoc] {
	return ygnmi.NewWildcardQuery[*oc.Component_OpticalChannel_SopRoc](
		"Component_OpticalChannel_SopRoc",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_PciePath represents the /openconfig-platform/components/component/state/pcie YANG schema element.
type Component_PciePath struct {
	*ygnmi.NodePath
}

// Component_PciePathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie YANG schema element.
type Component_PciePathAny struct {
	*ygnmi.NodePath
}

// CorrectableErrors (container): The count of the correctable PCIe errors.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "correctable-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors"
func (n *Component_PciePath) CorrectableErrors() *Component_Pcie_CorrectableErrorsPath {
	ps := &Component_Pcie_CorrectableErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"correctable-errors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// CorrectableErrors (container): The count of the correctable PCIe errors.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "correctable-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors"
func (n *Component_PciePathAny) CorrectableErrors() *Component_Pcie_CorrectableErrorsPathAny {
	ps := &Component_Pcie_CorrectableErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"correctable-errors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// FatalErrors (container): The count of the fatal PCIe errors.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "fatal-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors"
func (n *Component_PciePath) FatalErrors() *Component_Pcie_FatalErrorsPath {
	ps := &Component_Pcie_FatalErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"fatal-errors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// FatalErrors (container): The count of the fatal PCIe errors.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "fatal-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors"
func (n *Component_PciePathAny) FatalErrors() *Component_Pcie_FatalErrorsPathAny {
	ps := &Component_Pcie_FatalErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"fatal-errors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NonFatalErrors (container): The count of the non-fatal PCIe errors.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "non-fatal-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors"
func (n *Component_PciePath) NonFatalErrors() *Component_Pcie_NonFatalErrorsPath {
	ps := &Component_Pcie_NonFatalErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"non-fatal-errors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NonFatalErrors (container): The count of the non-fatal PCIe errors.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "non-fatal-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors"
func (n *Component_PciePathAny) NonFatalErrors() *Component_Pcie_NonFatalErrorsPathAny {
	ps := &Component_Pcie_NonFatalErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"non-fatal-errors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_PciePath) State() ygnmi.SingletonQuery[*oc.Component_Pcie] {
	return ygnmi.NewSingletonQuery[*oc.Component_Pcie](
		"Component_Pcie",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_PciePathAny) State() ygnmi.WildcardQuery[*oc.Component_Pcie] {
	return ygnmi.NewWildcardQuery[*oc.Component_Pcie](
		"Component_Pcie",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_CorrectableErrors_AdvisoryNonFatalErrorsPath represents the /openconfig-platform/components/component/state/pcie/correctable-errors/advisory-non-fatal-errors YANG schema element.
type Component_Pcie_CorrectableErrors_AdvisoryNonFatalErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_CorrectableErrors_AdvisoryNonFatalErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/correctable-errors/advisory-non-fatal-errors YANG schema element.
type Component_Pcie_CorrectableErrors_AdvisoryNonFatalErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "advisory-non-fatal-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/advisory-non-fatal-errors"
func (n *Component_Pcie_CorrectableErrors_AdvisoryNonFatalErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_CorrectableErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"advisory-non-fatal-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_CorrectableErrors).AdvisoryNonFatalErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_CorrectableErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "advisory-non-fatal-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/advisory-non-fatal-errors"
func (n *Component_Pcie_CorrectableErrors_AdvisoryNonFatalErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_CorrectableErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"advisory-non-fatal-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_CorrectableErrors).AdvisoryNonFatalErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_CorrectableErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_CorrectableErrors_BadDllpErrorsPath represents the /openconfig-platform/components/component/state/pcie/correctable-errors/bad-dllp-errors YANG schema element.
type Component_Pcie_CorrectableErrors_BadDllpErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_CorrectableErrors_BadDllpErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/correctable-errors/bad-dllp-errors YANG schema element.
type Component_Pcie_CorrectableErrors_BadDllpErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "bad-dllp-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/bad-dllp-errors"
func (n *Component_Pcie_CorrectableErrors_BadDllpErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_CorrectableErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bad-dllp-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_CorrectableErrors).BadDllpErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_CorrectableErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "bad-dllp-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/bad-dllp-errors"
func (n *Component_Pcie_CorrectableErrors_BadDllpErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_CorrectableErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bad-dllp-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_CorrectableErrors).BadDllpErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_CorrectableErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_CorrectableErrors_BadTlpErrorsPath represents the /openconfig-platform/components/component/state/pcie/correctable-errors/bad-tlp-errors YANG schema element.
type Component_Pcie_CorrectableErrors_BadTlpErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_CorrectableErrors_BadTlpErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/correctable-errors/bad-tlp-errors YANG schema element.
type Component_Pcie_CorrectableErrors_BadTlpErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "bad-tlp-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/bad-tlp-errors"
func (n *Component_Pcie_CorrectableErrors_BadTlpErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_CorrectableErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bad-tlp-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_CorrectableErrors).BadTlpErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_CorrectableErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "bad-tlp-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/bad-tlp-errors"
func (n *Component_Pcie_CorrectableErrors_BadTlpErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_CorrectableErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bad-tlp-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_CorrectableErrors).BadTlpErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_CorrectableErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_CorrectableErrors_HdrLogOverflowErrorsPath represents the /openconfig-platform/components/component/state/pcie/correctable-errors/hdr-log-overflow-errors YANG schema element.
type Component_Pcie_CorrectableErrors_HdrLogOverflowErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_CorrectableErrors_HdrLogOverflowErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/correctable-errors/hdr-log-overflow-errors YANG schema element.
type Component_Pcie_CorrectableErrors_HdrLogOverflowErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "hdr-log-overflow-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/hdr-log-overflow-errors"
func (n *Component_Pcie_CorrectableErrors_HdrLogOverflowErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_CorrectableErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"hdr-log-overflow-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_CorrectableErrors).HdrLogOverflowErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_CorrectableErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "hdr-log-overflow-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/hdr-log-overflow-errors"
func (n *Component_Pcie_CorrectableErrors_HdrLogOverflowErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_CorrectableErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"hdr-log-overflow-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_CorrectableErrors).HdrLogOverflowErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_CorrectableErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_CorrectableErrors_InternalErrorsPath represents the /openconfig-platform/components/component/state/pcie/correctable-errors/internal-errors YANG schema element.
type Component_Pcie_CorrectableErrors_InternalErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_CorrectableErrors_InternalErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/correctable-errors/internal-errors YANG schema element.
type Component_Pcie_CorrectableErrors_InternalErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "internal-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/internal-errors"
func (n *Component_Pcie_CorrectableErrors_InternalErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_CorrectableErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"internal-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_CorrectableErrors).InternalErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_CorrectableErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "internal-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/internal-errors"
func (n *Component_Pcie_CorrectableErrors_InternalErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_CorrectableErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"internal-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_CorrectableErrors).InternalErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_CorrectableErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_CorrectableErrors_ReceiverErrorsPath represents the /openconfig-platform/components/component/state/pcie/correctable-errors/receiver-errors YANG schema element.
type Component_Pcie_CorrectableErrors_ReceiverErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_CorrectableErrors_ReceiverErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/correctable-errors/receiver-errors YANG schema element.
type Component_Pcie_CorrectableErrors_ReceiverErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "receiver-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/receiver-errors"
func (n *Component_Pcie_CorrectableErrors_ReceiverErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_CorrectableErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"receiver-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_CorrectableErrors).ReceiverErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_CorrectableErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "receiver-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/receiver-errors"
func (n *Component_Pcie_CorrectableErrors_ReceiverErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_CorrectableErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"receiver-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_CorrectableErrors).ReceiverErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_CorrectableErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_CorrectableErrors_RelayRolloverErrorsPath represents the /openconfig-platform/components/component/state/pcie/correctable-errors/relay-rollover-errors YANG schema element.
type Component_Pcie_CorrectableErrors_RelayRolloverErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_CorrectableErrors_RelayRolloverErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/correctable-errors/relay-rollover-errors YANG schema element.
type Component_Pcie_CorrectableErrors_RelayRolloverErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "relay-rollover-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/relay-rollover-errors"
func (n *Component_Pcie_CorrectableErrors_RelayRolloverErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_CorrectableErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"relay-rollover-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_CorrectableErrors).RelayRolloverErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_CorrectableErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "relay-rollover-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/relay-rollover-errors"
func (n *Component_Pcie_CorrectableErrors_RelayRolloverErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_CorrectableErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"relay-rollover-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_CorrectableErrors).RelayRolloverErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_CorrectableErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_CorrectableErrors_ReplayTimeoutErrorsPath represents the /openconfig-platform/components/component/state/pcie/correctable-errors/replay-timeout-errors YANG schema element.
type Component_Pcie_CorrectableErrors_ReplayTimeoutErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_CorrectableErrors_ReplayTimeoutErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/correctable-errors/replay-timeout-errors YANG schema element.
type Component_Pcie_CorrectableErrors_ReplayTimeoutErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "replay-timeout-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/replay-timeout-errors"
func (n *Component_Pcie_CorrectableErrors_ReplayTimeoutErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_CorrectableErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"replay-timeout-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_CorrectableErrors).ReplayTimeoutErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_CorrectableErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "replay-timeout-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/replay-timeout-errors"
func (n *Component_Pcie_CorrectableErrors_ReplayTimeoutErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_CorrectableErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"replay-timeout-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_CorrectableErrors).ReplayTimeoutErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_CorrectableErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_CorrectableErrors_TotalErrorsPath represents the /openconfig-platform/components/component/state/pcie/correctable-errors/total-errors YANG schema element.
type Component_Pcie_CorrectableErrors_TotalErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_CorrectableErrors_TotalErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/correctable-errors/total-errors YANG schema element.
type Component_Pcie_CorrectableErrors_TotalErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "total-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/total-errors"
func (n *Component_Pcie_CorrectableErrors_TotalErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_CorrectableErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_CorrectableErrors).TotalErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_CorrectableErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "total-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/total-errors"
func (n *Component_Pcie_CorrectableErrors_TotalErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_CorrectableErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_CorrectableErrors).TotalErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_CorrectableErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_CorrectableErrorsPath represents the /openconfig-platform/components/component/state/pcie/correctable-errors YANG schema element.
type Component_Pcie_CorrectableErrorsPath struct {
	*ygnmi.NodePath
}

// Component_Pcie_CorrectableErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/correctable-errors YANG schema element.
type Component_Pcie_CorrectableErrorsPathAny struct {
	*ygnmi.NodePath
}

// AdvisoryNonFatalErrors (leaf): Number of advisory non fatal errors detected by PCIe device since
// the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "advisory-non-fatal-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/advisory-non-fatal-errors"
func (n *Component_Pcie_CorrectableErrorsPath) AdvisoryNonFatalErrors() *Component_Pcie_CorrectableErrors_AdvisoryNonFatalErrorsPath {
	ps := &Component_Pcie_CorrectableErrors_AdvisoryNonFatalErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"advisory-non-fatal-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdvisoryNonFatalErrors (leaf): Number of advisory non fatal errors detected by PCIe device since
// the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "advisory-non-fatal-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/advisory-non-fatal-errors"
func (n *Component_Pcie_CorrectableErrorsPathAny) AdvisoryNonFatalErrors() *Component_Pcie_CorrectableErrors_AdvisoryNonFatalErrorsPathAny {
	ps := &Component_Pcie_CorrectableErrors_AdvisoryNonFatalErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"advisory-non-fatal-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BadDllpErrors (leaf): Number of DLLPs with bad LCRC detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "bad-dllp-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/bad-dllp-errors"
func (n *Component_Pcie_CorrectableErrorsPath) BadDllpErrors() *Component_Pcie_CorrectableErrors_BadDllpErrorsPath {
	ps := &Component_Pcie_CorrectableErrors_BadDllpErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bad-dllp-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BadDllpErrors (leaf): Number of DLLPs with bad LCRC detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "bad-dllp-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/bad-dllp-errors"
func (n *Component_Pcie_CorrectableErrorsPathAny) BadDllpErrors() *Component_Pcie_CorrectableErrors_BadDllpErrorsPathAny {
	ps := &Component_Pcie_CorrectableErrors_BadDllpErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bad-dllp-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BadTlpErrors (leaf): Number of TLPs with bad LCRC detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "bad-tlp-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/bad-tlp-errors"
func (n *Component_Pcie_CorrectableErrorsPath) BadTlpErrors() *Component_Pcie_CorrectableErrors_BadTlpErrorsPath {
	ps := &Component_Pcie_CorrectableErrors_BadTlpErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bad-tlp-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BadTlpErrors (leaf): Number of TLPs with bad LCRC detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "bad-tlp-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/bad-tlp-errors"
func (n *Component_Pcie_CorrectableErrorsPathAny) BadTlpErrors() *Component_Pcie_CorrectableErrors_BadTlpErrorsPathAny {
	ps := &Component_Pcie_CorrectableErrors_BadTlpErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bad-tlp-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HdrLogOverflowErrors (leaf): Number of header log overflow errors detected by PCIe device since
// the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "hdr-log-overflow-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/hdr-log-overflow-errors"
func (n *Component_Pcie_CorrectableErrorsPath) HdrLogOverflowErrors() *Component_Pcie_CorrectableErrors_HdrLogOverflowErrorsPath {
	ps := &Component_Pcie_CorrectableErrors_HdrLogOverflowErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"hdr-log-overflow-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HdrLogOverflowErrors (leaf): Number of header log overflow errors detected by PCIe device since
// the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "hdr-log-overflow-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/hdr-log-overflow-errors"
func (n *Component_Pcie_CorrectableErrorsPathAny) HdrLogOverflowErrors() *Component_Pcie_CorrectableErrors_HdrLogOverflowErrorsPathAny {
	ps := &Component_Pcie_CorrectableErrors_HdrLogOverflowErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"hdr-log-overflow-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InternalErrors (leaf): Number of internal errors detected by PCIe device since the system
// booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "internal-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/internal-errors"
func (n *Component_Pcie_CorrectableErrorsPath) InternalErrors() *Component_Pcie_CorrectableErrors_InternalErrorsPath {
	ps := &Component_Pcie_CorrectableErrors_InternalErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"internal-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InternalErrors (leaf): Number of internal errors detected by PCIe device since the system
// booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "internal-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/internal-errors"
func (n *Component_Pcie_CorrectableErrorsPathAny) InternalErrors() *Component_Pcie_CorrectableErrors_InternalErrorsPathAny {
	ps := &Component_Pcie_CorrectableErrors_InternalErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"internal-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReceiverErrors (leaf): Number of receiver errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "receiver-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/receiver-errors"
func (n *Component_Pcie_CorrectableErrorsPath) ReceiverErrors() *Component_Pcie_CorrectableErrors_ReceiverErrorsPath {
	ps := &Component_Pcie_CorrectableErrors_ReceiverErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"receiver-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReceiverErrors (leaf): Number of receiver errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "receiver-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/receiver-errors"
func (n *Component_Pcie_CorrectableErrorsPathAny) ReceiverErrors() *Component_Pcie_CorrectableErrors_ReceiverErrorsPathAny {
	ps := &Component_Pcie_CorrectableErrors_ReceiverErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"receiver-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RelayRolloverErrors (leaf): Number of relay rollover errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "relay-rollover-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/relay-rollover-errors"
func (n *Component_Pcie_CorrectableErrorsPath) RelayRolloverErrors() *Component_Pcie_CorrectableErrors_RelayRolloverErrorsPath {
	ps := &Component_Pcie_CorrectableErrors_RelayRolloverErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"relay-rollover-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RelayRolloverErrors (leaf): Number of relay rollover errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "relay-rollover-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/relay-rollover-errors"
func (n *Component_Pcie_CorrectableErrorsPathAny) RelayRolloverErrors() *Component_Pcie_CorrectableErrors_RelayRolloverErrorsPathAny {
	ps := &Component_Pcie_CorrectableErrors_RelayRolloverErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"relay-rollover-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReplayTimeoutErrors (leaf): Number of replay timeout errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "replay-timeout-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/replay-timeout-errors"
func (n *Component_Pcie_CorrectableErrorsPath) ReplayTimeoutErrors() *Component_Pcie_CorrectableErrors_ReplayTimeoutErrorsPath {
	ps := &Component_Pcie_CorrectableErrors_ReplayTimeoutErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"replay-timeout-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReplayTimeoutErrors (leaf): Number of replay timeout errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "replay-timeout-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/replay-timeout-errors"
func (n *Component_Pcie_CorrectableErrorsPathAny) ReplayTimeoutErrors() *Component_Pcie_CorrectableErrors_ReplayTimeoutErrorsPathAny {
	ps := &Component_Pcie_CorrectableErrors_ReplayTimeoutErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"replay-timeout-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalErrors (leaf): Total number of correctable errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "total-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/total-errors"
func (n *Component_Pcie_CorrectableErrorsPath) TotalErrors() *Component_Pcie_CorrectableErrors_TotalErrorsPath {
	ps := &Component_Pcie_CorrectableErrors_TotalErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalErrors (leaf): Total number of correctable errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "total-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/total-errors"
func (n *Component_Pcie_CorrectableErrorsPathAny) TotalErrors() *Component_Pcie_CorrectableErrors_TotalErrorsPathAny {
	ps := &Component_Pcie_CorrectableErrors_TotalErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Pcie_CorrectableErrorsPath) State() ygnmi.SingletonQuery[*oc.Component_Pcie_CorrectableErrors] {
	return ygnmi.NewSingletonQuery[*oc.Component_Pcie_CorrectableErrors](
		"Component_Pcie_CorrectableErrors",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Pcie_CorrectableErrorsPathAny) State() ygnmi.WildcardQuery[*oc.Component_Pcie_CorrectableErrors] {
	return ygnmi.NewWildcardQuery[*oc.Component_Pcie_CorrectableErrors](
		"Component_Pcie_CorrectableErrors",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_FatalErrors_AcsViolationErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/acs-violation-errors YANG schema element.
type Component_Pcie_FatalErrors_AcsViolationErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_FatalErrors_AcsViolationErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/acs-violation-errors YANG schema element.
type Component_Pcie_FatalErrors_AcsViolationErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "acs-violation-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/acs-violation-errors"
func (n *Component_Pcie_FatalErrors_AcsViolationErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"acs-violation-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).AcsViolationErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "acs-violation-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/acs-violation-errors"
func (n *Component_Pcie_FatalErrors_AcsViolationErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"acs-violation-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).AcsViolationErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_FatalErrors_AtomicOpBlockedErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/atomic-op-blocked-errors YANG schema element.
type Component_Pcie_FatalErrors_AtomicOpBlockedErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_FatalErrors_AtomicOpBlockedErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/atomic-op-blocked-errors YANG schema element.
type Component_Pcie_FatalErrors_AtomicOpBlockedErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "atomic-op-blocked-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/atomic-op-blocked-errors"
func (n *Component_Pcie_FatalErrors_AtomicOpBlockedErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"atomic-op-blocked-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).AtomicOpBlockedErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "atomic-op-blocked-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/atomic-op-blocked-errors"
func (n *Component_Pcie_FatalErrors_AtomicOpBlockedErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"atomic-op-blocked-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).AtomicOpBlockedErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_FatalErrors_BlockedTlpErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/blocked-tlp-errors YANG schema element.
type Component_Pcie_FatalErrors_BlockedTlpErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_FatalErrors_BlockedTlpErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/blocked-tlp-errors YANG schema element.
type Component_Pcie_FatalErrors_BlockedTlpErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "blocked-tlp-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/blocked-tlp-errors"
func (n *Component_Pcie_FatalErrors_BlockedTlpErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"blocked-tlp-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).BlockedTlpErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "blocked-tlp-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/blocked-tlp-errors"
func (n *Component_Pcie_FatalErrors_BlockedTlpErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"blocked-tlp-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).BlockedTlpErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_FatalErrors_CompletionAbortErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/completion-abort-errors YANG schema element.
type Component_Pcie_FatalErrors_CompletionAbortErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_FatalErrors_CompletionAbortErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/completion-abort-errors YANG schema element.
type Component_Pcie_FatalErrors_CompletionAbortErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "completion-abort-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/completion-abort-errors"
func (n *Component_Pcie_FatalErrors_CompletionAbortErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"completion-abort-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).CompletionAbortErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "completion-abort-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/completion-abort-errors"
func (n *Component_Pcie_FatalErrors_CompletionAbortErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"completion-abort-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).CompletionAbortErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_FatalErrors_CompletionTimeoutErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/completion-timeout-errors YANG schema element.
type Component_Pcie_FatalErrors_CompletionTimeoutErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_FatalErrors_CompletionTimeoutErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/completion-timeout-errors YANG schema element.
type Component_Pcie_FatalErrors_CompletionTimeoutErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "completion-timeout-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/completion-timeout-errors"
func (n *Component_Pcie_FatalErrors_CompletionTimeoutErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"completion-timeout-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).CompletionTimeoutErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "completion-timeout-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/completion-timeout-errors"
func (n *Component_Pcie_FatalErrors_CompletionTimeoutErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"completion-timeout-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).CompletionTimeoutErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_FatalErrors_DataLinkErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/data-link-errors YANG schema element.
type Component_Pcie_FatalErrors_DataLinkErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_FatalErrors_DataLinkErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/data-link-errors YANG schema element.
type Component_Pcie_FatalErrors_DataLinkErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "data-link-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/data-link-errors"
func (n *Component_Pcie_FatalErrors_DataLinkErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"data-link-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).DataLinkErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "data-link-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/data-link-errors"
func (n *Component_Pcie_FatalErrors_DataLinkErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"data-link-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).DataLinkErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_FatalErrors_EcrcErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/ecrc-errors YANG schema element.
type Component_Pcie_FatalErrors_EcrcErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_FatalErrors_EcrcErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/ecrc-errors YANG schema element.
type Component_Pcie_FatalErrors_EcrcErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "ecrc-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/ecrc-errors"
func (n *Component_Pcie_FatalErrors_EcrcErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"ecrc-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).EcrcErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "ecrc-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/ecrc-errors"
func (n *Component_Pcie_FatalErrors_EcrcErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"ecrc-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).EcrcErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_FatalErrors_FlowControlProtocolErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/flow-control-protocol-errors YANG schema element.
type Component_Pcie_FatalErrors_FlowControlProtocolErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_FatalErrors_FlowControlProtocolErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/flow-control-protocol-errors YANG schema element.
type Component_Pcie_FatalErrors_FlowControlProtocolErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "flow-control-protocol-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/flow-control-protocol-errors"
func (n *Component_Pcie_FatalErrors_FlowControlProtocolErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"flow-control-protocol-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).FlowControlProtocolErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "flow-control-protocol-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/flow-control-protocol-errors"
func (n *Component_Pcie_FatalErrors_FlowControlProtocolErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"flow-control-protocol-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).FlowControlProtocolErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_FatalErrors_InternalErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/internal-errors YANG schema element.
type Component_Pcie_FatalErrors_InternalErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_FatalErrors_InternalErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/internal-errors YANG schema element.
type Component_Pcie_FatalErrors_InternalErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "internal-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/internal-errors"
func (n *Component_Pcie_FatalErrors_InternalErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"internal-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).InternalErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "internal-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/internal-errors"
func (n *Component_Pcie_FatalErrors_InternalErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"internal-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).InternalErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_FatalErrors_MalformedTlpErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/malformed-tlp-errors YANG schema element.
type Component_Pcie_FatalErrors_MalformedTlpErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_FatalErrors_MalformedTlpErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/malformed-tlp-errors YANG schema element.
type Component_Pcie_FatalErrors_MalformedTlpErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "malformed-tlp-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/malformed-tlp-errors"
func (n *Component_Pcie_FatalErrors_MalformedTlpErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"malformed-tlp-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).MalformedTlpErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "malformed-tlp-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/malformed-tlp-errors"
func (n *Component_Pcie_FatalErrors_MalformedTlpErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"malformed-tlp-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).MalformedTlpErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_FatalErrors_PoisonedTlpErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/poisoned-tlp-errors YANG schema element.
type Component_Pcie_FatalErrors_PoisonedTlpErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_FatalErrors_PoisonedTlpErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/poisoned-tlp-errors YANG schema element.
type Component_Pcie_FatalErrors_PoisonedTlpErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "poisoned-tlp-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/poisoned-tlp-errors"
func (n *Component_Pcie_FatalErrors_PoisonedTlpErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"poisoned-tlp-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).PoisonedTlpErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "poisoned-tlp-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/poisoned-tlp-errors"
func (n *Component_Pcie_FatalErrors_PoisonedTlpErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"poisoned-tlp-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).PoisonedTlpErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_FatalErrors_ReceiverOverflowErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/receiver-overflow-errors YANG schema element.
type Component_Pcie_FatalErrors_ReceiverOverflowErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_FatalErrors_ReceiverOverflowErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/receiver-overflow-errors YANG schema element.
type Component_Pcie_FatalErrors_ReceiverOverflowErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "receiver-overflow-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/receiver-overflow-errors"
func (n *Component_Pcie_FatalErrors_ReceiverOverflowErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"receiver-overflow-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).ReceiverOverflowErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "receiver-overflow-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/receiver-overflow-errors"
func (n *Component_Pcie_FatalErrors_ReceiverOverflowErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"receiver-overflow-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).ReceiverOverflowErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_FatalErrors_SurpriseDownErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/surprise-down-errors YANG schema element.
type Component_Pcie_FatalErrors_SurpriseDownErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_FatalErrors_SurpriseDownErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/surprise-down-errors YANG schema element.
type Component_Pcie_FatalErrors_SurpriseDownErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "surprise-down-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/surprise-down-errors"
func (n *Component_Pcie_FatalErrors_SurpriseDownErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"surprise-down-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).SurpriseDownErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "surprise-down-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/surprise-down-errors"
func (n *Component_Pcie_FatalErrors_SurpriseDownErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"surprise-down-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).SurpriseDownErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_FatalErrors_TlpPrefixBlockedErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/tlp-prefix-blocked-errors YANG schema element.
type Component_Pcie_FatalErrors_TlpPrefixBlockedErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_FatalErrors_TlpPrefixBlockedErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/tlp-prefix-blocked-errors YANG schema element.
type Component_Pcie_FatalErrors_TlpPrefixBlockedErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "tlp-prefix-blocked-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/tlp-prefix-blocked-errors"
func (n *Component_Pcie_FatalErrors_TlpPrefixBlockedErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"tlp-prefix-blocked-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).TlpPrefixBlockedErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "tlp-prefix-blocked-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/tlp-prefix-blocked-errors"
func (n *Component_Pcie_FatalErrors_TlpPrefixBlockedErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"tlp-prefix-blocked-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).TlpPrefixBlockedErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_FatalErrors_TotalErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/total-errors YANG schema element.
type Component_Pcie_FatalErrors_TotalErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_FatalErrors_TotalErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/total-errors YANG schema element.
type Component_Pcie_FatalErrors_TotalErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "total-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/total-errors"
func (n *Component_Pcie_FatalErrors_TotalErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).TotalErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "total-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/total-errors"
func (n *Component_Pcie_FatalErrors_TotalErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).TotalErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_FatalErrors_UndefinedErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/undefined-errors YANG schema element.
type Component_Pcie_FatalErrors_UndefinedErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_FatalErrors_UndefinedErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/undefined-errors YANG schema element.
type Component_Pcie_FatalErrors_UndefinedErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "undefined-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/undefined-errors"
func (n *Component_Pcie_FatalErrors_UndefinedErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"undefined-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).UndefinedErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "undefined-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/undefined-errors"
func (n *Component_Pcie_FatalErrors_UndefinedErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"undefined-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).UndefinedErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_FatalErrors_UnexpectedCompletionErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/unexpected-completion-errors YANG schema element.
type Component_Pcie_FatalErrors_UnexpectedCompletionErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_FatalErrors_UnexpectedCompletionErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/unexpected-completion-errors YANG schema element.
type Component_Pcie_FatalErrors_UnexpectedCompletionErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "unexpected-completion-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/unexpected-completion-errors"
func (n *Component_Pcie_FatalErrors_UnexpectedCompletionErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"unexpected-completion-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).UnexpectedCompletionErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "unexpected-completion-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/unexpected-completion-errors"
func (n *Component_Pcie_FatalErrors_UnexpectedCompletionErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"unexpected-completion-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).UnexpectedCompletionErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_FatalErrors_UnsupportedRequestErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/unsupported-request-errors YANG schema element.
type Component_Pcie_FatalErrors_UnsupportedRequestErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_FatalErrors_UnsupportedRequestErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/unsupported-request-errors YANG schema element.
type Component_Pcie_FatalErrors_UnsupportedRequestErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "unsupported-request-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/unsupported-request-errors"
func (n *Component_Pcie_FatalErrors_UnsupportedRequestErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"unsupported-request-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).UnsupportedRequestErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "unsupported-request-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/unsupported-request-errors"
func (n *Component_Pcie_FatalErrors_UnsupportedRequestErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"unsupported-request-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).UnsupportedRequestErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_FatalErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors YANG schema element.
type Component_Pcie_FatalErrorsPath struct {
	*ygnmi.NodePath
}

// Component_Pcie_FatalErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors YANG schema element.
type Component_Pcie_FatalErrorsPathAny struct {
	*ygnmi.NodePath
}

// AcsViolationErrors (leaf): Number of access control errors detected by PCIe device since
// the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "acs-violation-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/acs-violation-errors"
func (n *Component_Pcie_FatalErrorsPath) AcsViolationErrors() *Component_Pcie_FatalErrors_AcsViolationErrorsPath {
	ps := &Component_Pcie_FatalErrors_AcsViolationErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"acs-violation-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AcsViolationErrors (leaf): Number of access control errors detected by PCIe device since
// the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "acs-violation-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/acs-violation-errors"
func (n *Component_Pcie_FatalErrorsPathAny) AcsViolationErrors() *Component_Pcie_FatalErrors_AcsViolationErrorsPathAny {
	ps := &Component_Pcie_FatalErrors_AcsViolationErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"acs-violation-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AtomicOpBlockedErrors (leaf): Number of atomic operation blocked errors detected by PCIe
// device since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "atomic-op-blocked-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/atomic-op-blocked-errors"
func (n *Component_Pcie_FatalErrorsPath) AtomicOpBlockedErrors() *Component_Pcie_FatalErrors_AtomicOpBlockedErrorsPath {
	ps := &Component_Pcie_FatalErrors_AtomicOpBlockedErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"atomic-op-blocked-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AtomicOpBlockedErrors (leaf): Number of atomic operation blocked errors detected by PCIe
// device since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "atomic-op-blocked-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/atomic-op-blocked-errors"
func (n *Component_Pcie_FatalErrorsPathAny) AtomicOpBlockedErrors() *Component_Pcie_FatalErrors_AtomicOpBlockedErrorsPathAny {
	ps := &Component_Pcie_FatalErrors_AtomicOpBlockedErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"atomic-op-blocked-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BlockedTlpErrors (leaf): Number of blocked TLP errors detected by PCIe device since
// the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "blocked-tlp-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/blocked-tlp-errors"
func (n *Component_Pcie_FatalErrorsPath) BlockedTlpErrors() *Component_Pcie_FatalErrors_BlockedTlpErrorsPath {
	ps := &Component_Pcie_FatalErrors_BlockedTlpErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"blocked-tlp-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BlockedTlpErrors (leaf): Number of blocked TLP errors detected by PCIe device since
// the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "blocked-tlp-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/blocked-tlp-errors"
func (n *Component_Pcie_FatalErrorsPathAny) BlockedTlpErrors() *Component_Pcie_FatalErrors_BlockedTlpErrorsPathAny {
	ps := &Component_Pcie_FatalErrors_BlockedTlpErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"blocked-tlp-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CompletionAbortErrors (leaf): Number of completion abort errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "completion-abort-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/completion-abort-errors"
func (n *Component_Pcie_FatalErrorsPath) CompletionAbortErrors() *Component_Pcie_FatalErrors_CompletionAbortErrorsPath {
	ps := &Component_Pcie_FatalErrors_CompletionAbortErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"completion-abort-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CompletionAbortErrors (leaf): Number of completion abort errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "completion-abort-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/completion-abort-errors"
func (n *Component_Pcie_FatalErrorsPathAny) CompletionAbortErrors() *Component_Pcie_FatalErrors_CompletionAbortErrorsPathAny {
	ps := &Component_Pcie_FatalErrors_CompletionAbortErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"completion-abort-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CompletionTimeoutErrors (leaf): Number of completion timeout errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "completion-timeout-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/completion-timeout-errors"
func (n *Component_Pcie_FatalErrorsPath) CompletionTimeoutErrors() *Component_Pcie_FatalErrors_CompletionTimeoutErrorsPath {
	ps := &Component_Pcie_FatalErrors_CompletionTimeoutErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"completion-timeout-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CompletionTimeoutErrors (leaf): Number of completion timeout errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "completion-timeout-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/completion-timeout-errors"
func (n *Component_Pcie_FatalErrorsPathAny) CompletionTimeoutErrors() *Component_Pcie_FatalErrors_CompletionTimeoutErrorsPathAny {
	ps := &Component_Pcie_FatalErrors_CompletionTimeoutErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"completion-timeout-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DataLinkErrors (leaf): Number of data-link errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "data-link-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/data-link-errors"
func (n *Component_Pcie_FatalErrorsPath) DataLinkErrors() *Component_Pcie_FatalErrors_DataLinkErrorsPath {
	ps := &Component_Pcie_FatalErrors_DataLinkErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"data-link-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DataLinkErrors (leaf): Number of data-link errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "data-link-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/data-link-errors"
func (n *Component_Pcie_FatalErrorsPathAny) DataLinkErrors() *Component_Pcie_FatalErrors_DataLinkErrorsPathAny {
	ps := &Component_Pcie_FatalErrors_DataLinkErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"data-link-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcrcErrors (leaf): Number of ECRC errors detected by PCIe device since the system
// booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "ecrc-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/ecrc-errors"
func (n *Component_Pcie_FatalErrorsPath) EcrcErrors() *Component_Pcie_FatalErrors_EcrcErrorsPath {
	ps := &Component_Pcie_FatalErrors_EcrcErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ecrc-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcrcErrors (leaf): Number of ECRC errors detected by PCIe device since the system
// booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "ecrc-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/ecrc-errors"
func (n *Component_Pcie_FatalErrorsPathAny) EcrcErrors() *Component_Pcie_FatalErrors_EcrcErrorsPathAny {
	ps := &Component_Pcie_FatalErrors_EcrcErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ecrc-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FlowControlProtocolErrors (leaf): Number of flow control protocol errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "flow-control-protocol-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/flow-control-protocol-errors"
func (n *Component_Pcie_FatalErrorsPath) FlowControlProtocolErrors() *Component_Pcie_FatalErrors_FlowControlProtocolErrorsPath {
	ps := &Component_Pcie_FatalErrors_FlowControlProtocolErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"flow-control-protocol-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FlowControlProtocolErrors (leaf): Number of flow control protocol errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "flow-control-protocol-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/flow-control-protocol-errors"
func (n *Component_Pcie_FatalErrorsPathAny) FlowControlProtocolErrors() *Component_Pcie_FatalErrors_FlowControlProtocolErrorsPathAny {
	ps := &Component_Pcie_FatalErrors_FlowControlProtocolErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"flow-control-protocol-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InternalErrors (leaf): Number of internal errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "internal-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/internal-errors"
func (n *Component_Pcie_FatalErrorsPath) InternalErrors() *Component_Pcie_FatalErrors_InternalErrorsPath {
	ps := &Component_Pcie_FatalErrors_InternalErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"internal-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InternalErrors (leaf): Number of internal errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "internal-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/internal-errors"
func (n *Component_Pcie_FatalErrorsPathAny) InternalErrors() *Component_Pcie_FatalErrors_InternalErrorsPathAny {
	ps := &Component_Pcie_FatalErrors_InternalErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"internal-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MalformedTlpErrors (leaf): Number of malformed TLP errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "malformed-tlp-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/malformed-tlp-errors"
func (n *Component_Pcie_FatalErrorsPath) MalformedTlpErrors() *Component_Pcie_FatalErrors_MalformedTlpErrorsPath {
	ps := &Component_Pcie_FatalErrors_MalformedTlpErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"malformed-tlp-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MalformedTlpErrors (leaf): Number of malformed TLP errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "malformed-tlp-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/malformed-tlp-errors"
func (n *Component_Pcie_FatalErrorsPathAny) MalformedTlpErrors() *Component_Pcie_FatalErrors_MalformedTlpErrorsPathAny {
	ps := &Component_Pcie_FatalErrors_MalformedTlpErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"malformed-tlp-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PoisonedTlpErrors (leaf): Number of poisoned TLP errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "poisoned-tlp-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/poisoned-tlp-errors"
func (n *Component_Pcie_FatalErrorsPath) PoisonedTlpErrors() *Component_Pcie_FatalErrors_PoisonedTlpErrorsPath {
	ps := &Component_Pcie_FatalErrors_PoisonedTlpErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"poisoned-tlp-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PoisonedTlpErrors (leaf): Number of poisoned TLP errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "poisoned-tlp-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/poisoned-tlp-errors"
func (n *Component_Pcie_FatalErrorsPathAny) PoisonedTlpErrors() *Component_Pcie_FatalErrors_PoisonedTlpErrorsPathAny {
	ps := &Component_Pcie_FatalErrors_PoisonedTlpErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"poisoned-tlp-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReceiverOverflowErrors (leaf): Number of receiver overflow errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "receiver-overflow-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/receiver-overflow-errors"
func (n *Component_Pcie_FatalErrorsPath) ReceiverOverflowErrors() *Component_Pcie_FatalErrors_ReceiverOverflowErrorsPath {
	ps := &Component_Pcie_FatalErrors_ReceiverOverflowErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"receiver-overflow-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReceiverOverflowErrors (leaf): Number of receiver overflow errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "receiver-overflow-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/receiver-overflow-errors"
func (n *Component_Pcie_FatalErrorsPathAny) ReceiverOverflowErrors() *Component_Pcie_FatalErrors_ReceiverOverflowErrorsPathAny {
	ps := &Component_Pcie_FatalErrors_ReceiverOverflowErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"receiver-overflow-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SurpriseDownErrors (leaf): Number of unexpected link down errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "surprise-down-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/surprise-down-errors"
func (n *Component_Pcie_FatalErrorsPath) SurpriseDownErrors() *Component_Pcie_FatalErrors_SurpriseDownErrorsPath {
	ps := &Component_Pcie_FatalErrors_SurpriseDownErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"surprise-down-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SurpriseDownErrors (leaf): Number of unexpected link down errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "surprise-down-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/surprise-down-errors"
func (n *Component_Pcie_FatalErrorsPathAny) SurpriseDownErrors() *Component_Pcie_FatalErrors_SurpriseDownErrorsPathAny {
	ps := &Component_Pcie_FatalErrors_SurpriseDownErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"surprise-down-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TlpPrefixBlockedErrors (leaf): Number of TLP prefix blocked errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "tlp-prefix-blocked-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/tlp-prefix-blocked-errors"
func (n *Component_Pcie_FatalErrorsPath) TlpPrefixBlockedErrors() *Component_Pcie_FatalErrors_TlpPrefixBlockedErrorsPath {
	ps := &Component_Pcie_FatalErrors_TlpPrefixBlockedErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"tlp-prefix-blocked-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TlpPrefixBlockedErrors (leaf): Number of TLP prefix blocked errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "tlp-prefix-blocked-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/tlp-prefix-blocked-errors"
func (n *Component_Pcie_FatalErrorsPathAny) TlpPrefixBlockedErrors() *Component_Pcie_FatalErrors_TlpPrefixBlockedErrorsPathAny {
	ps := &Component_Pcie_FatalErrors_TlpPrefixBlockedErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tlp-prefix-blocked-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalErrors (leaf): Total number of uncorrectable errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "total-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/total-errors"
func (n *Component_Pcie_FatalErrorsPath) TotalErrors() *Component_Pcie_FatalErrors_TotalErrorsPath {
	ps := &Component_Pcie_FatalErrors_TotalErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalErrors (leaf): Total number of uncorrectable errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "total-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/total-errors"
func (n *Component_Pcie_FatalErrorsPathAny) TotalErrors() *Component_Pcie_FatalErrors_TotalErrorsPathAny {
	ps := &Component_Pcie_FatalErrors_TotalErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UndefinedErrors (leaf): Number of undefined errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "undefined-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/undefined-errors"
func (n *Component_Pcie_FatalErrorsPath) UndefinedErrors() *Component_Pcie_FatalErrors_UndefinedErrorsPath {
	ps := &Component_Pcie_FatalErrors_UndefinedErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"undefined-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UndefinedErrors (leaf): Number of undefined errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "undefined-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/undefined-errors"
func (n *Component_Pcie_FatalErrorsPathAny) UndefinedErrors() *Component_Pcie_FatalErrors_UndefinedErrorsPathAny {
	ps := &Component_Pcie_FatalErrors_UndefinedErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"undefined-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnexpectedCompletionErrors (leaf): Number of unexpected completion errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "unexpected-completion-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/unexpected-completion-errors"
func (n *Component_Pcie_FatalErrorsPath) UnexpectedCompletionErrors() *Component_Pcie_FatalErrors_UnexpectedCompletionErrorsPath {
	ps := &Component_Pcie_FatalErrors_UnexpectedCompletionErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"unexpected-completion-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnexpectedCompletionErrors (leaf): Number of unexpected completion errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "unexpected-completion-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/unexpected-completion-errors"
func (n *Component_Pcie_FatalErrorsPathAny) UnexpectedCompletionErrors() *Component_Pcie_FatalErrors_UnexpectedCompletionErrorsPathAny {
	ps := &Component_Pcie_FatalErrors_UnexpectedCompletionErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"unexpected-completion-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnsupportedRequestErrors (leaf): Number of unsupported request errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "unsupported-request-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/unsupported-request-errors"
func (n *Component_Pcie_FatalErrorsPath) UnsupportedRequestErrors() *Component_Pcie_FatalErrors_UnsupportedRequestErrorsPath {
	ps := &Component_Pcie_FatalErrors_UnsupportedRequestErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"unsupported-request-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnsupportedRequestErrors (leaf): Number of unsupported request errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "unsupported-request-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/unsupported-request-errors"
func (n *Component_Pcie_FatalErrorsPathAny) UnsupportedRequestErrors() *Component_Pcie_FatalErrors_UnsupportedRequestErrorsPathAny {
	ps := &Component_Pcie_FatalErrors_UnsupportedRequestErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"unsupported-request-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Pcie_FatalErrorsPath) State() ygnmi.SingletonQuery[*oc.Component_Pcie_FatalErrors] {
	return ygnmi.NewSingletonQuery[*oc.Component_Pcie_FatalErrors](
		"Component_Pcie_FatalErrors",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Pcie_FatalErrorsPathAny) State() ygnmi.WildcardQuery[*oc.Component_Pcie_FatalErrors] {
	return ygnmi.NewWildcardQuery[*oc.Component_Pcie_FatalErrors](
		"Component_Pcie_FatalErrors",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_NonFatalErrors_AcsViolationErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/acs-violation-errors YANG schema element.
type Component_Pcie_NonFatalErrors_AcsViolationErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_NonFatalErrors_AcsViolationErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/acs-violation-errors YANG schema element.
type Component_Pcie_NonFatalErrors_AcsViolationErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "acs-violation-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/acs-violation-errors"
func (n *Component_Pcie_NonFatalErrors_AcsViolationErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"acs-violation-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).AcsViolationErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "acs-violation-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/acs-violation-errors"
func (n *Component_Pcie_NonFatalErrors_AcsViolationErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"acs-violation-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).AcsViolationErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_NonFatalErrors_AtomicOpBlockedErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/atomic-op-blocked-errors YANG schema element.
type Component_Pcie_NonFatalErrors_AtomicOpBlockedErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_NonFatalErrors_AtomicOpBlockedErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/atomic-op-blocked-errors YANG schema element.
type Component_Pcie_NonFatalErrors_AtomicOpBlockedErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "atomic-op-blocked-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/atomic-op-blocked-errors"
func (n *Component_Pcie_NonFatalErrors_AtomicOpBlockedErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"atomic-op-blocked-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).AtomicOpBlockedErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "atomic-op-blocked-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/atomic-op-blocked-errors"
func (n *Component_Pcie_NonFatalErrors_AtomicOpBlockedErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"atomic-op-blocked-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).AtomicOpBlockedErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_NonFatalErrors_BlockedTlpErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/blocked-tlp-errors YANG schema element.
type Component_Pcie_NonFatalErrors_BlockedTlpErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_NonFatalErrors_BlockedTlpErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/blocked-tlp-errors YANG schema element.
type Component_Pcie_NonFatalErrors_BlockedTlpErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "blocked-tlp-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/blocked-tlp-errors"
func (n *Component_Pcie_NonFatalErrors_BlockedTlpErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"blocked-tlp-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).BlockedTlpErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "blocked-tlp-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/blocked-tlp-errors"
func (n *Component_Pcie_NonFatalErrors_BlockedTlpErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"blocked-tlp-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).BlockedTlpErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_NonFatalErrors_CompletionAbortErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/completion-abort-errors YANG schema element.
type Component_Pcie_NonFatalErrors_CompletionAbortErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_NonFatalErrors_CompletionAbortErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/completion-abort-errors YANG schema element.
type Component_Pcie_NonFatalErrors_CompletionAbortErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "completion-abort-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/completion-abort-errors"
func (n *Component_Pcie_NonFatalErrors_CompletionAbortErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"completion-abort-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).CompletionAbortErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "completion-abort-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/completion-abort-errors"
func (n *Component_Pcie_NonFatalErrors_CompletionAbortErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"completion-abort-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).CompletionAbortErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_NonFatalErrors_CompletionTimeoutErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/completion-timeout-errors YANG schema element.
type Component_Pcie_NonFatalErrors_CompletionTimeoutErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_NonFatalErrors_CompletionTimeoutErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/completion-timeout-errors YANG schema element.
type Component_Pcie_NonFatalErrors_CompletionTimeoutErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "completion-timeout-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/completion-timeout-errors"
func (n *Component_Pcie_NonFatalErrors_CompletionTimeoutErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"completion-timeout-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).CompletionTimeoutErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "completion-timeout-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/completion-timeout-errors"
func (n *Component_Pcie_NonFatalErrors_CompletionTimeoutErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"completion-timeout-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).CompletionTimeoutErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_NonFatalErrors_DataLinkErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/data-link-errors YANG schema element.
type Component_Pcie_NonFatalErrors_DataLinkErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_NonFatalErrors_DataLinkErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/data-link-errors YANG schema element.
type Component_Pcie_NonFatalErrors_DataLinkErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "data-link-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/data-link-errors"
func (n *Component_Pcie_NonFatalErrors_DataLinkErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"data-link-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).DataLinkErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "data-link-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/data-link-errors"
func (n *Component_Pcie_NonFatalErrors_DataLinkErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"data-link-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).DataLinkErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_NonFatalErrors_EcrcErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/ecrc-errors YANG schema element.
type Component_Pcie_NonFatalErrors_EcrcErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_NonFatalErrors_EcrcErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/ecrc-errors YANG schema element.
type Component_Pcie_NonFatalErrors_EcrcErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "ecrc-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/ecrc-errors"
func (n *Component_Pcie_NonFatalErrors_EcrcErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"ecrc-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).EcrcErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "ecrc-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/ecrc-errors"
func (n *Component_Pcie_NonFatalErrors_EcrcErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"ecrc-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).EcrcErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_NonFatalErrors_FlowControlProtocolErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/flow-control-protocol-errors YANG schema element.
type Component_Pcie_NonFatalErrors_FlowControlProtocolErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_NonFatalErrors_FlowControlProtocolErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/flow-control-protocol-errors YANG schema element.
type Component_Pcie_NonFatalErrors_FlowControlProtocolErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "flow-control-protocol-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/flow-control-protocol-errors"
func (n *Component_Pcie_NonFatalErrors_FlowControlProtocolErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"flow-control-protocol-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).FlowControlProtocolErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "flow-control-protocol-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/flow-control-protocol-errors"
func (n *Component_Pcie_NonFatalErrors_FlowControlProtocolErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"flow-control-protocol-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).FlowControlProtocolErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_NonFatalErrors_InternalErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/internal-errors YANG schema element.
type Component_Pcie_NonFatalErrors_InternalErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_NonFatalErrors_InternalErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/internal-errors YANG schema element.
type Component_Pcie_NonFatalErrors_InternalErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "internal-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/internal-errors"
func (n *Component_Pcie_NonFatalErrors_InternalErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"internal-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).InternalErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "internal-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/internal-errors"
func (n *Component_Pcie_NonFatalErrors_InternalErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"internal-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).InternalErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_NonFatalErrors_MalformedTlpErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/malformed-tlp-errors YANG schema element.
type Component_Pcie_NonFatalErrors_MalformedTlpErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_NonFatalErrors_MalformedTlpErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/malformed-tlp-errors YANG schema element.
type Component_Pcie_NonFatalErrors_MalformedTlpErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "malformed-tlp-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/malformed-tlp-errors"
func (n *Component_Pcie_NonFatalErrors_MalformedTlpErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"malformed-tlp-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).MalformedTlpErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "malformed-tlp-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/malformed-tlp-errors"
func (n *Component_Pcie_NonFatalErrors_MalformedTlpErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"malformed-tlp-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).MalformedTlpErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_NonFatalErrors_PoisonedTlpErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/poisoned-tlp-errors YANG schema element.
type Component_Pcie_NonFatalErrors_PoisonedTlpErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_NonFatalErrors_PoisonedTlpErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/poisoned-tlp-errors YANG schema element.
type Component_Pcie_NonFatalErrors_PoisonedTlpErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "poisoned-tlp-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/poisoned-tlp-errors"
func (n *Component_Pcie_NonFatalErrors_PoisonedTlpErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"poisoned-tlp-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).PoisonedTlpErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "poisoned-tlp-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/poisoned-tlp-errors"
func (n *Component_Pcie_NonFatalErrors_PoisonedTlpErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"poisoned-tlp-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).PoisonedTlpErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_NonFatalErrors_ReceiverOverflowErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/receiver-overflow-errors YANG schema element.
type Component_Pcie_NonFatalErrors_ReceiverOverflowErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_NonFatalErrors_ReceiverOverflowErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/receiver-overflow-errors YANG schema element.
type Component_Pcie_NonFatalErrors_ReceiverOverflowErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "receiver-overflow-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/receiver-overflow-errors"
func (n *Component_Pcie_NonFatalErrors_ReceiverOverflowErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"receiver-overflow-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).ReceiverOverflowErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "receiver-overflow-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/receiver-overflow-errors"
func (n *Component_Pcie_NonFatalErrors_ReceiverOverflowErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"receiver-overflow-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).ReceiverOverflowErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_NonFatalErrors_SurpriseDownErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/surprise-down-errors YANG schema element.
type Component_Pcie_NonFatalErrors_SurpriseDownErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_NonFatalErrors_SurpriseDownErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/surprise-down-errors YANG schema element.
type Component_Pcie_NonFatalErrors_SurpriseDownErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "surprise-down-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/surprise-down-errors"
func (n *Component_Pcie_NonFatalErrors_SurpriseDownErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"surprise-down-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).SurpriseDownErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "surprise-down-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/surprise-down-errors"
func (n *Component_Pcie_NonFatalErrors_SurpriseDownErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"surprise-down-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).SurpriseDownErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_NonFatalErrors_TlpPrefixBlockedErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/tlp-prefix-blocked-errors YANG schema element.
type Component_Pcie_NonFatalErrors_TlpPrefixBlockedErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_NonFatalErrors_TlpPrefixBlockedErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/tlp-prefix-blocked-errors YANG schema element.
type Component_Pcie_NonFatalErrors_TlpPrefixBlockedErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "tlp-prefix-blocked-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/tlp-prefix-blocked-errors"
func (n *Component_Pcie_NonFatalErrors_TlpPrefixBlockedErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"tlp-prefix-blocked-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).TlpPrefixBlockedErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "tlp-prefix-blocked-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/tlp-prefix-blocked-errors"
func (n *Component_Pcie_NonFatalErrors_TlpPrefixBlockedErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"tlp-prefix-blocked-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).TlpPrefixBlockedErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_NonFatalErrors_TotalErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/total-errors YANG schema element.
type Component_Pcie_NonFatalErrors_TotalErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_NonFatalErrors_TotalErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/total-errors YANG schema element.
type Component_Pcie_NonFatalErrors_TotalErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "total-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/total-errors"
func (n *Component_Pcie_NonFatalErrors_TotalErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).TotalErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "total-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/total-errors"
func (n *Component_Pcie_NonFatalErrors_TotalErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).TotalErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_NonFatalErrors_UndefinedErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/undefined-errors YANG schema element.
type Component_Pcie_NonFatalErrors_UndefinedErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_NonFatalErrors_UndefinedErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/undefined-errors YANG schema element.
type Component_Pcie_NonFatalErrors_UndefinedErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "undefined-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/undefined-errors"
func (n *Component_Pcie_NonFatalErrors_UndefinedErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"undefined-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).UndefinedErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "undefined-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/undefined-errors"
func (n *Component_Pcie_NonFatalErrors_UndefinedErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"undefined-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).UndefinedErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_NonFatalErrors_UnexpectedCompletionErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/unexpected-completion-errors YANG schema element.
type Component_Pcie_NonFatalErrors_UnexpectedCompletionErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_NonFatalErrors_UnexpectedCompletionErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/unexpected-completion-errors YANG schema element.
type Component_Pcie_NonFatalErrors_UnexpectedCompletionErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "unexpected-completion-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/unexpected-completion-errors"
func (n *Component_Pcie_NonFatalErrors_UnexpectedCompletionErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"unexpected-completion-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).UnexpectedCompletionErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "unexpected-completion-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/unexpected-completion-errors"
func (n *Component_Pcie_NonFatalErrors_UnexpectedCompletionErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"unexpected-completion-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).UnexpectedCompletionErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_NonFatalErrors_UnsupportedRequestErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/unsupported-request-errors YANG schema element.
type Component_Pcie_NonFatalErrors_UnsupportedRequestErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_NonFatalErrors_UnsupportedRequestErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/unsupported-request-errors YANG schema element.
type Component_Pcie_NonFatalErrors_UnsupportedRequestErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "unsupported-request-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/unsupported-request-errors"
func (n *Component_Pcie_NonFatalErrors_UnsupportedRequestErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"unsupported-request-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).UnsupportedRequestErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "unsupported-request-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/unsupported-request-errors"
func (n *Component_Pcie_NonFatalErrors_UnsupportedRequestErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"unsupported-request-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).UnsupportedRequestErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_NonFatalErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors YANG schema element.
type Component_Pcie_NonFatalErrorsPath struct {
	*ygnmi.NodePath
}

// Component_Pcie_NonFatalErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors YANG schema element.
type Component_Pcie_NonFatalErrorsPathAny struct {
	*ygnmi.NodePath
}

// AcsViolationErrors (leaf): Number of access control errors detected by PCIe device since
// the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "acs-violation-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/acs-violation-errors"
func (n *Component_Pcie_NonFatalErrorsPath) AcsViolationErrors() *Component_Pcie_NonFatalErrors_AcsViolationErrorsPath {
	ps := &Component_Pcie_NonFatalErrors_AcsViolationErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"acs-violation-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AcsViolationErrors (leaf): Number of access control errors detected by PCIe device since
// the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "acs-violation-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/acs-violation-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) AcsViolationErrors() *Component_Pcie_NonFatalErrors_AcsViolationErrorsPathAny {
	ps := &Component_Pcie_NonFatalErrors_AcsViolationErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"acs-violation-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AtomicOpBlockedErrors (leaf): Number of atomic operation blocked errors detected by PCIe
// device since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "atomic-op-blocked-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/atomic-op-blocked-errors"
func (n *Component_Pcie_NonFatalErrorsPath) AtomicOpBlockedErrors() *Component_Pcie_NonFatalErrors_AtomicOpBlockedErrorsPath {
	ps := &Component_Pcie_NonFatalErrors_AtomicOpBlockedErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"atomic-op-blocked-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AtomicOpBlockedErrors (leaf): Number of atomic operation blocked errors detected by PCIe
// device since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "atomic-op-blocked-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/atomic-op-blocked-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) AtomicOpBlockedErrors() *Component_Pcie_NonFatalErrors_AtomicOpBlockedErrorsPathAny {
	ps := &Component_Pcie_NonFatalErrors_AtomicOpBlockedErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"atomic-op-blocked-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BlockedTlpErrors (leaf): Number of blocked TLP errors detected by PCIe device since
// the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "blocked-tlp-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/blocked-tlp-errors"
func (n *Component_Pcie_NonFatalErrorsPath) BlockedTlpErrors() *Component_Pcie_NonFatalErrors_BlockedTlpErrorsPath {
	ps := &Component_Pcie_NonFatalErrors_BlockedTlpErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"blocked-tlp-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BlockedTlpErrors (leaf): Number of blocked TLP errors detected by PCIe device since
// the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "blocked-tlp-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/blocked-tlp-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) BlockedTlpErrors() *Component_Pcie_NonFatalErrors_BlockedTlpErrorsPathAny {
	ps := &Component_Pcie_NonFatalErrors_BlockedTlpErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"blocked-tlp-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CompletionAbortErrors (leaf): Number of completion abort errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "completion-abort-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/completion-abort-errors"
func (n *Component_Pcie_NonFatalErrorsPath) CompletionAbortErrors() *Component_Pcie_NonFatalErrors_CompletionAbortErrorsPath {
	ps := &Component_Pcie_NonFatalErrors_CompletionAbortErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"completion-abort-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CompletionAbortErrors (leaf): Number of completion abort errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "completion-abort-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/completion-abort-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) CompletionAbortErrors() *Component_Pcie_NonFatalErrors_CompletionAbortErrorsPathAny {
	ps := &Component_Pcie_NonFatalErrors_CompletionAbortErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"completion-abort-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CompletionTimeoutErrors (leaf): Number of completion timeout errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "completion-timeout-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/completion-timeout-errors"
func (n *Component_Pcie_NonFatalErrorsPath) CompletionTimeoutErrors() *Component_Pcie_NonFatalErrors_CompletionTimeoutErrorsPath {
	ps := &Component_Pcie_NonFatalErrors_CompletionTimeoutErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"completion-timeout-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CompletionTimeoutErrors (leaf): Number of completion timeout errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "completion-timeout-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/completion-timeout-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) CompletionTimeoutErrors() *Component_Pcie_NonFatalErrors_CompletionTimeoutErrorsPathAny {
	ps := &Component_Pcie_NonFatalErrors_CompletionTimeoutErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"completion-timeout-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DataLinkErrors (leaf): Number of data-link errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "data-link-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/data-link-errors"
func (n *Component_Pcie_NonFatalErrorsPath) DataLinkErrors() *Component_Pcie_NonFatalErrors_DataLinkErrorsPath {
	ps := &Component_Pcie_NonFatalErrors_DataLinkErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"data-link-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DataLinkErrors (leaf): Number of data-link errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "data-link-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/data-link-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) DataLinkErrors() *Component_Pcie_NonFatalErrors_DataLinkErrorsPathAny {
	ps := &Component_Pcie_NonFatalErrors_DataLinkErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"data-link-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcrcErrors (leaf): Number of ECRC errors detected by PCIe device since the system
// booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "ecrc-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/ecrc-errors"
func (n *Component_Pcie_NonFatalErrorsPath) EcrcErrors() *Component_Pcie_NonFatalErrors_EcrcErrorsPath {
	ps := &Component_Pcie_NonFatalErrors_EcrcErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ecrc-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcrcErrors (leaf): Number of ECRC errors detected by PCIe device since the system
// booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "ecrc-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/ecrc-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) EcrcErrors() *Component_Pcie_NonFatalErrors_EcrcErrorsPathAny {
	ps := &Component_Pcie_NonFatalErrors_EcrcErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ecrc-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FlowControlProtocolErrors (leaf): Number of flow control protocol errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "flow-control-protocol-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/flow-control-protocol-errors"
func (n *Component_Pcie_NonFatalErrorsPath) FlowControlProtocolErrors() *Component_Pcie_NonFatalErrors_FlowControlProtocolErrorsPath {
	ps := &Component_Pcie_NonFatalErrors_FlowControlProtocolErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"flow-control-protocol-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FlowControlProtocolErrors (leaf): Number of flow control protocol errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "flow-control-protocol-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/flow-control-protocol-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) FlowControlProtocolErrors() *Component_Pcie_NonFatalErrors_FlowControlProtocolErrorsPathAny {
	ps := &Component_Pcie_NonFatalErrors_FlowControlProtocolErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"flow-control-protocol-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InternalErrors (leaf): Number of internal errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "internal-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/internal-errors"
func (n *Component_Pcie_NonFatalErrorsPath) InternalErrors() *Component_Pcie_NonFatalErrors_InternalErrorsPath {
	ps := &Component_Pcie_NonFatalErrors_InternalErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"internal-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InternalErrors (leaf): Number of internal errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "internal-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/internal-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) InternalErrors() *Component_Pcie_NonFatalErrors_InternalErrorsPathAny {
	ps := &Component_Pcie_NonFatalErrors_InternalErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"internal-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MalformedTlpErrors (leaf): Number of malformed TLP errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "malformed-tlp-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/malformed-tlp-errors"
func (n *Component_Pcie_NonFatalErrorsPath) MalformedTlpErrors() *Component_Pcie_NonFatalErrors_MalformedTlpErrorsPath {
	ps := &Component_Pcie_NonFatalErrors_MalformedTlpErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"malformed-tlp-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MalformedTlpErrors (leaf): Number of malformed TLP errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "malformed-tlp-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/malformed-tlp-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) MalformedTlpErrors() *Component_Pcie_NonFatalErrors_MalformedTlpErrorsPathAny {
	ps := &Component_Pcie_NonFatalErrors_MalformedTlpErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"malformed-tlp-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PoisonedTlpErrors (leaf): Number of poisoned TLP errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "poisoned-tlp-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/poisoned-tlp-errors"
func (n *Component_Pcie_NonFatalErrorsPath) PoisonedTlpErrors() *Component_Pcie_NonFatalErrors_PoisonedTlpErrorsPath {
	ps := &Component_Pcie_NonFatalErrors_PoisonedTlpErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"poisoned-tlp-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PoisonedTlpErrors (leaf): Number of poisoned TLP errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "poisoned-tlp-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/poisoned-tlp-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) PoisonedTlpErrors() *Component_Pcie_NonFatalErrors_PoisonedTlpErrorsPathAny {
	ps := &Component_Pcie_NonFatalErrors_PoisonedTlpErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"poisoned-tlp-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReceiverOverflowErrors (leaf): Number of receiver overflow errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "receiver-overflow-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/receiver-overflow-errors"
func (n *Component_Pcie_NonFatalErrorsPath) ReceiverOverflowErrors() *Component_Pcie_NonFatalErrors_ReceiverOverflowErrorsPath {
	ps := &Component_Pcie_NonFatalErrors_ReceiverOverflowErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"receiver-overflow-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReceiverOverflowErrors (leaf): Number of receiver overflow errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "receiver-overflow-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/receiver-overflow-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) ReceiverOverflowErrors() *Component_Pcie_NonFatalErrors_ReceiverOverflowErrorsPathAny {
	ps := &Component_Pcie_NonFatalErrors_ReceiverOverflowErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"receiver-overflow-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SurpriseDownErrors (leaf): Number of unexpected link down errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "surprise-down-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/surprise-down-errors"
func (n *Component_Pcie_NonFatalErrorsPath) SurpriseDownErrors() *Component_Pcie_NonFatalErrors_SurpriseDownErrorsPath {
	ps := &Component_Pcie_NonFatalErrors_SurpriseDownErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"surprise-down-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SurpriseDownErrors (leaf): Number of unexpected link down errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "surprise-down-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/surprise-down-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) SurpriseDownErrors() *Component_Pcie_NonFatalErrors_SurpriseDownErrorsPathAny {
	ps := &Component_Pcie_NonFatalErrors_SurpriseDownErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"surprise-down-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TlpPrefixBlockedErrors (leaf): Number of TLP prefix blocked errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "tlp-prefix-blocked-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/tlp-prefix-blocked-errors"
func (n *Component_Pcie_NonFatalErrorsPath) TlpPrefixBlockedErrors() *Component_Pcie_NonFatalErrors_TlpPrefixBlockedErrorsPath {
	ps := &Component_Pcie_NonFatalErrors_TlpPrefixBlockedErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"tlp-prefix-blocked-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TlpPrefixBlockedErrors (leaf): Number of TLP prefix blocked errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "tlp-prefix-blocked-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/tlp-prefix-blocked-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) TlpPrefixBlockedErrors() *Component_Pcie_NonFatalErrors_TlpPrefixBlockedErrorsPathAny {
	ps := &Component_Pcie_NonFatalErrors_TlpPrefixBlockedErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tlp-prefix-blocked-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalErrors (leaf): Total number of uncorrectable errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "total-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/total-errors"
func (n *Component_Pcie_NonFatalErrorsPath) TotalErrors() *Component_Pcie_NonFatalErrors_TotalErrorsPath {
	ps := &Component_Pcie_NonFatalErrors_TotalErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalErrors (leaf): Total number of uncorrectable errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "total-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/total-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) TotalErrors() *Component_Pcie_NonFatalErrors_TotalErrorsPathAny {
	ps := &Component_Pcie_NonFatalErrors_TotalErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UndefinedErrors (leaf): Number of undefined errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "undefined-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/undefined-errors"
func (n *Component_Pcie_NonFatalErrorsPath) UndefinedErrors() *Component_Pcie_NonFatalErrors_UndefinedErrorsPath {
	ps := &Component_Pcie_NonFatalErrors_UndefinedErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"undefined-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UndefinedErrors (leaf): Number of undefined errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "undefined-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/undefined-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) UndefinedErrors() *Component_Pcie_NonFatalErrors_UndefinedErrorsPathAny {
	ps := &Component_Pcie_NonFatalErrors_UndefinedErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"undefined-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnexpectedCompletionErrors (leaf): Number of unexpected completion errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "unexpected-completion-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/unexpected-completion-errors"
func (n *Component_Pcie_NonFatalErrorsPath) UnexpectedCompletionErrors() *Component_Pcie_NonFatalErrors_UnexpectedCompletionErrorsPath {
	ps := &Component_Pcie_NonFatalErrors_UnexpectedCompletionErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"unexpected-completion-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnexpectedCompletionErrors (leaf): Number of unexpected completion errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "unexpected-completion-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/unexpected-completion-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) UnexpectedCompletionErrors() *Component_Pcie_NonFatalErrors_UnexpectedCompletionErrorsPathAny {
	ps := &Component_Pcie_NonFatalErrors_UnexpectedCompletionErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"unexpected-completion-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnsupportedRequestErrors (leaf): Number of unsupported request errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "unsupported-request-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/unsupported-request-errors"
func (n *Component_Pcie_NonFatalErrorsPath) UnsupportedRequestErrors() *Component_Pcie_NonFatalErrors_UnsupportedRequestErrorsPath {
	ps := &Component_Pcie_NonFatalErrors_UnsupportedRequestErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"unsupported-request-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnsupportedRequestErrors (leaf): Number of unsupported request errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "unsupported-request-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/unsupported-request-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) UnsupportedRequestErrors() *Component_Pcie_NonFatalErrors_UnsupportedRequestErrorsPathAny {
	ps := &Component_Pcie_NonFatalErrors_UnsupportedRequestErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"unsupported-request-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Pcie_NonFatalErrorsPath) State() ygnmi.SingletonQuery[*oc.Component_Pcie_NonFatalErrors] {
	return ygnmi.NewSingletonQuery[*oc.Component_Pcie_NonFatalErrors](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Pcie_NonFatalErrorsPathAny) State() ygnmi.WildcardQuery[*oc.Component_Pcie_NonFatalErrors] {
	return ygnmi.NewWildcardQuery[*oc.Component_Pcie_NonFatalErrors](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_PortPath represents the /openconfig-platform/components/component/port YANG schema element.
type Component_PortPath struct {
	*ygnmi.NodePath
}

// Component_PortPathAny represents the wildcard version of the /openconfig-platform/components/component/port YANG schema element.
type Component_PortPathAny struct {
	*ygnmi.NodePath
}

// BreakoutMode (container): Top-level container for port breakout-mode data.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "breakout-mode"
//	Path from root:       "/components/component/port/breakout-mode"
func (n *Component_PortPath) BreakoutMode() *Component_Port_BreakoutModePath {
	ps := &Component_Port_BreakoutModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"breakout-mode"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// BreakoutMode (container): Top-level container for port breakout-mode data.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "breakout-mode"
//	Path from root:       "/components/component/port/breakout-mode"
func (n *Component_PortPathAny) BreakoutMode() *Component_Port_BreakoutModePathAny {
	ps := &Component_Port_BreakoutModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"breakout-mode"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_PortPath) State() ygnmi.SingletonQuery[*oc.Component_Port] {
	return ygnmi.NewSingletonQuery[*oc.Component_Port](
		"Component_Port",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_PortPathAny) State() ygnmi.WildcardQuery[*oc.Component_Port] {
	return ygnmi.NewWildcardQuery[*oc.Component_Port](
		"Component_Port",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_PortPath) Config() ygnmi.ConfigQuery[*oc.Component_Port] {
	return ygnmi.NewConfigQuery[*oc.Component_Port](
		"Component_Port",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_PortPathAny) Config() ygnmi.WildcardQuery[*oc.Component_Port] {
	return ygnmi.NewWildcardQuery[*oc.Component_Port](
		"Component_Port",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Port_BreakoutModePath represents the /openconfig-platform/components/component/port/breakout-mode YANG schema element.
type Component_Port_BreakoutModePath struct {
	*ygnmi.NodePath
}

// Component_Port_BreakoutModePathAny represents the wildcard version of the /openconfig-platform/components/component/port/breakout-mode YANG schema element.
type Component_Port_BreakoutModePathAny struct {
	*ygnmi.NodePath
}

// GroupAny (list): List of breakout groups.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "groups/group"
//	Path from root:       "/components/component/port/breakout-mode/groups/group"
func (n *Component_Port_BreakoutModePath) GroupAny() *Component_Port_BreakoutMode_GroupPathAny {
	ps := &Component_Port_BreakoutMode_GroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"groups", "group"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// GroupAny (list): List of breakout groups.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "groups/group"
//	Path from root:       "/components/component/port/breakout-mode/groups/group"
func (n *Component_Port_BreakoutModePathAny) GroupAny() *Component_Port_BreakoutMode_GroupPathAny {
	ps := &Component_Port_BreakoutMode_GroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"groups", "group"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// Group (list): List of breakout groups.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "groups/group"
//	Path from root:       "/components/component/port/breakout-mode/groups/group"
//
//	Index: uint8
func (n *Component_Port_BreakoutModePath) Group(Index uint8) *Component_Port_BreakoutMode_GroupPath {
	ps := &Component_Port_BreakoutMode_GroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"groups", "group"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// Group (list): List of breakout groups.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "groups/group"
//	Path from root:       "/components/component/port/breakout-mode/groups/group"
//
//	Index: uint8
func (n *Component_Port_BreakoutModePathAny) Group(Index uint8) *Component_Port_BreakoutMode_GroupPathAny {
	ps := &Component_Port_BreakoutMode_GroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"groups", "group"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// GroupMap (list): List of breakout groups.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "groups/group"
//	Path from root:       "/components/component/port/breakout-mode/groups/group"
func (n *Component_Port_BreakoutModePath) GroupMap() *Component_Port_BreakoutMode_GroupPathMap {
	ps := &Component_Port_BreakoutMode_GroupPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// GroupMap (list): List of breakout groups.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "groups/group"
//	Path from root:       "/components/component/port/breakout-mode/groups/group"
func (n *Component_Port_BreakoutModePathAny) GroupMap() *Component_Port_BreakoutMode_GroupPathMapAny {
	ps := &Component_Port_BreakoutMode_GroupPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Port_BreakoutModePath) State() ygnmi.SingletonQuery[*oc.Component_Port_BreakoutMode] {
	return ygnmi.NewSingletonQuery[*oc.Component_Port_BreakoutMode](
		"Component_Port_BreakoutMode",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Port_BreakoutModePathAny) State() ygnmi.WildcardQuery[*oc.Component_Port_BreakoutMode] {
	return ygnmi.NewWildcardQuery[*oc.Component_Port_BreakoutMode](
		"Component_Port_BreakoutMode",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Port_BreakoutModePath) Config() ygnmi.ConfigQuery[*oc.Component_Port_BreakoutMode] {
	return ygnmi.NewConfigQuery[*oc.Component_Port_BreakoutMode](
		"Component_Port_BreakoutMode",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Port_BreakoutModePathAny) Config() ygnmi.WildcardQuery[*oc.Component_Port_BreakoutMode] {
	return ygnmi.NewWildcardQuery[*oc.Component_Port_BreakoutMode](
		"Component_Port_BreakoutMode",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Port_BreakoutMode_Group_BreakoutSpeedPath represents the /openconfig-platform/components/component/port/breakout-mode/groups/group/state/breakout-speed YANG schema element.
type Component_Port_BreakoutMode_Group_BreakoutSpeedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Port_BreakoutMode_Group_BreakoutSpeedPathAny represents the wildcard version of the /openconfig-platform/components/component/port/breakout-mode/groups/group/state/breakout-speed YANG schema element.
type Component_Port_BreakoutMode_Group_BreakoutSpeedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform-port"
//	Path from parent:     "state/breakout-speed"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/state/breakout-speed"
func (n *Component_Port_BreakoutMode_Group_BreakoutSpeedPath) State() ygnmi.SingletonQuery[oc.E_IfEthernet_ETHERNET_SPEED] {
	return ygnmi.NewSingletonQuery[oc.E_IfEthernet_ETHERNET_SPEED](
		"Component_Port_BreakoutMode_Group",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "breakout-speed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfEthernet_ETHERNET_SPEED, bool) {
			ret := gs.(*oc.Component_Port_BreakoutMode_Group).BreakoutSpeed
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Port_BreakoutMode_Group) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform-port"
//	Path from parent:     "state/breakout-speed"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/state/breakout-speed"
func (n *Component_Port_BreakoutMode_Group_BreakoutSpeedPathAny) State() ygnmi.WildcardQuery[oc.E_IfEthernet_ETHERNET_SPEED] {
	return ygnmi.NewWildcardQuery[oc.E_IfEthernet_ETHERNET_SPEED](
		"Component_Port_BreakoutMode_Group",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "breakout-speed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfEthernet_ETHERNET_SPEED, bool) {
			ret := gs.(*oc.Component_Port_BreakoutMode_Group).BreakoutSpeed
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Port_BreakoutMode_Group) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform-port"
//	Path from parent:     "config/breakout-speed"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/config/breakout-speed"
func (n *Component_Port_BreakoutMode_Group_BreakoutSpeedPath) Config() ygnmi.ConfigQuery[oc.E_IfEthernet_ETHERNET_SPEED] {
	return ygnmi.NewConfigQuery[oc.E_IfEthernet_ETHERNET_SPEED](
		"Component_Port_BreakoutMode_Group",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "breakout-speed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfEthernet_ETHERNET_SPEED, bool) {
			ret := gs.(*oc.Component_Port_BreakoutMode_Group).BreakoutSpeed
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Port_BreakoutMode_Group) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform-port"
//	Path from parent:     "config/breakout-speed"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/config/breakout-speed"
func (n *Component_Port_BreakoutMode_Group_BreakoutSpeedPathAny) Config() ygnmi.WildcardQuery[oc.E_IfEthernet_ETHERNET_SPEED] {
	return ygnmi.NewWildcardQuery[oc.E_IfEthernet_ETHERNET_SPEED](
		"Component_Port_BreakoutMode_Group",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "breakout-speed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfEthernet_ETHERNET_SPEED, bool) {
			ret := gs.(*oc.Component_Port_BreakoutMode_Group).BreakoutSpeed
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Port_BreakoutMode_Group) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Port_BreakoutMode_Group_IndexPath represents the /openconfig-platform/components/component/port/breakout-mode/groups/group/state/index YANG schema element.
type Component_Port_BreakoutMode_Group_IndexPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Port_BreakoutMode_Group_IndexPathAny represents the wildcard version of the /openconfig-platform/components/component/port/breakout-mode/groups/group/state/index YANG schema element.
type Component_Port_BreakoutMode_Group_IndexPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform-port"
//	Path from parent:     "state/index"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/state/index"
func (n *Component_Port_BreakoutMode_Group_IndexPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Component_Port_BreakoutMode_Group",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Port_BreakoutMode_Group).Index
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Port_BreakoutMode_Group) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform-port"
//	Path from parent:     "state/index"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/state/index"
func (n *Component_Port_BreakoutMode_Group_IndexPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_Port_BreakoutMode_Group",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Port_BreakoutMode_Group).Index
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Port_BreakoutMode_Group) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform-port"
//	Path from parent:     "config/index"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/config/index"
func (n *Component_Port_BreakoutMode_Group_IndexPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Component_Port_BreakoutMode_Group",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Port_BreakoutMode_Group).Index
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Port_BreakoutMode_Group) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform-port"
//	Path from parent:     "config/index"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/config/index"
func (n *Component_Port_BreakoutMode_Group_IndexPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_Port_BreakoutMode_Group",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Port_BreakoutMode_Group).Index
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Port_BreakoutMode_Group) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Port_BreakoutMode_Group_NumBreakoutsPath represents the /openconfig-platform/components/component/port/breakout-mode/groups/group/state/num-breakouts YANG schema element.
type Component_Port_BreakoutMode_Group_NumBreakoutsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Port_BreakoutMode_Group_NumBreakoutsPathAny represents the wildcard version of the /openconfig-platform/components/component/port/breakout-mode/groups/group/state/num-breakouts YANG schema element.
type Component_Port_BreakoutMode_Group_NumBreakoutsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform-port"
//	Path from parent:     "state/num-breakouts"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/state/num-breakouts"
func (n *Component_Port_BreakoutMode_Group_NumBreakoutsPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Component_Port_BreakoutMode_Group",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "num-breakouts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Port_BreakoutMode_Group).NumBreakouts
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Port_BreakoutMode_Group) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform-port"
//	Path from parent:     "state/num-breakouts"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/state/num-breakouts"
func (n *Component_Port_BreakoutMode_Group_NumBreakoutsPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_Port_BreakoutMode_Group",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "num-breakouts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Port_BreakoutMode_Group).NumBreakouts
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Port_BreakoutMode_Group) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform-port"
//	Path from parent:     "config/num-breakouts"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/config/num-breakouts"
func (n *Component_Port_BreakoutMode_Group_NumBreakoutsPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Component_Port_BreakoutMode_Group",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "num-breakouts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Port_BreakoutMode_Group).NumBreakouts
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Port_BreakoutMode_Group) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform-port"
//	Path from parent:     "config/num-breakouts"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/config/num-breakouts"
func (n *Component_Port_BreakoutMode_Group_NumBreakoutsPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_Port_BreakoutMode_Group",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "num-breakouts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Port_BreakoutMode_Group).NumBreakouts
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Port_BreakoutMode_Group) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Port_BreakoutMode_Group_NumPhysicalChannelsPath represents the /openconfig-platform/components/component/port/breakout-mode/groups/group/state/num-physical-channels YANG schema element.
type Component_Port_BreakoutMode_Group_NumPhysicalChannelsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Port_BreakoutMode_Group_NumPhysicalChannelsPathAny represents the wildcard version of the /openconfig-platform/components/component/port/breakout-mode/groups/group/state/num-physical-channels YANG schema element.
type Component_Port_BreakoutMode_Group_NumPhysicalChannelsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform-port"
//	Path from parent:     "state/num-physical-channels"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/state/num-physical-channels"
func (n *Component_Port_BreakoutMode_Group_NumPhysicalChannelsPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Component_Port_BreakoutMode_Group",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "num-physical-channels"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Port_BreakoutMode_Group).NumPhysicalChannels
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Port_BreakoutMode_Group) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform-port"
//	Path from parent:     "state/num-physical-channels"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/state/num-physical-channels"
func (n *Component_Port_BreakoutMode_Group_NumPhysicalChannelsPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_Port_BreakoutMode_Group",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "num-physical-channels"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Port_BreakoutMode_Group).NumPhysicalChannels
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Port_BreakoutMode_Group) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform-port"
//	Path from parent:     "config/num-physical-channels"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/config/num-physical-channels"
func (n *Component_Port_BreakoutMode_Group_NumPhysicalChannelsPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Component_Port_BreakoutMode_Group",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "num-physical-channels"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Port_BreakoutMode_Group).NumPhysicalChannels
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Port_BreakoutMode_Group) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform-port"
//	Path from parent:     "config/num-physical-channels"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/config/num-physical-channels"
func (n *Component_Port_BreakoutMode_Group_NumPhysicalChannelsPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_Port_BreakoutMode_Group",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "num-physical-channels"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Port_BreakoutMode_Group).NumPhysicalChannels
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Port_BreakoutMode_Group) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Port_BreakoutMode_GroupPath represents the /openconfig-platform/components/component/port/breakout-mode/groups/group YANG schema element.
type Component_Port_BreakoutMode_GroupPath struct {
	*ygnmi.NodePath
}

// Component_Port_BreakoutMode_GroupPathAny represents the wildcard version of the /openconfig-platform/components/component/port/breakout-mode/groups/group YANG schema element.
type Component_Port_BreakoutMode_GroupPathAny struct {
	*ygnmi.NodePath
}

// Component_Port_BreakoutMode_GroupPathMap represents the /openconfig-platform/components/component/port/breakout-mode/groups/group YANG schema element.
type Component_Port_BreakoutMode_GroupPathMap struct {
	*ygnmi.NodePath
}

// Component_Port_BreakoutMode_GroupPathMapAny represents the wildcard version of the /openconfig-platform/components/component/port/breakout-mode/groups/group YANG schema element.
type Component_Port_BreakoutMode_GroupPathMapAny struct {
	*ygnmi.NodePath
}

// BreakoutSpeed (leaf): Speed of interfaces in this breakout group, supported
// values are defined by the ETHERNET_SPEED identity.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/breakout-speed"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/*/breakout-speed"
func (n *Component_Port_BreakoutMode_GroupPath) BreakoutSpeed() *Component_Port_BreakoutMode_Group_BreakoutSpeedPath {
	ps := &Component_Port_BreakoutMode_Group_BreakoutSpeedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "breakout-speed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BreakoutSpeed (leaf): Speed of interfaces in this breakout group, supported
// values are defined by the ETHERNET_SPEED identity.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/breakout-speed"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/*/breakout-speed"
func (n *Component_Port_BreakoutMode_GroupPathAny) BreakoutSpeed() *Component_Port_BreakoutMode_Group_BreakoutSpeedPathAny {
	ps := &Component_Port_BreakoutMode_Group_BreakoutSpeedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "breakout-speed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): Each index specifies breakouts that are identical in
// terms of speed and the number of physical channels.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/index"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/*/index"
func (n *Component_Port_BreakoutMode_GroupPath) Index() *Component_Port_BreakoutMode_Group_IndexPath {
	ps := &Component_Port_BreakoutMode_Group_IndexPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): Each index specifies breakouts that are identical in
// terms of speed and the number of physical channels.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/index"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/*/index"
func (n *Component_Port_BreakoutMode_GroupPathAny) Index() *Component_Port_BreakoutMode_Group_IndexPathAny {
	ps := &Component_Port_BreakoutMode_Group_IndexPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NumBreakouts (leaf): Sets the number of interfaces using this breakout group.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/num-breakouts"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/*/num-breakouts"
func (n *Component_Port_BreakoutMode_GroupPath) NumBreakouts() *Component_Port_BreakoutMode_Group_NumBreakoutsPath {
	ps := &Component_Port_BreakoutMode_Group_NumBreakoutsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "num-breakouts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NumBreakouts (leaf): Sets the number of interfaces using this breakout group.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/num-breakouts"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/*/num-breakouts"
func (n *Component_Port_BreakoutMode_GroupPathAny) NumBreakouts() *Component_Port_BreakoutMode_Group_NumBreakoutsPathAny {
	ps := &Component_Port_BreakoutMode_Group_NumBreakoutsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "num-breakouts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NumPhysicalChannels (leaf): Sets the number of lanes or physical channels assigned
// to the interfaces in this breakout group. This leaf need
// not be set if there is only one breakout group where all
// the interfaces are of equal speed and have equal number
// of physical channels.
//
// The physical channels referred to by this leaf are
// electrical channels towards the transceiver.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/num-physical-channels"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/*/num-physical-channels"
func (n *Component_Port_BreakoutMode_GroupPath) NumPhysicalChannels() *Component_Port_BreakoutMode_Group_NumPhysicalChannelsPath {
	ps := &Component_Port_BreakoutMode_Group_NumPhysicalChannelsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "num-physical-channels"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NumPhysicalChannels (leaf): Sets the number of lanes or physical channels assigned
// to the interfaces in this breakout group. This leaf need
// not be set if there is only one breakout group where all
// the interfaces are of equal speed and have equal number
// of physical channels.
//
// The physical channels referred to by this leaf are
// electrical channels towards the transceiver.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/num-physical-channels"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/*/num-physical-channels"
func (n *Component_Port_BreakoutMode_GroupPathAny) NumPhysicalChannels() *Component_Port_BreakoutMode_Group_NumPhysicalChannelsPathAny {
	ps := &Component_Port_BreakoutMode_Group_NumPhysicalChannelsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "num-physical-channels"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Port_BreakoutMode_GroupPath) State() ygnmi.SingletonQuery[*oc.Component_Port_BreakoutMode_Group] {
	return ygnmi.NewSingletonQuery[*oc.Component_Port_BreakoutMode_Group](
		"Component_Port_BreakoutMode_Group",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Port_BreakoutMode_GroupPathAny) State() ygnmi.WildcardQuery[*oc.Component_Port_BreakoutMode_Group] {
	return ygnmi.NewWildcardQuery[*oc.Component_Port_BreakoutMode_Group](
		"Component_Port_BreakoutMode_Group",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Port_BreakoutMode_GroupPath) Config() ygnmi.ConfigQuery[*oc.Component_Port_BreakoutMode_Group] {
	return ygnmi.NewConfigQuery[*oc.Component_Port_BreakoutMode_Group](
		"Component_Port_BreakoutMode_Group",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Port_BreakoutMode_GroupPathAny) Config() ygnmi.WildcardQuery[*oc.Component_Port_BreakoutMode_Group] {
	return ygnmi.NewWildcardQuery[*oc.Component_Port_BreakoutMode_Group](
		"Component_Port_BreakoutMode_Group",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Port_BreakoutMode_GroupPathMap) State() ygnmi.SingletonQuery[map[uint8]*oc.Component_Port_BreakoutMode_Group] {
	return ygnmi.NewSingletonQuery[map[uint8]*oc.Component_Port_BreakoutMode_Group](
		"Component_Port_BreakoutMode",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.Component_Port_BreakoutMode_Group, bool) {
			ret := gs.(*oc.Component_Port_BreakoutMode).Group
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Port_BreakoutMode) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-port:groups"},
			PostRelPath: []string{"openconfig-platform-port:group"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Port_BreakoutMode_GroupPathMapAny) State() ygnmi.WildcardQuery[map[uint8]*oc.Component_Port_BreakoutMode_Group] {
	return ygnmi.NewWildcardQuery[map[uint8]*oc.Component_Port_BreakoutMode_Group](
		"Component_Port_BreakoutMode",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.Component_Port_BreakoutMode_Group, bool) {
			ret := gs.(*oc.Component_Port_BreakoutMode).Group
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Port_BreakoutMode) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-port:groups"},
			PostRelPath: []string{"openconfig-platform-port:group"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Port_BreakoutMode_GroupPathMap) Config() ygnmi.ConfigQuery[map[uint8]*oc.Component_Port_BreakoutMode_Group] {
	return ygnmi.NewConfigQuery[map[uint8]*oc.Component_Port_BreakoutMode_Group](
		"Component_Port_BreakoutMode",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.Component_Port_BreakoutMode_Group, bool) {
			ret := gs.(*oc.Component_Port_BreakoutMode).Group
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Port_BreakoutMode) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-port:groups"},
			PostRelPath: []string{"openconfig-platform-port:group"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Port_BreakoutMode_GroupPathMapAny) Config() ygnmi.WildcardQuery[map[uint8]*oc.Component_Port_BreakoutMode_Group] {
	return ygnmi.NewWildcardQuery[map[uint8]*oc.Component_Port_BreakoutMode_Group](
		"Component_Port_BreakoutMode",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.Component_Port_BreakoutMode_Group, bool) {
			ret := gs.(*oc.Component_Port_BreakoutMode).Group
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Port_BreakoutMode) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-port:groups"},
			PostRelPath: []string{"openconfig-platform-port:group"},
		},
	)
}

// Component_PowerSupply_CapacityPath represents the /openconfig-platform/components/component/power-supply/state/capacity YANG schema element.
type Component_PowerSupply_CapacityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_PowerSupply_CapacityPathAny represents the wildcard version of the /openconfig-platform/components/component/power-supply/state/capacity YANG schema element.
type Component_PowerSupply_CapacityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-psu"
//	Instantiating module: "openconfig-platform-psu"
//	Path from parent:     "state/capacity"
//	Path from root:       "/components/component/power-supply/state/capacity"
func (n *Component_PowerSupply_CapacityPath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewSingletonQuery[float32](
		"Component_PowerSupply",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "capacity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Component_PowerSupply).Capacity
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_PowerSupply) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-psu"
//	Instantiating module: "openconfig-platform-psu"
//	Path from parent:     "state/capacity"
//	Path from root:       "/components/component/power-supply/state/capacity"
func (n *Component_PowerSupply_CapacityPathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewWildcardQuery[float32](
		"Component_PowerSupply",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "capacity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Component_PowerSupply).Capacity
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_PowerSupply) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_PowerSupply_EnabledPath represents the /openconfig-platform/components/component/power-supply/state/enabled YANG schema element.
type Component_PowerSupply_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_PowerSupply_EnabledPathAny represents the wildcard version of the /openconfig-platform/components/component/power-supply/state/enabled YANG schema element.
type Component_PowerSupply_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-psu"
//	Instantiating module: "openconfig-platform-psu"
//	Path from parent:     "state/enabled"
//	Path from root:       "/components/component/power-supply/state/enabled"
func (n *Component_PowerSupply_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component_PowerSupply",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_PowerSupply).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_PowerSupply) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-psu"
//	Instantiating module: "openconfig-platform-psu"
//	Path from parent:     "state/enabled"
//	Path from root:       "/components/component/power-supply/state/enabled"
func (n *Component_PowerSupply_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_PowerSupply",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_PowerSupply).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_PowerSupply) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-psu"
//	Instantiating module: "openconfig-platform-psu"
//	Path from parent:     "config/enabled"
//	Path from root:       "/components/component/power-supply/config/enabled"
func (n *Component_PowerSupply_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Component_PowerSupply",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_PowerSupply).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_PowerSupply) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-psu"
//	Instantiating module: "openconfig-platform-psu"
//	Path from parent:     "config/enabled"
//	Path from root:       "/components/component/power-supply/config/enabled"
func (n *Component_PowerSupply_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_PowerSupply",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_PowerSupply).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_PowerSupply) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_PowerSupply_InputCurrentPath represents the /openconfig-platform/components/component/power-supply/state/input-current YANG schema element.
type Component_PowerSupply_InputCurrentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_PowerSupply_InputCurrentPathAny represents the wildcard version of the /openconfig-platform/components/component/power-supply/state/input-current YANG schema element.
type Component_PowerSupply_InputCurrentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-psu"
//	Instantiating module: "openconfig-platform-psu"
//	Path from parent:     "state/input-current"
//	Path from root:       "/components/component/power-supply/state/input-current"
func (n *Component_PowerSupply_InputCurrentPath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewSingletonQuery[float32](
		"Component_PowerSupply",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "input-current"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Component_PowerSupply).InputCurrent
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_PowerSupply) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-psu"
//	Instantiating module: "openconfig-platform-psu"
//	Path from parent:     "state/input-current"
//	Path from root:       "/components/component/power-supply/state/input-current"
func (n *Component_PowerSupply_InputCurrentPathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewWildcardQuery[float32](
		"Component_PowerSupply",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "input-current"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Component_PowerSupply).InputCurrent
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_PowerSupply) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_PowerSupply_InputVoltagePath represents the /openconfig-platform/components/component/power-supply/state/input-voltage YANG schema element.
type Component_PowerSupply_InputVoltagePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_PowerSupply_InputVoltagePathAny represents the wildcard version of the /openconfig-platform/components/component/power-supply/state/input-voltage YANG schema element.
type Component_PowerSupply_InputVoltagePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-psu"
//	Instantiating module: "openconfig-platform-psu"
//	Path from parent:     "state/input-voltage"
//	Path from root:       "/components/component/power-supply/state/input-voltage"
func (n *Component_PowerSupply_InputVoltagePath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewSingletonQuery[float32](
		"Component_PowerSupply",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "input-voltage"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Component_PowerSupply).InputVoltage
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_PowerSupply) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-psu"
//	Instantiating module: "openconfig-platform-psu"
//	Path from parent:     "state/input-voltage"
//	Path from root:       "/components/component/power-supply/state/input-voltage"
func (n *Component_PowerSupply_InputVoltagePathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewWildcardQuery[float32](
		"Component_PowerSupply",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "input-voltage"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Component_PowerSupply).InputVoltage
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_PowerSupply) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_PowerSupply_OutputCurrentPath represents the /openconfig-platform/components/component/power-supply/state/output-current YANG schema element.
type Component_PowerSupply_OutputCurrentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_PowerSupply_OutputCurrentPathAny represents the wildcard version of the /openconfig-platform/components/component/power-supply/state/output-current YANG schema element.
type Component_PowerSupply_OutputCurrentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-psu"
//	Instantiating module: "openconfig-platform-psu"
//	Path from parent:     "state/output-current"
//	Path from root:       "/components/component/power-supply/state/output-current"
func (n *Component_PowerSupply_OutputCurrentPath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewSingletonQuery[float32](
		"Component_PowerSupply",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "output-current"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Component_PowerSupply).OutputCurrent
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_PowerSupply) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-psu"
//	Instantiating module: "openconfig-platform-psu"
//	Path from parent:     "state/output-current"
//	Path from root:       "/components/component/power-supply/state/output-current"
func (n *Component_PowerSupply_OutputCurrentPathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewWildcardQuery[float32](
		"Component_PowerSupply",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "output-current"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Component_PowerSupply).OutputCurrent
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_PowerSupply) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_PowerSupply_OutputPowerPath represents the /openconfig-platform/components/component/power-supply/state/output-power YANG schema element.
type Component_PowerSupply_OutputPowerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_PowerSupply_OutputPowerPathAny represents the wildcard version of the /openconfig-platform/components/component/power-supply/state/output-power YANG schema element.
type Component_PowerSupply_OutputPowerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-psu"
//	Instantiating module: "openconfig-platform-psu"
//	Path from parent:     "state/output-power"
//	Path from root:       "/components/component/power-supply/state/output-power"
func (n *Component_PowerSupply_OutputPowerPath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewSingletonQuery[float32](
		"Component_PowerSupply",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "output-power"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Component_PowerSupply).OutputPower
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_PowerSupply) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-psu"
//	Instantiating module: "openconfig-platform-psu"
//	Path from parent:     "state/output-power"
//	Path from root:       "/components/component/power-supply/state/output-power"
func (n *Component_PowerSupply_OutputPowerPathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewWildcardQuery[float32](
		"Component_PowerSupply",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "output-power"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Component_PowerSupply).OutputPower
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_PowerSupply) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_PowerSupply_OutputVoltagePath represents the /openconfig-platform/components/component/power-supply/state/output-voltage YANG schema element.
type Component_PowerSupply_OutputVoltagePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_PowerSupply_OutputVoltagePathAny represents the wildcard version of the /openconfig-platform/components/component/power-supply/state/output-voltage YANG schema element.
type Component_PowerSupply_OutputVoltagePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-psu"
//	Instantiating module: "openconfig-platform-psu"
//	Path from parent:     "state/output-voltage"
//	Path from root:       "/components/component/power-supply/state/output-voltage"
func (n *Component_PowerSupply_OutputVoltagePath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewSingletonQuery[float32](
		"Component_PowerSupply",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "output-voltage"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Component_PowerSupply).OutputVoltage
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_PowerSupply) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-psu"
//	Instantiating module: "openconfig-platform-psu"
//	Path from parent:     "state/output-voltage"
//	Path from root:       "/components/component/power-supply/state/output-voltage"
func (n *Component_PowerSupply_OutputVoltagePathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewWildcardQuery[float32](
		"Component_PowerSupply",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "output-voltage"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Component_PowerSupply).OutputVoltage
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_PowerSupply) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_PowerSupplyPath represents the /openconfig-platform/components/component/power-supply YANG schema element.
type Component_PowerSupplyPath struct {
	*ygnmi.NodePath
}

// Component_PowerSupplyPathAny represents the wildcard version of the /openconfig-platform/components/component/power-supply YANG schema element.
type Component_PowerSupplyPathAny struct {
	*ygnmi.NodePath
}

// Capacity (leaf): Maximum power capacity of the power supply.
//
//	Defining module:      "openconfig-platform-psu"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/capacity"
//	Path from root:       "/components/component/power-supply/state/capacity"
func (n *Component_PowerSupplyPath) Capacity() *Component_PowerSupply_CapacityPath {
	ps := &Component_PowerSupply_CapacityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "capacity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Capacity (leaf): Maximum power capacity of the power supply.
//
//	Defining module:      "openconfig-platform-psu"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/capacity"
//	Path from root:       "/components/component/power-supply/state/capacity"
func (n *Component_PowerSupplyPathAny) Capacity() *Component_PowerSupply_CapacityPathAny {
	ps := &Component_PowerSupply_CapacityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "capacity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Adminsitrative control on the on/off state of the power
// supply unit.
//
//	Defining module:      "openconfig-platform-psu"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/enabled"
//	Path from root:       "/components/component/power-supply/*/enabled"
func (n *Component_PowerSupplyPath) Enabled() *Component_PowerSupply_EnabledPath {
	ps := &Component_PowerSupply_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Adminsitrative control on the on/off state of the power
// supply unit.
//
//	Defining module:      "openconfig-platform-psu"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/enabled"
//	Path from root:       "/components/component/power-supply/*/enabled"
func (n *Component_PowerSupplyPathAny) Enabled() *Component_PowerSupply_EnabledPathAny {
	ps := &Component_PowerSupply_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InputCurrent (leaf): The input current draw of the power supply.
//
//	Defining module:      "openconfig-platform-psu"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/input-current"
//	Path from root:       "/components/component/power-supply/state/input-current"
func (n *Component_PowerSupplyPath) InputCurrent() *Component_PowerSupply_InputCurrentPath {
	ps := &Component_PowerSupply_InputCurrentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "input-current"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InputCurrent (leaf): The input current draw of the power supply.
//
//	Defining module:      "openconfig-platform-psu"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/input-current"
//	Path from root:       "/components/component/power-supply/state/input-current"
func (n *Component_PowerSupplyPathAny) InputCurrent() *Component_PowerSupply_InputCurrentPathAny {
	ps := &Component_PowerSupply_InputCurrentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "input-current"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InputVoltage (leaf): Input voltage to the power supply.
//
//	Defining module:      "openconfig-platform-psu"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/input-voltage"
//	Path from root:       "/components/component/power-supply/state/input-voltage"
func (n *Component_PowerSupplyPath) InputVoltage() *Component_PowerSupply_InputVoltagePath {
	ps := &Component_PowerSupply_InputVoltagePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "input-voltage"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InputVoltage (leaf): Input voltage to the power supply.
//
//	Defining module:      "openconfig-platform-psu"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/input-voltage"
//	Path from root:       "/components/component/power-supply/state/input-voltage"
func (n *Component_PowerSupplyPathAny) InputVoltage() *Component_PowerSupply_InputVoltagePathAny {
	ps := &Component_PowerSupply_InputVoltagePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "input-voltage"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutputCurrent (leaf): The output current supplied by the power supply.
//
//	Defining module:      "openconfig-platform-psu"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/output-current"
//	Path from root:       "/components/component/power-supply/state/output-current"
func (n *Component_PowerSupplyPath) OutputCurrent() *Component_PowerSupply_OutputCurrentPath {
	ps := &Component_PowerSupply_OutputCurrentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "output-current"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutputCurrent (leaf): The output current supplied by the power supply.
//
//	Defining module:      "openconfig-platform-psu"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/output-current"
//	Path from root:       "/components/component/power-supply/state/output-current"
func (n *Component_PowerSupplyPathAny) OutputCurrent() *Component_PowerSupply_OutputCurrentPathAny {
	ps := &Component_PowerSupply_OutputCurrentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "output-current"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutputPower (leaf): Output power supplied by the power supply.
//
//	Defining module:      "openconfig-platform-psu"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/output-power"
//	Path from root:       "/components/component/power-supply/state/output-power"
func (n *Component_PowerSupplyPath) OutputPower() *Component_PowerSupply_OutputPowerPath {
	ps := &Component_PowerSupply_OutputPowerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "output-power"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutputPower (leaf): Output power supplied by the power supply.
//
//	Defining module:      "openconfig-platform-psu"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/output-power"
//	Path from root:       "/components/component/power-supply/state/output-power"
func (n *Component_PowerSupplyPathAny) OutputPower() *Component_PowerSupply_OutputPowerPathAny {
	ps := &Component_PowerSupply_OutputPowerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "output-power"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutputVoltage (leaf): Output voltage supplied by the power supply.
//
//	Defining module:      "openconfig-platform-psu"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/output-voltage"
//	Path from root:       "/components/component/power-supply/state/output-voltage"
func (n *Component_PowerSupplyPath) OutputVoltage() *Component_PowerSupply_OutputVoltagePath {
	ps := &Component_PowerSupply_OutputVoltagePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "output-voltage"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutputVoltage (leaf): Output voltage supplied by the power supply.
//
//	Defining module:      "openconfig-platform-psu"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/output-voltage"
//	Path from root:       "/components/component/power-supply/state/output-voltage"
func (n *Component_PowerSupplyPathAny) OutputVoltage() *Component_PowerSupply_OutputVoltagePathAny {
	ps := &Component_PowerSupply_OutputVoltagePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "output-voltage"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_PowerSupplyPath) State() ygnmi.SingletonQuery[*oc.Component_PowerSupply] {
	return ygnmi.NewSingletonQuery[*oc.Component_PowerSupply](
		"Component_PowerSupply",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_PowerSupplyPathAny) State() ygnmi.WildcardQuery[*oc.Component_PowerSupply] {
	return ygnmi.NewWildcardQuery[*oc.Component_PowerSupply](
		"Component_PowerSupply",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_PowerSupplyPath) Config() ygnmi.ConfigQuery[*oc.Component_PowerSupply] {
	return ygnmi.NewConfigQuery[*oc.Component_PowerSupply](
		"Component_PowerSupply",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_PowerSupplyPathAny) Config() ygnmi.WildcardQuery[*oc.Component_PowerSupply] {
	return ygnmi.NewWildcardQuery[*oc.Component_PowerSupply](
		"Component_PowerSupply",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Property_ConfigurablePath represents the /openconfig-platform/components/component/properties/property/state/configurable YANG schema element.
type Component_Property_ConfigurablePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Property_ConfigurablePathAny represents the wildcard version of the /openconfig-platform/components/component/properties/property/state/configurable YANG schema element.
type Component_Property_ConfigurablePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/configurable"
//	Path from root:       "/components/component/properties/property/state/configurable"
func (n *Component_Property_ConfigurablePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component_Property",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "configurable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Property).Configurable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Property) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/configurable"
//	Path from root:       "/components/component/properties/property/state/configurable"
func (n *Component_Property_ConfigurablePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_Property",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "configurable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Property).Configurable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Property) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Property_NamePath represents the /openconfig-platform/components/component/properties/property/state/name YANG schema element.
type Component_Property_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Property_NamePathAny represents the wildcard version of the /openconfig-platform/components/component/properties/property/state/name YANG schema element.
type Component_Property_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/properties/property/state/name"
func (n *Component_Property_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_Property",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Property).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Property) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/properties/property/state/name"
func (n *Component_Property_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_Property",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Property).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Property) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/name"
//	Path from root:       "/components/component/properties/property/config/name"
func (n *Component_Property_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Component_Property",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Property).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Property) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/name"
//	Path from root:       "/components/component/properties/property/config/name"
func (n *Component_Property_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_Property",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Property).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Property) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Property_ValuePath represents the /openconfig-platform/components/component/properties/property/state/value YANG schema element.
type Component_Property_ValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Property_ValuePathAny represents the wildcard version of the /openconfig-platform/components/component/properties/property/state/value YANG schema element.
type Component_Property_ValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/value"
//	Path from root:       "/components/component/properties/property/state/value"
func (n *Component_Property_ValuePath) State() ygnmi.SingletonQuery[oc.Component_Property_Value_Union] {
	return ygnmi.NewSingletonQuery[oc.Component_Property_Value_Union](
		"Component_Property",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Component_Property_Value_Union, bool) {
			ret := gs.(*oc.Component_Property).Value
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Property) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/value"
//	Path from root:       "/components/component/properties/property/state/value"
func (n *Component_Property_ValuePathAny) State() ygnmi.WildcardQuery[oc.Component_Property_Value_Union] {
	return ygnmi.NewWildcardQuery[oc.Component_Property_Value_Union](
		"Component_Property",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Component_Property_Value_Union, bool) {
			ret := gs.(*oc.Component_Property).Value
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Property) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/value"
//	Path from root:       "/components/component/properties/property/config/value"
func (n *Component_Property_ValuePath) Config() ygnmi.ConfigQuery[oc.Component_Property_Value_Union] {
	return ygnmi.NewConfigQuery[oc.Component_Property_Value_Union](
		"Component_Property",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Component_Property_Value_Union, bool) {
			ret := gs.(*oc.Component_Property).Value
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Property) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/value"
//	Path from root:       "/components/component/properties/property/config/value"
func (n *Component_Property_ValuePathAny) Config() ygnmi.WildcardQuery[oc.Component_Property_Value_Union] {
	return ygnmi.NewWildcardQuery[oc.Component_Property_Value_Union](
		"Component_Property",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Component_Property_Value_Union, bool) {
			ret := gs.(*oc.Component_Property).Value
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Property) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_PropertyPath represents the /openconfig-platform/components/component/properties/property YANG schema element.
type Component_PropertyPath struct {
	*ygnmi.NodePath
}

// Component_PropertyPathAny represents the wildcard version of the /openconfig-platform/components/component/properties/property YANG schema element.
type Component_PropertyPathAny struct {
	*ygnmi.NodePath
}

// Component_PropertyPathMap represents the /openconfig-platform/components/component/properties/property YANG schema element.
type Component_PropertyPathMap struct {
	*ygnmi.NodePath
}

// Component_PropertyPathMapAny represents the wildcard version of the /openconfig-platform/components/component/properties/property YANG schema element.
type Component_PropertyPathMapAny struct {
	*ygnmi.NodePath
}

// Configurable (leaf): Indication whether the property is user-configurable
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/configurable"
//	Path from root:       "/components/component/properties/property/state/configurable"
func (n *Component_PropertyPath) Configurable() *Component_Property_ConfigurablePath {
	ps := &Component_Property_ConfigurablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "configurable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Configurable (leaf): Indication whether the property is user-configurable
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/configurable"
//	Path from root:       "/components/component/properties/property/state/configurable"
func (n *Component_PropertyPathAny) Configurable() *Component_Property_ConfigurablePathAny {
	ps := &Component_Property_ConfigurablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "configurable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): System-supplied name of the property -- this is typically
// non-configurable
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/properties/property/*/name"
func (n *Component_PropertyPath) Name() *Component_Property_NamePath {
	ps := &Component_Property_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): System-supplied name of the property -- this is typically
// non-configurable
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/properties/property/*/name"
func (n *Component_PropertyPathAny) Name() *Component_Property_NamePathAny {
	ps := &Component_Property_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Value (leaf): Property values can take on a variety of types.  Signed and
// unsigned integer types may be provided in smaller sizes,
// e.g., int8, uint16, etc.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/value"
//	Path from root:       "/components/component/properties/property/*/value"
func (n *Component_PropertyPath) Value() *Component_Property_ValuePath {
	ps := &Component_Property_ValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Value (leaf): Property values can take on a variety of types.  Signed and
// unsigned integer types may be provided in smaller sizes,
// e.g., int8, uint16, etc.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/value"
//	Path from root:       "/components/component/properties/property/*/value"
func (n *Component_PropertyPathAny) Value() *Component_Property_ValuePathAny {
	ps := &Component_Property_ValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_PropertyPath) State() ygnmi.SingletonQuery[*oc.Component_Property] {
	return ygnmi.NewSingletonQuery[*oc.Component_Property](
		"Component_Property",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_PropertyPathAny) State() ygnmi.WildcardQuery[*oc.Component_Property] {
	return ygnmi.NewWildcardQuery[*oc.Component_Property](
		"Component_Property",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_PropertyPath) Config() ygnmi.ConfigQuery[*oc.Component_Property] {
	return ygnmi.NewConfigQuery[*oc.Component_Property](
		"Component_Property",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_PropertyPathAny) Config() ygnmi.WildcardQuery[*oc.Component_Property] {
	return ygnmi.NewWildcardQuery[*oc.Component_Property](
		"Component_Property",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_PropertyPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Component_Property] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Component_Property](
		"Component",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_Property, bool) {
			ret := gs.(*oc.Component).Property
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform:properties"},
			PostRelPath: []string{"openconfig-platform:property"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_PropertyPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Component_Property] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Component_Property](
		"Component",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_Property, bool) {
			ret := gs.(*oc.Component).Property
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform:properties"},
			PostRelPath: []string{"openconfig-platform:property"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_PropertyPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Component_Property] {
	return ygnmi.NewConfigQuery[map[string]*oc.Component_Property](
		"Component",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_Property, bool) {
			ret := gs.(*oc.Component).Property
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform:properties"},
			PostRelPath: []string{"openconfig-platform:property"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_PropertyPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Component_Property] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Component_Property](
		"Component",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_Property, bool) {
			ret := gs.(*oc.Component).Property
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform:properties"},
			PostRelPath: []string{"openconfig-platform:property"},
		},
	)
}

// Component_SoftwareModule_ModuleTypePath represents the /openconfig-platform/components/component/software-module/state/module-type YANG schema element.
type Component_SoftwareModule_ModuleTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_SoftwareModule_ModuleTypePathAny represents the wildcard version of the /openconfig-platform/components/component/software-module/state/module-type YANG schema element.
type Component_SoftwareModule_ModuleTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-software"
//	Instantiating module: "openconfig-platform-software"
//	Path from parent:     "state/module-type"
//	Path from root:       "/components/component/software-module/state/module-type"
func (n *Component_SoftwareModule_ModuleTypePath) State() ygnmi.SingletonQuery[oc.E_PlatformSoftware_SOFTWARE_MODULE_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_PlatformSoftware_SOFTWARE_MODULE_TYPE](
		"Component_SoftwareModule",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "module-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PlatformSoftware_SOFTWARE_MODULE_TYPE, bool) {
			ret := gs.(*oc.Component_SoftwareModule).ModuleType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_SoftwareModule) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-software"
//	Instantiating module: "openconfig-platform-software"
//	Path from parent:     "state/module-type"
//	Path from root:       "/components/component/software-module/state/module-type"
func (n *Component_SoftwareModule_ModuleTypePathAny) State() ygnmi.WildcardQuery[oc.E_PlatformSoftware_SOFTWARE_MODULE_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_PlatformSoftware_SOFTWARE_MODULE_TYPE](
		"Component_SoftwareModule",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "module-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PlatformSoftware_SOFTWARE_MODULE_TYPE, bool) {
			ret := gs.(*oc.Component_SoftwareModule).ModuleType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_SoftwareModule) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_SoftwareModulePath represents the /openconfig-platform/components/component/software-module YANG schema element.
type Component_SoftwareModulePath struct {
	*ygnmi.NodePath
}

// Component_SoftwareModulePathAny represents the wildcard version of the /openconfig-platform/components/component/software-module YANG schema element.
type Component_SoftwareModulePathAny struct {
	*ygnmi.NodePath
}

// ModuleType (leaf): Type of the software module
//
//	Defining module:      "openconfig-platform-software"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/module-type"
//	Path from root:       "/components/component/software-module/state/module-type"
func (n *Component_SoftwareModulePath) ModuleType() *Component_SoftwareModule_ModuleTypePath {
	ps := &Component_SoftwareModule_ModuleTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "module-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ModuleType (leaf): Type of the software module
//
//	Defining module:      "openconfig-platform-software"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/module-type"
//	Path from root:       "/components/component/software-module/state/module-type"
func (n *Component_SoftwareModulePathAny) ModuleType() *Component_SoftwareModule_ModuleTypePathAny {
	ps := &Component_SoftwareModule_ModuleTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "module-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_SoftwareModulePath) State() ygnmi.SingletonQuery[*oc.Component_SoftwareModule] {
	return ygnmi.NewSingletonQuery[*oc.Component_SoftwareModule](
		"Component_SoftwareModule",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_SoftwareModulePathAny) State() ygnmi.WildcardQuery[*oc.Component_SoftwareModule] {
	return ygnmi.NewWildcardQuery[*oc.Component_SoftwareModule](
		"Component_SoftwareModule",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_SoftwareModulePath) Config() ygnmi.ConfigQuery[*oc.Component_SoftwareModule] {
	return ygnmi.NewConfigQuery[*oc.Component_SoftwareModule](
		"Component_SoftwareModule",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_SoftwareModulePathAny) Config() ygnmi.WildcardQuery[*oc.Component_SoftwareModule] {
	return ygnmi.NewWildcardQuery[*oc.Component_SoftwareModule](
		"Component_SoftwareModule",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_StoragePath represents the /openconfig-platform/components/component/storage YANG schema element.
type Component_StoragePath struct {
	*ygnmi.NodePath
}

// Component_StoragePathAny represents the wildcard version of the /openconfig-platform/components/component/storage YANG schema element.
type Component_StoragePathAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_StoragePath) State() ygnmi.SingletonQuery[*oc.Component_Storage] {
	return ygnmi.NewSingletonQuery[*oc.Component_Storage](
		"Component_Storage",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_StoragePathAny) State() ygnmi.WildcardQuery[*oc.Component_Storage] {
	return ygnmi.NewWildcardQuery[*oc.Component_Storage](
		"Component_Storage",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_StoragePath) Config() ygnmi.ConfigQuery[*oc.Component_Storage] {
	return ygnmi.NewConfigQuery[*oc.Component_Storage](
		"Component_Storage",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_StoragePathAny) Config() ygnmi.WildcardQuery[*oc.Component_Storage] {
	return ygnmi.NewWildcardQuery[*oc.Component_Storage](
		"Component_Storage",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Subcomponent_NamePath represents the /openconfig-platform/components/component/subcomponents/subcomponent/state/name YANG schema element.
type Component_Subcomponent_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Subcomponent_NamePathAny represents the wildcard version of the /openconfig-platform/components/component/subcomponents/subcomponent/state/name YANG schema element.
type Component_Subcomponent_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/subcomponents/subcomponent/state/name"
func (n *Component_Subcomponent_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_Subcomponent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Subcomponent).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Subcomponent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/subcomponents/subcomponent/state/name"
func (n *Component_Subcomponent_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_Subcomponent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Subcomponent).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Subcomponent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/name"
//	Path from root:       "/components/component/subcomponents/subcomponent/config/name"
func (n *Component_Subcomponent_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Component_Subcomponent",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Subcomponent).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Subcomponent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/name"
//	Path from root:       "/components/component/subcomponents/subcomponent/config/name"
func (n *Component_Subcomponent_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_Subcomponent",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Subcomponent).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Subcomponent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_SubcomponentPath represents the /openconfig-platform/components/component/subcomponents/subcomponent YANG schema element.
type Component_SubcomponentPath struct {
	*ygnmi.NodePath
}

// Component_SubcomponentPathAny represents the wildcard version of the /openconfig-platform/components/component/subcomponents/subcomponent YANG schema element.
type Component_SubcomponentPathAny struct {
	*ygnmi.NodePath
}

// Component_SubcomponentPathMap represents the /openconfig-platform/components/component/subcomponents/subcomponent YANG schema element.
type Component_SubcomponentPathMap struct {
	*ygnmi.NodePath
}

// Component_SubcomponentPathMapAny represents the wildcard version of the /openconfig-platform/components/component/subcomponents/subcomponent YANG schema element.
type Component_SubcomponentPathMapAny struct {
	*ygnmi.NodePath
}

// Name (leaf): Reference to the name of the subcomponent
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/subcomponents/subcomponent/*/name"
func (n *Component_SubcomponentPath) Name() *Component_Subcomponent_NamePath {
	ps := &Component_Subcomponent_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Reference to the name of the subcomponent
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/subcomponents/subcomponent/*/name"
func (n *Component_SubcomponentPathAny) Name() *Component_Subcomponent_NamePathAny {
	ps := &Component_Subcomponent_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_SubcomponentPath) State() ygnmi.SingletonQuery[*oc.Component_Subcomponent] {
	return ygnmi.NewSingletonQuery[*oc.Component_Subcomponent](
		"Component_Subcomponent",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_SubcomponentPathAny) State() ygnmi.WildcardQuery[*oc.Component_Subcomponent] {
	return ygnmi.NewWildcardQuery[*oc.Component_Subcomponent](
		"Component_Subcomponent",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_SubcomponentPath) Config() ygnmi.ConfigQuery[*oc.Component_Subcomponent] {
	return ygnmi.NewConfigQuery[*oc.Component_Subcomponent](
		"Component_Subcomponent",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_SubcomponentPathAny) Config() ygnmi.WildcardQuery[*oc.Component_Subcomponent] {
	return ygnmi.NewWildcardQuery[*oc.Component_Subcomponent](
		"Component_Subcomponent",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_SubcomponentPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Component_Subcomponent] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Component_Subcomponent](
		"Component",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_Subcomponent, bool) {
			ret := gs.(*oc.Component).Subcomponent
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform:subcomponents"},
			PostRelPath: []string{"openconfig-platform:subcomponent"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_SubcomponentPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Component_Subcomponent] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Component_Subcomponent](
		"Component",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_Subcomponent, bool) {
			ret := gs.(*oc.Component).Subcomponent
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform:subcomponents"},
			PostRelPath: []string{"openconfig-platform:subcomponent"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_SubcomponentPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Component_Subcomponent] {
	return ygnmi.NewConfigQuery[map[string]*oc.Component_Subcomponent](
		"Component",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_Subcomponent, bool) {
			ret := gs.(*oc.Component).Subcomponent
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform:subcomponents"},
			PostRelPath: []string{"openconfig-platform:subcomponent"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_SubcomponentPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Component_Subcomponent] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Component_Subcomponent](
		"Component",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_Subcomponent, bool) {
			ret := gs.(*oc.Component).Subcomponent
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform:subcomponents"},
			PostRelPath: []string{"openconfig-platform:subcomponent"},
		},
	)
}

// Component_Temperature_AlarmSeverityPath represents the /openconfig-platform/components/component/state/temperature/alarm-severity YANG schema element.
type Component_Temperature_AlarmSeverityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Temperature_AlarmSeverityPathAny represents the wildcard version of the /openconfig-platform/components/component/state/temperature/alarm-severity YANG schema element.
type Component_Temperature_AlarmSeverityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "alarm-severity"
//	Path from root:       "/components/component/state/temperature/alarm-severity"
func (n *Component_Temperature_AlarmSeverityPath) State() ygnmi.SingletonQuery[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY] {
	return ygnmi.NewSingletonQuery[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY](
		"Component_Temperature",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"alarm-severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY, bool) {
			ret := gs.(*oc.Component_Temperature).AlarmSeverity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Temperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "alarm-severity"
//	Path from root:       "/components/component/state/temperature/alarm-severity"
func (n *Component_Temperature_AlarmSeverityPathAny) State() ygnmi.WildcardQuery[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY] {
	return ygnmi.NewWildcardQuery[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY](
		"Component_Temperature",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"alarm-severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY, bool) {
			ret := gs.(*oc.Component_Temperature).AlarmSeverity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Temperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Temperature_AlarmStatusPath represents the /openconfig-platform/components/component/state/temperature/alarm-status YANG schema element.
type Component_Temperature_AlarmStatusPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Temperature_AlarmStatusPathAny represents the wildcard version of the /openconfig-platform/components/component/state/temperature/alarm-status YANG schema element.
type Component_Temperature_AlarmStatusPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "alarm-status"
//	Path from root:       "/components/component/state/temperature/alarm-status"
func (n *Component_Temperature_AlarmStatusPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component_Temperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"alarm-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Temperature).AlarmStatus
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Temperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "alarm-status"
//	Path from root:       "/components/component/state/temperature/alarm-status"
func (n *Component_Temperature_AlarmStatusPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_Temperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"alarm-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Temperature).AlarmStatus
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Temperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Temperature_AlarmThresholdPath represents the /openconfig-platform/components/component/state/temperature/alarm-threshold YANG schema element.
type Component_Temperature_AlarmThresholdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Temperature_AlarmThresholdPathAny represents the wildcard version of the /openconfig-platform/components/component/state/temperature/alarm-threshold YANG schema element.
type Component_Temperature_AlarmThresholdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "alarm-threshold"
//	Path from root:       "/components/component/state/temperature/alarm-threshold"
func (n *Component_Temperature_AlarmThresholdPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Component_Temperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"alarm-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Component_Temperature).AlarmThreshold
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Temperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "alarm-threshold"
//	Path from root:       "/components/component/state/temperature/alarm-threshold"
func (n *Component_Temperature_AlarmThresholdPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Component_Temperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"alarm-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Component_Temperature).AlarmThreshold
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Temperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Temperature_AvgPath represents the /openconfig-platform/components/component/state/temperature/avg YANG schema element.
type Component_Temperature_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Temperature_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/state/temperature/avg YANG schema element.
type Component_Temperature_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/state/temperature/avg"
func (n *Component_Temperature_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Temperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Temperature).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Temperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/state/temperature/avg"
func (n *Component_Temperature_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Temperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Temperature).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Temperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Temperature_InstantPath represents the /openconfig-platform/components/component/state/temperature/instant YANG schema element.
type Component_Temperature_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Temperature_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/state/temperature/instant YANG schema element.
type Component_Temperature_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/state/temperature/instant"
func (n *Component_Temperature_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Temperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Temperature).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Temperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/state/temperature/instant"
func (n *Component_Temperature_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Temperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Temperature).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Temperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Temperature_IntervalPath represents the /openconfig-platform/components/component/state/temperature/interval YANG schema element.
type Component_Temperature_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Temperature_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/state/temperature/interval YANG schema element.
type Component_Temperature_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/state/temperature/interval"
func (n *Component_Temperature_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Temperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Temperature).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Temperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/state/temperature/interval"
func (n *Component_Temperature_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Temperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Temperature).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Temperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Temperature_MaxPath represents the /openconfig-platform/components/component/state/temperature/max YANG schema element.
type Component_Temperature_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Temperature_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/state/temperature/max YANG schema element.
type Component_Temperature_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/state/temperature/max"
func (n *Component_Temperature_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Temperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Temperature).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Temperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/state/temperature/max"
func (n *Component_Temperature_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Temperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Temperature).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Temperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Temperature_MaxTimePath represents the /openconfig-platform/components/component/state/temperature/max-time YANG schema element.
type Component_Temperature_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Temperature_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/state/temperature/max-time YANG schema element.
type Component_Temperature_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/state/temperature/max-time"
func (n *Component_Temperature_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Temperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Temperature).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Temperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/state/temperature/max-time"
func (n *Component_Temperature_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Temperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Temperature).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Temperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Temperature_MinPath represents the /openconfig-platform/components/component/state/temperature/min YANG schema element.
type Component_Temperature_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Temperature_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/state/temperature/min YANG schema element.
type Component_Temperature_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/state/temperature/min"
func (n *Component_Temperature_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Temperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Temperature).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Temperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/state/temperature/min"
func (n *Component_Temperature_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Temperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Temperature).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Temperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Temperature_MinTimePath represents the /openconfig-platform/components/component/state/temperature/min-time YANG schema element.
type Component_Temperature_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Temperature_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/state/temperature/min-time YANG schema element.
type Component_Temperature_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/state/temperature/min-time"
func (n *Component_Temperature_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Temperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Temperature).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Temperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/state/temperature/min-time"
func (n *Component_Temperature_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Temperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Temperature).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Temperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_TemperaturePath represents the /openconfig-platform/components/component/state/temperature YANG schema element.
type Component_TemperaturePath struct {
	*ygnmi.NodePath
}

// Component_TemperaturePathAny represents the wildcard version of the /openconfig-platform/components/component/state/temperature YANG schema element.
type Component_TemperaturePathAny struct {
	*ygnmi.NodePath
}

// AlarmSeverity (leaf): The severity of the current alarm.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "alarm-severity"
//	Path from root:       "/components/component/state/temperature/alarm-severity"
func (n *Component_TemperaturePath) AlarmSeverity() *Component_Temperature_AlarmSeverityPath {
	ps := &Component_Temperature_AlarmSeverityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"alarm-severity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AlarmSeverity (leaf): The severity of the current alarm.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "alarm-severity"
//	Path from root:       "/components/component/state/temperature/alarm-severity"
func (n *Component_TemperaturePathAny) AlarmSeverity() *Component_Temperature_AlarmSeverityPathAny {
	ps := &Component_Temperature_AlarmSeverityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"alarm-severity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AlarmStatus (leaf): A value of true indicates the alarm has been raised or
// asserted.  The value should be false when the alarm is
// cleared.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "alarm-status"
//	Path from root:       "/components/component/state/temperature/alarm-status"
func (n *Component_TemperaturePath) AlarmStatus() *Component_Temperature_AlarmStatusPath {
	ps := &Component_Temperature_AlarmStatusPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"alarm-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AlarmStatus (leaf): A value of true indicates the alarm has been raised or
// asserted.  The value should be false when the alarm is
// cleared.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "alarm-status"
//	Path from root:       "/components/component/state/temperature/alarm-status"
func (n *Component_TemperaturePathAny) AlarmStatus() *Component_Temperature_AlarmStatusPathAny {
	ps := &Component_Temperature_AlarmStatusPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"alarm-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AlarmThreshold (leaf): The threshold value that was crossed for this alarm.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "alarm-threshold"
//	Path from root:       "/components/component/state/temperature/alarm-threshold"
func (n *Component_TemperaturePath) AlarmThreshold() *Component_Temperature_AlarmThresholdPath {
	ps := &Component_Temperature_AlarmThresholdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"alarm-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AlarmThreshold (leaf): The threshold value that was crossed for this alarm.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "alarm-threshold"
//	Path from root:       "/components/component/state/temperature/alarm-threshold"
func (n *Component_TemperaturePathAny) AlarmThreshold() *Component_Temperature_AlarmThresholdPathAny {
	ps := &Component_Temperature_AlarmThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"alarm-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// sampling period.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/state/temperature/avg"
func (n *Component_TemperaturePath) Avg() *Component_Temperature_AvgPath {
	ps := &Component_Temperature_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// sampling period.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/state/temperature/avg"
func (n *Component_TemperaturePathAny) Avg() *Component_Temperature_AvgPathAny {
	ps := &Component_Temperature_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/state/temperature/instant"
func (n *Component_TemperaturePath) Instant() *Component_Temperature_InstantPath {
	ps := &Component_Temperature_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/state/temperature/instant"
func (n *Component_TemperaturePathAny) Instant() *Component_Temperature_InstantPathAny {
	ps := &Component_Temperature_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/state/temperature/interval"
func (n *Component_TemperaturePath) Interval() *Component_Temperature_IntervalPath {
	ps := &Component_Temperature_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/state/temperature/interval"
func (n *Component_TemperaturePathAny) Interval() *Component_Temperature_IntervalPathAny {
	ps := &Component_Temperature_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the sampling
// period
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/state/temperature/max"
func (n *Component_TemperaturePath) Max() *Component_Temperature_MaxPath {
	ps := &Component_Temperature_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the sampling
// period
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/state/temperature/max"
func (n *Component_TemperaturePathAny) Max() *Component_Temperature_MaxPathAny {
	ps := &Component_Temperature_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/state/temperature/max-time"
func (n *Component_TemperaturePath) MaxTime() *Component_Temperature_MaxTimePath {
	ps := &Component_Temperature_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/state/temperature/max-time"
func (n *Component_TemperaturePathAny) MaxTime() *Component_Temperature_MaxTimePathAny {
	ps := &Component_Temperature_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the sampling
// period
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/state/temperature/min"
func (n *Component_TemperaturePath) Min() *Component_Temperature_MinPath {
	ps := &Component_Temperature_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the sampling
// period
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/state/temperature/min"
func (n *Component_TemperaturePathAny) Min() *Component_Temperature_MinPathAny {
	ps := &Component_Temperature_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/state/temperature/min-time"
func (n *Component_TemperaturePath) MinTime() *Component_Temperature_MinTimePath {
	ps := &Component_Temperature_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/state/temperature/min-time"
func (n *Component_TemperaturePathAny) MinTime() *Component_Temperature_MinTimePathAny {
	ps := &Component_Temperature_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_TemperaturePath) State() ygnmi.SingletonQuery[*oc.Component_Temperature] {
	return ygnmi.NewSingletonQuery[*oc.Component_Temperature](
		"Component_Temperature",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_TemperaturePathAny) State() ygnmi.WildcardQuery[*oc.Component_Temperature] {
	return ygnmi.NewWildcardQuery[*oc.Component_Temperature](
		"Component_Temperature",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_ConnectorTypePath represents the /openconfig-platform/components/component/transceiver/state/connector-type YANG schema element.
type Component_Transceiver_ConnectorTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_ConnectorTypePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/connector-type YANG schema element.
type Component_Transceiver_ConnectorTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/connector-type"
//	Path from root:       "/components/component/transceiver/state/connector-type"
func (n *Component_Transceiver_ConnectorTypePath) State() ygnmi.SingletonQuery[oc.E_TransportTypes_FIBER_CONNECTOR_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_TransportTypes_FIBER_CONNECTOR_TYPE](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "connector-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_FIBER_CONNECTOR_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).ConnectorType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/connector-type"
//	Path from root:       "/components/component/transceiver/state/connector-type"
func (n *Component_Transceiver_ConnectorTypePathAny) State() ygnmi.WildcardQuery[oc.E_TransportTypes_FIBER_CONNECTOR_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_TransportTypes_FIBER_CONNECTOR_TYPE](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "connector-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_FIBER_CONNECTOR_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).ConnectorType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_DateCodePath represents the /openconfig-platform/components/component/transceiver/state/date-code YANG schema element.
type Component_Transceiver_DateCodePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_DateCodePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/date-code YANG schema element.
type Component_Transceiver_DateCodePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/date-code"
//	Path from root:       "/components/component/transceiver/state/date-code"
func (n *Component_Transceiver_DateCodePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "date-code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Transceiver).DateCode
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/date-code"
//	Path from root:       "/components/component/transceiver/state/date-code"
func (n *Component_Transceiver_DateCodePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "date-code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Transceiver).DateCode
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_EnabledPath represents the /openconfig-platform/components/component/transceiver/state/enabled YANG schema element.
type Component_Transceiver_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_EnabledPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/enabled YANG schema element.
type Component_Transceiver_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/enabled"
//	Path from root:       "/components/component/transceiver/state/enabled"
func (n *Component_Transceiver_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/enabled"
//	Path from root:       "/components/component/transceiver/state/enabled"
func (n *Component_Transceiver_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/enabled"
//	Path from root:       "/components/component/transceiver/config/enabled"
func (n *Component_Transceiver_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Component_Transceiver",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/enabled"
//	Path from root:       "/components/component/transceiver/config/enabled"
func (n *Component_Transceiver_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_Transceiver",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_EthernetPmdPath represents the /openconfig-platform/components/component/transceiver/state/ethernet-pmd YANG schema element.
type Component_Transceiver_EthernetPmdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_EthernetPmdPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/ethernet-pmd YANG schema element.
type Component_Transceiver_EthernetPmdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/ethernet-pmd"
//	Path from root:       "/components/component/transceiver/state/ethernet-pmd"
func (n *Component_Transceiver_EthernetPmdPath) State() ygnmi.SingletonQuery[oc.E_TransportTypes_ETHERNET_PMD_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_TransportTypes_ETHERNET_PMD_TYPE](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ethernet-pmd"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_ETHERNET_PMD_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).EthernetPmd
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/ethernet-pmd"
//	Path from root:       "/components/component/transceiver/state/ethernet-pmd"
func (n *Component_Transceiver_EthernetPmdPathAny) State() ygnmi.WildcardQuery[oc.E_TransportTypes_ETHERNET_PMD_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_TransportTypes_ETHERNET_PMD_TYPE](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ethernet-pmd"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_ETHERNET_PMD_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).EthernetPmd
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_EthernetPmdPreconfPath represents the /openconfig-platform/components/component/transceiver/state/ethernet-pmd-preconf YANG schema element.
type Component_Transceiver_EthernetPmdPreconfPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_EthernetPmdPreconfPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/ethernet-pmd-preconf YANG schema element.
type Component_Transceiver_EthernetPmdPreconfPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/ethernet-pmd-preconf"
//	Path from root:       "/components/component/transceiver/state/ethernet-pmd-preconf"
func (n *Component_Transceiver_EthernetPmdPreconfPath) State() ygnmi.SingletonQuery[oc.E_TransportTypes_ETHERNET_PMD_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_TransportTypes_ETHERNET_PMD_TYPE](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ethernet-pmd-preconf"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_ETHERNET_PMD_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).EthernetPmdPreconf
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/ethernet-pmd-preconf"
//	Path from root:       "/components/component/transceiver/state/ethernet-pmd-preconf"
func (n *Component_Transceiver_EthernetPmdPreconfPathAny) State() ygnmi.WildcardQuery[oc.E_TransportTypes_ETHERNET_PMD_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_TransportTypes_ETHERNET_PMD_TYPE](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ethernet-pmd-preconf"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_ETHERNET_PMD_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).EthernetPmdPreconf
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/ethernet-pmd-preconf"
//	Path from root:       "/components/component/transceiver/config/ethernet-pmd-preconf"
func (n *Component_Transceiver_EthernetPmdPreconfPath) Config() ygnmi.ConfigQuery[oc.E_TransportTypes_ETHERNET_PMD_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_TransportTypes_ETHERNET_PMD_TYPE](
		"Component_Transceiver",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ethernet-pmd-preconf"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_ETHERNET_PMD_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).EthernetPmdPreconf
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/ethernet-pmd-preconf"
//	Path from root:       "/components/component/transceiver/config/ethernet-pmd-preconf"
func (n *Component_Transceiver_EthernetPmdPreconfPathAny) Config() ygnmi.WildcardQuery[oc.E_TransportTypes_ETHERNET_PMD_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_TransportTypes_ETHERNET_PMD_TYPE](
		"Component_Transceiver",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ethernet-pmd-preconf"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_ETHERNET_PMD_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).EthernetPmdPreconf
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_FaultConditionPath represents the /openconfig-platform/components/component/transceiver/state/fault-condition YANG schema element.
type Component_Transceiver_FaultConditionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_FaultConditionPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/fault-condition YANG schema element.
type Component_Transceiver_FaultConditionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/fault-condition"
//	Path from root:       "/components/component/transceiver/state/fault-condition"
func (n *Component_Transceiver_FaultConditionPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fault-condition"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver).FaultCondition
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/fault-condition"
//	Path from root:       "/components/component/transceiver/state/fault-condition"
func (n *Component_Transceiver_FaultConditionPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fault-condition"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver).FaultCondition
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_FecCorrectedBitsPath represents the /openconfig-platform/components/component/transceiver/state/fec-corrected-bits YANG schema element.
type Component_Transceiver_FecCorrectedBitsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_FecCorrectedBitsPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/fec-corrected-bits YANG schema element.
type Component_Transceiver_FecCorrectedBitsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/fec-corrected-bits"
//	Path from root:       "/components/component/transceiver/state/fec-corrected-bits"
func (n *Component_Transceiver_FecCorrectedBitsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fec-corrected-bits"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver).FecCorrectedBits
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/fec-corrected-bits"
//	Path from root:       "/components/component/transceiver/state/fec-corrected-bits"
func (n *Component_Transceiver_FecCorrectedBitsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fec-corrected-bits"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver).FecCorrectedBits
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_FecCorrectedBytesPath represents the /openconfig-platform/components/component/transceiver/state/fec-corrected-bytes YANG schema element.
type Component_Transceiver_FecCorrectedBytesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_FecCorrectedBytesPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/fec-corrected-bytes YANG schema element.
type Component_Transceiver_FecCorrectedBytesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/fec-corrected-bytes"
//	Path from root:       "/components/component/transceiver/state/fec-corrected-bytes"
func (n *Component_Transceiver_FecCorrectedBytesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fec-corrected-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver).FecCorrectedBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/fec-corrected-bytes"
//	Path from root:       "/components/component/transceiver/state/fec-corrected-bytes"
func (n *Component_Transceiver_FecCorrectedBytesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fec-corrected-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver).FecCorrectedBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_FecModePath represents the /openconfig-platform/components/component/transceiver/state/fec-mode YANG schema element.
type Component_Transceiver_FecModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_FecModePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/fec-mode YANG schema element.
type Component_Transceiver_FecModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/fec-mode"
//	Path from root:       "/components/component/transceiver/state/fec-mode"
func (n *Component_Transceiver_FecModePath) State() ygnmi.SingletonQuery[oc.E_PlatformTypes_FEC_MODE_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_PlatformTypes_FEC_MODE_TYPE](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fec-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PlatformTypes_FEC_MODE_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).FecMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/fec-mode"
//	Path from root:       "/components/component/transceiver/state/fec-mode"
func (n *Component_Transceiver_FecModePathAny) State() ygnmi.WildcardQuery[oc.E_PlatformTypes_FEC_MODE_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_PlatformTypes_FEC_MODE_TYPE](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fec-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PlatformTypes_FEC_MODE_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).FecMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/fec-mode"
//	Path from root:       "/components/component/transceiver/config/fec-mode"
func (n *Component_Transceiver_FecModePath) Config() ygnmi.ConfigQuery[oc.E_PlatformTypes_FEC_MODE_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_PlatformTypes_FEC_MODE_TYPE](
		"Component_Transceiver",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "fec-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PlatformTypes_FEC_MODE_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).FecMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/fec-mode"
//	Path from root:       "/components/component/transceiver/config/fec-mode"
func (n *Component_Transceiver_FecModePathAny) Config() ygnmi.WildcardQuery[oc.E_PlatformTypes_FEC_MODE_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_PlatformTypes_FEC_MODE_TYPE](
		"Component_Transceiver",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "fec-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PlatformTypes_FEC_MODE_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).FecMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_FecStatusPath represents the /openconfig-platform/components/component/transceiver/state/fec-status YANG schema element.
type Component_Transceiver_FecStatusPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_FecStatusPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/fec-status YANG schema element.
type Component_Transceiver_FecStatusPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/fec-status"
//	Path from root:       "/components/component/transceiver/state/fec-status"
func (n *Component_Transceiver_FecStatusPath) State() ygnmi.SingletonQuery[oc.E_PlatformTypes_FEC_STATUS_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_PlatformTypes_FEC_STATUS_TYPE](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fec-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PlatformTypes_FEC_STATUS_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).FecStatus
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/fec-status"
//	Path from root:       "/components/component/transceiver/state/fec-status"
func (n *Component_Transceiver_FecStatusPathAny) State() ygnmi.WildcardQuery[oc.E_PlatformTypes_FEC_STATUS_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_PlatformTypes_FEC_STATUS_TYPE](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fec-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PlatformTypes_FEC_STATUS_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).FecStatus
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_FecUncorrectableBlocksPath represents the /openconfig-platform/components/component/transceiver/state/fec-uncorrectable-blocks YANG schema element.
type Component_Transceiver_FecUncorrectableBlocksPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_FecUncorrectableBlocksPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/fec-uncorrectable-blocks YANG schema element.
type Component_Transceiver_FecUncorrectableBlocksPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/fec-uncorrectable-blocks"
//	Path from root:       "/components/component/transceiver/state/fec-uncorrectable-blocks"
func (n *Component_Transceiver_FecUncorrectableBlocksPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fec-uncorrectable-blocks"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver).FecUncorrectableBlocks
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/fec-uncorrectable-blocks"
//	Path from root:       "/components/component/transceiver/state/fec-uncorrectable-blocks"
func (n *Component_Transceiver_FecUncorrectableBlocksPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fec-uncorrectable-blocks"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver).FecUncorrectableBlocks
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_FecUncorrectableWordsPath represents the /openconfig-platform/components/component/transceiver/state/fec-uncorrectable-words YANG schema element.
type Component_Transceiver_FecUncorrectableWordsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_FecUncorrectableWordsPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/fec-uncorrectable-words YANG schema element.
type Component_Transceiver_FecUncorrectableWordsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/fec-uncorrectable-words"
//	Path from root:       "/components/component/transceiver/state/fec-uncorrectable-words"
func (n *Component_Transceiver_FecUncorrectableWordsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fec-uncorrectable-words"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver).FecUncorrectableWords
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/fec-uncorrectable-words"
//	Path from root:       "/components/component/transceiver/state/fec-uncorrectable-words"
func (n *Component_Transceiver_FecUncorrectableWordsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fec-uncorrectable-words"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver).FecUncorrectableWords
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_FormFactorPath represents the /openconfig-platform/components/component/transceiver/state/form-factor YANG schema element.
type Component_Transceiver_FormFactorPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_FormFactorPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/form-factor YANG schema element.
type Component_Transceiver_FormFactorPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/form-factor"
//	Path from root:       "/components/component/transceiver/state/form-factor"
func (n *Component_Transceiver_FormFactorPath) State() ygnmi.SingletonQuery[oc.E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "form-factor"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).FormFactor
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/form-factor"
//	Path from root:       "/components/component/transceiver/state/form-factor"
func (n *Component_Transceiver_FormFactorPathAny) State() ygnmi.WildcardQuery[oc.E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "form-factor"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).FormFactor
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_FormFactorPreconfPath represents the /openconfig-platform/components/component/transceiver/state/form-factor-preconf YANG schema element.
type Component_Transceiver_FormFactorPreconfPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_FormFactorPreconfPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/form-factor-preconf YANG schema element.
type Component_Transceiver_FormFactorPreconfPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/form-factor-preconf"
//	Path from root:       "/components/component/transceiver/state/form-factor-preconf"
func (n *Component_Transceiver_FormFactorPreconfPath) State() ygnmi.SingletonQuery[oc.E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "form-factor-preconf"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).FormFactorPreconf
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/form-factor-preconf"
//	Path from root:       "/components/component/transceiver/state/form-factor-preconf"
func (n *Component_Transceiver_FormFactorPreconfPathAny) State() ygnmi.WildcardQuery[oc.E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "form-factor-preconf"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).FormFactorPreconf
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/form-factor-preconf"
//	Path from root:       "/components/component/transceiver/config/form-factor-preconf"
func (n *Component_Transceiver_FormFactorPreconfPath) Config() ygnmi.ConfigQuery[oc.E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE](
		"Component_Transceiver",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "form-factor-preconf"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).FormFactorPreconf
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/form-factor-preconf"
//	Path from root:       "/components/component/transceiver/config/form-factor-preconf"
func (n *Component_Transceiver_FormFactorPreconfPathAny) Config() ygnmi.WildcardQuery[oc.E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE](
		"Component_Transceiver",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "form-factor-preconf"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).FormFactorPreconf
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_ModuleFunctionalTypePath represents the /openconfig-platform/components/component/transceiver/state/module-functional-type YANG schema element.
type Component_Transceiver_ModuleFunctionalTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_ModuleFunctionalTypePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/module-functional-type YANG schema element.
type Component_Transceiver_ModuleFunctionalTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/module-functional-type"
//	Path from root:       "/components/component/transceiver/state/module-functional-type"
func (n *Component_Transceiver_ModuleFunctionalTypePath) State() ygnmi.SingletonQuery[oc.E_TransportTypes_TRANSCEIVER_MODULE_FUNCTIONAL_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_TransportTypes_TRANSCEIVER_MODULE_FUNCTIONAL_TYPE](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "module-functional-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_TRANSCEIVER_MODULE_FUNCTIONAL_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).ModuleFunctionalType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/module-functional-type"
//	Path from root:       "/components/component/transceiver/state/module-functional-type"
func (n *Component_Transceiver_ModuleFunctionalTypePathAny) State() ygnmi.WildcardQuery[oc.E_TransportTypes_TRANSCEIVER_MODULE_FUNCTIONAL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_TransportTypes_TRANSCEIVER_MODULE_FUNCTIONAL_TYPE](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "module-functional-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_TRANSCEIVER_MODULE_FUNCTIONAL_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).ModuleFunctionalType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/module-functional-type"
//	Path from root:       "/components/component/transceiver/config/module-functional-type"
func (n *Component_Transceiver_ModuleFunctionalTypePath) Config() ygnmi.ConfigQuery[oc.E_TransportTypes_TRANSCEIVER_MODULE_FUNCTIONAL_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_TransportTypes_TRANSCEIVER_MODULE_FUNCTIONAL_TYPE](
		"Component_Transceiver",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "module-functional-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_TRANSCEIVER_MODULE_FUNCTIONAL_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).ModuleFunctionalType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/module-functional-type"
//	Path from root:       "/components/component/transceiver/config/module-functional-type"
func (n *Component_Transceiver_ModuleFunctionalTypePathAny) Config() ygnmi.WildcardQuery[oc.E_TransportTypes_TRANSCEIVER_MODULE_FUNCTIONAL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_TransportTypes_TRANSCEIVER_MODULE_FUNCTIONAL_TYPE](
		"Component_Transceiver",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "module-functional-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_TRANSCEIVER_MODULE_FUNCTIONAL_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).ModuleFunctionalType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_OtnComplianceCodePath represents the /openconfig-platform/components/component/transceiver/state/otn-compliance-code YANG schema element.
type Component_Transceiver_OtnComplianceCodePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_OtnComplianceCodePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/otn-compliance-code YANG schema element.
type Component_Transceiver_OtnComplianceCodePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/otn-compliance-code"
//	Path from root:       "/components/component/transceiver/state/otn-compliance-code"
func (n *Component_Transceiver_OtnComplianceCodePath) State() ygnmi.SingletonQuery[oc.E_TransportTypes_OTN_APPLICATION_CODE] {
	return ygnmi.NewSingletonQuery[oc.E_TransportTypes_OTN_APPLICATION_CODE](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "otn-compliance-code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_OTN_APPLICATION_CODE, bool) {
			ret := gs.(*oc.Component_Transceiver).OtnComplianceCode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/otn-compliance-code"
//	Path from root:       "/components/component/transceiver/state/otn-compliance-code"
func (n *Component_Transceiver_OtnComplianceCodePathAny) State() ygnmi.WildcardQuery[oc.E_TransportTypes_OTN_APPLICATION_CODE] {
	return ygnmi.NewWildcardQuery[oc.E_TransportTypes_OTN_APPLICATION_CODE](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "otn-compliance-code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_OTN_APPLICATION_CODE, bool) {
			ret := gs.(*oc.Component_Transceiver).OtnComplianceCode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_PresentPath represents the /openconfig-platform/components/component/transceiver/state/present YANG schema element.
type Component_Transceiver_PresentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_PresentPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/present YANG schema element.
type Component_Transceiver_PresentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/present"
//	Path from root:       "/components/component/transceiver/state/present"
func (n *Component_Transceiver_PresentPath) State() ygnmi.SingletonQuery[oc.E_Transceiver_Present] {
	return ygnmi.NewSingletonQuery[oc.E_Transceiver_Present](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "present"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transceiver_Present, bool) {
			ret := gs.(*oc.Component_Transceiver).Present
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/present"
//	Path from root:       "/components/component/transceiver/state/present"
func (n *Component_Transceiver_PresentPathAny) State() ygnmi.WildcardQuery[oc.E_Transceiver_Present] {
	return ygnmi.NewWildcardQuery[oc.E_Transceiver_Present](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "present"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transceiver_Present, bool) {
			ret := gs.(*oc.Component_Transceiver).Present
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_SerialNoPath represents the /openconfig-platform/components/component/transceiver/state/serial-no YANG schema element.
type Component_Transceiver_SerialNoPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_SerialNoPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/serial-no YANG schema element.
type Component_Transceiver_SerialNoPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/serial-no"
//	Path from root:       "/components/component/transceiver/state/serial-no"
func (n *Component_Transceiver_SerialNoPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "serial-no"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Transceiver).SerialNo
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/serial-no"
//	Path from root:       "/components/component/transceiver/state/serial-no"
func (n *Component_Transceiver_SerialNoPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "serial-no"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Transceiver).SerialNo
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_SonetSdhComplianceCodePath represents the /openconfig-platform/components/component/transceiver/state/sonet-sdh-compliance-code YANG schema element.
type Component_Transceiver_SonetSdhComplianceCodePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_SonetSdhComplianceCodePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/sonet-sdh-compliance-code YANG schema element.
type Component_Transceiver_SonetSdhComplianceCodePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/sonet-sdh-compliance-code"
//	Path from root:       "/components/component/transceiver/state/sonet-sdh-compliance-code"
func (n *Component_Transceiver_SonetSdhComplianceCodePath) State() ygnmi.SingletonQuery[oc.E_TransportTypes_SONET_APPLICATION_CODE] {
	return ygnmi.NewSingletonQuery[oc.E_TransportTypes_SONET_APPLICATION_CODE](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sonet-sdh-compliance-code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_SONET_APPLICATION_CODE, bool) {
			ret := gs.(*oc.Component_Transceiver).SonetSdhComplianceCode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/sonet-sdh-compliance-code"
//	Path from root:       "/components/component/transceiver/state/sonet-sdh-compliance-code"
func (n *Component_Transceiver_SonetSdhComplianceCodePathAny) State() ygnmi.WildcardQuery[oc.E_TransportTypes_SONET_APPLICATION_CODE] {
	return ygnmi.NewWildcardQuery[oc.E_TransportTypes_SONET_APPLICATION_CODE](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sonet-sdh-compliance-code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_SONET_APPLICATION_CODE, bool) {
			ret := gs.(*oc.Component_Transceiver).SonetSdhComplianceCode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_VendorPath represents the /openconfig-platform/components/component/transceiver/state/vendor YANG schema element.
type Component_Transceiver_VendorPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_VendorPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/vendor YANG schema element.
type Component_Transceiver_VendorPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/vendor"
//	Path from root:       "/components/component/transceiver/state/vendor"
func (n *Component_Transceiver_VendorPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vendor"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Transceiver).Vendor
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/vendor"
//	Path from root:       "/components/component/transceiver/state/vendor"
func (n *Component_Transceiver_VendorPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vendor"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Transceiver).Vendor
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_VendorPartPath represents the /openconfig-platform/components/component/transceiver/state/vendor-part YANG schema element.
type Component_Transceiver_VendorPartPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_VendorPartPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/vendor-part YANG schema element.
type Component_Transceiver_VendorPartPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/vendor-part"
//	Path from root:       "/components/component/transceiver/state/vendor-part"
func (n *Component_Transceiver_VendorPartPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vendor-part"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Transceiver).VendorPart
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/vendor-part"
//	Path from root:       "/components/component/transceiver/state/vendor-part"
func (n *Component_Transceiver_VendorPartPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vendor-part"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Transceiver).VendorPart
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_VendorRevPath represents the /openconfig-platform/components/component/transceiver/state/vendor-rev YANG schema element.
type Component_Transceiver_VendorRevPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_VendorRevPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/vendor-rev YANG schema element.
type Component_Transceiver_VendorRevPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/vendor-rev"
//	Path from root:       "/components/component/transceiver/state/vendor-rev"
func (n *Component_Transceiver_VendorRevPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vendor-rev"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Transceiver).VendorRev
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/vendor-rev"
//	Path from root:       "/components/component/transceiver/state/vendor-rev"
func (n *Component_Transceiver_VendorRevPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vendor-rev"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Transceiver).VendorRev
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_TransceiverPath represents the /openconfig-platform/components/component/transceiver YANG schema element.
type Component_TransceiverPath struct {
	*ygnmi.NodePath
}

// Component_TransceiverPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver YANG schema element.
type Component_TransceiverPathAny struct {
	*ygnmi.NodePath
}

// ChannelAny (list): List of client channels, keyed by index within a physical
// client port.  A physical port with a single channel would
// have a single zero-indexed element
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "physical-channels/channel"
//	Path from root:       "/components/component/transceiver/physical-channels/channel"
func (n *Component_TransceiverPath) ChannelAny() *Component_Transceiver_ChannelPathAny {
	ps := &Component_Transceiver_ChannelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"physical-channels", "channel"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// ChannelAny (list): List of client channels, keyed by index within a physical
// client port.  A physical port with a single channel would
// have a single zero-indexed element
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "physical-channels/channel"
//	Path from root:       "/components/component/transceiver/physical-channels/channel"
func (n *Component_TransceiverPathAny) ChannelAny() *Component_Transceiver_ChannelPathAny {
	ps := &Component_Transceiver_ChannelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"physical-channels", "channel"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// Channel (list): List of client channels, keyed by index within a physical
// client port.  A physical port with a single channel would
// have a single zero-indexed element
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "physical-channels/channel"
//	Path from root:       "/components/component/transceiver/physical-channels/channel"
//
//	Index: uint16
func (n *Component_TransceiverPath) Channel(Index uint16) *Component_Transceiver_ChannelPath {
	ps := &Component_Transceiver_ChannelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"physical-channels", "channel"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// Channel (list): List of client channels, keyed by index within a physical
// client port.  A physical port with a single channel would
// have a single zero-indexed element
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "physical-channels/channel"
//	Path from root:       "/components/component/transceiver/physical-channels/channel"
//
//	Index: uint16
func (n *Component_TransceiverPathAny) Channel(Index uint16) *Component_Transceiver_ChannelPathAny {
	ps := &Component_Transceiver_ChannelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"physical-channels", "channel"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// ChannelMap (list): List of client channels, keyed by index within a physical
// client port.  A physical port with a single channel would
// have a single zero-indexed element
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "physical-channels/channel"
//	Path from root:       "/components/component/transceiver/physical-channels/channel"
func (n *Component_TransceiverPath) ChannelMap() *Component_Transceiver_ChannelPathMap {
	ps := &Component_Transceiver_ChannelPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"physical-channels"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ChannelMap (list): List of client channels, keyed by index within a physical
// client port.  A physical port with a single channel would
// have a single zero-indexed element
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "physical-channels/channel"
//	Path from root:       "/components/component/transceiver/physical-channels/channel"
func (n *Component_TransceiverPathAny) ChannelMap() *Component_Transceiver_ChannelPathMapAny {
	ps := &Component_Transceiver_ChannelPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"physical-channels"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ConnectorType (leaf): Connector type used on this port
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/connector-type"
//	Path from root:       "/components/component/transceiver/state/connector-type"
func (n *Component_TransceiverPath) ConnectorType() *Component_Transceiver_ConnectorTypePath {
	ps := &Component_Transceiver_ConnectorTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "connector-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConnectorType (leaf): Connector type used on this port
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/connector-type"
//	Path from root:       "/components/component/transceiver/state/connector-type"
func (n *Component_TransceiverPathAny) ConnectorType() *Component_Transceiver_ConnectorTypePathAny {
	ps := &Component_Transceiver_ConnectorTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "connector-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DateCode (leaf): Representation of the transceiver date code, typically
// stored as YYMMDD.  The time portion of the value is
// undefined and not intended to be read.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/date-code"
//	Path from root:       "/components/component/transceiver/state/date-code"
func (n *Component_TransceiverPath) DateCode() *Component_Transceiver_DateCodePath {
	ps := &Component_Transceiver_DateCodePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "date-code"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DateCode (leaf): Representation of the transceiver date code, typically
// stored as YYMMDD.  The time portion of the value is
// undefined and not intended to be read.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/date-code"
//	Path from root:       "/components/component/transceiver/state/date-code"
func (n *Component_TransceiverPathAny) DateCode() *Component_Transceiver_DateCodePathAny {
	ps := &Component_Transceiver_DateCodePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "date-code"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Turns power on / off to the transceiver -- provides a means
// to power on/off the transceiver (in the case of SFP, SFP+,
// QSFP,...) or enable high-power mode (in the case of CFP,
// CFP2, CFP4) and is optionally supported (device can choose to
// always enable).  True = power on / high power, False =
// powered off
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/enabled"
//	Path from root:       "/components/component/transceiver/*/enabled"
func (n *Component_TransceiverPath) Enabled() *Component_Transceiver_EnabledPath {
	ps := &Component_Transceiver_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Turns power on / off to the transceiver -- provides a means
// to power on/off the transceiver (in the case of SFP, SFP+,
// QSFP,...) or enable high-power mode (in the case of CFP,
// CFP2, CFP4) and is optionally supported (device can choose to
// always enable).  True = power on / high power, False =
// powered off
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/enabled"
//	Path from root:       "/components/component/transceiver/*/enabled"
func (n *Component_TransceiverPathAny) Enabled() *Component_Transceiver_EnabledPathAny {
	ps := &Component_Transceiver_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EthernetPmd (leaf): Ethernet PMD (physical medium dependent sublayer) that the
// transceiver supports. The SFF/QSFP MSAs have registers for
// this and CFP MSA has similar.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/ethernet-pmd"
//	Path from root:       "/components/component/transceiver/state/ethernet-pmd"
func (n *Component_TransceiverPath) EthernetPmd() *Component_Transceiver_EthernetPmdPath {
	ps := &Component_Transceiver_EthernetPmdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ethernet-pmd"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EthernetPmd (leaf): Ethernet PMD (physical medium dependent sublayer) that the
// transceiver supports. The SFF/QSFP MSAs have registers for
// this and CFP MSA has similar.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/ethernet-pmd"
//	Path from root:       "/components/component/transceiver/state/ethernet-pmd"
func (n *Component_TransceiverPathAny) EthernetPmd() *Component_Transceiver_EthernetPmdPathAny {
	ps := &Component_Transceiver_EthernetPmdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ethernet-pmd"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EthernetPmdPreconf (leaf): The Ethernet PMD is a property of the optical transceiver
// used on the port, indicating the type of physical connection.
// It is included in configuration data to allow pre-configuring
// a port/transceiver with the expected PMD.  The actual PMD is
// indicated by the ethernet-pmd state leaf.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/ethernet-pmd-preconf"
//	Path from root:       "/components/component/transceiver/*/ethernet-pmd-preconf"
func (n *Component_TransceiverPath) EthernetPmdPreconf() *Component_Transceiver_EthernetPmdPreconfPath {
	ps := &Component_Transceiver_EthernetPmdPreconfPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ethernet-pmd-preconf"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EthernetPmdPreconf (leaf): The Ethernet PMD is a property of the optical transceiver
// used on the port, indicating the type of physical connection.
// It is included in configuration data to allow pre-configuring
// a port/transceiver with the expected PMD.  The actual PMD is
// indicated by the ethernet-pmd state leaf.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/ethernet-pmd-preconf"
//	Path from root:       "/components/component/transceiver/*/ethernet-pmd-preconf"
func (n *Component_TransceiverPathAny) EthernetPmdPreconf() *Component_Transceiver_EthernetPmdPreconfPathAny {
	ps := &Component_Transceiver_EthernetPmdPreconfPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ethernet-pmd-preconf"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FaultCondition (leaf): Indicates if a fault condition exists in the transceiver
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fault-condition"
//	Path from root:       "/components/component/transceiver/state/fault-condition"
func (n *Component_TransceiverPath) FaultCondition() *Component_Transceiver_FaultConditionPath {
	ps := &Component_Transceiver_FaultConditionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fault-condition"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FaultCondition (leaf): Indicates if a fault condition exists in the transceiver
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fault-condition"
//	Path from root:       "/components/component/transceiver/state/fault-condition"
func (n *Component_TransceiverPathAny) FaultCondition() *Component_Transceiver_FaultConditionPathAny {
	ps := &Component_Transceiver_FaultConditionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fault-condition"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FecCorrectedBits (leaf): The number of bits that were corrected by the FEC
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fec-corrected-bits"
//	Path from root:       "/components/component/transceiver/state/fec-corrected-bits"
func (n *Component_TransceiverPath) FecCorrectedBits() *Component_Transceiver_FecCorrectedBitsPath {
	ps := &Component_Transceiver_FecCorrectedBitsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fec-corrected-bits"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FecCorrectedBits (leaf): The number of bits that were corrected by the FEC
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fec-corrected-bits"
//	Path from root:       "/components/component/transceiver/state/fec-corrected-bits"
func (n *Component_TransceiverPathAny) FecCorrectedBits() *Component_Transceiver_FecCorrectedBitsPathAny {
	ps := &Component_Transceiver_FecCorrectedBitsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fec-corrected-bits"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FecCorrectedBytes (leaf): The number of bytes that were corrected by the FEC
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fec-corrected-bytes"
//	Path from root:       "/components/component/transceiver/state/fec-corrected-bytes"
func (n *Component_TransceiverPath) FecCorrectedBytes() *Component_Transceiver_FecCorrectedBytesPath {
	ps := &Component_Transceiver_FecCorrectedBytesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fec-corrected-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FecCorrectedBytes (leaf): The number of bytes that were corrected by the FEC
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fec-corrected-bytes"
//	Path from root:       "/components/component/transceiver/state/fec-corrected-bytes"
func (n *Component_TransceiverPathAny) FecCorrectedBytes() *Component_Transceiver_FecCorrectedBytesPathAny {
	ps := &Component_Transceiver_FecCorrectedBytesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fec-corrected-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FecMode (leaf): The FEC mode indicates the mode of operation for the
// transceiver's FEC. This defines typical operational modes
// and does not aim to specify more granular FEC capabilities.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/fec-mode"
//	Path from root:       "/components/component/transceiver/*/fec-mode"
func (n *Component_TransceiverPath) FecMode() *Component_Transceiver_FecModePath {
	ps := &Component_Transceiver_FecModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "fec-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FecMode (leaf): The FEC mode indicates the mode of operation for the
// transceiver's FEC. This defines typical operational modes
// and does not aim to specify more granular FEC capabilities.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/fec-mode"
//	Path from root:       "/components/component/transceiver/*/fec-mode"
func (n *Component_TransceiverPathAny) FecMode() *Component_Transceiver_FecModePathAny {
	ps := &Component_Transceiver_FecModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "fec-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FecStatus (leaf): Operational status of FEC
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fec-status"
//	Path from root:       "/components/component/transceiver/state/fec-status"
func (n *Component_TransceiverPath) FecStatus() *Component_Transceiver_FecStatusPath {
	ps := &Component_Transceiver_FecStatusPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fec-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FecStatus (leaf): Operational status of FEC
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fec-status"
//	Path from root:       "/components/component/transceiver/state/fec-status"
func (n *Component_TransceiverPathAny) FecStatus() *Component_Transceiver_FecStatusPathAny {
	ps := &Component_Transceiver_FecStatusPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fec-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FecUncorrectableBlocks (leaf): The number of blocks that were uncorrectable by the FEC
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fec-uncorrectable-blocks"
//	Path from root:       "/components/component/transceiver/state/fec-uncorrectable-blocks"
func (n *Component_TransceiverPath) FecUncorrectableBlocks() *Component_Transceiver_FecUncorrectableBlocksPath {
	ps := &Component_Transceiver_FecUncorrectableBlocksPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fec-uncorrectable-blocks"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FecUncorrectableBlocks (leaf): The number of blocks that were uncorrectable by the FEC
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fec-uncorrectable-blocks"
//	Path from root:       "/components/component/transceiver/state/fec-uncorrectable-blocks"
func (n *Component_TransceiverPathAny) FecUncorrectableBlocks() *Component_Transceiver_FecUncorrectableBlocksPathAny {
	ps := &Component_Transceiver_FecUncorrectableBlocksPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fec-uncorrectable-blocks"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FecUncorrectableWords (leaf): The number of words that were uncorrectable by the FEC
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fec-uncorrectable-words"
//	Path from root:       "/components/component/transceiver/state/fec-uncorrectable-words"
func (n *Component_TransceiverPath) FecUncorrectableWords() *Component_Transceiver_FecUncorrectableWordsPath {
	ps := &Component_Transceiver_FecUncorrectableWordsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fec-uncorrectable-words"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FecUncorrectableWords (leaf): The number of words that were uncorrectable by the FEC
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fec-uncorrectable-words"
//	Path from root:       "/components/component/transceiver/state/fec-uncorrectable-words"
func (n *Component_TransceiverPathAny) FecUncorrectableWords() *Component_Transceiver_FecUncorrectableWordsPathAny {
	ps := &Component_Transceiver_FecUncorrectableWordsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fec-uncorrectable-words"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FormFactor (leaf): Indicates the type of optical transceiver used on this
// port.  If the client port is built into the device and not
// pluggable, then non-pluggable is the corresponding state. If
// a device port supports multiple form factors (e.g. QSFP28
// and QSFP+, then the value of the transceiver installed shall
// be reported. If no transceiver is present, then the value of
// the highest rate form factor shall be reported
// (QSFP28, for example).
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/form-factor"
//	Path from root:       "/components/component/transceiver/state/form-factor"
func (n *Component_TransceiverPath) FormFactor() *Component_Transceiver_FormFactorPath {
	ps := &Component_Transceiver_FormFactorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "form-factor"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FormFactor (leaf): Indicates the type of optical transceiver used on this
// port.  If the client port is built into the device and not
// pluggable, then non-pluggable is the corresponding state. If
// a device port supports multiple form factors (e.g. QSFP28
// and QSFP+, then the value of the transceiver installed shall
// be reported. If no transceiver is present, then the value of
// the highest rate form factor shall be reported
// (QSFP28, for example).
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/form-factor"
//	Path from root:       "/components/component/transceiver/state/form-factor"
func (n *Component_TransceiverPathAny) FormFactor() *Component_Transceiver_FormFactorPathAny {
	ps := &Component_Transceiver_FormFactorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "form-factor"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FormFactorPreconf (leaf): Indicates the type of optical transceiver used on this
// port.  If the client port is built into the device and not
// pluggable, then non-pluggable is the corresponding state. If
// a device port supports multiple form factors (e.g. QSFP28
// and QSFP+, then the value of the transceiver installed shall
// be reported. If no transceiver is present, then the value of
// the highest rate form factor shall be reported
// (QSFP28, for example).
//
// The form factor is included in configuration data to allow
// pre-configuring a device with the expected type of
// transceiver ahead of deployment.  The corresponding state
// leaf should reflect the actual transceiver type plugged into
// the system.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/form-factor-preconf"
//	Path from root:       "/components/component/transceiver/*/form-factor-preconf"
func (n *Component_TransceiverPath) FormFactorPreconf() *Component_Transceiver_FormFactorPreconfPath {
	ps := &Component_Transceiver_FormFactorPreconfPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "form-factor-preconf"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FormFactorPreconf (leaf): Indicates the type of optical transceiver used on this
// port.  If the client port is built into the device and not
// pluggable, then non-pluggable is the corresponding state. If
// a device port supports multiple form factors (e.g. QSFP28
// and QSFP+, then the value of the transceiver installed shall
// be reported. If no transceiver is present, then the value of
// the highest rate form factor shall be reported
// (QSFP28, for example).
//
// The form factor is included in configuration data to allow
// pre-configuring a device with the expected type of
// transceiver ahead of deployment.  The corresponding state
// leaf should reflect the actual transceiver type plugged into
// the system.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/form-factor-preconf"
//	Path from root:       "/components/component/transceiver/*/form-factor-preconf"
func (n *Component_TransceiverPathAny) FormFactorPreconf() *Component_Transceiver_FormFactorPreconfPathAny {
	ps := &Component_Transceiver_FormFactorPreconfPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "form-factor-preconf"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InputPower (container): The input optical power of a physical channel in units
// of 0.01dBm, which may be associated with individual
// physical channels, or an aggregate of multiple physical
// channels (i.e., for the overall transceiver). For an
// aggregate, this may be a measurement from a photodetector
// or a a calculation performed on the device by summing up
// all of the related individual physical channels.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value. When the physical channel has a leafref to
// an optical channel component and the module-functional-type is
// TYPE_DIGITAL_COHERENT_OPTIC this represents the aggregate
// total optical power value (signal and noise) whereas
// optical power value within the optical-channel represents
// the signal power
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/input-power"
//	Path from root:       "/components/component/transceiver/state/input-power"
func (n *Component_TransceiverPath) InputPower() *Component_Transceiver_InputPowerPath {
	ps := &Component_Transceiver_InputPowerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "input-power"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InputPower (container): The input optical power of a physical channel in units
// of 0.01dBm, which may be associated with individual
// physical channels, or an aggregate of multiple physical
// channels (i.e., for the overall transceiver). For an
// aggregate, this may be a measurement from a photodetector
// or a a calculation performed on the device by summing up
// all of the related individual physical channels.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value. When the physical channel has a leafref to
// an optical channel component and the module-functional-type is
// TYPE_DIGITAL_COHERENT_OPTIC this represents the aggregate
// total optical power value (signal and noise) whereas
// optical power value within the optical-channel represents
// the signal power
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/input-power"
//	Path from root:       "/components/component/transceiver/state/input-power"
func (n *Component_TransceiverPathAny) InputPower() *Component_Transceiver_InputPowerPathAny {
	ps := &Component_Transceiver_InputPowerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "input-power"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LaneAny (list): List of electrical host lanes, keyed by lane number.
// The host lanes of a transceiver constitute its electrical interface
// with the host system.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "host-lanes/lane"
//	Path from root:       "/components/component/transceiver/host-lanes/lane"
func (n *Component_TransceiverPath) LaneAny() *Component_Transceiver_LanePathAny {
	ps := &Component_Transceiver_LanePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-lanes", "lane"},
			map[string]interface{}{"lane-number": "*"},
			n,
		),
	}
	return ps
}

// LaneAny (list): List of electrical host lanes, keyed by lane number.
// The host lanes of a transceiver constitute its electrical interface
// with the host system.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "host-lanes/lane"
//	Path from root:       "/components/component/transceiver/host-lanes/lane"
func (n *Component_TransceiverPathAny) LaneAny() *Component_Transceiver_LanePathAny {
	ps := &Component_Transceiver_LanePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-lanes", "lane"},
			map[string]interface{}{"lane-number": "*"},
			n,
		),
	}
	return ps
}

// Lane (list): List of electrical host lanes, keyed by lane number.
// The host lanes of a transceiver constitute its electrical interface
// with the host system.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "host-lanes/lane"
//	Path from root:       "/components/component/transceiver/host-lanes/lane"
//
//	LaneNumber: uint8
func (n *Component_TransceiverPath) Lane(LaneNumber uint8) *Component_Transceiver_LanePath {
	ps := &Component_Transceiver_LanePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-lanes", "lane"},
			map[string]interface{}{"lane-number": LaneNumber},
			n,
		),
	}
	return ps
}

// Lane (list): List of electrical host lanes, keyed by lane number.
// The host lanes of a transceiver constitute its electrical interface
// with the host system.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "host-lanes/lane"
//	Path from root:       "/components/component/transceiver/host-lanes/lane"
//
//	LaneNumber: uint8
func (n *Component_TransceiverPathAny) Lane(LaneNumber uint8) *Component_Transceiver_LanePathAny {
	ps := &Component_Transceiver_LanePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-lanes", "lane"},
			map[string]interface{}{"lane-number": LaneNumber},
			n,
		),
	}
	return ps
}

// LaneMap (list): List of electrical host lanes, keyed by lane number.
// The host lanes of a transceiver constitute its electrical interface
// with the host system.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "host-lanes/lane"
//	Path from root:       "/components/component/transceiver/host-lanes/lane"
func (n *Component_TransceiverPath) LaneMap() *Component_Transceiver_LanePathMap {
	ps := &Component_Transceiver_LanePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-lanes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LaneMap (list): List of electrical host lanes, keyed by lane number.
// The host lanes of a transceiver constitute its electrical interface
// with the host system.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "host-lanes/lane"
//	Path from root:       "/components/component/transceiver/host-lanes/lane"
func (n *Component_TransceiverPathAny) LaneMap() *Component_Transceiver_LanePathMapAny {
	ps := &Component_Transceiver_LanePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-lanes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LaserBiasCurrent (container): The current applied by the system to the transmit laser to
// achieve the output power. The current is expressed in mA
// with up to two decimal precision. Values include the
// instantaneous, average, minimum, and maximum statistics.
// If avg/min/max statistics are not supported, the target is
// expected to just supply the instant value. In some cases,
// such as when the physical channel has a leafref to an optical
// channel component and the module-functional-type is
// TYPE_DIGITAL_COHERENT_OPTIC this grouping will NOT be used
// as the data will be within the optical-channel
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/laser-bias-current"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current"
func (n *Component_TransceiverPath) LaserBiasCurrent() *Component_Transceiver_LaserBiasCurrentPath {
	ps := &Component_Transceiver_LaserBiasCurrentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "laser-bias-current"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LaserBiasCurrent (container): The current applied by the system to the transmit laser to
// achieve the output power. The current is expressed in mA
// with up to two decimal precision. Values include the
// instantaneous, average, minimum, and maximum statistics.
// If avg/min/max statistics are not supported, the target is
// expected to just supply the instant value. In some cases,
// such as when the physical channel has a leafref to an optical
// channel component and the module-functional-type is
// TYPE_DIGITAL_COHERENT_OPTIC this grouping will NOT be used
// as the data will be within the optical-channel
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/laser-bias-current"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current"
func (n *Component_TransceiverPathAny) LaserBiasCurrent() *Component_Transceiver_LaserBiasCurrentPathAny {
	ps := &Component_Transceiver_LaserBiasCurrentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "laser-bias-current"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ModuleFunctionalType (leaf): Indicates the module functional type which represents the
// functional capability of the transceiver. For example, this
// would specify the module is a digital coherent optic or a
// standard grey optic that performs on-off keying.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/module-functional-type"
//	Path from root:       "/components/component/transceiver/*/module-functional-type"
func (n *Component_TransceiverPath) ModuleFunctionalType() *Component_Transceiver_ModuleFunctionalTypePath {
	ps := &Component_Transceiver_ModuleFunctionalTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "module-functional-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ModuleFunctionalType (leaf): Indicates the module functional type which represents the
// functional capability of the transceiver. For example, this
// would specify the module is a digital coherent optic or a
// standard grey optic that performs on-off keying.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/module-functional-type"
//	Path from root:       "/components/component/transceiver/*/module-functional-type"
func (n *Component_TransceiverPathAny) ModuleFunctionalType() *Component_Transceiver_ModuleFunctionalTypePathAny {
	ps := &Component_Transceiver_ModuleFunctionalTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "module-functional-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OtnComplianceCode (leaf): OTN application code supported by the port
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/otn-compliance-code"
//	Path from root:       "/components/component/transceiver/state/otn-compliance-code"
func (n *Component_TransceiverPath) OtnComplianceCode() *Component_Transceiver_OtnComplianceCodePath {
	ps := &Component_Transceiver_OtnComplianceCodePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "otn-compliance-code"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OtnComplianceCode (leaf): OTN application code supported by the port
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/otn-compliance-code"
//	Path from root:       "/components/component/transceiver/state/otn-compliance-code"
func (n *Component_TransceiverPathAny) OtnComplianceCode() *Component_Transceiver_OtnComplianceCodePathAny {
	ps := &Component_Transceiver_OtnComplianceCodePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "otn-compliance-code"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutputPower (container): The output optical power of a physical channel in units
// of 0.01dBm, which may be associated with individual
// physical channels, or an aggregate of multiple physical
// channels (i.e., for the overall transceiver). For an
// aggregate, this may be a measurement from a photodetector
// or a a calculation performed on the device by summing up
// all of the related individual physical channels.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value. In some cases, such as when the physical
// channel has a leafref to an optical channel component and the
// module-functional-type is TYPE_DIGITAL_COHERENT_OPTIC this
// grouping will NOT be used as the data will be within the
// optical-channel
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/output-power"
//	Path from root:       "/components/component/transceiver/state/output-power"
func (n *Component_TransceiverPath) OutputPower() *Component_Transceiver_OutputPowerPath {
	ps := &Component_Transceiver_OutputPowerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "output-power"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// OutputPower (container): The output optical power of a physical channel in units
// of 0.01dBm, which may be associated with individual
// physical channels, or an aggregate of multiple physical
// channels (i.e., for the overall transceiver). For an
// aggregate, this may be a measurement from a photodetector
// or a a calculation performed on the device by summing up
// all of the related individual physical channels.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value. In some cases, such as when the physical
// channel has a leafref to an optical channel component and the
// module-functional-type is TYPE_DIGITAL_COHERENT_OPTIC this
// grouping will NOT be used as the data will be within the
// optical-channel
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/output-power"
//	Path from root:       "/components/component/transceiver/state/output-power"
func (n *Component_TransceiverPathAny) OutputPower() *Component_Transceiver_OutputPowerPathAny {
	ps := &Component_Transceiver_OutputPowerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "output-power"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PostFecBer (container): Bit error rate after forward error correction -- computed
// value with 18 decimal precision. Note that decimal64
// supports values as small as i x 10^-18 where i is an
// integer. Values smaller than this should be reported as 0
// to inidicate error free or near error free performance.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/post-fec-ber"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber"
func (n *Component_TransceiverPath) PostFecBer() *Component_Transceiver_PostFecBerPath {
	ps := &Component_Transceiver_PostFecBerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "post-fec-ber"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PostFecBer (container): Bit error rate after forward error correction -- computed
// value with 18 decimal precision. Note that decimal64
// supports values as small as i x 10^-18 where i is an
// integer. Values smaller than this should be reported as 0
// to inidicate error free or near error free performance.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/post-fec-ber"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber"
func (n *Component_TransceiverPathAny) PostFecBer() *Component_Transceiver_PostFecBerPathAny {
	ps := &Component_Transceiver_PostFecBerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "post-fec-ber"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PreFecBer (container): Bit error rate before forward error correction -- computed
// value with 18 decimal precision. Note that decimal64
// supports values as small as i x 10^-18 where i is an
// integer. Values smaller than this should be reported as 0
// to inidicate error free or near error free performance.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/pre-fec-ber"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber"
func (n *Component_TransceiverPath) PreFecBer() *Component_Transceiver_PreFecBerPath {
	ps := &Component_Transceiver_PreFecBerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "pre-fec-ber"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PreFecBer (container): Bit error rate before forward error correction -- computed
// value with 18 decimal precision. Note that decimal64
// supports values as small as i x 10^-18 where i is an
// integer. Values smaller than this should be reported as 0
// to inidicate error free or near error free performance.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/pre-fec-ber"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber"
func (n *Component_TransceiverPathAny) PreFecBer() *Component_Transceiver_PreFecBerPathAny {
	ps := &Component_Transceiver_PreFecBerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "pre-fec-ber"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Present (leaf): Indicates whether a transceiver is present in
// the specified client port.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/present"
//	Path from root:       "/components/component/transceiver/state/present"
func (n *Component_TransceiverPath) Present() *Component_Transceiver_PresentPath {
	ps := &Component_Transceiver_PresentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "present"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Present (leaf): Indicates whether a transceiver is present in
// the specified client port.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/present"
//	Path from root:       "/components/component/transceiver/state/present"
func (n *Component_TransceiverPathAny) Present() *Component_Transceiver_PresentPathAny {
	ps := &Component_Transceiver_PresentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "present"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SerialNo (leaf): Transceiver serial number. 16-octet field that contains
// ASCII characters, left-aligned and padded on the right with
// ASCII spaces (20h). If part serial number is undefined, all
// 16 octets = 0h
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/serial-no"
//	Path from root:       "/components/component/transceiver/state/serial-no"
func (n *Component_TransceiverPath) SerialNo() *Component_Transceiver_SerialNoPath {
	ps := &Component_Transceiver_SerialNoPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "serial-no"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SerialNo (leaf): Transceiver serial number. 16-octet field that contains
// ASCII characters, left-aligned and padded on the right with
// ASCII spaces (20h). If part serial number is undefined, all
// 16 octets = 0h
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/serial-no"
//	Path from root:       "/components/component/transceiver/state/serial-no"
func (n *Component_TransceiverPathAny) SerialNo() *Component_Transceiver_SerialNoPathAny {
	ps := &Component_Transceiver_SerialNoPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "serial-no"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SonetSdhComplianceCode (leaf): SONET/SDH application code supported by the port
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/sonet-sdh-compliance-code"
//	Path from root:       "/components/component/transceiver/state/sonet-sdh-compliance-code"
func (n *Component_TransceiverPath) SonetSdhComplianceCode() *Component_Transceiver_SonetSdhComplianceCodePath {
	ps := &Component_Transceiver_SonetSdhComplianceCodePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sonet-sdh-compliance-code"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SonetSdhComplianceCode (leaf): SONET/SDH application code supported by the port
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/sonet-sdh-compliance-code"
//	Path from root:       "/components/component/transceiver/state/sonet-sdh-compliance-code"
func (n *Component_TransceiverPathAny) SonetSdhComplianceCode() *Component_Transceiver_SonetSdhComplianceCodePathAny {
	ps := &Component_Transceiver_SonetSdhComplianceCodePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sonet-sdh-compliance-code"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SupplyVoltage (container): Supply voltage to the transceiver in volts with 2 decimal
// precision. Values include the instantaneous, average, minimum,
// and maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the instant
// value.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/supply-voltage"
//	Path from root:       "/components/component/transceiver/state/supply-voltage"
func (n *Component_TransceiverPath) SupplyVoltage() *Component_Transceiver_SupplyVoltagePath {
	ps := &Component_Transceiver_SupplyVoltagePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "supply-voltage"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SupplyVoltage (container): Supply voltage to the transceiver in volts with 2 decimal
// precision. Values include the instantaneous, average, minimum,
// and maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the instant
// value.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/supply-voltage"
//	Path from root:       "/components/component/transceiver/state/supply-voltage"
func (n *Component_TransceiverPathAny) SupplyVoltage() *Component_Transceiver_SupplyVoltagePathAny {
	ps := &Component_Transceiver_SupplyVoltagePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "supply-voltage"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ThresholdAny (list): List of transceiver alarm thresholds, indexed by
// alarm severity.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "thresholds/threshold"
//	Path from root:       "/components/component/transceiver/thresholds/threshold"
func (n *Component_TransceiverPath) ThresholdAny() *Component_Transceiver_ThresholdPathAny {
	ps := &Component_Transceiver_ThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"thresholds", "threshold"},
			map[string]interface{}{"severity": "*"},
			n,
		),
	}
	return ps
}

// ThresholdAny (list): List of transceiver alarm thresholds, indexed by
// alarm severity.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "thresholds/threshold"
//	Path from root:       "/components/component/transceiver/thresholds/threshold"
func (n *Component_TransceiverPathAny) ThresholdAny() *Component_Transceiver_ThresholdPathAny {
	ps := &Component_Transceiver_ThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"thresholds", "threshold"},
			map[string]interface{}{"severity": "*"},
			n,
		),
	}
	return ps
}

// Threshold (list): List of transceiver alarm thresholds, indexed by
// alarm severity.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "thresholds/threshold"
//	Path from root:       "/components/component/transceiver/thresholds/threshold"
//
//	Severity: oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY
func (n *Component_TransceiverPath) Threshold(Severity oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY) *Component_Transceiver_ThresholdPath {
	ps := &Component_Transceiver_ThresholdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"thresholds", "threshold"},
			map[string]interface{}{"severity": Severity},
			n,
		),
	}
	return ps
}

// Threshold (list): List of transceiver alarm thresholds, indexed by
// alarm severity.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "thresholds/threshold"
//	Path from root:       "/components/component/transceiver/thresholds/threshold"
//
//	Severity: oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY
func (n *Component_TransceiverPathAny) Threshold(Severity oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY) *Component_Transceiver_ThresholdPathAny {
	ps := &Component_Transceiver_ThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"thresholds", "threshold"},
			map[string]interface{}{"severity": Severity},
			n,
		),
	}
	return ps
}

// ThresholdMap (list): List of transceiver alarm thresholds, indexed by
// alarm severity.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "thresholds/threshold"
//	Path from root:       "/components/component/transceiver/thresholds/threshold"
func (n *Component_TransceiverPath) ThresholdMap() *Component_Transceiver_ThresholdPathMap {
	ps := &Component_Transceiver_ThresholdPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"thresholds"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ThresholdMap (list): List of transceiver alarm thresholds, indexed by
// alarm severity.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "thresholds/threshold"
//	Path from root:       "/components/component/transceiver/thresholds/threshold"
func (n *Component_TransceiverPathAny) ThresholdMap() *Component_Transceiver_ThresholdPathMapAny {
	ps := &Component_Transceiver_ThresholdPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"thresholds"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Vendor (leaf): Full name of transceiver vendor. 16-octet field that
// contains ASCII characters, left-aligned and padded on the
// right with ASCII spaces (20h)
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/vendor"
//	Path from root:       "/components/component/transceiver/state/vendor"
func (n *Component_TransceiverPath) Vendor() *Component_Transceiver_VendorPath {
	ps := &Component_Transceiver_VendorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "vendor"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Vendor (leaf): Full name of transceiver vendor. 16-octet field that
// contains ASCII characters, left-aligned and padded on the
// right with ASCII spaces (20h)
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/vendor"
//	Path from root:       "/components/component/transceiver/state/vendor"
func (n *Component_TransceiverPathAny) Vendor() *Component_Transceiver_VendorPathAny {
	ps := &Component_Transceiver_VendorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "vendor"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VendorPart (leaf): Transceiver vendor's part number. 16-octet field that
// contains ASCII characters, left-aligned and padded on the
// right with ASCII spaces (20h). If part number is undefined,
// all 16 octets = 0h
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/vendor-part"
//	Path from root:       "/components/component/transceiver/state/vendor-part"
func (n *Component_TransceiverPath) VendorPart() *Component_Transceiver_VendorPartPath {
	ps := &Component_Transceiver_VendorPartPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "vendor-part"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VendorPart (leaf): Transceiver vendor's part number. 16-octet field that
// contains ASCII characters, left-aligned and padded on the
// right with ASCII spaces (20h). If part number is undefined,
// all 16 octets = 0h
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/vendor-part"
//	Path from root:       "/components/component/transceiver/state/vendor-part"
func (n *Component_TransceiverPathAny) VendorPart() *Component_Transceiver_VendorPartPathAny {
	ps := &Component_Transceiver_VendorPartPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "vendor-part"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VendorRev (leaf): Transceiver vendor's revision number. Field of 1 to 4 octets that
// contains ASCII characters, left-aligned and padded on the
// right with ASCII spaces (20h)
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/vendor-rev"
//	Path from root:       "/components/component/transceiver/state/vendor-rev"
func (n *Component_TransceiverPath) VendorRev() *Component_Transceiver_VendorRevPath {
	ps := &Component_Transceiver_VendorRevPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "vendor-rev"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VendorRev (leaf): Transceiver vendor's revision number. Field of 1 to 4 octets that
// contains ASCII characters, left-aligned and padded on the
// right with ASCII spaces (20h)
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/vendor-rev"
//	Path from root:       "/components/component/transceiver/state/vendor-rev"
func (n *Component_TransceiverPathAny) VendorRev() *Component_Transceiver_VendorRevPathAny {
	ps := &Component_Transceiver_VendorRevPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "vendor-rev"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_TransceiverPath) State() ygnmi.SingletonQuery[*oc.Component_Transceiver] {
	return ygnmi.NewSingletonQuery[*oc.Component_Transceiver](
		"Component_Transceiver",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_TransceiverPathAny) State() ygnmi.WildcardQuery[*oc.Component_Transceiver] {
	return ygnmi.NewWildcardQuery[*oc.Component_Transceiver](
		"Component_Transceiver",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_TransceiverPath) Config() ygnmi.ConfigQuery[*oc.Component_Transceiver] {
	return ygnmi.NewConfigQuery[*oc.Component_Transceiver](
		"Component_Transceiver",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_TransceiverPathAny) Config() ygnmi.WildcardQuery[*oc.Component_Transceiver] {
	return ygnmi.NewWildcardQuery[*oc.Component_Transceiver](
		"Component_Transceiver",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_AssociatedOpticalChannelPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/associated-optical-channel YANG schema element.
type Component_Transceiver_Channel_AssociatedOpticalChannelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_AssociatedOpticalChannelPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/associated-optical-channel YANG schema element.
type Component_Transceiver_Channel_AssociatedOpticalChannelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/associated-optical-channel"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/associated-optical-channel"
func (n *Component_Transceiver_Channel_AssociatedOpticalChannelPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "associated-optical-channel"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).AssociatedOpticalChannel
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/associated-optical-channel"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/associated-optical-channel"
func (n *Component_Transceiver_Channel_AssociatedOpticalChannelPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "associated-optical-channel"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).AssociatedOpticalChannel
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/associated-optical-channel"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/config/associated-optical-channel"
func (n *Component_Transceiver_Channel_AssociatedOpticalChannelPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Component_Transceiver_Channel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "associated-optical-channel"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).AssociatedOpticalChannel
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/associated-optical-channel"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/config/associated-optical-channel"
func (n *Component_Transceiver_Channel_AssociatedOpticalChannelPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_Transceiver_Channel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "associated-optical-channel"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).AssociatedOpticalChannel
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_DescriptionPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/description YANG schema element.
type Component_Transceiver_Channel_DescriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_DescriptionPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/description YANG schema element.
type Component_Transceiver_Channel_DescriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/description"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/description"
func (n *Component_Transceiver_Channel_DescriptionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/description"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/description"
func (n *Component_Transceiver_Channel_DescriptionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/description"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/config/description"
func (n *Component_Transceiver_Channel_DescriptionPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Component_Transceiver_Channel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/description"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/config/description"
func (n *Component_Transceiver_Channel_DescriptionPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_Transceiver_Channel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_IndexPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/index YANG schema element.
type Component_Transceiver_Channel_IndexPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_IndexPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/index YANG schema element.
type Component_Transceiver_Channel_IndexPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/index"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/index"
func (n *Component_Transceiver_Channel_IndexPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).Index
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/index"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/index"
func (n *Component_Transceiver_Channel_IndexPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).Index
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/index"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/config/index"
func (n *Component_Transceiver_Channel_IndexPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Component_Transceiver_Channel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).Index
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/index"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/config/index"
func (n *Component_Transceiver_Channel_IndexPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Component_Transceiver_Channel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).Index
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_LaserAgePath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-age YANG schema element.
type Component_Transceiver_Channel_LaserAgePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_LaserAgePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-age YANG schema element.
type Component_Transceiver_Channel_LaserAgePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/laser-age"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-age"
func (n *Component_Transceiver_Channel_LaserAgePath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "laser-age"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).LaserAge
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/laser-age"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-age"
func (n *Component_Transceiver_Channel_LaserAgePathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "laser-age"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).LaserAge
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_OutputFrequencyPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/output-frequency YANG schema element.
type Component_Transceiver_Channel_OutputFrequencyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_OutputFrequencyPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/output-frequency YANG schema element.
type Component_Transceiver_Channel_OutputFrequencyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/output-frequency"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-frequency"
func (n *Component_Transceiver_Channel_OutputFrequencyPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "output-frequency"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).OutputFrequency
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/output-frequency"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-frequency"
func (n *Component_Transceiver_Channel_OutputFrequencyPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "output-frequency"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).OutputFrequency
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_RxCdrLolPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/rx-cdr-lol YANG schema element.
type Component_Transceiver_Channel_RxCdrLolPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_RxCdrLolPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/rx-cdr-lol YANG schema element.
type Component_Transceiver_Channel_RxCdrLolPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/rx-cdr-lol"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/rx-cdr-lol"
func (n *Component_Transceiver_Channel_RxCdrLolPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "rx-cdr-lol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).RxCdrLol
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/rx-cdr-lol"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/rx-cdr-lol"
func (n *Component_Transceiver_Channel_RxCdrLolPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "rx-cdr-lol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).RxCdrLol
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_RxLosPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/rx-los YANG schema element.
type Component_Transceiver_Channel_RxLosPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_RxLosPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/rx-los YANG schema element.
type Component_Transceiver_Channel_RxLosPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/rx-los"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/rx-los"
func (n *Component_Transceiver_Channel_RxLosPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "rx-los"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).RxLos
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/rx-los"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/rx-los"
func (n *Component_Transceiver_Channel_RxLosPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "rx-los"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).RxLos
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TargetOutputPowerPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/target-output-power YANG schema element.
type Component_Transceiver_Channel_TargetOutputPowerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TargetOutputPowerPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/target-output-power YANG schema element.
type Component_Transceiver_Channel_TargetOutputPowerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/target-output-power"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-output-power"
func (n *Component_Transceiver_Channel_TargetOutputPowerPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "target-output-power"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).TargetOutputPower
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/target-output-power"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-output-power"
func (n *Component_Transceiver_Channel_TargetOutputPowerPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "target-output-power"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).TargetOutputPower
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/target-output-power"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/config/target-output-power"
func (n *Component_Transceiver_Channel_TargetOutputPowerPath) Config() ygnmi.ConfigQuery[float64] {
	return ygnmi.NewConfigQuery[float64](
		"Component_Transceiver_Channel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "target-output-power"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).TargetOutputPower
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/target-output-power"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/config/target-output-power"
func (n *Component_Transceiver_Channel_TargetOutputPowerPathAny) Config() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "target-output-power"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).TargetOutputPower
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TxFailurePath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tx-failure YANG schema element.
type Component_Transceiver_Channel_TxFailurePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TxFailurePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tx-failure YANG schema element.
type Component_Transceiver_Channel_TxFailurePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/tx-failure"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tx-failure"
func (n *Component_Transceiver_Channel_TxFailurePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tx-failure"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).TxFailure
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/tx-failure"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tx-failure"
func (n *Component_Transceiver_Channel_TxFailurePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tx-failure"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).TxFailure
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TxLaserPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tx-laser YANG schema element.
type Component_Transceiver_Channel_TxLaserPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TxLaserPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tx-laser YANG schema element.
type Component_Transceiver_Channel_TxLaserPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/tx-laser"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tx-laser"
func (n *Component_Transceiver_Channel_TxLaserPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tx-laser"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).TxLaser
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/tx-laser"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tx-laser"
func (n *Component_Transceiver_Channel_TxLaserPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tx-laser"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).TxLaser
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/tx-laser"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/config/tx-laser"
func (n *Component_Transceiver_Channel_TxLaserPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Component_Transceiver_Channel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tx-laser"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).TxLaser
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/tx-laser"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/config/tx-laser"
func (n *Component_Transceiver_Channel_TxLaserPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_Transceiver_Channel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tx-laser"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).TxLaser
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_ChannelPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel YANG schema element.
type Component_Transceiver_ChannelPath struct {
	*ygnmi.NodePath
}

// Component_Transceiver_ChannelPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel YANG schema element.
type Component_Transceiver_ChannelPathAny struct {
	*ygnmi.NodePath
}

// Component_Transceiver_ChannelPathMap represents the /openconfig-platform/components/component/transceiver/physical-channels/channel YANG schema element.
type Component_Transceiver_ChannelPathMap struct {
	*ygnmi.NodePath
}

// Component_Transceiver_ChannelPathMapAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel YANG schema element.
type Component_Transceiver_ChannelPathMapAny struct {
	*ygnmi.NodePath
}

// AssociatedOpticalChannel (leaf): A physical channel may reference an optical channel
// component. If the physical channel does make this optional
// reference, then a limited set of leaves will apply within
// the physical channel to avoid duplication within the optical
// channel.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/associated-optical-channel"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/*/associated-optical-channel"
func (n *Component_Transceiver_ChannelPath) AssociatedOpticalChannel() *Component_Transceiver_Channel_AssociatedOpticalChannelPath {
	ps := &Component_Transceiver_Channel_AssociatedOpticalChannelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "associated-optical-channel"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AssociatedOpticalChannel (leaf): A physical channel may reference an optical channel
// component. If the physical channel does make this optional
// reference, then a limited set of leaves will apply within
// the physical channel to avoid duplication within the optical
// channel.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/associated-optical-channel"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/*/associated-optical-channel"
func (n *Component_Transceiver_ChannelPathAny) AssociatedOpticalChannel() *Component_Transceiver_Channel_AssociatedOpticalChannelPathAny {
	ps := &Component_Transceiver_Channel_AssociatedOpticalChannelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "associated-optical-channel"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Description (leaf): Text description for the client physical channel
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/description"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/*/description"
func (n *Component_Transceiver_ChannelPath) Description() *Component_Transceiver_Channel_DescriptionPath {
	ps := &Component_Transceiver_Channel_DescriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Description (leaf): Text description for the client physical channel
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/description"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/*/description"
func (n *Component_Transceiver_ChannelPathAny) Description() *Component_Transceiver_Channel_DescriptionPathAny {
	ps := &Component_Transceiver_Channel_DescriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): Index of the physical channnel or lane within a physical
// client port
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/index"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/*/index"
func (n *Component_Transceiver_ChannelPath) Index() *Component_Transceiver_Channel_IndexPath {
	ps := &Component_Transceiver_Channel_IndexPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): Index of the physical channnel or lane within a physical
// client port
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/index"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/*/index"
func (n *Component_Transceiver_ChannelPathAny) Index() *Component_Transceiver_Channel_IndexPathAny {
	ps := &Component_Transceiver_Channel_IndexPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InputPower (container): The input optical power of a physical channel in units
// of 0.01dBm, which may be associated with individual
// physical channels, or an aggregate of multiple physical
// channels (i.e., for the overall transceiver). For an
// aggregate, this may be a measurement from a photodetector
// or a a calculation performed on the device by summing up
// all of the related individual physical channels.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value. When the physical channel has a leafref to
// an optical channel component and the module-functional-type is
// TYPE_DIGITAL_COHERENT_OPTIC this represents the aggregate
// total optical power value (signal and noise) whereas
// optical power value within the optical-channel represents
// the signal power
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/input-power"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power"
func (n *Component_Transceiver_ChannelPath) InputPower() *Component_Transceiver_Channel_InputPowerPath {
	ps := &Component_Transceiver_Channel_InputPowerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "input-power"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InputPower (container): The input optical power of a physical channel in units
// of 0.01dBm, which may be associated with individual
// physical channels, or an aggregate of multiple physical
// channels (i.e., for the overall transceiver). For an
// aggregate, this may be a measurement from a photodetector
// or a a calculation performed on the device by summing up
// all of the related individual physical channels.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value. When the physical channel has a leafref to
// an optical channel component and the module-functional-type is
// TYPE_DIGITAL_COHERENT_OPTIC this represents the aggregate
// total optical power value (signal and noise) whereas
// optical power value within the optical-channel represents
// the signal power
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/input-power"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power"
func (n *Component_Transceiver_ChannelPathAny) InputPower() *Component_Transceiver_Channel_InputPowerPathAny {
	ps := &Component_Transceiver_Channel_InputPowerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "input-power"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LaserAge (leaf): Laser age (0% at beginning of life, 100% end of life) in integer
// percentage. This term is defined by Common Management Interface
// Specification (CMIS).
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/laser-age"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-age"
func (n *Component_Transceiver_ChannelPath) LaserAge() *Component_Transceiver_Channel_LaserAgePath {
	ps := &Component_Transceiver_Channel_LaserAgePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "laser-age"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LaserAge (leaf): Laser age (0% at beginning of life, 100% end of life) in integer
// percentage. This term is defined by Common Management Interface
// Specification (CMIS).
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/laser-age"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-age"
func (n *Component_Transceiver_ChannelPathAny) LaserAge() *Component_Transceiver_Channel_LaserAgePathAny {
	ps := &Component_Transceiver_Channel_LaserAgePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "laser-age"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LaserBiasCurrent (container): The current applied by the system to the transmit laser to
// achieve the output power. The current is expressed in mA
// with up to two decimal precision. Values include the
// instantaneous, average, minimum, and maximum statistics.
// If avg/min/max statistics are not supported, the target is
// expected to just supply the instant value. In some cases,
// such as when the physical channel has a leafref to an optical
// channel component and the module-functional-type is
// TYPE_DIGITAL_COHERENT_OPTIC this grouping will NOT be used
// as the data will be within the optical-channel
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/laser-bias-current"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current"
func (n *Component_Transceiver_ChannelPath) LaserBiasCurrent() *Component_Transceiver_Channel_LaserBiasCurrentPath {
	ps := &Component_Transceiver_Channel_LaserBiasCurrentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "laser-bias-current"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LaserBiasCurrent (container): The current applied by the system to the transmit laser to
// achieve the output power. The current is expressed in mA
// with up to two decimal precision. Values include the
// instantaneous, average, minimum, and maximum statistics.
// If avg/min/max statistics are not supported, the target is
// expected to just supply the instant value. In some cases,
// such as when the physical channel has a leafref to an optical
// channel component and the module-functional-type is
// TYPE_DIGITAL_COHERENT_OPTIC this grouping will NOT be used
// as the data will be within the optical-channel
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/laser-bias-current"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current"
func (n *Component_Transceiver_ChannelPathAny) LaserBiasCurrent() *Component_Transceiver_Channel_LaserBiasCurrentPathAny {
	ps := &Component_Transceiver_Channel_LaserBiasCurrentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "laser-bias-current"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LaserTemperature (container): Laser temperature for the cooled laser in degrees Celsius with 1
// decimal precision. This term is defined by Common Management
// Interface Specification (CMIS). Values include the instantaneous,
// average, minimum, and maximum statistics. If avg/min/max statistics
// are not supported, the target is expected to just supply the
// instant value.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/laser-temperature"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature"
func (n *Component_Transceiver_ChannelPath) LaserTemperature() *Component_Transceiver_Channel_LaserTemperaturePath {
	ps := &Component_Transceiver_Channel_LaserTemperaturePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "laser-temperature"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LaserTemperature (container): Laser temperature for the cooled laser in degrees Celsius with 1
// decimal precision. This term is defined by Common Management
// Interface Specification (CMIS). Values include the instantaneous,
// average, minimum, and maximum statistics. If avg/min/max statistics
// are not supported, the target is expected to just supply the
// instant value.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/laser-temperature"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature"
func (n *Component_Transceiver_ChannelPathAny) LaserTemperature() *Component_Transceiver_Channel_LaserTemperaturePathAny {
	ps := &Component_Transceiver_Channel_LaserTemperaturePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "laser-temperature"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// OutputFrequency (leaf): The frequency in MHz of the individual physical channel
// (e.g. ITU C50 - 195.0THz and would be reported as
// 195,000,000 MHz in this model). This attribute is not
// configurable on most client ports In some cases, such as when
// the physical channel has a leafref to an optical channel
// component and the module-functional-type is
// TYPE_DIGITAL_COHERENT_OPTIC this grouping will NOT be used
// as the data will be within the optical-channel.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/output-frequency"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-frequency"
func (n *Component_Transceiver_ChannelPath) OutputFrequency() *Component_Transceiver_Channel_OutputFrequencyPath {
	ps := &Component_Transceiver_Channel_OutputFrequencyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "output-frequency"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutputFrequency (leaf): The frequency in MHz of the individual physical channel
// (e.g. ITU C50 - 195.0THz and would be reported as
// 195,000,000 MHz in this model). This attribute is not
// configurable on most client ports In some cases, such as when
// the physical channel has a leafref to an optical channel
// component and the module-functional-type is
// TYPE_DIGITAL_COHERENT_OPTIC this grouping will NOT be used
// as the data will be within the optical-channel.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/output-frequency"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-frequency"
func (n *Component_Transceiver_ChannelPathAny) OutputFrequency() *Component_Transceiver_Channel_OutputFrequencyPathAny {
	ps := &Component_Transceiver_Channel_OutputFrequencyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "output-frequency"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutputPower (container): The output optical power of a physical channel in units
// of 0.01dBm, which may be associated with individual
// physical channels, or an aggregate of multiple physical
// channels (i.e., for the overall transceiver). For an
// aggregate, this may be a measurement from a photodetector
// or a a calculation performed on the device by summing up
// all of the related individual physical channels.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value. In some cases, such as when the physical
// channel has a leafref to an optical channel component and the
// module-functional-type is TYPE_DIGITAL_COHERENT_OPTIC this
// grouping will NOT be used as the data will be within the
// optical-channel
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/output-power"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power"
func (n *Component_Transceiver_ChannelPath) OutputPower() *Component_Transceiver_Channel_OutputPowerPath {
	ps := &Component_Transceiver_Channel_OutputPowerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "output-power"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// OutputPower (container): The output optical power of a physical channel in units
// of 0.01dBm, which may be associated with individual
// physical channels, or an aggregate of multiple physical
// channels (i.e., for the overall transceiver). For an
// aggregate, this may be a measurement from a photodetector
// or a a calculation performed on the device by summing up
// all of the related individual physical channels.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value. In some cases, such as when the physical
// channel has a leafref to an optical channel component and the
// module-functional-type is TYPE_DIGITAL_COHERENT_OPTIC this
// grouping will NOT be used as the data will be within the
// optical-channel
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/output-power"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power"
func (n *Component_Transceiver_ChannelPathAny) OutputPower() *Component_Transceiver_Channel_OutputPowerPathAny {
	ps := &Component_Transceiver_Channel_OutputPowerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "output-power"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RxCdrLol (leaf): Receiver clock-and-data-recovery loss-of-lock flag.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/rx-cdr-lol"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/rx-cdr-lol"
func (n *Component_Transceiver_ChannelPath) RxCdrLol() *Component_Transceiver_Channel_RxCdrLolPath {
	ps := &Component_Transceiver_Channel_RxCdrLolPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "rx-cdr-lol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RxCdrLol (leaf): Receiver clock-and-data-recovery loss-of-lock flag.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/rx-cdr-lol"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/rx-cdr-lol"
func (n *Component_Transceiver_ChannelPathAny) RxCdrLol() *Component_Transceiver_Channel_RxCdrLolPathAny {
	ps := &Component_Transceiver_Channel_RxCdrLolPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "rx-cdr-lol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RxLos (leaf): Receiver loss-of-signal flag.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/rx-los"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/rx-los"
func (n *Component_Transceiver_ChannelPath) RxLos() *Component_Transceiver_Channel_RxLosPath {
	ps := &Component_Transceiver_Channel_RxLosPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "rx-los"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RxLos (leaf): Receiver loss-of-signal flag.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/rx-los"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/rx-los"
func (n *Component_Transceiver_ChannelPathAny) RxLos() *Component_Transceiver_Channel_RxLosPathAny {
	ps := &Component_Transceiver_Channel_RxLosPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "rx-los"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TargetFrequencyDeviation (container): The difference in MHz with 1 decimal precision between the target
// center frequency and the actual current center frequency . This term
// is defined by Common Management Interface Specification (CMIS) and
// referred to as laser frequency error or laser ferquency deviation.
// Values include the instantaneous, average, minimum, and maximum
// statistics. If avg/min/max statistics are not supported, the target
// is expected to just supply the instant value.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/target-frequency-deviation"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation"
func (n *Component_Transceiver_ChannelPath) TargetFrequencyDeviation() *Component_Transceiver_Channel_TargetFrequencyDeviationPath {
	ps := &Component_Transceiver_Channel_TargetFrequencyDeviationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "target-frequency-deviation"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TargetFrequencyDeviation (container): The difference in MHz with 1 decimal precision between the target
// center frequency and the actual current center frequency . This term
// is defined by Common Management Interface Specification (CMIS) and
// referred to as laser frequency error or laser ferquency deviation.
// Values include the instantaneous, average, minimum, and maximum
// statistics. If avg/min/max statistics are not supported, the target
// is expected to just supply the instant value.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/target-frequency-deviation"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation"
func (n *Component_Transceiver_ChannelPathAny) TargetFrequencyDeviation() *Component_Transceiver_Channel_TargetFrequencyDeviationPathAny {
	ps := &Component_Transceiver_Channel_TargetFrequencyDeviationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "target-frequency-deviation"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TargetOutputPower (leaf): Target output optical power level of the optical channel,
// expressed in increments of 0.01 dBm (decibel-milliwats)
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/target-output-power"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/*/target-output-power"
func (n *Component_Transceiver_ChannelPath) TargetOutputPower() *Component_Transceiver_Channel_TargetOutputPowerPath {
	ps := &Component_Transceiver_Channel_TargetOutputPowerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "target-output-power"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TargetOutputPower (leaf): Target output optical power level of the optical channel,
// expressed in increments of 0.01 dBm (decibel-milliwats)
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/target-output-power"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/*/target-output-power"
func (n *Component_Transceiver_ChannelPathAny) TargetOutputPower() *Component_Transceiver_Channel_TargetOutputPowerPathAny {
	ps := &Component_Transceiver_Channel_TargetOutputPowerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "target-output-power"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TecCurrent (container): The amount of current flowing to the TC of a cooled laser in percentage
// with 2 decimal precision. This term is defined by Common Management
// Interface Specification (CMIS). Values include the instantaneous,
// average, minimum, and maximum statistics. If avg/min/max statistics
// are not supported, the target is expected to just supply the instant
// value.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/tec-current"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current"
func (n *Component_Transceiver_ChannelPath) TecCurrent() *Component_Transceiver_Channel_TecCurrentPath {
	ps := &Component_Transceiver_Channel_TecCurrentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "tec-current"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TecCurrent (container): The amount of current flowing to the TC of a cooled laser in percentage
// with 2 decimal precision. This term is defined by Common Management
// Interface Specification (CMIS). Values include the instantaneous,
// average, minimum, and maximum statistics. If avg/min/max statistics
// are not supported, the target is expected to just supply the instant
// value.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/tec-current"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current"
func (n *Component_Transceiver_ChannelPathAny) TecCurrent() *Component_Transceiver_Channel_TecCurrentPathAny {
	ps := &Component_Transceiver_Channel_TecCurrentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "tec-current"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TxFailure (leaf): Transmitter failure flag.
// In earlier standards, including SFF-8436, SFF-8472, and QSFP-DD CMIS 4.0,
// this flag was named Tx Fault.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/tx-failure"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tx-failure"
func (n *Component_Transceiver_ChannelPath) TxFailure() *Component_Transceiver_Channel_TxFailurePath {
	ps := &Component_Transceiver_Channel_TxFailurePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "tx-failure"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TxFailure (leaf): Transmitter failure flag.
// In earlier standards, including SFF-8436, SFF-8472, and QSFP-DD CMIS 4.0,
// this flag was named Tx Fault.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/tx-failure"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tx-failure"
func (n *Component_Transceiver_ChannelPathAny) TxFailure() *Component_Transceiver_Channel_TxFailurePathAny {
	ps := &Component_Transceiver_Channel_TxFailurePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "tx-failure"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TxLaser (leaf): Enable (true) or disable (false) the transmit label for the
// channel
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/tx-laser"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/*/tx-laser"
func (n *Component_Transceiver_ChannelPath) TxLaser() *Component_Transceiver_Channel_TxLaserPath {
	ps := &Component_Transceiver_Channel_TxLaserPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tx-laser"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TxLaser (leaf): Enable (true) or disable (false) the transmit label for the
// channel
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/tx-laser"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/*/tx-laser"
func (n *Component_Transceiver_ChannelPathAny) TxLaser() *Component_Transceiver_Channel_TxLaserPathAny {
	ps := &Component_Transceiver_Channel_TxLaserPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tx-laser"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_ChannelPath) State() ygnmi.SingletonQuery[*oc.Component_Transceiver_Channel] {
	return ygnmi.NewSingletonQuery[*oc.Component_Transceiver_Channel](
		"Component_Transceiver_Channel",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_ChannelPathAny) State() ygnmi.WildcardQuery[*oc.Component_Transceiver_Channel] {
	return ygnmi.NewWildcardQuery[*oc.Component_Transceiver_Channel](
		"Component_Transceiver_Channel",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_ChannelPath) Config() ygnmi.ConfigQuery[*oc.Component_Transceiver_Channel] {
	return ygnmi.NewConfigQuery[*oc.Component_Transceiver_Channel](
		"Component_Transceiver_Channel",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_ChannelPathAny) Config() ygnmi.WildcardQuery[*oc.Component_Transceiver_Channel] {
	return ygnmi.NewWildcardQuery[*oc.Component_Transceiver_Channel](
		"Component_Transceiver_Channel",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_ChannelPathMap) State() ygnmi.SingletonQuery[map[uint16]*oc.Component_Transceiver_Channel] {
	return ygnmi.NewSingletonQuery[map[uint16]*oc.Component_Transceiver_Channel](
		"Component_Transceiver",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint16]*oc.Component_Transceiver_Channel, bool) {
			ret := gs.(*oc.Component_Transceiver).Channel
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-transceiver:physical-channels"},
			PostRelPath: []string{"openconfig-platform-transceiver:channel"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_ChannelPathMapAny) State() ygnmi.WildcardQuery[map[uint16]*oc.Component_Transceiver_Channel] {
	return ygnmi.NewWildcardQuery[map[uint16]*oc.Component_Transceiver_Channel](
		"Component_Transceiver",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint16]*oc.Component_Transceiver_Channel, bool) {
			ret := gs.(*oc.Component_Transceiver).Channel
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-transceiver:physical-channels"},
			PostRelPath: []string{"openconfig-platform-transceiver:channel"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_ChannelPathMap) Config() ygnmi.ConfigQuery[map[uint16]*oc.Component_Transceiver_Channel] {
	return ygnmi.NewConfigQuery[map[uint16]*oc.Component_Transceiver_Channel](
		"Component_Transceiver",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint16]*oc.Component_Transceiver_Channel, bool) {
			ret := gs.(*oc.Component_Transceiver).Channel
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-transceiver:physical-channels"},
			PostRelPath: []string{"openconfig-platform-transceiver:channel"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_ChannelPathMapAny) Config() ygnmi.WildcardQuery[map[uint16]*oc.Component_Transceiver_Channel] {
	return ygnmi.NewWildcardQuery[map[uint16]*oc.Component_Transceiver_Channel](
		"Component_Transceiver",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint16]*oc.Component_Transceiver_Channel, bool) {
			ret := gs.(*oc.Component_Transceiver).Channel
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-transceiver:physical-channels"},
			PostRelPath: []string{"openconfig-platform-transceiver:channel"},
		},
	)
}

// Component_Transceiver_Channel_InputPower_AvgPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/input-power/avg YANG schema element.
type Component_Transceiver_Channel_InputPower_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_InputPower_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/input-power/avg YANG schema element.
type Component_Transceiver_Channel_InputPower_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/avg"
func (n *Component_Transceiver_Channel_InputPower_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_InputPower).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/avg"
func (n *Component_Transceiver_Channel_InputPower_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_InputPower).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_InputPower_InstantPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/input-power/instant YANG schema element.
type Component_Transceiver_Channel_InputPower_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_InputPower_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/input-power/instant YANG schema element.
type Component_Transceiver_Channel_InputPower_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/instant"
func (n *Component_Transceiver_Channel_InputPower_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_InputPower).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/instant"
func (n *Component_Transceiver_Channel_InputPower_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_InputPower).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_InputPower_IntervalPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/input-power/interval YANG schema element.
type Component_Transceiver_Channel_InputPower_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_InputPower_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/input-power/interval YANG schema element.
type Component_Transceiver_Channel_InputPower_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/interval"
func (n *Component_Transceiver_Channel_InputPower_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_Channel_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_InputPower).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/interval"
func (n *Component_Transceiver_Channel_InputPower_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_Channel_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_InputPower).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_InputPower_MaxPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/input-power/max YANG schema element.
type Component_Transceiver_Channel_InputPower_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_InputPower_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/input-power/max YANG schema element.
type Component_Transceiver_Channel_InputPower_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/max"
func (n *Component_Transceiver_Channel_InputPower_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_InputPower).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/max"
func (n *Component_Transceiver_Channel_InputPower_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_InputPower).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_InputPower_MaxTimePath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/input-power/max-time YANG schema element.
type Component_Transceiver_Channel_InputPower_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_InputPower_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/input-power/max-time YANG schema element.
type Component_Transceiver_Channel_InputPower_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/max-time"
func (n *Component_Transceiver_Channel_InputPower_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_Channel_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_InputPower).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/max-time"
func (n *Component_Transceiver_Channel_InputPower_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_Channel_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_InputPower).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_InputPower_MinPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/input-power/min YANG schema element.
type Component_Transceiver_Channel_InputPower_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_InputPower_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/input-power/min YANG schema element.
type Component_Transceiver_Channel_InputPower_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/min"
func (n *Component_Transceiver_Channel_InputPower_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_InputPower).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/min"
func (n *Component_Transceiver_Channel_InputPower_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_InputPower).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_InputPower_MinTimePath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/input-power/min-time YANG schema element.
type Component_Transceiver_Channel_InputPower_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_InputPower_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/input-power/min-time YANG schema element.
type Component_Transceiver_Channel_InputPower_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/min-time"
func (n *Component_Transceiver_Channel_InputPower_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_Channel_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_InputPower).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/min-time"
func (n *Component_Transceiver_Channel_InputPower_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_Channel_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_InputPower).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_InputPowerPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/input-power YANG schema element.
type Component_Transceiver_Channel_InputPowerPath struct {
	*ygnmi.NodePath
}

// Component_Transceiver_Channel_InputPowerPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/input-power YANG schema element.
type Component_Transceiver_Channel_InputPowerPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/avg"
func (n *Component_Transceiver_Channel_InputPowerPath) Avg() *Component_Transceiver_Channel_InputPower_AvgPath {
	ps := &Component_Transceiver_Channel_InputPower_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/avg"
func (n *Component_Transceiver_Channel_InputPowerPathAny) Avg() *Component_Transceiver_Channel_InputPower_AvgPathAny {
	ps := &Component_Transceiver_Channel_InputPower_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/instant"
func (n *Component_Transceiver_Channel_InputPowerPath) Instant() *Component_Transceiver_Channel_InputPower_InstantPath {
	ps := &Component_Transceiver_Channel_InputPower_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/instant"
func (n *Component_Transceiver_Channel_InputPowerPathAny) Instant() *Component_Transceiver_Channel_InputPower_InstantPathAny {
	ps := &Component_Transceiver_Channel_InputPower_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/interval"
func (n *Component_Transceiver_Channel_InputPowerPath) Interval() *Component_Transceiver_Channel_InputPower_IntervalPath {
	ps := &Component_Transceiver_Channel_InputPower_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/interval"
func (n *Component_Transceiver_Channel_InputPowerPathAny) Interval() *Component_Transceiver_Channel_InputPower_IntervalPathAny {
	ps := &Component_Transceiver_Channel_InputPower_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/max"
func (n *Component_Transceiver_Channel_InputPowerPath) Max() *Component_Transceiver_Channel_InputPower_MaxPath {
	ps := &Component_Transceiver_Channel_InputPower_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/max"
func (n *Component_Transceiver_Channel_InputPowerPathAny) Max() *Component_Transceiver_Channel_InputPower_MaxPathAny {
	ps := &Component_Transceiver_Channel_InputPower_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/max-time"
func (n *Component_Transceiver_Channel_InputPowerPath) MaxTime() *Component_Transceiver_Channel_InputPower_MaxTimePath {
	ps := &Component_Transceiver_Channel_InputPower_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/max-time"
func (n *Component_Transceiver_Channel_InputPowerPathAny) MaxTime() *Component_Transceiver_Channel_InputPower_MaxTimePathAny {
	ps := &Component_Transceiver_Channel_InputPower_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/min"
func (n *Component_Transceiver_Channel_InputPowerPath) Min() *Component_Transceiver_Channel_InputPower_MinPath {
	ps := &Component_Transceiver_Channel_InputPower_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/min"
func (n *Component_Transceiver_Channel_InputPowerPathAny) Min() *Component_Transceiver_Channel_InputPower_MinPathAny {
	ps := &Component_Transceiver_Channel_InputPower_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/min-time"
func (n *Component_Transceiver_Channel_InputPowerPath) MinTime() *Component_Transceiver_Channel_InputPower_MinTimePath {
	ps := &Component_Transceiver_Channel_InputPower_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/min-time"
func (n *Component_Transceiver_Channel_InputPowerPathAny) MinTime() *Component_Transceiver_Channel_InputPower_MinTimePathAny {
	ps := &Component_Transceiver_Channel_InputPower_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_Channel_InputPowerPath) State() ygnmi.SingletonQuery[*oc.Component_Transceiver_Channel_InputPower] {
	return ygnmi.NewSingletonQuery[*oc.Component_Transceiver_Channel_InputPower](
		"Component_Transceiver_Channel_InputPower",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_Channel_InputPowerPathAny) State() ygnmi.WildcardQuery[*oc.Component_Transceiver_Channel_InputPower] {
	return ygnmi.NewWildcardQuery[*oc.Component_Transceiver_Channel_InputPower](
		"Component_Transceiver_Channel_InputPower",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_LaserBiasCurrent_AvgPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-bias-current/avg YANG schema element.
type Component_Transceiver_Channel_LaserBiasCurrent_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_LaserBiasCurrent_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-bias-current/avg YANG schema element.
type Component_Transceiver_Channel_LaserBiasCurrent_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/avg"
func (n *Component_Transceiver_Channel_LaserBiasCurrent_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserBiasCurrent).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/avg"
func (n *Component_Transceiver_Channel_LaserBiasCurrent_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserBiasCurrent).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_LaserBiasCurrent_InstantPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-bias-current/instant YANG schema element.
type Component_Transceiver_Channel_LaserBiasCurrent_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_LaserBiasCurrent_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-bias-current/instant YANG schema element.
type Component_Transceiver_Channel_LaserBiasCurrent_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/instant"
func (n *Component_Transceiver_Channel_LaserBiasCurrent_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserBiasCurrent).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/instant"
func (n *Component_Transceiver_Channel_LaserBiasCurrent_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserBiasCurrent).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_LaserBiasCurrent_IntervalPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-bias-current/interval YANG schema element.
type Component_Transceiver_Channel_LaserBiasCurrent_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_LaserBiasCurrent_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-bias-current/interval YANG schema element.
type Component_Transceiver_Channel_LaserBiasCurrent_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/interval"
func (n *Component_Transceiver_Channel_LaserBiasCurrent_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_Channel_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserBiasCurrent).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/interval"
func (n *Component_Transceiver_Channel_LaserBiasCurrent_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_Channel_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserBiasCurrent).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_LaserBiasCurrent_MaxPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-bias-current/max YANG schema element.
type Component_Transceiver_Channel_LaserBiasCurrent_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_LaserBiasCurrent_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-bias-current/max YANG schema element.
type Component_Transceiver_Channel_LaserBiasCurrent_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/max"
func (n *Component_Transceiver_Channel_LaserBiasCurrent_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserBiasCurrent).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/max"
func (n *Component_Transceiver_Channel_LaserBiasCurrent_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserBiasCurrent).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_LaserBiasCurrent_MaxTimePath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-bias-current/max-time YANG schema element.
type Component_Transceiver_Channel_LaserBiasCurrent_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_LaserBiasCurrent_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-bias-current/max-time YANG schema element.
type Component_Transceiver_Channel_LaserBiasCurrent_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/max-time"
func (n *Component_Transceiver_Channel_LaserBiasCurrent_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_Channel_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserBiasCurrent).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/max-time"
func (n *Component_Transceiver_Channel_LaserBiasCurrent_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_Channel_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserBiasCurrent).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_LaserBiasCurrent_MinPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-bias-current/min YANG schema element.
type Component_Transceiver_Channel_LaserBiasCurrent_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_LaserBiasCurrent_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-bias-current/min YANG schema element.
type Component_Transceiver_Channel_LaserBiasCurrent_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/min"
func (n *Component_Transceiver_Channel_LaserBiasCurrent_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserBiasCurrent).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/min"
func (n *Component_Transceiver_Channel_LaserBiasCurrent_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserBiasCurrent).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_LaserBiasCurrent_MinTimePath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-bias-current/min-time YANG schema element.
type Component_Transceiver_Channel_LaserBiasCurrent_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_LaserBiasCurrent_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-bias-current/min-time YANG schema element.
type Component_Transceiver_Channel_LaserBiasCurrent_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/min-time"
func (n *Component_Transceiver_Channel_LaserBiasCurrent_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_Channel_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserBiasCurrent).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/min-time"
func (n *Component_Transceiver_Channel_LaserBiasCurrent_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_Channel_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserBiasCurrent).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_LaserBiasCurrentPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-bias-current YANG schema element.
type Component_Transceiver_Channel_LaserBiasCurrentPath struct {
	*ygnmi.NodePath
}

// Component_Transceiver_Channel_LaserBiasCurrentPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-bias-current YANG schema element.
type Component_Transceiver_Channel_LaserBiasCurrentPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/avg"
func (n *Component_Transceiver_Channel_LaserBiasCurrentPath) Avg() *Component_Transceiver_Channel_LaserBiasCurrent_AvgPath {
	ps := &Component_Transceiver_Channel_LaserBiasCurrent_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/avg"
func (n *Component_Transceiver_Channel_LaserBiasCurrentPathAny) Avg() *Component_Transceiver_Channel_LaserBiasCurrent_AvgPathAny {
	ps := &Component_Transceiver_Channel_LaserBiasCurrent_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/instant"
func (n *Component_Transceiver_Channel_LaserBiasCurrentPath) Instant() *Component_Transceiver_Channel_LaserBiasCurrent_InstantPath {
	ps := &Component_Transceiver_Channel_LaserBiasCurrent_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/instant"
func (n *Component_Transceiver_Channel_LaserBiasCurrentPathAny) Instant() *Component_Transceiver_Channel_LaserBiasCurrent_InstantPathAny {
	ps := &Component_Transceiver_Channel_LaserBiasCurrent_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/interval"
func (n *Component_Transceiver_Channel_LaserBiasCurrentPath) Interval() *Component_Transceiver_Channel_LaserBiasCurrent_IntervalPath {
	ps := &Component_Transceiver_Channel_LaserBiasCurrent_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/interval"
func (n *Component_Transceiver_Channel_LaserBiasCurrentPathAny) Interval() *Component_Transceiver_Channel_LaserBiasCurrent_IntervalPathAny {
	ps := &Component_Transceiver_Channel_LaserBiasCurrent_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/max"
func (n *Component_Transceiver_Channel_LaserBiasCurrentPath) Max() *Component_Transceiver_Channel_LaserBiasCurrent_MaxPath {
	ps := &Component_Transceiver_Channel_LaserBiasCurrent_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/max"
func (n *Component_Transceiver_Channel_LaserBiasCurrentPathAny) Max() *Component_Transceiver_Channel_LaserBiasCurrent_MaxPathAny {
	ps := &Component_Transceiver_Channel_LaserBiasCurrent_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/max-time"
func (n *Component_Transceiver_Channel_LaserBiasCurrentPath) MaxTime() *Component_Transceiver_Channel_LaserBiasCurrent_MaxTimePath {
	ps := &Component_Transceiver_Channel_LaserBiasCurrent_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/max-time"
func (n *Component_Transceiver_Channel_LaserBiasCurrentPathAny) MaxTime() *Component_Transceiver_Channel_LaserBiasCurrent_MaxTimePathAny {
	ps := &Component_Transceiver_Channel_LaserBiasCurrent_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/min"
func (n *Component_Transceiver_Channel_LaserBiasCurrentPath) Min() *Component_Transceiver_Channel_LaserBiasCurrent_MinPath {
	ps := &Component_Transceiver_Channel_LaserBiasCurrent_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/min"
func (n *Component_Transceiver_Channel_LaserBiasCurrentPathAny) Min() *Component_Transceiver_Channel_LaserBiasCurrent_MinPathAny {
	ps := &Component_Transceiver_Channel_LaserBiasCurrent_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/min-time"
func (n *Component_Transceiver_Channel_LaserBiasCurrentPath) MinTime() *Component_Transceiver_Channel_LaserBiasCurrent_MinTimePath {
	ps := &Component_Transceiver_Channel_LaserBiasCurrent_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/min-time"
func (n *Component_Transceiver_Channel_LaserBiasCurrentPathAny) MinTime() *Component_Transceiver_Channel_LaserBiasCurrent_MinTimePathAny {
	ps := &Component_Transceiver_Channel_LaserBiasCurrent_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_Channel_LaserBiasCurrentPath) State() ygnmi.SingletonQuery[*oc.Component_Transceiver_Channel_LaserBiasCurrent] {
	return ygnmi.NewSingletonQuery[*oc.Component_Transceiver_Channel_LaserBiasCurrent](
		"Component_Transceiver_Channel_LaserBiasCurrent",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_Channel_LaserBiasCurrentPathAny) State() ygnmi.WildcardQuery[*oc.Component_Transceiver_Channel_LaserBiasCurrent] {
	return ygnmi.NewWildcardQuery[*oc.Component_Transceiver_Channel_LaserBiasCurrent](
		"Component_Transceiver_Channel_LaserBiasCurrent",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_LaserTemperature_AvgPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-temperature/avg YANG schema element.
type Component_Transceiver_Channel_LaserTemperature_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_LaserTemperature_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-temperature/avg YANG schema element.
type Component_Transceiver_Channel_LaserTemperature_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/avg"
func (n *Component_Transceiver_Channel_LaserTemperature_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_LaserTemperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserTemperature).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserTemperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/avg"
func (n *Component_Transceiver_Channel_LaserTemperature_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_LaserTemperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserTemperature).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserTemperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_LaserTemperature_InstantPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-temperature/instant YANG schema element.
type Component_Transceiver_Channel_LaserTemperature_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_LaserTemperature_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-temperature/instant YANG schema element.
type Component_Transceiver_Channel_LaserTemperature_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/instant"
func (n *Component_Transceiver_Channel_LaserTemperature_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_LaserTemperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserTemperature).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserTemperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/instant"
func (n *Component_Transceiver_Channel_LaserTemperature_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_LaserTemperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserTemperature).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserTemperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_LaserTemperature_IntervalPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-temperature/interval YANG schema element.
type Component_Transceiver_Channel_LaserTemperature_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_LaserTemperature_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-temperature/interval YANG schema element.
type Component_Transceiver_Channel_LaserTemperature_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/interval"
func (n *Component_Transceiver_Channel_LaserTemperature_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_Channel_LaserTemperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserTemperature).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserTemperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/interval"
func (n *Component_Transceiver_Channel_LaserTemperature_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_Channel_LaserTemperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserTemperature).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserTemperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_LaserTemperature_MaxPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-temperature/max YANG schema element.
type Component_Transceiver_Channel_LaserTemperature_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_LaserTemperature_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-temperature/max YANG schema element.
type Component_Transceiver_Channel_LaserTemperature_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/max"
func (n *Component_Transceiver_Channel_LaserTemperature_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_LaserTemperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserTemperature).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserTemperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/max"
func (n *Component_Transceiver_Channel_LaserTemperature_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_LaserTemperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserTemperature).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserTemperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_LaserTemperature_MaxTimePath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-temperature/max-time YANG schema element.
type Component_Transceiver_Channel_LaserTemperature_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_LaserTemperature_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-temperature/max-time YANG schema element.
type Component_Transceiver_Channel_LaserTemperature_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/max-time"
func (n *Component_Transceiver_Channel_LaserTemperature_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_Channel_LaserTemperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserTemperature).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserTemperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/max-time"
func (n *Component_Transceiver_Channel_LaserTemperature_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_Channel_LaserTemperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserTemperature).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserTemperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_LaserTemperature_MinPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-temperature/min YANG schema element.
type Component_Transceiver_Channel_LaserTemperature_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_LaserTemperature_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-temperature/min YANG schema element.
type Component_Transceiver_Channel_LaserTemperature_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/min"
func (n *Component_Transceiver_Channel_LaserTemperature_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_LaserTemperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserTemperature).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserTemperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/min"
func (n *Component_Transceiver_Channel_LaserTemperature_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_LaserTemperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserTemperature).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserTemperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_LaserTemperature_MinTimePath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-temperature/min-time YANG schema element.
type Component_Transceiver_Channel_LaserTemperature_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_LaserTemperature_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-temperature/min-time YANG schema element.
type Component_Transceiver_Channel_LaserTemperature_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/min-time"
func (n *Component_Transceiver_Channel_LaserTemperature_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_Channel_LaserTemperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserTemperature).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserTemperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/min-time"
func (n *Component_Transceiver_Channel_LaserTemperature_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_Channel_LaserTemperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserTemperature).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserTemperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_LaserTemperaturePath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-temperature YANG schema element.
type Component_Transceiver_Channel_LaserTemperaturePath struct {
	*ygnmi.NodePath
}

// Component_Transceiver_Channel_LaserTemperaturePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-temperature YANG schema element.
type Component_Transceiver_Channel_LaserTemperaturePathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// sampling period.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/avg"
func (n *Component_Transceiver_Channel_LaserTemperaturePath) Avg() *Component_Transceiver_Channel_LaserTemperature_AvgPath {
	ps := &Component_Transceiver_Channel_LaserTemperature_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// sampling period.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/avg"
func (n *Component_Transceiver_Channel_LaserTemperaturePathAny) Avg() *Component_Transceiver_Channel_LaserTemperature_AvgPathAny {
	ps := &Component_Transceiver_Channel_LaserTemperature_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/instant"
func (n *Component_Transceiver_Channel_LaserTemperaturePath) Instant() *Component_Transceiver_Channel_LaserTemperature_InstantPath {
	ps := &Component_Transceiver_Channel_LaserTemperature_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/instant"
func (n *Component_Transceiver_Channel_LaserTemperaturePathAny) Instant() *Component_Transceiver_Channel_LaserTemperature_InstantPathAny {
	ps := &Component_Transceiver_Channel_LaserTemperature_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/interval"
func (n *Component_Transceiver_Channel_LaserTemperaturePath) Interval() *Component_Transceiver_Channel_LaserTemperature_IntervalPath {
	ps := &Component_Transceiver_Channel_LaserTemperature_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/interval"
func (n *Component_Transceiver_Channel_LaserTemperaturePathAny) Interval() *Component_Transceiver_Channel_LaserTemperature_IntervalPathAny {
	ps := &Component_Transceiver_Channel_LaserTemperature_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the sampling
// period
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/max"
func (n *Component_Transceiver_Channel_LaserTemperaturePath) Max() *Component_Transceiver_Channel_LaserTemperature_MaxPath {
	ps := &Component_Transceiver_Channel_LaserTemperature_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the sampling
// period
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/max"
func (n *Component_Transceiver_Channel_LaserTemperaturePathAny) Max() *Component_Transceiver_Channel_LaserTemperature_MaxPathAny {
	ps := &Component_Transceiver_Channel_LaserTemperature_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/max-time"
func (n *Component_Transceiver_Channel_LaserTemperaturePath) MaxTime() *Component_Transceiver_Channel_LaserTemperature_MaxTimePath {
	ps := &Component_Transceiver_Channel_LaserTemperature_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/max-time"
func (n *Component_Transceiver_Channel_LaserTemperaturePathAny) MaxTime() *Component_Transceiver_Channel_LaserTemperature_MaxTimePathAny {
	ps := &Component_Transceiver_Channel_LaserTemperature_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the sampling
// period
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/min"
func (n *Component_Transceiver_Channel_LaserTemperaturePath) Min() *Component_Transceiver_Channel_LaserTemperature_MinPath {
	ps := &Component_Transceiver_Channel_LaserTemperature_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the sampling
// period
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/min"
func (n *Component_Transceiver_Channel_LaserTemperaturePathAny) Min() *Component_Transceiver_Channel_LaserTemperature_MinPathAny {
	ps := &Component_Transceiver_Channel_LaserTemperature_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/min-time"
func (n *Component_Transceiver_Channel_LaserTemperaturePath) MinTime() *Component_Transceiver_Channel_LaserTemperature_MinTimePath {
	ps := &Component_Transceiver_Channel_LaserTemperature_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/min-time"
func (n *Component_Transceiver_Channel_LaserTemperaturePathAny) MinTime() *Component_Transceiver_Channel_LaserTemperature_MinTimePathAny {
	ps := &Component_Transceiver_Channel_LaserTemperature_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_Channel_LaserTemperaturePath) State() ygnmi.SingletonQuery[*oc.Component_Transceiver_Channel_LaserTemperature] {
	return ygnmi.NewSingletonQuery[*oc.Component_Transceiver_Channel_LaserTemperature](
		"Component_Transceiver_Channel_LaserTemperature",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_Channel_LaserTemperaturePathAny) State() ygnmi.WildcardQuery[*oc.Component_Transceiver_Channel_LaserTemperature] {
	return ygnmi.NewWildcardQuery[*oc.Component_Transceiver_Channel_LaserTemperature](
		"Component_Transceiver_Channel_LaserTemperature",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_OutputPower_AvgPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/output-power/avg YANG schema element.
type Component_Transceiver_Channel_OutputPower_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_OutputPower_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/output-power/avg YANG schema element.
type Component_Transceiver_Channel_OutputPower_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/avg"
func (n *Component_Transceiver_Channel_OutputPower_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_OutputPower).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/avg"
func (n *Component_Transceiver_Channel_OutputPower_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_OutputPower).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_OutputPower_InstantPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/output-power/instant YANG schema element.
type Component_Transceiver_Channel_OutputPower_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_OutputPower_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/output-power/instant YANG schema element.
type Component_Transceiver_Channel_OutputPower_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/instant"
func (n *Component_Transceiver_Channel_OutputPower_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_OutputPower).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/instant"
func (n *Component_Transceiver_Channel_OutputPower_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_OutputPower).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_OutputPower_IntervalPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/output-power/interval YANG schema element.
type Component_Transceiver_Channel_OutputPower_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_OutputPower_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/output-power/interval YANG schema element.
type Component_Transceiver_Channel_OutputPower_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/interval"
func (n *Component_Transceiver_Channel_OutputPower_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_Channel_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_OutputPower).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/interval"
func (n *Component_Transceiver_Channel_OutputPower_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_Channel_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_OutputPower).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_OutputPower_MaxPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/output-power/max YANG schema element.
type Component_Transceiver_Channel_OutputPower_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_OutputPower_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/output-power/max YANG schema element.
type Component_Transceiver_Channel_OutputPower_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/max"
func (n *Component_Transceiver_Channel_OutputPower_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_OutputPower).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/max"
func (n *Component_Transceiver_Channel_OutputPower_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_OutputPower).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_OutputPower_MaxTimePath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/output-power/max-time YANG schema element.
type Component_Transceiver_Channel_OutputPower_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_OutputPower_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/output-power/max-time YANG schema element.
type Component_Transceiver_Channel_OutputPower_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/max-time"
func (n *Component_Transceiver_Channel_OutputPower_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_Channel_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_OutputPower).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/max-time"
func (n *Component_Transceiver_Channel_OutputPower_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_Channel_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_OutputPower).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_OutputPower_MinPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/output-power/min YANG schema element.
type Component_Transceiver_Channel_OutputPower_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_OutputPower_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/output-power/min YANG schema element.
type Component_Transceiver_Channel_OutputPower_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/min"
func (n *Component_Transceiver_Channel_OutputPower_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_OutputPower).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/min"
func (n *Component_Transceiver_Channel_OutputPower_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_OutputPower).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_OutputPower_MinTimePath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/output-power/min-time YANG schema element.
type Component_Transceiver_Channel_OutputPower_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_OutputPower_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/output-power/min-time YANG schema element.
type Component_Transceiver_Channel_OutputPower_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/min-time"
func (n *Component_Transceiver_Channel_OutputPower_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_Channel_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_OutputPower).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/min-time"
func (n *Component_Transceiver_Channel_OutputPower_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_Channel_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_OutputPower).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_OutputPowerPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/output-power YANG schema element.
type Component_Transceiver_Channel_OutputPowerPath struct {
	*ygnmi.NodePath
}

// Component_Transceiver_Channel_OutputPowerPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/output-power YANG schema element.
type Component_Transceiver_Channel_OutputPowerPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/avg"
func (n *Component_Transceiver_Channel_OutputPowerPath) Avg() *Component_Transceiver_Channel_OutputPower_AvgPath {
	ps := &Component_Transceiver_Channel_OutputPower_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/avg"
func (n *Component_Transceiver_Channel_OutputPowerPathAny) Avg() *Component_Transceiver_Channel_OutputPower_AvgPathAny {
	ps := &Component_Transceiver_Channel_OutputPower_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/instant"
func (n *Component_Transceiver_Channel_OutputPowerPath) Instant() *Component_Transceiver_Channel_OutputPower_InstantPath {
	ps := &Component_Transceiver_Channel_OutputPower_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/instant"
func (n *Component_Transceiver_Channel_OutputPowerPathAny) Instant() *Component_Transceiver_Channel_OutputPower_InstantPathAny {
	ps := &Component_Transceiver_Channel_OutputPower_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/interval"
func (n *Component_Transceiver_Channel_OutputPowerPath) Interval() *Component_Transceiver_Channel_OutputPower_IntervalPath {
	ps := &Component_Transceiver_Channel_OutputPower_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/interval"
func (n *Component_Transceiver_Channel_OutputPowerPathAny) Interval() *Component_Transceiver_Channel_OutputPower_IntervalPathAny {
	ps := &Component_Transceiver_Channel_OutputPower_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/max"
func (n *Component_Transceiver_Channel_OutputPowerPath) Max() *Component_Transceiver_Channel_OutputPower_MaxPath {
	ps := &Component_Transceiver_Channel_OutputPower_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/max"
func (n *Component_Transceiver_Channel_OutputPowerPathAny) Max() *Component_Transceiver_Channel_OutputPower_MaxPathAny {
	ps := &Component_Transceiver_Channel_OutputPower_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/max-time"
func (n *Component_Transceiver_Channel_OutputPowerPath) MaxTime() *Component_Transceiver_Channel_OutputPower_MaxTimePath {
	ps := &Component_Transceiver_Channel_OutputPower_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/max-time"
func (n *Component_Transceiver_Channel_OutputPowerPathAny) MaxTime() *Component_Transceiver_Channel_OutputPower_MaxTimePathAny {
	ps := &Component_Transceiver_Channel_OutputPower_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/min"
func (n *Component_Transceiver_Channel_OutputPowerPath) Min() *Component_Transceiver_Channel_OutputPower_MinPath {
	ps := &Component_Transceiver_Channel_OutputPower_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/min"
func (n *Component_Transceiver_Channel_OutputPowerPathAny) Min() *Component_Transceiver_Channel_OutputPower_MinPathAny {
	ps := &Component_Transceiver_Channel_OutputPower_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/min-time"
func (n *Component_Transceiver_Channel_OutputPowerPath) MinTime() *Component_Transceiver_Channel_OutputPower_MinTimePath {
	ps := &Component_Transceiver_Channel_OutputPower_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/min-time"
func (n *Component_Transceiver_Channel_OutputPowerPathAny) MinTime() *Component_Transceiver_Channel_OutputPower_MinTimePathAny {
	ps := &Component_Transceiver_Channel_OutputPower_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_Channel_OutputPowerPath) State() ygnmi.SingletonQuery[*oc.Component_Transceiver_Channel_OutputPower] {
	return ygnmi.NewSingletonQuery[*oc.Component_Transceiver_Channel_OutputPower](
		"Component_Transceiver_Channel_OutputPower",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_Channel_OutputPowerPathAny) State() ygnmi.WildcardQuery[*oc.Component_Transceiver_Channel_OutputPower] {
	return ygnmi.NewWildcardQuery[*oc.Component_Transceiver_Channel_OutputPower](
		"Component_Transceiver_Channel_OutputPower",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TargetFrequencyDeviation_AvgPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/avg YANG schema element.
type Component_Transceiver_Channel_TargetFrequencyDeviation_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TargetFrequencyDeviation_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/avg YANG schema element.
type Component_Transceiver_Channel_TargetFrequencyDeviation_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/avg"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviation_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_TargetFrequencyDeviation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TargetFrequencyDeviation).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TargetFrequencyDeviation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/avg"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviation_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_TargetFrequencyDeviation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TargetFrequencyDeviation).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TargetFrequencyDeviation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TargetFrequencyDeviation_InstantPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/instant YANG schema element.
type Component_Transceiver_Channel_TargetFrequencyDeviation_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TargetFrequencyDeviation_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/instant YANG schema element.
type Component_Transceiver_Channel_TargetFrequencyDeviation_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/instant"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviation_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_TargetFrequencyDeviation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TargetFrequencyDeviation).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TargetFrequencyDeviation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/instant"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviation_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_TargetFrequencyDeviation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TargetFrequencyDeviation).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TargetFrequencyDeviation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TargetFrequencyDeviation_IntervalPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/interval YANG schema element.
type Component_Transceiver_Channel_TargetFrequencyDeviation_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TargetFrequencyDeviation_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/interval YANG schema element.
type Component_Transceiver_Channel_TargetFrequencyDeviation_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/interval"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviation_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_Channel_TargetFrequencyDeviation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TargetFrequencyDeviation).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TargetFrequencyDeviation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/interval"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviation_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_Channel_TargetFrequencyDeviation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TargetFrequencyDeviation).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TargetFrequencyDeviation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TargetFrequencyDeviation_MaxPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/max YANG schema element.
type Component_Transceiver_Channel_TargetFrequencyDeviation_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TargetFrequencyDeviation_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/max YANG schema element.
type Component_Transceiver_Channel_TargetFrequencyDeviation_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/max"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviation_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_TargetFrequencyDeviation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TargetFrequencyDeviation).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TargetFrequencyDeviation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/max"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviation_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_TargetFrequencyDeviation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TargetFrequencyDeviation).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TargetFrequencyDeviation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TargetFrequencyDeviation_MaxTimePath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/max-time YANG schema element.
type Component_Transceiver_Channel_TargetFrequencyDeviation_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TargetFrequencyDeviation_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/max-time YANG schema element.
type Component_Transceiver_Channel_TargetFrequencyDeviation_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/max-time"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviation_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_Channel_TargetFrequencyDeviation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TargetFrequencyDeviation).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TargetFrequencyDeviation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/max-time"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviation_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_Channel_TargetFrequencyDeviation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TargetFrequencyDeviation).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TargetFrequencyDeviation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TargetFrequencyDeviation_MinPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/min YANG schema element.
type Component_Transceiver_Channel_TargetFrequencyDeviation_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TargetFrequencyDeviation_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/min YANG schema element.
type Component_Transceiver_Channel_TargetFrequencyDeviation_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/min"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviation_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_TargetFrequencyDeviation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TargetFrequencyDeviation).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TargetFrequencyDeviation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/min"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviation_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_TargetFrequencyDeviation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TargetFrequencyDeviation).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TargetFrequencyDeviation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TargetFrequencyDeviation_MinTimePath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/min-time YANG schema element.
type Component_Transceiver_Channel_TargetFrequencyDeviation_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TargetFrequencyDeviation_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/min-time YANG schema element.
type Component_Transceiver_Channel_TargetFrequencyDeviation_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/min-time"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviation_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_Channel_TargetFrequencyDeviation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TargetFrequencyDeviation).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TargetFrequencyDeviation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/min-time"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviation_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_Channel_TargetFrequencyDeviation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TargetFrequencyDeviation).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TargetFrequencyDeviation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TargetFrequencyDeviationPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation YANG schema element.
type Component_Transceiver_Channel_TargetFrequencyDeviationPath struct {
	*ygnmi.NodePath
}

// Component_Transceiver_Channel_TargetFrequencyDeviationPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation YANG schema element.
type Component_Transceiver_Channel_TargetFrequencyDeviationPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/avg"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviationPath) Avg() *Component_Transceiver_Channel_TargetFrequencyDeviation_AvgPath {
	ps := &Component_Transceiver_Channel_TargetFrequencyDeviation_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/avg"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviationPathAny) Avg() *Component_Transceiver_Channel_TargetFrequencyDeviation_AvgPathAny {
	ps := &Component_Transceiver_Channel_TargetFrequencyDeviation_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/instant"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviationPath) Instant() *Component_Transceiver_Channel_TargetFrequencyDeviation_InstantPath {
	ps := &Component_Transceiver_Channel_TargetFrequencyDeviation_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/instant"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviationPathAny) Instant() *Component_Transceiver_Channel_TargetFrequencyDeviation_InstantPathAny {
	ps := &Component_Transceiver_Channel_TargetFrequencyDeviation_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/interval"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviationPath) Interval() *Component_Transceiver_Channel_TargetFrequencyDeviation_IntervalPath {
	ps := &Component_Transceiver_Channel_TargetFrequencyDeviation_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/interval"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviationPathAny) Interval() *Component_Transceiver_Channel_TargetFrequencyDeviation_IntervalPathAny {
	ps := &Component_Transceiver_Channel_TargetFrequencyDeviation_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/max"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviationPath) Max() *Component_Transceiver_Channel_TargetFrequencyDeviation_MaxPath {
	ps := &Component_Transceiver_Channel_TargetFrequencyDeviation_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/max"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviationPathAny) Max() *Component_Transceiver_Channel_TargetFrequencyDeviation_MaxPathAny {
	ps := &Component_Transceiver_Channel_TargetFrequencyDeviation_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/max-time"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviationPath) MaxTime() *Component_Transceiver_Channel_TargetFrequencyDeviation_MaxTimePath {
	ps := &Component_Transceiver_Channel_TargetFrequencyDeviation_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/max-time"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviationPathAny) MaxTime() *Component_Transceiver_Channel_TargetFrequencyDeviation_MaxTimePathAny {
	ps := &Component_Transceiver_Channel_TargetFrequencyDeviation_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/min"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviationPath) Min() *Component_Transceiver_Channel_TargetFrequencyDeviation_MinPath {
	ps := &Component_Transceiver_Channel_TargetFrequencyDeviation_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/min"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviationPathAny) Min() *Component_Transceiver_Channel_TargetFrequencyDeviation_MinPathAny {
	ps := &Component_Transceiver_Channel_TargetFrequencyDeviation_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/min-time"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviationPath) MinTime() *Component_Transceiver_Channel_TargetFrequencyDeviation_MinTimePath {
	ps := &Component_Transceiver_Channel_TargetFrequencyDeviation_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/min-time"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviationPathAny) MinTime() *Component_Transceiver_Channel_TargetFrequencyDeviation_MinTimePathAny {
	ps := &Component_Transceiver_Channel_TargetFrequencyDeviation_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_Channel_TargetFrequencyDeviationPath) State() ygnmi.SingletonQuery[*oc.Component_Transceiver_Channel_TargetFrequencyDeviation] {
	return ygnmi.NewSingletonQuery[*oc.Component_Transceiver_Channel_TargetFrequencyDeviation](
		"Component_Transceiver_Channel_TargetFrequencyDeviation",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_Channel_TargetFrequencyDeviationPathAny) State() ygnmi.WildcardQuery[*oc.Component_Transceiver_Channel_TargetFrequencyDeviation] {
	return ygnmi.NewWildcardQuery[*oc.Component_Transceiver_Channel_TargetFrequencyDeviation](
		"Component_Transceiver_Channel_TargetFrequencyDeviation",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TecCurrent_AvgPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current/avg YANG schema element.
type Component_Transceiver_Channel_TecCurrent_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TecCurrent_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current/avg YANG schema element.
type Component_Transceiver_Channel_TecCurrent_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/avg"
func (n *Component_Transceiver_Channel_TecCurrent_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TecCurrent).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TecCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/avg"
func (n *Component_Transceiver_Channel_TecCurrent_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TecCurrent).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TecCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TecCurrent_InstantPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current/instant YANG schema element.
type Component_Transceiver_Channel_TecCurrent_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TecCurrent_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current/instant YANG schema element.
type Component_Transceiver_Channel_TecCurrent_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/instant"
func (n *Component_Transceiver_Channel_TecCurrent_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TecCurrent).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TecCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/instant"
func (n *Component_Transceiver_Channel_TecCurrent_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TecCurrent).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TecCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TecCurrent_IntervalPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current/interval YANG schema element.
type Component_Transceiver_Channel_TecCurrent_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TecCurrent_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current/interval YANG schema element.
type Component_Transceiver_Channel_TecCurrent_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/interval"
func (n *Component_Transceiver_Channel_TecCurrent_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TecCurrent).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TecCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/interval"
func (n *Component_Transceiver_Channel_TecCurrent_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TecCurrent).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TecCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TecCurrent_MaxPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current/max YANG schema element.
type Component_Transceiver_Channel_TecCurrent_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TecCurrent_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current/max YANG schema element.
type Component_Transceiver_Channel_TecCurrent_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/max"
func (n *Component_Transceiver_Channel_TecCurrent_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TecCurrent).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TecCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/max"
func (n *Component_Transceiver_Channel_TecCurrent_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TecCurrent).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TecCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TecCurrent_MaxTimePath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current/max-time YANG schema element.
type Component_Transceiver_Channel_TecCurrent_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TecCurrent_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current/max-time YANG schema element.
type Component_Transceiver_Channel_TecCurrent_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/max-time"
func (n *Component_Transceiver_Channel_TecCurrent_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TecCurrent).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TecCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/max-time"
func (n *Component_Transceiver_Channel_TecCurrent_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TecCurrent).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TecCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TecCurrent_MinPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current/min YANG schema element.
type Component_Transceiver_Channel_TecCurrent_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TecCurrent_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current/min YANG schema element.
type Component_Transceiver_Channel_TecCurrent_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/min"
func (n *Component_Transceiver_Channel_TecCurrent_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TecCurrent).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TecCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/min"
func (n *Component_Transceiver_Channel_TecCurrent_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TecCurrent).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TecCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TecCurrent_MinTimePath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current/min-time YANG schema element.
type Component_Transceiver_Channel_TecCurrent_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TecCurrent_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current/min-time YANG schema element.
type Component_Transceiver_Channel_TecCurrent_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/min-time"
func (n *Component_Transceiver_Channel_TecCurrent_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TecCurrent).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TecCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/min-time"
func (n *Component_Transceiver_Channel_TecCurrent_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TecCurrent).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TecCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TecCurrentPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current YANG schema element.
type Component_Transceiver_Channel_TecCurrentPath struct {
	*ygnmi.NodePath
}

// Component_Transceiver_Channel_TecCurrentPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current YANG schema element.
type Component_Transceiver_Channel_TecCurrentPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/avg"
func (n *Component_Transceiver_Channel_TecCurrentPath) Avg() *Component_Transceiver_Channel_TecCurrent_AvgPath {
	ps := &Component_Transceiver_Channel_TecCurrent_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/avg"
func (n *Component_Transceiver_Channel_TecCurrentPathAny) Avg() *Component_Transceiver_Channel_TecCurrent_AvgPathAny {
	ps := &Component_Transceiver_Channel_TecCurrent_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/instant"
func (n *Component_Transceiver_Channel_TecCurrentPath) Instant() *Component_Transceiver_Channel_TecCurrent_InstantPath {
	ps := &Component_Transceiver_Channel_TecCurrent_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/instant"
func (n *Component_Transceiver_Channel_TecCurrentPathAny) Instant() *Component_Transceiver_Channel_TecCurrent_InstantPathAny {
	ps := &Component_Transceiver_Channel_TecCurrent_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/interval"
func (n *Component_Transceiver_Channel_TecCurrentPath) Interval() *Component_Transceiver_Channel_TecCurrent_IntervalPath {
	ps := &Component_Transceiver_Channel_TecCurrent_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/interval"
func (n *Component_Transceiver_Channel_TecCurrentPathAny) Interval() *Component_Transceiver_Channel_TecCurrent_IntervalPathAny {
	ps := &Component_Transceiver_Channel_TecCurrent_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/max"
func (n *Component_Transceiver_Channel_TecCurrentPath) Max() *Component_Transceiver_Channel_TecCurrent_MaxPath {
	ps := &Component_Transceiver_Channel_TecCurrent_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/max"
func (n *Component_Transceiver_Channel_TecCurrentPathAny) Max() *Component_Transceiver_Channel_TecCurrent_MaxPathAny {
	ps := &Component_Transceiver_Channel_TecCurrent_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/max-time"
func (n *Component_Transceiver_Channel_TecCurrentPath) MaxTime() *Component_Transceiver_Channel_TecCurrent_MaxTimePath {
	ps := &Component_Transceiver_Channel_TecCurrent_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/max-time"
func (n *Component_Transceiver_Channel_TecCurrentPathAny) MaxTime() *Component_Transceiver_Channel_TecCurrent_MaxTimePathAny {
	ps := &Component_Transceiver_Channel_TecCurrent_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/min"
func (n *Component_Transceiver_Channel_TecCurrentPath) Min() *Component_Transceiver_Channel_TecCurrent_MinPath {
	ps := &Component_Transceiver_Channel_TecCurrent_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/min"
func (n *Component_Transceiver_Channel_TecCurrentPathAny) Min() *Component_Transceiver_Channel_TecCurrent_MinPathAny {
	ps := &Component_Transceiver_Channel_TecCurrent_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/min-time"
func (n *Component_Transceiver_Channel_TecCurrentPath) MinTime() *Component_Transceiver_Channel_TecCurrent_MinTimePath {
	ps := &Component_Transceiver_Channel_TecCurrent_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/min-time"
func (n *Component_Transceiver_Channel_TecCurrentPathAny) MinTime() *Component_Transceiver_Channel_TecCurrent_MinTimePathAny {
	ps := &Component_Transceiver_Channel_TecCurrent_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_Channel_TecCurrentPath) State() ygnmi.SingletonQuery[*oc.Component_Transceiver_Channel_TecCurrent] {
	return ygnmi.NewSingletonQuery[*oc.Component_Transceiver_Channel_TecCurrent](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_Channel_TecCurrentPathAny) State() ygnmi.WildcardQuery[*oc.Component_Transceiver_Channel_TecCurrent] {
	return ygnmi.NewWildcardQuery[*oc.Component_Transceiver_Channel_TecCurrent](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_InputPower_AvgPath represents the /openconfig-platform/components/component/transceiver/state/input-power/avg YANG schema element.
type Component_Transceiver_InputPower_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_InputPower_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/input-power/avg YANG schema element.
type Component_Transceiver_InputPower_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/input-power/avg"
func (n *Component_Transceiver_InputPower_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_InputPower).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/input-power/avg"
func (n *Component_Transceiver_InputPower_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_InputPower).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_InputPower_InstantPath represents the /openconfig-platform/components/component/transceiver/state/input-power/instant YANG schema element.
type Component_Transceiver_InputPower_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_InputPower_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/input-power/instant YANG schema element.
type Component_Transceiver_InputPower_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/input-power/instant"
func (n *Component_Transceiver_InputPower_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_InputPower).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/input-power/instant"
func (n *Component_Transceiver_InputPower_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_InputPower).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_InputPower_IntervalPath represents the /openconfig-platform/components/component/transceiver/state/input-power/interval YANG schema element.
type Component_Transceiver_InputPower_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_InputPower_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/input-power/interval YANG schema element.
type Component_Transceiver_InputPower_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/input-power/interval"
func (n *Component_Transceiver_InputPower_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_InputPower).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/input-power/interval"
func (n *Component_Transceiver_InputPower_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_InputPower).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_InputPower_MaxPath represents the /openconfig-platform/components/component/transceiver/state/input-power/max YANG schema element.
type Component_Transceiver_InputPower_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_InputPower_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/input-power/max YANG schema element.
type Component_Transceiver_InputPower_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/input-power/max"
func (n *Component_Transceiver_InputPower_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_InputPower).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/input-power/max"
func (n *Component_Transceiver_InputPower_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_InputPower).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_InputPower_MaxTimePath represents the /openconfig-platform/components/component/transceiver/state/input-power/max-time YANG schema element.
type Component_Transceiver_InputPower_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_InputPower_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/input-power/max-time YANG schema element.
type Component_Transceiver_InputPower_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/state/input-power/max-time"
func (n *Component_Transceiver_InputPower_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_InputPower).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/state/input-power/max-time"
func (n *Component_Transceiver_InputPower_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_InputPower).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_InputPower_MinPath represents the /openconfig-platform/components/component/transceiver/state/input-power/min YANG schema element.
type Component_Transceiver_InputPower_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_InputPower_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/input-power/min YANG schema element.
type Component_Transceiver_InputPower_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/input-power/min"
func (n *Component_Transceiver_InputPower_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_InputPower).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/input-power/min"
func (n *Component_Transceiver_InputPower_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_InputPower).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_InputPower_MinTimePath represents the /openconfig-platform/components/component/transceiver/state/input-power/min-time YANG schema element.
type Component_Transceiver_InputPower_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_InputPower_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/input-power/min-time YANG schema element.
type Component_Transceiver_InputPower_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/state/input-power/min-time"
func (n *Component_Transceiver_InputPower_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_InputPower).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/state/input-power/min-time"
func (n *Component_Transceiver_InputPower_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_InputPower).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_InputPowerPath represents the /openconfig-platform/components/component/transceiver/state/input-power YANG schema element.
type Component_Transceiver_InputPowerPath struct {
	*ygnmi.NodePath
}

// Component_Transceiver_InputPowerPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/input-power YANG schema element.
type Component_Transceiver_InputPowerPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/input-power/avg"
func (n *Component_Transceiver_InputPowerPath) Avg() *Component_Transceiver_InputPower_AvgPath {
	ps := &Component_Transceiver_InputPower_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/input-power/avg"
func (n *Component_Transceiver_InputPowerPathAny) Avg() *Component_Transceiver_InputPower_AvgPathAny {
	ps := &Component_Transceiver_InputPower_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/input-power/instant"
func (n *Component_Transceiver_InputPowerPath) Instant() *Component_Transceiver_InputPower_InstantPath {
	ps := &Component_Transceiver_InputPower_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/input-power/instant"
func (n *Component_Transceiver_InputPowerPathAny) Instant() *Component_Transceiver_InputPower_InstantPathAny {
	ps := &Component_Transceiver_InputPower_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/input-power/interval"
func (n *Component_Transceiver_InputPowerPath) Interval() *Component_Transceiver_InputPower_IntervalPath {
	ps := &Component_Transceiver_InputPower_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/input-power/interval"
func (n *Component_Transceiver_InputPowerPathAny) Interval() *Component_Transceiver_InputPower_IntervalPathAny {
	ps := &Component_Transceiver_InputPower_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/input-power/max"
func (n *Component_Transceiver_InputPowerPath) Max() *Component_Transceiver_InputPower_MaxPath {
	ps := &Component_Transceiver_InputPower_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/input-power/max"
func (n *Component_Transceiver_InputPowerPathAny) Max() *Component_Transceiver_InputPower_MaxPathAny {
	ps := &Component_Transceiver_InputPower_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/state/input-power/max-time"
func (n *Component_Transceiver_InputPowerPath) MaxTime() *Component_Transceiver_InputPower_MaxTimePath {
	ps := &Component_Transceiver_InputPower_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/state/input-power/max-time"
func (n *Component_Transceiver_InputPowerPathAny) MaxTime() *Component_Transceiver_InputPower_MaxTimePathAny {
	ps := &Component_Transceiver_InputPower_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/input-power/min"
func (n *Component_Transceiver_InputPowerPath) Min() *Component_Transceiver_InputPower_MinPath {
	ps := &Component_Transceiver_InputPower_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/input-power/min"
func (n *Component_Transceiver_InputPowerPathAny) Min() *Component_Transceiver_InputPower_MinPathAny {
	ps := &Component_Transceiver_InputPower_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/state/input-power/min-time"
func (n *Component_Transceiver_InputPowerPath) MinTime() *Component_Transceiver_InputPower_MinTimePath {
	ps := &Component_Transceiver_InputPower_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/state/input-power/min-time"
func (n *Component_Transceiver_InputPowerPathAny) MinTime() *Component_Transceiver_InputPower_MinTimePathAny {
	ps := &Component_Transceiver_InputPower_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_InputPowerPath) State() ygnmi.SingletonQuery[*oc.Component_Transceiver_InputPower] {
	return ygnmi.NewSingletonQuery[*oc.Component_Transceiver_InputPower](
		"Component_Transceiver_InputPower",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_InputPowerPathAny) State() ygnmi.WildcardQuery[*oc.Component_Transceiver_InputPower] {
	return ygnmi.NewWildcardQuery[*oc.Component_Transceiver_InputPower](
		"Component_Transceiver_InputPower",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Lane_LaneNumberPath represents the /openconfig-platform/components/component/transceiver/host-lanes/lane/state/lane-number YANG schema element.
type Component_Transceiver_Lane_LaneNumberPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Lane_LaneNumberPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/host-lanes/lane/state/lane-number YANG schema element.
type Component_Transceiver_Lane_LaneNumberPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/lane-number"
//	Path from root:       "/components/component/transceiver/host-lanes/lane/state/lane-number"
func (n *Component_Transceiver_Lane_LaneNumberPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Component_Transceiver_Lane",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lane-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Transceiver_Lane).LaneNumber
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Lane) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/lane-number"
//	Path from root:       "/components/component/transceiver/host-lanes/lane/state/lane-number"
func (n *Component_Transceiver_Lane_LaneNumberPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_Transceiver_Lane",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lane-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Transceiver_Lane).LaneNumber
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Lane) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/lane-number"
//	Path from root:       "/components/component/transceiver/host-lanes/lane/config/lane-number"
func (n *Component_Transceiver_Lane_LaneNumberPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Component_Transceiver_Lane",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "lane-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Transceiver_Lane).LaneNumber
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Lane) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/lane-number"
//	Path from root:       "/components/component/transceiver/host-lanes/lane/config/lane-number"
func (n *Component_Transceiver_Lane_LaneNumberPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_Transceiver_Lane",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "lane-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Transceiver_Lane).LaneNumber
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Lane) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Lane_TxCdrLolPath represents the /openconfig-platform/components/component/transceiver/host-lanes/lane/state/tx-cdr-lol YANG schema element.
type Component_Transceiver_Lane_TxCdrLolPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Lane_TxCdrLolPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/host-lanes/lane/state/tx-cdr-lol YANG schema element.
type Component_Transceiver_Lane_TxCdrLolPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/tx-cdr-lol"
//	Path from root:       "/components/component/transceiver/host-lanes/lane/state/tx-cdr-lol"
func (n *Component_Transceiver_Lane_TxCdrLolPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component_Transceiver_Lane",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tx-cdr-lol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver_Lane).TxCdrLol
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Lane) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/tx-cdr-lol"
//	Path from root:       "/components/component/transceiver/host-lanes/lane/state/tx-cdr-lol"
func (n *Component_Transceiver_Lane_TxCdrLolPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_Transceiver_Lane",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tx-cdr-lol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver_Lane).TxCdrLol
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Lane) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Lane_TxLosPath represents the /openconfig-platform/components/component/transceiver/host-lanes/lane/state/tx-los YANG schema element.
type Component_Transceiver_Lane_TxLosPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Lane_TxLosPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/host-lanes/lane/state/tx-los YANG schema element.
type Component_Transceiver_Lane_TxLosPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/tx-los"
//	Path from root:       "/components/component/transceiver/host-lanes/lane/state/tx-los"
func (n *Component_Transceiver_Lane_TxLosPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component_Transceiver_Lane",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tx-los"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver_Lane).TxLos
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Lane) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/tx-los"
//	Path from root:       "/components/component/transceiver/host-lanes/lane/state/tx-los"
func (n *Component_Transceiver_Lane_TxLosPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_Transceiver_Lane",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tx-los"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver_Lane).TxLos
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Lane) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_LanePath represents the /openconfig-platform/components/component/transceiver/host-lanes/lane YANG schema element.
type Component_Transceiver_LanePath struct {
	*ygnmi.NodePath
}

// Component_Transceiver_LanePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/host-lanes/lane YANG schema element.
type Component_Transceiver_LanePathAny struct {
	*ygnmi.NodePath
}

// Component_Transceiver_LanePathMap represents the /openconfig-platform/components/component/transceiver/host-lanes/lane YANG schema element.
type Component_Transceiver_LanePathMap struct {
	*ygnmi.NodePath
}

// Component_Transceiver_LanePathMapAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/host-lanes/lane YANG schema element.
type Component_Transceiver_LanePathMapAny struct {
	*ygnmi.NodePath
}

// LaneNumber (leaf): Number identifying an electrical host lane carrying one serial
// signal.  Lanes are numbered starting with 1.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/lane-number"
//	Path from root:       "/components/component/transceiver/host-lanes/lane/*/lane-number"
func (n *Component_Transceiver_LanePath) LaneNumber() *Component_Transceiver_Lane_LaneNumberPath {
	ps := &Component_Transceiver_Lane_LaneNumberPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lane-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LaneNumber (leaf): Number identifying an electrical host lane carrying one serial
// signal.  Lanes are numbered starting with 1.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/lane-number"
//	Path from root:       "/components/component/transceiver/host-lanes/lane/*/lane-number"
func (n *Component_Transceiver_LanePathAny) LaneNumber() *Component_Transceiver_Lane_LaneNumberPathAny {
	ps := &Component_Transceiver_Lane_LaneNumberPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lane-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TxCdrLol (leaf): Transmitter clock-and-data-recovery loss-of-lock flag.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/tx-cdr-lol"
//	Path from root:       "/components/component/transceiver/host-lanes/lane/state/tx-cdr-lol"
func (n *Component_Transceiver_LanePath) TxCdrLol() *Component_Transceiver_Lane_TxCdrLolPath {
	ps := &Component_Transceiver_Lane_TxCdrLolPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "tx-cdr-lol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TxCdrLol (leaf): Transmitter clock-and-data-recovery loss-of-lock flag.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/tx-cdr-lol"
//	Path from root:       "/components/component/transceiver/host-lanes/lane/state/tx-cdr-lol"
func (n *Component_Transceiver_LanePathAny) TxCdrLol() *Component_Transceiver_Lane_TxCdrLolPathAny {
	ps := &Component_Transceiver_Lane_TxCdrLolPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "tx-cdr-lol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TxLos (leaf): Transmitter loss-of-signal flag.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/tx-los"
//	Path from root:       "/components/component/transceiver/host-lanes/lane/state/tx-los"
func (n *Component_Transceiver_LanePath) TxLos() *Component_Transceiver_Lane_TxLosPath {
	ps := &Component_Transceiver_Lane_TxLosPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "tx-los"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TxLos (leaf): Transmitter loss-of-signal flag.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/tx-los"
//	Path from root:       "/components/component/transceiver/host-lanes/lane/state/tx-los"
func (n *Component_Transceiver_LanePathAny) TxLos() *Component_Transceiver_Lane_TxLosPathAny {
	ps := &Component_Transceiver_Lane_TxLosPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "tx-los"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_LanePath) State() ygnmi.SingletonQuery[*oc.Component_Transceiver_Lane] {
	return ygnmi.NewSingletonQuery[*oc.Component_Transceiver_Lane](
		"Component_Transceiver_Lane",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_LanePathAny) State() ygnmi.WildcardQuery[*oc.Component_Transceiver_Lane] {
	return ygnmi.NewWildcardQuery[*oc.Component_Transceiver_Lane](
		"Component_Transceiver_Lane",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_LanePath) Config() ygnmi.ConfigQuery[*oc.Component_Transceiver_Lane] {
	return ygnmi.NewConfigQuery[*oc.Component_Transceiver_Lane](
		"Component_Transceiver_Lane",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_LanePathAny) Config() ygnmi.WildcardQuery[*oc.Component_Transceiver_Lane] {
	return ygnmi.NewWildcardQuery[*oc.Component_Transceiver_Lane](
		"Component_Transceiver_Lane",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_LanePathMap) State() ygnmi.SingletonQuery[map[uint8]*oc.Component_Transceiver_Lane] {
	return ygnmi.NewSingletonQuery[map[uint8]*oc.Component_Transceiver_Lane](
		"Component_Transceiver",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.Component_Transceiver_Lane, bool) {
			ret := gs.(*oc.Component_Transceiver).Lane
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-transceiver:host-lanes"},
			PostRelPath: []string{"openconfig-platform-transceiver:lane"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_LanePathMapAny) State() ygnmi.WildcardQuery[map[uint8]*oc.Component_Transceiver_Lane] {
	return ygnmi.NewWildcardQuery[map[uint8]*oc.Component_Transceiver_Lane](
		"Component_Transceiver",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.Component_Transceiver_Lane, bool) {
			ret := gs.(*oc.Component_Transceiver).Lane
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-transceiver:host-lanes"},
			PostRelPath: []string{"openconfig-platform-transceiver:lane"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_LanePathMap) Config() ygnmi.ConfigQuery[map[uint8]*oc.Component_Transceiver_Lane] {
	return ygnmi.NewConfigQuery[map[uint8]*oc.Component_Transceiver_Lane](
		"Component_Transceiver",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.Component_Transceiver_Lane, bool) {
			ret := gs.(*oc.Component_Transceiver).Lane
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-transceiver:host-lanes"},
			PostRelPath: []string{"openconfig-platform-transceiver:lane"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_LanePathMapAny) Config() ygnmi.WildcardQuery[map[uint8]*oc.Component_Transceiver_Lane] {
	return ygnmi.NewWildcardQuery[map[uint8]*oc.Component_Transceiver_Lane](
		"Component_Transceiver",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.Component_Transceiver_Lane, bool) {
			ret := gs.(*oc.Component_Transceiver).Lane
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-transceiver:host-lanes"},
			PostRelPath: []string{"openconfig-platform-transceiver:lane"},
		},
	)
}

// Component_Transceiver_LaserBiasCurrent_AvgPath represents the /openconfig-platform/components/component/transceiver/state/laser-bias-current/avg YANG schema element.
type Component_Transceiver_LaserBiasCurrent_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_LaserBiasCurrent_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/laser-bias-current/avg YANG schema element.
type Component_Transceiver_LaserBiasCurrent_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/avg"
func (n *Component_Transceiver_LaserBiasCurrent_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_LaserBiasCurrent).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/avg"
func (n *Component_Transceiver_LaserBiasCurrent_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_LaserBiasCurrent).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_LaserBiasCurrent_InstantPath represents the /openconfig-platform/components/component/transceiver/state/laser-bias-current/instant YANG schema element.
type Component_Transceiver_LaserBiasCurrent_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_LaserBiasCurrent_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/laser-bias-current/instant YANG schema element.
type Component_Transceiver_LaserBiasCurrent_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/instant"
func (n *Component_Transceiver_LaserBiasCurrent_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_LaserBiasCurrent).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/instant"
func (n *Component_Transceiver_LaserBiasCurrent_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_LaserBiasCurrent).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_LaserBiasCurrent_IntervalPath represents the /openconfig-platform/components/component/transceiver/state/laser-bias-current/interval YANG schema element.
type Component_Transceiver_LaserBiasCurrent_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_LaserBiasCurrent_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/laser-bias-current/interval YANG schema element.
type Component_Transceiver_LaserBiasCurrent_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/interval"
func (n *Component_Transceiver_LaserBiasCurrent_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_LaserBiasCurrent).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/interval"
func (n *Component_Transceiver_LaserBiasCurrent_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_LaserBiasCurrent).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_LaserBiasCurrent_MaxPath represents the /openconfig-platform/components/component/transceiver/state/laser-bias-current/max YANG schema element.
type Component_Transceiver_LaserBiasCurrent_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_LaserBiasCurrent_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/laser-bias-current/max YANG schema element.
type Component_Transceiver_LaserBiasCurrent_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/max"
func (n *Component_Transceiver_LaserBiasCurrent_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_LaserBiasCurrent).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/max"
func (n *Component_Transceiver_LaserBiasCurrent_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_LaserBiasCurrent).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_LaserBiasCurrent_MaxTimePath represents the /openconfig-platform/components/component/transceiver/state/laser-bias-current/max-time YANG schema element.
type Component_Transceiver_LaserBiasCurrent_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_LaserBiasCurrent_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/laser-bias-current/max-time YANG schema element.
type Component_Transceiver_LaserBiasCurrent_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/max-time"
func (n *Component_Transceiver_LaserBiasCurrent_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_LaserBiasCurrent).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/max-time"
func (n *Component_Transceiver_LaserBiasCurrent_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_LaserBiasCurrent).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_LaserBiasCurrent_MinPath represents the /openconfig-platform/components/component/transceiver/state/laser-bias-current/min YANG schema element.
type Component_Transceiver_LaserBiasCurrent_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_LaserBiasCurrent_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/laser-bias-current/min YANG schema element.
type Component_Transceiver_LaserBiasCurrent_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/min"
func (n *Component_Transceiver_LaserBiasCurrent_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_LaserBiasCurrent).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/min"
func (n *Component_Transceiver_LaserBiasCurrent_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_LaserBiasCurrent).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_LaserBiasCurrent_MinTimePath represents the /openconfig-platform/components/component/transceiver/state/laser-bias-current/min-time YANG schema element.
type Component_Transceiver_LaserBiasCurrent_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_LaserBiasCurrent_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/laser-bias-current/min-time YANG schema element.
type Component_Transceiver_LaserBiasCurrent_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/min-time"
func (n *Component_Transceiver_LaserBiasCurrent_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_LaserBiasCurrent).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/min-time"
func (n *Component_Transceiver_LaserBiasCurrent_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_LaserBiasCurrent).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_LaserBiasCurrentPath represents the /openconfig-platform/components/component/transceiver/state/laser-bias-current YANG schema element.
type Component_Transceiver_LaserBiasCurrentPath struct {
	*ygnmi.NodePath
}

// Component_Transceiver_LaserBiasCurrentPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/laser-bias-current YANG schema element.
type Component_Transceiver_LaserBiasCurrentPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/avg"
func (n *Component_Transceiver_LaserBiasCurrentPath) Avg() *Component_Transceiver_LaserBiasCurrent_AvgPath {
	ps := &Component_Transceiver_LaserBiasCurrent_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/avg"
func (n *Component_Transceiver_LaserBiasCurrentPathAny) Avg() *Component_Transceiver_LaserBiasCurrent_AvgPathAny {
	ps := &Component_Transceiver_LaserBiasCurrent_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/instant"
func (n *Component_Transceiver_LaserBiasCurrentPath) Instant() *Component_Transceiver_LaserBiasCurrent_InstantPath {
	ps := &Component_Transceiver_LaserBiasCurrent_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/instant"
func (n *Component_Transceiver_LaserBiasCurrentPathAny) Instant() *Component_Transceiver_LaserBiasCurrent_InstantPathAny {
	ps := &Component_Transceiver_LaserBiasCurrent_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/interval"
func (n *Component_Transceiver_LaserBiasCurrentPath) Interval() *Component_Transceiver_LaserBiasCurrent_IntervalPath {
	ps := &Component_Transceiver_LaserBiasCurrent_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/interval"
func (n *Component_Transceiver_LaserBiasCurrentPathAny) Interval() *Component_Transceiver_LaserBiasCurrent_IntervalPathAny {
	ps := &Component_Transceiver_LaserBiasCurrent_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/max"
func (n *Component_Transceiver_LaserBiasCurrentPath) Max() *Component_Transceiver_LaserBiasCurrent_MaxPath {
	ps := &Component_Transceiver_LaserBiasCurrent_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/max"
func (n *Component_Transceiver_LaserBiasCurrentPathAny) Max() *Component_Transceiver_LaserBiasCurrent_MaxPathAny {
	ps := &Component_Transceiver_LaserBiasCurrent_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/state/laser-bias-current/max-time"
func (n *Component_Transceiver_LaserBiasCurrentPath) MaxTime() *Component_Transceiver_LaserBiasCurrent_MaxTimePath {
	ps := &Component_Transceiver_LaserBiasCurrent_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/state/laser-bias-current/max-time"
func (n *Component_Transceiver_LaserBiasCurrentPathAny) MaxTime() *Component_Transceiver_LaserBiasCurrent_MaxTimePathAny {
	ps := &Component_Transceiver_LaserBiasCurrent_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/min"
func (n *Component_Transceiver_LaserBiasCurrentPath) Min() *Component_Transceiver_LaserBiasCurrent_MinPath {
	ps := &Component_Transceiver_LaserBiasCurrent_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/min"
func (n *Component_Transceiver_LaserBiasCurrentPathAny) Min() *Component_Transceiver_LaserBiasCurrent_MinPathAny {
	ps := &Component_Transceiver_LaserBiasCurrent_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/state/laser-bias-current/min-time"
func (n *Component_Transceiver_LaserBiasCurrentPath) MinTime() *Component_Transceiver_LaserBiasCurrent_MinTimePath {
	ps := &Component_Transceiver_LaserBiasCurrent_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/state/laser-bias-current/min-time"
func (n *Component_Transceiver_LaserBiasCurrentPathAny) MinTime() *Component_Transceiver_LaserBiasCurrent_MinTimePathAny {
	ps := &Component_Transceiver_LaserBiasCurrent_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_LaserBiasCurrentPath) State() ygnmi.SingletonQuery[*oc.Component_Transceiver_LaserBiasCurrent] {
	return ygnmi.NewSingletonQuery[*oc.Component_Transceiver_LaserBiasCurrent](
		"Component_Transceiver_LaserBiasCurrent",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_LaserBiasCurrentPathAny) State() ygnmi.WildcardQuery[*oc.Component_Transceiver_LaserBiasCurrent] {
	return ygnmi.NewWildcardQuery[*oc.Component_Transceiver_LaserBiasCurrent](
		"Component_Transceiver_LaserBiasCurrent",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_OutputPower_AvgPath represents the /openconfig-platform/components/component/transceiver/state/output-power/avg YANG schema element.
type Component_Transceiver_OutputPower_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_OutputPower_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/output-power/avg YANG schema element.
type Component_Transceiver_OutputPower_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/output-power/avg"
func (n *Component_Transceiver_OutputPower_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_OutputPower).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/output-power/avg"
func (n *Component_Transceiver_OutputPower_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_OutputPower).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_OutputPower_InstantPath represents the /openconfig-platform/components/component/transceiver/state/output-power/instant YANG schema element.
type Component_Transceiver_OutputPower_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_OutputPower_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/output-power/instant YANG schema element.
type Component_Transceiver_OutputPower_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/output-power/instant"
func (n *Component_Transceiver_OutputPower_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_OutputPower).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/output-power/instant"
func (n *Component_Transceiver_OutputPower_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_OutputPower).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_OutputPower_IntervalPath represents the /openconfig-platform/components/component/transceiver/state/output-power/interval YANG schema element.
type Component_Transceiver_OutputPower_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_OutputPower_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/output-power/interval YANG schema element.
type Component_Transceiver_OutputPower_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/output-power/interval"
func (n *Component_Transceiver_OutputPower_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_OutputPower).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/output-power/interval"
func (n *Component_Transceiver_OutputPower_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_OutputPower).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_OutputPower_MaxPath represents the /openconfig-platform/components/component/transceiver/state/output-power/max YANG schema element.
type Component_Transceiver_OutputPower_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_OutputPower_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/output-power/max YANG schema element.
type Component_Transceiver_OutputPower_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/output-power/max"
func (n *Component_Transceiver_OutputPower_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_OutputPower).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/output-power/max"
func (n *Component_Transceiver_OutputPower_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_OutputPower).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_OutputPower_MaxTimePath represents the /openconfig-platform/components/component/transceiver/state/output-power/max-time YANG schema element.
type Component_Transceiver_OutputPower_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_OutputPower_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/output-power/max-time YANG schema element.
type Component_Transceiver_OutputPower_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/state/output-power/max-time"
func (n *Component_Transceiver_OutputPower_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_OutputPower).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/state/output-power/max-time"
func (n *Component_Transceiver_OutputPower_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_OutputPower).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_OutputPower_MinPath represents the /openconfig-platform/components/component/transceiver/state/output-power/min YANG schema element.
type Component_Transceiver_OutputPower_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_OutputPower_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/output-power/min YANG schema element.
type Component_Transceiver_OutputPower_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/output-power/min"
func (n *Component_Transceiver_OutputPower_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_OutputPower).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/output-power/min"
func (n *Component_Transceiver_OutputPower_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_OutputPower).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_OutputPower_MinTimePath represents the /openconfig-platform/components/component/transceiver/state/output-power/min-time YANG schema element.
type Component_Transceiver_OutputPower_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_OutputPower_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/output-power/min-time YANG schema element.
type Component_Transceiver_OutputPower_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/state/output-power/min-time"
func (n *Component_Transceiver_OutputPower_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_OutputPower).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/state/output-power/min-time"
func (n *Component_Transceiver_OutputPower_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_OutputPower).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_OutputPowerPath represents the /openconfig-platform/components/component/transceiver/state/output-power YANG schema element.
type Component_Transceiver_OutputPowerPath struct {
	*ygnmi.NodePath
}

// Component_Transceiver_OutputPowerPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/output-power YANG schema element.
type Component_Transceiver_OutputPowerPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/output-power/avg"
func (n *Component_Transceiver_OutputPowerPath) Avg() *Component_Transceiver_OutputPower_AvgPath {
	ps := &Component_Transceiver_OutputPower_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/output-power/avg"
func (n *Component_Transceiver_OutputPowerPathAny) Avg() *Component_Transceiver_OutputPower_AvgPathAny {
	ps := &Component_Transceiver_OutputPower_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/output-power/instant"
func (n *Component_Transceiver_OutputPowerPath) Instant() *Component_Transceiver_OutputPower_InstantPath {
	ps := &Component_Transceiver_OutputPower_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/output-power/instant"
func (n *Component_Transceiver_OutputPowerPathAny) Instant() *Component_Transceiver_OutputPower_InstantPathAny {
	ps := &Component_Transceiver_OutputPower_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/output-power/interval"
func (n *Component_Transceiver_OutputPowerPath) Interval() *Component_Transceiver_OutputPower_IntervalPath {
	ps := &Component_Transceiver_OutputPower_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/output-power/interval"
func (n *Component_Transceiver_OutputPowerPathAny) Interval() *Component_Transceiver_OutputPower_IntervalPathAny {
	ps := &Component_Transceiver_OutputPower_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/output-power/max"
func (n *Component_Transceiver_OutputPowerPath) Max() *Component_Transceiver_OutputPower_MaxPath {
	ps := &Component_Transceiver_OutputPower_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/output-power/max"
func (n *Component_Transceiver_OutputPowerPathAny) Max() *Component_Transceiver_OutputPower_MaxPathAny {
	ps := &Component_Transceiver_OutputPower_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/state/output-power/max-time"
func (n *Component_Transceiver_OutputPowerPath) MaxTime() *Component_Transceiver_OutputPower_MaxTimePath {
	ps := &Component_Transceiver_OutputPower_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/state/output-power/max-time"
func (n *Component_Transceiver_OutputPowerPathAny) MaxTime() *Component_Transceiver_OutputPower_MaxTimePathAny {
	ps := &Component_Transceiver_OutputPower_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/output-power/min"
func (n *Component_Transceiver_OutputPowerPath) Min() *Component_Transceiver_OutputPower_MinPath {
	ps := &Component_Transceiver_OutputPower_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/output-power/min"
func (n *Component_Transceiver_OutputPowerPathAny) Min() *Component_Transceiver_OutputPower_MinPathAny {
	ps := &Component_Transceiver_OutputPower_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/state/output-power/min-time"
func (n *Component_Transceiver_OutputPowerPath) MinTime() *Component_Transceiver_OutputPower_MinTimePath {
	ps := &Component_Transceiver_OutputPower_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/state/output-power/min-time"
func (n *Component_Transceiver_OutputPowerPathAny) MinTime() *Component_Transceiver_OutputPower_MinTimePathAny {
	ps := &Component_Transceiver_OutputPower_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_OutputPowerPath) State() ygnmi.SingletonQuery[*oc.Component_Transceiver_OutputPower] {
	return ygnmi.NewSingletonQuery[*oc.Component_Transceiver_OutputPower](
		"Component_Transceiver_OutputPower",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_OutputPowerPathAny) State() ygnmi.WildcardQuery[*oc.Component_Transceiver_OutputPower] {
	return ygnmi.NewWildcardQuery[*oc.Component_Transceiver_OutputPower](
		"Component_Transceiver_OutputPower",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_PostFecBer_AvgPath represents the /openconfig-platform/components/component/transceiver/state/post-fec-ber/avg YANG schema element.
type Component_Transceiver_PostFecBer_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_PostFecBer_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/post-fec-ber/avg YANG schema element.
type Component_Transceiver_PostFecBer_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/avg"
func (n *Component_Transceiver_PostFecBer_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_PostFecBer).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/avg"
func (n *Component_Transceiver_PostFecBer_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_PostFecBer).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_PostFecBer_InstantPath represents the /openconfig-platform/components/component/transceiver/state/post-fec-ber/instant YANG schema element.
type Component_Transceiver_PostFecBer_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_PostFecBer_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/post-fec-ber/instant YANG schema element.
type Component_Transceiver_PostFecBer_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/instant"
func (n *Component_Transceiver_PostFecBer_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_PostFecBer).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/instant"
func (n *Component_Transceiver_PostFecBer_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_PostFecBer).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_PostFecBer_IntervalPath represents the /openconfig-platform/components/component/transceiver/state/post-fec-ber/interval YANG schema element.
type Component_Transceiver_PostFecBer_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_PostFecBer_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/post-fec-ber/interval YANG schema element.
type Component_Transceiver_PostFecBer_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/interval"
func (n *Component_Transceiver_PostFecBer_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_PostFecBer).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/interval"
func (n *Component_Transceiver_PostFecBer_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_PostFecBer).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_PostFecBer_MaxPath represents the /openconfig-platform/components/component/transceiver/state/post-fec-ber/max YANG schema element.
type Component_Transceiver_PostFecBer_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_PostFecBer_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/post-fec-ber/max YANG schema element.
type Component_Transceiver_PostFecBer_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/max"
func (n *Component_Transceiver_PostFecBer_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_PostFecBer).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/max"
func (n *Component_Transceiver_PostFecBer_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_PostFecBer).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_PostFecBer_MaxTimePath represents the /openconfig-platform/components/component/transceiver/state/post-fec-ber/max-time YANG schema element.
type Component_Transceiver_PostFecBer_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_PostFecBer_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/post-fec-ber/max-time YANG schema element.
type Component_Transceiver_PostFecBer_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/max-time"
func (n *Component_Transceiver_PostFecBer_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_PostFecBer).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/max-time"
func (n *Component_Transceiver_PostFecBer_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_PostFecBer).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_PostFecBer_MinPath represents the /openconfig-platform/components/component/transceiver/state/post-fec-ber/min YANG schema element.
type Component_Transceiver_PostFecBer_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_PostFecBer_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/post-fec-ber/min YANG schema element.
type Component_Transceiver_PostFecBer_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/min"
func (n *Component_Transceiver_PostFecBer_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_PostFecBer).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/min"
func (n *Component_Transceiver_PostFecBer_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_PostFecBer).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_PostFecBer_MinTimePath represents the /openconfig-platform/components/component/transceiver/state/post-fec-ber/min-time YANG schema element.
type Component_Transceiver_PostFecBer_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_PostFecBer_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/post-fec-ber/min-time YANG schema element.
type Component_Transceiver_PostFecBer_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/min-time"
func (n *Component_Transceiver_PostFecBer_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_PostFecBer).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/min-time"
func (n *Component_Transceiver_PostFecBer_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_PostFecBer).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_PostFecBerPath represents the /openconfig-platform/components/component/transceiver/state/post-fec-ber YANG schema element.
type Component_Transceiver_PostFecBerPath struct {
	*ygnmi.NodePath
}

// Component_Transceiver_PostFecBerPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/post-fec-ber YANG schema element.
type Component_Transceiver_PostFecBerPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/avg"
func (n *Component_Transceiver_PostFecBerPath) Avg() *Component_Transceiver_PostFecBer_AvgPath {
	ps := &Component_Transceiver_PostFecBer_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/avg"
func (n *Component_Transceiver_PostFecBerPathAny) Avg() *Component_Transceiver_PostFecBer_AvgPathAny {
	ps := &Component_Transceiver_PostFecBer_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/instant"
func (n *Component_Transceiver_PostFecBerPath) Instant() *Component_Transceiver_PostFecBer_InstantPath {
	ps := &Component_Transceiver_PostFecBer_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/instant"
func (n *Component_Transceiver_PostFecBerPathAny) Instant() *Component_Transceiver_PostFecBer_InstantPathAny {
	ps := &Component_Transceiver_PostFecBer_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/interval"
func (n *Component_Transceiver_PostFecBerPath) Interval() *Component_Transceiver_PostFecBer_IntervalPath {
	ps := &Component_Transceiver_PostFecBer_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/interval"
func (n *Component_Transceiver_PostFecBerPathAny) Interval() *Component_Transceiver_PostFecBer_IntervalPathAny {
	ps := &Component_Transceiver_PostFecBer_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/max"
func (n *Component_Transceiver_PostFecBerPath) Max() *Component_Transceiver_PostFecBer_MaxPath {
	ps := &Component_Transceiver_PostFecBer_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/max"
func (n *Component_Transceiver_PostFecBerPathAny) Max() *Component_Transceiver_PostFecBer_MaxPathAny {
	ps := &Component_Transceiver_PostFecBer_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/state/post-fec-ber/max-time"
func (n *Component_Transceiver_PostFecBerPath) MaxTime() *Component_Transceiver_PostFecBer_MaxTimePath {
	ps := &Component_Transceiver_PostFecBer_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/state/post-fec-ber/max-time"
func (n *Component_Transceiver_PostFecBerPathAny) MaxTime() *Component_Transceiver_PostFecBer_MaxTimePathAny {
	ps := &Component_Transceiver_PostFecBer_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/min"
func (n *Component_Transceiver_PostFecBerPath) Min() *Component_Transceiver_PostFecBer_MinPath {
	ps := &Component_Transceiver_PostFecBer_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/min"
func (n *Component_Transceiver_PostFecBerPathAny) Min() *Component_Transceiver_PostFecBer_MinPathAny {
	ps := &Component_Transceiver_PostFecBer_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/state/post-fec-ber/min-time"
func (n *Component_Transceiver_PostFecBerPath) MinTime() *Component_Transceiver_PostFecBer_MinTimePath {
	ps := &Component_Transceiver_PostFecBer_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/state/post-fec-ber/min-time"
func (n *Component_Transceiver_PostFecBerPathAny) MinTime() *Component_Transceiver_PostFecBer_MinTimePathAny {
	ps := &Component_Transceiver_PostFecBer_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_PostFecBerPath) State() ygnmi.SingletonQuery[*oc.Component_Transceiver_PostFecBer] {
	return ygnmi.NewSingletonQuery[*oc.Component_Transceiver_PostFecBer](
		"Component_Transceiver_PostFecBer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_PostFecBerPathAny) State() ygnmi.WildcardQuery[*oc.Component_Transceiver_PostFecBer] {
	return ygnmi.NewWildcardQuery[*oc.Component_Transceiver_PostFecBer](
		"Component_Transceiver_PostFecBer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_PreFecBer_AvgPath represents the /openconfig-platform/components/component/transceiver/state/pre-fec-ber/avg YANG schema element.
type Component_Transceiver_PreFecBer_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_PreFecBer_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/pre-fec-ber/avg YANG schema element.
type Component_Transceiver_PreFecBer_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/avg"
func (n *Component_Transceiver_PreFecBer_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_PreFecBer).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/avg"
func (n *Component_Transceiver_PreFecBer_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_PreFecBer).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_PreFecBer_InstantPath represents the /openconfig-platform/components/component/transceiver/state/pre-fec-ber/instant YANG schema element.
type Component_Transceiver_PreFecBer_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_PreFecBer_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/pre-fec-ber/instant YANG schema element.
type Component_Transceiver_PreFecBer_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/instant"
func (n *Component_Transceiver_PreFecBer_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_PreFecBer).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/instant"
func (n *Component_Transceiver_PreFecBer_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_PreFecBer).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_PreFecBer_IntervalPath represents the /openconfig-platform/components/component/transceiver/state/pre-fec-ber/interval YANG schema element.
type Component_Transceiver_PreFecBer_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_PreFecBer_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/pre-fec-ber/interval YANG schema element.
type Component_Transceiver_PreFecBer_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/interval"
func (n *Component_Transceiver_PreFecBer_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_PreFecBer).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/interval"
func (n *Component_Transceiver_PreFecBer_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_PreFecBer).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_PreFecBer_MaxPath represents the /openconfig-platform/components/component/transceiver/state/pre-fec-ber/max YANG schema element.
type Component_Transceiver_PreFecBer_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_PreFecBer_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/pre-fec-ber/max YANG schema element.
type Component_Transceiver_PreFecBer_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/max"
func (n *Component_Transceiver_PreFecBer_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_PreFecBer).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/max"
func (n *Component_Transceiver_PreFecBer_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_PreFecBer).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_PreFecBer_MaxTimePath represents the /openconfig-platform/components/component/transceiver/state/pre-fec-ber/max-time YANG schema element.
type Component_Transceiver_PreFecBer_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_PreFecBer_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/pre-fec-ber/max-time YANG schema element.
type Component_Transceiver_PreFecBer_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/max-time"
func (n *Component_Transceiver_PreFecBer_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_PreFecBer).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/max-time"
func (n *Component_Transceiver_PreFecBer_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_PreFecBer).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_PreFecBer_MinPath represents the /openconfig-platform/components/component/transceiver/state/pre-fec-ber/min YANG schema element.
type Component_Transceiver_PreFecBer_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_PreFecBer_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/pre-fec-ber/min YANG schema element.
type Component_Transceiver_PreFecBer_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/min"
func (n *Component_Transceiver_PreFecBer_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_PreFecBer).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/min"
func (n *Component_Transceiver_PreFecBer_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_PreFecBer).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_PreFecBer_MinTimePath represents the /openconfig-platform/components/component/transceiver/state/pre-fec-ber/min-time YANG schema element.
type Component_Transceiver_PreFecBer_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_PreFecBer_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/pre-fec-ber/min-time YANG schema element.
type Component_Transceiver_PreFecBer_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/min-time"
func (n *Component_Transceiver_PreFecBer_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_PreFecBer).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/min-time"
func (n *Component_Transceiver_PreFecBer_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_PreFecBer).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_PreFecBerPath represents the /openconfig-platform/components/component/transceiver/state/pre-fec-ber YANG schema element.
type Component_Transceiver_PreFecBerPath struct {
	*ygnmi.NodePath
}

// Component_Transceiver_PreFecBerPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/pre-fec-ber YANG schema element.
type Component_Transceiver_PreFecBerPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/avg"
func (n *Component_Transceiver_PreFecBerPath) Avg() *Component_Transceiver_PreFecBer_AvgPath {
	ps := &Component_Transceiver_PreFecBer_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/avg"
func (n *Component_Transceiver_PreFecBerPathAny) Avg() *Component_Transceiver_PreFecBer_AvgPathAny {
	ps := &Component_Transceiver_PreFecBer_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/instant"
func (n *Component_Transceiver_PreFecBerPath) Instant() *Component_Transceiver_PreFecBer_InstantPath {
	ps := &Component_Transceiver_PreFecBer_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/instant"
func (n *Component_Transceiver_PreFecBerPathAny) Instant() *Component_Transceiver_PreFecBer_InstantPathAny {
	ps := &Component_Transceiver_PreFecBer_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/interval"
func (n *Component_Transceiver_PreFecBerPath) Interval() *Component_Transceiver_PreFecBer_IntervalPath {
	ps := &Component_Transceiver_PreFecBer_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/interval"
func (n *Component_Transceiver_PreFecBerPathAny) Interval() *Component_Transceiver_PreFecBer_IntervalPathAny {
	ps := &Component_Transceiver_PreFecBer_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/max"
func (n *Component_Transceiver_PreFecBerPath) Max() *Component_Transceiver_PreFecBer_MaxPath {
	ps := &Component_Transceiver_PreFecBer_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/max"
func (n *Component_Transceiver_PreFecBerPathAny) Max() *Component_Transceiver_PreFecBer_MaxPathAny {
	ps := &Component_Transceiver_PreFecBer_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/state/pre-fec-ber/max-time"
func (n *Component_Transceiver_PreFecBerPath) MaxTime() *Component_Transceiver_PreFecBer_MaxTimePath {
	ps := &Component_Transceiver_PreFecBer_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/state/pre-fec-ber/max-time"
func (n *Component_Transceiver_PreFecBerPathAny) MaxTime() *Component_Transceiver_PreFecBer_MaxTimePathAny {
	ps := &Component_Transceiver_PreFecBer_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/min"
func (n *Component_Transceiver_PreFecBerPath) Min() *Component_Transceiver_PreFecBer_MinPath {
	ps := &Component_Transceiver_PreFecBer_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/min"
func (n *Component_Transceiver_PreFecBerPathAny) Min() *Component_Transceiver_PreFecBer_MinPathAny {
	ps := &Component_Transceiver_PreFecBer_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/state/pre-fec-ber/min-time"
func (n *Component_Transceiver_PreFecBerPath) MinTime() *Component_Transceiver_PreFecBer_MinTimePath {
	ps := &Component_Transceiver_PreFecBer_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/state/pre-fec-ber/min-time"
func (n *Component_Transceiver_PreFecBerPathAny) MinTime() *Component_Transceiver_PreFecBer_MinTimePathAny {
	ps := &Component_Transceiver_PreFecBer_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_PreFecBerPath) State() ygnmi.SingletonQuery[*oc.Component_Transceiver_PreFecBer] {
	return ygnmi.NewSingletonQuery[*oc.Component_Transceiver_PreFecBer](
		"Component_Transceiver_PreFecBer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_PreFecBerPathAny) State() ygnmi.WildcardQuery[*oc.Component_Transceiver_PreFecBer] {
	return ygnmi.NewWildcardQuery[*oc.Component_Transceiver_PreFecBer](
		"Component_Transceiver_PreFecBer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_SupplyVoltage_AvgPath represents the /openconfig-platform/components/component/transceiver/state/supply-voltage/avg YANG schema element.
type Component_Transceiver_SupplyVoltage_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_SupplyVoltage_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/supply-voltage/avg YANG schema element.
type Component_Transceiver_SupplyVoltage_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/avg"
func (n *Component_Transceiver_SupplyVoltage_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_SupplyVoltage",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_SupplyVoltage).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_SupplyVoltage) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/avg"
func (n *Component_Transceiver_SupplyVoltage_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_SupplyVoltage",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_SupplyVoltage).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_SupplyVoltage) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_SupplyVoltage_InstantPath represents the /openconfig-platform/components/component/transceiver/state/supply-voltage/instant YANG schema element.
type Component_Transceiver_SupplyVoltage_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_SupplyVoltage_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/supply-voltage/instant YANG schema element.
type Component_Transceiver_SupplyVoltage_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/instant"
func (n *Component_Transceiver_SupplyVoltage_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_SupplyVoltage",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_SupplyVoltage).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_SupplyVoltage) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/instant"
func (n *Component_Transceiver_SupplyVoltage_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_SupplyVoltage",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_SupplyVoltage).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_SupplyVoltage) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_SupplyVoltage_IntervalPath represents the /openconfig-platform/components/component/transceiver/state/supply-voltage/interval YANG schema element.
type Component_Transceiver_SupplyVoltage_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_SupplyVoltage_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/supply-voltage/interval YANG schema element.
type Component_Transceiver_SupplyVoltage_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/interval"
func (n *Component_Transceiver_SupplyVoltage_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_SupplyVoltage",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_SupplyVoltage).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_SupplyVoltage) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/interval"
func (n *Component_Transceiver_SupplyVoltage_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_SupplyVoltage",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_SupplyVoltage).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_SupplyVoltage) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_SupplyVoltage_MaxPath represents the /openconfig-platform/components/component/transceiver/state/supply-voltage/max YANG schema element.
type Component_Transceiver_SupplyVoltage_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_SupplyVoltage_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/supply-voltage/max YANG schema element.
type Component_Transceiver_SupplyVoltage_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/max"
func (n *Component_Transceiver_SupplyVoltage_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_SupplyVoltage",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_SupplyVoltage).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_SupplyVoltage) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/max"
func (n *Component_Transceiver_SupplyVoltage_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_SupplyVoltage",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_SupplyVoltage).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_SupplyVoltage) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_SupplyVoltage_MaxTimePath represents the /openconfig-platform/components/component/transceiver/state/supply-voltage/max-time YANG schema element.
type Component_Transceiver_SupplyVoltage_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_SupplyVoltage_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/supply-voltage/max-time YANG schema element.
type Component_Transceiver_SupplyVoltage_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/max-time"
func (n *Component_Transceiver_SupplyVoltage_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_SupplyVoltage",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_SupplyVoltage).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_SupplyVoltage) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/max-time"
func (n *Component_Transceiver_SupplyVoltage_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_SupplyVoltage",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_SupplyVoltage).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_SupplyVoltage) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_SupplyVoltage_MinPath represents the /openconfig-platform/components/component/transceiver/state/supply-voltage/min YANG schema element.
type Component_Transceiver_SupplyVoltage_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_SupplyVoltage_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/supply-voltage/min YANG schema element.
type Component_Transceiver_SupplyVoltage_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/min"
func (n *Component_Transceiver_SupplyVoltage_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_SupplyVoltage",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_SupplyVoltage).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_SupplyVoltage) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/min"
func (n *Component_Transceiver_SupplyVoltage_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_SupplyVoltage",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_SupplyVoltage).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_SupplyVoltage) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_SupplyVoltage_MinTimePath represents the /openconfig-platform/components/component/transceiver/state/supply-voltage/min-time YANG schema element.
type Component_Transceiver_SupplyVoltage_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_SupplyVoltage_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/supply-voltage/min-time YANG schema element.
type Component_Transceiver_SupplyVoltage_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/min-time"
func (n *Component_Transceiver_SupplyVoltage_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_SupplyVoltage",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_SupplyVoltage).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_SupplyVoltage) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/min-time"
func (n *Component_Transceiver_SupplyVoltage_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_SupplyVoltage",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_SupplyVoltage).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_SupplyVoltage) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_SupplyVoltagePath represents the /openconfig-platform/components/component/transceiver/state/supply-voltage YANG schema element.
type Component_Transceiver_SupplyVoltagePath struct {
	*ygnmi.NodePath
}

// Component_Transceiver_SupplyVoltagePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/supply-voltage YANG schema element.
type Component_Transceiver_SupplyVoltagePathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// sampling period.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/avg"
func (n *Component_Transceiver_SupplyVoltagePath) Avg() *Component_Transceiver_SupplyVoltage_AvgPath {
	ps := &Component_Transceiver_SupplyVoltage_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// sampling period.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/avg"
func (n *Component_Transceiver_SupplyVoltagePathAny) Avg() *Component_Transceiver_SupplyVoltage_AvgPathAny {
	ps := &Component_Transceiver_SupplyVoltage_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/instant"
func (n *Component_Transceiver_SupplyVoltagePath) Instant() *Component_Transceiver_SupplyVoltage_InstantPath {
	ps := &Component_Transceiver_SupplyVoltage_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/instant"
func (n *Component_Transceiver_SupplyVoltagePathAny) Instant() *Component_Transceiver_SupplyVoltage_InstantPathAny {
	ps := &Component_Transceiver_SupplyVoltage_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/interval"
func (n *Component_Transceiver_SupplyVoltagePath) Interval() *Component_Transceiver_SupplyVoltage_IntervalPath {
	ps := &Component_Transceiver_SupplyVoltage_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/interval"
func (n *Component_Transceiver_SupplyVoltagePathAny) Interval() *Component_Transceiver_SupplyVoltage_IntervalPathAny {
	ps := &Component_Transceiver_SupplyVoltage_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the sampling
// period
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/max"
func (n *Component_Transceiver_SupplyVoltagePath) Max() *Component_Transceiver_SupplyVoltage_MaxPath {
	ps := &Component_Transceiver_SupplyVoltage_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the sampling
// period
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/max"
func (n *Component_Transceiver_SupplyVoltagePathAny) Max() *Component_Transceiver_SupplyVoltage_MaxPathAny {
	ps := &Component_Transceiver_SupplyVoltage_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/state/supply-voltage/max-time"
func (n *Component_Transceiver_SupplyVoltagePath) MaxTime() *Component_Transceiver_SupplyVoltage_MaxTimePath {
	ps := &Component_Transceiver_SupplyVoltage_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/state/supply-voltage/max-time"
func (n *Component_Transceiver_SupplyVoltagePathAny) MaxTime() *Component_Transceiver_SupplyVoltage_MaxTimePathAny {
	ps := &Component_Transceiver_SupplyVoltage_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the sampling
// period
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/min"
func (n *Component_Transceiver_SupplyVoltagePath) Min() *Component_Transceiver_SupplyVoltage_MinPath {
	ps := &Component_Transceiver_SupplyVoltage_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the sampling
// period
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/min"
func (n *Component_Transceiver_SupplyVoltagePathAny) Min() *Component_Transceiver_SupplyVoltage_MinPathAny {
	ps := &Component_Transceiver_SupplyVoltage_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/state/supply-voltage/min-time"
func (n *Component_Transceiver_SupplyVoltagePath) MinTime() *Component_Transceiver_SupplyVoltage_MinTimePath {
	ps := &Component_Transceiver_SupplyVoltage_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/state/supply-voltage/min-time"
func (n *Component_Transceiver_SupplyVoltagePathAny) MinTime() *Component_Transceiver_SupplyVoltage_MinTimePathAny {
	ps := &Component_Transceiver_SupplyVoltage_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_SupplyVoltagePath) State() ygnmi.SingletonQuery[*oc.Component_Transceiver_SupplyVoltage] {
	return ygnmi.NewSingletonQuery[*oc.Component_Transceiver_SupplyVoltage](
		"Component_Transceiver_SupplyVoltage",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_SupplyVoltagePathAny) State() ygnmi.WildcardQuery[*oc.Component_Transceiver_SupplyVoltage] {
	return ygnmi.NewWildcardQuery[*oc.Component_Transceiver_SupplyVoltage](
		"Component_Transceiver_SupplyVoltage",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Threshold_InputPowerLowerPath represents the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/input-power-lower YANG schema element.
type Component_Transceiver_Threshold_InputPowerLowerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Threshold_InputPowerLowerPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/input-power-lower YANG schema element.
type Component_Transceiver_Threshold_InputPowerLowerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/input-power-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/input-power-lower"
func (n *Component_Transceiver_Threshold_InputPowerLowerPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "input-power-lower"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).InputPowerLower
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/input-power-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/input-power-lower"
func (n *Component_Transceiver_Threshold_InputPowerLowerPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "input-power-lower"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).InputPowerLower
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Threshold_InputPowerUpperPath represents the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/input-power-upper YANG schema element.
type Component_Transceiver_Threshold_InputPowerUpperPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Threshold_InputPowerUpperPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/input-power-upper YANG schema element.
type Component_Transceiver_Threshold_InputPowerUpperPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/input-power-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/input-power-upper"
func (n *Component_Transceiver_Threshold_InputPowerUpperPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "input-power-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).InputPowerUpper
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/input-power-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/input-power-upper"
func (n *Component_Transceiver_Threshold_InputPowerUpperPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "input-power-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).InputPowerUpper
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Threshold_LaserBiasCurrentLowerPath represents the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/laser-bias-current-lower YANG schema element.
type Component_Transceiver_Threshold_LaserBiasCurrentLowerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Threshold_LaserBiasCurrentLowerPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/laser-bias-current-lower YANG schema element.
type Component_Transceiver_Threshold_LaserBiasCurrentLowerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/laser-bias-current-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/laser-bias-current-lower"
func (n *Component_Transceiver_Threshold_LaserBiasCurrentLowerPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "laser-bias-current-lower"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).LaserBiasCurrentLower
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/laser-bias-current-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/laser-bias-current-lower"
func (n *Component_Transceiver_Threshold_LaserBiasCurrentLowerPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "laser-bias-current-lower"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).LaserBiasCurrentLower
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Threshold_LaserBiasCurrentUpperPath represents the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/laser-bias-current-upper YANG schema element.
type Component_Transceiver_Threshold_LaserBiasCurrentUpperPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Threshold_LaserBiasCurrentUpperPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/laser-bias-current-upper YANG schema element.
type Component_Transceiver_Threshold_LaserBiasCurrentUpperPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/laser-bias-current-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/laser-bias-current-upper"
func (n *Component_Transceiver_Threshold_LaserBiasCurrentUpperPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "laser-bias-current-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).LaserBiasCurrentUpper
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/laser-bias-current-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/laser-bias-current-upper"
func (n *Component_Transceiver_Threshold_LaserBiasCurrentUpperPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "laser-bias-current-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).LaserBiasCurrentUpper
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Threshold_LaserTemperatureLowerPath represents the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/laser-temperature-lower YANG schema element.
type Component_Transceiver_Threshold_LaserTemperatureLowerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Threshold_LaserTemperatureLowerPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/laser-temperature-lower YANG schema element.
type Component_Transceiver_Threshold_LaserTemperatureLowerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/laser-temperature-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/laser-temperature-lower"
func (n *Component_Transceiver_Threshold_LaserTemperatureLowerPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "laser-temperature-lower"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).LaserTemperatureLower
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/laser-temperature-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/laser-temperature-lower"
func (n *Component_Transceiver_Threshold_LaserTemperatureLowerPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "laser-temperature-lower"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).LaserTemperatureLower
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Threshold_LaserTemperatureUpperPath represents the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/laser-temperature-upper YANG schema element.
type Component_Transceiver_Threshold_LaserTemperatureUpperPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Threshold_LaserTemperatureUpperPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/laser-temperature-upper YANG schema element.
type Component_Transceiver_Threshold_LaserTemperatureUpperPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/laser-temperature-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/laser-temperature-upper"
func (n *Component_Transceiver_Threshold_LaserTemperatureUpperPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "laser-temperature-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).LaserTemperatureUpper
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/laser-temperature-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/laser-temperature-upper"
func (n *Component_Transceiver_Threshold_LaserTemperatureUpperPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "laser-temperature-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).LaserTemperatureUpper
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Threshold_ModuleTemperatureLowerPath represents the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/module-temperature-lower YANG schema element.
type Component_Transceiver_Threshold_ModuleTemperatureLowerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Threshold_ModuleTemperatureLowerPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/module-temperature-lower YANG schema element.
type Component_Transceiver_Threshold_ModuleTemperatureLowerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/module-temperature-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/module-temperature-lower"
func (n *Component_Transceiver_Threshold_ModuleTemperatureLowerPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "module-temperature-lower"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).ModuleTemperatureLower
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/module-temperature-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/module-temperature-lower"
func (n *Component_Transceiver_Threshold_ModuleTemperatureLowerPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "module-temperature-lower"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).ModuleTemperatureLower
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Threshold_ModuleTemperatureUpperPath represents the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/module-temperature-upper YANG schema element.
type Component_Transceiver_Threshold_ModuleTemperatureUpperPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Threshold_ModuleTemperatureUpperPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/module-temperature-upper YANG schema element.
type Component_Transceiver_Threshold_ModuleTemperatureUpperPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/module-temperature-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/module-temperature-upper"
func (n *Component_Transceiver_Threshold_ModuleTemperatureUpperPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "module-temperature-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).ModuleTemperatureUpper
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/module-temperature-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/module-temperature-upper"
func (n *Component_Transceiver_Threshold_ModuleTemperatureUpperPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "module-temperature-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).ModuleTemperatureUpper
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Threshold_OutputPowerLowerPath represents the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/output-power-lower YANG schema element.
type Component_Transceiver_Threshold_OutputPowerLowerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Threshold_OutputPowerLowerPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/output-power-lower YANG schema element.
type Component_Transceiver_Threshold_OutputPowerLowerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/output-power-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/output-power-lower"
func (n *Component_Transceiver_Threshold_OutputPowerLowerPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "output-power-lower"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).OutputPowerLower
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/output-power-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/output-power-lower"
func (n *Component_Transceiver_Threshold_OutputPowerLowerPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "output-power-lower"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).OutputPowerLower
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Threshold_OutputPowerUpperPath represents the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/output-power-upper YANG schema element.
type Component_Transceiver_Threshold_OutputPowerUpperPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Threshold_OutputPowerUpperPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/output-power-upper YANG schema element.
type Component_Transceiver_Threshold_OutputPowerUpperPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/output-power-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/output-power-upper"
func (n *Component_Transceiver_Threshold_OutputPowerUpperPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "output-power-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).OutputPowerUpper
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/output-power-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/output-power-upper"
func (n *Component_Transceiver_Threshold_OutputPowerUpperPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "output-power-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).OutputPowerUpper
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Threshold_SeverityPath represents the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/severity YANG schema element.
type Component_Transceiver_Threshold_SeverityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Threshold_SeverityPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/severity YANG schema element.
type Component_Transceiver_Threshold_SeverityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/severity"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/severity"
func (n *Component_Transceiver_Threshold_SeverityPath) State() ygnmi.SingletonQuery[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY] {
	return ygnmi.NewSingletonQuery[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/severity"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/severity"
func (n *Component_Transceiver_Threshold_SeverityPathAny) State() ygnmi.WildcardQuery[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY] {
	return ygnmi.NewWildcardQuery[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "severity"
//	Path from root:       ""
func (n *Component_Transceiver_Threshold_SeverityPath) Config() ygnmi.ConfigQuery[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY] {
	return ygnmi.NewConfigQuery[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY](
		"Component_Transceiver_Threshold",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "severity"
//	Path from root:       ""
func (n *Component_Transceiver_Threshold_SeverityPathAny) Config() ygnmi.WildcardQuery[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY] {
	return ygnmi.NewWildcardQuery[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY](
		"Component_Transceiver_Threshold",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Threshold_SupplyVoltageLowerPath represents the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/supply-voltage-lower YANG schema element.
type Component_Transceiver_Threshold_SupplyVoltageLowerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Threshold_SupplyVoltageLowerPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/supply-voltage-lower YANG schema element.
type Component_Transceiver_Threshold_SupplyVoltageLowerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/supply-voltage-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/supply-voltage-lower"
func (n *Component_Transceiver_Threshold_SupplyVoltageLowerPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "supply-voltage-lower"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).SupplyVoltageLower
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/supply-voltage-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/supply-voltage-lower"
func (n *Component_Transceiver_Threshold_SupplyVoltageLowerPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "supply-voltage-lower"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).SupplyVoltageLower
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Threshold_SupplyVoltageUpperPath represents the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/supply-voltage-upper YANG schema element.
type Component_Transceiver_Threshold_SupplyVoltageUpperPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Threshold_SupplyVoltageUpperPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/supply-voltage-upper YANG schema element.
type Component_Transceiver_Threshold_SupplyVoltageUpperPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/supply-voltage-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/supply-voltage-upper"
func (n *Component_Transceiver_Threshold_SupplyVoltageUpperPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "supply-voltage-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).SupplyVoltageUpper
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/supply-voltage-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/supply-voltage-upper"
func (n *Component_Transceiver_Threshold_SupplyVoltageUpperPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "supply-voltage-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).SupplyVoltageUpper
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_ThresholdPath represents the /openconfig-platform/components/component/transceiver/thresholds/threshold YANG schema element.
type Component_Transceiver_ThresholdPath struct {
	*ygnmi.NodePath
}

// Component_Transceiver_ThresholdPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/thresholds/threshold YANG schema element.
type Component_Transceiver_ThresholdPathAny struct {
	*ygnmi.NodePath
}

// Component_Transceiver_ThresholdPathMap represents the /openconfig-platform/components/component/transceiver/thresholds/threshold YANG schema element.
type Component_Transceiver_ThresholdPathMap struct {
	*ygnmi.NodePath
}

// Component_Transceiver_ThresholdPathMapAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/thresholds/threshold YANG schema element.
type Component_Transceiver_ThresholdPathMapAny struct {
	*ygnmi.NodePath
}

// InputPowerLower (leaf): The lower power threshold for the laser input power. This threshold
// applies to every physical-channel on the transceiver and does not
// apply to the aggregate transceiver optical-input-power. This leaf
// value is compared to the instant value of optical-input-power.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/input-power-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/input-power-lower"
func (n *Component_Transceiver_ThresholdPath) InputPowerLower() *Component_Transceiver_Threshold_InputPowerLowerPath {
	ps := &Component_Transceiver_Threshold_InputPowerLowerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "input-power-lower"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InputPowerLower (leaf): The lower power threshold for the laser input power. This threshold
// applies to every physical-channel on the transceiver and does not
// apply to the aggregate transceiver optical-input-power. This leaf
// value is compared to the instant value of optical-input-power.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/input-power-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/input-power-lower"
func (n *Component_Transceiver_ThresholdPathAny) InputPowerLower() *Component_Transceiver_Threshold_InputPowerLowerPathAny {
	ps := &Component_Transceiver_Threshold_InputPowerLowerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "input-power-lower"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InputPowerUpper (leaf): The upper power threshold for the laser input power. This threshold
// applies to every physical-channel on the transceiver and does not
// apply to the aggregate transceiver optical-input-power. This leaf
// value is compared to the instant value of optical-input-power.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/input-power-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/input-power-upper"
func (n *Component_Transceiver_ThresholdPath) InputPowerUpper() *Component_Transceiver_Threshold_InputPowerUpperPath {
	ps := &Component_Transceiver_Threshold_InputPowerUpperPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "input-power-upper"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InputPowerUpper (leaf): The upper power threshold for the laser input power. This threshold
// applies to every physical-channel on the transceiver and does not
// apply to the aggregate transceiver optical-input-power. This leaf
// value is compared to the instant value of optical-input-power.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/input-power-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/input-power-upper"
func (n *Component_Transceiver_ThresholdPathAny) InputPowerUpper() *Component_Transceiver_Threshold_InputPowerUpperPathAny {
	ps := &Component_Transceiver_Threshold_InputPowerUpperPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "input-power-upper"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LaserBiasCurrentLower (leaf): The lower threshold for the laser bias current. This leaf value is
// compared to the instant value of last-bias-current.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/laser-bias-current-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/laser-bias-current-lower"
func (n *Component_Transceiver_ThresholdPath) LaserBiasCurrentLower() *Component_Transceiver_Threshold_LaserBiasCurrentLowerPath {
	ps := &Component_Transceiver_Threshold_LaserBiasCurrentLowerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "laser-bias-current-lower"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LaserBiasCurrentLower (leaf): The lower threshold for the laser bias current. This leaf value is
// compared to the instant value of last-bias-current.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/laser-bias-current-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/laser-bias-current-lower"
func (n *Component_Transceiver_ThresholdPathAny) LaserBiasCurrentLower() *Component_Transceiver_Threshold_LaserBiasCurrentLowerPathAny {
	ps := &Component_Transceiver_Threshold_LaserBiasCurrentLowerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "laser-bias-current-lower"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LaserBiasCurrentUpper (leaf): The upper threshold for the laser bias current. This leaf value is
// compared to the instant value of last-bias-current.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/laser-bias-current-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/laser-bias-current-upper"
func (n *Component_Transceiver_ThresholdPath) LaserBiasCurrentUpper() *Component_Transceiver_Threshold_LaserBiasCurrentUpperPath {
	ps := &Component_Transceiver_Threshold_LaserBiasCurrentUpperPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "laser-bias-current-upper"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LaserBiasCurrentUpper (leaf): The upper threshold for the laser bias current. This leaf value is
// compared to the instant value of last-bias-current.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/laser-bias-current-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/laser-bias-current-upper"
func (n *Component_Transceiver_ThresholdPathAny) LaserBiasCurrentUpper() *Component_Transceiver_Threshold_LaserBiasCurrentUpperPathAny {
	ps := &Component_Transceiver_Threshold_LaserBiasCurrentUpperPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "laser-bias-current-upper"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LaserTemperatureLower (leaf): The lower temperature threshold for the laser temperature sensor.
// This leaf value is compared to the instant value of
// laser-temperature.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/laser-temperature-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/laser-temperature-lower"
func (n *Component_Transceiver_ThresholdPath) LaserTemperatureLower() *Component_Transceiver_Threshold_LaserTemperatureLowerPath {
	ps := &Component_Transceiver_Threshold_LaserTemperatureLowerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "laser-temperature-lower"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LaserTemperatureLower (leaf): The lower temperature threshold for the laser temperature sensor.
// This leaf value is compared to the instant value of
// laser-temperature.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/laser-temperature-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/laser-temperature-lower"
func (n *Component_Transceiver_ThresholdPathAny) LaserTemperatureLower() *Component_Transceiver_Threshold_LaserTemperatureLowerPathAny {
	ps := &Component_Transceiver_Threshold_LaserTemperatureLowerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "laser-temperature-lower"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LaserTemperatureUpper (leaf): The upper temperature threshold for the laser temperature sensor.
// This leaf value is compared to the instant value of
// laser-temperature.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/laser-temperature-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/laser-temperature-upper"
func (n *Component_Transceiver_ThresholdPath) LaserTemperatureUpper() *Component_Transceiver_Threshold_LaserTemperatureUpperPath {
	ps := &Component_Transceiver_Threshold_LaserTemperatureUpperPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "laser-temperature-upper"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LaserTemperatureUpper (leaf): The upper temperature threshold for the laser temperature sensor.
// This leaf value is compared to the instant value of
// laser-temperature.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/laser-temperature-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/laser-temperature-upper"
func (n *Component_Transceiver_ThresholdPathAny) LaserTemperatureUpper() *Component_Transceiver_Threshold_LaserTemperatureUpperPathAny {
	ps := &Component_Transceiver_Threshold_LaserTemperatureUpperPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "laser-temperature-upper"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ModuleTemperatureLower (leaf): The lower temperature threshold for the transceiver module. This
// leaf value is compared to the instant value of module-temperature.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/module-temperature-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/module-temperature-lower"
func (n *Component_Transceiver_ThresholdPath) ModuleTemperatureLower() *Component_Transceiver_Threshold_ModuleTemperatureLowerPath {
	ps := &Component_Transceiver_Threshold_ModuleTemperatureLowerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "module-temperature-lower"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ModuleTemperatureLower (leaf): The lower temperature threshold for the transceiver module. This
// leaf value is compared to the instant value of module-temperature.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/module-temperature-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/module-temperature-lower"
func (n *Component_Transceiver_ThresholdPathAny) ModuleTemperatureLower() *Component_Transceiver_Threshold_ModuleTemperatureLowerPathAny {
	ps := &Component_Transceiver_Threshold_ModuleTemperatureLowerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "module-temperature-lower"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ModuleTemperatureUpper (leaf): The upper temperature threshold for the transceiver module. This
// leaf value is compared to the instant value of module-temperature.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/module-temperature-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/module-temperature-upper"
func (n *Component_Transceiver_ThresholdPath) ModuleTemperatureUpper() *Component_Transceiver_Threshold_ModuleTemperatureUpperPath {
	ps := &Component_Transceiver_Threshold_ModuleTemperatureUpperPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "module-temperature-upper"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ModuleTemperatureUpper (leaf): The upper temperature threshold for the transceiver module. This
// leaf value is compared to the instant value of module-temperature.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/module-temperature-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/module-temperature-upper"
func (n *Component_Transceiver_ThresholdPathAny) ModuleTemperatureUpper() *Component_Transceiver_Threshold_ModuleTemperatureUpperPathAny {
	ps := &Component_Transceiver_Threshold_ModuleTemperatureUpperPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "module-temperature-upper"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutputPowerLower (leaf): The lower power threshold for the laser output power. This threshold
// applies to every physical-channel on the transceiver and does not
// apply to the aggregate transceiver optical-output-power. This leaf
// value is compared to the instant value of optical-output-power.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/output-power-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/output-power-lower"
func (n *Component_Transceiver_ThresholdPath) OutputPowerLower() *Component_Transceiver_Threshold_OutputPowerLowerPath {
	ps := &Component_Transceiver_Threshold_OutputPowerLowerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "output-power-lower"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutputPowerLower (leaf): The lower power threshold for the laser output power. This threshold
// applies to every physical-channel on the transceiver and does not
// apply to the aggregate transceiver optical-output-power. This leaf
// value is compared to the instant value of optical-output-power.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/output-power-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/output-power-lower"
func (n *Component_Transceiver_ThresholdPathAny) OutputPowerLower() *Component_Transceiver_Threshold_OutputPowerLowerPathAny {
	ps := &Component_Transceiver_Threshold_OutputPowerLowerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "output-power-lower"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutputPowerUpper (leaf): The upper power threshold for the laser output power. This threshold
// applies to every physical-channel on the transceiver and does not
// apply to the aggregate transceiver optical-output-power. This leaf
// value is compared to the instant value of optical-output-power.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/output-power-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/output-power-upper"
func (n *Component_Transceiver_ThresholdPath) OutputPowerUpper() *Component_Transceiver_Threshold_OutputPowerUpperPath {
	ps := &Component_Transceiver_Threshold_OutputPowerUpperPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "output-power-upper"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutputPowerUpper (leaf): The upper power threshold for the laser output power. This threshold
// applies to every physical-channel on the transceiver and does not
// apply to the aggregate transceiver optical-output-power. This leaf
// value is compared to the instant value of optical-output-power.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/output-power-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/output-power-upper"
func (n *Component_Transceiver_ThresholdPathAny) OutputPowerUpper() *Component_Transceiver_Threshold_OutputPowerUpperPathAny {
	ps := &Component_Transceiver_Threshold_OutputPowerUpperPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "output-power-upper"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Severity (leaf): The type of alarm to which the thresholds apply.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/severity"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/*/severity"
func (n *Component_Transceiver_ThresholdPath) Severity() *Component_Transceiver_Threshold_SeverityPath {
	ps := &Component_Transceiver_Threshold_SeverityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "severity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Severity (leaf): The type of alarm to which the thresholds apply.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/severity"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/*/severity"
func (n *Component_Transceiver_ThresholdPathAny) Severity() *Component_Transceiver_Threshold_SeverityPathAny {
	ps := &Component_Transceiver_Threshold_SeverityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "severity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SupplyVoltageLower (leaf): The lower threshold for the transceiver supply voltage. This leaf
// value is compared to the instant value of supply-voltage.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/supply-voltage-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/supply-voltage-lower"
func (n *Component_Transceiver_ThresholdPath) SupplyVoltageLower() *Component_Transceiver_Threshold_SupplyVoltageLowerPath {
	ps := &Component_Transceiver_Threshold_SupplyVoltageLowerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "supply-voltage-lower"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SupplyVoltageLower (leaf): The lower threshold for the transceiver supply voltage. This leaf
// value is compared to the instant value of supply-voltage.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/supply-voltage-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/supply-voltage-lower"
func (n *Component_Transceiver_ThresholdPathAny) SupplyVoltageLower() *Component_Transceiver_Threshold_SupplyVoltageLowerPathAny {
	ps := &Component_Transceiver_Threshold_SupplyVoltageLowerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "supply-voltage-lower"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SupplyVoltageUpper (leaf): The upper threshold for the transceiver supply voltage. This leaf
// value is compared to the instant value of supply-voltage.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/supply-voltage-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/supply-voltage-upper"
func (n *Component_Transceiver_ThresholdPath) SupplyVoltageUpper() *Component_Transceiver_Threshold_SupplyVoltageUpperPath {
	ps := &Component_Transceiver_Threshold_SupplyVoltageUpperPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "supply-voltage-upper"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SupplyVoltageUpper (leaf): The upper threshold for the transceiver supply voltage. This leaf
// value is compared to the instant value of supply-voltage.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/supply-voltage-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/supply-voltage-upper"
func (n *Component_Transceiver_ThresholdPathAny) SupplyVoltageUpper() *Component_Transceiver_Threshold_SupplyVoltageUpperPathAny {
	ps := &Component_Transceiver_Threshold_SupplyVoltageUpperPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "supply-voltage-upper"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_ThresholdPath) State() ygnmi.SingletonQuery[*oc.Component_Transceiver_Threshold] {
	return ygnmi.NewSingletonQuery[*oc.Component_Transceiver_Threshold](
		"Component_Transceiver_Threshold",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_ThresholdPathAny) State() ygnmi.WildcardQuery[*oc.Component_Transceiver_Threshold] {
	return ygnmi.NewWildcardQuery[*oc.Component_Transceiver_Threshold](
		"Component_Transceiver_Threshold",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_ThresholdPathMap) State() ygnmi.SingletonQuery[map[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY]*oc.Component_Transceiver_Threshold] {
	return ygnmi.NewSingletonQuery[map[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY]*oc.Component_Transceiver_Threshold](
		"Component_Transceiver",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY]*oc.Component_Transceiver_Threshold, bool) {
			ret := gs.(*oc.Component_Transceiver).Threshold
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-transceiver:thresholds"},
			PostRelPath: []string{"openconfig-platform-transceiver:threshold"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_ThresholdPathMapAny) State() ygnmi.WildcardQuery[map[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY]*oc.Component_Transceiver_Threshold] {
	return ygnmi.NewWildcardQuery[map[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY]*oc.Component_Transceiver_Threshold](
		"Component_Transceiver",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY]*oc.Component_Transceiver_Threshold, bool) {
			ret := gs.(*oc.Component_Transceiver).Threshold
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-transceiver:thresholds"},
			PostRelPath: []string{"openconfig-platform-transceiver:threshold"},
		},
	)
}

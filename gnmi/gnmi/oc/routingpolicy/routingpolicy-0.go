/*
Package routingpolicy is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.20)
using the following YANG input files:
  - gnmi-collector-metadata.yang
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-common.yang
  - public/release/models/aft/openconfig-aft-ethernet.yang
  - public/release/models/aft/openconfig-aft-ipv4.yang
  - public/release/models/aft/openconfig-aft-ipv6.yang
  - public/release/models/aft/openconfig-aft-mpls.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-pf.yang
  - public/release/models/aft/openconfig-aft-state-synced.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft-types.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/ate/openconfig-ate-flow.yang
  - public/release/models/ate/openconfig-ate-intf.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/interfaces/openconfig-if-rates.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-terminal-device.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-pf-forwarding-policies.yang
  - public/release/models/policy-forwarding/openconfig-pf-interfaces.yang
  - public/release/models/policy-forwarding/openconfig-pf-path-groups.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-routing-policy.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package routingpolicy

import (
	"reflect"

	oc "github.com/openconfig/ondatra/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// RoutingPolicyPath represents the /openconfig-routing-policy/routing-policy YANG schema element.
type RoutingPolicyPath struct {
	*ygnmi.NodePath
}

// RoutingPolicyPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy YANG schema element.
type RoutingPolicyPathAny struct {
	*ygnmi.NodePath
}

// DefinedSets (container): Predefined sets of attributes used in policy match
// statements
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "defined-sets"
//	Path from root:       "/routing-policy/defined-sets"
func (n *RoutingPolicyPath) DefinedSets() *RoutingPolicy_DefinedSetsPath {
	ps := &RoutingPolicy_DefinedSetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"defined-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DefinedSets (container): Predefined sets of attributes used in policy match
// statements
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "defined-sets"
//	Path from root:       "/routing-policy/defined-sets"
func (n *RoutingPolicyPathAny) DefinedSets() *RoutingPolicy_DefinedSetsPathAny {
	ps := &RoutingPolicy_DefinedSetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"defined-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PolicyDefinitionAny (list): List of top-level policy definitions, keyed by unique
// name.  These policy definitions are expected to be
// referenced (by name) in policy chains specified in import
// or export configuration statements.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "policy-definitions/policy-definition"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition"
func (n *RoutingPolicyPath) PolicyDefinitionAny() *RoutingPolicy_PolicyDefinitionPathAny {
	ps := &RoutingPolicy_PolicyDefinitionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"policy-definitions", "policy-definition"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// PolicyDefinitionAny (list): List of top-level policy definitions, keyed by unique
// name.  These policy definitions are expected to be
// referenced (by name) in policy chains specified in import
// or export configuration statements.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "policy-definitions/policy-definition"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition"
func (n *RoutingPolicyPathAny) PolicyDefinitionAny() *RoutingPolicy_PolicyDefinitionPathAny {
	ps := &RoutingPolicy_PolicyDefinitionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"policy-definitions", "policy-definition"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// PolicyDefinition (list): List of top-level policy definitions, keyed by unique
// name.  These policy definitions are expected to be
// referenced (by name) in policy chains specified in import
// or export configuration statements.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "policy-definitions/policy-definition"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition"
//
//	Name: string
func (n *RoutingPolicyPath) PolicyDefinition(Name string) *RoutingPolicy_PolicyDefinitionPath {
	ps := &RoutingPolicy_PolicyDefinitionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"policy-definitions", "policy-definition"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// PolicyDefinition (list): List of top-level policy definitions, keyed by unique
// name.  These policy definitions are expected to be
// referenced (by name) in policy chains specified in import
// or export configuration statements.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "policy-definitions/policy-definition"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition"
//
//	Name: string
func (n *RoutingPolicyPathAny) PolicyDefinition(Name string) *RoutingPolicy_PolicyDefinitionPathAny {
	ps := &RoutingPolicy_PolicyDefinitionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"policy-definitions", "policy-definition"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// PolicyDefinitionMap (list): List of top-level policy definitions, keyed by unique
// name.  These policy definitions are expected to be
// referenced (by name) in policy chains specified in import
// or export configuration statements.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "policy-definitions/policy-definition"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition"
func (n *RoutingPolicyPath) PolicyDefinitionMap() *RoutingPolicy_PolicyDefinitionPathMap {
	ps := &RoutingPolicy_PolicyDefinitionPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"policy-definitions"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PolicyDefinitionMap (list): List of top-level policy definitions, keyed by unique
// name.  These policy definitions are expected to be
// referenced (by name) in policy chains specified in import
// or export configuration statements.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "policy-definitions/policy-definition"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition"
func (n *RoutingPolicyPathAny) PolicyDefinitionMap() *RoutingPolicy_PolicyDefinitionPathMapAny {
	ps := &RoutingPolicy_PolicyDefinitionPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"policy-definitions"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicyPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy](
		"RoutingPolicy",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicyPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy](
		"RoutingPolicy",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicyPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy](
		"RoutingPolicy",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicyPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy](
		"RoutingPolicy",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_DefinedSetsPath represents the /openconfig-routing-policy/routing-policy/defined-sets YANG schema element.
type RoutingPolicy_DefinedSetsPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSetsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets YANG schema element.
type RoutingPolicy_DefinedSetsPathAny struct {
	*ygnmi.NodePath
}

// BgpDefinedSets (container): BGP-related set definitions for policy match conditions
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "bgp-defined-sets"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets"
func (n *RoutingPolicy_DefinedSetsPath) BgpDefinedSets() *RoutingPolicy_DefinedSets_BgpDefinedSetsPath {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bgp-defined-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// BgpDefinedSets (container): BGP-related set definitions for policy match conditions
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "bgp-defined-sets"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets"
func (n *RoutingPolicy_DefinedSetsPathAny) BgpDefinedSets() *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bgp-defined-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NeighborSetAny (list): List of defined neighbor sets for use in policies.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "neighbor-sets/neighbor-set"
//	Path from root:       "/routing-policy/defined-sets/neighbor-sets/neighbor-set"
func (n *RoutingPolicy_DefinedSetsPath) NeighborSetAny() *RoutingPolicy_DefinedSets_NeighborSetPathAny {
	ps := &RoutingPolicy_DefinedSets_NeighborSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbor-sets", "neighbor-set"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// NeighborSetAny (list): List of defined neighbor sets for use in policies.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "neighbor-sets/neighbor-set"
//	Path from root:       "/routing-policy/defined-sets/neighbor-sets/neighbor-set"
func (n *RoutingPolicy_DefinedSetsPathAny) NeighborSetAny() *RoutingPolicy_DefinedSets_NeighborSetPathAny {
	ps := &RoutingPolicy_DefinedSets_NeighborSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbor-sets", "neighbor-set"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// NeighborSet (list): List of defined neighbor sets for use in policies.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "neighbor-sets/neighbor-set"
//	Path from root:       "/routing-policy/defined-sets/neighbor-sets/neighbor-set"
//
//	Name: string
func (n *RoutingPolicy_DefinedSetsPath) NeighborSet(Name string) *RoutingPolicy_DefinedSets_NeighborSetPath {
	ps := &RoutingPolicy_DefinedSets_NeighborSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbor-sets", "neighbor-set"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// NeighborSet (list): List of defined neighbor sets for use in policies.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "neighbor-sets/neighbor-set"
//	Path from root:       "/routing-policy/defined-sets/neighbor-sets/neighbor-set"
//
//	Name: string
func (n *RoutingPolicy_DefinedSetsPathAny) NeighborSet(Name string) *RoutingPolicy_DefinedSets_NeighborSetPathAny {
	ps := &RoutingPolicy_DefinedSets_NeighborSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbor-sets", "neighbor-set"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// NeighborSetMap (list): List of defined neighbor sets for use in policies.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "neighbor-sets/neighbor-set"
//	Path from root:       "/routing-policy/defined-sets/neighbor-sets/neighbor-set"
func (n *RoutingPolicy_DefinedSetsPath) NeighborSetMap() *RoutingPolicy_DefinedSets_NeighborSetPathMap {
	ps := &RoutingPolicy_DefinedSets_NeighborSetPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbor-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NeighborSetMap (list): List of defined neighbor sets for use in policies.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "neighbor-sets/neighbor-set"
//	Path from root:       "/routing-policy/defined-sets/neighbor-sets/neighbor-set"
func (n *RoutingPolicy_DefinedSetsPathAny) NeighborSetMap() *RoutingPolicy_DefinedSets_NeighborSetPathMapAny {
	ps := &RoutingPolicy_DefinedSets_NeighborSetPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbor-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PrefixSetAny (list): List of the defined prefix sets
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "prefix-sets/prefix-set"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set"
func (n *RoutingPolicy_DefinedSetsPath) PrefixSetAny() *RoutingPolicy_DefinedSets_PrefixSetPathAny {
	ps := &RoutingPolicy_DefinedSets_PrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-sets", "prefix-set"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// PrefixSetAny (list): List of the defined prefix sets
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "prefix-sets/prefix-set"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set"
func (n *RoutingPolicy_DefinedSetsPathAny) PrefixSetAny() *RoutingPolicy_DefinedSets_PrefixSetPathAny {
	ps := &RoutingPolicy_DefinedSets_PrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-sets", "prefix-set"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// PrefixSet (list): List of the defined prefix sets
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "prefix-sets/prefix-set"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set"
//
//	Name: string
func (n *RoutingPolicy_DefinedSetsPath) PrefixSet(Name string) *RoutingPolicy_DefinedSets_PrefixSetPath {
	ps := &RoutingPolicy_DefinedSets_PrefixSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-sets", "prefix-set"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// PrefixSet (list): List of the defined prefix sets
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "prefix-sets/prefix-set"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set"
//
//	Name: string
func (n *RoutingPolicy_DefinedSetsPathAny) PrefixSet(Name string) *RoutingPolicy_DefinedSets_PrefixSetPathAny {
	ps := &RoutingPolicy_DefinedSets_PrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-sets", "prefix-set"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// PrefixSetMap (list): List of the defined prefix sets
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "prefix-sets/prefix-set"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set"
func (n *RoutingPolicy_DefinedSetsPath) PrefixSetMap() *RoutingPolicy_DefinedSets_PrefixSetPathMap {
	ps := &RoutingPolicy_DefinedSets_PrefixSetPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PrefixSetMap (list): List of the defined prefix sets
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "prefix-sets/prefix-set"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set"
func (n *RoutingPolicy_DefinedSetsPathAny) PrefixSetMap() *RoutingPolicy_DefinedSets_PrefixSetPathMapAny {
	ps := &RoutingPolicy_DefinedSets_PrefixSetPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TagSetAny (list): List of tag set definitions.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "tag-sets/tag-set"
//	Path from root:       "/routing-policy/defined-sets/tag-sets/tag-set"
func (n *RoutingPolicy_DefinedSetsPath) TagSetAny() *RoutingPolicy_DefinedSets_TagSetPathAny {
	ps := &RoutingPolicy_DefinedSets_TagSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tag-sets", "tag-set"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// TagSetAny (list): List of tag set definitions.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "tag-sets/tag-set"
//	Path from root:       "/routing-policy/defined-sets/tag-sets/tag-set"
func (n *RoutingPolicy_DefinedSetsPathAny) TagSetAny() *RoutingPolicy_DefinedSets_TagSetPathAny {
	ps := &RoutingPolicy_DefinedSets_TagSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tag-sets", "tag-set"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// TagSet (list): List of tag set definitions.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "tag-sets/tag-set"
//	Path from root:       "/routing-policy/defined-sets/tag-sets/tag-set"
//
//	Name: string
func (n *RoutingPolicy_DefinedSetsPath) TagSet(Name string) *RoutingPolicy_DefinedSets_TagSetPath {
	ps := &RoutingPolicy_DefinedSets_TagSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"tag-sets", "tag-set"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// TagSet (list): List of tag set definitions.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "tag-sets/tag-set"
//	Path from root:       "/routing-policy/defined-sets/tag-sets/tag-set"
//
//	Name: string
func (n *RoutingPolicy_DefinedSetsPathAny) TagSet(Name string) *RoutingPolicy_DefinedSets_TagSetPathAny {
	ps := &RoutingPolicy_DefinedSets_TagSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tag-sets", "tag-set"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// TagSetMap (list): List of tag set definitions.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "tag-sets/tag-set"
//	Path from root:       "/routing-policy/defined-sets/tag-sets/tag-set"
func (n *RoutingPolicy_DefinedSetsPath) TagSetMap() *RoutingPolicy_DefinedSets_TagSetPathMap {
	ps := &RoutingPolicy_DefinedSets_TagSetPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"tag-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TagSetMap (list): List of tag set definitions.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "tag-sets/tag-set"
//	Path from root:       "/routing-policy/defined-sets/tag-sets/tag-set"
func (n *RoutingPolicy_DefinedSetsPathAny) TagSetMap() *RoutingPolicy_DefinedSets_TagSetPathMapAny {
	ps := &RoutingPolicy_DefinedSets_TagSetPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tag-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSetsPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_DefinedSets] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_DefinedSets](
		"RoutingPolicy_DefinedSets",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSetsPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_DefinedSets] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_DefinedSets](
		"RoutingPolicy_DefinedSets",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSetsPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_DefinedSets] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_DefinedSets](
		"RoutingPolicy_DefinedSets",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSetsPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_DefinedSets] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_DefinedSets](
		"RoutingPolicy_DefinedSets",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_DefinedSets_BgpDefinedSetsPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSetsPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny struct {
	*ygnmi.NodePath
}

// AsPathSetAny (list): List of defined AS path sets
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "as-path-sets/as-path-set"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPath) AsPathSetAny() *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"as-path-sets", "as-path-set"},
			map[string]interface{}{"as-path-set-name": "*"},
			n,
		),
	}
	return ps
}

// AsPathSetAny (list): List of defined AS path sets
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "as-path-sets/as-path-set"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny) AsPathSetAny() *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"as-path-sets", "as-path-set"},
			map[string]interface{}{"as-path-set-name": "*"},
			n,
		),
	}
	return ps
}

// AsPathSet (list): List of defined AS path sets
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "as-path-sets/as-path-set"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set"
//
//	AsPathSetName: string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPath) AsPathSet(AsPathSetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPath {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"as-path-sets", "as-path-set"},
			map[string]interface{}{"as-path-set-name": AsPathSetName},
			n,
		),
	}
	return ps
}

// AsPathSet (list): List of defined AS path sets
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "as-path-sets/as-path-set"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set"
//
//	AsPathSetName: string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny) AsPathSet(AsPathSetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"as-path-sets", "as-path-set"},
			map[string]interface{}{"as-path-set-name": AsPathSetName},
			n,
		),
	}
	return ps
}

// AsPathSetMap (list): List of defined AS path sets
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "as-path-sets/as-path-set"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPath) AsPathSetMap() *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathMap {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"as-path-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AsPathSetMap (list): List of defined AS path sets
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "as-path-sets/as-path-set"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny) AsPathSetMap() *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathMapAny {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"as-path-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// CommunitySetAny (list): List of defined BGP community sets
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "community-sets/community-set"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPath) CommunitySetAny() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"community-sets", "community-set"},
			map[string]interface{}{"community-set-name": "*"},
			n,
		),
	}
	return ps
}

// CommunitySetAny (list): List of defined BGP community sets
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "community-sets/community-set"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny) CommunitySetAny() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"community-sets", "community-set"},
			map[string]interface{}{"community-set-name": "*"},
			n,
		),
	}
	return ps
}

// CommunitySet (list): List of defined BGP community sets
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "community-sets/community-set"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set"
//
//	CommunitySetName: string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPath) CommunitySet(CommunitySetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPath {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"community-sets", "community-set"},
			map[string]interface{}{"community-set-name": CommunitySetName},
			n,
		),
	}
	return ps
}

// CommunitySet (list): List of defined BGP community sets
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "community-sets/community-set"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set"
//
//	CommunitySetName: string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny) CommunitySet(CommunitySetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"community-sets", "community-set"},
			map[string]interface{}{"community-set-name": CommunitySetName},
			n,
		),
	}
	return ps
}

// CommunitySetMap (list): List of defined BGP community sets
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "community-sets/community-set"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPath) CommunitySetMap() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathMap {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"community-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// CommunitySetMap (list): List of defined BGP community sets
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "community-sets/community-set"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny) CommunitySetMap() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathMapAny {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"community-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ExtCommunitySetAny (list): List of defined extended BGP community sets
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "ext-community-sets/ext-community-set"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPath) ExtCommunitySetAny() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ext-community-sets", "ext-community-set"},
			map[string]interface{}{"ext-community-set-name": "*"},
			n,
		),
	}
	return ps
}

// ExtCommunitySetAny (list): List of defined extended BGP community sets
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "ext-community-sets/ext-community-set"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny) ExtCommunitySetAny() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ext-community-sets", "ext-community-set"},
			map[string]interface{}{"ext-community-set-name": "*"},
			n,
		),
	}
	return ps
}

// ExtCommunitySet (list): List of defined extended BGP community sets
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "ext-community-sets/ext-community-set"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set"
//
//	ExtCommunitySetName: string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPath) ExtCommunitySet(ExtCommunitySetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPath {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ext-community-sets", "ext-community-set"},
			map[string]interface{}{"ext-community-set-name": ExtCommunitySetName},
			n,
		),
	}
	return ps
}

// ExtCommunitySet (list): List of defined extended BGP community sets
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "ext-community-sets/ext-community-set"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set"
//
//	ExtCommunitySetName: string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny) ExtCommunitySet(ExtCommunitySetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ext-community-sets", "ext-community-set"},
			map[string]interface{}{"ext-community-set-name": ExtCommunitySetName},
			n,
		),
	}
	return ps
}

// ExtCommunitySetMap (list): List of defined extended BGP community sets
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "ext-community-sets/ext-community-set"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPath) ExtCommunitySetMap() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathMap {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"ext-community-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ExtCommunitySetMap (list): List of defined extended BGP community sets
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "ext-community-sets/ext-community-set"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny) ExtCommunitySetMap() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathMapAny {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ext-community-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets](
		"RoutingPolicy_DefinedSets_BgpDefinedSets",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets](
		"RoutingPolicy_DefinedSets_BgpDefinedSets",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets](
		"RoutingPolicy_DefinedSets_BgpDefinedSets",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets](
		"RoutingPolicy_DefinedSets_BgpDefinedSets",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/state/as-path-set-member YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/state/as-path-set-member YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/as-path-set-member"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/state/as-path-set-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "as-path-set-member"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet).AsPathSetMember
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/as-path-set-member"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/state/as-path-set-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "as-path-set-member"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet).AsPathSetMember
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/as-path-set-member"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/config/as-path-set-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "as-path-set-member"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet).AsPathSetMember
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/as-path-set-member"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/config/as-path-set-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "as-path-set-member"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet).AsPathSetMember
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/state/as-path-set-name YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/state/as-path-set-name YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/as-path-set-name"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/state/as-path-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "as-path-set-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet).AsPathSetName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/as-path-set-name"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/state/as-path-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "as-path-set-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet).AsPathSetName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/as-path-set-name"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/config/as-path-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "as-path-set-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet).AsPathSetName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/as-path-set-name"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/config/as-path-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "as-path-set-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet).AsPathSetName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathMap represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathMap struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathMapAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathMapAny struct {
	*ygnmi.NodePath
}

// AsPathSetMember (leaf-list): AS path expression -- list of ASes in the set
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/as-path-set-member"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/*/as-path-set-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPath) AsPathSetMember() *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPath {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "as-path-set-member"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AsPathSetMember (leaf-list): AS path expression -- list of ASes in the set
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/as-path-set-member"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/*/as-path-set-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny) AsPathSetMember() *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPathAny {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "as-path-set-member"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AsPathSetName (leaf): name of the AS path set -- this is used to reference
// the set in match conditions
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/as-path-set-name"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/*/as-path-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPath) AsPathSetName() *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePath {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "as-path-set-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AsPathSetName (leaf): name of the AS path set -- this is used to reference
// the set in match conditions
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/as-path-set-name"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/*/as-path-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny) AsPathSetName() *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePathAny {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "as-path-set-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathMap) State() ygnmi.SingletonQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet] {
	return ygnmi.NewSingletonQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets).AsPathSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-bgp-policy:as-path-sets"},
			PostRelPath: []string{"openconfig-bgp-policy:as-path-set"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet] {
	return ygnmi.NewWildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets).AsPathSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-bgp-policy:as-path-sets"},
			PostRelPath: []string{"openconfig-bgp-policy:as-path-set"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet] {
	return ygnmi.NewConfigQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets).AsPathSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-bgp-policy:as-path-sets"},
			PostRelPath: []string{"openconfig-bgp-policy:as-path-set"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet] {
	return ygnmi.NewWildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets).AsPathSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-bgp-policy:as-path-sets"},
			PostRelPath: []string{"openconfig-bgp-policy:as-path-set"},
		},
	)
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/community-member YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/community-member YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/community-member"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/community-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPath) State() ygnmi.SingletonQuery[[]oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMember_Union] {
	return ygnmi.NewSingletonQuery[[]oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMember_Union](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "community-member"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMember_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet).CommunityMember
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/community-member"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/community-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPathAny) State() ygnmi.WildcardQuery[[]oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMember_Union] {
	return ygnmi.NewWildcardQuery[[]oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMember_Union](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "community-member"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMember_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet).CommunityMember
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/community-member"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/config/community-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPath) Config() ygnmi.ConfigQuery[[]oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMember_Union] {
	return ygnmi.NewConfigQuery[[]oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMember_Union](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "community-member"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMember_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet).CommunityMember
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/community-member"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/config/community-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPathAny) Config() ygnmi.WildcardQuery[[]oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMember_Union] {
	return ygnmi.NewWildcardQuery[[]oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMember_Union](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "community-member"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMember_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet).CommunityMember
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/community-set-name YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/community-set-name YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/community-set-name"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/community-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "community-set-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet).CommunitySetName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/community-set-name"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/community-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "community-set-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet).CommunitySetName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/community-set-name"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/config/community-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "community-set-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet).CommunitySetName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/community-set-name"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/config/community-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "community-set-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet).CommunitySetName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/match-set-options YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/match-set-options YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/match-set-options"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/match-set-options"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPath) State() ygnmi.SingletonQuery[oc.E_BgpPolicy_MatchSetOptionsType] {
	return ygnmi.NewSingletonQuery[oc.E_BgpPolicy_MatchSetOptionsType](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpPolicy_MatchSetOptionsType, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/match-set-options"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/match-set-options"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPathAny) State() ygnmi.WildcardQuery[oc.E_BgpPolicy_MatchSetOptionsType] {
	return ygnmi.NewWildcardQuery[oc.E_BgpPolicy_MatchSetOptionsType](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpPolicy_MatchSetOptionsType, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/match-set-options"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/config/match-set-options"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPath) Config() ygnmi.ConfigQuery[oc.E_BgpPolicy_MatchSetOptionsType] {
	return ygnmi.NewConfigQuery[oc.E_BgpPolicy_MatchSetOptionsType](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpPolicy_MatchSetOptionsType, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/match-set-options"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/config/match-set-options"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPathAny) Config() ygnmi.WildcardQuery[oc.E_BgpPolicy_MatchSetOptionsType] {
	return ygnmi.NewWildcardQuery[oc.E_BgpPolicy_MatchSetOptionsType](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpPolicy_MatchSetOptionsType, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathMap represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathMap struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathMapAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathMapAny struct {
	*ygnmi.NodePath
}

// CommunityMember (leaf-list): Members of the community set.
// For an ADD operation these are the communities that will be
// added.  The regexp type is not valid in this operation.
//
// For REMOVE or REPLACE operations then matching communities will
// be removed unless match-set-options is INVERT which will
// reverse this to mean that anything that does not match will be
// removed.
//
// For MATCH operations the posix-eregexp type should be evaluated
// against each community associated with a prefix one community
// at a time.  Communities must be represented as strings in formats
// conforming to oc-bgp-types:bgp-std-community-type.  For example:
// `1000:1000` for a standard community
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/community-member"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/*/community-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPath) CommunityMember() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPath {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "community-member"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CommunityMember (leaf-list): Members of the community set.
// For an ADD operation these are the communities that will be
// added.  The regexp type is not valid in this operation.
//
// For REMOVE or REPLACE operations then matching communities will
// be removed unless match-set-options is INVERT which will
// reverse this to mean that anything that does not match will be
// removed.
//
// For MATCH operations the posix-eregexp type should be evaluated
// against each community associated with a prefix one community
// at a time.  Communities must be represented as strings in formats
// conforming to oc-bgp-types:bgp-std-community-type.  For example:
// `1000:1000` for a standard community
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/community-member"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/*/community-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny) CommunityMember() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPathAny {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "community-member"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CommunitySetName (leaf): name / label of the community set -- this is used to
// reference the set in match conditions
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/community-set-name"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/*/community-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPath) CommunitySetName() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePath {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "community-set-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CommunitySetName (leaf): name / label of the community set -- this is used to
// reference the set in match conditions
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/community-set-name"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/*/community-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny) CommunitySetName() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePathAny {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "community-set-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/match-set-options"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/*/match-set-options"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPath) MatchSetOptions() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPath {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "match-set-options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/match-set-options"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/*/match-set-options"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny) MatchSetOptions() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPathAny {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "match-set-options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathMap) State() ygnmi.SingletonQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet] {
	return ygnmi.NewSingletonQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets).CommunitySet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-bgp-policy:community-sets"},
			PostRelPath: []string{"openconfig-bgp-policy:community-set"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet] {
	return ygnmi.NewWildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets).CommunitySet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-bgp-policy:community-sets"},
			PostRelPath: []string{"openconfig-bgp-policy:community-set"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet] {
	return ygnmi.NewConfigQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets).CommunitySet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-bgp-policy:community-sets"},
			PostRelPath: []string{"openconfig-bgp-policy:community-set"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet] {
	return ygnmi.NewWildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets).CommunitySet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-bgp-policy:community-sets"},
			PostRelPath: []string{"openconfig-bgp-policy:community-set"},
		},
	)
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/ext-community-member YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/ext-community-member YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/ext-community-member"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/ext-community-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ext-community-member"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet).ExtCommunityMember
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/ext-community-member"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/ext-community-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ext-community-member"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet).ExtCommunityMember
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/ext-community-member"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/config/ext-community-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ext-community-member"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet).ExtCommunityMember
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/ext-community-member"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/config/ext-community-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ext-community-member"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet).ExtCommunityMember
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/ext-community-set-name YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/ext-community-set-name YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/ext-community-set-name"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/ext-community-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ext-community-set-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet).ExtCommunitySetName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/ext-community-set-name"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/ext-community-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ext-community-set-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet).ExtCommunitySetName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/ext-community-set-name"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/config/ext-community-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ext-community-set-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet).ExtCommunitySetName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/ext-community-set-name"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/config/ext-community-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ext-community-set-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet).ExtCommunitySetName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/match-set-options YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/match-set-options YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/match-set-options"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/match-set-options"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPath) State() ygnmi.SingletonQuery[oc.E_BgpPolicy_MatchSetOptionsType] {
	return ygnmi.NewSingletonQuery[oc.E_BgpPolicy_MatchSetOptionsType](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpPolicy_MatchSetOptionsType, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/match-set-options"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/match-set-options"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPathAny) State() ygnmi.WildcardQuery[oc.E_BgpPolicy_MatchSetOptionsType] {
	return ygnmi.NewWildcardQuery[oc.E_BgpPolicy_MatchSetOptionsType](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpPolicy_MatchSetOptionsType, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/match-set-options"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/config/match-set-options"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPath) Config() ygnmi.ConfigQuery[oc.E_BgpPolicy_MatchSetOptionsType] {
	return ygnmi.NewConfigQuery[oc.E_BgpPolicy_MatchSetOptionsType](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpPolicy_MatchSetOptionsType, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/match-set-options"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/config/match-set-options"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPathAny) Config() ygnmi.WildcardQuery[oc.E_BgpPolicy_MatchSetOptionsType] {
	return ygnmi.NewWildcardQuery[oc.E_BgpPolicy_MatchSetOptionsType](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpPolicy_MatchSetOptionsType, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathMap represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathMap struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathMapAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathMapAny struct {
	*ygnmi.NodePath
}

// ExtCommunityMember (leaf-list): Members of the extended community set.
// For an ADD operation these are the communities that will be added;
// the regexp type is not valid in this operation.
//
// For REMOVE or REPLACE operations then matching communities will
// be removed unless match-set-options is INVERT which will
// reverse this to mean that anything that does not match will be
// removed.
//
// For MATCH operations the posix-eregexp type should be evaluated
// against each community associated with a prefix one community
// at a time.  Communities must be represented as strings in formats
// conforming to oc-bgp-types:bgp-ext-community-type.  For example:
// `route-origin:1000:1000` for the origin type extended community,
// and so on.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/ext-community-member"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/*/ext-community-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPath) ExtCommunityMember() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPath {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ext-community-member"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExtCommunityMember (leaf-list): Members of the extended community set.
// For an ADD operation these are the communities that will be added;
// the regexp type is not valid in this operation.
//
// For REMOVE or REPLACE operations then matching communities will
// be removed unless match-set-options is INVERT which will
// reverse this to mean that anything that does not match will be
// removed.
//
// For MATCH operations the posix-eregexp type should be evaluated
// against each community associated with a prefix one community
// at a time.  Communities must be represented as strings in formats
// conforming to oc-bgp-types:bgp-ext-community-type.  For example:
// `route-origin:1000:1000` for the origin type extended community,
// and so on.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/ext-community-member"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/*/ext-community-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny) ExtCommunityMember() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPathAny {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ext-community-member"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExtCommunitySetName (leaf): name / label of the extended community set -- this is
// used to reference the set in match conditions
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/ext-community-set-name"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/*/ext-community-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPath) ExtCommunitySetName() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePath {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ext-community-set-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExtCommunitySetName (leaf): name / label of the extended community set -- this is
// used to reference the set in match conditions
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/ext-community-set-name"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/*/ext-community-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny) ExtCommunitySetName() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePathAny {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ext-community-set-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/match-set-options"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/*/match-set-options"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPath) MatchSetOptions() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPath {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "match-set-options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/match-set-options"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/*/match-set-options"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny) MatchSetOptions() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPathAny {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "match-set-options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathMap) State() ygnmi.SingletonQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet] {
	return ygnmi.NewSingletonQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets).ExtCommunitySet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-bgp-policy:ext-community-sets"},
			PostRelPath: []string{"openconfig-bgp-policy:ext-community-set"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet] {
	return ygnmi.NewWildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets).ExtCommunitySet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-bgp-policy:ext-community-sets"},
			PostRelPath: []string{"openconfig-bgp-policy:ext-community-set"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet] {
	return ygnmi.NewConfigQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets).ExtCommunitySet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-bgp-policy:ext-community-sets"},
			PostRelPath: []string{"openconfig-bgp-policy:ext-community-set"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet] {
	return ygnmi.NewWildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets).ExtCommunitySet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-bgp-policy:ext-community-sets"},
			PostRelPath: []string{"openconfig-bgp-policy:ext-community-set"},
		},
	)
}

// RoutingPolicy_DefinedSets_NeighborSet_AddressPath represents the /openconfig-routing-policy/routing-policy/defined-sets/neighbor-sets/neighbor-set/state/address YANG schema element.
type RoutingPolicy_DefinedSets_NeighborSet_AddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_DefinedSets_NeighborSet_AddressPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/neighbor-sets/neighbor-set/state/address YANG schema element.
type RoutingPolicy_DefinedSets_NeighborSet_AddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/address"
//	Path from root:       "/routing-policy/defined-sets/neighbor-sets/neighbor-set/state/address"
func (n *RoutingPolicy_DefinedSets_NeighborSet_AddressPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"RoutingPolicy_DefinedSets_NeighborSet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_NeighborSet).Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_NeighborSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/address"
//	Path from root:       "/routing-policy/defined-sets/neighbor-sets/neighbor-set/state/address"
func (n *RoutingPolicy_DefinedSets_NeighborSet_AddressPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"RoutingPolicy_DefinedSets_NeighborSet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_NeighborSet).Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_NeighborSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/address"
//	Path from root:       "/routing-policy/defined-sets/neighbor-sets/neighbor-set/config/address"
func (n *RoutingPolicy_DefinedSets_NeighborSet_AddressPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"RoutingPolicy_DefinedSets_NeighborSet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_NeighborSet).Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_NeighborSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/address"
//	Path from root:       "/routing-policy/defined-sets/neighbor-sets/neighbor-set/config/address"
func (n *RoutingPolicy_DefinedSets_NeighborSet_AddressPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"RoutingPolicy_DefinedSets_NeighborSet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_NeighborSet).Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_NeighborSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_DefinedSets_NeighborSet_NamePath represents the /openconfig-routing-policy/routing-policy/defined-sets/neighbor-sets/neighbor-set/state/name YANG schema element.
type RoutingPolicy_DefinedSets_NeighborSet_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_DefinedSets_NeighborSet_NamePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/neighbor-sets/neighbor-set/state/name YANG schema element.
type RoutingPolicy_DefinedSets_NeighborSet_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/name"
//	Path from root:       "/routing-policy/defined-sets/neighbor-sets/neighbor-set/state/name"
func (n *RoutingPolicy_DefinedSets_NeighborSet_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RoutingPolicy_DefinedSets_NeighborSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_NeighborSet).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_NeighborSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/name"
//	Path from root:       "/routing-policy/defined-sets/neighbor-sets/neighbor-set/state/name"
func (n *RoutingPolicy_DefinedSets_NeighborSet_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_DefinedSets_NeighborSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_NeighborSet).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_NeighborSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/name"
//	Path from root:       "/routing-policy/defined-sets/neighbor-sets/neighbor-set/config/name"
func (n *RoutingPolicy_DefinedSets_NeighborSet_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RoutingPolicy_DefinedSets_NeighborSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_NeighborSet).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_NeighborSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/name"
//	Path from root:       "/routing-policy/defined-sets/neighbor-sets/neighbor-set/config/name"
func (n *RoutingPolicy_DefinedSets_NeighborSet_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_DefinedSets_NeighborSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_NeighborSet).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_NeighborSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_DefinedSets_NeighborSetPath represents the /openconfig-routing-policy/routing-policy/defined-sets/neighbor-sets/neighbor-set YANG schema element.
type RoutingPolicy_DefinedSets_NeighborSetPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_NeighborSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/neighbor-sets/neighbor-set YANG schema element.
type RoutingPolicy_DefinedSets_NeighborSetPathAny struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_NeighborSetPathMap represents the /openconfig-routing-policy/routing-policy/defined-sets/neighbor-sets/neighbor-set YANG schema element.
type RoutingPolicy_DefinedSets_NeighborSetPathMap struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_NeighborSetPathMapAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/neighbor-sets/neighbor-set YANG schema element.
type RoutingPolicy_DefinedSets_NeighborSetPathMapAny struct {
	*ygnmi.NodePath
}

// Address (leaf-list): List of IP addresses in the neighbor set
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/address"
//	Path from root:       "/routing-policy/defined-sets/neighbor-sets/neighbor-set/*/address"
func (n *RoutingPolicy_DefinedSets_NeighborSetPath) Address() *RoutingPolicy_DefinedSets_NeighborSet_AddressPath {
	ps := &RoutingPolicy_DefinedSets_NeighborSet_AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Address (leaf-list): List of IP addresses in the neighbor set
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/address"
//	Path from root:       "/routing-policy/defined-sets/neighbor-sets/neighbor-set/*/address"
func (n *RoutingPolicy_DefinedSets_NeighborSetPathAny) Address() *RoutingPolicy_DefinedSets_NeighborSet_AddressPathAny {
	ps := &RoutingPolicy_DefinedSets_NeighborSet_AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): name / label of the neighbor set -- this is used to
// reference the set in match conditions
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/name"
//	Path from root:       "/routing-policy/defined-sets/neighbor-sets/neighbor-set/*/name"
func (n *RoutingPolicy_DefinedSets_NeighborSetPath) Name() *RoutingPolicy_DefinedSets_NeighborSet_NamePath {
	ps := &RoutingPolicy_DefinedSets_NeighborSet_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): name / label of the neighbor set -- this is used to
// reference the set in match conditions
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/name"
//	Path from root:       "/routing-policy/defined-sets/neighbor-sets/neighbor-set/*/name"
func (n *RoutingPolicy_DefinedSets_NeighborSetPathAny) Name() *RoutingPolicy_DefinedSets_NeighborSet_NamePathAny {
	ps := &RoutingPolicy_DefinedSets_NeighborSet_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_NeighborSetPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_DefinedSets_NeighborSet] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_DefinedSets_NeighborSet](
		"RoutingPolicy_DefinedSets_NeighborSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_NeighborSetPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_DefinedSets_NeighborSet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_DefinedSets_NeighborSet](
		"RoutingPolicy_DefinedSets_NeighborSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_NeighborSetPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_DefinedSets_NeighborSet] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_DefinedSets_NeighborSet](
		"RoutingPolicy_DefinedSets_NeighborSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_NeighborSetPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_DefinedSets_NeighborSet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_DefinedSets_NeighborSet](
		"RoutingPolicy_DefinedSets_NeighborSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_NeighborSetPathMap) State() ygnmi.SingletonQuery[map[string]*oc.RoutingPolicy_DefinedSets_NeighborSet] {
	return ygnmi.NewSingletonQuery[map[string]*oc.RoutingPolicy_DefinedSets_NeighborSet](
		"RoutingPolicy_DefinedSets",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_NeighborSet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets).NeighborSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:neighbor-sets"},
			PostRelPath: []string{"openconfig-routing-policy:neighbor-set"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_NeighborSetPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_NeighborSet] {
	return ygnmi.NewWildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_NeighborSet](
		"RoutingPolicy_DefinedSets",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_NeighborSet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets).NeighborSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:neighbor-sets"},
			PostRelPath: []string{"openconfig-routing-policy:neighbor-set"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_NeighborSetPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.RoutingPolicy_DefinedSets_NeighborSet] {
	return ygnmi.NewConfigQuery[map[string]*oc.RoutingPolicy_DefinedSets_NeighborSet](
		"RoutingPolicy_DefinedSets",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_NeighborSet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets).NeighborSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:neighbor-sets"},
			PostRelPath: []string{"openconfig-routing-policy:neighbor-set"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_NeighborSetPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_NeighborSet] {
	return ygnmi.NewWildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_NeighborSet](
		"RoutingPolicy_DefinedSets",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_NeighborSet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets).NeighborSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:neighbor-sets"},
			PostRelPath: []string{"openconfig-routing-policy:neighbor-set"},
		},
	)
}

// RoutingPolicy_DefinedSets_PrefixSet_ModePath represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/state/mode YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_ModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_DefinedSets_PrefixSet_ModePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/state/mode YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_ModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/mode"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/state/mode"
func (n *RoutingPolicy_DefinedSets_PrefixSet_ModePath) State() ygnmi.SingletonQuery[oc.E_PrefixSet_Mode] {
	return ygnmi.NewSingletonQuery[oc.E_PrefixSet_Mode](
		"RoutingPolicy_DefinedSets_PrefixSet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PrefixSet_Mode, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_PrefixSet).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/mode"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/state/mode"
func (n *RoutingPolicy_DefinedSets_PrefixSet_ModePathAny) State() ygnmi.WildcardQuery[oc.E_PrefixSet_Mode] {
	return ygnmi.NewWildcardQuery[oc.E_PrefixSet_Mode](
		"RoutingPolicy_DefinedSets_PrefixSet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PrefixSet_Mode, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_PrefixSet).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/mode"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/config/mode"
func (n *RoutingPolicy_DefinedSets_PrefixSet_ModePath) Config() ygnmi.ConfigQuery[oc.E_PrefixSet_Mode] {
	return ygnmi.NewConfigQuery[oc.E_PrefixSet_Mode](
		"RoutingPolicy_DefinedSets_PrefixSet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PrefixSet_Mode, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_PrefixSet).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/mode"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/config/mode"
func (n *RoutingPolicy_DefinedSets_PrefixSet_ModePathAny) Config() ygnmi.WildcardQuery[oc.E_PrefixSet_Mode] {
	return ygnmi.NewWildcardQuery[oc.E_PrefixSet_Mode](
		"RoutingPolicy_DefinedSets_PrefixSet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PrefixSet_Mode, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_PrefixSet).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_DefinedSets_PrefixSet_NamePath represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/state/name YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_DefinedSets_PrefixSet_NamePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/state/name YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/name"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/state/name"
func (n *RoutingPolicy_DefinedSets_PrefixSet_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RoutingPolicy_DefinedSets_PrefixSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_PrefixSet).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/name"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/state/name"
func (n *RoutingPolicy_DefinedSets_PrefixSet_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_DefinedSets_PrefixSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_PrefixSet).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/name"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/config/name"
func (n *RoutingPolicy_DefinedSets_PrefixSet_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RoutingPolicy_DefinedSets_PrefixSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_PrefixSet).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/name"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/config/name"
func (n *RoutingPolicy_DefinedSets_PrefixSet_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_DefinedSets_PrefixSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_PrefixSet).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_DefinedSets_PrefixSetPath represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSetPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_PrefixSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSetPathAny struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_PrefixSetPathMap represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSetPathMap struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_PrefixSetPathMapAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSetPathMapAny struct {
	*ygnmi.NodePath
}

// Mode (leaf): Indicates the mode of the prefix set, in terms of which
// address families (IPv4, IPv6, or both) are present.  The
// mode provides a hint, but the device must validate that all
// prefixes are of the indicated type, and is expected to
// reject the configuration if there is a discrepancy.  The
// MIXED mode may not be supported on devices that require
// prefix sets to be of only one address family.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/mode"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/*/mode"
func (n *RoutingPolicy_DefinedSets_PrefixSetPath) Mode() *RoutingPolicy_DefinedSets_PrefixSet_ModePath {
	ps := &RoutingPolicy_DefinedSets_PrefixSet_ModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mode (leaf): Indicates the mode of the prefix set, in terms of which
// address families (IPv4, IPv6, or both) are present.  The
// mode provides a hint, but the device must validate that all
// prefixes are of the indicated type, and is expected to
// reject the configuration if there is a discrepancy.  The
// MIXED mode may not be supported on devices that require
// prefix sets to be of only one address family.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/mode"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/*/mode"
func (n *RoutingPolicy_DefinedSets_PrefixSetPathAny) Mode() *RoutingPolicy_DefinedSets_PrefixSet_ModePathAny {
	ps := &RoutingPolicy_DefinedSets_PrefixSet_ModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): name / label of the prefix set -- this is used to
// reference the set in match conditions
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/name"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/*/name"
func (n *RoutingPolicy_DefinedSets_PrefixSetPath) Name() *RoutingPolicy_DefinedSets_PrefixSet_NamePath {
	ps := &RoutingPolicy_DefinedSets_PrefixSet_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): name / label of the prefix set -- this is used to
// reference the set in match conditions
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/name"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/*/name"
func (n *RoutingPolicy_DefinedSets_PrefixSetPathAny) Name() *RoutingPolicy_DefinedSets_PrefixSet_NamePathAny {
	ps := &RoutingPolicy_DefinedSets_PrefixSet_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixAny (list): List of prefixes in the prefix set
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix"
func (n *RoutingPolicy_DefinedSets_PrefixSetPath) PrefixAny() *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny {
	ps := &RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"ip-prefix": "*", "masklength-range": "*"},
			n,
		),
	}
	return ps
}

// PrefixAny (list): List of prefixes in the prefix set
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix"
func (n *RoutingPolicy_DefinedSets_PrefixSetPathAny) PrefixAny() *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny {
	ps := &RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"ip-prefix": "*", "masklength-range": "*"},
			n,
		),
	}
	return ps
}

// WithIpPrefix sets RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny's key "ip-prefix" to the specified value.
// IpPrefix: string
func (n *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny) WithIpPrefix(IpPrefix string) *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny {
	ygnmi.ModifyKey(n.NodePath, "ip-prefix", IpPrefix)
	return n
}

// WithMasklengthRange sets RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny's key "masklength-range" to the specified value.
// MasklengthRange: string
func (n *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny) WithMasklengthRange(MasklengthRange string) *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny {
	ygnmi.ModifyKey(n.NodePath, "masklength-range", MasklengthRange)
	return n
}

// Prefix (list): List of prefixes in the prefix set
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix"
//
//	IpPrefix: string
//	MasklengthRange: string
func (n *RoutingPolicy_DefinedSets_PrefixSetPath) Prefix(IpPrefix string, MasklengthRange string) *RoutingPolicy_DefinedSets_PrefixSet_PrefixPath {
	ps := &RoutingPolicy_DefinedSets_PrefixSet_PrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"ip-prefix": IpPrefix, "masklength-range": MasklengthRange},
			n,
		),
	}
	return ps
}

// Prefix (list): List of prefixes in the prefix set
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix"
//
//	IpPrefix: string
//	MasklengthRange: string
func (n *RoutingPolicy_DefinedSets_PrefixSetPathAny) Prefix(IpPrefix string, MasklengthRange string) *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny {
	ps := &RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"ip-prefix": IpPrefix, "masklength-range": MasklengthRange},
			n,
		),
	}
	return ps
}

// PrefixMap (list): List of prefixes in the prefix set
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix"
func (n *RoutingPolicy_DefinedSets_PrefixSetPath) PrefixMap() *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathMap {
	ps := &RoutingPolicy_DefinedSets_PrefixSet_PrefixPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PrefixMap (list): List of prefixes in the prefix set
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix"
func (n *RoutingPolicy_DefinedSets_PrefixSetPathAny) PrefixMap() *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathMapAny {
	ps := &RoutingPolicy_DefinedSets_PrefixSet_PrefixPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_PrefixSetPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_DefinedSets_PrefixSet] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_DefinedSets_PrefixSet](
		"RoutingPolicy_DefinedSets_PrefixSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_PrefixSetPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_DefinedSets_PrefixSet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_DefinedSets_PrefixSet](
		"RoutingPolicy_DefinedSets_PrefixSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_PrefixSetPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_DefinedSets_PrefixSet] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_DefinedSets_PrefixSet](
		"RoutingPolicy_DefinedSets_PrefixSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_PrefixSetPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_DefinedSets_PrefixSet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_DefinedSets_PrefixSet](
		"RoutingPolicy_DefinedSets_PrefixSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_PrefixSetPathMap) State() ygnmi.SingletonQuery[map[string]*oc.RoutingPolicy_DefinedSets_PrefixSet] {
	return ygnmi.NewSingletonQuery[map[string]*oc.RoutingPolicy_DefinedSets_PrefixSet](
		"RoutingPolicy_DefinedSets",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_PrefixSet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets).PrefixSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:prefix-sets"},
			PostRelPath: []string{"openconfig-routing-policy:prefix-set"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_PrefixSetPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_PrefixSet] {
	return ygnmi.NewWildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_PrefixSet](
		"RoutingPolicy_DefinedSets",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_PrefixSet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets).PrefixSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:prefix-sets"},
			PostRelPath: []string{"openconfig-routing-policy:prefix-set"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_PrefixSetPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.RoutingPolicy_DefinedSets_PrefixSet] {
	return ygnmi.NewConfigQuery[map[string]*oc.RoutingPolicy_DefinedSets_PrefixSet](
		"RoutingPolicy_DefinedSets",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_PrefixSet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets).PrefixSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:prefix-sets"},
			PostRelPath: []string{"openconfig-routing-policy:prefix-set"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_PrefixSetPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_PrefixSet] {
	return ygnmi.NewWildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_PrefixSet](
		"RoutingPolicy_DefinedSets",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_PrefixSet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets).PrefixSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:prefix-sets"},
			PostRelPath: []string{"openconfig-routing-policy:prefix-set"},
		},
	)
}

// RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPath represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/state/ip-prefix YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/state/ip-prefix YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/ip-prefix"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/state/ip-prefix"
func (n *RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RoutingPolicy_DefinedSets_PrefixSet_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip-prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix).IpPrefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/ip-prefix"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/state/ip-prefix"
func (n *RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_DefinedSets_PrefixSet_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip-prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix).IpPrefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/ip-prefix"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/config/ip-prefix"
func (n *RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RoutingPolicy_DefinedSets_PrefixSet_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip-prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix).IpPrefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/ip-prefix"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/config/ip-prefix"
func (n *RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_DefinedSets_PrefixSet_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip-prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix).IpPrefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePath represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/state/masklength-range YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/state/masklength-range YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/masklength-range"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/state/masklength-range"
func (n *RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RoutingPolicy_DefinedSets_PrefixSet_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "masklength-range"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix).MasklengthRange
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/masklength-range"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/state/masklength-range"
func (n *RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_DefinedSets_PrefixSet_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "masklength-range"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix).MasklengthRange
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/masklength-range"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/config/masklength-range"
func (n *RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RoutingPolicy_DefinedSets_PrefixSet_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "masklength-range"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix).MasklengthRange
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/masklength-range"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/config/masklength-range"
func (n *RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_DefinedSets_PrefixSet_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "masklength-range"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix).MasklengthRange
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_DefinedSets_PrefixSet_PrefixPath represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_PrefixPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_PrefixSet_PrefixPathMap represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_PrefixPathMap struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_PrefixSet_PrefixPathMapAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_PrefixPathMapAny struct {
	*ygnmi.NodePath
}

// IpPrefix (leaf): The prefix member in CIDR notation -- while the
// prefix may be either IPv4 or IPv6, most
// implementations require all members of the prefix set
// to be the same address family.  Mixing address types in
// the same prefix set is likely to cause an error.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/ip-prefix"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/*/ip-prefix"
func (n *RoutingPolicy_DefinedSets_PrefixSet_PrefixPath) IpPrefix() *RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPath {
	ps := &RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip-prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IpPrefix (leaf): The prefix member in CIDR notation -- while the
// prefix may be either IPv4 or IPv6, most
// implementations require all members of the prefix set
// to be the same address family.  Mixing address types in
// the same prefix set is likely to cause an error.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/ip-prefix"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/*/ip-prefix"
func (n *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny) IpPrefix() *RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPathAny {
	ps := &RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip-prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MasklengthRange (leaf): Defines a range for the masklength, or 'exact' if
// the prefix has an exact length.
//
// Example: 10.3.192.0/21 through 10.3.192.0/24 would be
// expressed as prefix: 10.3.192.0/21,
// masklength-range: 21..24.
//
// Example: 10.3.192.0/21 would be expressed as
// prefix: 10.3.192.0/21,
// masklength-range: exact
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/masklength-range"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/*/masklength-range"
func (n *RoutingPolicy_DefinedSets_PrefixSet_PrefixPath) MasklengthRange() *RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePath {
	ps := &RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "masklength-range"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MasklengthRange (leaf): Defines a range for the masklength, or 'exact' if
// the prefix has an exact length.
//
// Example: 10.3.192.0/21 through 10.3.192.0/24 would be
// expressed as prefix: 10.3.192.0/21,
// masklength-range: 21..24.
//
// Example: 10.3.192.0/21 would be expressed as
// prefix: 10.3.192.0/21,
// masklength-range: exact
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/masklength-range"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/*/masklength-range"
func (n *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny) MasklengthRange() *RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePathAny {
	ps := &RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "masklength-range"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_PrefixSet_PrefixPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix](
		"RoutingPolicy_DefinedSets_PrefixSet_Prefix",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix](
		"RoutingPolicy_DefinedSets_PrefixSet_Prefix",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_PrefixSet_PrefixPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix](
		"RoutingPolicy_DefinedSets_PrefixSet_Prefix",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix](
		"RoutingPolicy_DefinedSets_PrefixSet_Prefix",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathMap) State() ygnmi.SingletonQuery[map[oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key]*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix] {
	return ygnmi.NewSingletonQuery[map[oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key]*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix](
		"RoutingPolicy_DefinedSets_PrefixSet",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key]*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_PrefixSet).Prefix
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:prefixes"},
			PostRelPath: []string{"openconfig-routing-policy:prefix"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathMapAny) State() ygnmi.WildcardQuery[map[oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key]*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix] {
	return ygnmi.NewWildcardQuery[map[oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key]*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix](
		"RoutingPolicy_DefinedSets_PrefixSet",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key]*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_PrefixSet).Prefix
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:prefixes"},
			PostRelPath: []string{"openconfig-routing-policy:prefix"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathMap) Config() ygnmi.ConfigQuery[map[oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key]*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix] {
	return ygnmi.NewConfigQuery[map[oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key]*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix](
		"RoutingPolicy_DefinedSets_PrefixSet",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key]*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_PrefixSet).Prefix
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:prefixes"},
			PostRelPath: []string{"openconfig-routing-policy:prefix"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathMapAny) Config() ygnmi.WildcardQuery[map[oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key]*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix] {
	return ygnmi.NewWildcardQuery[map[oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key]*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix](
		"RoutingPolicy_DefinedSets_PrefixSet",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key]*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_PrefixSet).Prefix
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:prefixes"},
			PostRelPath: []string{"openconfig-routing-policy:prefix"},
		},
	)
}

// RoutingPolicy_DefinedSets_TagSet_NamePath represents the /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set/state/name YANG schema element.
type RoutingPolicy_DefinedSets_TagSet_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_DefinedSets_TagSet_NamePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set/state/name YANG schema element.
type RoutingPolicy_DefinedSets_TagSet_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/name"
//	Path from root:       "/routing-policy/defined-sets/tag-sets/tag-set/state/name"
func (n *RoutingPolicy_DefinedSets_TagSet_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RoutingPolicy_DefinedSets_TagSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_TagSet).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_TagSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/name"
//	Path from root:       "/routing-policy/defined-sets/tag-sets/tag-set/state/name"
func (n *RoutingPolicy_DefinedSets_TagSet_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_DefinedSets_TagSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_TagSet).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_TagSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/name"
//	Path from root:       "/routing-policy/defined-sets/tag-sets/tag-set/config/name"
func (n *RoutingPolicy_DefinedSets_TagSet_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RoutingPolicy_DefinedSets_TagSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_TagSet).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_TagSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/name"
//	Path from root:       "/routing-policy/defined-sets/tag-sets/tag-set/config/name"
func (n *RoutingPolicy_DefinedSets_TagSet_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_DefinedSets_TagSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_TagSet).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_TagSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_DefinedSets_TagSet_TagValuePath represents the /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set/state/tag-value YANG schema element.
type RoutingPolicy_DefinedSets_TagSet_TagValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_DefinedSets_TagSet_TagValuePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set/state/tag-value YANG schema element.
type RoutingPolicy_DefinedSets_TagSet_TagValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/tag-value"
//	Path from root:       "/routing-policy/defined-sets/tag-sets/tag-set/state/tag-value"
func (n *RoutingPolicy_DefinedSets_TagSet_TagValuePath) State() ygnmi.SingletonQuery[[]oc.RoutingPolicy_DefinedSets_TagSet_TagValue_Union] {
	return ygnmi.NewSingletonQuery[[]oc.RoutingPolicy_DefinedSets_TagSet_TagValue_Union](
		"RoutingPolicy_DefinedSets_TagSet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tag-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.RoutingPolicy_DefinedSets_TagSet_TagValue_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_TagSet).TagValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_TagSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/tag-value"
//	Path from root:       "/routing-policy/defined-sets/tag-sets/tag-set/state/tag-value"
func (n *RoutingPolicy_DefinedSets_TagSet_TagValuePathAny) State() ygnmi.WildcardQuery[[]oc.RoutingPolicy_DefinedSets_TagSet_TagValue_Union] {
	return ygnmi.NewWildcardQuery[[]oc.RoutingPolicy_DefinedSets_TagSet_TagValue_Union](
		"RoutingPolicy_DefinedSets_TagSet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tag-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.RoutingPolicy_DefinedSets_TagSet_TagValue_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_TagSet).TagValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_TagSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/tag-value"
//	Path from root:       "/routing-policy/defined-sets/tag-sets/tag-set/config/tag-value"
func (n *RoutingPolicy_DefinedSets_TagSet_TagValuePath) Config() ygnmi.ConfigQuery[[]oc.RoutingPolicy_DefinedSets_TagSet_TagValue_Union] {
	return ygnmi.NewConfigQuery[[]oc.RoutingPolicy_DefinedSets_TagSet_TagValue_Union](
		"RoutingPolicy_DefinedSets_TagSet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tag-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.RoutingPolicy_DefinedSets_TagSet_TagValue_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_TagSet).TagValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_TagSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/tag-value"
//	Path from root:       "/routing-policy/defined-sets/tag-sets/tag-set/config/tag-value"
func (n *RoutingPolicy_DefinedSets_TagSet_TagValuePathAny) Config() ygnmi.WildcardQuery[[]oc.RoutingPolicy_DefinedSets_TagSet_TagValue_Union] {
	return ygnmi.NewWildcardQuery[[]oc.RoutingPolicy_DefinedSets_TagSet_TagValue_Union](
		"RoutingPolicy_DefinedSets_TagSet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tag-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.RoutingPolicy_DefinedSets_TagSet_TagValue_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_TagSet).TagValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_TagSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_DefinedSets_TagSetPath represents the /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set YANG schema element.
type RoutingPolicy_DefinedSets_TagSetPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_TagSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set YANG schema element.
type RoutingPolicy_DefinedSets_TagSetPathAny struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_TagSetPathMap represents the /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set YANG schema element.
type RoutingPolicy_DefinedSets_TagSetPathMap struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_TagSetPathMapAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set YANG schema element.
type RoutingPolicy_DefinedSets_TagSetPathMapAny struct {
	*ygnmi.NodePath
}

// Name (leaf): name / label of the tag set -- this is used to reference
// the set in match conditions
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/name"
//	Path from root:       "/routing-policy/defined-sets/tag-sets/tag-set/*/name"
func (n *RoutingPolicy_DefinedSets_TagSetPath) Name() *RoutingPolicy_DefinedSets_TagSet_NamePath {
	ps := &RoutingPolicy_DefinedSets_TagSet_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): name / label of the tag set -- this is used to reference
// the set in match conditions
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/name"
//	Path from root:       "/routing-policy/defined-sets/tag-sets/tag-set/*/name"
func (n *RoutingPolicy_DefinedSets_TagSetPathAny) Name() *RoutingPolicy_DefinedSets_TagSet_NamePathAny {
	ps := &RoutingPolicy_DefinedSets_TagSet_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TagValue (leaf-list): Value of the tag set member
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/tag-value"
//	Path from root:       "/routing-policy/defined-sets/tag-sets/tag-set/*/tag-value"
func (n *RoutingPolicy_DefinedSets_TagSetPath) TagValue() *RoutingPolicy_DefinedSets_TagSet_TagValuePath {
	ps := &RoutingPolicy_DefinedSets_TagSet_TagValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tag-value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TagValue (leaf-list): Value of the tag set member
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/tag-value"
//	Path from root:       "/routing-policy/defined-sets/tag-sets/tag-set/*/tag-value"
func (n *RoutingPolicy_DefinedSets_TagSetPathAny) TagValue() *RoutingPolicy_DefinedSets_TagSet_TagValuePathAny {
	ps := &RoutingPolicy_DefinedSets_TagSet_TagValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tag-value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_TagSetPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_DefinedSets_TagSet] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_DefinedSets_TagSet](
		"RoutingPolicy_DefinedSets_TagSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_TagSetPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_DefinedSets_TagSet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_DefinedSets_TagSet](
		"RoutingPolicy_DefinedSets_TagSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_TagSetPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_DefinedSets_TagSet] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_DefinedSets_TagSet](
		"RoutingPolicy_DefinedSets_TagSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_TagSetPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_DefinedSets_TagSet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_DefinedSets_TagSet](
		"RoutingPolicy_DefinedSets_TagSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_TagSetPathMap) State() ygnmi.SingletonQuery[map[string]*oc.RoutingPolicy_DefinedSets_TagSet] {
	return ygnmi.NewSingletonQuery[map[string]*oc.RoutingPolicy_DefinedSets_TagSet](
		"RoutingPolicy_DefinedSets",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_TagSet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets).TagSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:tag-sets"},
			PostRelPath: []string{"openconfig-routing-policy:tag-set"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_TagSetPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_TagSet] {
	return ygnmi.NewWildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_TagSet](
		"RoutingPolicy_DefinedSets",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_TagSet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets).TagSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:tag-sets"},
			PostRelPath: []string{"openconfig-routing-policy:tag-set"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_TagSetPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.RoutingPolicy_DefinedSets_TagSet] {
	return ygnmi.NewConfigQuery[map[string]*oc.RoutingPolicy_DefinedSets_TagSet](
		"RoutingPolicy_DefinedSets",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_TagSet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets).TagSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:tag-sets"},
			PostRelPath: []string{"openconfig-routing-policy:tag-set"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_TagSetPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_TagSet] {
	return ygnmi.NewWildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_TagSet](
		"RoutingPolicy_DefinedSets",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_TagSet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets).TagSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:tag-sets"},
			PostRelPath: []string{"openconfig-routing-policy:tag-set"},
		},
	)
}

// RoutingPolicy_PolicyDefinition_NamePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/state/name YANG schema element.
type RoutingPolicy_PolicyDefinition_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_NamePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/state/name YANG schema element.
type RoutingPolicy_PolicyDefinition_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/name"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/state/name"
func (n *RoutingPolicy_PolicyDefinition_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RoutingPolicy_PolicyDefinition",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/name"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/state/name"
func (n *RoutingPolicy_PolicyDefinition_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/name"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/config/name"
func (n *RoutingPolicy_PolicyDefinition_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RoutingPolicy_PolicyDefinition",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/name"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/config/name"
func (n *RoutingPolicy_PolicyDefinition_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinitionPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition YANG schema element.
type RoutingPolicy_PolicyDefinitionPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinitionPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition YANG schema element.
type RoutingPolicy_PolicyDefinitionPathAny struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinitionPathMap represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition YANG schema element.
type RoutingPolicy_PolicyDefinitionPathMap struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinitionPathMapAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition YANG schema element.
type RoutingPolicy_PolicyDefinitionPathMapAny struct {
	*ygnmi.NodePath
}

// Name (leaf): Name of the top-level policy definition -- this name
// is used in references to the current policy
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/name"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/*/name"
func (n *RoutingPolicy_PolicyDefinitionPath) Name() *RoutingPolicy_PolicyDefinition_NamePath {
	ps := &RoutingPolicy_PolicyDefinition_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Name of the top-level policy definition -- this name
// is used in references to the current policy
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/name"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/*/name"
func (n *RoutingPolicy_PolicyDefinitionPathAny) Name() *RoutingPolicy_PolicyDefinition_NamePathAny {
	ps := &RoutingPolicy_PolicyDefinition_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// StatementMap (list): Policy statements group conditions and actions
// within a policy definition.  They are evaluated in
// the order specified (see the description of policy
// evaluation at the top of this module.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "statements/statement"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement"
func (n *RoutingPolicy_PolicyDefinitionPath) StatementMap() *RoutingPolicy_PolicyDefinition_StatementPathMap {
	ps := &RoutingPolicy_PolicyDefinition_StatementPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"statements"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// StatementMap (list): Policy statements group conditions and actions
// within a policy definition.  They are evaluated in
// the order specified (see the description of policy
// evaluation at the top of this module.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "statements/statement"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement"
func (n *RoutingPolicy_PolicyDefinitionPathAny) StatementMap() *RoutingPolicy_PolicyDefinition_StatementPathMapAny {
	ps := &RoutingPolicy_PolicyDefinition_StatementPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"statements"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinitionPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition](
		"RoutingPolicy_PolicyDefinition",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinitionPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition](
		"RoutingPolicy_PolicyDefinition",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinitionPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition](
		"RoutingPolicy_PolicyDefinition",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinitionPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition](
		"RoutingPolicy_PolicyDefinition",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinitionPathMap) State() ygnmi.SingletonQuery[map[string]*oc.RoutingPolicy_PolicyDefinition] {
	return ygnmi.NewSingletonQuery[map[string]*oc.RoutingPolicy_PolicyDefinition](
		"RoutingPolicy",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_PolicyDefinition, bool) {
			ret := gs.(*oc.RoutingPolicy).PolicyDefinition
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:policy-definitions"},
			PostRelPath: []string{"openconfig-routing-policy:policy-definition"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinitionPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.RoutingPolicy_PolicyDefinition] {
	return ygnmi.NewWildcardQuery[map[string]*oc.RoutingPolicy_PolicyDefinition](
		"RoutingPolicy",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_PolicyDefinition, bool) {
			ret := gs.(*oc.RoutingPolicy).PolicyDefinition
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:policy-definitions"},
			PostRelPath: []string{"openconfig-routing-policy:policy-definition"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinitionPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.RoutingPolicy_PolicyDefinition] {
	return ygnmi.NewConfigQuery[map[string]*oc.RoutingPolicy_PolicyDefinition](
		"RoutingPolicy",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_PolicyDefinition, bool) {
			ret := gs.(*oc.RoutingPolicy).PolicyDefinition
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:policy-definitions"},
			PostRelPath: []string{"openconfig-routing-policy:policy-definition"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinitionPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.RoutingPolicy_PolicyDefinition] {
	return ygnmi.NewWildcardQuery[map[string]*oc.RoutingPolicy_PolicyDefinition](
		"RoutingPolicy",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_PolicyDefinition, bool) {
			ret := gs.(*oc.RoutingPolicy).PolicyDefinition
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:policy-definitions"},
			PostRelPath: []string{"openconfig-routing-policy:policy-definition"},
		},
	)
}

// RoutingPolicy_PolicyDefinition_StatementPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement YANG schema element.
type RoutingPolicy_PolicyDefinition_StatementPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_StatementPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement YANG schema element.
type RoutingPolicy_PolicyDefinition_StatementPathAny struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_StatementPathMap represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement YANG schema element.
type RoutingPolicy_PolicyDefinition_StatementPathMap struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_StatementPathMapAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement YANG schema element.
type RoutingPolicy_PolicyDefinition_StatementPathMapAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_StatementPathMap) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_OrderedMap] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_OrderedMap](
		"RoutingPolicy_PolicyDefinition",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (*oc.RoutingPolicy_PolicyDefinition_Statement_OrderedMap, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition).Statement
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:statements"},
			PostRelPath: []string{"openconfig-routing-policy:statement"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_StatementPathMapAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_OrderedMap] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_OrderedMap](
		"RoutingPolicy_PolicyDefinition",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (*oc.RoutingPolicy_PolicyDefinition_Statement_OrderedMap, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition).Statement
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:statements"},
			PostRelPath: []string{"openconfig-routing-policy:statement"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_StatementPathMap) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_OrderedMap] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_OrderedMap](
		"RoutingPolicy_PolicyDefinition",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (*oc.RoutingPolicy_PolicyDefinition_Statement_OrderedMap, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition).Statement
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:statements"},
			PostRelPath: []string{"openconfig-routing-policy:statement"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_StatementPathMapAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_OrderedMap] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_OrderedMap](
		"RoutingPolicy_PolicyDefinition",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (*oc.RoutingPolicy_PolicyDefinition_Statement_OrderedMap, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition).Statement
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:statements"},
			PostRelPath: []string{"openconfig-routing-policy:statement"},
		},
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/state/policy-result YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/state/policy-result YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/policy-result"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/state/policy-result"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPath) State() ygnmi.SingletonQuery[oc.E_RoutingPolicy_PolicyResultType] {
	return ygnmi.NewSingletonQuery[oc.E_RoutingPolicy_PolicyResultType](
		"RoutingPolicy_PolicyDefinition_Statement_Actions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "policy-result"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_PolicyResultType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions).PolicyResult
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/policy-result"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/state/policy-result"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPathAny) State() ygnmi.WildcardQuery[oc.E_RoutingPolicy_PolicyResultType] {
	return ygnmi.NewWildcardQuery[oc.E_RoutingPolicy_PolicyResultType](
		"RoutingPolicy_PolicyDefinition_Statement_Actions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "policy-result"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_PolicyResultType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions).PolicyResult
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/policy-result"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/config/policy-result"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPath) Config() ygnmi.ConfigQuery[oc.E_RoutingPolicy_PolicyResultType] {
	return ygnmi.NewConfigQuery[oc.E_RoutingPolicy_PolicyResultType](
		"RoutingPolicy_PolicyDefinition_Statement_Actions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "policy-result"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_PolicyResultType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions).PolicyResult
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/policy-result"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/config/policy-result"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPathAny) Config() ygnmi.WildcardQuery[oc.E_RoutingPolicy_PolicyResultType] {
	return ygnmi.NewWildcardQuery[oc.E_RoutingPolicy_PolicyResultType](
		"RoutingPolicy_PolicyDefinition_Statement_Actions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "policy-result"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_PolicyResultType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions).PolicyResult
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_ActionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_ActionsPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_ActionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_ActionsPathAny struct {
	*ygnmi.NodePath
}

// BgpActions (container): Top-level container for BGP-specific actions
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "bgp-actions"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions"
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPath) BgpActions() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bgp-actions"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// BgpActions (container): Top-level container for BGP-specific actions
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "bgp-actions"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions"
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPathAny) BgpActions() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bgp-actions"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// IsisActions (container): Actions that can be performed by IS-IS within a policy
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "isis-actions"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions"
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPath) IsisActions() *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActionsPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"isis-actions"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// IsisActions (container): Actions that can be performed by IS-IS within a policy
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "isis-actions"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions"
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPathAny) IsisActions() *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActionsPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"isis-actions"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// OspfActions (container): Actions specific to OSPF
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "ospf-actions"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions"
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPath) OspfActions() *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ospf-actions"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// OspfActions (container): Actions specific to OSPF
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "ospf-actions"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions"
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPathAny) OspfActions() *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ospf-actions"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PolicyResult (leaf): Select the final disposition for the route, either
// accept or reject.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/policy-result"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/*/policy-result"
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPath) PolicyResult() *RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "policy-result"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PolicyResult (leaf): Select the final disposition for the route, either
// accept or reject.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/policy-result"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/*/policy-result"
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPathAny) PolicyResult() *RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "policy-result"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetTag (container): Policy actions associated with setting tags for a particular
// route. A tag is an abstract entity which can be mapped to underlying
// protocol attributes where applicable.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "set-tag"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag"
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPath) SetTag() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"set-tag"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SetTag (container): Policy actions associated with setting tags for a particular
// route. A tag is an abstract entity which can be mapped to underlying
// protocol attributes where applicable.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "set-tag"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag"
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPathAny) SetTag() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"set-tag"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions](
		"RoutingPolicy_PolicyDefinition_Statement_Actions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions](
		"RoutingPolicy_PolicyDefinition_Statement_Actions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions](
		"RoutingPolicy_PolicyDefinition_Statement_Actions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions](
		"RoutingPolicy_PolicyDefinition_Statement_Actions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-local-pref YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-local-pref YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/set-local-pref"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-local-pref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-local-pref"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions).SetLocalPref
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/set-local-pref"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-local-pref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-local-pref"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions).SetLocalPref
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/set-local-pref"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-local-pref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-local-pref"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions).SetLocalPref
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/set-local-pref"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-local-pref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-local-pref"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions).SetLocalPref
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-med YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-med YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/set-med"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-med"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPath) State() ygnmi.SingletonQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMed_Union] {
	return ygnmi.NewSingletonQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMed_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-med"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMed_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions).SetMed
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/set-med"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-med"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPathAny) State() ygnmi.WildcardQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMed_Union] {
	return ygnmi.NewWildcardQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMed_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-med"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMed_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions).SetMed
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/set-med"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-med"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPath) Config() ygnmi.ConfigQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMed_Union] {
	return ygnmi.NewConfigQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMed_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-med"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMed_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions).SetMed
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/set-med"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-med"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPathAny) Config() ygnmi.WildcardQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMed_Union] {
	return ygnmi.NewWildcardQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMed_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-med"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMed_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions).SetMed
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedActionPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-med-action YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedActionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedActionPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-med-action YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedActionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/set-med-action"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-med-action"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedActionPath) State() ygnmi.SingletonQuery[oc.E_BgpPolicy_BgpSetMedAction] {
	return ygnmi.NewSingletonQuery[oc.E_BgpPolicy_BgpSetMedAction](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-med-action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpPolicy_BgpSetMedAction, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions).SetMedAction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/set-med-action"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-med-action"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedActionPathAny) State() ygnmi.WildcardQuery[oc.E_BgpPolicy_BgpSetMedAction] {
	return ygnmi.NewWildcardQuery[oc.E_BgpPolicy_BgpSetMedAction](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-med-action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpPolicy_BgpSetMedAction, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions).SetMedAction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/set-med-action"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-med-action"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedActionPath) Config() ygnmi.ConfigQuery[oc.E_BgpPolicy_BgpSetMedAction] {
	return ygnmi.NewConfigQuery[oc.E_BgpPolicy_BgpSetMedAction](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-med-action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpPolicy_BgpSetMedAction, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions).SetMedAction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/set-med-action"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-med-action"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedActionPathAny) Config() ygnmi.WildcardQuery[oc.E_BgpPolicy_BgpSetMedAction] {
	return ygnmi.NewWildcardQuery[oc.E_BgpPolicy_BgpSetMedAction](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-med-action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpPolicy_BgpSetMedAction, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions).SetMedAction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-next-hop YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-next-hop YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/set-next-hop"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-next-hop"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPath) State() ygnmi.SingletonQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHop_Union] {
	return ygnmi.NewSingletonQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHop_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHop_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions).SetNextHop
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/set-next-hop"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-next-hop"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPathAny) State() ygnmi.WildcardQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHop_Union] {
	return ygnmi.NewWildcardQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHop_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHop_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions).SetNextHop
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/set-next-hop"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-next-hop"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPath) Config() ygnmi.ConfigQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHop_Union] {
	return ygnmi.NewConfigQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHop_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHop_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions).SetNextHop
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/set-next-hop"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-next-hop"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPathAny) Config() ygnmi.WildcardQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHop_Union] {
	return ygnmi.NewWildcardQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHop_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHop_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions).SetNextHop
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-route-origin YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-route-origin YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/set-route-origin"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-route-origin"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPath) State() ygnmi.SingletonQuery[oc.E_BgpPolicy_BgpOriginAttrType] {
	return ygnmi.NewSingletonQuery[oc.E_BgpPolicy_BgpOriginAttrType](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-route-origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpPolicy_BgpOriginAttrType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions).SetRouteOrigin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/set-route-origin"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-route-origin"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPathAny) State() ygnmi.WildcardQuery[oc.E_BgpPolicy_BgpOriginAttrType] {
	return ygnmi.NewWildcardQuery[oc.E_BgpPolicy_BgpOriginAttrType](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-route-origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpPolicy_BgpOriginAttrType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions).SetRouteOrigin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/set-route-origin"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-route-origin"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPath) Config() ygnmi.ConfigQuery[oc.E_BgpPolicy_BgpOriginAttrType] {
	return ygnmi.NewConfigQuery[oc.E_BgpPolicy_BgpOriginAttrType](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-route-origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpPolicy_BgpOriginAttrType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions).SetRouteOrigin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/set-route-origin"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-route-origin"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPathAny) Config() ygnmi.WildcardQuery[oc.E_BgpPolicy_BgpOriginAttrType] {
	return ygnmi.NewWildcardQuery[oc.E_BgpPolicy_BgpOriginAttrType](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-route-origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpPolicy_BgpOriginAttrType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions).SetRouteOrigin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny struct {
	*ygnmi.NodePath
}

// SetAsPathPrepend (container): Action to prepend the specified AS number to the AS-path a
// specified number of times
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "set-as-path-prepend"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath) SetAsPathPrepend() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"set-as-path-prepend"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SetAsPathPrepend (container): Action to prepend the specified AS number to the AS-path a
// specified number of times
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "set-as-path-prepend"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny) SetAsPathPrepend() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"set-as-path-prepend"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SetCommunity (container): Action to set the community attributes of the route, along
// with options to modify how the community is modified.
// Communities may be set using an inline list OR
// reference to an existing defined set (not both).
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "set-community"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath) SetCommunity() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"set-community"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SetCommunity (container): Action to set the community attributes of the route, along
// with options to modify how the community is modified.
// Communities may be set using an inline list OR
// reference to an existing defined set (not both).
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "set-community"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny) SetCommunity() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"set-community"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SetExtCommunity (container): Action to set the extended community attributes of the
// route, along with options to modify how the community is
// modified. Extended communities may be set using an inline
// list OR a reference to an existing defined set (but not
// both).
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "set-ext-community"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath) SetExtCommunity() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"set-ext-community"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SetExtCommunity (container): Action to set the extended community attributes of the
// route, along with options to modify how the community is
// modified. Extended communities may be set using an inline
// list OR a reference to an existing defined set (but not
// both).
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "set-ext-community"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny) SetExtCommunity() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"set-ext-community"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SetLocalPref (leaf): set the local pref attribute on the route
// update
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/set-local-pref"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/*/set-local-pref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath) SetLocalPref() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-local-pref"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetLocalPref (leaf): set the local pref attribute on the route
// update
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/set-local-pref"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/*/set-local-pref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny) SetLocalPref() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-local-pref"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMed (leaf): Set the MED metric attribute in the route update.  When set, a
// valid `set-med-action` must be specified.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/set-med"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/*/set-med"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath) SetMed() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-med"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMed (leaf): Set the MED metric attribute in the route update.  When set, a
// valid `set-med-action` must be specified.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/set-med"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/*/set-med"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny) SetMed() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-med"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMedAction (leaf): When set-med is specified, this leaf is mandatory to set the
// appropriate action on the MED metric value.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/set-med-action"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/*/set-med-action"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath) SetMedAction() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedActionPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedActionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-med-action"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMedAction (leaf): When set-med is specified, this leaf is mandatory to set the
// appropriate action on the MED metric value.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/set-med-action"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/*/set-med-action"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny) SetMedAction() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedActionPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedActionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-med-action"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetNextHop (leaf): set the next-hop attribute in the route update
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/set-next-hop"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/*/set-next-hop"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath) SetNextHop() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-next-hop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetNextHop (leaf): set the next-hop attribute in the route update
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/set-next-hop"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/*/set-next-hop"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny) SetNextHop() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-next-hop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetRouteOrigin (leaf): set the origin attribute to the specified
// value
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/set-route-origin"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/*/set-route-origin"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath) SetRouteOrigin() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-route-origin"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetRouteOrigin (leaf): set the origin attribute to the specified
// value
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/set-route-origin"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/*/set-route-origin"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny) SetRouteOrigin() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-route-origin"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/state/asn YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/state/asn YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/asn"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/state/asn"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "asn"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend).Asn
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/asn"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/state/asn"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "asn"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend).Asn
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/asn"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/config/asn"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "asn"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend).Asn
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/asn"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/config/asn"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "asn"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend).Asn
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/state/repeat-n YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/state/repeat-n YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/repeat-n"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/state/repeat-n"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "repeat-n"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend).RepeatN
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/repeat-n"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/state/repeat-n"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "repeat-n"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend).RepeatN
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/repeat-n"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/config/repeat-n"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "repeat-n"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend).RepeatN
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/repeat-n"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/config/repeat-n"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "repeat-n"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend).RepeatN
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_UseLastAsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/state/use-last-as YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_UseLastAsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_UseLastAsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/state/use-last-as YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_UseLastAsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/use-last-as"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/state/use-last-as"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_UseLastAsPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "use-last-as"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend).UseLastAs
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/use-last-as"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/state/use-last-as"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_UseLastAsPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "use-last-as"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend).UseLastAs
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/use-last-as"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/config/use-last-as"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_UseLastAsPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "use-last-as"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend).UseLastAs
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/use-last-as"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/config/use-last-as"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_UseLastAsPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "use-last-as"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend).UseLastAs
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPathAny struct {
	*ygnmi.NodePath
}

// Asn (leaf): The AS number to prepend to the AS path. If neither this
// leaf nor use-last-as leaf is specified but repeat-n is set, then
// the local AS number will be used for prepending.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/asn"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/*/asn"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPath) Asn() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "asn"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Asn (leaf): The AS number to prepend to the AS path. If neither this
// leaf nor use-last-as leaf is specified but repeat-n is set, then
// the local AS number will be used for prepending.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/asn"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/*/asn"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPathAny) Asn() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "asn"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RepeatN (leaf): Number of times to prepend the value specified in the asn
// leaf to the AS path. If no value is specified by the asn
// leaf, the local AS number of the system is used. The value
// should be between 1 and the maximum supported by the
// implementation.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/repeat-n"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/*/repeat-n"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPath) RepeatN() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "repeat-n"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RepeatN (leaf): Number of times to prepend the value specified in the asn
// leaf to the AS path. If no value is specified by the asn
// leaf, the local AS number of the system is used. The value
// should be between 1 and the maximum supported by the
// implementation.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/repeat-n"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/*/repeat-n"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPathAny) RepeatN() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "repeat-n"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UseLastAs (leaf): Indicates whether to use the last AS number, which is also the
// most recent AS number, to prepend to the AS path.
// If neither this leaf nor asn leaf is specified
// but repeat-n is set, then the local AS number will be
// used for prepending.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/use-last-as"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/*/use-last-as"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPath) UseLastAs() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_UseLastAsPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_UseLastAsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "use-last-as"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UseLastAs (leaf): Indicates whether to use the last AS number, which is also the
// most recent AS number, to prepend to the AS path.
// If neither this leaf nor asn leaf is specified
// but repeat-n is set, then the local AS number will be
// used for prepending.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/use-last-as"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/*/use-last-as"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPathAny) UseLastAs() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_UseLastAsPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_UseLastAsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "use-last-as"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/state/method YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/state/method YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/method"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/state/method"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPath) State() ygnmi.SingletonQuery[oc.E_SetCommunity_Method] {
	return ygnmi.NewSingletonQuery[oc.E_SetCommunity_Method](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SetCommunity_Method, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity).Method
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/method"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/state/method"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPathAny) State() ygnmi.WildcardQuery[oc.E_SetCommunity_Method] {
	return ygnmi.NewWildcardQuery[oc.E_SetCommunity_Method](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SetCommunity_Method, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity).Method
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/method"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/config/method"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPath) Config() ygnmi.ConfigQuery[oc.E_SetCommunity_Method] {
	return ygnmi.NewConfigQuery[oc.E_SetCommunity_Method](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SetCommunity_Method, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity).Method
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/method"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/config/method"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPathAny) Config() ygnmi.WildcardQuery[oc.E_SetCommunity_Method] {
	return ygnmi.NewWildcardQuery[oc.E_SetCommunity_Method](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SetCommunity_Method, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity).Method
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/state/options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/state/options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/state/options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPath) State() ygnmi.SingletonQuery[oc.E_BgpPolicy_BgpSetCommunityOptionType] {
	return ygnmi.NewSingletonQuery[oc.E_BgpPolicy_BgpSetCommunityOptionType](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpPolicy_BgpSetCommunityOptionType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity).Options
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/state/options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPathAny) State() ygnmi.WildcardQuery[oc.E_BgpPolicy_BgpSetCommunityOptionType] {
	return ygnmi.NewWildcardQuery[oc.E_BgpPolicy_BgpSetCommunityOptionType](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpPolicy_BgpSetCommunityOptionType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity).Options
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/config/options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPath) Config() ygnmi.ConfigQuery[oc.E_BgpPolicy_BgpSetCommunityOptionType] {
	return ygnmi.NewConfigQuery[oc.E_BgpPolicy_BgpSetCommunityOptionType](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpPolicy_BgpSetCommunityOptionType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity).Options
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/config/options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPathAny) Config() ygnmi.WildcardQuery[oc.E_BgpPolicy_BgpSetCommunityOptionType] {
	return ygnmi.NewWildcardQuery[oc.E_BgpPolicy_BgpSetCommunityOptionType](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpPolicy_BgpSetCommunityOptionType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity).Options
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny struct {
	*ygnmi.NodePath
}

// Inline (container): Set the community values for the action inline with
// a list.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "inline"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath) Inline() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"inline"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Inline (container): Set the community values for the action inline with
// a list.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "inline"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny) Inline() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"inline"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Method (leaf): Indicates the method used to specify the extended
// communities for the set-ext-community action
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/method"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/*/method"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath) Method() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "method"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Method (leaf): Indicates the method used to specify the extended
// communities for the set-ext-community action
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/method"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/*/method"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny) Method() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "method"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Options (leaf): Options for modifying the community attribute with
// the specified values.  These options apply to both
// methods of setting the community attribute.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/*/options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath) Options() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Options (leaf): Options for modifying the community attribute with
// the specified values.  These options apply to both
// methods of setting the community attribute.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/*/options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny) Options() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Reference (container): Provide a reference to a defined community set for the
// set-community action
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "reference"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath) Reference() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"reference"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Reference (container): Provide a reference to a defined community set for the
// set-community action
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "reference"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny) Reference() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"reference"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline/state/communities YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline/state/communities YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/communities"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline/state/communities"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPath) State() ygnmi.SingletonQuery[[]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_Communities_Union] {
	return ygnmi.NewSingletonQuery[[]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_Communities_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "communities"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_Communities_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline).Communities
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/communities"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline/state/communities"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPathAny) State() ygnmi.WildcardQuery[[]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_Communities_Union] {
	return ygnmi.NewWildcardQuery[[]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_Communities_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "communities"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_Communities_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline).Communities
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/communities"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline/config/communities"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPath) Config() ygnmi.ConfigQuery[[]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_Communities_Union] {
	return ygnmi.NewConfigQuery[[]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_Communities_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "communities"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_Communities_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline).Communities
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/communities"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline/config/communities"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPathAny) Config() ygnmi.WildcardQuery[[]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_Communities_Union] {
	return ygnmi.NewWildcardQuery[[]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_Communities_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "communities"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_Communities_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline).Communities
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePathAny struct {
	*ygnmi.NodePath
}

// Communities (leaf-list): Set the community values for the update inline with
// a list.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/communities"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline/*/communities"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePath) Communities() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "communities"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Communities (leaf-list): Set the community values for the update inline with
// a list.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/communities"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline/*/communities"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePathAny) Communities() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "communities"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference/state/community-set-ref YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference/state/community-set-ref YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/community-set-ref"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference/state/community-set-ref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "community-set-ref"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference).CommunitySetRef
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/community-set-ref"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference/state/community-set-ref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "community-set-ref"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference).CommunitySetRef
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/community-set-ref"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference/config/community-set-ref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "community-set-ref"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference).CommunitySetRef
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/community-set-ref"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference/config/community-set-ref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "community-set-ref"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference).CommunitySetRef
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference/state/community-set-refs YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference/state/community-set-refs YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/community-set-refs"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference/state/community-set-refs"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefsPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "community-set-refs"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference).CommunitySetRefs
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/community-set-refs"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference/state/community-set-refs"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefsPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "community-set-refs"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference).CommunitySetRefs
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/community-set-refs"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference/config/community-set-refs"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefsPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "community-set-refs"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference).CommunitySetRefs
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/community-set-refs"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference/config/community-set-refs"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefsPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "community-set-refs"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference).CommunitySetRefs
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePathAny struct {
	*ygnmi.NodePath
}

// CommunitySetRef (leaf): References a defined community set by name
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/community-set-ref"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference/*/community-set-ref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePath) CommunitySetRef() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "community-set-ref"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CommunitySetRef (leaf): References a defined community set by name
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/community-set-ref"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference/*/community-set-ref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePathAny) CommunitySetRef() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "community-set-ref"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CommunitySetRefs (leaf-list): References a list of defined community sets by name
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/community-set-refs"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference/*/community-set-refs"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePath) CommunitySetRefs() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefsPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "community-set-refs"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CommunitySetRefs (leaf-list): References a list of defined community sets by name
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/community-set-refs"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference/*/community-set-refs"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePathAny) CommunitySetRefs() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefsPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "community-set-refs"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/state/method YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/state/method YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/method"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/state/method"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPath) State() ygnmi.SingletonQuery[oc.E_SetCommunity_Method] {
	return ygnmi.NewSingletonQuery[oc.E_SetCommunity_Method](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SetCommunity_Method, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity).Method
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/method"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/state/method"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPathAny) State() ygnmi.WildcardQuery[oc.E_SetCommunity_Method] {
	return ygnmi.NewWildcardQuery[oc.E_SetCommunity_Method](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SetCommunity_Method, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity).Method
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/method"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/config/method"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPath) Config() ygnmi.ConfigQuery[oc.E_SetCommunity_Method] {
	return ygnmi.NewConfigQuery[oc.E_SetCommunity_Method](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SetCommunity_Method, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity).Method
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/method"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/config/method"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPathAny) Config() ygnmi.WildcardQuery[oc.E_SetCommunity_Method] {
	return ygnmi.NewWildcardQuery[oc.E_SetCommunity_Method](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SetCommunity_Method, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity).Method
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/state/options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/state/options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/state/options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPath) State() ygnmi.SingletonQuery[oc.E_BgpPolicy_BgpSetCommunityOptionType] {
	return ygnmi.NewSingletonQuery[oc.E_BgpPolicy_BgpSetCommunityOptionType](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpPolicy_BgpSetCommunityOptionType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity).Options
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/state/options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPathAny) State() ygnmi.WildcardQuery[oc.E_BgpPolicy_BgpSetCommunityOptionType] {
	return ygnmi.NewWildcardQuery[oc.E_BgpPolicy_BgpSetCommunityOptionType](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpPolicy_BgpSetCommunityOptionType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity).Options
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/config/options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPath) Config() ygnmi.ConfigQuery[oc.E_BgpPolicy_BgpSetCommunityOptionType] {
	return ygnmi.NewConfigQuery[oc.E_BgpPolicy_BgpSetCommunityOptionType](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpPolicy_BgpSetCommunityOptionType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity).Options
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/config/options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPathAny) Config() ygnmi.WildcardQuery[oc.E_BgpPolicy_BgpSetCommunityOptionType] {
	return ygnmi.NewWildcardQuery[oc.E_BgpPolicy_BgpSetCommunityOptionType](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpPolicy_BgpSetCommunityOptionType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity).Options
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPathAny struct {
	*ygnmi.NodePath
}

// Inline (container): Set the extended community values for the action inline with
// a list.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "inline"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPath) Inline() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"inline"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Inline (container): Set the extended community values for the action inline with
// a list.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "inline"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPathAny) Inline() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"inline"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Method (leaf): Indicates the method used to specify the extended
// communities for the set-ext-community action
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/method"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/*/method"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPath) Method() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "method"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Method (leaf): Indicates the method used to specify the extended
// communities for the set-ext-community action
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/method"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/*/method"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPathAny) Method() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "method"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Options (leaf): Options for modifying the community attribute with
// the specified values.  These options apply to both
// methods of setting the community attribute.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/*/options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPath) Options() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Options (leaf): Options for modifying the community attribute with
// the specified values.  These options apply to both
// methods of setting the community attribute.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/*/options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPathAny) Options() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Reference (container): Provide a reference to an extended community set for the
// set-ext-community action
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "reference"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPath) Reference() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"reference"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Reference (container): Provide a reference to an extended community set for the
// set-ext-community action
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "reference"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPathAny) Reference() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"reference"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline/state/communities YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline/state/communities YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/communities"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline/state/communities"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPath) State() ygnmi.SingletonQuery[[]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_Communities_Union] {
	return ygnmi.NewSingletonQuery[[]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_Communities_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "communities"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_Communities_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline).Communities
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/communities"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline/state/communities"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPathAny) State() ygnmi.WildcardQuery[[]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_Communities_Union] {
	return ygnmi.NewWildcardQuery[[]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_Communities_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "communities"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_Communities_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline).Communities
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/communities"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline/config/communities"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPath) Config() ygnmi.ConfigQuery[[]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_Communities_Union] {
	return ygnmi.NewConfigQuery[[]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_Communities_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "communities"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_Communities_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline).Communities
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/communities"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline/config/communities"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPathAny) Config() ygnmi.WildcardQuery[[]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_Communities_Union] {
	return ygnmi.NewWildcardQuery[[]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_Communities_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "communities"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_Communities_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline).Communities
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePathAny struct {
	*ygnmi.NodePath
}

// Communities (leaf-list): Set the extended community values for the update inline
// with a list.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/communities"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline/*/communities"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePath) Communities() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "communities"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Communities (leaf-list): Set the extended community values for the update inline
// with a list.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/communities"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline/*/communities"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePathAny) Communities() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "communities"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference/state/ext-community-set-ref YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference/state/ext-community-set-ref YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/ext-community-set-ref"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference/state/ext-community-set-ref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ext-community-set-ref"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference).ExtCommunitySetRef
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/ext-community-set-ref"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference/state/ext-community-set-ref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ext-community-set-ref"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference).ExtCommunitySetRef
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/ext-community-set-ref"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference/config/ext-community-set-ref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ext-community-set-ref"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference).ExtCommunitySetRef
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/ext-community-set-ref"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference/config/ext-community-set-ref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ext-community-set-ref"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference).ExtCommunitySetRef
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference/state/ext-community-set-refs YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference/state/ext-community-set-refs YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/ext-community-set-refs"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference/state/ext-community-set-refs"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefsPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ext-community-set-refs"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference).ExtCommunitySetRefs
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/ext-community-set-refs"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference/state/ext-community-set-refs"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefsPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ext-community-set-refs"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference).ExtCommunitySetRefs
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/ext-community-set-refs"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference/config/ext-community-set-refs"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefsPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ext-community-set-refs"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference).ExtCommunitySetRefs
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/ext-community-set-refs"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference/config/ext-community-set-refs"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefsPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ext-community-set-refs"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference).ExtCommunitySetRefs
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePathAny struct {
	*ygnmi.NodePath
}

// ExtCommunitySetRef (leaf): References a defined extended community set by
// name
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/ext-community-set-ref"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference/*/ext-community-set-ref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePath) ExtCommunitySetRef() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ext-community-set-ref"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExtCommunitySetRef (leaf): References a defined extended community set by
// name
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/ext-community-set-ref"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference/*/ext-community-set-ref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePathAny) ExtCommunitySetRef() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ext-community-set-ref"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExtCommunitySetRefs (leaf-list): References a list of defined extended community sets by
// name
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/ext-community-set-refs"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference/*/ext-community-set-refs"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePath) ExtCommunitySetRefs() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefsPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ext-community-set-refs"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExtCommunitySetRefs (leaf-list): References a list of defined extended community sets by
// name
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/ext-community-set-refs"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference/*/ext-community-set-refs"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePathAny) ExtCommunitySetRefs() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefsPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ext-community-set-refs"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetLevelPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions/state/set-level YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetLevelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetLevelPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions/state/set-level YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetLevelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-isis-policy"
//	Path from parent:     "state/set-level"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions/state/set-level"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetLevelPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-level"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions).SetLevel
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-isis-policy"
//	Path from parent:     "state/set-level"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions/state/set-level"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetLevelPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-level"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions).SetLevel
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-isis-policy"
//	Path from parent:     "config/set-level"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions/config/set-level"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetLevelPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-level"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions).SetLevel
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-isis-policy"
//	Path from parent:     "config/set-level"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions/config/set-level"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetLevelPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-level"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions).SetLevel
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions/state/set-metric YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions/state/set-metric YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-isis-policy"
//	Path from parent:     "state/set-metric"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions/state/set-metric"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions).SetMetric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-isis-policy"
//	Path from parent:     "state/set-metric"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions/state/set-metric"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions).SetMetric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-isis-policy"
//	Path from parent:     "config/set-metric"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions/config/set-metric"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions).SetMetric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-isis-policy"
//	Path from parent:     "config/set-metric"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions/config/set-metric"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions).SetMetric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricStyleTypePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions/state/set-metric-style-type YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricStyleTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricStyleTypePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions/state/set-metric-style-type YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricStyleTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-isis-policy"
//	Path from parent:     "state/set-metric-style-type"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions/state/set-metric-style-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricStyleTypePath) State() ygnmi.SingletonQuery[oc.E_IsisPolicy_MetricStyle] {
	return ygnmi.NewSingletonQuery[oc.E_IsisPolicy_MetricStyle](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-metric-style-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisPolicy_MetricStyle, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions).SetMetricStyleType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-isis-policy"
//	Path from parent:     "state/set-metric-style-type"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions/state/set-metric-style-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricStyleTypePathAny) State() ygnmi.WildcardQuery[oc.E_IsisPolicy_MetricStyle] {
	return ygnmi.NewWildcardQuery[oc.E_IsisPolicy_MetricStyle](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-metric-style-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisPolicy_MetricStyle, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions).SetMetricStyleType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-isis-policy"
//	Path from parent:     "config/set-metric-style-type"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions/config/set-metric-style-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricStyleTypePath) Config() ygnmi.ConfigQuery[oc.E_IsisPolicy_MetricStyle] {
	return ygnmi.NewConfigQuery[oc.E_IsisPolicy_MetricStyle](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-metric-style-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisPolicy_MetricStyle, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions).SetMetricStyleType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-isis-policy"
//	Path from parent:     "config/set-metric-style-type"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions/config/set-metric-style-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricStyleTypePathAny) Config() ygnmi.WildcardQuery[oc.E_IsisPolicy_MetricStyle] {
	return ygnmi.NewWildcardQuery[oc.E_IsisPolicy_MetricStyle](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-metric-style-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisPolicy_MetricStyle, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions).SetMetricStyleType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricTypePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions/state/set-metric-type YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricTypePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions/state/set-metric-type YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-isis-policy"
//	Path from parent:     "state/set-metric-type"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions/state/set-metric-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricTypePath) State() ygnmi.SingletonQuery[oc.E_IsisPolicy_MetricType] {
	return ygnmi.NewSingletonQuery[oc.E_IsisPolicy_MetricType](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-metric-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisPolicy_MetricType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions).SetMetricType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-isis-policy"
//	Path from parent:     "state/set-metric-type"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions/state/set-metric-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricTypePathAny) State() ygnmi.WildcardQuery[oc.E_IsisPolicy_MetricType] {
	return ygnmi.NewWildcardQuery[oc.E_IsisPolicy_MetricType](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-metric-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisPolicy_MetricType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions).SetMetricType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-isis-policy"
//	Path from parent:     "config/set-metric-type"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions/config/set-metric-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricTypePath) Config() ygnmi.ConfigQuery[oc.E_IsisPolicy_MetricType] {
	return ygnmi.NewConfigQuery[oc.E_IsisPolicy_MetricType](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-metric-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisPolicy_MetricType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions).SetMetricType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-isis-policy"
//	Path from parent:     "config/set-metric-type"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions/config/set-metric-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricTypePathAny) Config() ygnmi.WildcardQuery[oc.E_IsisPolicy_MetricType] {
	return ygnmi.NewWildcardQuery[oc.E_IsisPolicy_MetricType](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-metric-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisPolicy_MetricType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions).SetMetricType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActionsPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActionsPathAny struct {
	*ygnmi.NodePath
}

// SetLevel (leaf): Set the level that a prefix is to be imported into.
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/set-level"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions/*/set-level"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActionsPath) SetLevel() *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetLevelPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetLevelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-level"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetLevel (leaf): Set the level that a prefix is to be imported into.
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/set-level"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions/*/set-level"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActionsPathAny) SetLevel() *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetLevelPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetLevelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-level"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMetric (leaf): Set the metric of the IS-IS prefix
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/set-metric"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions/*/set-metric"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActionsPath) SetMetric() *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMetric (leaf): Set the metric of the IS-IS prefix
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/set-metric"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions/*/set-metric"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActionsPathAny) SetMetric() *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMetricStyleType (leaf): Set the style of the metric
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/set-metric-style-type"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions/*/set-metric-style-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActionsPath) SetMetricStyleType() *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricStyleTypePath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricStyleTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-metric-style-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMetricStyleType (leaf): Set the style of the metric
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/set-metric-style-type"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions/*/set-metric-style-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActionsPathAny) SetMetricStyleType() *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricStyleTypePathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricStyleTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-metric-style-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMetricType (leaf): This leaf sets the type of metric that is to be specified
// when the set-metric leaf is specified
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/set-metric-type"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions/*/set-metric-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActionsPath) SetMetricType() *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricTypePath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-metric-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMetricType (leaf): This leaf sets the type of metric that is to be specified
// when the set-metric leaf is specified
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/set-metric-type"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions/*/set-metric-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActionsPathAny) SetMetricType() *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricTypePathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-metric-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActionsPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActionsPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActionsPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActionsPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetAreaPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/state/set-area YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetAreaPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetAreaPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/state/set-area YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetAreaPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-ospf-policy"
//	Path from parent:     "state/set-area"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/state/set-area"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetAreaPath) State() ygnmi.SingletonQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetArea_Union] {
	return ygnmi.NewSingletonQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetArea_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-area"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetArea_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions).SetArea
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-ospf-policy"
//	Path from parent:     "state/set-area"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/state/set-area"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetAreaPathAny) State() ygnmi.WildcardQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetArea_Union] {
	return ygnmi.NewWildcardQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetArea_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-area"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetArea_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions).SetArea
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-ospf-policy"
//	Path from parent:     "config/set-area"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/config/set-area"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetAreaPath) Config() ygnmi.ConfigQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetArea_Union] {
	return ygnmi.NewConfigQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetArea_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-area"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetArea_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions).SetArea
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-ospf-policy"
//	Path from parent:     "config/set-area"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/config/set-area"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetAreaPathAny) Config() ygnmi.WildcardQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetArea_Union] {
	return ygnmi.NewWildcardQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetArea_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-area"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetArea_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions).SetArea
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPathAny struct {
	*ygnmi.NodePath
}

// SetArea (leaf): Set the area for the matched route. This action is typically
// used when importing prefixes into OSPF, such that a route can
// be imported into a specific area within the instance.
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/set-area"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/*/set-area"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPath) SetArea() *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetAreaPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetAreaPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-area"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetArea (leaf): Set the area for the matched route. This action is typically
// used when importing prefixes into OSPF, such that a route can
// be imported into a specific area within the instance.
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/set-area"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/*/set-area"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPathAny) SetArea() *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetAreaPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetAreaPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-area"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMetric (container): Configuration and state parameters relating to manipulating
// the OSPF metric
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "set-metric"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPath) SetMetric() *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"set-metric"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SetMetric (container): Configuration and state parameters relating to manipulating
// the OSPF metric
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "set-metric"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPathAny) SetMetric() *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"set-metric"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric/state/metric YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric/state/metric YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-ospf-policy"
//	Path from parent:     "state/metric"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric/state/metric"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric).Metric
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-ospf-policy"
//	Path from parent:     "state/metric"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric/state/metric"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric).Metric
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-ospf-policy"
//	Path from parent:     "config/metric"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric/config/metric"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric).Metric
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-ospf-policy"
//	Path from parent:     "config/metric"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric/config/metric"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric).Metric
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricTypePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric/state/metric-type YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricTypePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric/state/metric-type YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-ospf-policy"
//	Path from parent:     "state/metric-type"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric/state/metric-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricTypePath) State() ygnmi.SingletonQuery[oc.E_SetMetric_MetricType] {
	return ygnmi.NewSingletonQuery[oc.E_SetMetric_MetricType](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SetMetric_MetricType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric).MetricType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-ospf-policy"
//	Path from parent:     "state/metric-type"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric/state/metric-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricTypePathAny) State() ygnmi.WildcardQuery[oc.E_SetMetric_MetricType] {
	return ygnmi.NewWildcardQuery[oc.E_SetMetric_MetricType](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SetMetric_MetricType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric).MetricType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-ospf-policy"
//	Path from parent:     "config/metric-type"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric/config/metric-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricTypePath) Config() ygnmi.ConfigQuery[oc.E_SetMetric_MetricType] {
	return ygnmi.NewConfigQuery[oc.E_SetMetric_MetricType](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metric-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SetMetric_MetricType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric).MetricType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-ospf-policy"
//	Path from parent:     "config/metric-type"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric/config/metric-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricTypePathAny) Config() ygnmi.WildcardQuery[oc.E_SetMetric_MetricType] {
	return ygnmi.NewWildcardQuery[oc.E_SetMetric_MetricType](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metric-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SetMetric_MetricType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric).MetricType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPathAny struct {
	*ygnmi.NodePath
}

// Metric (leaf): Set the metric of the routes matching the policy to the value
// specified by this leaf.
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/metric"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric/*/metric"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPath) Metric() *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): Set the metric of the routes matching the policy to the value
// specified by this leaf.
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/metric"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric/*/metric"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPathAny) Metric() *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MetricType (leaf): Specify the type of metric which is to be set by the policy
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/metric-type"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric/*/metric-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPath) MetricType() *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricTypePath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metric-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MetricType (leaf): Specify the type of metric which is to be set by the policy
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/metric-type"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric/*/metric-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPathAny) MetricType() *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricTypePathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metric-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/state/mode YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/state/mode YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/mode"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/state/mode"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePath) State() ygnmi.SingletonQuery[oc.E_SetTag_Mode] {
	return ygnmi.NewSingletonQuery[oc.E_SetTag_Mode](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SetTag_Mode, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/mode"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/state/mode"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePathAny) State() ygnmi.WildcardQuery[oc.E_SetTag_Mode] {
	return ygnmi.NewWildcardQuery[oc.E_SetTag_Mode](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SetTag_Mode, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/mode"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/config/mode"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePath) Config() ygnmi.ConfigQuery[oc.E_SetTag_Mode] {
	return ygnmi.NewConfigQuery[oc.E_SetTag_Mode](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SetTag_Mode, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/mode"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/config/mode"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePathAny) Config() ygnmi.WildcardQuery[oc.E_SetTag_Mode] {
	return ygnmi.NewWildcardQuery[oc.E_SetTag_Mode](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SetTag_Mode, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny struct {
	*ygnmi.NodePath
}

// Inline (container): The tags specified in this container are set on a route using
// the values directly. It is applicable when the mode of application
// is explicitly specified as INLINE.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "inline"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath) Inline() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"inline"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Inline (container): The tags specified in this container are set on a route using
// the values directly. It is applicable when the mode of application
// is explicitly specified as INLINE.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "inline"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny) Inline() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"inline"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Mode (leaf): This leaf controls the source of the tags that are set as a result
// of the action. In the case that the INLINE value is specified, the
// list of tags specified within the action is applied to matching prefixes.
// In the case that the REFERENCE value is specified, a pre-defined set of
// tags is utilised.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/mode"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/*/mode"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath) Mode() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mode (leaf): This leaf controls the source of the tags that are set as a result
// of the action. In the case that the INLINE value is specified, the
// list of tags specified within the action is applied to matching prefixes.
// In the case that the REFERENCE value is specified, a pre-defined set of
// tags is utilised.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/mode"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/*/mode"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny) Mode() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Reference (container): This container is applicable when the mode of application is explicitly
// specified to as REFERENCE. The tags set on a route are those that are
// specified within the tag-set
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "reference"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath) Reference() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"reference"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Reference (container): This container is applicable when the mode of application is explicitly
// specified to as REFERENCE. The tags set on a route are those that are
// specified within the tag-set
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "reference"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny) Reference() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"reference"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline/state/tag YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline/state/tag YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/tag"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline/state/tag"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPath) State() ygnmi.SingletonQuery[[]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_Tag_Union] {
	return ygnmi.NewSingletonQuery[[]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_Tag_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tag"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_Tag_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline).Tag
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/tag"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline/state/tag"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPathAny) State() ygnmi.WildcardQuery[[]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_Tag_Union] {
	return ygnmi.NewWildcardQuery[[]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_Tag_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tag"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_Tag_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline).Tag
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/tag"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline/config/tag"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPath) Config() ygnmi.ConfigQuery[[]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_Tag_Union] {
	return ygnmi.NewConfigQuery[[]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_Tag_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tag"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_Tag_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline).Tag
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/tag"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline/config/tag"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPathAny) Config() ygnmi.WildcardQuery[[]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_Tag_Union] {
	return ygnmi.NewWildcardQuery[[]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_Tag_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tag"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_Tag_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline).Tag
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePathAny struct {
	*ygnmi.NodePath
}

// Tag (leaf-list): Set one or more tags for prefixes that match the specified condition(s)
// using the specified tag values. When a tag is set it MUST be possible to
// match the value set in subsequent policies on the local device. Where the
// protocol that is carrying the prefix has a tag field (OSPF, and IS-IS in
// particular) the tag MUST be set in the corresponding protocol advertisements
// of the prefix.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/tag"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline/*/tag"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePath) Tag() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tag"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Tag (leaf-list): Set one or more tags for prefixes that match the specified condition(s)
// using the specified tag values. When a tag is set it MUST be possible to
// match the value set in subsequent policies on the local device. Where the
// protocol that is carrying the prefix has a tag field (OSPF, and IS-IS in
// particular) the tag MUST be set in the corresponding protocol advertisements
// of the prefix.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/tag"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline/*/tag"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePathAny) Tag() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tag"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference/state/tag-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference/state/tag-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/tag-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference/state/tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tag-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference).TagSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/tag-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference/state/tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tag-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference).TagSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/tag-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference/config/tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tag-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference).TagSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/tag-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference/config/tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tag-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference).TagSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePathAny struct {
	*ygnmi.NodePath
}

// TagSet (leaf): Use the referenced tag-set to set tags on the prefixes that match the
// specified conditions. When a tag is set it MUST be possible to match the
// value set in subsequent policies on the local device. where the protocol that
// is carrying the prefix has a tag field (OSPF, and IS-IS for in particular)
// the tag MUST be set in the corresponding protocol advertisements of the
// prefix.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/tag-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference/*/tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePath) TagSet() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tag-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TagSet (leaf): Use the referenced tag-set to set tags on the prefixes that match the
// specified conditions. When a tag is set it MUST be possible to match the
// value set in subsequent policies on the local device. where the protocol that
// is carrying the prefix has a tag field (OSPF, and IS-IS for in particular)
// the tag MUST be set in the corresponding protocol advertisements of the
// prefix.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/tag-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference/*/tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePathAny) TagSet() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tag-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/state/call-policy YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/state/call-policy YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/call-policy"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/state/call-policy"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "call-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions).CallPolicy
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/call-policy"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/state/call-policy"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "call-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions).CallPolicy
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/call-policy"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/config/call-policy"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "call-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions).CallPolicy
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/call-policy"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/config/call-policy"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "call-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions).CallPolicy
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/state/install-protocol-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/state/install-protocol-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/install-protocol-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/state/install-protocol-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPath) State() ygnmi.SingletonQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "install-protocol-eq"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions).InstallProtocolEq
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/install-protocol-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/state/install-protocol-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPathAny) State() ygnmi.WildcardQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "install-protocol-eq"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions).InstallProtocolEq
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/install-protocol-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/config/install-protocol-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPath) Config() ygnmi.ConfigQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "install-protocol-eq"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions).InstallProtocolEq
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/install-protocol-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/config/install-protocol-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPathAny) Config() ygnmi.WildcardQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "install-protocol-eq"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions).InstallProtocolEq
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_ConditionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_ConditionsPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny struct {
	*ygnmi.NodePath
}

// BgpConditions (container): Top-level container
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "bgp-conditions"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) BgpConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bgp-conditions"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// BgpConditions (container): Top-level container
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "bgp-conditions"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) BgpConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bgp-conditions"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// CallPolicy (leaf): Applies the statements from the specified policy
// definition and then returns control the current
// policy statement. Note that the called policy may
// itself call other policies (subject to
// implementation limitations). This is intended to
// provide a policy 'subroutine' capability.  The
// called policy should contain an explicit or a
// default route disposition that returns an
// effective true (accept-route) or false
// (reject-route), otherwise the behavior may be
// ambiguous and implementation dependent
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/call-policy"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/*/call-policy"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) CallPolicy() *RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "call-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CallPolicy (leaf): Applies the statements from the specified policy
// definition and then returns control the current
// policy statement. Note that the called policy may
// itself call other policies (subject to
// implementation limitations). This is intended to
// provide a policy 'subroutine' capability.  The
// called policy should contain an explicit or a
// default route disposition that returns an
// effective true (accept-route) or false
// (reject-route), otherwise the behavior may be
// ambiguous and implementation dependent
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/call-policy"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/*/call-policy"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) CallPolicy() *RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "call-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InstallProtocolEq (leaf): Condition to check the protocol / method used to install
// the route into the local routing table
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/install-protocol-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/*/install-protocol-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) InstallProtocolEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "install-protocol-eq"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InstallProtocolEq (leaf): Condition to check the protocol / method used to install
// the route into the local routing table
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/install-protocol-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/*/install-protocol-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) InstallProtocolEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "install-protocol-eq"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IsisConditions (container): Match conditions relating to the IS-IS protocol
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "isis-conditions"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/isis-conditions"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) IsisConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditionsPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"isis-conditions"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// IsisConditions (container): Match conditions relating to the IS-IS protocol
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "isis-conditions"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/isis-conditions"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) IsisConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditionsPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"isis-conditions"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MatchInterface (container): Top-level container for interface match conditions
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "match-interface"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) MatchInterface() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"match-interface"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MatchInterface (container): Top-level container for interface match conditions
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "match-interface"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) MatchInterface() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"match-interface"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MatchNeighborSet (container): Match a referenced neighbor set according to the logic
// defined in the match-set-options-leaf
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "match-neighbor-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) MatchNeighborSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"match-neighbor-set"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MatchNeighborSet (container): Match a referenced neighbor set according to the logic
// defined in the match-set-options-leaf
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "match-neighbor-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) MatchNeighborSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"match-neighbor-set"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MatchPrefixSet (container): Match a referenced prefix-set according to the logic
// defined in the match-set-options leaf
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "match-prefix-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) MatchPrefixSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"match-prefix-set"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MatchPrefixSet (container): Match a referenced prefix-set according to the logic
// defined in the match-set-options leaf
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "match-prefix-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) MatchPrefixSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"match-prefix-set"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MatchTagSet (container): Match a referenced tag set according to the logic defined
// in the match-options-set leaf
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "match-tag-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) MatchTagSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"match-tag-set"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MatchTagSet (container): Match a referenced tag set according to the logic defined
// in the match-options-set leaf
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "match-tag-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) MatchTagSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"match-tag-set"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// OspfConditions (container): Match conditions specific to OSPF
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "ospf-conditions"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/ospf-conditions"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) OspfConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditionsPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ospf-conditions"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// OspfConditions (container): Match conditions specific to OSPF
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "ospf-conditions"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/ospf-conditions"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) OspfConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditionsPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ospf-conditions"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/afi-safi-in YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/afi-safi-in YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/afi-safi-in"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/afi-safi-in"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPath) State() ygnmi.SingletonQuery[[]oc.E_BgpTypes_AFI_SAFI_TYPE] {
	return ygnmi.NewSingletonQuery[[]oc.E_BgpTypes_AFI_SAFI_TYPE](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "afi-safi-in"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_BgpTypes_AFI_SAFI_TYPE, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions).AfiSafiIn
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/afi-safi-in"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/afi-safi-in"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPathAny) State() ygnmi.WildcardQuery[[]oc.E_BgpTypes_AFI_SAFI_TYPE] {
	return ygnmi.NewWildcardQuery[[]oc.E_BgpTypes_AFI_SAFI_TYPE](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "afi-safi-in"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_BgpTypes_AFI_SAFI_TYPE, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions).AfiSafiIn
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/afi-safi-in"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/afi-safi-in"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPath) Config() ygnmi.ConfigQuery[[]oc.E_BgpTypes_AFI_SAFI_TYPE] {
	return ygnmi.NewConfigQuery[[]oc.E_BgpTypes_AFI_SAFI_TYPE](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "afi-safi-in"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_BgpTypes_AFI_SAFI_TYPE, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions).AfiSafiIn
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/afi-safi-in"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/afi-safi-in"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPathAny) Config() ygnmi.WildcardQuery[[]oc.E_BgpTypes_AFI_SAFI_TYPE] {
	return ygnmi.NewWildcardQuery[[]oc.E_BgpTypes_AFI_SAFI_TYPE](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "afi-safi-in"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_BgpTypes_AFI_SAFI_TYPE, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions).AfiSafiIn
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/community-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/community-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/community-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "community-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions).CommunitySet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/community-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "community-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions).CommunitySet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/community-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "community-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions).CommunitySet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/community-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "community-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions).CommunitySet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/ext-community-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/ext-community-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/ext-community-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/ext-community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ext-community-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions).ExtCommunitySet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/ext-community-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/ext-community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ext-community-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions).ExtCommunitySet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/ext-community-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/ext-community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ext-community-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions).ExtCommunitySet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/ext-community-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/ext-community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ext-community-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions).ExtCommunitySet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/local-pref-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/local-pref-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/local-pref-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/local-pref-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "local-pref-eq"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions).LocalPrefEq
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/local-pref-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/local-pref-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "local-pref-eq"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions).LocalPrefEq
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/local-pref-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/local-pref-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "local-pref-eq"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions).LocalPrefEq
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/local-pref-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/local-pref-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "local-pref-eq"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions).LocalPrefEq
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/med-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/med-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/med-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/med-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "med-eq"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions).MedEq
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/med-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/med-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "med-eq"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions).MedEq
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/med-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/med-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "med-eq"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions).MedEq
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/med-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/med-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "med-eq"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions).MedEq
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/next-hop-in YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/next-hop-in YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/next-hop-in"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/next-hop-in"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop-in"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions).NextHopIn
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/next-hop-in"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/next-hop-in"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop-in"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions).NextHopIn
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/next-hop-in"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/next-hop-in"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "next-hop-in"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions).NextHopIn
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/next-hop-in"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/next-hop-in"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "next-hop-in"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions).NextHopIn
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/origin-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/origin-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/origin-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/origin-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPath) State() ygnmi.SingletonQuery[oc.E_BgpPolicy_BgpOriginAttrType] {
	return ygnmi.NewSingletonQuery[oc.E_BgpPolicy_BgpOriginAttrType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "origin-eq"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpPolicy_BgpOriginAttrType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions).OriginEq
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/origin-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/origin-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPathAny) State() ygnmi.WildcardQuery[oc.E_BgpPolicy_BgpOriginAttrType] {
	return ygnmi.NewWildcardQuery[oc.E_BgpPolicy_BgpOriginAttrType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "origin-eq"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpPolicy_BgpOriginAttrType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions).OriginEq
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/origin-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/origin-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPath) Config() ygnmi.ConfigQuery[oc.E_BgpPolicy_BgpOriginAttrType] {
	return ygnmi.NewConfigQuery[oc.E_BgpPolicy_BgpOriginAttrType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "origin-eq"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpPolicy_BgpOriginAttrType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions).OriginEq
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/origin-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/origin-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPathAny) Config() ygnmi.WildcardQuery[oc.E_BgpPolicy_BgpOriginAttrType] {
	return ygnmi.NewWildcardQuery[oc.E_BgpPolicy_BgpOriginAttrType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "origin-eq"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpPolicy_BgpOriginAttrType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions).OriginEq
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/route-type YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/route-type YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/route-type"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/route-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePath) State() ygnmi.SingletonQuery[oc.E_BgpConditions_RouteType] {
	return ygnmi.NewSingletonQuery[oc.E_BgpConditions_RouteType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "route-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpConditions_RouteType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions).RouteType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/route-type"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/route-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePathAny) State() ygnmi.WildcardQuery[oc.E_BgpConditions_RouteType] {
	return ygnmi.NewWildcardQuery[oc.E_BgpConditions_RouteType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "route-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpConditions_RouteType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions).RouteType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/route-type"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/route-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePath) Config() ygnmi.ConfigQuery[oc.E_BgpConditions_RouteType] {
	return ygnmi.NewConfigQuery[oc.E_BgpConditions_RouteType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "route-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpConditions_RouteType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions).RouteType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/route-type"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/route-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePathAny) Config() ygnmi.WildcardQuery[oc.E_BgpConditions_RouteType] {
	return ygnmi.NewWildcardQuery[oc.E_BgpConditions_RouteType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "route-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpConditions_RouteType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions).RouteType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny struct {
	*ygnmi.NodePath
}

// AfiSafiIn (leaf-list): List of address families which the NLRI may be
// within
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/afi-safi-in"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/*/afi-safi-in"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) AfiSafiIn() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "afi-safi-in"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AfiSafiIn (leaf-list): List of address families which the NLRI may be
// within
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/afi-safi-in"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/*/afi-safi-in"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) AfiSafiIn() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "afi-safi-in"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AsPathLength (container): Value and comparison operations for conditions based on the
// length of the AS path in the route update
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "as-path-length"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) AsPathLength() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"as-path-length"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AsPathLength (container): Value and comparison operations for conditions based on the
// length of the AS path in the route update
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "as-path-length"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) AsPathLength() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"as-path-length"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// CommunityCount (container): Value and comparison operations for conditions based on the
// number of regular communities in the route update.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "community-count"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) CommunityCount() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"community-count"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// CommunityCount (container): Value and comparison operations for conditions based on the
// number of regular communities in the route update.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "community-count"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) CommunityCount() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"community-count"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// CommunitySet (leaf): References a defined community set
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/community-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/*/community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) CommunitySet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "community-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CommunitySet (leaf): References a defined community set
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/community-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/*/community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) CommunitySet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "community-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExtCommunityCount (container): Value and comparison operations for conditions based on the
// number of extended communities in the route update.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "ext-community-count"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/ext-community-count"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) ExtCommunityCount() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCountPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCountPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ext-community-count"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ExtCommunityCount (container): Value and comparison operations for conditions based on the
// number of extended communities in the route update.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "ext-community-count"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/ext-community-count"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) ExtCommunityCount() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCountPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCountPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ext-community-count"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ExtCommunitySet (leaf): References a defined extended community set
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/ext-community-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/*/ext-community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) ExtCommunitySet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ext-community-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExtCommunitySet (leaf): References a defined extended community set
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/ext-community-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/*/ext-community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) ExtCommunitySet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ext-community-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LocalPrefEq (leaf): Condition to check if the local pref attribute is equal to
// the specified value
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/local-pref-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/*/local-pref-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) LocalPrefEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "local-pref-eq"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LocalPrefEq (leaf): Condition to check if the local pref attribute is equal to
// the specified value
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/local-pref-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/*/local-pref-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) LocalPrefEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "local-pref-eq"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchAsPathSet (container): Match a referenced as-path set according to the logic
// defined in the match-set-options leaf
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "match-as-path-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) MatchAsPathSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"match-as-path-set"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MatchAsPathSet (container): Match a referenced as-path set according to the logic
// defined in the match-set-options leaf
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "match-as-path-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) MatchAsPathSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"match-as-path-set"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MatchCommunitySet (container): Match a referenced community set according to the logic
// defined in the match-set-options leaf
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "match-community-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) MatchCommunitySet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySetPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"match-community-set"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MatchCommunitySet (container): Match a referenced community set according to the logic
// defined in the match-set-options leaf
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "match-community-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) MatchCommunitySet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySetPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"match-community-set"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MatchExtCommunitySet (container): Match a referenced extended community set according to the logic
// defined in the match-set-options leaf
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "match-ext-community-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-ext-community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) MatchExtCommunitySet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySetPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"match-ext-community-set"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MatchExtCommunitySet (container): Match a referenced extended community set according to the logic
// defined in the match-set-options leaf
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "match-ext-community-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-ext-community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) MatchExtCommunitySet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySetPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"match-ext-community-set"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MedEq (leaf): Condition to check if the received MED value is equal to
// the specified value
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/med-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/*/med-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) MedEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "med-eq"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MedEq (leaf): Condition to check if the received MED value is equal to
// the specified value
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/med-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/*/med-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) MedEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "med-eq"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHopIn (leaf-list): List of next hop addresses to check for in the route
// update
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/next-hop-in"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/*/next-hop-in"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) NextHopIn() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "next-hop-in"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHopIn (leaf-list): List of next hop addresses to check for in the route
// update
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/next-hop-in"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/*/next-hop-in"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) NextHopIn() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "next-hop-in"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OriginEq (leaf): Condition to check if the route origin is equal to the
// specified value
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/origin-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/*/origin-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) OriginEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "origin-eq"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OriginEq (leaf): Condition to check if the route origin is equal to the
// specified value
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/origin-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/*/origin-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) OriginEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "origin-eq"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RouteType (leaf): Condition to check the route type in the route update
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/route-type"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/*/route-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) RouteType() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "route-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RouteType (leaf): Condition to check the route type in the route update
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/route-type"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/*/route-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) RouteType() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "route-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/state/operator YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/state/operator YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/operator"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/state/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPath) State() ygnmi.SingletonQuery[oc.E_PolicyTypes_ATTRIBUTE_COMPARISON] {
	return ygnmi.NewSingletonQuery[oc.E_PolicyTypes_ATTRIBUTE_COMPARISON](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "operator"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_ATTRIBUTE_COMPARISON, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength).Operator
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/operator"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/state/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPathAny) State() ygnmi.WildcardQuery[oc.E_PolicyTypes_ATTRIBUTE_COMPARISON] {
	return ygnmi.NewWildcardQuery[oc.E_PolicyTypes_ATTRIBUTE_COMPARISON](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "operator"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_ATTRIBUTE_COMPARISON, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength).Operator
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/operator"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/config/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPath) Config() ygnmi.ConfigQuery[oc.E_PolicyTypes_ATTRIBUTE_COMPARISON] {
	return ygnmi.NewConfigQuery[oc.E_PolicyTypes_ATTRIBUTE_COMPARISON](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "operator"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_ATTRIBUTE_COMPARISON, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength).Operator
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/operator"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/config/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPathAny) Config() ygnmi.WildcardQuery[oc.E_PolicyTypes_ATTRIBUTE_COMPARISON] {
	return ygnmi.NewWildcardQuery[oc.E_PolicyTypes_ATTRIBUTE_COMPARISON](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "operator"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_ATTRIBUTE_COMPARISON, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength).Operator
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/state/value YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/state/value YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/value"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/state/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength).Value
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/value"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/state/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength).Value
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/value"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/config/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength).Value
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/value"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/config/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength).Value
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPathAny struct {
	*ygnmi.NodePath
}

// Operator (leaf): type of comparison to be performed
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/operator"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/*/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPath) Operator() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "operator"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Operator (leaf): type of comparison to be performed
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/operator"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/*/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPathAny) Operator() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "operator"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Value (leaf): value to compare with the community count
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/value"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/*/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPath) Value() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Value (leaf): value to compare with the community count
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/value"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/*/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPathAny) Value() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/state/operator YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/state/operator YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/operator"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/state/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPath) State() ygnmi.SingletonQuery[oc.E_PolicyTypes_ATTRIBUTE_COMPARISON] {
	return ygnmi.NewSingletonQuery[oc.E_PolicyTypes_ATTRIBUTE_COMPARISON](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "operator"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_ATTRIBUTE_COMPARISON, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount).Operator
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/operator"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/state/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPathAny) State() ygnmi.WildcardQuery[oc.E_PolicyTypes_ATTRIBUTE_COMPARISON] {
	return ygnmi.NewWildcardQuery[oc.E_PolicyTypes_ATTRIBUTE_COMPARISON](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "operator"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_ATTRIBUTE_COMPARISON, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount).Operator
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/operator"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/config/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPath) Config() ygnmi.ConfigQuery[oc.E_PolicyTypes_ATTRIBUTE_COMPARISON] {
	return ygnmi.NewConfigQuery[oc.E_PolicyTypes_ATTRIBUTE_COMPARISON](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "operator"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_ATTRIBUTE_COMPARISON, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount).Operator
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/operator"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/config/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPathAny) Config() ygnmi.WildcardQuery[oc.E_PolicyTypes_ATTRIBUTE_COMPARISON] {
	return ygnmi.NewWildcardQuery[oc.E_PolicyTypes_ATTRIBUTE_COMPARISON](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "operator"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_ATTRIBUTE_COMPARISON, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount).Operator
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/state/value YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/state/value YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/value"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/state/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount).Value
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/value"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/state/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount).Value
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/value"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/config/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount).Value
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/value"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/config/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount).Value
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPathAny struct {
	*ygnmi.NodePath
}

// Operator (leaf): type of comparison to be performed
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/operator"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/*/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPath) Operator() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "operator"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Operator (leaf): type of comparison to be performed
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/operator"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/*/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPathAny) Operator() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "operator"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Value (leaf): value to compare with the community count
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/value"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/*/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPath) Value() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Value (leaf): value to compare with the community count
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/value"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/*/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPathAny) Value() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount_OperatorPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/ext-community-count/state/operator YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount_OperatorPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount_OperatorPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/ext-community-count/state/operator YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount_OperatorPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/operator"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/ext-community-count/state/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount_OperatorPath) State() ygnmi.SingletonQuery[oc.E_PolicyTypes_ATTRIBUTE_COMPARISON] {
	return ygnmi.NewSingletonQuery[oc.E_PolicyTypes_ATTRIBUTE_COMPARISON](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "operator"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_ATTRIBUTE_COMPARISON, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount).Operator
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/operator"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/ext-community-count/state/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount_OperatorPathAny) State() ygnmi.WildcardQuery[oc.E_PolicyTypes_ATTRIBUTE_COMPARISON] {
	return ygnmi.NewWildcardQuery[oc.E_PolicyTypes_ATTRIBUTE_COMPARISON](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "operator"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_ATTRIBUTE_COMPARISON, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount).Operator
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/operator"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/ext-community-count/config/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount_OperatorPath) Config() ygnmi.ConfigQuery[oc.E_PolicyTypes_ATTRIBUTE_COMPARISON] {
	return ygnmi.NewConfigQuery[oc.E_PolicyTypes_ATTRIBUTE_COMPARISON](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "operator"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_ATTRIBUTE_COMPARISON, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount).Operator
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/operator"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/ext-community-count/config/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount_OperatorPathAny) Config() ygnmi.WildcardQuery[oc.E_PolicyTypes_ATTRIBUTE_COMPARISON] {
	return ygnmi.NewWildcardQuery[oc.E_PolicyTypes_ATTRIBUTE_COMPARISON](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "operator"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_ATTRIBUTE_COMPARISON, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount).Operator
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount_ValuePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/ext-community-count/state/value YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount_ValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount_ValuePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/ext-community-count/state/value YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount_ValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/value"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/ext-community-count/state/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount_ValuePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount).Value
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/value"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/ext-community-count/state/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount_ValuePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount).Value
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/value"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/ext-community-count/config/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount_ValuePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount).Value
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/value"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/ext-community-count/config/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount_ValuePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount).Value
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCountPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/ext-community-count YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCountPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCountPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/ext-community-count YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCountPathAny struct {
	*ygnmi.NodePath
}

// Operator (leaf): type of comparison to be performed
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/operator"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/ext-community-count/*/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCountPath) Operator() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount_OperatorPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount_OperatorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "operator"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Operator (leaf): type of comparison to be performed
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/operator"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/ext-community-count/*/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCountPathAny) Operator() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount_OperatorPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount_OperatorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "operator"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Value (leaf): value to compare with the community count
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/value"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/ext-community-count/*/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCountPath) Value() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount_ValuePath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount_ValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Value (leaf): value to compare with the community count
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/value"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/ext-community-count/*/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCountPathAny) Value() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount_ValuePathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount_ValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCountPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCountPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCountPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCountPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/state/as-path-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/state/as-path-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/as-path-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/state/as-path-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "as-path-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet).AsPathSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/as-path-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/state/as-path-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "as-path-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet).AsPathSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/as-path-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/config/as-path-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "as-path-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet).AsPathSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/as-path-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/config/as-path-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "as-path-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet).AsPathSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/state/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/state/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/state/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPath) State() ygnmi.SingletonQuery[oc.E_RoutingPolicy_MatchSetOptionsType] {
	return ygnmi.NewSingletonQuery[oc.E_RoutingPolicy_MatchSetOptionsType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_MatchSetOptionsType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/state/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPathAny) State() ygnmi.WildcardQuery[oc.E_RoutingPolicy_MatchSetOptionsType] {
	return ygnmi.NewWildcardQuery[oc.E_RoutingPolicy_MatchSetOptionsType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_MatchSetOptionsType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/config/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPath) Config() ygnmi.ConfigQuery[oc.E_RoutingPolicy_MatchSetOptionsType] {
	return ygnmi.NewConfigQuery[oc.E_RoutingPolicy_MatchSetOptionsType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_MatchSetOptionsType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/config/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPathAny) Config() ygnmi.WildcardQuery[oc.E_RoutingPolicy_MatchSetOptionsType] {
	return ygnmi.NewWildcardQuery[oc.E_RoutingPolicy_MatchSetOptionsType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_MatchSetOptionsType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPathAny struct {
	*ygnmi.NodePath
}

// AsPathSet (leaf): References a defined AS path set
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/as-path-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/*/as-path-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPath) AsPathSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "as-path-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AsPathSet (leaf): References a defined AS path set
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/as-path-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/*/as-path-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPathAny) AsPathSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "as-path-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/*/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPath) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "match-set-options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/*/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPathAny) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "match-set-options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet_CommunitySetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-community-set/state/community-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet_CommunitySetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet_CommunitySetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-community-set/state/community-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet_CommunitySetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/community-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-community-set/state/community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet_CommunitySetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "community-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet).CommunitySet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/community-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-community-set/state/community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet_CommunitySetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "community-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet).CommunitySet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/community-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-community-set/config/community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet_CommunitySetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "community-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet).CommunitySet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/community-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-community-set/config/community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet_CommunitySetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "community-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet).CommunitySet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet_MatchSetOptionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-community-set/state/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet_MatchSetOptionsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet_MatchSetOptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-community-set/state/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet_MatchSetOptionsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-community-set/state/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet_MatchSetOptionsPath) State() ygnmi.SingletonQuery[oc.E_RoutingPolicy_MatchSetOptionsType] {
	return ygnmi.NewSingletonQuery[oc.E_RoutingPolicy_MatchSetOptionsType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_MatchSetOptionsType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-community-set/state/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet_MatchSetOptionsPathAny) State() ygnmi.WildcardQuery[oc.E_RoutingPolicy_MatchSetOptionsType] {
	return ygnmi.NewWildcardQuery[oc.E_RoutingPolicy_MatchSetOptionsType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_MatchSetOptionsType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-community-set/config/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet_MatchSetOptionsPath) Config() ygnmi.ConfigQuery[oc.E_RoutingPolicy_MatchSetOptionsType] {
	return ygnmi.NewConfigQuery[oc.E_RoutingPolicy_MatchSetOptionsType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_MatchSetOptionsType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-community-set/config/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet_MatchSetOptionsPathAny) Config() ygnmi.WildcardQuery[oc.E_RoutingPolicy_MatchSetOptionsType] {
	return ygnmi.NewWildcardQuery[oc.E_RoutingPolicy_MatchSetOptionsType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_MatchSetOptionsType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-community-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySetPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-community-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySetPathAny struct {
	*ygnmi.NodePath
}

// CommunitySet (leaf): References a defined community set
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/community-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-community-set/*/community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySetPath) CommunitySet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet_CommunitySetPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet_CommunitySetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "community-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CommunitySet (leaf): References a defined community set
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/community-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-community-set/*/community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySetPathAny) CommunitySet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet_CommunitySetPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet_CommunitySetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "community-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-community-set/*/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySetPath) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet_MatchSetOptionsPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet_MatchSetOptionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "match-set-options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-community-set/*/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySetPathAny) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet_MatchSetOptionsPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet_MatchSetOptionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "match-set-options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySetPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySetPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySetPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySetPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet_ExtCommunitySetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-ext-community-set/state/ext-community-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet_ExtCommunitySetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet_ExtCommunitySetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-ext-community-set/state/ext-community-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet_ExtCommunitySetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/ext-community-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-ext-community-set/state/ext-community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet_ExtCommunitySetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ext-community-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet).ExtCommunitySet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/ext-community-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-ext-community-set/state/ext-community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet_ExtCommunitySetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ext-community-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet).ExtCommunitySet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/ext-community-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-ext-community-set/config/ext-community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet_ExtCommunitySetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ext-community-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet).ExtCommunitySet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/ext-community-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-ext-community-set/config/ext-community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet_ExtCommunitySetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ext-community-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet).ExtCommunitySet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet_MatchSetOptionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-ext-community-set/state/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet_MatchSetOptionsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet_MatchSetOptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-ext-community-set/state/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet_MatchSetOptionsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-ext-community-set/state/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet_MatchSetOptionsPath) State() ygnmi.SingletonQuery[oc.E_RoutingPolicy_MatchSetOptionsType] {
	return ygnmi.NewSingletonQuery[oc.E_RoutingPolicy_MatchSetOptionsType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_MatchSetOptionsType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-ext-community-set/state/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet_MatchSetOptionsPathAny) State() ygnmi.WildcardQuery[oc.E_RoutingPolicy_MatchSetOptionsType] {
	return ygnmi.NewWildcardQuery[oc.E_RoutingPolicy_MatchSetOptionsType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_MatchSetOptionsType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-ext-community-set/config/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet_MatchSetOptionsPath) Config() ygnmi.ConfigQuery[oc.E_RoutingPolicy_MatchSetOptionsType] {
	return ygnmi.NewConfigQuery[oc.E_RoutingPolicy_MatchSetOptionsType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_MatchSetOptionsType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-ext-community-set/config/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet_MatchSetOptionsPathAny) Config() ygnmi.WildcardQuery[oc.E_RoutingPolicy_MatchSetOptionsType] {
	return ygnmi.NewWildcardQuery[oc.E_RoutingPolicy_MatchSetOptionsType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_MatchSetOptionsType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-ext-community-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySetPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-ext-community-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySetPathAny struct {
	*ygnmi.NodePath
}

// ExtCommunitySet (leaf): References a defined extended community set
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/ext-community-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-ext-community-set/*/ext-community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySetPath) ExtCommunitySet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet_ExtCommunitySetPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet_ExtCommunitySetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ext-community-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExtCommunitySet (leaf): References a defined extended community set
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/ext-community-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-ext-community-set/*/ext-community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySetPathAny) ExtCommunitySet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet_ExtCommunitySetPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet_ExtCommunitySetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ext-community-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-ext-community-set/*/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySetPath) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet_MatchSetOptionsPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet_MatchSetOptionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "match-set-options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-ext-community-set/*/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySetPathAny) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet_MatchSetOptionsPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet_MatchSetOptionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "match-set-options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySetPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySetPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySetPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySetPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions_LevelEqPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/isis-conditions/state/level-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions_LevelEqPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions_LevelEqPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/isis-conditions/state/level-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions_LevelEqPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-isis-policy"
//	Path from parent:     "state/level-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/isis-conditions/state/level-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions_LevelEqPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "level-eq"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions).LevelEq
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-isis-policy"
//	Path from parent:     "state/level-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/isis-conditions/state/level-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions_LevelEqPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "level-eq"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions).LevelEq
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-isis-policy"
//	Path from parent:     "config/level-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/isis-conditions/config/level-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions_LevelEqPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "level-eq"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions).LevelEq
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-isis-policy"
//	Path from parent:     "config/level-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/isis-conditions/config/level-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions_LevelEqPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "level-eq"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions).LevelEq
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions_MatchMetricTypePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/isis-conditions/state/match-metric-type YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions_MatchMetricTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions_MatchMetricTypePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/isis-conditions/state/match-metric-type YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions_MatchMetricTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-isis-policy"
//	Path from parent:     "state/match-metric-type"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/isis-conditions/state/match-metric-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions_MatchMetricTypePath) State() ygnmi.SingletonQuery[oc.E_IsisPolicy_MetricType] {
	return ygnmi.NewSingletonQuery[oc.E_IsisPolicy_MetricType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "match-metric-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisPolicy_MetricType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions).MatchMetricType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-isis-policy"
//	Path from parent:     "state/match-metric-type"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/isis-conditions/state/match-metric-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions_MatchMetricTypePathAny) State() ygnmi.WildcardQuery[oc.E_IsisPolicy_MetricType] {
	return ygnmi.NewWildcardQuery[oc.E_IsisPolicy_MetricType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "match-metric-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisPolicy_MetricType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions).MatchMetricType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-isis-policy"
//	Path from parent:     "config/match-metric-type"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/isis-conditions/config/match-metric-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions_MatchMetricTypePath) Config() ygnmi.ConfigQuery[oc.E_IsisPolicy_MetricType] {
	return ygnmi.NewConfigQuery[oc.E_IsisPolicy_MetricType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "match-metric-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisPolicy_MetricType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions).MatchMetricType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-isis-policy"
//	Path from parent:     "config/match-metric-type"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/isis-conditions/config/match-metric-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions_MatchMetricTypePathAny) Config() ygnmi.WildcardQuery[oc.E_IsisPolicy_MetricType] {
	return ygnmi.NewWildcardQuery[oc.E_IsisPolicy_MetricType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "match-metric-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisPolicy_MetricType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions).MatchMetricType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/isis-conditions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditionsPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/isis-conditions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditionsPathAny struct {
	*ygnmi.NodePath
}

// LevelEq (leaf): Match the level that the IS-IS prefix is within. This can
// be used in the case that import or export policies refer
// to an IS-IS instance that has multiple levels configured
// within it
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/level-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/isis-conditions/*/level-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditionsPath) LevelEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions_LevelEqPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions_LevelEqPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "level-eq"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LevelEq (leaf): Match the level that the IS-IS prefix is within. This can
// be used in the case that import or export policies refer
// to an IS-IS instance that has multiple levels configured
// within it
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/level-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/isis-conditions/*/level-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditionsPathAny) LevelEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions_LevelEqPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions_LevelEqPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "level-eq"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchMetricType (leaf): Matches the type of the route to redistribute to INTERNAL or EXTERNAL
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/match-metric-type"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/isis-conditions/*/match-metric-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditionsPath) MatchMetricType() *RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions_MatchMetricTypePath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions_MatchMetricTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "match-metric-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchMetricType (leaf): Matches the type of the route to redistribute to INTERNAL or EXTERNAL
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/match-metric-type"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/isis-conditions/*/match-metric-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditionsPathAny) MatchMetricType() *RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions_MatchMetricTypePathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions_MatchMetricTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "match-metric-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditionsPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditionsPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditionsPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditionsPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/state/interface YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/state/interface YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/interface"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/state/interface"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/interface"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/state/interface"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/interface"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/config/interface"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/interface"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/config/interface"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/state/subinterface YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/state/subinterface YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/state/subinterface"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/state/subinterface"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/config/subinterface"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/config/subinterface"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePathAny struct {
	*ygnmi.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/interface"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/*/interface"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePath) Interface() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/interface"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/*/interface"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePathAny) Interface() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is required, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/*/subinterface"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePath) Subinterface() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is required, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/*/subinterface"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePathAny) Subinterface() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/state/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/state/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/state/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPath) State() ygnmi.SingletonQuery[oc.E_RoutingPolicy_MatchSetOptionsRestrictedType] {
	return ygnmi.NewSingletonQuery[oc.E_RoutingPolicy_MatchSetOptionsRestrictedType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_MatchSetOptionsRestrictedType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/state/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPathAny) State() ygnmi.WildcardQuery[oc.E_RoutingPolicy_MatchSetOptionsRestrictedType] {
	return ygnmi.NewWildcardQuery[oc.E_RoutingPolicy_MatchSetOptionsRestrictedType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_MatchSetOptionsRestrictedType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/config/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPath) Config() ygnmi.ConfigQuery[oc.E_RoutingPolicy_MatchSetOptionsRestrictedType] {
	return ygnmi.NewConfigQuery[oc.E_RoutingPolicy_MatchSetOptionsRestrictedType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_MatchSetOptionsRestrictedType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/config/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPathAny) Config() ygnmi.WildcardQuery[oc.E_RoutingPolicy_MatchSetOptionsRestrictedType] {
	return ygnmi.NewWildcardQuery[oc.E_RoutingPolicy_MatchSetOptionsRestrictedType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_MatchSetOptionsRestrictedType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/state/neighbor-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/state/neighbor-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/neighbor-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/state/neighbor-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "neighbor-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet).NeighborSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/neighbor-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/state/neighbor-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "neighbor-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet).NeighborSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/neighbor-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/config/neighbor-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "neighbor-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet).NeighborSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/neighbor-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/config/neighbor-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "neighbor-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet).NeighborSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPathAny struct {
	*ygnmi.NodePath
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation.  This leaf only supports matching on ANY
// member of the set or inverting the match.  Matching on ALL is
// not supported
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/*/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPath) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "match-set-options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation.  This leaf only supports matching on ANY
// member of the set or inverting the match.  Matching on ALL is
// not supported
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/*/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPathAny) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "match-set-options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborSet (leaf): References a defined neighbor set
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/neighbor-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/*/neighbor-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPath) NeighborSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "neighbor-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborSet (leaf): References a defined neighbor set
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/neighbor-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/*/neighbor-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPathAny) NeighborSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "neighbor-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/state/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/state/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/state/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPath) State() ygnmi.SingletonQuery[oc.E_RoutingPolicy_MatchSetOptionsRestrictedType] {
	return ygnmi.NewSingletonQuery[oc.E_RoutingPolicy_MatchSetOptionsRestrictedType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_MatchSetOptionsRestrictedType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/state/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPathAny) State() ygnmi.WildcardQuery[oc.E_RoutingPolicy_MatchSetOptionsRestrictedType] {
	return ygnmi.NewWildcardQuery[oc.E_RoutingPolicy_MatchSetOptionsRestrictedType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_MatchSetOptionsRestrictedType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/config/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPath) Config() ygnmi.ConfigQuery[oc.E_RoutingPolicy_MatchSetOptionsRestrictedType] {
	return ygnmi.NewConfigQuery[oc.E_RoutingPolicy_MatchSetOptionsRestrictedType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_MatchSetOptionsRestrictedType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/config/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPathAny) Config() ygnmi.WildcardQuery[oc.E_RoutingPolicy_MatchSetOptionsRestrictedType] {
	return ygnmi.NewWildcardQuery[oc.E_RoutingPolicy_MatchSetOptionsRestrictedType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_MatchSetOptionsRestrictedType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/state/prefix-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/state/prefix-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/prefix-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/state/prefix-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet).PrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/prefix-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/state/prefix-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet).PrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/prefix-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/config/prefix-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet).PrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/prefix-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/config/prefix-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet).PrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPathAny struct {
	*ygnmi.NodePath
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation.  This leaf only supports matching on ANY
// member of the set or inverting the match.  Matching on ALL is
// not supported
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/*/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPath) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "match-set-options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation.  This leaf only supports matching on ANY
// member of the set or inverting the match.  Matching on ALL is
// not supported
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/*/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPathAny) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "match-set-options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixSet (leaf): References a defined prefix set
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/prefix-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/*/prefix-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPath) PrefixSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixSet (leaf): References a defined prefix set
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/prefix-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/*/prefix-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPathAny) PrefixSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/state/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/state/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/state/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPath) State() ygnmi.SingletonQuery[oc.E_RoutingPolicy_MatchSetOptionsRestrictedType] {
	return ygnmi.NewSingletonQuery[oc.E_RoutingPolicy_MatchSetOptionsRestrictedType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_MatchSetOptionsRestrictedType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/state/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPathAny) State() ygnmi.WildcardQuery[oc.E_RoutingPolicy_MatchSetOptionsRestrictedType] {
	return ygnmi.NewWildcardQuery[oc.E_RoutingPolicy_MatchSetOptionsRestrictedType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_MatchSetOptionsRestrictedType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/config/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPath) Config() ygnmi.ConfigQuery[oc.E_RoutingPolicy_MatchSetOptionsRestrictedType] {
	return ygnmi.NewConfigQuery[oc.E_RoutingPolicy_MatchSetOptionsRestrictedType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_MatchSetOptionsRestrictedType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/config/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPathAny) Config() ygnmi.WildcardQuery[oc.E_RoutingPolicy_MatchSetOptionsRestrictedType] {
	return ygnmi.NewWildcardQuery[oc.E_RoutingPolicy_MatchSetOptionsRestrictedType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_MatchSetOptionsRestrictedType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/state/tag-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/state/tag-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/tag-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/state/tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tag-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet).TagSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/tag-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/state/tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tag-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet).TagSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/tag-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/config/tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tag-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet).TagSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/tag-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/config/tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tag-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet).TagSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPathAny struct {
	*ygnmi.NodePath
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation.  This leaf only supports matching on ANY
// member of the set or inverting the match.  Matching on ALL is
// not supported
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/*/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPath) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "match-set-options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation.  This leaf only supports matching on ANY
// member of the set or inverting the match.  Matching on ALL is
// not supported
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/*/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPathAny) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "match-set-options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TagSet (leaf): References a defined tag set
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/tag-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/*/tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPath) TagSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tag-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TagSet (leaf): References a defined tag set
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/tag-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/*/tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPathAny) TagSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tag-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions_AreaEqPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/ospf-conditions/state/area-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions_AreaEqPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions_AreaEqPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/ospf-conditions/state/area-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions_AreaEqPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-ospf-policy"
//	Path from parent:     "state/area-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/ospf-conditions/state/area-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions_AreaEqPath) State() ygnmi.SingletonQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions_AreaEq_Union] {
	return ygnmi.NewSingletonQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions_AreaEq_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "area-eq"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions_AreaEq_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions).AreaEq
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-ospf-policy"
//	Path from parent:     "state/area-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/ospf-conditions/state/area-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions_AreaEqPathAny) State() ygnmi.WildcardQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions_AreaEq_Union] {
	return ygnmi.NewWildcardQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions_AreaEq_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "area-eq"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions_AreaEq_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions).AreaEq
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-ospf-policy"
//	Path from parent:     "config/area-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/ospf-conditions/config/area-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions_AreaEqPath) Config() ygnmi.ConfigQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions_AreaEq_Union] {
	return ygnmi.NewConfigQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions_AreaEq_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "area-eq"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions_AreaEq_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions).AreaEq
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-ospf-policy"
//	Path from parent:     "config/area-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/ospf-conditions/config/area-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions_AreaEqPathAny) Config() ygnmi.WildcardQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions_AreaEq_Union] {
	return ygnmi.NewWildcardQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions_AreaEq_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "area-eq"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions_AreaEq_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions).AreaEq
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/ospf-conditions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditionsPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/ospf-conditions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditionsPathAny struct {
	*ygnmi.NodePath
}

// AreaEq (leaf): Match prefixes which are within a particular OSPF area
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/area-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/ospf-conditions/*/area-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditionsPath) AreaEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions_AreaEqPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions_AreaEqPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "area-eq"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AreaEq (leaf): Match prefixes which are within a particular OSPF area
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/area-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/ospf-conditions/*/area-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditionsPathAny) AreaEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions_AreaEqPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions_AreaEqPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "area-eq"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditionsPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditionsPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditionsPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditionsPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

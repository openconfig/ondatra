/*
Package gnmicollectormetadata is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.20)
using the following YANG input files:
  - gnmi-collector-metadata.yang
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-common.yang
  - public/release/models/aft/openconfig-aft-ethernet.yang
  - public/release/models/aft/openconfig-aft-ipv4.yang
  - public/release/models/aft/openconfig-aft-ipv6.yang
  - public/release/models/aft/openconfig-aft-mpls.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-pf.yang
  - public/release/models/aft/openconfig-aft-state-synced.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft-types.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/ate/openconfig-ate-flow.yang
  - public/release/models/ate/openconfig-ate-intf.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/interfaces/openconfig-if-rates.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/local-routing/openconfig-local-routing-network-instance.yang
  - public/release/models/macsec/openconfig-macsec.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/network-instance/openconfig-network-instance-l2.yang
  - public/release/models/network-instance/openconfig-network-instance-static.yang
  - public/release/models/oam/openconfig-cfm-types.yang
  - public/release/models/oam/openconfig-oam.yang
  - public/release/models/oam/openconfig-oam-cfm.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-terminal-device.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-area-interface.yang
  - public/release/models/ospf/openconfig-ospf-area.yang
  - public/release/models/ospf/openconfig-ospf-common.yang
  - public/release/models/ospf/openconfig-ospf-global.yang
  - public/release/models/ospf/openconfig-ospf-types.yang
  - public/release/models/ospf/openconfig-ospf.yang
  - public/release/models/ospf/openconfig-ospfv3-area-interface.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-pf-forwarding-policies.yang
  - public/release/models/policy-forwarding/openconfig-pf-interfaces.yang
  - public/release/models/policy-forwarding/openconfig-pf-path-groups.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-routing-policy.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package gnmicollectormetadata

import (
	oc "github.com/openconfig/ondatra/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Meta_ConnectErrorPath represents the /gnmi-collector-metadata/meta/connectError YANG schema element.
type Meta_ConnectErrorPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Meta_ConnectErrorPathAny represents the wildcard version of the /gnmi-collector-metadata/meta/connectError YANG schema element.
type Meta_ConnectErrorPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "connectError"
//	Path from root:       "/meta/connectError"
func (n *Meta_ConnectErrorPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Meta",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"connectError"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Meta).ConnectError
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "connectError"
//	Path from root:       "/meta/connectError"
func (n *Meta_ConnectErrorPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Meta",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"connectError"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Meta).ConnectError
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Meta_ConnectedPath represents the /gnmi-collector-metadata/meta/connected YANG schema element.
type Meta_ConnectedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Meta_ConnectedPathAny represents the wildcard version of the /gnmi-collector-metadata/meta/connected YANG schema element.
type Meta_ConnectedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "connected"
//	Path from root:       "/meta/connected"
func (n *Meta_ConnectedPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Meta",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"connected"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Meta).Connected
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "connected"
//	Path from root:       "/meta/connected"
func (n *Meta_ConnectedPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Meta",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"connected"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Meta).Connected
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Meta_ConnectedAddressPath represents the /gnmi-collector-metadata/meta/connectedAddress YANG schema element.
type Meta_ConnectedAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Meta_ConnectedAddressPathAny represents the wildcard version of the /gnmi-collector-metadata/meta/connectedAddress YANG schema element.
type Meta_ConnectedAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "connectedAddress"
//	Path from root:       "/meta/connectedAddress"
func (n *Meta_ConnectedAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Meta",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"connectedAddress"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Meta).ConnectedAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "connectedAddress"
//	Path from root:       "/meta/connectedAddress"
func (n *Meta_ConnectedAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Meta",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"connectedAddress"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Meta).ConnectedAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Meta_LatencyAvgPath represents the /gnmi-collector-metadata/meta/latencyAvg YANG schema element.
type Meta_LatencyAvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Meta_LatencyAvgPathAny represents the wildcard version of the /gnmi-collector-metadata/meta/latencyAvg YANG schema element.
type Meta_LatencyAvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "latencyAvg"
//	Path from root:       "/meta/latencyAvg"
func (n *Meta_LatencyAvgPath) State() ygnmi.SingletonQuery[int64] {
	return ygnmi.NewSingletonQuery[int64](
		"Meta",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"latencyAvg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Meta).LatencyAvg
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "latencyAvg"
//	Path from root:       "/meta/latencyAvg"
func (n *Meta_LatencyAvgPathAny) State() ygnmi.WildcardQuery[int64] {
	return ygnmi.NewWildcardQuery[int64](
		"Meta",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"latencyAvg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Meta).LatencyAvg
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Meta_LatencyMaxPath represents the /gnmi-collector-metadata/meta/latencyMax YANG schema element.
type Meta_LatencyMaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Meta_LatencyMaxPathAny represents the wildcard version of the /gnmi-collector-metadata/meta/latencyMax YANG schema element.
type Meta_LatencyMaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "latencyMax"
//	Path from root:       "/meta/latencyMax"
func (n *Meta_LatencyMaxPath) State() ygnmi.SingletonQuery[int64] {
	return ygnmi.NewSingletonQuery[int64](
		"Meta",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"latencyMax"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Meta).LatencyMax
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "latencyMax"
//	Path from root:       "/meta/latencyMax"
func (n *Meta_LatencyMaxPathAny) State() ygnmi.WildcardQuery[int64] {
	return ygnmi.NewWildcardQuery[int64](
		"Meta",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"latencyMax"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Meta).LatencyMax
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Meta_LatencyMinPath represents the /gnmi-collector-metadata/meta/latencyMin YANG schema element.
type Meta_LatencyMinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Meta_LatencyMinPathAny represents the wildcard version of the /gnmi-collector-metadata/meta/latencyMin YANG schema element.
type Meta_LatencyMinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "latencyMin"
//	Path from root:       "/meta/latencyMin"
func (n *Meta_LatencyMinPath) State() ygnmi.SingletonQuery[int64] {
	return ygnmi.NewSingletonQuery[int64](
		"Meta",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"latencyMin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Meta).LatencyMin
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "latencyMin"
//	Path from root:       "/meta/latencyMin"
func (n *Meta_LatencyMinPathAny) State() ygnmi.WildcardQuery[int64] {
	return ygnmi.NewWildcardQuery[int64](
		"Meta",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"latencyMin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Meta).LatencyMin
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Meta_LatestTimestampPath represents the /gnmi-collector-metadata/meta/latestTimestamp YANG schema element.
type Meta_LatestTimestampPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Meta_LatestTimestampPathAny represents the wildcard version of the /gnmi-collector-metadata/meta/latestTimestamp YANG schema element.
type Meta_LatestTimestampPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "latestTimestamp"
//	Path from root:       "/meta/latestTimestamp"
func (n *Meta_LatestTimestampPath) State() ygnmi.SingletonQuery[int64] {
	return ygnmi.NewSingletonQuery[int64](
		"Meta",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"latestTimestamp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Meta).LatestTimestamp
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "latestTimestamp"
//	Path from root:       "/meta/latestTimestamp"
func (n *Meta_LatestTimestampPathAny) State() ygnmi.WildcardQuery[int64] {
	return ygnmi.NewWildcardQuery[int64](
		"Meta",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"latestTimestamp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Meta).LatestTimestamp
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Meta_ServerNamePath represents the /gnmi-collector-metadata/meta/serverName YANG schema element.
type Meta_ServerNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Meta_ServerNamePathAny represents the wildcard version of the /gnmi-collector-metadata/meta/serverName YANG schema element.
type Meta_ServerNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "serverName"
//	Path from root:       "/meta/serverName"
func (n *Meta_ServerNamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Meta",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"serverName"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Meta).ServerName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "serverName"
//	Path from root:       "/meta/serverName"
func (n *Meta_ServerNamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Meta",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"serverName"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Meta).ServerName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Meta_SyncPath represents the /gnmi-collector-metadata/meta/sync YANG schema element.
type Meta_SyncPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Meta_SyncPathAny represents the wildcard version of the /gnmi-collector-metadata/meta/sync YANG schema element.
type Meta_SyncPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "sync"
//	Path from root:       "/meta/sync"
func (n *Meta_SyncPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Meta",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sync"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Meta).Sync
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "sync"
//	Path from root:       "/meta/sync"
func (n *Meta_SyncPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Meta",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sync"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Meta).Sync
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Meta_TargetLeavesPath represents the /gnmi-collector-metadata/meta/targetLeaves YANG schema element.
type Meta_TargetLeavesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Meta_TargetLeavesPathAny represents the wildcard version of the /gnmi-collector-metadata/meta/targetLeaves YANG schema element.
type Meta_TargetLeavesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "targetLeaves"
//	Path from root:       "/meta/targetLeaves"
func (n *Meta_TargetLeavesPath) State() ygnmi.SingletonQuery[int64] {
	return ygnmi.NewSingletonQuery[int64](
		"Meta",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"targetLeaves"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Meta).TargetLeaves
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "targetLeaves"
//	Path from root:       "/meta/targetLeaves"
func (n *Meta_TargetLeavesPathAny) State() ygnmi.WildcardQuery[int64] {
	return ygnmi.NewWildcardQuery[int64](
		"Meta",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"targetLeaves"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Meta).TargetLeaves
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Meta_TargetLeavesAddedPath represents the /gnmi-collector-metadata/meta/targetLeavesAdded YANG schema element.
type Meta_TargetLeavesAddedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Meta_TargetLeavesAddedPathAny represents the wildcard version of the /gnmi-collector-metadata/meta/targetLeavesAdded YANG schema element.
type Meta_TargetLeavesAddedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "targetLeavesAdded"
//	Path from root:       "/meta/targetLeavesAdded"
func (n *Meta_TargetLeavesAddedPath) State() ygnmi.SingletonQuery[int64] {
	return ygnmi.NewSingletonQuery[int64](
		"Meta",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"targetLeavesAdded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Meta).TargetLeavesAdded
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "targetLeavesAdded"
//	Path from root:       "/meta/targetLeavesAdded"
func (n *Meta_TargetLeavesAddedPathAny) State() ygnmi.WildcardQuery[int64] {
	return ygnmi.NewWildcardQuery[int64](
		"Meta",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"targetLeavesAdded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Meta).TargetLeavesAdded
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Meta_TargetLeavesDeletedPath represents the /gnmi-collector-metadata/meta/targetLeavesDeleted YANG schema element.
type Meta_TargetLeavesDeletedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Meta_TargetLeavesDeletedPathAny represents the wildcard version of the /gnmi-collector-metadata/meta/targetLeavesDeleted YANG schema element.
type Meta_TargetLeavesDeletedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "targetLeavesDeleted"
//	Path from root:       "/meta/targetLeavesDeleted"
func (n *Meta_TargetLeavesDeletedPath) State() ygnmi.SingletonQuery[int64] {
	return ygnmi.NewSingletonQuery[int64](
		"Meta",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"targetLeavesDeleted"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Meta).TargetLeavesDeleted
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "targetLeavesDeleted"
//	Path from root:       "/meta/targetLeavesDeleted"
func (n *Meta_TargetLeavesDeletedPathAny) State() ygnmi.WildcardQuery[int64] {
	return ygnmi.NewWildcardQuery[int64](
		"Meta",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"targetLeavesDeleted"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Meta).TargetLeavesDeleted
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Meta_TargetLeavesEmptyPath represents the /gnmi-collector-metadata/meta/targetLeavesEmpty YANG schema element.
type Meta_TargetLeavesEmptyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Meta_TargetLeavesEmptyPathAny represents the wildcard version of the /gnmi-collector-metadata/meta/targetLeavesEmpty YANG schema element.
type Meta_TargetLeavesEmptyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "targetLeavesEmpty"
//	Path from root:       "/meta/targetLeavesEmpty"
func (n *Meta_TargetLeavesEmptyPath) State() ygnmi.SingletonQuery[int64] {
	return ygnmi.NewSingletonQuery[int64](
		"Meta",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"targetLeavesEmpty"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Meta).TargetLeavesEmpty
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "targetLeavesEmpty"
//	Path from root:       "/meta/targetLeavesEmpty"
func (n *Meta_TargetLeavesEmptyPathAny) State() ygnmi.WildcardQuery[int64] {
	return ygnmi.NewWildcardQuery[int64](
		"Meta",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"targetLeavesEmpty"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Meta).TargetLeavesEmpty
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Meta_TargetLeavesStalePath represents the /gnmi-collector-metadata/meta/targetLeavesStale YANG schema element.
type Meta_TargetLeavesStalePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Meta_TargetLeavesStalePathAny represents the wildcard version of the /gnmi-collector-metadata/meta/targetLeavesStale YANG schema element.
type Meta_TargetLeavesStalePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "targetLeavesStale"
//	Path from root:       "/meta/targetLeavesStale"
func (n *Meta_TargetLeavesStalePath) State() ygnmi.SingletonQuery[int64] {
	return ygnmi.NewSingletonQuery[int64](
		"Meta",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"targetLeavesStale"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Meta).TargetLeavesStale
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "targetLeavesStale"
//	Path from root:       "/meta/targetLeavesStale"
func (n *Meta_TargetLeavesStalePathAny) State() ygnmi.WildcardQuery[int64] {
	return ygnmi.NewWildcardQuery[int64](
		"Meta",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"targetLeavesStale"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Meta).TargetLeavesStale
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Meta_TargetLeavesSuppressedPath represents the /gnmi-collector-metadata/meta/targetLeavesSuppressed YANG schema element.
type Meta_TargetLeavesSuppressedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Meta_TargetLeavesSuppressedPathAny represents the wildcard version of the /gnmi-collector-metadata/meta/targetLeavesSuppressed YANG schema element.
type Meta_TargetLeavesSuppressedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "targetLeavesSuppressed"
//	Path from root:       "/meta/targetLeavesSuppressed"
func (n *Meta_TargetLeavesSuppressedPath) State() ygnmi.SingletonQuery[int64] {
	return ygnmi.NewSingletonQuery[int64](
		"Meta",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"targetLeavesSuppressed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Meta).TargetLeavesSuppressed
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "targetLeavesSuppressed"
//	Path from root:       "/meta/targetLeavesSuppressed"
func (n *Meta_TargetLeavesSuppressedPathAny) State() ygnmi.WildcardQuery[int64] {
	return ygnmi.NewWildcardQuery[int64](
		"Meta",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"targetLeavesSuppressed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Meta).TargetLeavesSuppressed
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Meta_TargetLeavesUpdatedPath represents the /gnmi-collector-metadata/meta/targetLeavesUpdated YANG schema element.
type Meta_TargetLeavesUpdatedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Meta_TargetLeavesUpdatedPathAny represents the wildcard version of the /gnmi-collector-metadata/meta/targetLeavesUpdated YANG schema element.
type Meta_TargetLeavesUpdatedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "targetLeavesUpdated"
//	Path from root:       "/meta/targetLeavesUpdated"
func (n *Meta_TargetLeavesUpdatedPath) State() ygnmi.SingletonQuery[int64] {
	return ygnmi.NewSingletonQuery[int64](
		"Meta",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"targetLeavesUpdated"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Meta).TargetLeavesUpdated
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "targetLeavesUpdated"
//	Path from root:       "/meta/targetLeavesUpdated"
func (n *Meta_TargetLeavesUpdatedPathAny) State() ygnmi.WildcardQuery[int64] {
	return ygnmi.NewWildcardQuery[int64](
		"Meta",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"targetLeavesUpdated"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Meta).TargetLeavesUpdated
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Meta_TargetSizePath represents the /gnmi-collector-metadata/meta/targetSize YANG schema element.
type Meta_TargetSizePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Meta_TargetSizePathAny represents the wildcard version of the /gnmi-collector-metadata/meta/targetSize YANG schema element.
type Meta_TargetSizePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "targetSize"
//	Path from root:       "/meta/targetSize"
func (n *Meta_TargetSizePath) State() ygnmi.SingletonQuery[int64] {
	return ygnmi.NewSingletonQuery[int64](
		"Meta",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"targetSize"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Meta).TargetSize
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "targetSize"
//	Path from root:       "/meta/targetSize"
func (n *Meta_TargetSizePathAny) State() ygnmi.WildcardQuery[int64] {
	return ygnmi.NewWildcardQuery[int64](
		"Meta",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"targetSize"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Meta).TargetSize
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// MetaPath represents the /gnmi-collector-metadata/meta YANG schema element.
type MetaPath struct {
	*ygnmi.NodePath
}

// MetaPathAny represents the wildcard version of the /gnmi-collector-metadata/meta YANG schema element.
type MetaPathAny struct {
	*ygnmi.NodePath
}

// ConnectError (leaf): connectError is the error related to connection failure.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "connectError"
//	Path from root:       "/meta/connectError"
func (n *MetaPath) ConnectError() *Meta_ConnectErrorPath {
	ps := &Meta_ConnectErrorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"connectError"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConnectError (leaf): connectError is the error related to connection failure.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "connectError"
//	Path from root:       "/meta/connectError"
func (n *MetaPathAny) ConnectError() *Meta_ConnectErrorPathAny {
	ps := &Meta_ConnectErrorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"connectError"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Connected (leaf): connected reports whether the client has an active gRPC session with
// the target device; it requires at least 1 update delivered over the
// connection before being set to true.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "connected"
//	Path from root:       "/meta/connected"
func (n *MetaPath) Connected() *Meta_ConnectedPath {
	ps := &Meta_ConnectedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"connected"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Connected (leaf): connected reports whether the client has an active gRPC session with
// the target device; it requires at least 1 update delivered over the
// connection before being set to true.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "connected"
//	Path from root:       "/meta/connected"
func (n *MetaPathAny) Connected() *Meta_ConnectedPathAny {
	ps := &Meta_ConnectedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"connected"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConnectedAddress (leaf): connectedAddress denotes the last-hop IP address of a connected target
// in IP:Port format (e.g., '10.1.1.1:12345',
// '[123:123:123:123::1]:12345').
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "connectedAddress"
//	Path from root:       "/meta/connectedAddress"
func (n *MetaPath) ConnectedAddress() *Meta_ConnectedAddressPath {
	ps := &Meta_ConnectedAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"connectedAddress"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConnectedAddress (leaf): connectedAddress denotes the last-hop IP address of a connected target
// in IP:Port format (e.g., '10.1.1.1:12345',
// '[123:123:123:123::1]:12345').
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "connectedAddress"
//	Path from root:       "/meta/connectedAddress"
func (n *MetaPathAny) ConnectedAddress() *Meta_ConnectedAddressPathAny {
	ps := &Meta_ConnectedAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"connectedAddress"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LatencyAvg (leaf): latencyAvg is the average latency in nanoseconds between target
// timestamp and cache reception - latency being calculated by (timestamp
// of arrival) - (timestamp in update). It is reported per update
// window based on the commandline flag for metadata updates.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "latencyAvg"
//	Path from root:       "/meta/latencyAvg"
func (n *MetaPath) LatencyAvg() *Meta_LatencyAvgPath {
	ps := &Meta_LatencyAvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"latencyAvg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LatencyAvg (leaf): latencyAvg is the average latency in nanoseconds between target
// timestamp and cache reception - latency being calculated by (timestamp
// of arrival) - (timestamp in update). It is reported per update
// window based on the commandline flag for metadata updates.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "latencyAvg"
//	Path from root:       "/meta/latencyAvg"
func (n *MetaPathAny) LatencyAvg() *Meta_LatencyAvgPathAny {
	ps := &Meta_LatencyAvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"latencyAvg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LatencyMax (leaf): latencyMax is the maximum latency in nanoseconds between target
// timestamp and cache reception - latency being calculated by (timestamp
// of arrival) - (timestamp in update). It is reported per update
// window based on the commandline flag for metadata updates.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "latencyMax"
//	Path from root:       "/meta/latencyMax"
func (n *MetaPath) LatencyMax() *Meta_LatencyMaxPath {
	ps := &Meta_LatencyMaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"latencyMax"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LatencyMax (leaf): latencyMax is the maximum latency in nanoseconds between target
// timestamp and cache reception - latency being calculated by (timestamp
// of arrival) - (timestamp in update). It is reported per update
// window based on the commandline flag for metadata updates.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "latencyMax"
//	Path from root:       "/meta/latencyMax"
func (n *MetaPathAny) LatencyMax() *Meta_LatencyMaxPathAny {
	ps := &Meta_LatencyMaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"latencyMax"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LatencyMin (leaf): latencyMin is the minimum latency in nanoseconds - latency being
// calculated by (timestamp of arrival) - (timestamp in update). It is
// reported per update window based on the commandline flag for metadata
// updates.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "latencyMin"
//	Path from root:       "/meta/latencyMin"
func (n *MetaPath) LatencyMin() *Meta_LatencyMinPath {
	ps := &Meta_LatencyMinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"latencyMin"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LatencyMin (leaf): latencyMin is the minimum latency in nanoseconds - latency being
// calculated by (timestamp of arrival) - (timestamp in update). It is
// reported per update window based on the commandline flag for metadata
// updates.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "latencyMin"
//	Path from root:       "/meta/latencyMin"
func (n *MetaPathAny) LatencyMin() *Meta_LatencyMinPathAny {
	ps := &Meta_LatencyMinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"latencyMin"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LatestTimestamp (leaf): latestTimestamp is the latest timestamp in nanoseconds since Epoch time
// of the latest update received from the target. This value is updated
// periodically so it may lag behind the actual target updates.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "latestTimestamp"
//	Path from root:       "/meta/latestTimestamp"
func (n *MetaPath) LatestTimestamp() *Meta_LatestTimestampPath {
	ps := &Meta_LatestTimestampPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"latestTimestamp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LatestTimestamp (leaf): latestTimestamp is the latest timestamp in nanoseconds since Epoch time
// of the latest update received from the target. This value is updated
// periodically so it may lag behind the actual target updates.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "latestTimestamp"
//	Path from root:       "/meta/latestTimestamp"
func (n *MetaPathAny) LatestTimestamp() *Meta_LatestTimestampPathAny {
	ps := &Meta_LatestTimestampPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"latestTimestamp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ServerName (leaf): serverName is an optional string metadata used to identify the server
// hosting the cache to the clients. It is useful in situations where a
// client is connected to a cache server behind a frontend system or a
// load-balancing system and the client wants to know exactly which cache
// server it is connected to
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "serverName"
//	Path from root:       "/meta/serverName"
func (n *MetaPath) ServerName() *Meta_ServerNamePath {
	ps := &Meta_ServerNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"serverName"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ServerName (leaf): serverName is an optional string metadata used to identify the server
// hosting the cache to the clients. It is useful in situations where a
// client is connected to a cache server behind a frontend system or a
// load-balancing system and the client wants to know exactly which cache
// server it is connected to
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "serverName"
//	Path from root:       "/meta/serverName"
func (n *MetaPathAny) ServerName() *Meta_ServerNamePathAny {
	ps := &Meta_ServerNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"serverName"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Sync (leaf): sync indicates that at least one copy of the target's entire tree has
// been received, as indicated by the sync_response field in a gNMI
// SubscribeResponse message
// (https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-specification.md#3514-the-subscriberesponse-message).
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "sync"
//	Path from root:       "/meta/sync"
func (n *MetaPath) Sync() *Meta_SyncPath {
	ps := &Meta_SyncPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"sync"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Sync (leaf): sync indicates that at least one copy of the target's entire tree has
// been received, as indicated by the sync_response field in a gNMI
// SubscribeResponse message
// (https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-specification.md#3514-the-subscriberesponse-message).
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "sync"
//	Path from root:       "/meta/sync"
func (n *MetaPathAny) Sync() *Meta_SyncPathAny {
	ps := &Meta_SyncPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sync"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TargetLeaves (leaf): targetLeaves is the total number of leaves available for the target.
// Note that this does not include any intermediate nodes.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "targetLeaves"
//	Path from root:       "/meta/targetLeaves"
func (n *MetaPath) TargetLeaves() *Meta_TargetLeavesPath {
	ps := &Meta_TargetLeavesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"targetLeaves"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TargetLeaves (leaf): targetLeaves is the total number of leaves available for the target.
// Note that this does not include any intermediate nodes.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "targetLeaves"
//	Path from root:       "/meta/targetLeaves"
func (n *MetaPathAny) TargetLeaves() *Meta_TargetLeavesPathAny {
	ps := &Meta_TargetLeavesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"targetLeaves"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TargetLeavesAdded (leaf): targetLeavesAdded is the total number of leaves that have been added.
// This number may be larger than meta/targetLeaves due to deletes.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "targetLeavesAdded"
//	Path from root:       "/meta/targetLeavesAdded"
func (n *MetaPath) TargetLeavesAdded() *Meta_TargetLeavesAddedPath {
	ps := &Meta_TargetLeavesAddedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"targetLeavesAdded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TargetLeavesAdded (leaf): targetLeavesAdded is the total number of leaves that have been added.
// This number may be larger than meta/targetLeaves due to deletes.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "targetLeavesAdded"
//	Path from root:       "/meta/targetLeavesAdded"
func (n *MetaPathAny) TargetLeavesAdded() *Meta_TargetLeavesAddedPathAny {
	ps := &Meta_TargetLeavesAddedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"targetLeavesAdded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TargetLeavesDeleted (leaf): targetLeavesDeleted is the total number of leaves that have been
// deleted.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "targetLeavesDeleted"
//	Path from root:       "/meta/targetLeavesDeleted"
func (n *MetaPath) TargetLeavesDeleted() *Meta_TargetLeavesDeletedPath {
	ps := &Meta_TargetLeavesDeletedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"targetLeavesDeleted"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TargetLeavesDeleted (leaf): targetLeavesDeleted is the total number of leaves that have been
// deleted.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "targetLeavesDeleted"
//	Path from root:       "/meta/targetLeavesDeleted"
func (n *MetaPathAny) TargetLeavesDeleted() *Meta_TargetLeavesDeletedPathAny {
	ps := &Meta_TargetLeavesDeletedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"targetLeavesDeleted"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TargetLeavesEmpty (leaf): targetLeavesEmpty is the total number of empty notifications received
// from the target.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "targetLeavesEmpty"
//	Path from root:       "/meta/targetLeavesEmpty"
func (n *MetaPath) TargetLeavesEmpty() *Meta_TargetLeavesEmptyPath {
	ps := &Meta_TargetLeavesEmptyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"targetLeavesEmpty"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TargetLeavesEmpty (leaf): targetLeavesEmpty is the total number of empty notifications received
// from the target.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "targetLeavesEmpty"
//	Path from root:       "/meta/targetLeavesEmpty"
func (n *MetaPathAny) TargetLeavesEmpty() *Meta_TargetLeavesEmptyPathAny {
	ps := &Meta_TargetLeavesEmptyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"targetLeavesEmpty"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TargetLeavesStale (leaf): targetLeavesStale is the total number of leaf updates that were received
// with a timestamp older than the latest timestamp reported for the target.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "targetLeavesStale"
//	Path from root:       "/meta/targetLeavesStale"
func (n *MetaPath) TargetLeavesStale() *Meta_TargetLeavesStalePath {
	ps := &Meta_TargetLeavesStalePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"targetLeavesStale"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TargetLeavesStale (leaf): targetLeavesStale is the total number of leaf updates that were received
// with a timestamp older than the latest timestamp reported for the target.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "targetLeavesStale"
//	Path from root:       "/meta/targetLeavesStale"
func (n *MetaPathAny) TargetLeavesStale() *Meta_TargetLeavesStalePathAny {
	ps := &Meta_TargetLeavesStalePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"targetLeavesStale"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TargetLeavesSuppressed (leaf): targetLeavesSuppressed is the total number of leaf updates that were not
// forwarded to subscribers because the value had not changed.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "targetLeavesSuppressed"
//	Path from root:       "/meta/targetLeavesSuppressed"
func (n *MetaPath) TargetLeavesSuppressed() *Meta_TargetLeavesSuppressedPath {
	ps := &Meta_TargetLeavesSuppressedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"targetLeavesSuppressed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TargetLeavesSuppressed (leaf): targetLeavesSuppressed is the total number of leaf updates that were not
// forwarded to subscribers because the value had not changed.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "targetLeavesSuppressed"
//	Path from root:       "/meta/targetLeavesSuppressed"
func (n *MetaPathAny) TargetLeavesSuppressed() *Meta_TargetLeavesSuppressedPathAny {
	ps := &Meta_TargetLeavesSuppressedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"targetLeavesSuppressed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TargetLeavesUpdated (leaf): targetLeavesUpdated is the total number of leaf updates that have been
// received from the target by the collector
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "targetLeavesUpdated"
//	Path from root:       "/meta/targetLeavesUpdated"
func (n *MetaPath) TargetLeavesUpdated() *Meta_TargetLeavesUpdatedPath {
	ps := &Meta_TargetLeavesUpdatedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"targetLeavesUpdated"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TargetLeavesUpdated (leaf): targetLeavesUpdated is the total number of leaf updates that have been
// received from the target by the collector
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "targetLeavesUpdated"
//	Path from root:       "/meta/targetLeavesUpdated"
func (n *MetaPathAny) TargetLeavesUpdated() *Meta_TargetLeavesUpdatedPathAny {
	ps := &Meta_TargetLeavesUpdatedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"targetLeavesUpdated"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TargetSize (leaf): targetSize is the total number of bytes used to store all values. This
// count excludes all indexing overhead. This value is updated periodically
// and may not be up to date at all times.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "targetSize"
//	Path from root:       "/meta/targetSize"
func (n *MetaPath) TargetSize() *Meta_TargetSizePath {
	ps := &Meta_TargetSizePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"targetSize"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TargetSize (leaf): targetSize is the total number of bytes used to store all values. This
// count excludes all indexing overhead. This value is updated periodically
// and may not be up to date at all times.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "targetSize"
//	Path from root:       "/meta/targetSize"
func (n *MetaPathAny) TargetSize() *Meta_TargetSizePathAny {
	ps := &Meta_TargetSizePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"targetSize"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// WindowAny (list): latency statistics for a time window.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "latency/window"
//	Path from root:       "/meta/latency/window"
func (n *MetaPath) WindowAny() *Meta_WindowPathAny {
	ps := &Meta_WindowPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"latency", "window"},
			map[string]interface{}{"size": "*"},
			n,
		),
	}
	return ps
}

// WindowAny (list): latency statistics for a time window.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "latency/window"
//	Path from root:       "/meta/latency/window"
func (n *MetaPathAny) WindowAny() *Meta_WindowPathAny {
	ps := &Meta_WindowPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"latency", "window"},
			map[string]interface{}{"size": "*"},
			n,
		),
	}
	return ps
}

// Window (list): latency statistics for a time window.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "latency/window"
//	Path from root:       "/meta/latency/window"
//
//	Size: string
func (n *MetaPath) Window(Size string) *Meta_WindowPath {
	ps := &Meta_WindowPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"latency", "window"},
			map[string]interface{}{"size": Size},
			n,
		),
	}
	return ps
}

// Window (list): latency statistics for a time window.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "latency/window"
//	Path from root:       "/meta/latency/window"
//
//	Size: string
func (n *MetaPathAny) Window(Size string) *Meta_WindowPathAny {
	ps := &Meta_WindowPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"latency", "window"},
			map[string]interface{}{"size": Size},
			n,
		),
	}
	return ps
}

// WindowMap (list): latency statistics for a time window.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "latency/window"
//	Path from root:       "/meta/latency/window"
func (n *MetaPath) WindowMap() *Meta_WindowPathMap {
	ps := &Meta_WindowPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"latency"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// WindowMap (list): latency statistics for a time window.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "latency/window"
//	Path from root:       "/meta/latency/window"
func (n *MetaPathAny) WindowMap() *Meta_WindowPathMapAny {
	ps := &Meta_WindowPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"latency"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *MetaPath) State() ygnmi.SingletonQuery[*oc.Meta] {
	return ygnmi.NewSingletonQuery[*oc.Meta](
		"Meta",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *MetaPathAny) State() ygnmi.WildcardQuery[*oc.Meta] {
	return ygnmi.NewWildcardQuery[*oc.Meta](
		"Meta",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *MetaPath) Config() ygnmi.ConfigQuery[*oc.Meta] {
	return ygnmi.NewConfigQuery[*oc.Meta](
		"Meta",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *MetaPathAny) Config() ygnmi.WildcardQuery[*oc.Meta] {
	return ygnmi.NewWildcardQuery[*oc.Meta](
		"Meta",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Meta_Window_AvgPath represents the /gnmi-collector-metadata/meta/latency/window/avg YANG schema element.
type Meta_Window_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Meta_Window_AvgPathAny represents the wildcard version of the /gnmi-collector-metadata/meta/latency/window/avg YANG schema element.
type Meta_Window_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "avg"
//	Path from root:       "/meta/latency/window/avg"
func (n *Meta_Window_AvgPath) State() ygnmi.SingletonQuery[int64] {
	return ygnmi.NewSingletonQuery[int64](
		"Meta_Window",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Meta_Window).Avg
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta_Window) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "avg"
//	Path from root:       "/meta/latency/window/avg"
func (n *Meta_Window_AvgPathAny) State() ygnmi.WildcardQuery[int64] {
	return ygnmi.NewWildcardQuery[int64](
		"Meta_Window",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Meta_Window).Avg
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta_Window) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Meta_Window_MaxPath represents the /gnmi-collector-metadata/meta/latency/window/max YANG schema element.
type Meta_Window_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Meta_Window_MaxPathAny represents the wildcard version of the /gnmi-collector-metadata/meta/latency/window/max YANG schema element.
type Meta_Window_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "max"
//	Path from root:       "/meta/latency/window/max"
func (n *Meta_Window_MaxPath) State() ygnmi.SingletonQuery[int64] {
	return ygnmi.NewSingletonQuery[int64](
		"Meta_Window",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Meta_Window).Max
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta_Window) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "max"
//	Path from root:       "/meta/latency/window/max"
func (n *Meta_Window_MaxPathAny) State() ygnmi.WildcardQuery[int64] {
	return ygnmi.NewWildcardQuery[int64](
		"Meta_Window",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Meta_Window).Max
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta_Window) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Meta_Window_MinPath represents the /gnmi-collector-metadata/meta/latency/window/min YANG schema element.
type Meta_Window_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Meta_Window_MinPathAny represents the wildcard version of the /gnmi-collector-metadata/meta/latency/window/min YANG schema element.
type Meta_Window_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "min"
//	Path from root:       "/meta/latency/window/min"
func (n *Meta_Window_MinPath) State() ygnmi.SingletonQuery[int64] {
	return ygnmi.NewSingletonQuery[int64](
		"Meta_Window",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Meta_Window).Min
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta_Window) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "min"
//	Path from root:       "/meta/latency/window/min"
func (n *Meta_Window_MinPathAny) State() ygnmi.WildcardQuery[int64] {
	return ygnmi.NewWildcardQuery[int64](
		"Meta_Window",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Meta_Window).Min
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta_Window) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Meta_Window_SizePath represents the /gnmi-collector-metadata/meta/latency/window/state/size YANG schema element.
type Meta_Window_SizePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Meta_Window_SizePathAny represents the wildcard version of the /gnmi-collector-metadata/meta/latency/window/state/size YANG schema element.
type Meta_Window_SizePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "state/size"
//	Path from root:       "/meta/latency/window/state/size"
func (n *Meta_Window_SizePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Meta_Window",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Meta_Window).Size
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta_Window) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "state/size"
//	Path from root:       "/meta/latency/window/state/size"
func (n *Meta_Window_SizePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Meta_Window",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Meta_Window).Size
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta_Window) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "size"
//	Path from root:       ""
func (n *Meta_Window_SizePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Meta_Window",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Meta_Window).Size
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta_Window) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "size"
//	Path from root:       ""
func (n *Meta_Window_SizePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Meta_Window",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Meta_Window).Size
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta_Window) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Meta_WindowPath represents the /gnmi-collector-metadata/meta/latency/window YANG schema element.
type Meta_WindowPath struct {
	*ygnmi.NodePath
}

// Meta_WindowPathAny represents the wildcard version of the /gnmi-collector-metadata/meta/latency/window YANG schema element.
type Meta_WindowPathAny struct {
	*ygnmi.NodePath
}

// Meta_WindowPathMap represents the /gnmi-collector-metadata/meta/latency/window YANG schema element.
type Meta_WindowPathMap struct {
	*ygnmi.NodePath
}

// Meta_WindowPathMapAny represents the wildcard version of the /gnmi-collector-metadata/meta/latency/window YANG schema element.
type Meta_WindowPathMapAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): avg is the average latency in nanoseconds of the time window.
// It is calculated and reported per update period.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "avg"
//	Path from root:       "/meta/latency/window/avg"
func (n *Meta_WindowPath) Avg() *Meta_Window_AvgPath {
	ps := &Meta_Window_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): avg is the average latency in nanoseconds of the time window.
// It is calculated and reported per update period.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "avg"
//	Path from root:       "/meta/latency/window/avg"
func (n *Meta_WindowPathAny) Avg() *Meta_Window_AvgPathAny {
	ps := &Meta_Window_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): max is the maximum latency in nanoseconds of the time window.
// It is calculated and reported per update period.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "max"
//	Path from root:       "/meta/latency/window/max"
func (n *Meta_WindowPath) Max() *Meta_Window_MaxPath {
	ps := &Meta_Window_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): max is the maximum latency in nanoseconds of the time window.
// It is calculated and reported per update period.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "max"
//	Path from root:       "/meta/latency/window/max"
func (n *Meta_WindowPathAny) Max() *Meta_Window_MaxPathAny {
	ps := &Meta_Window_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): min is the minimum latency in nanoseconds of the time window.
// It is calculated and reported per update period.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "min"
//	Path from root:       "/meta/latency/window/min"
func (n *Meta_WindowPath) Min() *Meta_Window_MinPath {
	ps := &Meta_Window_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): min is the minimum latency in nanoseconds of the time window.
// It is calculated and reported per update period.
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "min"
//	Path from root:       "/meta/latency/window/min"
func (n *Meta_WindowPathAny) Min() *Meta_Window_MinPathAny {
	ps := &Meta_Window_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Size (leaf): A unique string identifying the time window size (e.g. 2s, 5m).
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "*/size"
//	Path from root:       "/meta/latency/window/*/size"
func (n *Meta_WindowPath) Size() *Meta_Window_SizePath {
	ps := &Meta_Window_SizePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "size"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Size (leaf): A unique string identifying the time window size (e.g. 2s, 5m).
//
//	Defining module:      "gnmi-collector-metadata"
//	Instantiating module: "gnmi-collector-metadata"
//	Path from parent:     "*/size"
//	Path from root:       "/meta/latency/window/*/size"
func (n *Meta_WindowPathAny) Size() *Meta_Window_SizePathAny {
	ps := &Meta_Window_SizePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "size"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Meta_WindowPath) State() ygnmi.SingletonQuery[*oc.Meta_Window] {
	return ygnmi.NewSingletonQuery[*oc.Meta_Window](
		"Meta_Window",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Meta_WindowPathAny) State() ygnmi.WildcardQuery[*oc.Meta_Window] {
	return ygnmi.NewWildcardQuery[*oc.Meta_Window](
		"Meta_Window",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Meta_WindowPath) Config() ygnmi.ConfigQuery[*oc.Meta_Window] {
	return ygnmi.NewConfigQuery[*oc.Meta_Window](
		"Meta_Window",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Meta_WindowPathAny) Config() ygnmi.WildcardQuery[*oc.Meta_Window] {
	return ygnmi.NewWildcardQuery[*oc.Meta_Window](
		"Meta_Window",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Meta_WindowPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Meta_Window] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Meta_Window](
		"Meta",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Meta_Window, bool) {
			ret := gs.(*oc.Meta).Window
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"gnmi-collector-metadata:latency"},
			PostRelPath: []string{"gnmi-collector-metadata:window"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Meta_WindowPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Meta_Window] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Meta_Window](
		"Meta",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Meta_Window, bool) {
			ret := gs.(*oc.Meta).Window
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"gnmi-collector-metadata:latency"},
			PostRelPath: []string{"gnmi-collector-metadata:window"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Meta_WindowPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Meta_Window] {
	return ygnmi.NewConfigQuery[map[string]*oc.Meta_Window](
		"Meta",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Meta_Window, bool) {
			ret := gs.(*oc.Meta).Window
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"gnmi-collector-metadata:latency"},
			PostRelPath: []string{"gnmi-collector-metadata:window"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Meta_WindowPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Meta_Window] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Meta_Window](
		"Meta",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Meta_Window, bool) {
			ret := gs.(*oc.Meta).Window
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Meta) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"gnmi-collector-metadata:latency"},
			PostRelPath: []string{"gnmi-collector-metadata:window"},
		},
	)
}

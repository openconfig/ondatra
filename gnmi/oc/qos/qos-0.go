/*
Package qos is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.20)
using the following YANG input files:
  - gnmi-collector-metadata.yang
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-common.yang
  - public/release/models/aft/openconfig-aft-ethernet.yang
  - public/release/models/aft/openconfig-aft-ipv4.yang
  - public/release/models/aft/openconfig-aft-ipv6.yang
  - public/release/models/aft/openconfig-aft-mpls.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-pf.yang
  - public/release/models/aft/openconfig-aft-state-synced.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft-types.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/ate/openconfig-ate-flow.yang
  - public/release/models/ate/openconfig-ate-intf.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/interfaces/openconfig-if-rates.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/local-routing/openconfig-local-routing-network-instance.yang
  - public/release/models/macsec/openconfig-macsec.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/network-instance/openconfig-network-instance-l2.yang
  - public/release/models/network-instance/openconfig-network-instance-static.yang
  - public/release/models/oam/openconfig-cfm-types.yang
  - public/release/models/oam/openconfig-oam.yang
  - public/release/models/oam/openconfig-oam-cfm.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-terminal-device.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-area-interface.yang
  - public/release/models/ospf/openconfig-ospf-area.yang
  - public/release/models/ospf/openconfig-ospf-common.yang
  - public/release/models/ospf/openconfig-ospf-global.yang
  - public/release/models/ospf/openconfig-ospf-types.yang
  - public/release/models/ospf/openconfig-ospf.yang
  - public/release/models/ospf/openconfig-ospfv3-area-interface.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-pf-forwarding-policies.yang
  - public/release/models/policy-forwarding/openconfig-pf-interfaces.yang
  - public/release/models/policy-forwarding/openconfig-pf-path-groups.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-routing-policy.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package qos

import (
	"reflect"

	oc "github.com/openconfig/ondatra/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// QosPath represents the /openconfig-qos/qos YANG schema element.
type QosPath struct {
	*ygnmi.NodePath
}

// QosPathAny represents the wildcard version of the /openconfig-qos/qos YANG schema element.
type QosPathAny struct {
	*ygnmi.NodePath
}

// BufferAllocationProfileAny (list): A buffer allocation profile describes a mapping between the queues
// that are instantiated on an interface and the memory that is allocated
// to them on the forwarding complex that they are instantiated. Profiles
// (like queues) are defined in the abstract and instantiated by being
// configured on a particular interface. Separate allocation profiles may
// be used for ingress and egress traffic, with the profile being specified
// within the /qos/interfaces/interface list.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "buffer-allocation-profiles/buffer-allocation-profile"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile"
func (n *QosPath) BufferAllocationProfileAny() *Qos_BufferAllocationProfilePathAny {
	ps := &Qos_BufferAllocationProfilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"buffer-allocation-profiles", "buffer-allocation-profile"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// BufferAllocationProfileAny (list): A buffer allocation profile describes a mapping between the queues
// that are instantiated on an interface and the memory that is allocated
// to them on the forwarding complex that they are instantiated. Profiles
// (like queues) are defined in the abstract and instantiated by being
// configured on a particular interface. Separate allocation profiles may
// be used for ingress and egress traffic, with the profile being specified
// within the /qos/interfaces/interface list.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "buffer-allocation-profiles/buffer-allocation-profile"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile"
func (n *QosPathAny) BufferAllocationProfileAny() *Qos_BufferAllocationProfilePathAny {
	ps := &Qos_BufferAllocationProfilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"buffer-allocation-profiles", "buffer-allocation-profile"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// BufferAllocationProfile (list): A buffer allocation profile describes a mapping between the queues
// that are instantiated on an interface and the memory that is allocated
// to them on the forwarding complex that they are instantiated. Profiles
// (like queues) are defined in the abstract and instantiated by being
// configured on a particular interface. Separate allocation profiles may
// be used for ingress and egress traffic, with the profile being specified
// within the /qos/interfaces/interface list.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "buffer-allocation-profiles/buffer-allocation-profile"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile"
//
//	Name: string
func (n *QosPath) BufferAllocationProfile(Name string) *Qos_BufferAllocationProfilePath {
	ps := &Qos_BufferAllocationProfilePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"buffer-allocation-profiles", "buffer-allocation-profile"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// BufferAllocationProfile (list): A buffer allocation profile describes a mapping between the queues
// that are instantiated on an interface and the memory that is allocated
// to them on the forwarding complex that they are instantiated. Profiles
// (like queues) are defined in the abstract and instantiated by being
// configured on a particular interface. Separate allocation profiles may
// be used for ingress and egress traffic, with the profile being specified
// within the /qos/interfaces/interface list.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "buffer-allocation-profiles/buffer-allocation-profile"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile"
//
//	Name: string
func (n *QosPathAny) BufferAllocationProfile(Name string) *Qos_BufferAllocationProfilePathAny {
	ps := &Qos_BufferAllocationProfilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"buffer-allocation-profiles", "buffer-allocation-profile"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// BufferAllocationProfileMap (list): A buffer allocation profile describes a mapping between the queues
// that are instantiated on an interface and the memory that is allocated
// to them on the forwarding complex that they are instantiated. Profiles
// (like queues) are defined in the abstract and instantiated by being
// configured on a particular interface. Separate allocation profiles may
// be used for ingress and egress traffic, with the profile being specified
// within the /qos/interfaces/interface list.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "buffer-allocation-profiles/buffer-allocation-profile"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile"
func (n *QosPath) BufferAllocationProfileMap() *Qos_BufferAllocationProfilePathMap {
	ps := &Qos_BufferAllocationProfilePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"buffer-allocation-profiles"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// BufferAllocationProfileMap (list): A buffer allocation profile describes a mapping between the queues
// that are instantiated on an interface and the memory that is allocated
// to them on the forwarding complex that they are instantiated. Profiles
// (like queues) are defined in the abstract and instantiated by being
// configured on a particular interface. Separate allocation profiles may
// be used for ingress and egress traffic, with the profile being specified
// within the /qos/interfaces/interface list.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "buffer-allocation-profiles/buffer-allocation-profile"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile"
func (n *QosPathAny) BufferAllocationProfileMap() *Qos_BufferAllocationProfilePathMapAny {
	ps := &Qos_BufferAllocationProfilePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"buffer-allocation-profiles"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ClassifierAny (list): List of classifier elements
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "classifiers/classifier"
//	Path from root:       "/qos/classifiers/classifier"
func (n *QosPath) ClassifierAny() *Qos_ClassifierPathAny {
	ps := &Qos_ClassifierPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"classifiers", "classifier"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// ClassifierAny (list): List of classifier elements
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "classifiers/classifier"
//	Path from root:       "/qos/classifiers/classifier"
func (n *QosPathAny) ClassifierAny() *Qos_ClassifierPathAny {
	ps := &Qos_ClassifierPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"classifiers", "classifier"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Classifier (list): List of classifier elements
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "classifiers/classifier"
//	Path from root:       "/qos/classifiers/classifier"
//
//	Name: string
func (n *QosPath) Classifier(Name string) *Qos_ClassifierPath {
	ps := &Qos_ClassifierPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"classifiers", "classifier"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Classifier (list): List of classifier elements
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "classifiers/classifier"
//	Path from root:       "/qos/classifiers/classifier"
//
//	Name: string
func (n *QosPathAny) Classifier(Name string) *Qos_ClassifierPathAny {
	ps := &Qos_ClassifierPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"classifiers", "classifier"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// ClassifierMap (list): List of classifier elements
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "classifiers/classifier"
//	Path from root:       "/qos/classifiers/classifier"
func (n *QosPath) ClassifierMap() *Qos_ClassifierPathMap {
	ps := &Qos_ClassifierPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"classifiers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ClassifierMap (list): List of classifier elements
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "classifiers/classifier"
//	Path from root:       "/qos/classifiers/classifier"
func (n *QosPathAny) ClassifierMap() *Qos_ClassifierPathMapAny {
	ps := &Qos_ClassifierPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"classifiers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ForwardingGroupAny (list): List of forwarding groups.  Forwarding groups are
// logical groups of traffic that will receive common
// forwarding treatment.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "forwarding-groups/forwarding-group"
//	Path from root:       "/qos/forwarding-groups/forwarding-group"
func (n *QosPath) ForwardingGroupAny() *Qos_ForwardingGroupPathAny {
	ps := &Qos_ForwardingGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"forwarding-groups", "forwarding-group"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// ForwardingGroupAny (list): List of forwarding groups.  Forwarding groups are
// logical groups of traffic that will receive common
// forwarding treatment.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "forwarding-groups/forwarding-group"
//	Path from root:       "/qos/forwarding-groups/forwarding-group"
func (n *QosPathAny) ForwardingGroupAny() *Qos_ForwardingGroupPathAny {
	ps := &Qos_ForwardingGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"forwarding-groups", "forwarding-group"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// ForwardingGroup (list): List of forwarding groups.  Forwarding groups are
// logical groups of traffic that will receive common
// forwarding treatment.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "forwarding-groups/forwarding-group"
//	Path from root:       "/qos/forwarding-groups/forwarding-group"
//
//	Name: string
func (n *QosPath) ForwardingGroup(Name string) *Qos_ForwardingGroupPath {
	ps := &Qos_ForwardingGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"forwarding-groups", "forwarding-group"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// ForwardingGroup (list): List of forwarding groups.  Forwarding groups are
// logical groups of traffic that will receive common
// forwarding treatment.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "forwarding-groups/forwarding-group"
//	Path from root:       "/qos/forwarding-groups/forwarding-group"
//
//	Name: string
func (n *QosPathAny) ForwardingGroup(Name string) *Qos_ForwardingGroupPathAny {
	ps := &Qos_ForwardingGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"forwarding-groups", "forwarding-group"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// ForwardingGroupMap (list): List of forwarding groups.  Forwarding groups are
// logical groups of traffic that will receive common
// forwarding treatment.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "forwarding-groups/forwarding-group"
//	Path from root:       "/qos/forwarding-groups/forwarding-group"
func (n *QosPath) ForwardingGroupMap() *Qos_ForwardingGroupPathMap {
	ps := &Qos_ForwardingGroupPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"forwarding-groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ForwardingGroupMap (list): List of forwarding groups.  Forwarding groups are
// logical groups of traffic that will receive common
// forwarding treatment.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "forwarding-groups/forwarding-group"
//	Path from root:       "/qos/forwarding-groups/forwarding-group"
func (n *QosPathAny) ForwardingGroupMap() *Qos_ForwardingGroupPathMapAny {
	ps := &Qos_ForwardingGroupPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"forwarding-groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceAny (list): List of interfaces referenced by QoS entities.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/qos/interfaces/interface"
func (n *QosPath) InterfaceAny() *Qos_InterfacePathAny {
	ps := &Qos_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
	return ps
}

// InterfaceAny (list): List of interfaces referenced by QoS entities.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/qos/interfaces/interface"
func (n *QosPathAny) InterfaceAny() *Qos_InterfacePathAny {
	ps := &Qos_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
	return ps
}

// Interface (list): List of interfaces referenced by QoS entities.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/qos/interfaces/interface"
//
//	InterfaceId: string
func (n *QosPath) Interface(InterfaceId string) *Qos_InterfacePath {
	ps := &Qos_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
	return ps
}

// Interface (list): List of interfaces referenced by QoS entities.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/qos/interfaces/interface"
//
//	InterfaceId: string
func (n *QosPathAny) Interface(InterfaceId string) *Qos_InterfacePathAny {
	ps := &Qos_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): List of interfaces referenced by QoS entities.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/qos/interfaces/interface"
func (n *QosPath) InterfaceMap() *Qos_InterfacePathMap {
	ps := &Qos_InterfacePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): List of interfaces referenced by QoS entities.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/qos/interfaces/interface"
func (n *QosPathAny) InterfaceMap() *Qos_InterfacePathMapAny {
	ps := &Qos_InterfacePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// QueueAny (list): List of defined queues
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/queues/queue"
func (n *QosPath) QueueAny() *Qos_QueuePathAny {
	ps := &Qos_QueuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// QueueAny (list): List of defined queues
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/queues/queue"
func (n *QosPathAny) QueueAny() *Qos_QueuePathAny {
	ps := &Qos_QueuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Queue (list): List of defined queues
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/queues/queue"
//
//	Name: string
func (n *QosPath) Queue(Name string) *Qos_QueuePath {
	ps := &Qos_QueuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Queue (list): List of defined queues
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/queues/queue"
//
//	Name: string
func (n *QosPathAny) Queue(Name string) *Qos_QueuePathAny {
	ps := &Qos_QueuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// QueueMap (list): List of defined queues
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/queues/queue"
func (n *QosPath) QueueMap() *Qos_QueuePathMap {
	ps := &Qos_QueuePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// QueueMap (list): List of defined queues
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/queues/queue"
func (n *QosPathAny) QueueMap() *Qos_QueuePathMapAny {
	ps := &Qos_QueuePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// QueueManagementProfileAny (list): A queue management profile within the OpenConfig QoS model
// specifies how packets are ECN marked/dropped for a particular
// instance of a queue on a particular interface. for example,
// whether RED, or WRED is applied to manage the queue's occupancy.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queue-management-profiles/queue-management-profile"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile"
func (n *QosPath) QueueManagementProfileAny() *Qos_QueueManagementProfilePathAny {
	ps := &Qos_QueueManagementProfilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queue-management-profiles", "queue-management-profile"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// QueueManagementProfileAny (list): A queue management profile within the OpenConfig QoS model
// specifies how packets are ECN marked/dropped for a particular
// instance of a queue on a particular interface. for example,
// whether RED, or WRED is applied to manage the queue's occupancy.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queue-management-profiles/queue-management-profile"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile"
func (n *QosPathAny) QueueManagementProfileAny() *Qos_QueueManagementProfilePathAny {
	ps := &Qos_QueueManagementProfilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queue-management-profiles", "queue-management-profile"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// QueueManagementProfile (list): A queue management profile within the OpenConfig QoS model
// specifies how packets are ECN marked/dropped for a particular
// instance of a queue on a particular interface. for example,
// whether RED, or WRED is applied to manage the queue's occupancy.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queue-management-profiles/queue-management-profile"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile"
//
//	Name: string
func (n *QosPath) QueueManagementProfile(Name string) *Qos_QueueManagementProfilePath {
	ps := &Qos_QueueManagementProfilePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"queue-management-profiles", "queue-management-profile"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// QueueManagementProfile (list): A queue management profile within the OpenConfig QoS model
// specifies how packets are ECN marked/dropped for a particular
// instance of a queue on a particular interface. for example,
// whether RED, or WRED is applied to manage the queue's occupancy.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queue-management-profiles/queue-management-profile"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile"
//
//	Name: string
func (n *QosPathAny) QueueManagementProfile(Name string) *Qos_QueueManagementProfilePathAny {
	ps := &Qos_QueueManagementProfilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queue-management-profiles", "queue-management-profile"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// QueueManagementProfileMap (list): A queue management profile within the OpenConfig QoS model
// specifies how packets are ECN marked/dropped for a particular
// instance of a queue on a particular interface. for example,
// whether RED, or WRED is applied to manage the queue's occupancy.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queue-management-profiles/queue-management-profile"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile"
func (n *QosPath) QueueManagementProfileMap() *Qos_QueueManagementProfilePathMap {
	ps := &Qos_QueueManagementProfilePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"queue-management-profiles"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// QueueManagementProfileMap (list): A queue management profile within the OpenConfig QoS model
// specifies how packets are ECN marked/dropped for a particular
// instance of a queue on a particular interface. for example,
// whether RED, or WRED is applied to manage the queue's occupancy.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queue-management-profiles/queue-management-profile"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile"
func (n *QosPathAny) QueueManagementProfileMap() *Qos_QueueManagementProfilePathMapAny {
	ps := &Qos_QueueManagementProfilePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queue-management-profiles"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SchedulerPolicyAny (list): List of scheduler policies. A scheduler policy is a set of schedulers
// that are to be applied together. Each scheduler within a scheduler
// policy takes an input, and outputs it according to a scheduling
// discipline that is specified within it. The schedulers consume
// resources according to the specification that is provided - which
// may be absolute resource limits, or relative.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "scheduler-policies/scheduler-policy"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy"
func (n *QosPath) SchedulerPolicyAny() *Qos_SchedulerPolicyPathAny {
	ps := &Qos_SchedulerPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"scheduler-policies", "scheduler-policy"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// SchedulerPolicyAny (list): List of scheduler policies. A scheduler policy is a set of schedulers
// that are to be applied together. Each scheduler within a scheduler
// policy takes an input, and outputs it according to a scheduling
// discipline that is specified within it. The schedulers consume
// resources according to the specification that is provided - which
// may be absolute resource limits, or relative.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "scheduler-policies/scheduler-policy"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy"
func (n *QosPathAny) SchedulerPolicyAny() *Qos_SchedulerPolicyPathAny {
	ps := &Qos_SchedulerPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"scheduler-policies", "scheduler-policy"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// SchedulerPolicy (list): List of scheduler policies. A scheduler policy is a set of schedulers
// that are to be applied together. Each scheduler within a scheduler
// policy takes an input, and outputs it according to a scheduling
// discipline that is specified within it. The schedulers consume
// resources according to the specification that is provided - which
// may be absolute resource limits, or relative.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "scheduler-policies/scheduler-policy"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy"
//
//	Name: string
func (n *QosPath) SchedulerPolicy(Name string) *Qos_SchedulerPolicyPath {
	ps := &Qos_SchedulerPolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"scheduler-policies", "scheduler-policy"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// SchedulerPolicy (list): List of scheduler policies. A scheduler policy is a set of schedulers
// that are to be applied together. Each scheduler within a scheduler
// policy takes an input, and outputs it according to a scheduling
// discipline that is specified within it. The schedulers consume
// resources according to the specification that is provided - which
// may be absolute resource limits, or relative.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "scheduler-policies/scheduler-policy"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy"
//
//	Name: string
func (n *QosPathAny) SchedulerPolicy(Name string) *Qos_SchedulerPolicyPathAny {
	ps := &Qos_SchedulerPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"scheduler-policies", "scheduler-policy"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// SchedulerPolicyMap (list): List of scheduler policies. A scheduler policy is a set of schedulers
// that are to be applied together. Each scheduler within a scheduler
// policy takes an input, and outputs it according to a scheduling
// discipline that is specified within it. The schedulers consume
// resources according to the specification that is provided - which
// may be absolute resource limits, or relative.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "scheduler-policies/scheduler-policy"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy"
func (n *QosPath) SchedulerPolicyMap() *Qos_SchedulerPolicyPathMap {
	ps := &Qos_SchedulerPolicyPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"scheduler-policies"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SchedulerPolicyMap (list): List of scheduler policies. A scheduler policy is a set of schedulers
// that are to be applied together. Each scheduler within a scheduler
// policy takes an input, and outputs it according to a scheduling
// discipline that is specified within it. The schedulers consume
// resources according to the specification that is provided - which
// may be absolute resource limits, or relative.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "scheduler-policies/scheduler-policy"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy"
func (n *QosPathAny) SchedulerPolicyMap() *Qos_SchedulerPolicyPathMapAny {
	ps := &Qos_SchedulerPolicyPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"scheduler-policies"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *QosPath) State() ygnmi.SingletonQuery[*oc.Qos] {
	return ygnmi.NewSingletonQuery[*oc.Qos](
		"Qos",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *QosPathAny) State() ygnmi.WildcardQuery[*oc.Qos] {
	return ygnmi.NewWildcardQuery[*oc.Qos](
		"Qos",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *QosPath) Config() ygnmi.ConfigQuery[*oc.Qos] {
	return ygnmi.NewConfigQuery[*oc.Qos](
		"Qos",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *QosPathAny) Config() ygnmi.WildcardQuery[*oc.Qos] {
	return ygnmi.NewWildcardQuery[*oc.Qos](
		"Qos",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_BufferAllocationProfile_NamePath represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/state/name YANG schema element.
type Qos_BufferAllocationProfile_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_BufferAllocationProfile_NamePathAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/state/name YANG schema element.
type Qos_BufferAllocationProfile_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/state/name"
func (n *Qos_BufferAllocationProfile_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_BufferAllocationProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/state/name"
func (n *Qos_BufferAllocationProfile_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_BufferAllocationProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/config/name"
func (n *Qos_BufferAllocationProfile_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_BufferAllocationProfile",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/config/name"
func (n *Qos_BufferAllocationProfile_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_BufferAllocationProfile",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_BufferAllocationProfilePath represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile YANG schema element.
type Qos_BufferAllocationProfilePath struct {
	*ygnmi.NodePath
}

// Qos_BufferAllocationProfilePathAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile YANG schema element.
type Qos_BufferAllocationProfilePathAny struct {
	*ygnmi.NodePath
}

// Qos_BufferAllocationProfilePathMap represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile YANG schema element.
type Qos_BufferAllocationProfilePathMap struct {
	*ygnmi.NodePath
}

// Qos_BufferAllocationProfilePathMapAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile YANG schema element.
type Qos_BufferAllocationProfilePathMapAny struct {
	*ygnmi.NodePath
}

// Name (leaf): Unique string identifying the buffer allocation profile, used to
// reference to the profile on interfaces.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/*/name"
func (n *Qos_BufferAllocationProfilePath) Name() *Qos_BufferAllocationProfile_NamePath {
	ps := &Qos_BufferAllocationProfile_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Unique string identifying the buffer allocation profile, used to
// reference to the profile on interfaces.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/*/name"
func (n *Qos_BufferAllocationProfilePathAny) Name() *Qos_BufferAllocationProfile_NamePathAny {
	ps := &Qos_BufferAllocationProfile_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// QueueAny (list): Buffer allocation profile for a specific queue on the interface.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue"
func (n *Qos_BufferAllocationProfilePath) QueueAny() *Qos_BufferAllocationProfile_QueuePathAny {
	ps := &Qos_BufferAllocationProfile_QueuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// QueueAny (list): Buffer allocation profile for a specific queue on the interface.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue"
func (n *Qos_BufferAllocationProfilePathAny) QueueAny() *Qos_BufferAllocationProfile_QueuePathAny {
	ps := &Qos_BufferAllocationProfile_QueuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Queue (list): Buffer allocation profile for a specific queue on the interface.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue"
//
//	Name: string
func (n *Qos_BufferAllocationProfilePath) Queue(Name string) *Qos_BufferAllocationProfile_QueuePath {
	ps := &Qos_BufferAllocationProfile_QueuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Queue (list): Buffer allocation profile for a specific queue on the interface.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue"
//
//	Name: string
func (n *Qos_BufferAllocationProfilePathAny) Queue(Name string) *Qos_BufferAllocationProfile_QueuePathAny {
	ps := &Qos_BufferAllocationProfile_QueuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// QueueMap (list): Buffer allocation profile for a specific queue on the interface.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue"
func (n *Qos_BufferAllocationProfilePath) QueueMap() *Qos_BufferAllocationProfile_QueuePathMap {
	ps := &Qos_BufferAllocationProfile_QueuePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// QueueMap (list): Buffer allocation profile for a specific queue on the interface.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue"
func (n *Qos_BufferAllocationProfilePathAny) QueueMap() *Qos_BufferAllocationProfile_QueuePathMapAny {
	ps := &Qos_BufferAllocationProfile_QueuePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_BufferAllocationProfilePath) State() ygnmi.SingletonQuery[*oc.Qos_BufferAllocationProfile] {
	return ygnmi.NewSingletonQuery[*oc.Qos_BufferAllocationProfile](
		"Qos_BufferAllocationProfile",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_BufferAllocationProfilePathAny) State() ygnmi.WildcardQuery[*oc.Qos_BufferAllocationProfile] {
	return ygnmi.NewWildcardQuery[*oc.Qos_BufferAllocationProfile](
		"Qos_BufferAllocationProfile",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_BufferAllocationProfilePath) Config() ygnmi.ConfigQuery[*oc.Qos_BufferAllocationProfile] {
	return ygnmi.NewConfigQuery[*oc.Qos_BufferAllocationProfile](
		"Qos_BufferAllocationProfile",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_BufferAllocationProfilePathAny) Config() ygnmi.WildcardQuery[*oc.Qos_BufferAllocationProfile] {
	return ygnmi.NewWildcardQuery[*oc.Qos_BufferAllocationProfile](
		"Qos_BufferAllocationProfile",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_BufferAllocationProfilePathMap) State() ygnmi.SingletonQuery[map[string]*oc.Qos_BufferAllocationProfile] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Qos_BufferAllocationProfile](
		"Qos",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_BufferAllocationProfile, bool) {
			ret := gs.(*oc.Qos).BufferAllocationProfile
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:buffer-allocation-profiles"},
			PostRelPath: []string{"openconfig-qos:buffer-allocation-profile"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_BufferAllocationProfilePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Qos_BufferAllocationProfile] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_BufferAllocationProfile](
		"Qos",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_BufferAllocationProfile, bool) {
			ret := gs.(*oc.Qos).BufferAllocationProfile
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:buffer-allocation-profiles"},
			PostRelPath: []string{"openconfig-qos:buffer-allocation-profile"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_BufferAllocationProfilePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Qos_BufferAllocationProfile] {
	return ygnmi.NewConfigQuery[map[string]*oc.Qos_BufferAllocationProfile](
		"Qos",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_BufferAllocationProfile, bool) {
			ret := gs.(*oc.Qos).BufferAllocationProfile
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:buffer-allocation-profiles"},
			PostRelPath: []string{"openconfig-qos:buffer-allocation-profile"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_BufferAllocationProfilePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Qos_BufferAllocationProfile] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_BufferAllocationProfile](
		"Qos",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_BufferAllocationProfile, bool) {
			ret := gs.(*oc.Qos).BufferAllocationProfile
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:buffer-allocation-profiles"},
			PostRelPath: []string{"openconfig-qos:buffer-allocation-profile"},
		},
	)
}

// Qos_BufferAllocationProfile_Queue_DedicatedBufferPath represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/dedicated-buffer YANG schema element.
type Qos_BufferAllocationProfile_Queue_DedicatedBufferPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_BufferAllocationProfile_Queue_DedicatedBufferPathAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/dedicated-buffer YANG schema element.
type Qos_BufferAllocationProfile_Queue_DedicatedBufferPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dedicated-buffer"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/dedicated-buffer"
func (n *Qos_BufferAllocationProfile_Queue_DedicatedBufferPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_BufferAllocationProfile_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dedicated-buffer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).DedicatedBuffer
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dedicated-buffer"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/dedicated-buffer"
func (n *Qos_BufferAllocationProfile_Queue_DedicatedBufferPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_BufferAllocationProfile_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dedicated-buffer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).DedicatedBuffer
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/dedicated-buffer"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/dedicated-buffer"
func (n *Qos_BufferAllocationProfile_Queue_DedicatedBufferPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"Qos_BufferAllocationProfile_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dedicated-buffer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).DedicatedBuffer
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/dedicated-buffer"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/dedicated-buffer"
func (n *Qos_BufferAllocationProfile_Queue_DedicatedBufferPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_BufferAllocationProfile_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dedicated-buffer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).DedicatedBuffer
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_BufferAllocationProfile_Queue_DedicatedBufferTemporalPath represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/dedicated-buffer-temporal YANG schema element.
type Qos_BufferAllocationProfile_Queue_DedicatedBufferTemporalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_BufferAllocationProfile_Queue_DedicatedBufferTemporalPathAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/dedicated-buffer-temporal YANG schema element.
type Qos_BufferAllocationProfile_Queue_DedicatedBufferTemporalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dedicated-buffer-temporal"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/dedicated-buffer-temporal"
func (n *Qos_BufferAllocationProfile_Queue_DedicatedBufferTemporalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_BufferAllocationProfile_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dedicated-buffer-temporal"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).DedicatedBufferTemporal
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dedicated-buffer-temporal"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/dedicated-buffer-temporal"
func (n *Qos_BufferAllocationProfile_Queue_DedicatedBufferTemporalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_BufferAllocationProfile_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dedicated-buffer-temporal"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).DedicatedBufferTemporal
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/dedicated-buffer-temporal"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/dedicated-buffer-temporal"
func (n *Qos_BufferAllocationProfile_Queue_DedicatedBufferTemporalPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"Qos_BufferAllocationProfile_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dedicated-buffer-temporal"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).DedicatedBufferTemporal
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/dedicated-buffer-temporal"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/dedicated-buffer-temporal"
func (n *Qos_BufferAllocationProfile_Queue_DedicatedBufferTemporalPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_BufferAllocationProfile_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dedicated-buffer-temporal"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).DedicatedBufferTemporal
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_BufferAllocationProfile_Queue_DynamicLimitScalingFactorPath represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/dynamic-limit-scaling-factor YANG schema element.
type Qos_BufferAllocationProfile_Queue_DynamicLimitScalingFactorPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_BufferAllocationProfile_Queue_DynamicLimitScalingFactorPathAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/dynamic-limit-scaling-factor YANG schema element.
type Qos_BufferAllocationProfile_Queue_DynamicLimitScalingFactorPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dynamic-limit-scaling-factor"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/dynamic-limit-scaling-factor"
func (n *Qos_BufferAllocationProfile_Queue_DynamicLimitScalingFactorPath) State() ygnmi.SingletonQuery[int32] {
	return ygnmi.NewSingletonQuery[int32](
		"Qos_BufferAllocationProfile_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dynamic-limit-scaling-factor"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int32, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).DynamicLimitScalingFactor
			if ret == nil {
				var zero int32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dynamic-limit-scaling-factor"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/dynamic-limit-scaling-factor"
func (n *Qos_BufferAllocationProfile_Queue_DynamicLimitScalingFactorPathAny) State() ygnmi.WildcardQuery[int32] {
	return ygnmi.NewWildcardQuery[int32](
		"Qos_BufferAllocationProfile_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dynamic-limit-scaling-factor"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int32, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).DynamicLimitScalingFactor
			if ret == nil {
				var zero int32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/dynamic-limit-scaling-factor"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/dynamic-limit-scaling-factor"
func (n *Qos_BufferAllocationProfile_Queue_DynamicLimitScalingFactorPath) Config() ygnmi.ConfigQuery[int32] {
	return ygnmi.NewConfigQuery[int32](
		"Qos_BufferAllocationProfile_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dynamic-limit-scaling-factor"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int32, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).DynamicLimitScalingFactor
			if ret == nil {
				var zero int32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/dynamic-limit-scaling-factor"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/dynamic-limit-scaling-factor"
func (n *Qos_BufferAllocationProfile_Queue_DynamicLimitScalingFactorPathAny) Config() ygnmi.WildcardQuery[int32] {
	return ygnmi.NewWildcardQuery[int32](
		"Qos_BufferAllocationProfile_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dynamic-limit-scaling-factor"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int32, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).DynamicLimitScalingFactor
			if ret == nil {
				var zero int32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_BufferAllocationProfile_Queue_NamePath represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/name YANG schema element.
type Qos_BufferAllocationProfile_Queue_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_BufferAllocationProfile_Queue_NamePathAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/name YANG schema element.
type Qos_BufferAllocationProfile_Queue_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/name"
func (n *Qos_BufferAllocationProfile_Queue_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_BufferAllocationProfile_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/name"
func (n *Qos_BufferAllocationProfile_Queue_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_BufferAllocationProfile_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/name"
func (n *Qos_BufferAllocationProfile_Queue_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_BufferAllocationProfile_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/name"
func (n *Qos_BufferAllocationProfile_Queue_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_BufferAllocationProfile_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_BufferAllocationProfile_Queue_SharedBufferLimitTypePath represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/shared-buffer-limit-type YANG schema element.
type Qos_BufferAllocationProfile_Queue_SharedBufferLimitTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_BufferAllocationProfile_Queue_SharedBufferLimitTypePathAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/shared-buffer-limit-type YANG schema element.
type Qos_BufferAllocationProfile_Queue_SharedBufferLimitTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/shared-buffer-limit-type"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/shared-buffer-limit-type"
func (n *Qos_BufferAllocationProfile_Queue_SharedBufferLimitTypePath) State() ygnmi.SingletonQuery[oc.E_Qos_SHARED_BUFFER_LIMIT_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_Qos_SHARED_BUFFER_LIMIT_TYPE](
		"Qos_BufferAllocationProfile_Queue",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "shared-buffer-limit-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Qos_SHARED_BUFFER_LIMIT_TYPE, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).SharedBufferLimitType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/shared-buffer-limit-type"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/shared-buffer-limit-type"
func (n *Qos_BufferAllocationProfile_Queue_SharedBufferLimitTypePathAny) State() ygnmi.WildcardQuery[oc.E_Qos_SHARED_BUFFER_LIMIT_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_Qos_SHARED_BUFFER_LIMIT_TYPE](
		"Qos_BufferAllocationProfile_Queue",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "shared-buffer-limit-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Qos_SHARED_BUFFER_LIMIT_TYPE, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).SharedBufferLimitType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/shared-buffer-limit-type"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/shared-buffer-limit-type"
func (n *Qos_BufferAllocationProfile_Queue_SharedBufferLimitTypePath) Config() ygnmi.ConfigQuery[oc.E_Qos_SHARED_BUFFER_LIMIT_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_Qos_SHARED_BUFFER_LIMIT_TYPE](
		"Qos_BufferAllocationProfile_Queue",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "shared-buffer-limit-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Qos_SHARED_BUFFER_LIMIT_TYPE, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).SharedBufferLimitType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/shared-buffer-limit-type"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/shared-buffer-limit-type"
func (n *Qos_BufferAllocationProfile_Queue_SharedBufferLimitTypePathAny) Config() ygnmi.WildcardQuery[oc.E_Qos_SHARED_BUFFER_LIMIT_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_Qos_SHARED_BUFFER_LIMIT_TYPE](
		"Qos_BufferAllocationProfile_Queue",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "shared-buffer-limit-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Qos_SHARED_BUFFER_LIMIT_TYPE, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).SharedBufferLimitType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitPath represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/static-shared-buffer-limit YANG schema element.
type Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitPathAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/static-shared-buffer-limit YANG schema element.
type Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/static-shared-buffer-limit"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/static-shared-buffer-limit"
func (n *Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Qos_BufferAllocationProfile_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "static-shared-buffer-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).StaticSharedBufferLimit
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/static-shared-buffer-limit"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/static-shared-buffer-limit"
func (n *Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_BufferAllocationProfile_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "static-shared-buffer-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).StaticSharedBufferLimit
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/static-shared-buffer-limit"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/static-shared-buffer-limit"
func (n *Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Qos_BufferAllocationProfile_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "static-shared-buffer-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).StaticSharedBufferLimit
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/static-shared-buffer-limit"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/static-shared-buffer-limit"
func (n *Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_BufferAllocationProfile_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "static-shared-buffer-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).StaticSharedBufferLimit
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitTemporalPath represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/static-shared-buffer-limit-temporal YANG schema element.
type Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitTemporalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitTemporalPathAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/static-shared-buffer-limit-temporal YANG schema element.
type Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitTemporalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/static-shared-buffer-limit-temporal"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/static-shared-buffer-limit-temporal"
func (n *Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitTemporalPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Qos_BufferAllocationProfile_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "static-shared-buffer-limit-temporal"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).StaticSharedBufferLimitTemporal
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/static-shared-buffer-limit-temporal"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/static-shared-buffer-limit-temporal"
func (n *Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitTemporalPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_BufferAllocationProfile_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "static-shared-buffer-limit-temporal"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).StaticSharedBufferLimitTemporal
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/static-shared-buffer-limit-temporal"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/static-shared-buffer-limit-temporal"
func (n *Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitTemporalPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Qos_BufferAllocationProfile_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "static-shared-buffer-limit-temporal"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).StaticSharedBufferLimitTemporal
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/static-shared-buffer-limit-temporal"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/static-shared-buffer-limit-temporal"
func (n *Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitTemporalPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_BufferAllocationProfile_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "static-shared-buffer-limit-temporal"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).StaticSharedBufferLimitTemporal
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_BufferAllocationProfile_Queue_UseSharedBufferPath represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/use-shared-buffer YANG schema element.
type Qos_BufferAllocationProfile_Queue_UseSharedBufferPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_BufferAllocationProfile_Queue_UseSharedBufferPathAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/use-shared-buffer YANG schema element.
type Qos_BufferAllocationProfile_Queue_UseSharedBufferPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/use-shared-buffer"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/use-shared-buffer"
func (n *Qos_BufferAllocationProfile_Queue_UseSharedBufferPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Qos_BufferAllocationProfile_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "use-shared-buffer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).UseSharedBuffer
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/use-shared-buffer"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/use-shared-buffer"
func (n *Qos_BufferAllocationProfile_Queue_UseSharedBufferPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Qos_BufferAllocationProfile_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "use-shared-buffer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).UseSharedBuffer
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/use-shared-buffer"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/use-shared-buffer"
func (n *Qos_BufferAllocationProfile_Queue_UseSharedBufferPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Qos_BufferAllocationProfile_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "use-shared-buffer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).UseSharedBuffer
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/use-shared-buffer"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/use-shared-buffer"
func (n *Qos_BufferAllocationProfile_Queue_UseSharedBufferPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Qos_BufferAllocationProfile_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "use-shared-buffer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).UseSharedBuffer
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_BufferAllocationProfile_QueuePath represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue YANG schema element.
type Qos_BufferAllocationProfile_QueuePath struct {
	*ygnmi.NodePath
}

// Qos_BufferAllocationProfile_QueuePathAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue YANG schema element.
type Qos_BufferAllocationProfile_QueuePathAny struct {
	*ygnmi.NodePath
}

// Qos_BufferAllocationProfile_QueuePathMap represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue YANG schema element.
type Qos_BufferAllocationProfile_QueuePathMap struct {
	*ygnmi.NodePath
}

// Qos_BufferAllocationProfile_QueuePathMapAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue YANG schema element.
type Qos_BufferAllocationProfile_QueuePathMapAny struct {
	*ygnmi.NodePath
}

// DedicatedBuffer (leaf): This is the dedicated buffer that is carved for the queue, this is the minimum
// number of bytes reserved for this queue.
// This leaf is mutualy exclusive with dedicated-buffer-temporal leaf
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/dedicated-buffer"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/*/dedicated-buffer"
func (n *Qos_BufferAllocationProfile_QueuePath) DedicatedBuffer() *Qos_BufferAllocationProfile_Queue_DedicatedBufferPath {
	ps := &Qos_BufferAllocationProfile_Queue_DedicatedBufferPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dedicated-buffer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DedicatedBuffer (leaf): This is the dedicated buffer that is carved for the queue, this is the minimum
// number of bytes reserved for this queue.
// This leaf is mutualy exclusive with dedicated-buffer-temporal leaf
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/dedicated-buffer"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/*/dedicated-buffer"
func (n *Qos_BufferAllocationProfile_QueuePathAny) DedicatedBuffer() *Qos_BufferAllocationProfile_Queue_DedicatedBufferPathAny {
	ps := &Qos_BufferAllocationProfile_Queue_DedicatedBufferPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dedicated-buffer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DedicatedBufferTemporal (leaf): This is the dedicated buffer that is carved for the queue. The the minimum
// number of bytes reserved for this queue is calculated by multiplying by interface speed
// queue is attached to and queues minimum, guarantaed transmit share (derived
// form WRR schedulers weights).
// This leaf shouldbot be used for strict priority scheduled queues.
// This leaf is mutualy exclusive with dedicated-buffer leaf
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/dedicated-buffer-temporal"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/*/dedicated-buffer-temporal"
func (n *Qos_BufferAllocationProfile_QueuePath) DedicatedBufferTemporal() *Qos_BufferAllocationProfile_Queue_DedicatedBufferTemporalPath {
	ps := &Qos_BufferAllocationProfile_Queue_DedicatedBufferTemporalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dedicated-buffer-temporal"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DedicatedBufferTemporal (leaf): This is the dedicated buffer that is carved for the queue. The the minimum
// number of bytes reserved for this queue is calculated by multiplying by interface speed
// queue is attached to and queues minimum, guarantaed transmit share (derived
// form WRR schedulers weights).
// This leaf shouldbot be used for strict priority scheduled queues.
// This leaf is mutualy exclusive with dedicated-buffer leaf
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/dedicated-buffer-temporal"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/*/dedicated-buffer-temporal"
func (n *Qos_BufferAllocationProfile_QueuePathAny) DedicatedBufferTemporal() *Qos_BufferAllocationProfile_Queue_DedicatedBufferTemporalPathAny {
	ps := &Qos_BufferAllocationProfile_Queue_DedicatedBufferTemporalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dedicated-buffer-temporal"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DynamicLimitScalingFactor (leaf): If shared-buffer-limit-type is DYNAMIC_BASED_ON_SCALING_FACTOR, the scaling
// factor and the current free space in the shared pool is used to determine the
// maximum buffer sapce from the shared pool that the queue is allowed to use.
//
// Example: If a queue is using 79MB and the other queues are using 11MB, the
// free buffer is 10MB. If the configured scaling factor is 3 for the queue, the
// maximum buffer space from the shared pool that the queue is allowed to use is
// calculated as (free buffer * 2^scaling factor) ie. 10MB*2^3 = 80MB. Since the
// current usage is 79MB which is < 80MB, the packet is queued.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/dynamic-limit-scaling-factor"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/*/dynamic-limit-scaling-factor"
func (n *Qos_BufferAllocationProfile_QueuePath) DynamicLimitScalingFactor() *Qos_BufferAllocationProfile_Queue_DynamicLimitScalingFactorPath {
	ps := &Qos_BufferAllocationProfile_Queue_DynamicLimitScalingFactorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dynamic-limit-scaling-factor"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DynamicLimitScalingFactor (leaf): If shared-buffer-limit-type is DYNAMIC_BASED_ON_SCALING_FACTOR, the scaling
// factor and the current free space in the shared pool is used to determine the
// maximum buffer sapce from the shared pool that the queue is allowed to use.
//
// Example: If a queue is using 79MB and the other queues are using 11MB, the
// free buffer is 10MB. If the configured scaling factor is 3 for the queue, the
// maximum buffer space from the shared pool that the queue is allowed to use is
// calculated as (free buffer * 2^scaling factor) ie. 10MB*2^3 = 80MB. Since the
// current usage is 79MB which is < 80MB, the packet is queued.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/dynamic-limit-scaling-factor"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/*/dynamic-limit-scaling-factor"
func (n *Qos_BufferAllocationProfile_QueuePathAny) DynamicLimitScalingFactor() *Qos_BufferAllocationProfile_Queue_DynamicLimitScalingFactorPathAny {
	ps := &Qos_BufferAllocationProfile_Queue_DynamicLimitScalingFactorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dynamic-limit-scaling-factor"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Reference to the queue being referenced within the buffer allocation profile.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/*/name"
func (n *Qos_BufferAllocationProfile_QueuePath) Name() *Qos_BufferAllocationProfile_Queue_NamePath {
	ps := &Qos_BufferAllocationProfile_Queue_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Reference to the queue being referenced within the buffer allocation profile.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/*/name"
func (n *Qos_BufferAllocationProfile_QueuePathAny) Name() *Qos_BufferAllocationProfile_Queue_NamePathAny {
	ps := &Qos_BufferAllocationProfile_Queue_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SharedBufferLimitType (leaf): The type of limit used to specify the amount of buffer space that the queue
// is allowed to use from the shared pool.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/shared-buffer-limit-type"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/*/shared-buffer-limit-type"
func (n *Qos_BufferAllocationProfile_QueuePath) SharedBufferLimitType() *Qos_BufferAllocationProfile_Queue_SharedBufferLimitTypePath {
	ps := &Qos_BufferAllocationProfile_Queue_SharedBufferLimitTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "shared-buffer-limit-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SharedBufferLimitType (leaf): The type of limit used to specify the amount of buffer space that the queue
// is allowed to use from the shared pool.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/shared-buffer-limit-type"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/*/shared-buffer-limit-type"
func (n *Qos_BufferAllocationProfile_QueuePathAny) SharedBufferLimitType() *Qos_BufferAllocationProfile_Queue_SharedBufferLimitTypePathAny {
	ps := &Qos_BufferAllocationProfile_Queue_SharedBufferLimitTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "shared-buffer-limit-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// StaticSharedBufferLimit (leaf): If the shared-buffer-limit-type is STATIC, then static-shared-buffer-limit is
// the maximum number of bytes that the queue is allowed to use from the shared
// pool.
// This leaf is mutualy exclusive with static-shared-buffer-limit-temporal leaf.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/static-shared-buffer-limit"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/*/static-shared-buffer-limit"
func (n *Qos_BufferAllocationProfile_QueuePath) StaticSharedBufferLimit() *Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitPath {
	ps := &Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "static-shared-buffer-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// StaticSharedBufferLimit (leaf): If the shared-buffer-limit-type is STATIC, then static-shared-buffer-limit is
// the maximum number of bytes that the queue is allowed to use from the shared
// pool.
// This leaf is mutualy exclusive with static-shared-buffer-limit-temporal leaf.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/static-shared-buffer-limit"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/*/static-shared-buffer-limit"
func (n *Qos_BufferAllocationProfile_QueuePathAny) StaticSharedBufferLimit() *Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitPathAny {
	ps := &Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "static-shared-buffer-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// StaticSharedBufferLimitTemporal (leaf): If the shared-buffer-limit-type is STATIC, then static-shared-buffer-limit-temporal is
// the maximum number of bytes that the queue is allowed to use from the shared
// pool.
// The the number of bytes is calculated by multiplying static-shared-buffer-limit-temporal
// by interface speed the queue is attached to and queues minimum, guarantaed transmit share
// (derived form WRR schedulers weights).
// This leaf shouldbot be used for strict priority scheduled queues.
// This leaf is mutualy exclusive with static-shared-buffer-limit leaf.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/static-shared-buffer-limit-temporal"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/*/static-shared-buffer-limit-temporal"
func (n *Qos_BufferAllocationProfile_QueuePath) StaticSharedBufferLimitTemporal() *Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitTemporalPath {
	ps := &Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitTemporalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "static-shared-buffer-limit-temporal"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// StaticSharedBufferLimitTemporal (leaf): If the shared-buffer-limit-type is STATIC, then static-shared-buffer-limit-temporal is
// the maximum number of bytes that the queue is allowed to use from the shared
// pool.
// The the number of bytes is calculated by multiplying static-shared-buffer-limit-temporal
// by interface speed the queue is attached to and queues minimum, guarantaed transmit share
// (derived form WRR schedulers weights).
// This leaf shouldbot be used for strict priority scheduled queues.
// This leaf is mutualy exclusive with static-shared-buffer-limit leaf.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/static-shared-buffer-limit-temporal"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/*/static-shared-buffer-limit-temporal"
func (n *Qos_BufferAllocationProfile_QueuePathAny) StaticSharedBufferLimitTemporal() *Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitTemporalPathAny {
	ps := &Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitTemporalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "static-shared-buffer-limit-temporal"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UseSharedBuffer (leaf): If the flag is true, then the queue is allowed to use buffers from shared pool
// in additional to the dedicated buffers assigned for this queue.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/use-shared-buffer"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/*/use-shared-buffer"
func (n *Qos_BufferAllocationProfile_QueuePath) UseSharedBuffer() *Qos_BufferAllocationProfile_Queue_UseSharedBufferPath {
	ps := &Qos_BufferAllocationProfile_Queue_UseSharedBufferPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "use-shared-buffer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UseSharedBuffer (leaf): If the flag is true, then the queue is allowed to use buffers from shared pool
// in additional to the dedicated buffers assigned for this queue.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/use-shared-buffer"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/*/use-shared-buffer"
func (n *Qos_BufferAllocationProfile_QueuePathAny) UseSharedBuffer() *Qos_BufferAllocationProfile_Queue_UseSharedBufferPathAny {
	ps := &Qos_BufferAllocationProfile_Queue_UseSharedBufferPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "use-shared-buffer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_BufferAllocationProfile_QueuePath) State() ygnmi.SingletonQuery[*oc.Qos_BufferAllocationProfile_Queue] {
	return ygnmi.NewSingletonQuery[*oc.Qos_BufferAllocationProfile_Queue](
		"Qos_BufferAllocationProfile_Queue",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_BufferAllocationProfile_QueuePathAny) State() ygnmi.WildcardQuery[*oc.Qos_BufferAllocationProfile_Queue] {
	return ygnmi.NewWildcardQuery[*oc.Qos_BufferAllocationProfile_Queue](
		"Qos_BufferAllocationProfile_Queue",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_BufferAllocationProfile_QueuePath) Config() ygnmi.ConfigQuery[*oc.Qos_BufferAllocationProfile_Queue] {
	return ygnmi.NewConfigQuery[*oc.Qos_BufferAllocationProfile_Queue](
		"Qos_BufferAllocationProfile_Queue",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_BufferAllocationProfile_QueuePathAny) Config() ygnmi.WildcardQuery[*oc.Qos_BufferAllocationProfile_Queue] {
	return ygnmi.NewWildcardQuery[*oc.Qos_BufferAllocationProfile_Queue](
		"Qos_BufferAllocationProfile_Queue",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_BufferAllocationProfile_QueuePathMap) State() ygnmi.SingletonQuery[map[string]*oc.Qos_BufferAllocationProfile_Queue] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Qos_BufferAllocationProfile_Queue](
		"Qos_BufferAllocationProfile",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_BufferAllocationProfile_Queue, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile).Queue
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queues"},
			PostRelPath: []string{"openconfig-qos:queue"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_BufferAllocationProfile_QueuePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Qos_BufferAllocationProfile_Queue] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_BufferAllocationProfile_Queue](
		"Qos_BufferAllocationProfile",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_BufferAllocationProfile_Queue, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile).Queue
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queues"},
			PostRelPath: []string{"openconfig-qos:queue"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_BufferAllocationProfile_QueuePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Qos_BufferAllocationProfile_Queue] {
	return ygnmi.NewConfigQuery[map[string]*oc.Qos_BufferAllocationProfile_Queue](
		"Qos_BufferAllocationProfile",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_BufferAllocationProfile_Queue, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile).Queue
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queues"},
			PostRelPath: []string{"openconfig-qos:queue"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_BufferAllocationProfile_QueuePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Qos_BufferAllocationProfile_Queue] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_BufferAllocationProfile_Queue](
		"Qos_BufferAllocationProfile",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_BufferAllocationProfile_Queue, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile).Queue
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queues"},
			PostRelPath: []string{"openconfig-qos:queue"},
		},
	)
}

// Qos_Classifier_NamePath represents the /openconfig-qos/qos/classifiers/classifier/state/name YANG schema element.
type Qos_Classifier_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_NamePathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/state/name YANG schema element.
type Qos_Classifier_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/classifiers/classifier/state/name"
func (n *Qos_Classifier_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Classifier",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/classifiers/classifier/state/name"
func (n *Qos_Classifier_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/classifiers/classifier/config/name"
func (n *Qos_Classifier_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Classifier",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/classifiers/classifier/config/name"
func (n *Qos_Classifier_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_TypePath represents the /openconfig-qos/qos/classifiers/classifier/state/type YANG schema element.
type Qos_Classifier_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_TypePathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/state/type YANG schema element.
type Qos_Classifier_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/type"
//	Path from root:       "/qos/classifiers/classifier/state/type"
func (n *Qos_Classifier_TypePath) State() ygnmi.SingletonQuery[oc.E_Qos_Classifier_Type] {
	return ygnmi.NewSingletonQuery[oc.E_Qos_Classifier_Type](
		"Qos_Classifier",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Qos_Classifier_Type, bool) {
			ret := gs.(*oc.Qos_Classifier).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/type"
//	Path from root:       "/qos/classifiers/classifier/state/type"
func (n *Qos_Classifier_TypePathAny) State() ygnmi.WildcardQuery[oc.E_Qos_Classifier_Type] {
	return ygnmi.NewWildcardQuery[oc.E_Qos_Classifier_Type](
		"Qos_Classifier",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Qos_Classifier_Type, bool) {
			ret := gs.(*oc.Qos_Classifier).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/type"
//	Path from root:       "/qos/classifiers/classifier/config/type"
func (n *Qos_Classifier_TypePath) Config() ygnmi.ConfigQuery[oc.E_Qos_Classifier_Type] {
	return ygnmi.NewConfigQuery[oc.E_Qos_Classifier_Type](
		"Qos_Classifier",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Qos_Classifier_Type, bool) {
			ret := gs.(*oc.Qos_Classifier).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/type"
//	Path from root:       "/qos/classifiers/classifier/config/type"
func (n *Qos_Classifier_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_Qos_Classifier_Type] {
	return ygnmi.NewWildcardQuery[oc.E_Qos_Classifier_Type](
		"Qos_Classifier",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Qos_Classifier_Type, bool) {
			ret := gs.(*oc.Qos_Classifier).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_ClassifierPath represents the /openconfig-qos/qos/classifiers/classifier YANG schema element.
type Qos_ClassifierPath struct {
	*ygnmi.NodePath
}

// Qos_ClassifierPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier YANG schema element.
type Qos_ClassifierPathAny struct {
	*ygnmi.NodePath
}

// Qos_ClassifierPathMap represents the /openconfig-qos/qos/classifiers/classifier YANG schema element.
type Qos_ClassifierPathMap struct {
	*ygnmi.NodePath
}

// Qos_ClassifierPathMapAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier YANG schema element.
type Qos_ClassifierPathMapAny struct {
	*ygnmi.NodePath
}

// Name (leaf): User-assigned name of the classifier
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/classifiers/classifier/*/name"
func (n *Qos_ClassifierPath) Name() *Qos_Classifier_NamePath {
	ps := &Qos_Classifier_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): User-assigned name of the classifier
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/classifiers/classifier/*/name"
func (n *Qos_ClassifierPathAny) Name() *Qos_Classifier_NamePathAny {
	ps := &Qos_Classifier_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TermAny (list): List of match terms used in the classifier
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "terms/term"
//	Path from root:       "/qos/classifiers/classifier/terms/term"
func (n *Qos_ClassifierPath) TermAny() *Qos_Classifier_TermPathAny {
	ps := &Qos_Classifier_TermPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"terms", "term"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// TermAny (list): List of match terms used in the classifier
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "terms/term"
//	Path from root:       "/qos/classifiers/classifier/terms/term"
func (n *Qos_ClassifierPathAny) TermAny() *Qos_Classifier_TermPathAny {
	ps := &Qos_Classifier_TermPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"terms", "term"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// Term (list): List of match terms used in the classifier
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "terms/term"
//	Path from root:       "/qos/classifiers/classifier/terms/term"
//
//	Id: string
func (n *Qos_ClassifierPath) Term(Id string) *Qos_Classifier_TermPath {
	ps := &Qos_Classifier_TermPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"terms", "term"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// Term (list): List of match terms used in the classifier
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "terms/term"
//	Path from root:       "/qos/classifiers/classifier/terms/term"
//
//	Id: string
func (n *Qos_ClassifierPathAny) Term(Id string) *Qos_Classifier_TermPathAny {
	ps := &Qos_Classifier_TermPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"terms", "term"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// TermMap (list): List of match terms used in the classifier
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "terms/term"
//	Path from root:       "/qos/classifiers/classifier/terms/term"
func (n *Qos_ClassifierPath) TermMap() *Qos_Classifier_TermPathMap {
	ps := &Qos_Classifier_TermPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"terms"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TermMap (list): List of match terms used in the classifier
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "terms/term"
//	Path from root:       "/qos/classifiers/classifier/terms/term"
func (n *Qos_ClassifierPathAny) TermMap() *Qos_Classifier_TermPathMapAny {
	ps := &Qos_Classifier_TermPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"terms"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Type (leaf): Type of classifier.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/type"
//	Path from root:       "/qos/classifiers/classifier/*/type"
func (n *Qos_ClassifierPath) Type() *Qos_Classifier_TypePath {
	ps := &Qos_Classifier_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Type of classifier.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/type"
//	Path from root:       "/qos/classifiers/classifier/*/type"
func (n *Qos_ClassifierPathAny) Type() *Qos_Classifier_TypePathAny {
	ps := &Qos_Classifier_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_ClassifierPath) State() ygnmi.SingletonQuery[*oc.Qos_Classifier] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Classifier](
		"Qos_Classifier",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_ClassifierPathAny) State() ygnmi.WildcardQuery[*oc.Qos_Classifier] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier](
		"Qos_Classifier",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_ClassifierPath) Config() ygnmi.ConfigQuery[*oc.Qos_Classifier] {
	return ygnmi.NewConfigQuery[*oc.Qos_Classifier](
		"Qos_Classifier",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_ClassifierPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Classifier] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier](
		"Qos_Classifier",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_ClassifierPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Qos_Classifier] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Qos_Classifier](
		"Qos",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Classifier, bool) {
			ret := gs.(*oc.Qos).Classifier
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:classifiers"},
			PostRelPath: []string{"openconfig-qos:classifier"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_ClassifierPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Qos_Classifier] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_Classifier](
		"Qos",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Classifier, bool) {
			ret := gs.(*oc.Qos).Classifier
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:classifiers"},
			PostRelPath: []string{"openconfig-qos:classifier"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_ClassifierPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Qos_Classifier] {
	return ygnmi.NewConfigQuery[map[string]*oc.Qos_Classifier](
		"Qos",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Classifier, bool) {
			ret := gs.(*oc.Qos).Classifier
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:classifiers"},
			PostRelPath: []string{"openconfig-qos:classifier"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_ClassifierPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Qos_Classifier] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_Classifier](
		"Qos",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Classifier, bool) {
			ret := gs.(*oc.Qos).Classifier
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:classifiers"},
			PostRelPath: []string{"openconfig-qos:classifier"},
		},
	)
}

// Qos_Classifier_Term_IdPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/state/id YANG schema element.
type Qos_Classifier_Term_IdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_IdPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/state/id YANG schema element.
type Qos_Classifier_Term_IdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/id"
//	Path from root:       "/qos/classifiers/classifier/terms/term/state/id"
func (n *Qos_Classifier_Term_IdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Classifier_Term",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/id"
//	Path from root:       "/qos/classifiers/classifier/terms/term/state/id"
func (n *Qos_Classifier_Term_IdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/id"
//	Path from root:       "/qos/classifiers/classifier/terms/term/config/id"
func (n *Qos_Classifier_Term_IdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Classifier_Term",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/id"
//	Path from root:       "/qos/classifiers/classifier/terms/term/config/id"
func (n *Qos_Classifier_Term_IdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_TermPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term YANG schema element.
type Qos_Classifier_TermPath struct {
	*ygnmi.NodePath
}

// Qos_Classifier_TermPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term YANG schema element.
type Qos_Classifier_TermPathAny struct {
	*ygnmi.NodePath
}

// Qos_Classifier_TermPathMap represents the /openconfig-qos/qos/classifiers/classifier/terms/term YANG schema element.
type Qos_Classifier_TermPathMap struct {
	*ygnmi.NodePath
}

// Qos_Classifier_TermPathMapAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term YANG schema element.
type Qos_Classifier_TermPathMapAny struct {
	*ygnmi.NodePath
}

// Actions (container): Actions to be applied for packets matching the specified
// classification rules.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "actions"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions"
func (n *Qos_Classifier_TermPath) Actions() *Qos_Classifier_Term_ActionsPath {
	ps := &Qos_Classifier_Term_ActionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"actions"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Actions (container): Actions to be applied for packets matching the specified
// classification rules.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "actions"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions"
func (n *Qos_Classifier_TermPathAny) Actions() *Qos_Classifier_Term_ActionsPathAny {
	ps := &Qos_Classifier_Term_ActionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"actions"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Conditions (container): Conditions for the classifier term. Packets must match all of
// the criteria specified within the match condition to be considered
// matching the term.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "conditions"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions"
func (n *Qos_Classifier_TermPath) Conditions() *Qos_Classifier_Term_ConditionsPath {
	ps := &Qos_Classifier_Term_ConditionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"conditions"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Conditions (container): Conditions for the classifier term. Packets must match all of
// the criteria specified within the match condition to be considered
// matching the term.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "conditions"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions"
func (n *Qos_Classifier_TermPathAny) Conditions() *Qos_Classifier_Term_ConditionsPathAny {
	ps := &Qos_Classifier_Term_ConditionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"conditions"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Id (leaf): Identifier for the match term
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/id"
//	Path from root:       "/qos/classifiers/classifier/terms/term/*/id"
func (n *Qos_Classifier_TermPath) Id() *Qos_Classifier_Term_IdPath {
	ps := &Qos_Classifier_Term_IdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): Identifier for the match term
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/id"
//	Path from root:       "/qos/classifiers/classifier/terms/term/*/id"
func (n *Qos_Classifier_TermPathAny) Id() *Qos_Classifier_Term_IdPathAny {
	ps := &Qos_Classifier_Term_IdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_TermPath) State() ygnmi.SingletonQuery[*oc.Qos_Classifier_Term] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Classifier_Term](
		"Qos_Classifier_Term",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_TermPathAny) State() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term](
		"Qos_Classifier_Term",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_TermPath) Config() ygnmi.ConfigQuery[*oc.Qos_Classifier_Term] {
	return ygnmi.NewConfigQuery[*oc.Qos_Classifier_Term](
		"Qos_Classifier_Term",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_TermPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term](
		"Qos_Classifier_Term",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_TermPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Qos_Classifier_Term] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Qos_Classifier_Term](
		"Qos_Classifier",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Classifier_Term, bool) {
			ret := gs.(*oc.Qos_Classifier).Term
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:terms"},
			PostRelPath: []string{"openconfig-qos:term"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_TermPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Qos_Classifier_Term] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_Classifier_Term](
		"Qos_Classifier",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Classifier_Term, bool) {
			ret := gs.(*oc.Qos_Classifier).Term
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:terms"},
			PostRelPath: []string{"openconfig-qos:term"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_TermPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Qos_Classifier_Term] {
	return ygnmi.NewConfigQuery[map[string]*oc.Qos_Classifier_Term](
		"Qos_Classifier",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Classifier_Term, bool) {
			ret := gs.(*oc.Qos_Classifier).Term
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:terms"},
			PostRelPath: []string{"openconfig-qos:term"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_TermPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Qos_Classifier_Term] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_Classifier_Term](
		"Qos_Classifier",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Classifier_Term, bool) {
			ret := gs.(*oc.Qos_Classifier).Term
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:terms"},
			PostRelPath: []string{"openconfig-qos:term"},
		},
	)
}

// Qos_Classifier_Term_Actions_TargetGroupPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/state/target-group YANG schema element.
type Qos_Classifier_Term_Actions_TargetGroupPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Actions_TargetGroupPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/state/target-group YANG schema element.
type Qos_Classifier_Term_Actions_TargetGroupPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/target-group"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/state/target-group"
func (n *Qos_Classifier_Term_Actions_TargetGroupPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Classifier_Term_Actions",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "target-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Actions).TargetGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Actions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/target-group"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/state/target-group"
func (n *Qos_Classifier_Term_Actions_TargetGroupPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Actions",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "target-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Actions).TargetGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Actions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/target-group"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/config/target-group"
func (n *Qos_Classifier_Term_Actions_TargetGroupPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Classifier_Term_Actions",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "target-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Actions).TargetGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Actions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/target-group"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/config/target-group"
func (n *Qos_Classifier_Term_Actions_TargetGroupPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Actions",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "target-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Actions).TargetGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Actions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_ActionsPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/actions YANG schema element.
type Qos_Classifier_Term_ActionsPath struct {
	*ygnmi.NodePath
}

// Qos_Classifier_Term_ActionsPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/actions YANG schema element.
type Qos_Classifier_Term_ActionsPathAny struct {
	*ygnmi.NodePath
}

// Remark (container): Remark actions to be associated with packets that match the
// classifier term. Where a packet matches these criteria, the
// specified rewrite actions should be performed.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "remark"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/remark"
func (n *Qos_Classifier_Term_ActionsPath) Remark() *Qos_Classifier_Term_Actions_RemarkPath {
	ps := &Qos_Classifier_Term_Actions_RemarkPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"remark"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Remark (container): Remark actions to be associated with packets that match the
// classifier term. Where a packet matches these criteria, the
// specified rewrite actions should be performed.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "remark"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/remark"
func (n *Qos_Classifier_Term_ActionsPathAny) Remark() *Qos_Classifier_Term_Actions_RemarkPathAny {
	ps := &Qos_Classifier_Term_Actions_RemarkPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"remark"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TargetGroup (leaf): References the forwarding group or class to which the
// matched packets should be assigned
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/target-group"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/*/target-group"
func (n *Qos_Classifier_Term_ActionsPath) TargetGroup() *Qos_Classifier_Term_Actions_TargetGroupPath {
	ps := &Qos_Classifier_Term_Actions_TargetGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "target-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TargetGroup (leaf): References the forwarding group or class to which the
// matched packets should be assigned
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/target-group"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/*/target-group"
func (n *Qos_Classifier_Term_ActionsPathAny) TargetGroup() *Qos_Classifier_Term_Actions_TargetGroupPathAny {
	ps := &Qos_Classifier_Term_Actions_TargetGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "target-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_ActionsPath) State() ygnmi.SingletonQuery[*oc.Qos_Classifier_Term_Actions] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Classifier_Term_Actions](
		"Qos_Classifier_Term_Actions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_ActionsPathAny) State() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term_Actions] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term_Actions](
		"Qos_Classifier_Term_Actions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_ActionsPath) Config() ygnmi.ConfigQuery[*oc.Qos_Classifier_Term_Actions] {
	return ygnmi.NewConfigQuery[*oc.Qos_Classifier_Term_Actions](
		"Qos_Classifier_Term_Actions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_ActionsPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term_Actions] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term_Actions](
		"Qos_Classifier_Term_Actions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Actions_Remark_SetDot1PPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/remark/state/set-dot1p YANG schema element.
type Qos_Classifier_Term_Actions_Remark_SetDot1PPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Actions_Remark_SetDot1PPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/remark/state/set-dot1p YANG schema element.
type Qos_Classifier_Term_Actions_Remark_SetDot1PPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dot1p"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/remark/state/set-dot1p"
func (n *Qos_Classifier_Term_Actions_Remark_SetDot1PPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_Classifier_Term_Actions_Remark",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Actions_Remark).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Actions_Remark) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dot1p"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/remark/state/set-dot1p"
func (n *Qos_Classifier_Term_Actions_Remark_SetDot1PPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_Classifier_Term_Actions_Remark",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Actions_Remark).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Actions_Remark) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dot1p"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/remark/config/set-dot1p"
func (n *Qos_Classifier_Term_Actions_Remark_SetDot1PPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_Classifier_Term_Actions_Remark",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Actions_Remark).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Actions_Remark) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dot1p"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/remark/config/set-dot1p"
func (n *Qos_Classifier_Term_Actions_Remark_SetDot1PPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_Classifier_Term_Actions_Remark",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Actions_Remark).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Actions_Remark) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Actions_Remark_SetDscpPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/remark/state/set-dscp YANG schema element.
type Qos_Classifier_Term_Actions_Remark_SetDscpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Actions_Remark_SetDscpPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/remark/state/set-dscp YANG schema element.
type Qos_Classifier_Term_Actions_Remark_SetDscpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dscp"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/remark/state/set-dscp"
func (n *Qos_Classifier_Term_Actions_Remark_SetDscpPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_Classifier_Term_Actions_Remark",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Actions_Remark).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Actions_Remark) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dscp"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/remark/state/set-dscp"
func (n *Qos_Classifier_Term_Actions_Remark_SetDscpPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_Classifier_Term_Actions_Remark",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Actions_Remark).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Actions_Remark) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dscp"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/remark/config/set-dscp"
func (n *Qos_Classifier_Term_Actions_Remark_SetDscpPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_Classifier_Term_Actions_Remark",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Actions_Remark).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Actions_Remark) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dscp"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/remark/config/set-dscp"
func (n *Qos_Classifier_Term_Actions_Remark_SetDscpPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_Classifier_Term_Actions_Remark",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Actions_Remark).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Actions_Remark) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Actions_Remark_SetMplsTcPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/remark/state/set-mpls-tc YANG schema element.
type Qos_Classifier_Term_Actions_Remark_SetMplsTcPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Actions_Remark_SetMplsTcPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/remark/state/set-mpls-tc YANG schema element.
type Qos_Classifier_Term_Actions_Remark_SetMplsTcPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-mpls-tc"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/remark/state/set-mpls-tc"
func (n *Qos_Classifier_Term_Actions_Remark_SetMplsTcPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_Classifier_Term_Actions_Remark",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Actions_Remark).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Actions_Remark) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-mpls-tc"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/remark/state/set-mpls-tc"
func (n *Qos_Classifier_Term_Actions_Remark_SetMplsTcPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_Classifier_Term_Actions_Remark",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Actions_Remark).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Actions_Remark) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-mpls-tc"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/remark/config/set-mpls-tc"
func (n *Qos_Classifier_Term_Actions_Remark_SetMplsTcPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_Classifier_Term_Actions_Remark",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Actions_Remark).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Actions_Remark) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-mpls-tc"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/remark/config/set-mpls-tc"
func (n *Qos_Classifier_Term_Actions_Remark_SetMplsTcPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_Classifier_Term_Actions_Remark",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Actions_Remark).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Actions_Remark) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Actions_RemarkPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/remark YANG schema element.
type Qos_Classifier_Term_Actions_RemarkPath struct {
	*ygnmi.NodePath
}

// Qos_Classifier_Term_Actions_RemarkPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/remark YANG schema element.
type Qos_Classifier_Term_Actions_RemarkPathAny struct {
	*ygnmi.NodePath
}

// SetDot1P (leaf): Sets the 3-bit class-of-service value in the
// Ethernet packet header for 802.1Q VLAN-tagged packets,
// also known as PCP (priority code point).
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dot1p"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/remark/*/set-dot1p"
func (n *Qos_Classifier_Term_Actions_RemarkPath) SetDot1P() *Qos_Classifier_Term_Actions_Remark_SetDot1PPath {
	ps := &Qos_Classifier_Term_Actions_Remark_SetDot1PPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dot1p"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetDot1P (leaf): Sets the 3-bit class-of-service value in the
// Ethernet packet header for 802.1Q VLAN-tagged packets,
// also known as PCP (priority code point).
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dot1p"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/remark/*/set-dot1p"
func (n *Qos_Classifier_Term_Actions_RemarkPathAny) SetDot1P() *Qos_Classifier_Term_Actions_Remark_SetDot1PPathAny {
	ps := &Qos_Classifier_Term_Actions_Remark_SetDot1PPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dot1p"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetDscp (leaf): Sets the 6-bit DSCP (differentiated services code point)
// value in the IP packet header.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dscp"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/remark/*/set-dscp"
func (n *Qos_Classifier_Term_Actions_RemarkPath) SetDscp() *Qos_Classifier_Term_Actions_Remark_SetDscpPath {
	ps := &Qos_Classifier_Term_Actions_Remark_SetDscpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetDscp (leaf): Sets the 6-bit DSCP (differentiated services code point)
// value in the IP packet header.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dscp"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/remark/*/set-dscp"
func (n *Qos_Classifier_Term_Actions_RemarkPathAny) SetDscp() *Qos_Classifier_Term_Actions_Remark_SetDscpPathAny {
	ps := &Qos_Classifier_Term_Actions_Remark_SetDscpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMplsTc (leaf): Sets the 3-bit traffic class value (also referred to as EXP
// or CoS) in MPLS packets.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-mpls-tc"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/remark/*/set-mpls-tc"
func (n *Qos_Classifier_Term_Actions_RemarkPath) SetMplsTc() *Qos_Classifier_Term_Actions_Remark_SetMplsTcPath {
	ps := &Qos_Classifier_Term_Actions_Remark_SetMplsTcPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-mpls-tc"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMplsTc (leaf): Sets the 3-bit traffic class value (also referred to as EXP
// or CoS) in MPLS packets.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-mpls-tc"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/remark/*/set-mpls-tc"
func (n *Qos_Classifier_Term_Actions_RemarkPathAny) SetMplsTc() *Qos_Classifier_Term_Actions_Remark_SetMplsTcPathAny {
	ps := &Qos_Classifier_Term_Actions_Remark_SetMplsTcPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-mpls-tc"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Actions_RemarkPath) State() ygnmi.SingletonQuery[*oc.Qos_Classifier_Term_Actions_Remark] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Classifier_Term_Actions_Remark](
		"Qos_Classifier_Term_Actions_Remark",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Actions_RemarkPathAny) State() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term_Actions_Remark] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term_Actions_Remark](
		"Qos_Classifier_Term_Actions_Remark",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Actions_RemarkPath) Config() ygnmi.ConfigQuery[*oc.Qos_Classifier_Term_Actions_Remark] {
	return ygnmi.NewConfigQuery[*oc.Qos_Classifier_Term_Actions_Remark](
		"Qos_Classifier_Term_Actions_Remark",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Actions_RemarkPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term_Actions_Remark] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term_Actions_Remark](
		"Qos_Classifier_Term_Actions_Remark",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_ConditionsPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions YANG schema element.
type Qos_Classifier_Term_ConditionsPath struct {
	*ygnmi.NodePath
}

// Qos_Classifier_Term_ConditionsPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions YANG schema element.
type Qos_Classifier_Term_ConditionsPathAny struct {
	*ygnmi.NodePath
}

// Ipv4 (container): Top level container for IPv4 match field data
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "ipv4"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4"
func (n *Qos_Classifier_Term_ConditionsPath) Ipv4() *Qos_Classifier_Term_Conditions_Ipv4Path {
	ps := &Qos_Classifier_Term_Conditions_Ipv4Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4 (container): Top level container for IPv4 match field data
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "ipv4"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4"
func (n *Qos_Classifier_Term_ConditionsPathAny) Ipv4() *Qos_Classifier_Term_Conditions_Ipv4PathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv4PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6 (container): Top-level container for IPv6 match field data
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "ipv6"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6"
func (n *Qos_Classifier_Term_ConditionsPath) Ipv6() *Qos_Classifier_Term_Conditions_Ipv6Path {
	ps := &Qos_Classifier_Term_Conditions_Ipv6Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6 (container): Top-level container for IPv6 match field data
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "ipv6"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6"
func (n *Qos_Classifier_Term_ConditionsPathAny) Ipv6() *Qos_Classifier_Term_Conditions_Ipv6PathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv6PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// L2 (container): Ethernet header fields
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "l2"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2"
func (n *Qos_Classifier_Term_ConditionsPath) L2() *Qos_Classifier_Term_Conditions_L2Path {
	ps := &Qos_Classifier_Term_Conditions_L2Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"l2"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// L2 (container): Ethernet header fields
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "l2"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2"
func (n *Qos_Classifier_Term_ConditionsPathAny) L2() *Qos_Classifier_Term_Conditions_L2PathAny {
	ps := &Qos_Classifier_Term_Conditions_L2PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"l2"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Mpls (container): MPLS header fields
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "mpls"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls"
func (n *Qos_Classifier_Term_ConditionsPath) Mpls() *Qos_Classifier_Term_Conditions_MplsPath {
	ps := &Qos_Classifier_Term_Conditions_MplsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"mpls"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Mpls (container): MPLS header fields
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "mpls"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls"
func (n *Qos_Classifier_Term_ConditionsPathAny) Mpls() *Qos_Classifier_Term_Conditions_MplsPathAny {
	ps := &Qos_Classifier_Term_Conditions_MplsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mpls"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Transport (container): Transport fields container
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "transport"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport"
func (n *Qos_Classifier_Term_ConditionsPath) Transport() *Qos_Classifier_Term_Conditions_TransportPath {
	ps := &Qos_Classifier_Term_Conditions_TransportPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"transport"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Transport (container): Transport fields container
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "transport"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport"
func (n *Qos_Classifier_Term_ConditionsPathAny) Transport() *Qos_Classifier_Term_Conditions_TransportPathAny {
	ps := &Qos_Classifier_Term_Conditions_TransportPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"transport"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_ConditionsPath) State() ygnmi.SingletonQuery[*oc.Qos_Classifier_Term_Conditions] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Classifier_Term_Conditions](
		"Qos_Classifier_Term_Conditions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_ConditionsPathAny) State() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term_Conditions] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term_Conditions](
		"Qos_Classifier_Term_Conditions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_ConditionsPath) Config() ygnmi.ConfigQuery[*oc.Qos_Classifier_Term_Conditions] {
	return ygnmi.NewConfigQuery[*oc.Qos_Classifier_Term_Conditions](
		"Qos_Classifier_Term_Conditions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_ConditionsPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term_Conditions] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term_Conditions](
		"Qos_Classifier_Term_Conditions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/destination-address YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/destination-address YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/destination-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/destination-address"
func (n *Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/destination-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/destination-address"
func (n *Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/destination-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/destination-address"
func (n *Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/destination-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/destination-address"
func (n *Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPrefixSetPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/destination-address-prefix-set YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPrefixSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPrefixSetPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/destination-address-prefix-set YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPrefixSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/destination-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/destination-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPrefixSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/destination-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/destination-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPrefixSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/destination-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/destination-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPrefixSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/destination-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/destination-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPrefixSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv4_DscpPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/dscp YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_DscpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv4_DscpPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/dscp YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_DscpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dscp"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/dscp"
func (n *Qos_Classifier_Term_Conditions_Ipv4_DscpPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_Classifier_Term_Conditions_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dscp"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/dscp"
func (n *Qos_Classifier_Term_Conditions_Ipv4_DscpPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_Classifier_Term_Conditions_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/dscp"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/dscp"
func (n *Qos_Classifier_Term_Conditions_Ipv4_DscpPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_Classifier_Term_Conditions_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/dscp"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/dscp"
func (n *Qos_Classifier_Term_Conditions_Ipv4_DscpPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_Classifier_Term_Conditions_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv4_DscpSetPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/dscp-set YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_DscpSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv4_DscpSetPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/dscp-set YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_DscpSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dscp-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/dscp-set"
func (n *Qos_Classifier_Term_Conditions_Ipv4_DscpSetPath) State() ygnmi.SingletonQuery[[]uint8] {
	return ygnmi.NewSingletonQuery[[]uint8](
		"Qos_Classifier_Term_Conditions_Ipv4",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dscp-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/dscp-set"
func (n *Qos_Classifier_Term_Conditions_Ipv4_DscpSetPathAny) State() ygnmi.WildcardQuery[[]uint8] {
	return ygnmi.NewWildcardQuery[[]uint8](
		"Qos_Classifier_Term_Conditions_Ipv4",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/dscp-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/dscp-set"
func (n *Qos_Classifier_Term_Conditions_Ipv4_DscpSetPath) Config() ygnmi.ConfigQuery[[]uint8] {
	return ygnmi.NewConfigQuery[[]uint8](
		"Qos_Classifier_Term_Conditions_Ipv4",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/dscp-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/dscp-set"
func (n *Qos_Classifier_Term_Conditions_Ipv4_DscpSetPathAny) Config() ygnmi.WildcardQuery[[]uint8] {
	return ygnmi.NewWildcardQuery[[]uint8](
		"Qos_Classifier_Term_Conditions_Ipv4",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv4_HopLimitPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/hop-limit YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_HopLimitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv4_HopLimitPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/hop-limit YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_HopLimitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/hop-limit"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/hop-limit"
func (n *Qos_Classifier_Term_Conditions_Ipv4_HopLimitPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_Classifier_Term_Conditions_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/hop-limit"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/hop-limit"
func (n *Qos_Classifier_Term_Conditions_Ipv4_HopLimitPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_Classifier_Term_Conditions_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/hop-limit"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/hop-limit"
func (n *Qos_Classifier_Term_Conditions_Ipv4_HopLimitPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_Classifier_Term_Conditions_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/hop-limit"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/hop-limit"
func (n *Qos_Classifier_Term_Conditions_Ipv4_HopLimitPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_Classifier_Term_Conditions_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv4_LengthPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/length YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_LengthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv4_LengthPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/length YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_LengthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/length"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/length"
func (n *Qos_Classifier_Term_Conditions_Ipv4_LengthPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Qos_Classifier_Term_Conditions_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/length"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/length"
func (n *Qos_Classifier_Term_Conditions_Ipv4_LengthPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Qos_Classifier_Term_Conditions_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/length"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/length"
func (n *Qos_Classifier_Term_Conditions_Ipv4_LengthPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Qos_Classifier_Term_Conditions_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/length"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/length"
func (n *Qos_Classifier_Term_Conditions_Ipv4_LengthPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Qos_Classifier_Term_Conditions_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv4_ProtocolPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/protocol YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_ProtocolPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv4_ProtocolPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/protocol YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_ProtocolPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/protocol"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/protocol"
func (n *Qos_Classifier_Term_Conditions_Ipv4_ProtocolPath) State() ygnmi.SingletonQuery[oc.Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union] {
	return ygnmi.NewSingletonQuery[oc.Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union](
		"Qos_Classifier_Term_Conditions_Ipv4",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/protocol"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/protocol"
func (n *Qos_Classifier_Term_Conditions_Ipv4_ProtocolPathAny) State() ygnmi.WildcardQuery[oc.Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union] {
	return ygnmi.NewWildcardQuery[oc.Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union](
		"Qos_Classifier_Term_Conditions_Ipv4",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/protocol"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/protocol"
func (n *Qos_Classifier_Term_Conditions_Ipv4_ProtocolPath) Config() ygnmi.ConfigQuery[oc.Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union] {
	return ygnmi.NewConfigQuery[oc.Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union](
		"Qos_Classifier_Term_Conditions_Ipv4",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/protocol"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/protocol"
func (n *Qos_Classifier_Term_Conditions_Ipv4_ProtocolPathAny) Config() ygnmi.WildcardQuery[oc.Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union] {
	return ygnmi.NewWildcardQuery[oc.Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union](
		"Qos_Classifier_Term_Conditions_Ipv4",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/source-address YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/source-address YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/source-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/source-address"
func (n *Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/source-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/source-address"
func (n *Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/source-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/source-address"
func (n *Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/source-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/source-address"
func (n *Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPrefixSetPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/source-address-prefix-set YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPrefixSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPrefixSetPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/source-address-prefix-set YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPrefixSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/source-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/source-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPrefixSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/source-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/source-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPrefixSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/source-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/source-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPrefixSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/source-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/source-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPrefixSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv4Path represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4 YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4Path struct {
	*ygnmi.NodePath
}

// Qos_Classifier_Term_Conditions_Ipv4PathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4 YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4PathAny struct {
	*ygnmi.NodePath
}

// DestinationAddress (leaf): Destination IPv4 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/destination-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/*/destination-address"
func (n *Qos_Classifier_Term_Conditions_Ipv4Path) DestinationAddress() *Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPath {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationAddress (leaf): Destination IPv4 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/destination-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/*/destination-address"
func (n *Qos_Classifier_Term_Conditions_Ipv4PathAny) DestinationAddress() *Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationAddressPrefixSet (leaf): Reference to a IPv4 address prefix set
// to match the destination address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/destination-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/*/destination-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv4Path) DestinationAddressPrefixSet() *Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPrefixSetPath {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPrefixSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationAddressPrefixSet (leaf): Reference to a IPv4 address prefix set
// to match the destination address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/destination-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/*/destination-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv4PathAny) DestinationAddressPrefixSet() *Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPrefixSetPathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dscp (leaf): Value of diffserv codepoint.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/dscp"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/*/dscp"
func (n *Qos_Classifier_Term_Conditions_Ipv4Path) Dscp() *Qos_Classifier_Term_Conditions_Ipv4_DscpPath {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_DscpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dscp (leaf): Value of diffserv codepoint.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/dscp"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/*/dscp"
func (n *Qos_Classifier_Term_Conditions_Ipv4PathAny) Dscp() *Qos_Classifier_Term_Conditions_Ipv4_DscpPathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_DscpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DscpSet (leaf-list): A list of DSCP values to be matched for incoming packets. AN OR match should
// be performed, such that a packet must match one of the values defined in this
// list. If the field is left empty then any DSCP value matches unless the 'dscp'
// leaf is specified. It is not valid to specify both 'dscp' and 'dscp-set together.'
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/dscp-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/*/dscp-set"
func (n *Qos_Classifier_Term_Conditions_Ipv4Path) DscpSet() *Qos_Classifier_Term_Conditions_Ipv4_DscpSetPath {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_DscpSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DscpSet (leaf-list): A list of DSCP values to be matched for incoming packets. AN OR match should
// be performed, such that a packet must match one of the values defined in this
// list. If the field is left empty then any DSCP value matches unless the 'dscp'
// leaf is specified. It is not valid to specify both 'dscp' and 'dscp-set together.'
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/dscp-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/*/dscp-set"
func (n *Qos_Classifier_Term_Conditions_Ipv4PathAny) DscpSet() *Qos_Classifier_Term_Conditions_Ipv4_DscpSetPathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_DscpSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HopLimit (leaf): The IP packet's hop limit -- known as TTL (in hops) in
// IPv4 packets, and hop limit in IPv6
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/hop-limit"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/*/hop-limit"
func (n *Qos_Classifier_Term_Conditions_Ipv4Path) HopLimit() *Qos_Classifier_Term_Conditions_Ipv4_HopLimitPath {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_HopLimitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hop-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HopLimit (leaf): The IP packet's hop limit -- known as TTL (in hops) in
// IPv4 packets, and hop limit in IPv6
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/hop-limit"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/*/hop-limit"
func (n *Qos_Classifier_Term_Conditions_Ipv4PathAny) HopLimit() *Qos_Classifier_Term_Conditions_Ipv4_HopLimitPathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_HopLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hop-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Icmpv4 (container): Top container for ICMPv4 filtering
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "icmpv4"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/icmpv4"
func (n *Qos_Classifier_Term_Conditions_Ipv4Path) Icmpv4() *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4Path {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_Icmpv4Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"icmpv4"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Icmpv4 (container): Top container for ICMPv4 filtering
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "icmpv4"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/icmpv4"
func (n *Qos_Classifier_Term_Conditions_Ipv4PathAny) Icmpv4() *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4PathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_Icmpv4PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"icmpv4"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Length (leaf): In the IPv4 header field, this field is known as the Total
// Length.  Total Length is the length of the datagram, measured
// in octets, including internet header and data.
// In the IPv6 header field, this field is known as the Payload
// Length, which is the length of the IPv6 payload, i.e., the rest
// of the packet following the IPv6 header, in octets.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/length"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/*/length"
func (n *Qos_Classifier_Term_Conditions_Ipv4Path) Length() *Qos_Classifier_Term_Conditions_Ipv4_LengthPath {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_LengthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Length (leaf): In the IPv4 header field, this field is known as the Total
// Length.  Total Length is the length of the datagram, measured
// in octets, including internet header and data.
// In the IPv6 header field, this field is known as the Payload
// Length, which is the length of the IPv6 payload, i.e., the rest
// of the packet following the IPv6 header, in octets.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/length"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/*/length"
func (n *Qos_Classifier_Term_Conditions_Ipv4PathAny) Length() *Qos_Classifier_Term_Conditions_Ipv4_LengthPathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_LengthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Protocol (leaf): The protocol carried in the IP packet, expressed either
// as its IP protocol number, or by a defined identity.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/protocol"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/*/protocol"
func (n *Qos_Classifier_Term_Conditions_Ipv4Path) Protocol() *Qos_Classifier_Term_Conditions_Ipv4_ProtocolPath {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_ProtocolPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "protocol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Protocol (leaf): The protocol carried in the IP packet, expressed either
// as its IP protocol number, or by a defined identity.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/protocol"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/*/protocol"
func (n *Qos_Classifier_Term_Conditions_Ipv4PathAny) Protocol() *Qos_Classifier_Term_Conditions_Ipv4_ProtocolPathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_ProtocolPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "protocol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): Source IPv4 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/source-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/*/source-address"
func (n *Qos_Classifier_Term_Conditions_Ipv4Path) SourceAddress() *Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPath {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): Source IPv4 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/source-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/*/source-address"
func (n *Qos_Classifier_Term_Conditions_Ipv4PathAny) SourceAddress() *Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddressPrefixSet (leaf): Reference to a IPv4 address prefix Set
// to match the source address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/source-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/*/source-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv4Path) SourceAddressPrefixSet() *Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPrefixSetPath {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPrefixSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddressPrefixSet (leaf): Reference to a IPv4 address prefix Set
// to match the source address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/source-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/*/source-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv4PathAny) SourceAddressPrefixSet() *Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPrefixSetPathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_Ipv4Path) State() ygnmi.SingletonQuery[*oc.Qos_Classifier_Term_Conditions_Ipv4] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Classifier_Term_Conditions_Ipv4](
		"Qos_Classifier_Term_Conditions_Ipv4",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_Ipv4PathAny) State() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term_Conditions_Ipv4] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term_Conditions_Ipv4](
		"Qos_Classifier_Term_Conditions_Ipv4",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_Ipv4Path) Config() ygnmi.ConfigQuery[*oc.Qos_Classifier_Term_Conditions_Ipv4] {
	return ygnmi.NewConfigQuery[*oc.Qos_Classifier_Term_Conditions_Ipv4](
		"Qos_Classifier_Term_Conditions_Ipv4",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_Ipv4PathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term_Conditions_Ipv4] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term_Conditions_Ipv4](
		"Qos_Classifier_Term_Conditions_Ipv4",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_CodePath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/icmpv4/state/code YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_CodePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_CodePathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/icmpv4/state/code YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_CodePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/code"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/icmpv4/state/code"
func (n *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_CodePath) State() ygnmi.SingletonQuery[oc.E_Icmpv4Types_CODE] {
	return ygnmi.NewSingletonQuery[oc.E_Icmpv4Types_CODE](
		"Qos_Classifier_Term_Conditions_Ipv4_Icmpv4",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_CODE, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/code"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/icmpv4/state/code"
func (n *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_CodePathAny) State() ygnmi.WildcardQuery[oc.E_Icmpv4Types_CODE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv4Types_CODE](
		"Qos_Classifier_Term_Conditions_Ipv4_Icmpv4",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_CODE, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/code"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/icmpv4/config/code"
func (n *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_CodePath) Config() ygnmi.ConfigQuery[oc.E_Icmpv4Types_CODE] {
	return ygnmi.NewConfigQuery[oc.E_Icmpv4Types_CODE](
		"Qos_Classifier_Term_Conditions_Ipv4_Icmpv4",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_CODE, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/code"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/icmpv4/config/code"
func (n *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_CodePathAny) Config() ygnmi.WildcardQuery[oc.E_Icmpv4Types_CODE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv4Types_CODE](
		"Qos_Classifier_Term_Conditions_Ipv4_Icmpv4",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_CODE, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_TypePath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/icmpv4/state/type YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_TypePathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/icmpv4/state/type YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/type"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/icmpv4/state/type"
func (n *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_TypePath) State() ygnmi.SingletonQuery[oc.E_Icmpv4Types_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_Icmpv4Types_TYPE](
		"Qos_Classifier_Term_Conditions_Ipv4_Icmpv4",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_TYPE, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/type"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/icmpv4/state/type"
func (n *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_TypePathAny) State() ygnmi.WildcardQuery[oc.E_Icmpv4Types_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv4Types_TYPE](
		"Qos_Classifier_Term_Conditions_Ipv4_Icmpv4",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_TYPE, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/type"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/icmpv4/config/type"
func (n *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_TypePath) Config() ygnmi.ConfigQuery[oc.E_Icmpv4Types_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_Icmpv4Types_TYPE](
		"Qos_Classifier_Term_Conditions_Ipv4_Icmpv4",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_TYPE, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/type"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/icmpv4/config/type"
func (n *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_Icmpv4Types_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv4Types_TYPE](
		"Qos_Classifier_Term_Conditions_Ipv4_Icmpv4",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_TYPE, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv4_Icmpv4Path represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/icmpv4 YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_Icmpv4Path struct {
	*ygnmi.NodePath
}

// Qos_Classifier_Term_Conditions_Ipv4_Icmpv4PathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/icmpv4 YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_Icmpv4PathAny struct {
	*ygnmi.NodePath
}

// Code (leaf): ICMPv4 code to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/code"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/icmpv4/*/code"
func (n *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4Path) Code() *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_CodePath {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_CodePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "code"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Code (leaf): ICMPv4 code to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/code"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/icmpv4/*/code"
func (n *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4PathAny) Code() *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_CodePathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_CodePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "code"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): ICMPv4 type to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/type"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/icmpv4/*/type"
func (n *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4Path) Type() *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_TypePath {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): ICMPv4 type to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/type"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/icmpv4/*/type"
func (n *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4PathAny) Type() *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_TypePathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4Path) State() ygnmi.SingletonQuery[*oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4](
		"Qos_Classifier_Term_Conditions_Ipv4_Icmpv4",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4PathAny) State() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4](
		"Qos_Classifier_Term_Conditions_Ipv4_Icmpv4",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4Path) Config() ygnmi.ConfigQuery[*oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4] {
	return ygnmi.NewConfigQuery[*oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4](
		"Qos_Classifier_Term_Conditions_Ipv4_Icmpv4",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4PathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4](
		"Qos_Classifier_Term_Conditions_Ipv4_Icmpv4",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-address YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-address YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/destination-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-address"
func (n *Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/destination-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-address"
func (n *Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/destination-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/destination-address"
func (n *Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/destination-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/destination-address"
func (n *Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPrefixSetPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-address-prefix-set YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPrefixSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPrefixSetPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-address-prefix-set YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPrefixSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/destination-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPrefixSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/destination-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPrefixSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/destination-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/destination-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPrefixSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/destination-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/destination-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPrefixSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv6_DestinationFlowLabelPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-flow-label YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_DestinationFlowLabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv6_DestinationFlowLabelPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-flow-label YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_DestinationFlowLabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/destination-flow-label"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-flow-label"
func (n *Qos_Classifier_Term_Conditions_Ipv6_DestinationFlowLabelPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-flow-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).DestinationFlowLabel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/destination-flow-label"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-flow-label"
func (n *Qos_Classifier_Term_Conditions_Ipv6_DestinationFlowLabelPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-flow-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).DestinationFlowLabel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/destination-flow-label"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/destination-flow-label"
func (n *Qos_Classifier_Term_Conditions_Ipv6_DestinationFlowLabelPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-flow-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).DestinationFlowLabel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/destination-flow-label"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/destination-flow-label"
func (n *Qos_Classifier_Term_Conditions_Ipv6_DestinationFlowLabelPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-flow-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).DestinationFlowLabel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv6_DscpPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/dscp YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_DscpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv6_DscpPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/dscp YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_DscpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dscp"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/dscp"
func (n *Qos_Classifier_Term_Conditions_Ipv6_DscpPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dscp"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/dscp"
func (n *Qos_Classifier_Term_Conditions_Ipv6_DscpPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/dscp"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/dscp"
func (n *Qos_Classifier_Term_Conditions_Ipv6_DscpPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/dscp"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/dscp"
func (n *Qos_Classifier_Term_Conditions_Ipv6_DscpPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv6_DscpSetPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/dscp-set YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_DscpSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv6_DscpSetPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/dscp-set YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_DscpSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dscp-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/dscp-set"
func (n *Qos_Classifier_Term_Conditions_Ipv6_DscpSetPath) State() ygnmi.SingletonQuery[[]uint8] {
	return ygnmi.NewSingletonQuery[[]uint8](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dscp-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/dscp-set"
func (n *Qos_Classifier_Term_Conditions_Ipv6_DscpSetPathAny) State() ygnmi.WildcardQuery[[]uint8] {
	return ygnmi.NewWildcardQuery[[]uint8](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/dscp-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/dscp-set"
func (n *Qos_Classifier_Term_Conditions_Ipv6_DscpSetPath) Config() ygnmi.ConfigQuery[[]uint8] {
	return ygnmi.NewConfigQuery[[]uint8](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/dscp-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/dscp-set"
func (n *Qos_Classifier_Term_Conditions_Ipv6_DscpSetPathAny) Config() ygnmi.WildcardQuery[[]uint8] {
	return ygnmi.NewWildcardQuery[[]uint8](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv6_HopLimitPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/hop-limit YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_HopLimitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv6_HopLimitPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/hop-limit YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_HopLimitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/hop-limit"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/hop-limit"
func (n *Qos_Classifier_Term_Conditions_Ipv6_HopLimitPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/hop-limit"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/hop-limit"
func (n *Qos_Classifier_Term_Conditions_Ipv6_HopLimitPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/hop-limit"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/hop-limit"
func (n *Qos_Classifier_Term_Conditions_Ipv6_HopLimitPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/hop-limit"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/hop-limit"
func (n *Qos_Classifier_Term_Conditions_Ipv6_HopLimitPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv6_LengthPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/length YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_LengthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv6_LengthPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/length YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_LengthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/length"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/length"
func (n *Qos_Classifier_Term_Conditions_Ipv6_LengthPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/length"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/length"
func (n *Qos_Classifier_Term_Conditions_Ipv6_LengthPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/length"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/length"
func (n *Qos_Classifier_Term_Conditions_Ipv6_LengthPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/length"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/length"
func (n *Qos_Classifier_Term_Conditions_Ipv6_LengthPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv6_ProtocolPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/protocol YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_ProtocolPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv6_ProtocolPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/protocol YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_ProtocolPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/protocol"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/protocol"
func (n *Qos_Classifier_Term_Conditions_Ipv6_ProtocolPath) State() ygnmi.SingletonQuery[oc.Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union] {
	return ygnmi.NewSingletonQuery[oc.Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/protocol"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/protocol"
func (n *Qos_Classifier_Term_Conditions_Ipv6_ProtocolPathAny) State() ygnmi.WildcardQuery[oc.Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union] {
	return ygnmi.NewWildcardQuery[oc.Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/protocol"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/protocol"
func (n *Qos_Classifier_Term_Conditions_Ipv6_ProtocolPath) Config() ygnmi.ConfigQuery[oc.Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union] {
	return ygnmi.NewConfigQuery[oc.Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/protocol"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/protocol"
func (n *Qos_Classifier_Term_Conditions_Ipv6_ProtocolPathAny) Config() ygnmi.WildcardQuery[oc.Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union] {
	return ygnmi.NewWildcardQuery[oc.Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-address YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-address YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/source-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-address"
func (n *Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/source-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-address"
func (n *Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/source-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/source-address"
func (n *Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/source-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/source-address"
func (n *Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPrefixSetPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-address-prefix-set YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPrefixSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPrefixSetPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-address-prefix-set YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPrefixSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/source-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPrefixSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/source-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPrefixSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/source-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/source-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPrefixSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/source-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/source-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPrefixSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv6_SourceFlowLabelPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-flow-label YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_SourceFlowLabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv6_SourceFlowLabelPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-flow-label YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_SourceFlowLabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/source-flow-label"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-flow-label"
func (n *Qos_Classifier_Term_Conditions_Ipv6_SourceFlowLabelPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-flow-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).SourceFlowLabel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/source-flow-label"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-flow-label"
func (n *Qos_Classifier_Term_Conditions_Ipv6_SourceFlowLabelPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-flow-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).SourceFlowLabel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/source-flow-label"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/source-flow-label"
func (n *Qos_Classifier_Term_Conditions_Ipv6_SourceFlowLabelPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-flow-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).SourceFlowLabel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/source-flow-label"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/source-flow-label"
func (n *Qos_Classifier_Term_Conditions_Ipv6_SourceFlowLabelPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-flow-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).SourceFlowLabel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv6Path represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6 YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6Path struct {
	*ygnmi.NodePath
}

// Qos_Classifier_Term_Conditions_Ipv6PathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6 YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6PathAny struct {
	*ygnmi.NodePath
}

// DestinationAddress (leaf): Destination IPv6 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/destination-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/destination-address"
func (n *Qos_Classifier_Term_Conditions_Ipv6Path) DestinationAddress() *Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPath {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationAddress (leaf): Destination IPv6 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/destination-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/destination-address"
func (n *Qos_Classifier_Term_Conditions_Ipv6PathAny) DestinationAddress() *Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationAddressPrefixSet (leaf): Reference to a IPv6 address prefix set
// to match the destination address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/destination-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/destination-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv6Path) DestinationAddressPrefixSet() *Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPrefixSetPath {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPrefixSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationAddressPrefixSet (leaf): Reference to a IPv6 address prefix set
// to match the destination address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/destination-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/destination-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv6PathAny) DestinationAddressPrefixSet() *Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPrefixSetPathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationFlowLabel (leaf): Destination IPv6 Flow label.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/destination-flow-label"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/destination-flow-label"
func (n *Qos_Classifier_Term_Conditions_Ipv6Path) DestinationFlowLabel() *Qos_Classifier_Term_Conditions_Ipv6_DestinationFlowLabelPath {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_DestinationFlowLabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-flow-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationFlowLabel (leaf): Destination IPv6 Flow label.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/destination-flow-label"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/destination-flow-label"
func (n *Qos_Classifier_Term_Conditions_Ipv6PathAny) DestinationFlowLabel() *Qos_Classifier_Term_Conditions_Ipv6_DestinationFlowLabelPathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_DestinationFlowLabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-flow-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dscp (leaf): Value of diffserv codepoint.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/dscp"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/dscp"
func (n *Qos_Classifier_Term_Conditions_Ipv6Path) Dscp() *Qos_Classifier_Term_Conditions_Ipv6_DscpPath {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_DscpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dscp (leaf): Value of diffserv codepoint.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/dscp"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/dscp"
func (n *Qos_Classifier_Term_Conditions_Ipv6PathAny) Dscp() *Qos_Classifier_Term_Conditions_Ipv6_DscpPathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_DscpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DscpSet (leaf-list): A list of DSCP values to be matched for incoming packets. AN OR match should
// be performed, such that a packet must match one of the values defined in this
// list. If the field is left empty then any DSCP value matches unless the 'dscp'
// leaf is specified. It is not valid to specify both 'dscp' and 'dscp-set together.'
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/dscp-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/dscp-set"
func (n *Qos_Classifier_Term_Conditions_Ipv6Path) DscpSet() *Qos_Classifier_Term_Conditions_Ipv6_DscpSetPath {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_DscpSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DscpSet (leaf-list): A list of DSCP values to be matched for incoming packets. AN OR match should
// be performed, such that a packet must match one of the values defined in this
// list. If the field is left empty then any DSCP value matches unless the 'dscp'
// leaf is specified. It is not valid to specify both 'dscp' and 'dscp-set together.'
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/dscp-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/dscp-set"
func (n *Qos_Classifier_Term_Conditions_Ipv6PathAny) DscpSet() *Qos_Classifier_Term_Conditions_Ipv6_DscpSetPathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_DscpSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HopLimit (leaf): The IP packet's hop limit -- known as TTL (in hops) in
// IPv4 packets, and hop limit in IPv6
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/hop-limit"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/hop-limit"
func (n *Qos_Classifier_Term_Conditions_Ipv6Path) HopLimit() *Qos_Classifier_Term_Conditions_Ipv6_HopLimitPath {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_HopLimitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hop-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HopLimit (leaf): The IP packet's hop limit -- known as TTL (in hops) in
// IPv4 packets, and hop limit in IPv6
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/hop-limit"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/hop-limit"
func (n *Qos_Classifier_Term_Conditions_Ipv6PathAny) HopLimit() *Qos_Classifier_Term_Conditions_Ipv6_HopLimitPathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_HopLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hop-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Icmpv6 (container): Top container for ICMPv6 filtering
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "icmpv6"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/icmpv6"
func (n *Qos_Classifier_Term_Conditions_Ipv6Path) Icmpv6() *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6Path {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_Icmpv6Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"icmpv6"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Icmpv6 (container): Top container for ICMPv6 filtering
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "icmpv6"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/icmpv6"
func (n *Qos_Classifier_Term_Conditions_Ipv6PathAny) Icmpv6() *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6PathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_Icmpv6PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"icmpv6"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Length (leaf): In the IPv4 header field, this field is known as the Total
// Length.  Total Length is the length of the datagram, measured
// in octets, including internet header and data.
// In the IPv6 header field, this field is known as the Payload
// Length, which is the length of the IPv6 payload, i.e., the rest
// of the packet following the IPv6 header, in octets.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/length"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/length"
func (n *Qos_Classifier_Term_Conditions_Ipv6Path) Length() *Qos_Classifier_Term_Conditions_Ipv6_LengthPath {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_LengthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Length (leaf): In the IPv4 header field, this field is known as the Total
// Length.  Total Length is the length of the datagram, measured
// in octets, including internet header and data.
// In the IPv6 header field, this field is known as the Payload
// Length, which is the length of the IPv6 payload, i.e., the rest
// of the packet following the IPv6 header, in octets.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/length"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/length"
func (n *Qos_Classifier_Term_Conditions_Ipv6PathAny) Length() *Qos_Classifier_Term_Conditions_Ipv6_LengthPathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_LengthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Protocol (leaf): The protocol carried in the IP packet, expressed either
// as its IP protocol number, or by a defined identity.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/protocol"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/protocol"
func (n *Qos_Classifier_Term_Conditions_Ipv6Path) Protocol() *Qos_Classifier_Term_Conditions_Ipv6_ProtocolPath {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_ProtocolPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "protocol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Protocol (leaf): The protocol carried in the IP packet, expressed either
// as its IP protocol number, or by a defined identity.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/protocol"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/protocol"
func (n *Qos_Classifier_Term_Conditions_Ipv6PathAny) Protocol() *Qos_Classifier_Term_Conditions_Ipv6_ProtocolPathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_ProtocolPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "protocol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): Source IPv6 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/source-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/source-address"
func (n *Qos_Classifier_Term_Conditions_Ipv6Path) SourceAddress() *Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPath {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): Source IPv6 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/source-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/source-address"
func (n *Qos_Classifier_Term_Conditions_Ipv6PathAny) SourceAddress() *Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddressPrefixSet (leaf): Reference to a IPv6 address prefix set
// to match the source address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/source-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/source-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv6Path) SourceAddressPrefixSet() *Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPrefixSetPath {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPrefixSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddressPrefixSet (leaf): Reference to a IPv6 address prefix set
// to match the source address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/source-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/source-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv6PathAny) SourceAddressPrefixSet() *Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPrefixSetPathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceFlowLabel (leaf): Source IPv6 Flow label.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/source-flow-label"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/source-flow-label"
func (n *Qos_Classifier_Term_Conditions_Ipv6Path) SourceFlowLabel() *Qos_Classifier_Term_Conditions_Ipv6_SourceFlowLabelPath {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_SourceFlowLabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-flow-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceFlowLabel (leaf): Source IPv6 Flow label.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/source-flow-label"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/source-flow-label"
func (n *Qos_Classifier_Term_Conditions_Ipv6PathAny) SourceFlowLabel() *Qos_Classifier_Term_Conditions_Ipv6_SourceFlowLabelPathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_SourceFlowLabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-flow-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_Ipv6Path) State() ygnmi.SingletonQuery[*oc.Qos_Classifier_Term_Conditions_Ipv6] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Classifier_Term_Conditions_Ipv6](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_Ipv6PathAny) State() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term_Conditions_Ipv6] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term_Conditions_Ipv6](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_Ipv6Path) Config() ygnmi.ConfigQuery[*oc.Qos_Classifier_Term_Conditions_Ipv6] {
	return ygnmi.NewConfigQuery[*oc.Qos_Classifier_Term_Conditions_Ipv6](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_Ipv6PathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term_Conditions_Ipv6] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term_Conditions_Ipv6](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_CodePath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/icmpv6/state/code YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_CodePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_CodePathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/icmpv6/state/code YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_CodePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/code"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/icmpv6/state/code"
func (n *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_CodePath) State() ygnmi.SingletonQuery[oc.E_Icmpv6Types_CODE] {
	return ygnmi.NewSingletonQuery[oc.E_Icmpv6Types_CODE](
		"Qos_Classifier_Term_Conditions_Ipv6_Icmpv6",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_CODE, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/code"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/icmpv6/state/code"
func (n *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_CodePathAny) State() ygnmi.WildcardQuery[oc.E_Icmpv6Types_CODE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv6Types_CODE](
		"Qos_Classifier_Term_Conditions_Ipv6_Icmpv6",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_CODE, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/code"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/icmpv6/config/code"
func (n *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_CodePath) Config() ygnmi.ConfigQuery[oc.E_Icmpv6Types_CODE] {
	return ygnmi.NewConfigQuery[oc.E_Icmpv6Types_CODE](
		"Qos_Classifier_Term_Conditions_Ipv6_Icmpv6",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_CODE, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/code"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/icmpv6/config/code"
func (n *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_CodePathAny) Config() ygnmi.WildcardQuery[oc.E_Icmpv6Types_CODE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv6Types_CODE](
		"Qos_Classifier_Term_Conditions_Ipv6_Icmpv6",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_CODE, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_TypePath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/icmpv6/state/type YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_TypePathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/icmpv6/state/type YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/type"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/icmpv6/state/type"
func (n *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_TypePath) State() ygnmi.SingletonQuery[oc.E_Icmpv6Types_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_Icmpv6Types_TYPE](
		"Qos_Classifier_Term_Conditions_Ipv6_Icmpv6",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_TYPE, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/type"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/icmpv6/state/type"
func (n *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_TypePathAny) State() ygnmi.WildcardQuery[oc.E_Icmpv6Types_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv6Types_TYPE](
		"Qos_Classifier_Term_Conditions_Ipv6_Icmpv6",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_TYPE, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/type"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/icmpv6/config/type"
func (n *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_TypePath) Config() ygnmi.ConfigQuery[oc.E_Icmpv6Types_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_Icmpv6Types_TYPE](
		"Qos_Classifier_Term_Conditions_Ipv6_Icmpv6",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_TYPE, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/type"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/icmpv6/config/type"
func (n *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_Icmpv6Types_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv6Types_TYPE](
		"Qos_Classifier_Term_Conditions_Ipv6_Icmpv6",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_TYPE, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv6_Icmpv6Path represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/icmpv6 YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_Icmpv6Path struct {
	*ygnmi.NodePath
}

// Qos_Classifier_Term_Conditions_Ipv6_Icmpv6PathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/icmpv6 YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_Icmpv6PathAny struct {
	*ygnmi.NodePath
}

// Code (leaf): ICMP code to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/code"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/icmpv6/*/code"
func (n *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6Path) Code() *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_CodePath {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_CodePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "code"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Code (leaf): ICMP code to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/code"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/icmpv6/*/code"
func (n *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6PathAny) Code() *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_CodePathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_CodePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "code"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): ICMPv6 type to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/type"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/icmpv6/*/type"
func (n *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6Path) Type() *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_TypePath {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): ICMPv6 type to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/type"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/icmpv6/*/type"
func (n *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6PathAny) Type() *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_TypePathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6Path) State() ygnmi.SingletonQuery[*oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6](
		"Qos_Classifier_Term_Conditions_Ipv6_Icmpv6",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6PathAny) State() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6](
		"Qos_Classifier_Term_Conditions_Ipv6_Icmpv6",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6Path) Config() ygnmi.ConfigQuery[*oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6] {
	return ygnmi.NewConfigQuery[*oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6](
		"Qos_Classifier_Term_Conditions_Ipv6_Icmpv6",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6PathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6](
		"Qos_Classifier_Term_Conditions_Ipv6_Icmpv6",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_L2_DestinationMacPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/l2/state/destination-mac YANG schema element.
type Qos_Classifier_Term_Conditions_L2_DestinationMacPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_L2_DestinationMacPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/l2/state/destination-mac YANG schema element.
type Qos_Classifier_Term_Conditions_L2_DestinationMacPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/destination-mac"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/state/destination-mac"
func (n *Qos_Classifier_Term_Conditions_L2_DestinationMacPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Classifier_Term_Conditions_L2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_L2).DestinationMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/destination-mac"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/state/destination-mac"
func (n *Qos_Classifier_Term_Conditions_L2_DestinationMacPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_L2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_L2).DestinationMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/destination-mac"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/config/destination-mac"
func (n *Qos_Classifier_Term_Conditions_L2_DestinationMacPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Classifier_Term_Conditions_L2",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_L2).DestinationMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/destination-mac"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/config/destination-mac"
func (n *Qos_Classifier_Term_Conditions_L2_DestinationMacPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_L2",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_L2).DestinationMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_L2_DestinationMacMaskPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/l2/state/destination-mac-mask YANG schema element.
type Qos_Classifier_Term_Conditions_L2_DestinationMacMaskPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_L2_DestinationMacMaskPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/l2/state/destination-mac-mask YANG schema element.
type Qos_Classifier_Term_Conditions_L2_DestinationMacMaskPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/destination-mac-mask"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/state/destination-mac-mask"
func (n *Qos_Classifier_Term_Conditions_L2_DestinationMacMaskPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Classifier_Term_Conditions_L2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_L2).DestinationMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/destination-mac-mask"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/state/destination-mac-mask"
func (n *Qos_Classifier_Term_Conditions_L2_DestinationMacMaskPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_L2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_L2).DestinationMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/destination-mac-mask"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/config/destination-mac-mask"
func (n *Qos_Classifier_Term_Conditions_L2_DestinationMacMaskPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Classifier_Term_Conditions_L2",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_L2).DestinationMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/destination-mac-mask"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/config/destination-mac-mask"
func (n *Qos_Classifier_Term_Conditions_L2_DestinationMacMaskPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_L2",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_L2).DestinationMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_L2_EthertypePath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/l2/state/ethertype YANG schema element.
type Qos_Classifier_Term_Conditions_L2_EthertypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_L2_EthertypePathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/l2/state/ethertype YANG schema element.
type Qos_Classifier_Term_Conditions_L2_EthertypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ethertype"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/state/ethertype"
func (n *Qos_Classifier_Term_Conditions_L2_EthertypePath) State() ygnmi.SingletonQuery[oc.Qos_Classifier_Term_Conditions_L2_Ethertype_Union] {
	return ygnmi.NewSingletonQuery[oc.Qos_Classifier_Term_Conditions_L2_Ethertype_Union](
		"Qos_Classifier_Term_Conditions_L2",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ethertype"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_L2_Ethertype_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_L2).Ethertype
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ethertype"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/state/ethertype"
func (n *Qos_Classifier_Term_Conditions_L2_EthertypePathAny) State() ygnmi.WildcardQuery[oc.Qos_Classifier_Term_Conditions_L2_Ethertype_Union] {
	return ygnmi.NewWildcardQuery[oc.Qos_Classifier_Term_Conditions_L2_Ethertype_Union](
		"Qos_Classifier_Term_Conditions_L2",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ethertype"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_L2_Ethertype_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_L2).Ethertype
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/ethertype"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/config/ethertype"
func (n *Qos_Classifier_Term_Conditions_L2_EthertypePath) Config() ygnmi.ConfigQuery[oc.Qos_Classifier_Term_Conditions_L2_Ethertype_Union] {
	return ygnmi.NewConfigQuery[oc.Qos_Classifier_Term_Conditions_L2_Ethertype_Union](
		"Qos_Classifier_Term_Conditions_L2",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ethertype"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_L2_Ethertype_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_L2).Ethertype
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/ethertype"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/config/ethertype"
func (n *Qos_Classifier_Term_Conditions_L2_EthertypePathAny) Config() ygnmi.WildcardQuery[oc.Qos_Classifier_Term_Conditions_L2_Ethertype_Union] {
	return ygnmi.NewWildcardQuery[oc.Qos_Classifier_Term_Conditions_L2_Ethertype_Union](
		"Qos_Classifier_Term_Conditions_L2",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ethertype"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_L2_Ethertype_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_L2).Ethertype
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_L2_SourceMacPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/l2/state/source-mac YANG schema element.
type Qos_Classifier_Term_Conditions_L2_SourceMacPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_L2_SourceMacPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/l2/state/source-mac YANG schema element.
type Qos_Classifier_Term_Conditions_L2_SourceMacPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/source-mac"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/state/source-mac"
func (n *Qos_Classifier_Term_Conditions_L2_SourceMacPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Classifier_Term_Conditions_L2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_L2).SourceMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/source-mac"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/state/source-mac"
func (n *Qos_Classifier_Term_Conditions_L2_SourceMacPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_L2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_L2).SourceMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/source-mac"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/config/source-mac"
func (n *Qos_Classifier_Term_Conditions_L2_SourceMacPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Classifier_Term_Conditions_L2",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_L2).SourceMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/source-mac"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/config/source-mac"
func (n *Qos_Classifier_Term_Conditions_L2_SourceMacPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_L2",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_L2).SourceMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_L2_SourceMacMaskPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/l2/state/source-mac-mask YANG schema element.
type Qos_Classifier_Term_Conditions_L2_SourceMacMaskPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_L2_SourceMacMaskPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/l2/state/source-mac-mask YANG schema element.
type Qos_Classifier_Term_Conditions_L2_SourceMacMaskPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/source-mac-mask"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/state/source-mac-mask"
func (n *Qos_Classifier_Term_Conditions_L2_SourceMacMaskPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Classifier_Term_Conditions_L2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_L2).SourceMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/source-mac-mask"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/state/source-mac-mask"
func (n *Qos_Classifier_Term_Conditions_L2_SourceMacMaskPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_L2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_L2).SourceMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/source-mac-mask"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/config/source-mac-mask"
func (n *Qos_Classifier_Term_Conditions_L2_SourceMacMaskPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Classifier_Term_Conditions_L2",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_L2).SourceMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/source-mac-mask"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/config/source-mac-mask"
func (n *Qos_Classifier_Term_Conditions_L2_SourceMacMaskPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_L2",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_L2).SourceMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_L2Path represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/l2 YANG schema element.
type Qos_Classifier_Term_Conditions_L2Path struct {
	*ygnmi.NodePath
}

// Qos_Classifier_Term_Conditions_L2PathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/l2 YANG schema element.
type Qos_Classifier_Term_Conditions_L2PathAny struct {
	*ygnmi.NodePath
}

// DestinationMac (leaf): Destination IEEE 802 MAC address.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/destination-mac"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/*/destination-mac"
func (n *Qos_Classifier_Term_Conditions_L2Path) DestinationMac() *Qos_Classifier_Term_Conditions_L2_DestinationMacPath {
	ps := &Qos_Classifier_Term_Conditions_L2_DestinationMacPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationMac (leaf): Destination IEEE 802 MAC address.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/destination-mac"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/*/destination-mac"
func (n *Qos_Classifier_Term_Conditions_L2PathAny) DestinationMac() *Qos_Classifier_Term_Conditions_L2_DestinationMacPathAny {
	ps := &Qos_Classifier_Term_Conditions_L2_DestinationMacPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationMacMask (leaf): Destination IEEE 802 MAC address mask.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/destination-mac-mask"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/*/destination-mac-mask"
func (n *Qos_Classifier_Term_Conditions_L2Path) DestinationMacMask() *Qos_Classifier_Term_Conditions_L2_DestinationMacMaskPath {
	ps := &Qos_Classifier_Term_Conditions_L2_DestinationMacMaskPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-mac-mask"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationMacMask (leaf): Destination IEEE 802 MAC address mask.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/destination-mac-mask"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/*/destination-mac-mask"
func (n *Qos_Classifier_Term_Conditions_L2PathAny) DestinationMacMask() *Qos_Classifier_Term_Conditions_L2_DestinationMacMaskPathAny {
	ps := &Qos_Classifier_Term_Conditions_L2_DestinationMacMaskPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-mac-mask"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ethertype (leaf): Ethertype field to match in Ethernet packets
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/ethertype"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/*/ethertype"
func (n *Qos_Classifier_Term_Conditions_L2Path) Ethertype() *Qos_Classifier_Term_Conditions_L2_EthertypePath {
	ps := &Qos_Classifier_Term_Conditions_L2_EthertypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ethertype"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ethertype (leaf): Ethertype field to match in Ethernet packets
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/ethertype"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/*/ethertype"
func (n *Qos_Classifier_Term_Conditions_L2PathAny) Ethertype() *Qos_Classifier_Term_Conditions_L2_EthertypePathAny {
	ps := &Qos_Classifier_Term_Conditions_L2_EthertypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ethertype"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceMac (leaf): Source IEEE 802 MAC address.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/source-mac"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/*/source-mac"
func (n *Qos_Classifier_Term_Conditions_L2Path) SourceMac() *Qos_Classifier_Term_Conditions_L2_SourceMacPath {
	ps := &Qos_Classifier_Term_Conditions_L2_SourceMacPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceMac (leaf): Source IEEE 802 MAC address.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/source-mac"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/*/source-mac"
func (n *Qos_Classifier_Term_Conditions_L2PathAny) SourceMac() *Qos_Classifier_Term_Conditions_L2_SourceMacPathAny {
	ps := &Qos_Classifier_Term_Conditions_L2_SourceMacPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceMacMask (leaf): Source IEEE 802 MAC address mask.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/source-mac-mask"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/*/source-mac-mask"
func (n *Qos_Classifier_Term_Conditions_L2Path) SourceMacMask() *Qos_Classifier_Term_Conditions_L2_SourceMacMaskPath {
	ps := &Qos_Classifier_Term_Conditions_L2_SourceMacMaskPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-mac-mask"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceMacMask (leaf): Source IEEE 802 MAC address mask.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/source-mac-mask"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/*/source-mac-mask"
func (n *Qos_Classifier_Term_Conditions_L2PathAny) SourceMacMask() *Qos_Classifier_Term_Conditions_L2_SourceMacMaskPathAny {
	ps := &Qos_Classifier_Term_Conditions_L2_SourceMacMaskPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-mac-mask"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_L2Path) State() ygnmi.SingletonQuery[*oc.Qos_Classifier_Term_Conditions_L2] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Classifier_Term_Conditions_L2](
		"Qos_Classifier_Term_Conditions_L2",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_L2PathAny) State() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term_Conditions_L2] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term_Conditions_L2](
		"Qos_Classifier_Term_Conditions_L2",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_L2Path) Config() ygnmi.ConfigQuery[*oc.Qos_Classifier_Term_Conditions_L2] {
	return ygnmi.NewConfigQuery[*oc.Qos_Classifier_Term_Conditions_L2](
		"Qos_Classifier_Term_Conditions_L2",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_L2PathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term_Conditions_L2] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term_Conditions_L2](
		"Qos_Classifier_Term_Conditions_L2",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Mpls_EndLabelValuePath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/mpls/state/end-label-value YANG schema element.
type Qos_Classifier_Term_Conditions_Mpls_EndLabelValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Mpls_EndLabelValuePathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/mpls/state/end-label-value YANG schema element.
type Qos_Classifier_Term_Conditions_Mpls_EndLabelValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/end-label-value"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/state/end-label-value"
func (n *Qos_Classifier_Term_Conditions_Mpls_EndLabelValuePath) State() ygnmi.SingletonQuery[oc.Qos_Classifier_Term_Conditions_Mpls_EndLabelValue_Union] {
	return ygnmi.NewSingletonQuery[oc.Qos_Classifier_Term_Conditions_Mpls_EndLabelValue_Union](
		"Qos_Classifier_Term_Conditions_Mpls",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "end-label-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Mpls_EndLabelValue_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Mpls).EndLabelValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/end-label-value"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/state/end-label-value"
func (n *Qos_Classifier_Term_Conditions_Mpls_EndLabelValuePathAny) State() ygnmi.WildcardQuery[oc.Qos_Classifier_Term_Conditions_Mpls_EndLabelValue_Union] {
	return ygnmi.NewWildcardQuery[oc.Qos_Classifier_Term_Conditions_Mpls_EndLabelValue_Union](
		"Qos_Classifier_Term_Conditions_Mpls",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "end-label-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Mpls_EndLabelValue_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Mpls).EndLabelValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/end-label-value"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/config/end-label-value"
func (n *Qos_Classifier_Term_Conditions_Mpls_EndLabelValuePath) Config() ygnmi.ConfigQuery[oc.Qos_Classifier_Term_Conditions_Mpls_EndLabelValue_Union] {
	return ygnmi.NewConfigQuery[oc.Qos_Classifier_Term_Conditions_Mpls_EndLabelValue_Union](
		"Qos_Classifier_Term_Conditions_Mpls",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "end-label-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Mpls_EndLabelValue_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Mpls).EndLabelValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/end-label-value"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/config/end-label-value"
func (n *Qos_Classifier_Term_Conditions_Mpls_EndLabelValuePathAny) Config() ygnmi.WildcardQuery[oc.Qos_Classifier_Term_Conditions_Mpls_EndLabelValue_Union] {
	return ygnmi.NewWildcardQuery[oc.Qos_Classifier_Term_Conditions_Mpls_EndLabelValue_Union](
		"Qos_Classifier_Term_Conditions_Mpls",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "end-label-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Mpls_EndLabelValue_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Mpls).EndLabelValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Mpls_StartLabelValuePath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/mpls/state/start-label-value YANG schema element.
type Qos_Classifier_Term_Conditions_Mpls_StartLabelValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Mpls_StartLabelValuePathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/mpls/state/start-label-value YANG schema element.
type Qos_Classifier_Term_Conditions_Mpls_StartLabelValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/start-label-value"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/state/start-label-value"
func (n *Qos_Classifier_Term_Conditions_Mpls_StartLabelValuePath) State() ygnmi.SingletonQuery[oc.Qos_Classifier_Term_Conditions_Mpls_StartLabelValue_Union] {
	return ygnmi.NewSingletonQuery[oc.Qos_Classifier_Term_Conditions_Mpls_StartLabelValue_Union](
		"Qos_Classifier_Term_Conditions_Mpls",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "start-label-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Mpls_StartLabelValue_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Mpls).StartLabelValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/start-label-value"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/state/start-label-value"
func (n *Qos_Classifier_Term_Conditions_Mpls_StartLabelValuePathAny) State() ygnmi.WildcardQuery[oc.Qos_Classifier_Term_Conditions_Mpls_StartLabelValue_Union] {
	return ygnmi.NewWildcardQuery[oc.Qos_Classifier_Term_Conditions_Mpls_StartLabelValue_Union](
		"Qos_Classifier_Term_Conditions_Mpls",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "start-label-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Mpls_StartLabelValue_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Mpls).StartLabelValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/start-label-value"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/config/start-label-value"
func (n *Qos_Classifier_Term_Conditions_Mpls_StartLabelValuePath) Config() ygnmi.ConfigQuery[oc.Qos_Classifier_Term_Conditions_Mpls_StartLabelValue_Union] {
	return ygnmi.NewConfigQuery[oc.Qos_Classifier_Term_Conditions_Mpls_StartLabelValue_Union](
		"Qos_Classifier_Term_Conditions_Mpls",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "start-label-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Mpls_StartLabelValue_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Mpls).StartLabelValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/start-label-value"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/config/start-label-value"
func (n *Qos_Classifier_Term_Conditions_Mpls_StartLabelValuePathAny) Config() ygnmi.WildcardQuery[oc.Qos_Classifier_Term_Conditions_Mpls_StartLabelValue_Union] {
	return ygnmi.NewWildcardQuery[oc.Qos_Classifier_Term_Conditions_Mpls_StartLabelValue_Union](
		"Qos_Classifier_Term_Conditions_Mpls",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "start-label-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Mpls_StartLabelValue_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Mpls).StartLabelValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Mpls_TrafficClassPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/mpls/state/traffic-class YANG schema element.
type Qos_Classifier_Term_Conditions_Mpls_TrafficClassPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Mpls_TrafficClassPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/mpls/state/traffic-class YANG schema element.
type Qos_Classifier_Term_Conditions_Mpls_TrafficClassPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/traffic-class"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/state/traffic-class"
func (n *Qos_Classifier_Term_Conditions_Mpls_TrafficClassPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_Classifier_Term_Conditions_Mpls",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "traffic-class"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Mpls).TrafficClass
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/traffic-class"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/state/traffic-class"
func (n *Qos_Classifier_Term_Conditions_Mpls_TrafficClassPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_Classifier_Term_Conditions_Mpls",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "traffic-class"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Mpls).TrafficClass
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/traffic-class"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/config/traffic-class"
func (n *Qos_Classifier_Term_Conditions_Mpls_TrafficClassPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_Classifier_Term_Conditions_Mpls",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "traffic-class"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Mpls).TrafficClass
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/traffic-class"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/config/traffic-class"
func (n *Qos_Classifier_Term_Conditions_Mpls_TrafficClassPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_Classifier_Term_Conditions_Mpls",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "traffic-class"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Mpls).TrafficClass
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Mpls_TtlValuePath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/mpls/state/ttl-value YANG schema element.
type Qos_Classifier_Term_Conditions_Mpls_TtlValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Mpls_TtlValuePathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/mpls/state/ttl-value YANG schema element.
type Qos_Classifier_Term_Conditions_Mpls_TtlValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ttl-value"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/state/ttl-value"
func (n *Qos_Classifier_Term_Conditions_Mpls_TtlValuePath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_Classifier_Term_Conditions_Mpls",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ttl-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Mpls).TtlValue
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ttl-value"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/state/ttl-value"
func (n *Qos_Classifier_Term_Conditions_Mpls_TtlValuePathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_Classifier_Term_Conditions_Mpls",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ttl-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Mpls).TtlValue
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/ttl-value"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/config/ttl-value"
func (n *Qos_Classifier_Term_Conditions_Mpls_TtlValuePath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_Classifier_Term_Conditions_Mpls",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ttl-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Mpls).TtlValue
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/ttl-value"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/config/ttl-value"
func (n *Qos_Classifier_Term_Conditions_Mpls_TtlValuePathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_Classifier_Term_Conditions_Mpls",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ttl-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Mpls).TtlValue
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_MplsPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/mpls YANG schema element.
type Qos_Classifier_Term_Conditions_MplsPath struct {
	*ygnmi.NodePath
}

// Qos_Classifier_Term_Conditions_MplsPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/mpls YANG schema element.
type Qos_Classifier_Term_Conditions_MplsPathAny struct {
	*ygnmi.NodePath
}

// EndLabelValue (leaf): Match MPLS label value on the MPLS header.
// The usage of this field indicated the upper
// range value in the top of the stack.
// The range that is used is inclusive. The match that
// is done for a particular received pkt_label is:
// start-label-value <= pkt_label <= end-label-value.
// The 20-bit label value in an MPLS label
// stack as specified in RFC 3032.
// This label value does not include the
// encodings of Traffic Class and TTL.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/end-label-value"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/*/end-label-value"
func (n *Qos_Classifier_Term_Conditions_MplsPath) EndLabelValue() *Qos_Classifier_Term_Conditions_Mpls_EndLabelValuePath {
	ps := &Qos_Classifier_Term_Conditions_Mpls_EndLabelValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "end-label-value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EndLabelValue (leaf): Match MPLS label value on the MPLS header.
// The usage of this field indicated the upper
// range value in the top of the stack.
// The range that is used is inclusive. The match that
// is done for a particular received pkt_label is:
// start-label-value <= pkt_label <= end-label-value.
// The 20-bit label value in an MPLS label
// stack as specified in RFC 3032.
// This label value does not include the
// encodings of Traffic Class and TTL.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/end-label-value"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/*/end-label-value"
func (n *Qos_Classifier_Term_Conditions_MplsPathAny) EndLabelValue() *Qos_Classifier_Term_Conditions_Mpls_EndLabelValuePathAny {
	ps := &Qos_Classifier_Term_Conditions_Mpls_EndLabelValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "end-label-value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// StartLabelValue (leaf): Match MPLS label value on the MPLS header.
// The usage of this field indicated the upper
// range value in the top of the stack.
// The range that is used is inclusive. The match that
// is done for a particular received pkt_label is:
// start-label-value <= pkt_label <= end-label-value.
// The 20-bit label value in an MPLS label
// stack as specified in RFC 3032.
// This label value does not include the
// encodings of Traffic Class and TTL.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/start-label-value"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/*/start-label-value"
func (n *Qos_Classifier_Term_Conditions_MplsPath) StartLabelValue() *Qos_Classifier_Term_Conditions_Mpls_StartLabelValuePath {
	ps := &Qos_Classifier_Term_Conditions_Mpls_StartLabelValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "start-label-value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// StartLabelValue (leaf): Match MPLS label value on the MPLS header.
// The usage of this field indicated the upper
// range value in the top of the stack.
// The range that is used is inclusive. The match that
// is done for a particular received pkt_label is:
// start-label-value <= pkt_label <= end-label-value.
// The 20-bit label value in an MPLS label
// stack as specified in RFC 3032.
// This label value does not include the
// encodings of Traffic Class and TTL.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/start-label-value"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/*/start-label-value"
func (n *Qos_Classifier_Term_Conditions_MplsPathAny) StartLabelValue() *Qos_Classifier_Term_Conditions_Mpls_StartLabelValuePathAny {
	ps := &Qos_Classifier_Term_Conditions_Mpls_StartLabelValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "start-label-value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TrafficClass (leaf): The value of the MPLS traffic class (TC) bits,
// formerly known as the EXP bits.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/traffic-class"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/*/traffic-class"
func (n *Qos_Classifier_Term_Conditions_MplsPath) TrafficClass() *Qos_Classifier_Term_Conditions_Mpls_TrafficClassPath {
	ps := &Qos_Classifier_Term_Conditions_Mpls_TrafficClassPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "traffic-class"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TrafficClass (leaf): The value of the MPLS traffic class (TC) bits,
// formerly known as the EXP bits.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/traffic-class"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/*/traffic-class"
func (n *Qos_Classifier_Term_Conditions_MplsPathAny) TrafficClass() *Qos_Classifier_Term_Conditions_Mpls_TrafficClassPathAny {
	ps := &Qos_Classifier_Term_Conditions_Mpls_TrafficClassPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "traffic-class"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TtlValue (leaf): Time-to-live MPLS packet value match.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/ttl-value"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/*/ttl-value"
func (n *Qos_Classifier_Term_Conditions_MplsPath) TtlValue() *Qos_Classifier_Term_Conditions_Mpls_TtlValuePath {
	ps := &Qos_Classifier_Term_Conditions_Mpls_TtlValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ttl-value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TtlValue (leaf): Time-to-live MPLS packet value match.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/ttl-value"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/*/ttl-value"
func (n *Qos_Classifier_Term_Conditions_MplsPathAny) TtlValue() *Qos_Classifier_Term_Conditions_Mpls_TtlValuePathAny {
	ps := &Qos_Classifier_Term_Conditions_Mpls_TtlValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ttl-value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_MplsPath) State() ygnmi.SingletonQuery[*oc.Qos_Classifier_Term_Conditions_Mpls] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Classifier_Term_Conditions_Mpls](
		"Qos_Classifier_Term_Conditions_Mpls",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_MplsPathAny) State() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term_Conditions_Mpls] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term_Conditions_Mpls](
		"Qos_Classifier_Term_Conditions_Mpls",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_MplsPath) Config() ygnmi.ConfigQuery[*oc.Qos_Classifier_Term_Conditions_Mpls] {
	return ygnmi.NewConfigQuery[*oc.Qos_Classifier_Term_Conditions_Mpls](
		"Qos_Classifier_Term_Conditions_Mpls",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_MplsPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term_Conditions_Mpls] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term_Conditions_Mpls](
		"Qos_Classifier_Term_Conditions_Mpls",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Transport_BuiltinDetailPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport/state/builtin-detail YANG schema element.
type Qos_Classifier_Term_Conditions_Transport_BuiltinDetailPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Transport_BuiltinDetailPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport/state/builtin-detail YANG schema element.
type Qos_Classifier_Term_Conditions_Transport_BuiltinDetailPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/builtin-detail"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/state/builtin-detail"
func (n *Qos_Classifier_Term_Conditions_Transport_BuiltinDetailPath) State() ygnmi.SingletonQuery[oc.E_Transport_BuiltinDetail] {
	return ygnmi.NewSingletonQuery[oc.E_Transport_BuiltinDetail](
		"Qos_Classifier_Term_Conditions_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "builtin-detail"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_BuiltinDetail, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).BuiltinDetail
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/builtin-detail"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/state/builtin-detail"
func (n *Qos_Classifier_Term_Conditions_Transport_BuiltinDetailPathAny) State() ygnmi.WildcardQuery[oc.E_Transport_BuiltinDetail] {
	return ygnmi.NewWildcardQuery[oc.E_Transport_BuiltinDetail](
		"Qos_Classifier_Term_Conditions_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "builtin-detail"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_BuiltinDetail, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).BuiltinDetail
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/builtin-detail"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/config/builtin-detail"
func (n *Qos_Classifier_Term_Conditions_Transport_BuiltinDetailPath) Config() ygnmi.ConfigQuery[oc.E_Transport_BuiltinDetail] {
	return ygnmi.NewConfigQuery[oc.E_Transport_BuiltinDetail](
		"Qos_Classifier_Term_Conditions_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "builtin-detail"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_BuiltinDetail, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).BuiltinDetail
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/builtin-detail"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/config/builtin-detail"
func (n *Qos_Classifier_Term_Conditions_Transport_BuiltinDetailPathAny) Config() ygnmi.WildcardQuery[oc.E_Transport_BuiltinDetail] {
	return ygnmi.NewWildcardQuery[oc.E_Transport_BuiltinDetail](
		"Qos_Classifier_Term_Conditions_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "builtin-detail"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_BuiltinDetail, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).BuiltinDetail
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Transport_DestinationPortPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport/state/destination-port YANG schema element.
type Qos_Classifier_Term_Conditions_Transport_DestinationPortPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Transport_DestinationPortPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport/state/destination-port YANG schema element.
type Qos_Classifier_Term_Conditions_Transport_DestinationPortPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/destination-port"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/state/destination-port"
func (n *Qos_Classifier_Term_Conditions_Transport_DestinationPortPath) State() ygnmi.SingletonQuery[oc.Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union] {
	return ygnmi.NewSingletonQuery[oc.Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union](
		"Qos_Classifier_Term_Conditions_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).DestinationPort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/destination-port"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/state/destination-port"
func (n *Qos_Classifier_Term_Conditions_Transport_DestinationPortPathAny) State() ygnmi.WildcardQuery[oc.Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union] {
	return ygnmi.NewWildcardQuery[oc.Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union](
		"Qos_Classifier_Term_Conditions_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).DestinationPort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/destination-port"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/config/destination-port"
func (n *Qos_Classifier_Term_Conditions_Transport_DestinationPortPath) Config() ygnmi.ConfigQuery[oc.Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union] {
	return ygnmi.NewConfigQuery[oc.Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union](
		"Qos_Classifier_Term_Conditions_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).DestinationPort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/destination-port"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/config/destination-port"
func (n *Qos_Classifier_Term_Conditions_Transport_DestinationPortPathAny) Config() ygnmi.WildcardQuery[oc.Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union] {
	return ygnmi.NewWildcardQuery[oc.Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union](
		"Qos_Classifier_Term_Conditions_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).DestinationPort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Transport_DestinationPortSetPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport/state/destination-port-set YANG schema element.
type Qos_Classifier_Term_Conditions_Transport_DestinationPortSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Transport_DestinationPortSetPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport/state/destination-port-set YANG schema element.
type Qos_Classifier_Term_Conditions_Transport_DestinationPortSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/destination-port-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/state/destination-port-set"
func (n *Qos_Classifier_Term_Conditions_Transport_DestinationPortSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Classifier_Term_Conditions_Transport",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).DestinationPortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/destination-port-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/state/destination-port-set"
func (n *Qos_Classifier_Term_Conditions_Transport_DestinationPortSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_Transport",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).DestinationPortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/destination-port-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/config/destination-port-set"
func (n *Qos_Classifier_Term_Conditions_Transport_DestinationPortSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Classifier_Term_Conditions_Transport",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).DestinationPortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/destination-port-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/config/destination-port-set"
func (n *Qos_Classifier_Term_Conditions_Transport_DestinationPortSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_Transport",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).DestinationPortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Transport_DetailModePath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport/state/detail-mode YANG schema element.
type Qos_Classifier_Term_Conditions_Transport_DetailModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Transport_DetailModePathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport/state/detail-mode YANG schema element.
type Qos_Classifier_Term_Conditions_Transport_DetailModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/detail-mode"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/state/detail-mode"
func (n *Qos_Classifier_Term_Conditions_Transport_DetailModePath) State() ygnmi.SingletonQuery[oc.E_Transport_DetailMode] {
	return ygnmi.NewSingletonQuery[oc.E_Transport_DetailMode](
		"Qos_Classifier_Term_Conditions_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "detail-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_DetailMode, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).DetailMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/detail-mode"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/state/detail-mode"
func (n *Qos_Classifier_Term_Conditions_Transport_DetailModePathAny) State() ygnmi.WildcardQuery[oc.E_Transport_DetailMode] {
	return ygnmi.NewWildcardQuery[oc.E_Transport_DetailMode](
		"Qos_Classifier_Term_Conditions_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "detail-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_DetailMode, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).DetailMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/detail-mode"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/config/detail-mode"
func (n *Qos_Classifier_Term_Conditions_Transport_DetailModePath) Config() ygnmi.ConfigQuery[oc.E_Transport_DetailMode] {
	return ygnmi.NewConfigQuery[oc.E_Transport_DetailMode](
		"Qos_Classifier_Term_Conditions_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "detail-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_DetailMode, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).DetailMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/detail-mode"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/config/detail-mode"
func (n *Qos_Classifier_Term_Conditions_Transport_DetailModePathAny) Config() ygnmi.WildcardQuery[oc.E_Transport_DetailMode] {
	return ygnmi.NewWildcardQuery[oc.E_Transport_DetailMode](
		"Qos_Classifier_Term_Conditions_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "detail-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_DetailMode, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).DetailMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Transport_ExplicitDetailMatchModePath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport/state/explicit-detail-match-mode YANG schema element.
type Qos_Classifier_Term_Conditions_Transport_ExplicitDetailMatchModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Transport_ExplicitDetailMatchModePathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport/state/explicit-detail-match-mode YANG schema element.
type Qos_Classifier_Term_Conditions_Transport_ExplicitDetailMatchModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/explicit-detail-match-mode"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/state/explicit-detail-match-mode"
func (n *Qos_Classifier_Term_Conditions_Transport_ExplicitDetailMatchModePath) State() ygnmi.SingletonQuery[oc.E_Transport_ExplicitDetailMatchMode] {
	return ygnmi.NewSingletonQuery[oc.E_Transport_ExplicitDetailMatchMode](
		"Qos_Classifier_Term_Conditions_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "explicit-detail-match-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_ExplicitDetailMatchMode, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).ExplicitDetailMatchMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/explicit-detail-match-mode"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/state/explicit-detail-match-mode"
func (n *Qos_Classifier_Term_Conditions_Transport_ExplicitDetailMatchModePathAny) State() ygnmi.WildcardQuery[oc.E_Transport_ExplicitDetailMatchMode] {
	return ygnmi.NewWildcardQuery[oc.E_Transport_ExplicitDetailMatchMode](
		"Qos_Classifier_Term_Conditions_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "explicit-detail-match-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_ExplicitDetailMatchMode, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).ExplicitDetailMatchMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/explicit-detail-match-mode"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/config/explicit-detail-match-mode"
func (n *Qos_Classifier_Term_Conditions_Transport_ExplicitDetailMatchModePath) Config() ygnmi.ConfigQuery[oc.E_Transport_ExplicitDetailMatchMode] {
	return ygnmi.NewConfigQuery[oc.E_Transport_ExplicitDetailMatchMode](
		"Qos_Classifier_Term_Conditions_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "explicit-detail-match-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_ExplicitDetailMatchMode, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).ExplicitDetailMatchMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/explicit-detail-match-mode"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/config/explicit-detail-match-mode"
func (n *Qos_Classifier_Term_Conditions_Transport_ExplicitDetailMatchModePathAny) Config() ygnmi.WildcardQuery[oc.E_Transport_ExplicitDetailMatchMode] {
	return ygnmi.NewWildcardQuery[oc.E_Transport_ExplicitDetailMatchMode](
		"Qos_Classifier_Term_Conditions_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "explicit-detail-match-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_ExplicitDetailMatchMode, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).ExplicitDetailMatchMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Transport_ExplicitTcpFlagsPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport/state/explicit-tcp-flags YANG schema element.
type Qos_Classifier_Term_Conditions_Transport_ExplicitTcpFlagsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Transport_ExplicitTcpFlagsPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport/state/explicit-tcp-flags YANG schema element.
type Qos_Classifier_Term_Conditions_Transport_ExplicitTcpFlagsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/explicit-tcp-flags"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/state/explicit-tcp-flags"
func (n *Qos_Classifier_Term_Conditions_Transport_ExplicitTcpFlagsPath) State() ygnmi.SingletonQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS] {
	return ygnmi.NewSingletonQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS](
		"Qos_Classifier_Term_Conditions_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "explicit-tcp-flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_PacketMatchTypes_TCP_FLAGS, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).ExplicitTcpFlags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/explicit-tcp-flags"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/state/explicit-tcp-flags"
func (n *Qos_Classifier_Term_Conditions_Transport_ExplicitTcpFlagsPathAny) State() ygnmi.WildcardQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS] {
	return ygnmi.NewWildcardQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS](
		"Qos_Classifier_Term_Conditions_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "explicit-tcp-flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_PacketMatchTypes_TCP_FLAGS, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).ExplicitTcpFlags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/explicit-tcp-flags"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/config/explicit-tcp-flags"
func (n *Qos_Classifier_Term_Conditions_Transport_ExplicitTcpFlagsPath) Config() ygnmi.ConfigQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS] {
	return ygnmi.NewConfigQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS](
		"Qos_Classifier_Term_Conditions_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "explicit-tcp-flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_PacketMatchTypes_TCP_FLAGS, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).ExplicitTcpFlags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/explicit-tcp-flags"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/config/explicit-tcp-flags"
func (n *Qos_Classifier_Term_Conditions_Transport_ExplicitTcpFlagsPathAny) Config() ygnmi.WildcardQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS] {
	return ygnmi.NewWildcardQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS](
		"Qos_Classifier_Term_Conditions_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "explicit-tcp-flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_PacketMatchTypes_TCP_FLAGS, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).ExplicitTcpFlags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Transport_SourcePortPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport/state/source-port YANG schema element.
type Qos_Classifier_Term_Conditions_Transport_SourcePortPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Transport_SourcePortPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport/state/source-port YANG schema element.
type Qos_Classifier_Term_Conditions_Transport_SourcePortPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/source-port"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/state/source-port"
func (n *Qos_Classifier_Term_Conditions_Transport_SourcePortPath) State() ygnmi.SingletonQuery[oc.Qos_Classifier_Term_Conditions_Transport_SourcePort_Union] {
	return ygnmi.NewSingletonQuery[oc.Qos_Classifier_Term_Conditions_Transport_SourcePort_Union](
		"Qos_Classifier_Term_Conditions_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Transport_SourcePort_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).SourcePort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/source-port"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/state/source-port"
func (n *Qos_Classifier_Term_Conditions_Transport_SourcePortPathAny) State() ygnmi.WildcardQuery[oc.Qos_Classifier_Term_Conditions_Transport_SourcePort_Union] {
	return ygnmi.NewWildcardQuery[oc.Qos_Classifier_Term_Conditions_Transport_SourcePort_Union](
		"Qos_Classifier_Term_Conditions_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Transport_SourcePort_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).SourcePort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/source-port"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/config/source-port"
func (n *Qos_Classifier_Term_Conditions_Transport_SourcePortPath) Config() ygnmi.ConfigQuery[oc.Qos_Classifier_Term_Conditions_Transport_SourcePort_Union] {
	return ygnmi.NewConfigQuery[oc.Qos_Classifier_Term_Conditions_Transport_SourcePort_Union](
		"Qos_Classifier_Term_Conditions_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Transport_SourcePort_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).SourcePort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/source-port"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/config/source-port"
func (n *Qos_Classifier_Term_Conditions_Transport_SourcePortPathAny) Config() ygnmi.WildcardQuery[oc.Qos_Classifier_Term_Conditions_Transport_SourcePort_Union] {
	return ygnmi.NewWildcardQuery[oc.Qos_Classifier_Term_Conditions_Transport_SourcePort_Union](
		"Qos_Classifier_Term_Conditions_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Transport_SourcePort_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).SourcePort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Transport_SourcePortSetPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport/state/source-port-set YANG schema element.
type Qos_Classifier_Term_Conditions_Transport_SourcePortSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Transport_SourcePortSetPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport/state/source-port-set YANG schema element.
type Qos_Classifier_Term_Conditions_Transport_SourcePortSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/source-port-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/state/source-port-set"
func (n *Qos_Classifier_Term_Conditions_Transport_SourcePortSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Classifier_Term_Conditions_Transport",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).SourcePortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/source-port-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/state/source-port-set"
func (n *Qos_Classifier_Term_Conditions_Transport_SourcePortSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_Transport",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).SourcePortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/source-port-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/config/source-port-set"
func (n *Qos_Classifier_Term_Conditions_Transport_SourcePortSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Classifier_Term_Conditions_Transport",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).SourcePortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/source-port-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/config/source-port-set"
func (n *Qos_Classifier_Term_Conditions_Transport_SourcePortSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_Transport",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).SourcePortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_TransportPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport YANG schema element.
type Qos_Classifier_Term_Conditions_TransportPath struct {
	*ygnmi.NodePath
}

// Qos_Classifier_Term_Conditions_TransportPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport YANG schema element.
type Qos_Classifier_Term_Conditions_TransportPathAny struct {
	*ygnmi.NodePath
}

// BuiltinDetail (leaf): Specifies a built-in (alias) for a match condition that matches
// multiple flags, or specifies particular logic as to the flag matches
// to be implemented. This leaf is only valid when the detail-match-mode
// leaf is BUILTIN.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/builtin-detail"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/*/builtin-detail"
func (n *Qos_Classifier_Term_Conditions_TransportPath) BuiltinDetail() *Qos_Classifier_Term_Conditions_Transport_BuiltinDetailPath {
	ps := &Qos_Classifier_Term_Conditions_Transport_BuiltinDetailPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "builtin-detail"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BuiltinDetail (leaf): Specifies a built-in (alias) for a match condition that matches
// multiple flags, or specifies particular logic as to the flag matches
// to be implemented. This leaf is only valid when the detail-match-mode
// leaf is BUILTIN.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/builtin-detail"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/*/builtin-detail"
func (n *Qos_Classifier_Term_Conditions_TransportPathAny) BuiltinDetail() *Qos_Classifier_Term_Conditions_Transport_BuiltinDetailPathAny {
	ps := &Qos_Classifier_Term_Conditions_Transport_BuiltinDetailPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "builtin-detail"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationPort (leaf): Destination port or range
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/destination-port"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/*/destination-port"
func (n *Qos_Classifier_Term_Conditions_TransportPath) DestinationPort() *Qos_Classifier_Term_Conditions_Transport_DestinationPortPath {
	ps := &Qos_Classifier_Term_Conditions_Transport_DestinationPortPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationPort (leaf): Destination port or range
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/destination-port"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/*/destination-port"
func (n *Qos_Classifier_Term_Conditions_TransportPathAny) DestinationPort() *Qos_Classifier_Term_Conditions_Transport_DestinationPortPathAny {
	ps := &Qos_Classifier_Term_Conditions_Transport_DestinationPortPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationPortSet (leaf): Reference to a port set
// to match the destination port
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/destination-port-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/*/destination-port-set"
func (n *Qos_Classifier_Term_Conditions_TransportPath) DestinationPortSet() *Qos_Classifier_Term_Conditions_Transport_DestinationPortSetPath {
	ps := &Qos_Classifier_Term_Conditions_Transport_DestinationPortSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-port-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationPortSet (leaf): Reference to a port set
// to match the destination port
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/destination-port-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/*/destination-port-set"
func (n *Qos_Classifier_Term_Conditions_TransportPathAny) DestinationPortSet() *Qos_Classifier_Term_Conditions_Transport_DestinationPortSetPathAny {
	ps := &Qos_Classifier_Term_Conditions_Transport_DestinationPortSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-port-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DetailMode (leaf): Mode that is used for matching detailed fields at the transport
// layer. When EXPLICIT is specified, the implementation should
// match based on the explicit flags that are specified in the
// corresponding leaf. When BUILTIN is specified, the implementation
// must expand the contents of the corresponding leaf to the flags
// and/or fields that match the pre-defined built-in values.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/detail-mode"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/*/detail-mode"
func (n *Qos_Classifier_Term_Conditions_TransportPath) DetailMode() *Qos_Classifier_Term_Conditions_Transport_DetailModePath {
	ps := &Qos_Classifier_Term_Conditions_Transport_DetailModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "detail-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DetailMode (leaf): Mode that is used for matching detailed fields at the transport
// layer. When EXPLICIT is specified, the implementation should
// match based on the explicit flags that are specified in the
// corresponding leaf. When BUILTIN is specified, the implementation
// must expand the contents of the corresponding leaf to the flags
// and/or fields that match the pre-defined built-in values.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/detail-mode"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/*/detail-mode"
func (n *Qos_Classifier_Term_Conditions_TransportPathAny) DetailMode() *Qos_Classifier_Term_Conditions_Transport_DetailModePathAny {
	ps := &Qos_Classifier_Term_Conditions_Transport_DetailModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "detail-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExplicitDetailMatchMode (leaf): Specifies how the contents of the explicit-details-flags list
// are to be treated. ANY implies that any of the flags may match,
// where ALL indicates that all the flags must be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/explicit-detail-match-mode"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/*/explicit-detail-match-mode"
func (n *Qos_Classifier_Term_Conditions_TransportPath) ExplicitDetailMatchMode() *Qos_Classifier_Term_Conditions_Transport_ExplicitDetailMatchModePath {
	ps := &Qos_Classifier_Term_Conditions_Transport_ExplicitDetailMatchModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "explicit-detail-match-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExplicitDetailMatchMode (leaf): Specifies how the contents of the explicit-details-flags list
// are to be treated. ANY implies that any of the flags may match,
// where ALL indicates that all the flags must be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/explicit-detail-match-mode"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/*/explicit-detail-match-mode"
func (n *Qos_Classifier_Term_Conditions_TransportPathAny) ExplicitDetailMatchMode() *Qos_Classifier_Term_Conditions_Transport_ExplicitDetailMatchModePathAny {
	ps := &Qos_Classifier_Term_Conditions_Transport_ExplicitDetailMatchModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "explicit-detail-match-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExplicitTcpFlags (leaf-list): An explicit list of the TCP flags that are to be matched. The
// mechanism for the match is specified by the explicit-detail-match-mode
// leaf.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/explicit-tcp-flags"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/*/explicit-tcp-flags"
func (n *Qos_Classifier_Term_Conditions_TransportPath) ExplicitTcpFlags() *Qos_Classifier_Term_Conditions_Transport_ExplicitTcpFlagsPath {
	ps := &Qos_Classifier_Term_Conditions_Transport_ExplicitTcpFlagsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "explicit-tcp-flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExplicitTcpFlags (leaf-list): An explicit list of the TCP flags that are to be matched. The
// mechanism for the match is specified by the explicit-detail-match-mode
// leaf.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/explicit-tcp-flags"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/*/explicit-tcp-flags"
func (n *Qos_Classifier_Term_Conditions_TransportPathAny) ExplicitTcpFlags() *Qos_Classifier_Term_Conditions_Transport_ExplicitTcpFlagsPathAny {
	ps := &Qos_Classifier_Term_Conditions_Transport_ExplicitTcpFlagsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "explicit-tcp-flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourcePort (leaf): Source port or range
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/source-port"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/*/source-port"
func (n *Qos_Classifier_Term_Conditions_TransportPath) SourcePort() *Qos_Classifier_Term_Conditions_Transport_SourcePortPath {
	ps := &Qos_Classifier_Term_Conditions_Transport_SourcePortPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourcePort (leaf): Source port or range
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/source-port"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/*/source-port"
func (n *Qos_Classifier_Term_Conditions_TransportPathAny) SourcePort() *Qos_Classifier_Term_Conditions_Transport_SourcePortPathAny {
	ps := &Qos_Classifier_Term_Conditions_Transport_SourcePortPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourcePortSet (leaf): Reference to a port set
// to match the source port
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/source-port-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/*/source-port-set"
func (n *Qos_Classifier_Term_Conditions_TransportPath) SourcePortSet() *Qos_Classifier_Term_Conditions_Transport_SourcePortSetPath {
	ps := &Qos_Classifier_Term_Conditions_Transport_SourcePortSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-port-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourcePortSet (leaf): Reference to a port set
// to match the source port
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/source-port-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/*/source-port-set"
func (n *Qos_Classifier_Term_Conditions_TransportPathAny) SourcePortSet() *Qos_Classifier_Term_Conditions_Transport_SourcePortSetPathAny {
	ps := &Qos_Classifier_Term_Conditions_Transport_SourcePortSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-port-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_TransportPath) State() ygnmi.SingletonQuery[*oc.Qos_Classifier_Term_Conditions_Transport] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Classifier_Term_Conditions_Transport](
		"Qos_Classifier_Term_Conditions_Transport",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_TransportPathAny) State() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term_Conditions_Transport] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term_Conditions_Transport](
		"Qos_Classifier_Term_Conditions_Transport",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_TransportPath) Config() ygnmi.ConfigQuery[*oc.Qos_Classifier_Term_Conditions_Transport] {
	return ygnmi.NewConfigQuery[*oc.Qos_Classifier_Term_Conditions_Transport](
		"Qos_Classifier_Term_Conditions_Transport",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_TransportPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term_Conditions_Transport] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term_Conditions_Transport](
		"Qos_Classifier_Term_Conditions_Transport",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_ForwardingGroup_FabricPriorityPath represents the /openconfig-qos/qos/forwarding-groups/forwarding-group/state/fabric-priority YANG schema element.
type Qos_ForwardingGroup_FabricPriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_ForwardingGroup_FabricPriorityPathAny represents the wildcard version of the /openconfig-qos/qos/forwarding-groups/forwarding-group/state/fabric-priority YANG schema element.
type Qos_ForwardingGroup_FabricPriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/fabric-priority"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/state/fabric-priority"
func (n *Qos_ForwardingGroup_FabricPriorityPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_ForwardingGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fabric-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_ForwardingGroup).FabricPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_ForwardingGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/fabric-priority"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/state/fabric-priority"
func (n *Qos_ForwardingGroup_FabricPriorityPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_ForwardingGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fabric-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_ForwardingGroup).FabricPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_ForwardingGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/fabric-priority"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/config/fabric-priority"
func (n *Qos_ForwardingGroup_FabricPriorityPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_ForwardingGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "fabric-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_ForwardingGroup).FabricPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_ForwardingGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/fabric-priority"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/config/fabric-priority"
func (n *Qos_ForwardingGroup_FabricPriorityPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_ForwardingGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "fabric-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_ForwardingGroup).FabricPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_ForwardingGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_ForwardingGroup_MulticastOutputQueuePath represents the /openconfig-qos/qos/forwarding-groups/forwarding-group/state/multicast-output-queue YANG schema element.
type Qos_ForwardingGroup_MulticastOutputQueuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_ForwardingGroup_MulticastOutputQueuePathAny represents the wildcard version of the /openconfig-qos/qos/forwarding-groups/forwarding-group/state/multicast-output-queue YANG schema element.
type Qos_ForwardingGroup_MulticastOutputQueuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/multicast-output-queue"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/state/multicast-output-queue"
func (n *Qos_ForwardingGroup_MulticastOutputQueuePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_ForwardingGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "multicast-output-queue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_ForwardingGroup).MulticastOutputQueue
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_ForwardingGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/multicast-output-queue"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/state/multicast-output-queue"
func (n *Qos_ForwardingGroup_MulticastOutputQueuePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_ForwardingGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "multicast-output-queue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_ForwardingGroup).MulticastOutputQueue
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_ForwardingGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/multicast-output-queue"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/config/multicast-output-queue"
func (n *Qos_ForwardingGroup_MulticastOutputQueuePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_ForwardingGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "multicast-output-queue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_ForwardingGroup).MulticastOutputQueue
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_ForwardingGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/multicast-output-queue"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/config/multicast-output-queue"
func (n *Qos_ForwardingGroup_MulticastOutputQueuePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_ForwardingGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "multicast-output-queue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_ForwardingGroup).MulticastOutputQueue
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_ForwardingGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_ForwardingGroup_NamePath represents the /openconfig-qos/qos/forwarding-groups/forwarding-group/state/name YANG schema element.
type Qos_ForwardingGroup_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_ForwardingGroup_NamePathAny represents the wildcard version of the /openconfig-qos/qos/forwarding-groups/forwarding-group/state/name YANG schema element.
type Qos_ForwardingGroup_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/state/name"
func (n *Qos_ForwardingGroup_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_ForwardingGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_ForwardingGroup).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_ForwardingGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/state/name"
func (n *Qos_ForwardingGroup_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_ForwardingGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_ForwardingGroup).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_ForwardingGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/config/name"
func (n *Qos_ForwardingGroup_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_ForwardingGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_ForwardingGroup).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_ForwardingGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/config/name"
func (n *Qos_ForwardingGroup_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_ForwardingGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_ForwardingGroup).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_ForwardingGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_ForwardingGroup_OutputQueuePath represents the /openconfig-qos/qos/forwarding-groups/forwarding-group/state/output-queue YANG schema element.
type Qos_ForwardingGroup_OutputQueuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_ForwardingGroup_OutputQueuePathAny represents the wildcard version of the /openconfig-qos/qos/forwarding-groups/forwarding-group/state/output-queue YANG schema element.
type Qos_ForwardingGroup_OutputQueuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/output-queue"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/state/output-queue"
func (n *Qos_ForwardingGroup_OutputQueuePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_ForwardingGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "output-queue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_ForwardingGroup).OutputQueue
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_ForwardingGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/output-queue"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/state/output-queue"
func (n *Qos_ForwardingGroup_OutputQueuePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_ForwardingGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "output-queue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_ForwardingGroup).OutputQueue
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_ForwardingGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/output-queue"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/config/output-queue"
func (n *Qos_ForwardingGroup_OutputQueuePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_ForwardingGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "output-queue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_ForwardingGroup).OutputQueue
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_ForwardingGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/output-queue"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/config/output-queue"
func (n *Qos_ForwardingGroup_OutputQueuePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_ForwardingGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "output-queue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_ForwardingGroup).OutputQueue
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_ForwardingGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_ForwardingGroup_UnicastOutputQueuePath represents the /openconfig-qos/qos/forwarding-groups/forwarding-group/state/unicast-output-queue YANG schema element.
type Qos_ForwardingGroup_UnicastOutputQueuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_ForwardingGroup_UnicastOutputQueuePathAny represents the wildcard version of the /openconfig-qos/qos/forwarding-groups/forwarding-group/state/unicast-output-queue YANG schema element.
type Qos_ForwardingGroup_UnicastOutputQueuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/unicast-output-queue"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/state/unicast-output-queue"
func (n *Qos_ForwardingGroup_UnicastOutputQueuePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_ForwardingGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "unicast-output-queue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_ForwardingGroup).UnicastOutputQueue
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_ForwardingGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/unicast-output-queue"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/state/unicast-output-queue"
func (n *Qos_ForwardingGroup_UnicastOutputQueuePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_ForwardingGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "unicast-output-queue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_ForwardingGroup).UnicastOutputQueue
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_ForwardingGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/unicast-output-queue"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/config/unicast-output-queue"
func (n *Qos_ForwardingGroup_UnicastOutputQueuePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_ForwardingGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "unicast-output-queue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_ForwardingGroup).UnicastOutputQueue
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_ForwardingGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/unicast-output-queue"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/config/unicast-output-queue"
func (n *Qos_ForwardingGroup_UnicastOutputQueuePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_ForwardingGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "unicast-output-queue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_ForwardingGroup).UnicastOutputQueue
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_ForwardingGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_ForwardingGroupPath represents the /openconfig-qos/qos/forwarding-groups/forwarding-group YANG schema element.
type Qos_ForwardingGroupPath struct {
	*ygnmi.NodePath
}

// Qos_ForwardingGroupPathAny represents the wildcard version of the /openconfig-qos/qos/forwarding-groups/forwarding-group YANG schema element.
type Qos_ForwardingGroupPathAny struct {
	*ygnmi.NodePath
}

// Qos_ForwardingGroupPathMap represents the /openconfig-qos/qos/forwarding-groups/forwarding-group YANG schema element.
type Qos_ForwardingGroupPathMap struct {
	*ygnmi.NodePath
}

// Qos_ForwardingGroupPathMapAny represents the wildcard version of the /openconfig-qos/qos/forwarding-groups/forwarding-group YANG schema element.
type Qos_ForwardingGroupPathMapAny struct {
	*ygnmi.NodePath
}

// FabricPriority (leaf): Set the priority for the forwarding group for
// local transmission through the device, e.g.,
// across a switching fabric. Higher priorities
// are considered to be better, such that traffic
// with fabric priority 128 is considered to be
// higher priority than that with fabric priority
// 0.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/fabric-priority"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/*/fabric-priority"
func (n *Qos_ForwardingGroupPath) FabricPriority() *Qos_ForwardingGroup_FabricPriorityPath {
	ps := &Qos_ForwardingGroup_FabricPriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "fabric-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FabricPriority (leaf): Set the priority for the forwarding group for
// local transmission through the device, e.g.,
// across a switching fabric. Higher priorities
// are considered to be better, such that traffic
// with fabric priority 128 is considered to be
// higher priority than that with fabric priority
// 0.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/fabric-priority"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/*/fabric-priority"
func (n *Qos_ForwardingGroupPathAny) FabricPriority() *Qos_ForwardingGroup_FabricPriorityPathAny {
	ps := &Qos_ForwardingGroup_FabricPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "fabric-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MulticastOutputQueue (leaf): Output queue for multicast packets within this
// forwarding group. Where an operator or system does
// not require separate queueing for multicast and
// unicast this leaf is not specified.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/multicast-output-queue"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/*/multicast-output-queue"
func (n *Qos_ForwardingGroupPath) MulticastOutputQueue() *Qos_ForwardingGroup_MulticastOutputQueuePath {
	ps := &Qos_ForwardingGroup_MulticastOutputQueuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "multicast-output-queue"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MulticastOutputQueue (leaf): Output queue for multicast packets within this
// forwarding group. Where an operator or system does
// not require separate queueing for multicast and
// unicast this leaf is not specified.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/multicast-output-queue"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/*/multicast-output-queue"
func (n *Qos_ForwardingGroupPathAny) MulticastOutputQueue() *Qos_ForwardingGroup_MulticastOutputQueuePathAny {
	ps := &Qos_ForwardingGroup_MulticastOutputQueuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "multicast-output-queue"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Name of the forwarding group
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/*/name"
func (n *Qos_ForwardingGroupPath) Name() *Qos_ForwardingGroup_NamePath {
	ps := &Qos_ForwardingGroup_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Name of the forwarding group
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/*/name"
func (n *Qos_ForwardingGroupPathAny) Name() *Qos_ForwardingGroup_NamePathAny {
	ps := &Qos_ForwardingGroup_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutputQueue (leaf): Output queue for packets in this forwarding group.
// This leaf applies to both multicast and unicast
// packets. Where a user or system requires separate
// queueing for multicast and unicast the unicast-output-queue
// and multicast-output-queue leaves should be specified.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/output-queue"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/*/output-queue"
func (n *Qos_ForwardingGroupPath) OutputQueue() *Qos_ForwardingGroup_OutputQueuePath {
	ps := &Qos_ForwardingGroup_OutputQueuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "output-queue"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutputQueue (leaf): Output queue for packets in this forwarding group.
// This leaf applies to both multicast and unicast
// packets. Where a user or system requires separate
// queueing for multicast and unicast the unicast-output-queue
// and multicast-output-queue leaves should be specified.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/output-queue"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/*/output-queue"
func (n *Qos_ForwardingGroupPathAny) OutputQueue() *Qos_ForwardingGroup_OutputQueuePathAny {
	ps := &Qos_ForwardingGroup_OutputQueuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "output-queue"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnicastOutputQueue (leaf): Output queue for unicast packets within this
// forwarding group. Where an operator or system does
// not require separate queueing for multicast and
// unicast this leaf is not specified.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/unicast-output-queue"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/*/unicast-output-queue"
func (n *Qos_ForwardingGroupPath) UnicastOutputQueue() *Qos_ForwardingGroup_UnicastOutputQueuePath {
	ps := &Qos_ForwardingGroup_UnicastOutputQueuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "unicast-output-queue"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnicastOutputQueue (leaf): Output queue for unicast packets within this
// forwarding group. Where an operator or system does
// not require separate queueing for multicast and
// unicast this leaf is not specified.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/unicast-output-queue"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/*/unicast-output-queue"
func (n *Qos_ForwardingGroupPathAny) UnicastOutputQueue() *Qos_ForwardingGroup_UnicastOutputQueuePathAny {
	ps := &Qos_ForwardingGroup_UnicastOutputQueuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "unicast-output-queue"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_ForwardingGroupPath) State() ygnmi.SingletonQuery[*oc.Qos_ForwardingGroup] {
	return ygnmi.NewSingletonQuery[*oc.Qos_ForwardingGroup](
		"Qos_ForwardingGroup",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_ForwardingGroupPathAny) State() ygnmi.WildcardQuery[*oc.Qos_ForwardingGroup] {
	return ygnmi.NewWildcardQuery[*oc.Qos_ForwardingGroup](
		"Qos_ForwardingGroup",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_ForwardingGroupPath) Config() ygnmi.ConfigQuery[*oc.Qos_ForwardingGroup] {
	return ygnmi.NewConfigQuery[*oc.Qos_ForwardingGroup](
		"Qos_ForwardingGroup",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_ForwardingGroupPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_ForwardingGroup] {
	return ygnmi.NewWildcardQuery[*oc.Qos_ForwardingGroup](
		"Qos_ForwardingGroup",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_ForwardingGroupPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Qos_ForwardingGroup] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Qos_ForwardingGroup](
		"Qos",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_ForwardingGroup, bool) {
			ret := gs.(*oc.Qos).ForwardingGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:forwarding-groups"},
			PostRelPath: []string{"openconfig-qos:forwarding-group"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_ForwardingGroupPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Qos_ForwardingGroup] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_ForwardingGroup](
		"Qos",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_ForwardingGroup, bool) {
			ret := gs.(*oc.Qos).ForwardingGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:forwarding-groups"},
			PostRelPath: []string{"openconfig-qos:forwarding-group"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_ForwardingGroupPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Qos_ForwardingGroup] {
	return ygnmi.NewConfigQuery[map[string]*oc.Qos_ForwardingGroup](
		"Qos",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_ForwardingGroup, bool) {
			ret := gs.(*oc.Qos).ForwardingGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:forwarding-groups"},
			PostRelPath: []string{"openconfig-qos:forwarding-group"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_ForwardingGroupPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Qos_ForwardingGroup] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_ForwardingGroup](
		"Qos",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_ForwardingGroup, bool) {
			ret := gs.(*oc.Qos).ForwardingGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:forwarding-groups"},
			PostRelPath: []string{"openconfig-qos:forwarding-group"},
		},
	)
}

// Qos_Interface_InterfaceIdPath represents the /openconfig-qos/qos/interfaces/interface/state/interface-id YANG schema element.
type Qos_Interface_InterfaceIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_InterfaceIdPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/state/interface-id YANG schema element.
type Qos_Interface_InterfaceIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/qos/interfaces/interface/state/interface-id"
func (n *Qos_Interface_InterfaceIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/qos/interfaces/interface/state/interface-id"
func (n *Qos_Interface_InterfaceIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/interface-id"
//	Path from root:       "/qos/interfaces/interface/config/interface-id"
func (n *Qos_Interface_InterfaceIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/interface-id"
//	Path from root:       "/qos/interfaces/interface/config/interface-id"
func (n *Qos_Interface_InterfaceIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_InterfacePath represents the /openconfig-qos/qos/interfaces/interface YANG schema element.
type Qos_InterfacePath struct {
	*ygnmi.NodePath
}

// Qos_InterfacePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface YANG schema element.
type Qos_InterfacePathAny struct {
	*ygnmi.NodePath
}

// Qos_InterfacePathMap represents the /openconfig-qos/qos/interfaces/interface YANG schema element.
type Qos_InterfacePathMap struct {
	*ygnmi.NodePath
}

// Qos_InterfacePathMapAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface YANG schema element.
type Qos_InterfacePathMapAny struct {
	*ygnmi.NodePath
}

// Input (container): Top-level container for QoS data for the ingress
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "input"
//	Path from root:       "/qos/interfaces/interface/input"
func (n *Qos_InterfacePath) Input() *Qos_Interface_InputPath {
	ps := &Qos_Interface_InputPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"input"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Input (container): Top-level container for QoS data for the ingress
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "input"
//	Path from root:       "/qos/interfaces/interface/input"
func (n *Qos_InterfacePathAny) Input() *Qos_Interface_InputPathAny {
	ps := &Qos_Interface_InputPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"input"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceId (leaf): Identifier for the interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/interface-id"
//	Path from root:       "/qos/interfaces/interface/*/interface-id"
func (n *Qos_InterfacePath) InterfaceId() *Qos_Interface_InterfaceIdPath {
	ps := &Qos_Interface_InterfaceIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceId (leaf): Identifier for the interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/interface-id"
//	Path from root:       "/qos/interfaces/interface/*/interface-id"
func (n *Qos_InterfacePathAny) InterfaceId() *Qos_Interface_InterfaceIdPathAny {
	ps := &Qos_Interface_InterfaceIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "interface-ref"
//	Path from root:       "/qos/interfaces/interface/interface-ref"
func (n *Qos_InterfacePath) InterfaceRef() *Qos_Interface_InterfaceRefPath {
	ps := &Qos_Interface_InterfaceRefPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "interface-ref"
//	Path from root:       "/qos/interfaces/interface/interface-ref"
func (n *Qos_InterfacePathAny) InterfaceRef() *Qos_Interface_InterfaceRefPathAny {
	ps := &Qos_Interface_InterfaceRefPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Output (container): Top-level container for QoS data related to the egress
// interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "output"
//	Path from root:       "/qos/interfaces/interface/output"
func (n *Qos_InterfacePath) Output() *Qos_Interface_OutputPath {
	ps := &Qos_Interface_OutputPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"output"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Output (container): Top-level container for QoS data related to the egress
// interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "output"
//	Path from root:       "/qos/interfaces/interface/output"
func (n *Qos_InterfacePathAny) Output() *Qos_Interface_OutputPathAny {
	ps := &Qos_Interface_OutputPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"output"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_InterfacePath) State() ygnmi.SingletonQuery[*oc.Qos_Interface] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Interface](
		"Qos_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_InterfacePathAny) State() ygnmi.WildcardQuery[*oc.Qos_Interface] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface](
		"Qos_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_InterfacePath) Config() ygnmi.ConfigQuery[*oc.Qos_Interface] {
	return ygnmi.NewConfigQuery[*oc.Qos_Interface](
		"Qos_Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_InterfacePathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Interface] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface](
		"Qos_Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_InterfacePathMap) State() ygnmi.SingletonQuery[map[string]*oc.Qos_Interface] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Qos_Interface](
		"Qos",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Interface, bool) {
			ret := gs.(*oc.Qos).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:interfaces"},
			PostRelPath: []string{"openconfig-qos:interface"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_InterfacePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Qos_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_Interface](
		"Qos",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Interface, bool) {
			ret := gs.(*oc.Qos).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:interfaces"},
			PostRelPath: []string{"openconfig-qos:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_InterfacePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Qos_Interface] {
	return ygnmi.NewConfigQuery[map[string]*oc.Qos_Interface](
		"Qos",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Interface, bool) {
			ret := gs.(*oc.Qos).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:interfaces"},
			PostRelPath: []string{"openconfig-qos:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_InterfacePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Qos_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_Interface](
		"Qos",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Interface, bool) {
			ret := gs.(*oc.Qos).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:interfaces"},
			PostRelPath: []string{"openconfig-qos:interface"},
		},
	)
}

// Qos_Interface_Input_BufferAllocationProfilePath represents the /openconfig-qos/qos/interfaces/interface/input/state/buffer-allocation-profile YANG schema element.
type Qos_Interface_Input_BufferAllocationProfilePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_BufferAllocationProfilePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/state/buffer-allocation-profile YANG schema element.
type Qos_Interface_Input_BufferAllocationProfilePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/input/state/buffer-allocation-profile"
func (n *Qos_Interface_Input_BufferAllocationProfilePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Interface_Input",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input).BufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/input/state/buffer-allocation-profile"
func (n *Qos_Interface_Input_BufferAllocationProfilePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Input",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input).BufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/input/config/buffer-allocation-profile"
func (n *Qos_Interface_Input_BufferAllocationProfilePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Interface_Input",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input).BufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/input/config/buffer-allocation-profile"
func (n *Qos_Interface_Input_BufferAllocationProfilePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Input",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input).BufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_MulticastBufferAllocationProfilePath represents the /openconfig-qos/qos/interfaces/interface/input/state/multicast-buffer-allocation-profile YANG schema element.
type Qos_Interface_Input_MulticastBufferAllocationProfilePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_MulticastBufferAllocationProfilePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/state/multicast-buffer-allocation-profile YANG schema element.
type Qos_Interface_Input_MulticastBufferAllocationProfilePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/multicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/input/state/multicast-buffer-allocation-profile"
func (n *Qos_Interface_Input_MulticastBufferAllocationProfilePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Interface_Input",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "multicast-buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input).MulticastBufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/multicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/input/state/multicast-buffer-allocation-profile"
func (n *Qos_Interface_Input_MulticastBufferAllocationProfilePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Input",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "multicast-buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input).MulticastBufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/multicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/input/config/multicast-buffer-allocation-profile"
func (n *Qos_Interface_Input_MulticastBufferAllocationProfilePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Interface_Input",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "multicast-buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input).MulticastBufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/multicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/input/config/multicast-buffer-allocation-profile"
func (n *Qos_Interface_Input_MulticastBufferAllocationProfilePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Input",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "multicast-buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input).MulticastBufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_UnicastBufferAllocationProfilePath represents the /openconfig-qos/qos/interfaces/interface/input/state/unicast-buffer-allocation-profile YANG schema element.
type Qos_Interface_Input_UnicastBufferAllocationProfilePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_UnicastBufferAllocationProfilePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/state/unicast-buffer-allocation-profile YANG schema element.
type Qos_Interface_Input_UnicastBufferAllocationProfilePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/unicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/input/state/unicast-buffer-allocation-profile"
func (n *Qos_Interface_Input_UnicastBufferAllocationProfilePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Interface_Input",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "unicast-buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input).UnicastBufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/unicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/input/state/unicast-buffer-allocation-profile"
func (n *Qos_Interface_Input_UnicastBufferAllocationProfilePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Input",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "unicast-buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input).UnicastBufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/unicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/input/config/unicast-buffer-allocation-profile"
func (n *Qos_Interface_Input_UnicastBufferAllocationProfilePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Interface_Input",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "unicast-buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input).UnicastBufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/unicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/input/config/unicast-buffer-allocation-profile"
func (n *Qos_Interface_Input_UnicastBufferAllocationProfilePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Input",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "unicast-buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input).UnicastBufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_InputPath represents the /openconfig-qos/qos/interfaces/interface/input YANG schema element.
type Qos_Interface_InputPath struct {
	*ygnmi.NodePath
}

// Qos_Interface_InputPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input YANG schema element.
type Qos_Interface_InputPathAny struct {
	*ygnmi.NodePath
}

// BufferAllocationProfile (leaf): The buffer allocation profile that is to be used for the interface.
// This profile specifies how memory that is available to the interface
// should be allocated amongst the queues that are instantiated on the
// interface.
//
// This reference specifies the policy that should be used for memory
// allocated to the input (rx) queueing.
//
// This leaf is used in deployment cases where the operator or system
// requires common allocation profiles covering unicast and multicast
// packets.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/input/*/buffer-allocation-profile"
func (n *Qos_Interface_InputPath) BufferAllocationProfile() *Qos_Interface_Input_BufferAllocationProfilePath {
	ps := &Qos_Interface_Input_BufferAllocationProfilePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "buffer-allocation-profile"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BufferAllocationProfile (leaf): The buffer allocation profile that is to be used for the interface.
// This profile specifies how memory that is available to the interface
// should be allocated amongst the queues that are instantiated on the
// interface.
//
// This reference specifies the policy that should be used for memory
// allocated to the input (rx) queueing.
//
// This leaf is used in deployment cases where the operator or system
// requires common allocation profiles covering unicast and multicast
// packets.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/input/*/buffer-allocation-profile"
func (n *Qos_Interface_InputPathAny) BufferAllocationProfile() *Qos_Interface_Input_BufferAllocationProfilePathAny {
	ps := &Qos_Interface_Input_BufferAllocationProfilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "buffer-allocation-profile"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ClassifierAny (list): A list of classifiers that should be applied to the interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "classifiers/classifier"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier"
func (n *Qos_Interface_InputPath) ClassifierAny() *Qos_Interface_Input_ClassifierPathAny {
	ps := &Qos_Interface_Input_ClassifierPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"classifiers", "classifier"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
	return ps
}

// ClassifierAny (list): A list of classifiers that should be applied to the interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "classifiers/classifier"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier"
func (n *Qos_Interface_InputPathAny) ClassifierAny() *Qos_Interface_Input_ClassifierPathAny {
	ps := &Qos_Interface_Input_ClassifierPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"classifiers", "classifier"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
	return ps
}

// Classifier (list): A list of classifiers that should be applied to the interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "classifiers/classifier"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier"
//
//	Type: oc.E_Input_Classifier_Type
func (n *Qos_Interface_InputPath) Classifier(Type oc.E_Input_Classifier_Type) *Qos_Interface_Input_ClassifierPath {
	ps := &Qos_Interface_Input_ClassifierPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"classifiers", "classifier"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
	return ps
}

// Classifier (list): A list of classifiers that should be applied to the interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "classifiers/classifier"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier"
//
//	Type: oc.E_Input_Classifier_Type
func (n *Qos_Interface_InputPathAny) Classifier(Type oc.E_Input_Classifier_Type) *Qos_Interface_Input_ClassifierPathAny {
	ps := &Qos_Interface_Input_ClassifierPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"classifiers", "classifier"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
	return ps
}

// ClassifierMap (list): A list of classifiers that should be applied to the interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "classifiers/classifier"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier"
func (n *Qos_Interface_InputPath) ClassifierMap() *Qos_Interface_Input_ClassifierPathMap {
	ps := &Qos_Interface_Input_ClassifierPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"classifiers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ClassifierMap (list): A list of classifiers that should be applied to the interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "classifiers/classifier"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier"
func (n *Qos_Interface_InputPathAny) ClassifierMap() *Qos_Interface_Input_ClassifierPathMapAny {
	ps := &Qos_Interface_Input_ClassifierPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"classifiers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MulticastBufferAllocationProfile (leaf): The buffer allocation profile that is to be used for the interface.
// This profile specifies how memory that is available to the interface
// should be allocated amongst the queues that are instantiated on the
// interface.
//
// This reference specifies the policy that should be used for memory
// allocated to the output (tx) queueing.
//
// This buffer allocation profile applies to only multicast packets on
// the interface - if specified, the unicast-buffer-allocation-profile
// governs the allocation profile used for memory dedicated to unicast.
// If a system does not support, or an operator does not require separate
// buffer-allocation-profiles, this is specified by use of the
// buffer-allocation-profile leaf.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/multicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/input/*/multicast-buffer-allocation-profile"
func (n *Qos_Interface_InputPath) MulticastBufferAllocationProfile() *Qos_Interface_Input_MulticastBufferAllocationProfilePath {
	ps := &Qos_Interface_Input_MulticastBufferAllocationProfilePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "multicast-buffer-allocation-profile"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MulticastBufferAllocationProfile (leaf): The buffer allocation profile that is to be used for the interface.
// This profile specifies how memory that is available to the interface
// should be allocated amongst the queues that are instantiated on the
// interface.
//
// This reference specifies the policy that should be used for memory
// allocated to the output (tx) queueing.
//
// This buffer allocation profile applies to only multicast packets on
// the interface - if specified, the unicast-buffer-allocation-profile
// governs the allocation profile used for memory dedicated to unicast.
// If a system does not support, or an operator does not require separate
// buffer-allocation-profiles, this is specified by use of the
// buffer-allocation-profile leaf.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/multicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/input/*/multicast-buffer-allocation-profile"
func (n *Qos_Interface_InputPathAny) MulticastBufferAllocationProfile() *Qos_Interface_Input_MulticastBufferAllocationProfilePathAny {
	ps := &Qos_Interface_Input_MulticastBufferAllocationProfilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "multicast-buffer-allocation-profile"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// QueueAny (list): Top-level container for the queue associated with this
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue"
func (n *Qos_Interface_InputPath) QueueAny() *Qos_Interface_Input_QueuePathAny {
	ps := &Qos_Interface_Input_QueuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// QueueAny (list): Top-level container for the queue associated with this
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue"
func (n *Qos_Interface_InputPathAny) QueueAny() *Qos_Interface_Input_QueuePathAny {
	ps := &Qos_Interface_Input_QueuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Queue (list): Top-level container for the queue associated with this
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue"
//
//	Name: string
func (n *Qos_Interface_InputPath) Queue(Name string) *Qos_Interface_Input_QueuePath {
	ps := &Qos_Interface_Input_QueuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Queue (list): Top-level container for the queue associated with this
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue"
//
//	Name: string
func (n *Qos_Interface_InputPathAny) Queue(Name string) *Qos_Interface_Input_QueuePathAny {
	ps := &Qos_Interface_Input_QueuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// QueueMap (list): Top-level container for the queue associated with this
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue"
func (n *Qos_Interface_InputPath) QueueMap() *Qos_Interface_Input_QueuePathMap {
	ps := &Qos_Interface_Input_QueuePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// QueueMap (list): Top-level container for the queue associated with this
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue"
func (n *Qos_Interface_InputPathAny) QueueMap() *Qos_Interface_Input_QueuePathMapAny {
	ps := &Qos_Interface_Input_QueuePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SchedulerPolicy (container): Scheduler policy associated with the interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "scheduler-policy"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy"
func (n *Qos_Interface_InputPath) SchedulerPolicy() *Qos_Interface_Input_SchedulerPolicyPath {
	ps := &Qos_Interface_Input_SchedulerPolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"scheduler-policy"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SchedulerPolicy (container): Scheduler policy associated with the interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "scheduler-policy"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy"
func (n *Qos_Interface_InputPathAny) SchedulerPolicy() *Qos_Interface_Input_SchedulerPolicyPathAny {
	ps := &Qos_Interface_Input_SchedulerPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"scheduler-policy"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// UnicastBufferAllocationProfile (leaf): The buffer allocation profile that is to be used for the interface.
// This profile specifies how memory that is available to the interface
// should be allocated amongst the queues that are instantiated on the
// interface.
//
// This reference specifies the policy that should be used for memory
// allocated to the output (tx) queueing.
//
// This buffer allocation profile applies to only unicast packets on
// the interface - if specified, the multicast-buffer-allocation-profile
// governs the allocation profile used for memory dedicated to multicast.
// If a system does not support, or an operator does not require separate
// buffer-allocation-profiles, this is specified by use of the
// buffer-allocation-profile leaf.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/unicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/input/*/unicast-buffer-allocation-profile"
func (n *Qos_Interface_InputPath) UnicastBufferAllocationProfile() *Qos_Interface_Input_UnicastBufferAllocationProfilePath {
	ps := &Qos_Interface_Input_UnicastBufferAllocationProfilePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "unicast-buffer-allocation-profile"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnicastBufferAllocationProfile (leaf): The buffer allocation profile that is to be used for the interface.
// This profile specifies how memory that is available to the interface
// should be allocated amongst the queues that are instantiated on the
// interface.
//
// This reference specifies the policy that should be used for memory
// allocated to the output (tx) queueing.
//
// This buffer allocation profile applies to only unicast packets on
// the interface - if specified, the multicast-buffer-allocation-profile
// governs the allocation profile used for memory dedicated to multicast.
// If a system does not support, or an operator does not require separate
// buffer-allocation-profiles, this is specified by use of the
// buffer-allocation-profile leaf.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/unicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/input/*/unicast-buffer-allocation-profile"
func (n *Qos_Interface_InputPathAny) UnicastBufferAllocationProfile() *Qos_Interface_Input_UnicastBufferAllocationProfilePathAny {
	ps := &Qos_Interface_Input_UnicastBufferAllocationProfilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "unicast-buffer-allocation-profile"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VoqInterfaceAny (list): List of egress interfaces for which a virtual output
// queue is instantiated at this interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "virtual-output-queues/voq-interface"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface"
func (n *Qos_Interface_InputPath) VoqInterfaceAny() *Qos_Interface_Input_VoqInterfacePathAny {
	ps := &Qos_Interface_Input_VoqInterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"virtual-output-queues", "voq-interface"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// VoqInterfaceAny (list): List of egress interfaces for which a virtual output
// queue is instantiated at this interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "virtual-output-queues/voq-interface"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface"
func (n *Qos_Interface_InputPathAny) VoqInterfaceAny() *Qos_Interface_Input_VoqInterfacePathAny {
	ps := &Qos_Interface_Input_VoqInterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"virtual-output-queues", "voq-interface"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// VoqInterface (list): List of egress interfaces for which a virtual output
// queue is instantiated at this interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "virtual-output-queues/voq-interface"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface"
//
//	Name: string
func (n *Qos_Interface_InputPath) VoqInterface(Name string) *Qos_Interface_Input_VoqInterfacePath {
	ps := &Qos_Interface_Input_VoqInterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"virtual-output-queues", "voq-interface"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// VoqInterface (list): List of egress interfaces for which a virtual output
// queue is instantiated at this interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "virtual-output-queues/voq-interface"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface"
//
//	Name: string
func (n *Qos_Interface_InputPathAny) VoqInterface(Name string) *Qos_Interface_Input_VoqInterfacePathAny {
	ps := &Qos_Interface_Input_VoqInterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"virtual-output-queues", "voq-interface"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// VoqInterfaceMap (list): List of egress interfaces for which a virtual output
// queue is instantiated at this interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "virtual-output-queues/voq-interface"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface"
func (n *Qos_Interface_InputPath) VoqInterfaceMap() *Qos_Interface_Input_VoqInterfacePathMap {
	ps := &Qos_Interface_Input_VoqInterfacePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"virtual-output-queues"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// VoqInterfaceMap (list): List of egress interfaces for which a virtual output
// queue is instantiated at this interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "virtual-output-queues/voq-interface"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface"
func (n *Qos_Interface_InputPathAny) VoqInterfaceMap() *Qos_Interface_Input_VoqInterfacePathMapAny {
	ps := &Qos_Interface_Input_VoqInterfacePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"virtual-output-queues"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_InputPath) State() ygnmi.SingletonQuery[*oc.Qos_Interface_Input] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Interface_Input](
		"Qos_Interface_Input",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_InputPathAny) State() ygnmi.WildcardQuery[*oc.Qos_Interface_Input] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_Input](
		"Qos_Interface_Input",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_InputPath) Config() ygnmi.ConfigQuery[*oc.Qos_Interface_Input] {
	return ygnmi.NewConfigQuery[*oc.Qos_Interface_Input](
		"Qos_Interface_Input",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_InputPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Interface_Input] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_Input](
		"Qos_Interface_Input",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_Classifier_NamePath represents the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier/state/name YANG schema element.
type Qos_Interface_Input_Classifier_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_Classifier_NamePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier/state/name YANG schema element.
type Qos_Interface_Input_Classifier_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/state/name"
func (n *Qos_Interface_Input_Classifier_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Interface_Input_Classifier",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Classifier).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/state/name"
func (n *Qos_Interface_Input_Classifier_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Input_Classifier",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Classifier).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/config/name"
func (n *Qos_Interface_Input_Classifier_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Interface_Input_Classifier",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Classifier).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/config/name"
func (n *Qos_Interface_Input_Classifier_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Input_Classifier",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Classifier).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_Classifier_TypePath represents the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier/state/type YANG schema element.
type Qos_Interface_Input_Classifier_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_Classifier_TypePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier/state/type YANG schema element.
type Qos_Interface_Input_Classifier_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/type"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/state/type"
func (n *Qos_Interface_Input_Classifier_TypePath) State() ygnmi.SingletonQuery[oc.E_Input_Classifier_Type] {
	return ygnmi.NewSingletonQuery[oc.E_Input_Classifier_Type](
		"Qos_Interface_Input_Classifier",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Input_Classifier_Type, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Classifier).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/type"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/state/type"
func (n *Qos_Interface_Input_Classifier_TypePathAny) State() ygnmi.WildcardQuery[oc.E_Input_Classifier_Type] {
	return ygnmi.NewWildcardQuery[oc.E_Input_Classifier_Type](
		"Qos_Interface_Input_Classifier",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Input_Classifier_Type, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Classifier).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/type"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/config/type"
func (n *Qos_Interface_Input_Classifier_TypePath) Config() ygnmi.ConfigQuery[oc.E_Input_Classifier_Type] {
	return ygnmi.NewConfigQuery[oc.E_Input_Classifier_Type](
		"Qos_Interface_Input_Classifier",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Input_Classifier_Type, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Classifier).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/type"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/config/type"
func (n *Qos_Interface_Input_Classifier_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_Input_Classifier_Type] {
	return ygnmi.NewWildcardQuery[oc.E_Input_Classifier_Type](
		"Qos_Interface_Input_Classifier",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Input_Classifier_Type, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Classifier).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_ClassifierPath represents the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier YANG schema element.
type Qos_Interface_Input_ClassifierPath struct {
	*ygnmi.NodePath
}

// Qos_Interface_Input_ClassifierPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier YANG schema element.
type Qos_Interface_Input_ClassifierPathAny struct {
	*ygnmi.NodePath
}

// Qos_Interface_Input_ClassifierPathMap represents the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier YANG schema element.
type Qos_Interface_Input_ClassifierPathMap struct {
	*ygnmi.NodePath
}

// Qos_Interface_Input_ClassifierPathMapAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier YANG schema element.
type Qos_Interface_Input_ClassifierPathMapAny struct {
	*ygnmi.NodePath
}

// Name (leaf): Reference to the classifier to be applied to ingress traffic on
// the interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/*/name"
func (n *Qos_Interface_Input_ClassifierPath) Name() *Qos_Interface_Input_Classifier_NamePath {
	ps := &Qos_Interface_Input_Classifier_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Reference to the classifier to be applied to ingress traffic on
// the interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/*/name"
func (n *Qos_Interface_Input_ClassifierPathAny) Name() *Qos_Interface_Input_Classifier_NamePathAny {
	ps := &Qos_Interface_Input_Classifier_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TermAny (list): List of match terms in the classifier associated with the
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "terms/term"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/terms/term"
func (n *Qos_Interface_Input_ClassifierPath) TermAny() *Qos_Interface_Input_Classifier_TermPathAny {
	ps := &Qos_Interface_Input_Classifier_TermPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"terms", "term"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// TermAny (list): List of match terms in the classifier associated with the
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "terms/term"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/terms/term"
func (n *Qos_Interface_Input_ClassifierPathAny) TermAny() *Qos_Interface_Input_Classifier_TermPathAny {
	ps := &Qos_Interface_Input_Classifier_TermPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"terms", "term"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// Term (list): List of match terms in the classifier associated with the
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "terms/term"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/terms/term"
//
//	Id: string
func (n *Qos_Interface_Input_ClassifierPath) Term(Id string) *Qos_Interface_Input_Classifier_TermPath {
	ps := &Qos_Interface_Input_Classifier_TermPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"terms", "term"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// Term (list): List of match terms in the classifier associated with the
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "terms/term"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/terms/term"
//
//	Id: string
func (n *Qos_Interface_Input_ClassifierPathAny) Term(Id string) *Qos_Interface_Input_Classifier_TermPathAny {
	ps := &Qos_Interface_Input_Classifier_TermPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"terms", "term"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// TermMap (list): List of match terms in the classifier associated with the
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "terms/term"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/terms/term"
func (n *Qos_Interface_Input_ClassifierPath) TermMap() *Qos_Interface_Input_Classifier_TermPathMap {
	ps := &Qos_Interface_Input_Classifier_TermPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"terms"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TermMap (list): List of match terms in the classifier associated with the
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "terms/term"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/terms/term"
func (n *Qos_Interface_Input_ClassifierPathAny) TermMap() *Qos_Interface_Input_Classifier_TermPathMapAny {
	ps := &Qos_Interface_Input_Classifier_TermPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"terms"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Type (leaf): Type of packets matched by the classifier.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/type"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/*/type"
func (n *Qos_Interface_Input_ClassifierPath) Type() *Qos_Interface_Input_Classifier_TypePath {
	ps := &Qos_Interface_Input_Classifier_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Type of packets matched by the classifier.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/type"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/*/type"
func (n *Qos_Interface_Input_ClassifierPathAny) Type() *Qos_Interface_Input_Classifier_TypePathAny {
	ps := &Qos_Interface_Input_Classifier_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_ClassifierPath) State() ygnmi.SingletonQuery[*oc.Qos_Interface_Input_Classifier] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Interface_Input_Classifier](
		"Qos_Interface_Input_Classifier",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_ClassifierPathAny) State() ygnmi.WildcardQuery[*oc.Qos_Interface_Input_Classifier] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_Input_Classifier](
		"Qos_Interface_Input_Classifier",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_ClassifierPath) Config() ygnmi.ConfigQuery[*oc.Qos_Interface_Input_Classifier] {
	return ygnmi.NewConfigQuery[*oc.Qos_Interface_Input_Classifier](
		"Qos_Interface_Input_Classifier",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_ClassifierPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Interface_Input_Classifier] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_Input_Classifier](
		"Qos_Interface_Input_Classifier",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_ClassifierPathMap) State() ygnmi.SingletonQuery[map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Input_Classifier] {
	return ygnmi.NewSingletonQuery[map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Input_Classifier](
		"Qos_Interface_Input",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Input_Classifier, bool) {
			ret := gs.(*oc.Qos_Interface_Input).Classifier
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:classifiers"},
			PostRelPath: []string{"openconfig-qos:classifier"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_ClassifierPathMapAny) State() ygnmi.WildcardQuery[map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Input_Classifier] {
	return ygnmi.NewWildcardQuery[map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Input_Classifier](
		"Qos_Interface_Input",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Input_Classifier, bool) {
			ret := gs.(*oc.Qos_Interface_Input).Classifier
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:classifiers"},
			PostRelPath: []string{"openconfig-qos:classifier"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_ClassifierPathMap) Config() ygnmi.ConfigQuery[map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Input_Classifier] {
	return ygnmi.NewConfigQuery[map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Input_Classifier](
		"Qos_Interface_Input",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Input_Classifier, bool) {
			ret := gs.(*oc.Qos_Interface_Input).Classifier
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:classifiers"},
			PostRelPath: []string{"openconfig-qos:classifier"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_ClassifierPathMapAny) Config() ygnmi.WildcardQuery[map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Input_Classifier] {
	return ygnmi.NewWildcardQuery[map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Input_Classifier](
		"Qos_Interface_Input",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Input_Classifier, bool) {
			ret := gs.(*oc.Qos_Interface_Input).Classifier
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:classifiers"},
			PostRelPath: []string{"openconfig-qos:classifier"},
		},
	)
}

// Qos_Interface_Input_Classifier_Term_IdPath represents the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier/terms/term/state/id YANG schema element.
type Qos_Interface_Input_Classifier_Term_IdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_Classifier_Term_IdPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier/terms/term/state/id YANG schema element.
type Qos_Interface_Input_Classifier_Term_IdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/id"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/terms/term/state/id"
func (n *Qos_Interface_Input_Classifier_Term_IdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Interface_Input_Classifier_Term",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Classifier_Term).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Classifier_Term) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/id"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/terms/term/state/id"
func (n *Qos_Interface_Input_Classifier_Term_IdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Input_Classifier_Term",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Classifier_Term).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Classifier_Term) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "id"
//	Path from root:       ""
func (n *Qos_Interface_Input_Classifier_Term_IdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Interface_Input_Classifier_Term",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Classifier_Term).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Classifier_Term) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "id"
//	Path from root:       ""
func (n *Qos_Interface_Input_Classifier_Term_IdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Input_Classifier_Term",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Classifier_Term).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Classifier_Term) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_Classifier_Term_MatchedOctetsPath represents the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier/terms/term/state/matched-octets YANG schema element.
type Qos_Interface_Input_Classifier_Term_MatchedOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_Classifier_Term_MatchedOctetsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier/terms/term/state/matched-octets YANG schema element.
type Qos_Interface_Input_Classifier_Term_MatchedOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/terms/term/state/matched-octets"
func (n *Qos_Interface_Input_Classifier_Term_MatchedOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Input_Classifier_Term",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Classifier_Term).MatchedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Classifier_Term) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/terms/term/state/matched-octets"
func (n *Qos_Interface_Input_Classifier_Term_MatchedOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Input_Classifier_Term",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Classifier_Term).MatchedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Classifier_Term) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_Classifier_Term_MatchedPacketsPath represents the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier/terms/term/state/matched-packets YANG schema element.
type Qos_Interface_Input_Classifier_Term_MatchedPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_Classifier_Term_MatchedPacketsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier/terms/term/state/matched-packets YANG schema element.
type Qos_Interface_Input_Classifier_Term_MatchedPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/matched-packets"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/terms/term/state/matched-packets"
func (n *Qos_Interface_Input_Classifier_Term_MatchedPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Input_Classifier_Term",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Classifier_Term).MatchedPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Classifier_Term) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/matched-packets"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/terms/term/state/matched-packets"
func (n *Qos_Interface_Input_Classifier_Term_MatchedPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Input_Classifier_Term",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Classifier_Term).MatchedPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Classifier_Term) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_Classifier_TermPath represents the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier/terms/term YANG schema element.
type Qos_Interface_Input_Classifier_TermPath struct {
	*ygnmi.NodePath
}

// Qos_Interface_Input_Classifier_TermPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier/terms/term YANG schema element.
type Qos_Interface_Input_Classifier_TermPathAny struct {
	*ygnmi.NodePath
}

// Qos_Interface_Input_Classifier_TermPathMap represents the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier/terms/term YANG schema element.
type Qos_Interface_Input_Classifier_TermPathMap struct {
	*ygnmi.NodePath
}

// Qos_Interface_Input_Classifier_TermPathMapAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier/terms/term YANG schema element.
type Qos_Interface_Input_Classifier_TermPathMapAny struct {
	*ygnmi.NodePath
}

// Id (leaf): Reference to match terms in the classifier
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/id"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/terms/term/*/id"
func (n *Qos_Interface_Input_Classifier_TermPath) Id() *Qos_Interface_Input_Classifier_Term_IdPath {
	ps := &Qos_Interface_Input_Classifier_Term_IdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): Reference to match terms in the classifier
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/id"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/terms/term/*/id"
func (n *Qos_Interface_Input_Classifier_TermPathAny) Id() *Qos_Interface_Input_Classifier_Term_IdPathAny {
	ps := &Qos_Interface_Input_Classifier_Term_IdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchedOctets (leaf): Count of the number of octets (bytes) matching this
// classifier match term on the interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/terms/term/state/matched-octets"
func (n *Qos_Interface_Input_Classifier_TermPath) MatchedOctets() *Qos_Interface_Input_Classifier_Term_MatchedOctetsPath {
	ps := &Qos_Interface_Input_Classifier_Term_MatchedOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchedOctets (leaf): Count of the number of octets (bytes) matching this
// classifier match term on the interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/terms/term/state/matched-octets"
func (n *Qos_Interface_Input_Classifier_TermPathAny) MatchedOctets() *Qos_Interface_Input_Classifier_Term_MatchedOctetsPathAny {
	ps := &Qos_Interface_Input_Classifier_Term_MatchedOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchedPackets (leaf): Count of the number of packets matching this classifier
// match term on the interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/matched-packets"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/terms/term/state/matched-packets"
func (n *Qos_Interface_Input_Classifier_TermPath) MatchedPackets() *Qos_Interface_Input_Classifier_Term_MatchedPacketsPath {
	ps := &Qos_Interface_Input_Classifier_Term_MatchedPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchedPackets (leaf): Count of the number of packets matching this classifier
// match term on the interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/matched-packets"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/terms/term/state/matched-packets"
func (n *Qos_Interface_Input_Classifier_TermPathAny) MatchedPackets() *Qos_Interface_Input_Classifier_Term_MatchedPacketsPathAny {
	ps := &Qos_Interface_Input_Classifier_Term_MatchedPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_Classifier_TermPath) State() ygnmi.SingletonQuery[*oc.Qos_Interface_Input_Classifier_Term] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Interface_Input_Classifier_Term](
		"Qos_Interface_Input_Classifier_Term",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_Classifier_TermPathAny) State() ygnmi.WildcardQuery[*oc.Qos_Interface_Input_Classifier_Term] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_Input_Classifier_Term](
		"Qos_Interface_Input_Classifier_Term",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_Classifier_TermPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Qos_Interface_Input_Classifier_Term] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Qos_Interface_Input_Classifier_Term](
		"Qos_Interface_Input_Classifier",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Interface_Input_Classifier_Term, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Classifier).Term
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:terms"},
			PostRelPath: []string{"openconfig-qos:term"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_Classifier_TermPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Qos_Interface_Input_Classifier_Term] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_Interface_Input_Classifier_Term](
		"Qos_Interface_Input_Classifier",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Interface_Input_Classifier_Term, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Classifier).Term
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:terms"},
			PostRelPath: []string{"openconfig-qos:term"},
		},
	)
}

// Qos_Interface_Input_Queue_AvgQueueLenPath represents the /openconfig-qos/qos/interfaces/interface/input/queues/queue/state/avg-queue-len YANG schema element.
type Qos_Interface_Input_Queue_AvgQueueLenPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_Queue_AvgQueueLenPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/queues/queue/state/avg-queue-len YANG schema element.
type Qos_Interface_Input_Queue_AvgQueueLenPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/avg-queue-len"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/avg-queue-len"
func (n *Qos_Interface_Input_Queue_AvgQueueLenPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Input_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "avg-queue-len"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Queue).AvgQueueLen
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/avg-queue-len"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/avg-queue-len"
func (n *Qos_Interface_Input_Queue_AvgQueueLenPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Input_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "avg-queue-len"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Queue).AvgQueueLen
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_Queue_DroppedOctetsPath represents the /openconfig-qos/qos/interfaces/interface/input/queues/queue/state/dropped-octets YANG schema element.
type Qos_Interface_Input_Queue_DroppedOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_Queue_DroppedOctetsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/queues/queue/state/dropped-octets YANG schema element.
type Qos_Interface_Input_Queue_DroppedOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dropped-octets"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/dropped-octets"
func (n *Qos_Interface_Input_Queue_DroppedOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Input_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dropped-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Queue).DroppedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dropped-octets"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/dropped-octets"
func (n *Qos_Interface_Input_Queue_DroppedOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Input_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dropped-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Queue).DroppedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_Queue_DroppedPktsPath represents the /openconfig-qos/qos/interfaces/interface/input/queues/queue/state/dropped-pkts YANG schema element.
type Qos_Interface_Input_Queue_DroppedPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_Queue_DroppedPktsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/queues/queue/state/dropped-pkts YANG schema element.
type Qos_Interface_Input_Queue_DroppedPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dropped-pkts"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/dropped-pkts"
func (n *Qos_Interface_Input_Queue_DroppedPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Input_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dropped-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Queue).DroppedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dropped-pkts"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/dropped-pkts"
func (n *Qos_Interface_Input_Queue_DroppedPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Input_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dropped-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Queue).DroppedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_Queue_EcnMarkedOctetsPath represents the /openconfig-qos/qos/interfaces/interface/input/queues/queue/state/ecn-marked-octets YANG schema element.
type Qos_Interface_Input_Queue_EcnMarkedOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_Queue_EcnMarkedOctetsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/queues/queue/state/ecn-marked-octets YANG schema element.
type Qos_Interface_Input_Queue_EcnMarkedOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-marked-octets"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/ecn-marked-octets"
func (n *Qos_Interface_Input_Queue_EcnMarkedOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Input_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ecn-marked-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Queue).EcnMarkedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-marked-octets"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/ecn-marked-octets"
func (n *Qos_Interface_Input_Queue_EcnMarkedOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Input_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ecn-marked-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Queue).EcnMarkedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_Queue_EcnMarkedPktsPath represents the /openconfig-qos/qos/interfaces/interface/input/queues/queue/state/ecn-marked-pkts YANG schema element.
type Qos_Interface_Input_Queue_EcnMarkedPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_Queue_EcnMarkedPktsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/queues/queue/state/ecn-marked-pkts YANG schema element.
type Qos_Interface_Input_Queue_EcnMarkedPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-marked-pkts"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/ecn-marked-pkts"
func (n *Qos_Interface_Input_Queue_EcnMarkedPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Input_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ecn-marked-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Queue).EcnMarkedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-marked-pkts"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/ecn-marked-pkts"
func (n *Qos_Interface_Input_Queue_EcnMarkedPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Input_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ecn-marked-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Queue).EcnMarkedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_Queue_EcnSelectedOctetsPath represents the /openconfig-qos/qos/interfaces/interface/input/queues/queue/state/ecn-selected-octets YANG schema element.
type Qos_Interface_Input_Queue_EcnSelectedOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_Queue_EcnSelectedOctetsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/queues/queue/state/ecn-selected-octets YANG schema element.
type Qos_Interface_Input_Queue_EcnSelectedOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-selected-octets"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/ecn-selected-octets"
func (n *Qos_Interface_Input_Queue_EcnSelectedOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Input_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ecn-selected-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Queue).EcnSelectedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-selected-octets"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/ecn-selected-octets"
func (n *Qos_Interface_Input_Queue_EcnSelectedOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Input_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ecn-selected-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Queue).EcnSelectedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_Queue_EcnSelectedPktsPath represents the /openconfig-qos/qos/interfaces/interface/input/queues/queue/state/ecn-selected-pkts YANG schema element.
type Qos_Interface_Input_Queue_EcnSelectedPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_Queue_EcnSelectedPktsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/queues/queue/state/ecn-selected-pkts YANG schema element.
type Qos_Interface_Input_Queue_EcnSelectedPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-selected-pkts"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/ecn-selected-pkts"
func (n *Qos_Interface_Input_Queue_EcnSelectedPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Input_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ecn-selected-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Queue).EcnSelectedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-selected-pkts"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/ecn-selected-pkts"
func (n *Qos_Interface_Input_Queue_EcnSelectedPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Input_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ecn-selected-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Queue).EcnSelectedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_Queue_MaxQueueLenPath represents the /openconfig-qos/qos/interfaces/interface/input/queues/queue/state/max-queue-len YANG schema element.
type Qos_Interface_Input_Queue_MaxQueueLenPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_Queue_MaxQueueLenPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/queues/queue/state/max-queue-len YANG schema element.
type Qos_Interface_Input_Queue_MaxQueueLenPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-queue-len"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/max-queue-len"
func (n *Qos_Interface_Input_Queue_MaxQueueLenPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Input_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-queue-len"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Queue).MaxQueueLen
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-queue-len"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/max-queue-len"
func (n *Qos_Interface_Input_Queue_MaxQueueLenPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Input_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-queue-len"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Queue).MaxQueueLen
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_Queue_NamePath represents the /openconfig-qos/qos/interfaces/interface/input/queues/queue/state/name YANG schema element.
type Qos_Interface_Input_Queue_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_Queue_NamePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/queues/queue/state/name YANG schema element.
type Qos_Interface_Input_Queue_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/name"
func (n *Qos_Interface_Input_Queue_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Interface_Input_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Queue).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/name"
func (n *Qos_Interface_Input_Queue_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Input_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Queue).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/config/name"
func (n *Qos_Interface_Input_Queue_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Interface_Input_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Queue).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/config/name"
func (n *Qos_Interface_Input_Queue_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Input_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Queue).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_Queue_QueueManagementProfilePath represents the /openconfig-qos/qos/interfaces/interface/input/queues/queue/state/queue-management-profile YANG schema element.
type Qos_Interface_Input_Queue_QueueManagementProfilePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_Queue_QueueManagementProfilePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/queues/queue/state/queue-management-profile YANG schema element.
type Qos_Interface_Input_Queue_QueueManagementProfilePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/queue-management-profile"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/queue-management-profile"
func (n *Qos_Interface_Input_Queue_QueueManagementProfilePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Interface_Input_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "queue-management-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Queue).QueueManagementProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/queue-management-profile"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/queue-management-profile"
func (n *Qos_Interface_Input_Queue_QueueManagementProfilePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Input_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "queue-management-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Queue).QueueManagementProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/queue-management-profile"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/config/queue-management-profile"
func (n *Qos_Interface_Input_Queue_QueueManagementProfilePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Interface_Input_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "queue-management-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Queue).QueueManagementProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/queue-management-profile"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/config/queue-management-profile"
func (n *Qos_Interface_Input_Queue_QueueManagementProfilePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Input_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "queue-management-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Queue).QueueManagementProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_Queue_TransmitOctetsPath represents the /openconfig-qos/qos/interfaces/interface/input/queues/queue/state/transmit-octets YANG schema element.
type Qos_Interface_Input_Queue_TransmitOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_Queue_TransmitOctetsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/queues/queue/state/transmit-octets YANG schema element.
type Qos_Interface_Input_Queue_TransmitOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/transmit-octets"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/transmit-octets"
func (n *Qos_Interface_Input_Queue_TransmitOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Input_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "transmit-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Queue).TransmitOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/transmit-octets"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/transmit-octets"
func (n *Qos_Interface_Input_Queue_TransmitOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Input_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "transmit-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Queue).TransmitOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_Queue_TransmitPktsPath represents the /openconfig-qos/qos/interfaces/interface/input/queues/queue/state/transmit-pkts YANG schema element.
type Qos_Interface_Input_Queue_TransmitPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_Queue_TransmitPktsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/queues/queue/state/transmit-pkts YANG schema element.
type Qos_Interface_Input_Queue_TransmitPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/transmit-pkts"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/transmit-pkts"
func (n *Qos_Interface_Input_Queue_TransmitPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Input_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "transmit-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Queue).TransmitPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/transmit-pkts"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/transmit-pkts"
func (n *Qos_Interface_Input_Queue_TransmitPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Input_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "transmit-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Queue).TransmitPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_QueuePath represents the /openconfig-qos/qos/interfaces/interface/input/queues/queue YANG schema element.
type Qos_Interface_Input_QueuePath struct {
	*ygnmi.NodePath
}

// Qos_Interface_Input_QueuePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/queues/queue YANG schema element.
type Qos_Interface_Input_QueuePathAny struct {
	*ygnmi.NodePath
}

// Qos_Interface_Input_QueuePathMap represents the /openconfig-qos/qos/interfaces/interface/input/queues/queue YANG schema element.
type Qos_Interface_Input_QueuePathMap struct {
	*ygnmi.NodePath
}

// Qos_Interface_Input_QueuePathMapAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/queues/queue YANG schema element.
type Qos_Interface_Input_QueuePathMapAny struct {
	*ygnmi.NodePath
}

// AvgQueueLen (leaf): Average observed queue length
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/avg-queue-len"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/avg-queue-len"
func (n *Qos_Interface_Input_QueuePath) AvgQueueLen() *Qos_Interface_Input_Queue_AvgQueueLenPath {
	ps := &Qos_Interface_Input_Queue_AvgQueueLenPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "avg-queue-len"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AvgQueueLen (leaf): Average observed queue length
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/avg-queue-len"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/avg-queue-len"
func (n *Qos_Interface_Input_QueuePathAny) AvgQueueLen() *Qos_Interface_Input_Queue_AvgQueueLenPathAny {
	ps := &Qos_Interface_Input_Queue_AvgQueueLenPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "avg-queue-len"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DroppedOctets (leaf): Number of octets dropped by the queue due to overrun, that is tail-drop
// or AMQ (RED, WRED, etc) induced drops as indicated by the attached
// queue-management-profile
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dropped-octets"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/dropped-octets"
func (n *Qos_Interface_Input_QueuePath) DroppedOctets() *Qos_Interface_Input_Queue_DroppedOctetsPath {
	ps := &Qos_Interface_Input_Queue_DroppedOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dropped-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DroppedOctets (leaf): Number of octets dropped by the queue due to overrun, that is tail-drop
// or AMQ (RED, WRED, etc) induced drops as indicated by the attached
// queue-management-profile
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dropped-octets"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/dropped-octets"
func (n *Qos_Interface_Input_QueuePathAny) DroppedOctets() *Qos_Interface_Input_Queue_DroppedOctetsPathAny {
	ps := &Qos_Interface_Input_Queue_DroppedOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dropped-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DroppedPkts (leaf): Number of packets dropped by the queue due to overrun, that is tail-drop
// or AMQ (RED, WRED, etc) induced drops as indicated by the attached
// queue-management-profile
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dropped-pkts"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/dropped-pkts"
func (n *Qos_Interface_Input_QueuePath) DroppedPkts() *Qos_Interface_Input_Queue_DroppedPktsPath {
	ps := &Qos_Interface_Input_Queue_DroppedPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dropped-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DroppedPkts (leaf): Number of packets dropped by the queue due to overrun, that is tail-drop
// or AMQ (RED, WRED, etc) induced drops as indicated by the attached
// queue-management-profile
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dropped-pkts"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/dropped-pkts"
func (n *Qos_Interface_Input_QueuePathAny) DroppedPkts() *Qos_Interface_Input_Queue_DroppedPktsPathAny {
	ps := &Qos_Interface_Input_Queue_DroppedPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dropped-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcnMarkedOctets (leaf): Number of octets for which ECN codepoint has been changed from ECT to CE
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-marked-octets"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/ecn-marked-octets"
func (n *Qos_Interface_Input_QueuePath) EcnMarkedOctets() *Qos_Interface_Input_Queue_EcnMarkedOctetsPath {
	ps := &Qos_Interface_Input_Queue_EcnMarkedOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ecn-marked-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcnMarkedOctets (leaf): Number of octets for which ECN codepoint has been changed from ECT to CE
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-marked-octets"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/ecn-marked-octets"
func (n *Qos_Interface_Input_QueuePathAny) EcnMarkedOctets() *Qos_Interface_Input_Queue_EcnMarkedOctetsPathAny {
	ps := &Qos_Interface_Input_Queue_EcnMarkedOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ecn-marked-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcnMarkedPkts (leaf): number of packets for which ECN codepoint has been changed from ECT to CE
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-marked-pkts"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/ecn-marked-pkts"
func (n *Qos_Interface_Input_QueuePath) EcnMarkedPkts() *Qos_Interface_Input_Queue_EcnMarkedPktsPath {
	ps := &Qos_Interface_Input_Queue_EcnMarkedPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ecn-marked-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcnMarkedPkts (leaf): number of packets for which ECN codepoint has been changed from ECT to CE
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-marked-pkts"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/ecn-marked-pkts"
func (n *Qos_Interface_Input_QueuePathAny) EcnMarkedPkts() *Qos_Interface_Input_Queue_EcnMarkedPktsPathAny {
	ps := &Qos_Interface_Input_Queue_EcnMarkedPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ecn-marked-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcnSelectedOctets (leaf): Number of octets of packets selected by AQM
//
// For RED/WRED AQM this counter counts:
// - all octets enqueued while queue utilization was greater then max-threshold
// - octets enqueued while queue utilization was between min-threshold and max-threshold, with probability derived from RED/WRED slope
//
// Octets are counted regardless of its ECN codepoint
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-selected-octets"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/ecn-selected-octets"
func (n *Qos_Interface_Input_QueuePath) EcnSelectedOctets() *Qos_Interface_Input_Queue_EcnSelectedOctetsPath {
	ps := &Qos_Interface_Input_Queue_EcnSelectedOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ecn-selected-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcnSelectedOctets (leaf): Number of octets of packets selected by AQM
//
// For RED/WRED AQM this counter counts:
// - all octets enqueued while queue utilization was greater then max-threshold
// - octets enqueued while queue utilization was between min-threshold and max-threshold, with probability derived from RED/WRED slope
//
// Octets are counted regardless of its ECN codepoint
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-selected-octets"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/ecn-selected-octets"
func (n *Qos_Interface_Input_QueuePathAny) EcnSelectedOctets() *Qos_Interface_Input_Queue_EcnSelectedOctetsPathAny {
	ps := &Qos_Interface_Input_Queue_EcnSelectedOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ecn-selected-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcnSelectedPkts (leaf): Number of packets selected by AQM
//
// For RED/WRED AQM this counter counts:
// - all packets enqueued while queue utilization was greater then max-threshold
// - packs enqueued while queue utilization was between min-threshold and max-threshold, with probability derived from RED/WRED slope
//
// Packets are counted regardless of its ECN codepoint
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-selected-pkts"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/ecn-selected-pkts"
func (n *Qos_Interface_Input_QueuePath) EcnSelectedPkts() *Qos_Interface_Input_Queue_EcnSelectedPktsPath {
	ps := &Qos_Interface_Input_Queue_EcnSelectedPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ecn-selected-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcnSelectedPkts (leaf): Number of packets selected by AQM
//
// For RED/WRED AQM this counter counts:
// - all packets enqueued while queue utilization was greater then max-threshold
// - packs enqueued while queue utilization was between min-threshold and max-threshold, with probability derived from RED/WRED slope
//
// Packets are counted regardless of its ECN codepoint
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-selected-pkts"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/ecn-selected-pkts"
func (n *Qos_Interface_Input_QueuePathAny) EcnSelectedPkts() *Qos_Interface_Input_Queue_EcnSelectedPktsPathAny {
	ps := &Qos_Interface_Input_Queue_EcnSelectedPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ecn-selected-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxQueueLen (leaf): Maximum observed queue length
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-queue-len"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/max-queue-len"
func (n *Qos_Interface_Input_QueuePath) MaxQueueLen() *Qos_Interface_Input_Queue_MaxQueueLenPath {
	ps := &Qos_Interface_Input_Queue_MaxQueueLenPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "max-queue-len"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxQueueLen (leaf): Maximum observed queue length
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-queue-len"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/max-queue-len"
func (n *Qos_Interface_Input_QueuePathAny) MaxQueueLen() *Qos_Interface_Input_Queue_MaxQueueLenPathAny {
	ps := &Qos_Interface_Input_Queue_MaxQueueLenPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "max-queue-len"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Reference to the queue associated with this interface.
// A queue may be explicitly configured, or implicitly created
// by the system based on default queues that are instantiated
// by a hardware component, or are assumed to be default on
// the system.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/*/name"
func (n *Qos_Interface_Input_QueuePath) Name() *Qos_Interface_Input_Queue_NamePath {
	ps := &Qos_Interface_Input_Queue_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Reference to the queue associated with this interface.
// A queue may be explicitly configured, or implicitly created
// by the system based on default queues that are instantiated
// by a hardware component, or are assumed to be default on
// the system.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/*/name"
func (n *Qos_Interface_Input_QueuePathAny) Name() *Qos_Interface_Input_Queue_NamePathAny {
	ps := &Qos_Interface_Input_Queue_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// QueueManagementProfile (leaf): The queue management profile that is to be used for the queue
// on the interface.
//
// For example, the system may use a profile which specifies that
// WRED curves are used for setting an ECN mark in the IP header
// instead of dropping a packet in order to signal impending
// congestion and for determining when there is sufficient
// congestion to tail drop packets.
//
// A single profile is available per queue - which applies to all packets
// that are enqueued to the specified queue, whether they are unicast or
// multicast.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/queue-management-profile"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/*/queue-management-profile"
func (n *Qos_Interface_Input_QueuePath) QueueManagementProfile() *Qos_Interface_Input_Queue_QueueManagementProfilePath {
	ps := &Qos_Interface_Input_Queue_QueueManagementProfilePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "queue-management-profile"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// QueueManagementProfile (leaf): The queue management profile that is to be used for the queue
// on the interface.
//
// For example, the system may use a profile which specifies that
// WRED curves are used for setting an ECN mark in the IP header
// instead of dropping a packet in order to signal impending
// congestion and for determining when there is sufficient
// congestion to tail drop packets.
//
// A single profile is available per queue - which applies to all packets
// that are enqueued to the specified queue, whether they are unicast or
// multicast.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/queue-management-profile"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/*/queue-management-profile"
func (n *Qos_Interface_Input_QueuePathAny) QueueManagementProfile() *Qos_Interface_Input_Queue_QueueManagementProfilePathAny {
	ps := &Qos_Interface_Input_Queue_QueueManagementProfilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "queue-management-profile"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TransmitOctets (leaf): Number of octets trasmitted by this queue
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/transmit-octets"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/transmit-octets"
func (n *Qos_Interface_Input_QueuePath) TransmitOctets() *Qos_Interface_Input_Queue_TransmitOctetsPath {
	ps := &Qos_Interface_Input_Queue_TransmitOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "transmit-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TransmitOctets (leaf): Number of octets trasmitted by this queue
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/transmit-octets"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/transmit-octets"
func (n *Qos_Interface_Input_QueuePathAny) TransmitOctets() *Qos_Interface_Input_Queue_TransmitOctetsPathAny {
	ps := &Qos_Interface_Input_Queue_TransmitOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "transmit-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TransmitPkts (leaf): Number of packets transmitted by this queue
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/transmit-pkts"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/transmit-pkts"
func (n *Qos_Interface_Input_QueuePath) TransmitPkts() *Qos_Interface_Input_Queue_TransmitPktsPath {
	ps := &Qos_Interface_Input_Queue_TransmitPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "transmit-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TransmitPkts (leaf): Number of packets transmitted by this queue
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/transmit-pkts"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/transmit-pkts"
func (n *Qos_Interface_Input_QueuePathAny) TransmitPkts() *Qos_Interface_Input_Queue_TransmitPktsPathAny {
	ps := &Qos_Interface_Input_Queue_TransmitPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "transmit-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_QueuePath) State() ygnmi.SingletonQuery[*oc.Qos_Interface_Input_Queue] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Interface_Input_Queue](
		"Qos_Interface_Input_Queue",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_QueuePathAny) State() ygnmi.WildcardQuery[*oc.Qos_Interface_Input_Queue] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_Input_Queue](
		"Qos_Interface_Input_Queue",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_QueuePath) Config() ygnmi.ConfigQuery[*oc.Qos_Interface_Input_Queue] {
	return ygnmi.NewConfigQuery[*oc.Qos_Interface_Input_Queue](
		"Qos_Interface_Input_Queue",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_QueuePathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Interface_Input_Queue] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_Input_Queue](
		"Qos_Interface_Input_Queue",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_QueuePathMap) State() ygnmi.SingletonQuery[map[string]*oc.Qos_Interface_Input_Queue] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Qos_Interface_Input_Queue](
		"Qos_Interface_Input",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Interface_Input_Queue, bool) {
			ret := gs.(*oc.Qos_Interface_Input).Queue
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queues"},
			PostRelPath: []string{"openconfig-qos:queue"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_QueuePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Qos_Interface_Input_Queue] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_Interface_Input_Queue](
		"Qos_Interface_Input",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Interface_Input_Queue, bool) {
			ret := gs.(*oc.Qos_Interface_Input).Queue
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queues"},
			PostRelPath: []string{"openconfig-qos:queue"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_QueuePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Qos_Interface_Input_Queue] {
	return ygnmi.NewConfigQuery[map[string]*oc.Qos_Interface_Input_Queue](
		"Qos_Interface_Input",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Interface_Input_Queue, bool) {
			ret := gs.(*oc.Qos_Interface_Input).Queue
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queues"},
			PostRelPath: []string{"openconfig-qos:queue"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_QueuePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Qos_Interface_Input_Queue] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_Interface_Input_Queue](
		"Qos_Interface_Input",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Interface_Input_Queue, bool) {
			ret := gs.(*oc.Qos_Interface_Input).Queue
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queues"},
			PostRelPath: []string{"openconfig-qos:queue"},
		},
	)
}

// Qos_Interface_Input_SchedulerPolicy_NamePath represents the /openconfig-qos/qos/interfaces/interface/input/scheduler-policy/state/name YANG schema element.
type Qos_Interface_Input_SchedulerPolicy_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_SchedulerPolicy_NamePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/scheduler-policy/state/name YANG schema element.
type Qos_Interface_Input_SchedulerPolicy_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy/state/name"
func (n *Qos_Interface_Input_SchedulerPolicy_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Interface_Input_SchedulerPolicy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input_SchedulerPolicy).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_SchedulerPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy/state/name"
func (n *Qos_Interface_Input_SchedulerPolicy_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Input_SchedulerPolicy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input_SchedulerPolicy).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_SchedulerPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy/config/name"
func (n *Qos_Interface_Input_SchedulerPolicy_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Interface_Input_SchedulerPolicy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input_SchedulerPolicy).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_SchedulerPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy/config/name"
func (n *Qos_Interface_Input_SchedulerPolicy_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Input_SchedulerPolicy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input_SchedulerPolicy).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_SchedulerPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_SchedulerPolicyPath represents the /openconfig-qos/qos/interfaces/interface/input/scheduler-policy YANG schema element.
type Qos_Interface_Input_SchedulerPolicyPath struct {
	*ygnmi.NodePath
}

// Qos_Interface_Input_SchedulerPolicyPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/scheduler-policy YANG schema element.
type Qos_Interface_Input_SchedulerPolicyPathAny struct {
	*ygnmi.NodePath
}

// Name (leaf): The scheduler policy to be applied to traffic on this interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy/*/name"
func (n *Qos_Interface_Input_SchedulerPolicyPath) Name() *Qos_Interface_Input_SchedulerPolicy_NamePath {
	ps := &Qos_Interface_Input_SchedulerPolicy_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): The scheduler policy to be applied to traffic on this interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy/*/name"
func (n *Qos_Interface_Input_SchedulerPolicyPathAny) Name() *Qos_Interface_Input_SchedulerPolicy_NamePathAny {
	ps := &Qos_Interface_Input_SchedulerPolicy_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SchedulerAny (list): List of the schedulers that are part of the scheduler-policy
// specified.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "schedulers/scheduler"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler"
func (n *Qos_Interface_Input_SchedulerPolicyPath) SchedulerAny() *Qos_Interface_Input_SchedulerPolicy_SchedulerPathAny {
	ps := &Qos_Interface_Input_SchedulerPolicy_SchedulerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"schedulers", "scheduler"},
			map[string]interface{}{"sequence": "*"},
			n,
		),
	}
	return ps
}

// SchedulerAny (list): List of the schedulers that are part of the scheduler-policy
// specified.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "schedulers/scheduler"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler"
func (n *Qos_Interface_Input_SchedulerPolicyPathAny) SchedulerAny() *Qos_Interface_Input_SchedulerPolicy_SchedulerPathAny {
	ps := &Qos_Interface_Input_SchedulerPolicy_SchedulerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"schedulers", "scheduler"},
			map[string]interface{}{"sequence": "*"},
			n,
		),
	}
	return ps
}

// Scheduler (list): List of the schedulers that are part of the scheduler-policy
// specified.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "schedulers/scheduler"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler"
//
//	Sequence: uint32
func (n *Qos_Interface_Input_SchedulerPolicyPath) Scheduler(Sequence uint32) *Qos_Interface_Input_SchedulerPolicy_SchedulerPath {
	ps := &Qos_Interface_Input_SchedulerPolicy_SchedulerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"schedulers", "scheduler"},
			map[string]interface{}{"sequence": Sequence},
			n,
		),
	}
	return ps
}

// Scheduler (list): List of the schedulers that are part of the scheduler-policy
// specified.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "schedulers/scheduler"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler"
//
//	Sequence: uint32
func (n *Qos_Interface_Input_SchedulerPolicyPathAny) Scheduler(Sequence uint32) *Qos_Interface_Input_SchedulerPolicy_SchedulerPathAny {
	ps := &Qos_Interface_Input_SchedulerPolicy_SchedulerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"schedulers", "scheduler"},
			map[string]interface{}{"sequence": Sequence},
			n,
		),
	}
	return ps
}

// SchedulerMap (list): List of the schedulers that are part of the scheduler-policy
// specified.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "schedulers/scheduler"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler"
func (n *Qos_Interface_Input_SchedulerPolicyPath) SchedulerMap() *Qos_Interface_Input_SchedulerPolicy_SchedulerPathMap {
	ps := &Qos_Interface_Input_SchedulerPolicy_SchedulerPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"schedulers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SchedulerMap (list): List of the schedulers that are part of the scheduler-policy
// specified.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "schedulers/scheduler"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler"
func (n *Qos_Interface_Input_SchedulerPolicyPathAny) SchedulerMap() *Qos_Interface_Input_SchedulerPolicy_SchedulerPathMapAny {
	ps := &Qos_Interface_Input_SchedulerPolicy_SchedulerPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"schedulers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_SchedulerPolicyPath) State() ygnmi.SingletonQuery[*oc.Qos_Interface_Input_SchedulerPolicy] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Interface_Input_SchedulerPolicy](
		"Qos_Interface_Input_SchedulerPolicy",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_SchedulerPolicyPathAny) State() ygnmi.WildcardQuery[*oc.Qos_Interface_Input_SchedulerPolicy] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_Input_SchedulerPolicy](
		"Qos_Interface_Input_SchedulerPolicy",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_SchedulerPolicyPath) Config() ygnmi.ConfigQuery[*oc.Qos_Interface_Input_SchedulerPolicy] {
	return ygnmi.NewConfigQuery[*oc.Qos_Interface_Input_SchedulerPolicy](
		"Qos_Interface_Input_SchedulerPolicy",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_SchedulerPolicyPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Interface_Input_SchedulerPolicy] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_Input_SchedulerPolicy](
		"Qos_Interface_Input_SchedulerPolicy",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_SchedulerPolicy_Scheduler_ConformingOctetsPath represents the /openconfig-qos/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/conforming-octets YANG schema element.
type Qos_Interface_Input_SchedulerPolicy_Scheduler_ConformingOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_SchedulerPolicy_Scheduler_ConformingOctetsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/conforming-octets YANG schema element.
type Qos_Interface_Input_SchedulerPolicy_Scheduler_ConformingOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/conforming-octets"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/conforming-octets"
func (n *Qos_Interface_Input_SchedulerPolicy_Scheduler_ConformingOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Input_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "conforming-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_SchedulerPolicy_Scheduler).ConformingOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/conforming-octets"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/conforming-octets"
func (n *Qos_Interface_Input_SchedulerPolicy_Scheduler_ConformingOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Input_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "conforming-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_SchedulerPolicy_Scheduler).ConformingOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_SchedulerPolicy_Scheduler_ConformingPktsPath represents the /openconfig-qos/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/conforming-pkts YANG schema element.
type Qos_Interface_Input_SchedulerPolicy_Scheduler_ConformingPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_SchedulerPolicy_Scheduler_ConformingPktsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/conforming-pkts YANG schema element.
type Qos_Interface_Input_SchedulerPolicy_Scheduler_ConformingPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/conforming-pkts"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/conforming-pkts"
func (n *Qos_Interface_Input_SchedulerPolicy_Scheduler_ConformingPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Input_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "conforming-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_SchedulerPolicy_Scheduler).ConformingPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/conforming-pkts"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/conforming-pkts"
func (n *Qos_Interface_Input_SchedulerPolicy_Scheduler_ConformingPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Input_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "conforming-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_SchedulerPolicy_Scheduler).ConformingPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_SchedulerPolicy_Scheduler_ExceedingOctetsPath represents the /openconfig-qos/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/exceeding-octets YANG schema element.
type Qos_Interface_Input_SchedulerPolicy_Scheduler_ExceedingOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_SchedulerPolicy_Scheduler_ExceedingOctetsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/exceeding-octets YANG schema element.
type Qos_Interface_Input_SchedulerPolicy_Scheduler_ExceedingOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/exceeding-octets"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/exceeding-octets"
func (n *Qos_Interface_Input_SchedulerPolicy_Scheduler_ExceedingOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Input_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "exceeding-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_SchedulerPolicy_Scheduler).ExceedingOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/exceeding-octets"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/exceeding-octets"
func (n *Qos_Interface_Input_SchedulerPolicy_Scheduler_ExceedingOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Input_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "exceeding-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_SchedulerPolicy_Scheduler).ExceedingOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_SchedulerPolicy_Scheduler_ExceedingPktsPath represents the /openconfig-qos/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/exceeding-pkts YANG schema element.
type Qos_Interface_Input_SchedulerPolicy_Scheduler_ExceedingPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_SchedulerPolicy_Scheduler_ExceedingPktsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/exceeding-pkts YANG schema element.
type Qos_Interface_Input_SchedulerPolicy_Scheduler_ExceedingPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/exceeding-pkts"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/exceeding-pkts"
func (n *Qos_Interface_Input_SchedulerPolicy_Scheduler_ExceedingPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Input_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "exceeding-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_SchedulerPolicy_Scheduler).ExceedingPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/exceeding-pkts"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/exceeding-pkts"
func (n *Qos_Interface_Input_SchedulerPolicy_Scheduler_ExceedingPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Input_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "exceeding-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_SchedulerPolicy_Scheduler).ExceedingPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_SchedulerPolicy_Scheduler_SequencePath represents the /openconfig-qos/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/sequence YANG schema element.
type Qos_Interface_Input_SchedulerPolicy_Scheduler_SequencePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_SchedulerPolicy_Scheduler_SequencePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/sequence YANG schema element.
type Qos_Interface_Input_SchedulerPolicy_Scheduler_SequencePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/sequence"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/sequence"
func (n *Qos_Interface_Input_SchedulerPolicy_Scheduler_SequencePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Qos_Interface_Input_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sequence"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_Interface_Input_SchedulerPolicy_Scheduler).Sequence
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/sequence"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/sequence"
func (n *Qos_Interface_Input_SchedulerPolicy_Scheduler_SequencePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_Interface_Input_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sequence"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_Interface_Input_SchedulerPolicy_Scheduler).Sequence
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "sequence"
//	Path from root:       ""
func (n *Qos_Interface_Input_SchedulerPolicy_Scheduler_SequencePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Qos_Interface_Input_SchedulerPolicy_Scheduler",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sequence"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_Interface_Input_SchedulerPolicy_Scheduler).Sequence
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "sequence"
//	Path from root:       ""
func (n *Qos_Interface_Input_SchedulerPolicy_Scheduler_SequencePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_Interface_Input_SchedulerPolicy_Scheduler",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sequence"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_Interface_Input_SchedulerPolicy_Scheduler).Sequence
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_SchedulerPolicy_Scheduler_ViolatingOctetsPath represents the /openconfig-qos/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/violating-octets YANG schema element.
type Qos_Interface_Input_SchedulerPolicy_Scheduler_ViolatingOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_SchedulerPolicy_Scheduler_ViolatingOctetsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/violating-octets YANG schema element.
type Qos_Interface_Input_SchedulerPolicy_Scheduler_ViolatingOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/violating-octets"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/violating-octets"
func (n *Qos_Interface_Input_SchedulerPolicy_Scheduler_ViolatingOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Input_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "violating-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_SchedulerPolicy_Scheduler).ViolatingOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/violating-octets"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/violating-octets"
func (n *Qos_Interface_Input_SchedulerPolicy_Scheduler_ViolatingOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Input_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "violating-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_SchedulerPolicy_Scheduler).ViolatingOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_SchedulerPolicy_Scheduler_ViolatingPktsPath represents the /openconfig-qos/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/violating-pkts YANG schema element.
type Qos_Interface_Input_SchedulerPolicy_Scheduler_ViolatingPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_SchedulerPolicy_Scheduler_ViolatingPktsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/violating-pkts YANG schema element.
type Qos_Interface_Input_SchedulerPolicy_Scheduler_ViolatingPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/violating-pkts"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/violating-pkts"
func (n *Qos_Interface_Input_SchedulerPolicy_Scheduler_ViolatingPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Input_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "violating-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_SchedulerPolicy_Scheduler).ViolatingPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/violating-pkts"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/violating-pkts"
func (n *Qos_Interface_Input_SchedulerPolicy_Scheduler_ViolatingPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Input_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "violating-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_SchedulerPolicy_Scheduler).ViolatingPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_SchedulerPolicy_SchedulerPath represents the /openconfig-qos/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler YANG schema element.
type Qos_Interface_Input_SchedulerPolicy_SchedulerPath struct {
	*ygnmi.NodePath
}

// Qos_Interface_Input_SchedulerPolicy_SchedulerPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler YANG schema element.
type Qos_Interface_Input_SchedulerPolicy_SchedulerPathAny struct {
	*ygnmi.NodePath
}

// Qos_Interface_Input_SchedulerPolicy_SchedulerPathMap represents the /openconfig-qos/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler YANG schema element.
type Qos_Interface_Input_SchedulerPolicy_SchedulerPathMap struct {
	*ygnmi.NodePath
}

// Qos_Interface_Input_SchedulerPolicy_SchedulerPathMapAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler YANG schema element.
type Qos_Interface_Input_SchedulerPolicy_SchedulerPathMapAny struct {
	*ygnmi.NodePath
}

// ConformingOctets (leaf): The number of octets in packets that were considered
// conforming by the scheduler.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/conforming-octets"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/conforming-octets"
func (n *Qos_Interface_Input_SchedulerPolicy_SchedulerPath) ConformingOctets() *Qos_Interface_Input_SchedulerPolicy_Scheduler_ConformingOctetsPath {
	ps := &Qos_Interface_Input_SchedulerPolicy_Scheduler_ConformingOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "conforming-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConformingOctets (leaf): The number of octets in packets that were considered
// conforming by the scheduler.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/conforming-octets"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/conforming-octets"
func (n *Qos_Interface_Input_SchedulerPolicy_SchedulerPathAny) ConformingOctets() *Qos_Interface_Input_SchedulerPolicy_Scheduler_ConformingOctetsPathAny {
	ps := &Qos_Interface_Input_SchedulerPolicy_Scheduler_ConformingOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "conforming-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConformingPkts (leaf): The number of packets that were considered conforming by
// the scheduler.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/conforming-pkts"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/conforming-pkts"
func (n *Qos_Interface_Input_SchedulerPolicy_SchedulerPath) ConformingPkts() *Qos_Interface_Input_SchedulerPolicy_Scheduler_ConformingPktsPath {
	ps := &Qos_Interface_Input_SchedulerPolicy_Scheduler_ConformingPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "conforming-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConformingPkts (leaf): The number of packets that were considered conforming by
// the scheduler.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/conforming-pkts"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/conforming-pkts"
func (n *Qos_Interface_Input_SchedulerPolicy_SchedulerPathAny) ConformingPkts() *Qos_Interface_Input_SchedulerPolicy_Scheduler_ConformingPktsPathAny {
	ps := &Qos_Interface_Input_SchedulerPolicy_Scheduler_ConformingPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "conforming-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExceedingOctets (leaf): The number of octets in packets that were considered
// exceeding by the scheduler.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/exceeding-octets"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/exceeding-octets"
func (n *Qos_Interface_Input_SchedulerPolicy_SchedulerPath) ExceedingOctets() *Qos_Interface_Input_SchedulerPolicy_Scheduler_ExceedingOctetsPath {
	ps := &Qos_Interface_Input_SchedulerPolicy_Scheduler_ExceedingOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "exceeding-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExceedingOctets (leaf): The number of octets in packets that were considered
// exceeding by the scheduler.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/exceeding-octets"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/exceeding-octets"
func (n *Qos_Interface_Input_SchedulerPolicy_SchedulerPathAny) ExceedingOctets() *Qos_Interface_Input_SchedulerPolicy_Scheduler_ExceedingOctetsPathAny {
	ps := &Qos_Interface_Input_SchedulerPolicy_Scheduler_ExceedingOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "exceeding-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExceedingPkts (leaf): The number of packets that were considered exceeding by
// the scheduler.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/exceeding-pkts"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/exceeding-pkts"
func (n *Qos_Interface_Input_SchedulerPolicy_SchedulerPath) ExceedingPkts() *Qos_Interface_Input_SchedulerPolicy_Scheduler_ExceedingPktsPath {
	ps := &Qos_Interface_Input_SchedulerPolicy_Scheduler_ExceedingPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "exceeding-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExceedingPkts (leaf): The number of packets that were considered exceeding by
// the scheduler.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/exceeding-pkts"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/exceeding-pkts"
func (n *Qos_Interface_Input_SchedulerPolicy_SchedulerPathAny) ExceedingPkts() *Qos_Interface_Input_SchedulerPolicy_Scheduler_ExceedingPktsPathAny {
	ps := &Qos_Interface_Input_SchedulerPolicy_Scheduler_ExceedingPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "exceeding-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Sequence (leaf): Reference to the sequence ID of the scheduler within
// the current scheduler policy.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/sequence"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/*/sequence"
func (n *Qos_Interface_Input_SchedulerPolicy_SchedulerPath) Sequence() *Qos_Interface_Input_SchedulerPolicy_Scheduler_SequencePath {
	ps := &Qos_Interface_Input_SchedulerPolicy_Scheduler_SequencePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sequence"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Sequence (leaf): Reference to the sequence ID of the scheduler within
// the current scheduler policy.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/sequence"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/*/sequence"
func (n *Qos_Interface_Input_SchedulerPolicy_SchedulerPathAny) Sequence() *Qos_Interface_Input_SchedulerPolicy_Scheduler_SequencePathAny {
	ps := &Qos_Interface_Input_SchedulerPolicy_Scheduler_SequencePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sequence"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ViolatingOctets (leaf): The number of octets in packets that were considered
// violating by the policer.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/violating-octets"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/violating-octets"
func (n *Qos_Interface_Input_SchedulerPolicy_SchedulerPath) ViolatingOctets() *Qos_Interface_Input_SchedulerPolicy_Scheduler_ViolatingOctetsPath {
	ps := &Qos_Interface_Input_SchedulerPolicy_Scheduler_ViolatingOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "violating-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ViolatingOctets (leaf): The number of octets in packets that were considered
// violating by the policer.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/violating-octets"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/violating-octets"
func (n *Qos_Interface_Input_SchedulerPolicy_SchedulerPathAny) ViolatingOctets() *Qos_Interface_Input_SchedulerPolicy_Scheduler_ViolatingOctetsPathAny {
	ps := &Qos_Interface_Input_SchedulerPolicy_Scheduler_ViolatingOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "violating-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ViolatingPkts (leaf): The number of packets that were considered violating by
// the policer.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/violating-pkts"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/violating-pkts"
func (n *Qos_Interface_Input_SchedulerPolicy_SchedulerPath) ViolatingPkts() *Qos_Interface_Input_SchedulerPolicy_Scheduler_ViolatingPktsPath {
	ps := &Qos_Interface_Input_SchedulerPolicy_Scheduler_ViolatingPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "violating-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ViolatingPkts (leaf): The number of packets that were considered violating by
// the policer.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/violating-pkts"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/violating-pkts"
func (n *Qos_Interface_Input_SchedulerPolicy_SchedulerPathAny) ViolatingPkts() *Qos_Interface_Input_SchedulerPolicy_Scheduler_ViolatingPktsPathAny {
	ps := &Qos_Interface_Input_SchedulerPolicy_Scheduler_ViolatingPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "violating-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_SchedulerPolicy_SchedulerPath) State() ygnmi.SingletonQuery[*oc.Qos_Interface_Input_SchedulerPolicy_Scheduler] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Interface_Input_SchedulerPolicy_Scheduler](
		"Qos_Interface_Input_SchedulerPolicy_Scheduler",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_SchedulerPolicy_SchedulerPathAny) State() ygnmi.WildcardQuery[*oc.Qos_Interface_Input_SchedulerPolicy_Scheduler] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_Input_SchedulerPolicy_Scheduler](
		"Qos_Interface_Input_SchedulerPolicy_Scheduler",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_SchedulerPolicy_SchedulerPathMap) State() ygnmi.SingletonQuery[map[uint32]*oc.Qos_Interface_Input_SchedulerPolicy_Scheduler] {
	return ygnmi.NewSingletonQuery[map[uint32]*oc.Qos_Interface_Input_SchedulerPolicy_Scheduler](
		"Qos_Interface_Input_SchedulerPolicy",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.Qos_Interface_Input_SchedulerPolicy_Scheduler, bool) {
			ret := gs.(*oc.Qos_Interface_Input_SchedulerPolicy).Scheduler
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_SchedulerPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:schedulers"},
			PostRelPath: []string{"openconfig-qos:scheduler"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_SchedulerPolicy_SchedulerPathMapAny) State() ygnmi.WildcardQuery[map[uint32]*oc.Qos_Interface_Input_SchedulerPolicy_Scheduler] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.Qos_Interface_Input_SchedulerPolicy_Scheduler](
		"Qos_Interface_Input_SchedulerPolicy",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.Qos_Interface_Input_SchedulerPolicy_Scheduler, bool) {
			ret := gs.(*oc.Qos_Interface_Input_SchedulerPolicy).Scheduler
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_SchedulerPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:schedulers"},
			PostRelPath: []string{"openconfig-qos:scheduler"},
		},
	)
}

// Qos_Interface_Input_VoqInterface_NamePath represents the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface/state/name YANG schema element.
type Qos_Interface_Input_VoqInterface_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_VoqInterface_NamePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface/state/name YANG schema element.
type Qos_Interface_Input_VoqInterface_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/state/name"
func (n *Qos_Interface_Input_VoqInterface_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Interface_Input_VoqInterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/state/name"
func (n *Qos_Interface_Input_VoqInterface_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Input_VoqInterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/config/name"
func (n *Qos_Interface_Input_VoqInterface_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Interface_Input_VoqInterface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/config/name"
func (n *Qos_Interface_Input_VoqInterface_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Input_VoqInterface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_VoqInterfacePath represents the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface YANG schema element.
type Qos_Interface_Input_VoqInterfacePath struct {
	*ygnmi.NodePath
}

// Qos_Interface_Input_VoqInterfacePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface YANG schema element.
type Qos_Interface_Input_VoqInterfacePathAny struct {
	*ygnmi.NodePath
}

// Qos_Interface_Input_VoqInterfacePathMap represents the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface YANG schema element.
type Qos_Interface_Input_VoqInterfacePathMap struct {
	*ygnmi.NodePath
}

// Qos_Interface_Input_VoqInterfacePathMapAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface YANG schema element.
type Qos_Interface_Input_VoqInterfacePathMapAny struct {
	*ygnmi.NodePath
}

// Name (leaf): Name used to refer to the egress interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/*/name"
func (n *Qos_Interface_Input_VoqInterfacePath) Name() *Qos_Interface_Input_VoqInterface_NamePath {
	ps := &Qos_Interface_Input_VoqInterface_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Name used to refer to the egress interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/*/name"
func (n *Qos_Interface_Input_VoqInterfacePathAny) Name() *Qos_Interface_Input_VoqInterface_NamePathAny {
	ps := &Qos_Interface_Input_VoqInterface_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// QueueAny (list): Top-level container for the queue associated with this
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue"
func (n *Qos_Interface_Input_VoqInterfacePath) QueueAny() *Qos_Interface_Input_VoqInterface_QueuePathAny {
	ps := &Qos_Interface_Input_VoqInterface_QueuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// QueueAny (list): Top-level container for the queue associated with this
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue"
func (n *Qos_Interface_Input_VoqInterfacePathAny) QueueAny() *Qos_Interface_Input_VoqInterface_QueuePathAny {
	ps := &Qos_Interface_Input_VoqInterface_QueuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Queue (list): Top-level container for the queue associated with this
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue"
//
//	Name: string
func (n *Qos_Interface_Input_VoqInterfacePath) Queue(Name string) *Qos_Interface_Input_VoqInterface_QueuePath {
	ps := &Qos_Interface_Input_VoqInterface_QueuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Queue (list): Top-level container for the queue associated with this
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue"
//
//	Name: string
func (n *Qos_Interface_Input_VoqInterfacePathAny) Queue(Name string) *Qos_Interface_Input_VoqInterface_QueuePathAny {
	ps := &Qos_Interface_Input_VoqInterface_QueuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// QueueMap (list): Top-level container for the queue associated with this
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue"
func (n *Qos_Interface_Input_VoqInterfacePath) QueueMap() *Qos_Interface_Input_VoqInterface_QueuePathMap {
	ps := &Qos_Interface_Input_VoqInterface_QueuePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// QueueMap (list): Top-level container for the queue associated with this
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue"
func (n *Qos_Interface_Input_VoqInterfacePathAny) QueueMap() *Qos_Interface_Input_VoqInterface_QueuePathMapAny {
	ps := &Qos_Interface_Input_VoqInterface_QueuePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_VoqInterfacePath) State() ygnmi.SingletonQuery[*oc.Qos_Interface_Input_VoqInterface] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Interface_Input_VoqInterface](
		"Qos_Interface_Input_VoqInterface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_VoqInterfacePathAny) State() ygnmi.WildcardQuery[*oc.Qos_Interface_Input_VoqInterface] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_Input_VoqInterface](
		"Qos_Interface_Input_VoqInterface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_VoqInterfacePath) Config() ygnmi.ConfigQuery[*oc.Qos_Interface_Input_VoqInterface] {
	return ygnmi.NewConfigQuery[*oc.Qos_Interface_Input_VoqInterface](
		"Qos_Interface_Input_VoqInterface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_VoqInterfacePathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Interface_Input_VoqInterface] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_Input_VoqInterface](
		"Qos_Interface_Input_VoqInterface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_VoqInterfacePathMap) State() ygnmi.SingletonQuery[map[string]*oc.Qos_Interface_Input_VoqInterface] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Qos_Interface_Input_VoqInterface](
		"Qos_Interface_Input",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Interface_Input_VoqInterface, bool) {
			ret := gs.(*oc.Qos_Interface_Input).VoqInterface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:virtual-output-queues"},
			PostRelPath: []string{"openconfig-qos:voq-interface"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_VoqInterfacePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Qos_Interface_Input_VoqInterface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_Interface_Input_VoqInterface](
		"Qos_Interface_Input",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Interface_Input_VoqInterface, bool) {
			ret := gs.(*oc.Qos_Interface_Input).VoqInterface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:virtual-output-queues"},
			PostRelPath: []string{"openconfig-qos:voq-interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_VoqInterfacePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Qos_Interface_Input_VoqInterface] {
	return ygnmi.NewConfigQuery[map[string]*oc.Qos_Interface_Input_VoqInterface](
		"Qos_Interface_Input",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Interface_Input_VoqInterface, bool) {
			ret := gs.(*oc.Qos_Interface_Input).VoqInterface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:virtual-output-queues"},
			PostRelPath: []string{"openconfig-qos:voq-interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_VoqInterfacePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Qos_Interface_Input_VoqInterface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_Interface_Input_VoqInterface](
		"Qos_Interface_Input",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Interface_Input_VoqInterface, bool) {
			ret := gs.(*oc.Qos_Interface_Input).VoqInterface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:virtual-output-queues"},
			PostRelPath: []string{"openconfig-qos:voq-interface"},
		},
	)
}

// Qos_Interface_Input_VoqInterface_Queue_AvgQueueLenPath represents the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/avg-queue-len YANG schema element.
type Qos_Interface_Input_VoqInterface_Queue_AvgQueueLenPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_VoqInterface_Queue_AvgQueueLenPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/avg-queue-len YANG schema element.
type Qos_Interface_Input_VoqInterface_Queue_AvgQueueLenPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/avg-queue-len"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/avg-queue-len"
func (n *Qos_Interface_Input_VoqInterface_Queue_AvgQueueLenPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Input_VoqInterface_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "avg-queue-len"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface_Queue).AvgQueueLen
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/avg-queue-len"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/avg-queue-len"
func (n *Qos_Interface_Input_VoqInterface_Queue_AvgQueueLenPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Input_VoqInterface_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "avg-queue-len"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface_Queue).AvgQueueLen
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_VoqInterface_Queue_DroppedOctetsPath represents the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/dropped-octets YANG schema element.
type Qos_Interface_Input_VoqInterface_Queue_DroppedOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_VoqInterface_Queue_DroppedOctetsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/dropped-octets YANG schema element.
type Qos_Interface_Input_VoqInterface_Queue_DroppedOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dropped-octets"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/dropped-octets"
func (n *Qos_Interface_Input_VoqInterface_Queue_DroppedOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Input_VoqInterface_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dropped-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface_Queue).DroppedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dropped-octets"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/dropped-octets"
func (n *Qos_Interface_Input_VoqInterface_Queue_DroppedOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Input_VoqInterface_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dropped-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface_Queue).DroppedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_VoqInterface_Queue_DroppedPktsPath represents the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/dropped-pkts YANG schema element.
type Qos_Interface_Input_VoqInterface_Queue_DroppedPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_VoqInterface_Queue_DroppedPktsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/dropped-pkts YANG schema element.
type Qos_Interface_Input_VoqInterface_Queue_DroppedPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dropped-pkts"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/dropped-pkts"
func (n *Qos_Interface_Input_VoqInterface_Queue_DroppedPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Input_VoqInterface_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dropped-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface_Queue).DroppedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dropped-pkts"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/dropped-pkts"
func (n *Qos_Interface_Input_VoqInterface_Queue_DroppedPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Input_VoqInterface_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dropped-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface_Queue).DroppedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_VoqInterface_Queue_EcnMarkedOctetsPath represents the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/ecn-marked-octets YANG schema element.
type Qos_Interface_Input_VoqInterface_Queue_EcnMarkedOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_VoqInterface_Queue_EcnMarkedOctetsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/ecn-marked-octets YANG schema element.
type Qos_Interface_Input_VoqInterface_Queue_EcnMarkedOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-marked-octets"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/ecn-marked-octets"
func (n *Qos_Interface_Input_VoqInterface_Queue_EcnMarkedOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Input_VoqInterface_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ecn-marked-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface_Queue).EcnMarkedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-marked-octets"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/ecn-marked-octets"
func (n *Qos_Interface_Input_VoqInterface_Queue_EcnMarkedOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Input_VoqInterface_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ecn-marked-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface_Queue).EcnMarkedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_VoqInterface_Queue_EcnMarkedPktsPath represents the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/ecn-marked-pkts YANG schema element.
type Qos_Interface_Input_VoqInterface_Queue_EcnMarkedPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_VoqInterface_Queue_EcnMarkedPktsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/ecn-marked-pkts YANG schema element.
type Qos_Interface_Input_VoqInterface_Queue_EcnMarkedPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-marked-pkts"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/ecn-marked-pkts"
func (n *Qos_Interface_Input_VoqInterface_Queue_EcnMarkedPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Input_VoqInterface_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ecn-marked-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface_Queue).EcnMarkedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-marked-pkts"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/ecn-marked-pkts"
func (n *Qos_Interface_Input_VoqInterface_Queue_EcnMarkedPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Input_VoqInterface_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ecn-marked-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface_Queue).EcnMarkedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_VoqInterface_Queue_EcnSelectedOctetsPath represents the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/ecn-selected-octets YANG schema element.
type Qos_Interface_Input_VoqInterface_Queue_EcnSelectedOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_VoqInterface_Queue_EcnSelectedOctetsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/ecn-selected-octets YANG schema element.
type Qos_Interface_Input_VoqInterface_Queue_EcnSelectedOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-selected-octets"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/ecn-selected-octets"
func (n *Qos_Interface_Input_VoqInterface_Queue_EcnSelectedOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Input_VoqInterface_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ecn-selected-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface_Queue).EcnSelectedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-selected-octets"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/ecn-selected-octets"
func (n *Qos_Interface_Input_VoqInterface_Queue_EcnSelectedOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Input_VoqInterface_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ecn-selected-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface_Queue).EcnSelectedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_VoqInterface_Queue_EcnSelectedPktsPath represents the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/ecn-selected-pkts YANG schema element.
type Qos_Interface_Input_VoqInterface_Queue_EcnSelectedPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_VoqInterface_Queue_EcnSelectedPktsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/ecn-selected-pkts YANG schema element.
type Qos_Interface_Input_VoqInterface_Queue_EcnSelectedPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-selected-pkts"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/ecn-selected-pkts"
func (n *Qos_Interface_Input_VoqInterface_Queue_EcnSelectedPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Input_VoqInterface_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ecn-selected-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface_Queue).EcnSelectedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-selected-pkts"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/ecn-selected-pkts"
func (n *Qos_Interface_Input_VoqInterface_Queue_EcnSelectedPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Input_VoqInterface_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ecn-selected-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface_Queue).EcnSelectedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_VoqInterface_Queue_MaxQueueLenPath represents the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/max-queue-len YANG schema element.
type Qos_Interface_Input_VoqInterface_Queue_MaxQueueLenPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_VoqInterface_Queue_MaxQueueLenPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/max-queue-len YANG schema element.
type Qos_Interface_Input_VoqInterface_Queue_MaxQueueLenPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-queue-len"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/max-queue-len"
func (n *Qos_Interface_Input_VoqInterface_Queue_MaxQueueLenPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Input_VoqInterface_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-queue-len"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface_Queue).MaxQueueLen
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-queue-len"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/max-queue-len"
func (n *Qos_Interface_Input_VoqInterface_Queue_MaxQueueLenPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Input_VoqInterface_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-queue-len"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface_Queue).MaxQueueLen
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_VoqInterface_Queue_NamePath represents the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/name YANG schema element.
type Qos_Interface_Input_VoqInterface_Queue_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_VoqInterface_Queue_NamePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/name YANG schema element.
type Qos_Interface_Input_VoqInterface_Queue_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/name"
func (n *Qos_Interface_Input_VoqInterface_Queue_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Interface_Input_VoqInterface_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface_Queue).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/name"
func (n *Qos_Interface_Input_VoqInterface_Queue_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Input_VoqInterface_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface_Queue).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/config/name"
func (n *Qos_Interface_Input_VoqInterface_Queue_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Interface_Input_VoqInterface_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface_Queue).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/config/name"
func (n *Qos_Interface_Input_VoqInterface_Queue_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Input_VoqInterface_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface_Queue).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_VoqInterface_Queue_TransmitOctetsPath represents the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/transmit-octets YANG schema element.
type Qos_Interface_Input_VoqInterface_Queue_TransmitOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_VoqInterface_Queue_TransmitOctetsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/transmit-octets YANG schema element.
type Qos_Interface_Input_VoqInterface_Queue_TransmitOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/transmit-octets"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/transmit-octets"
func (n *Qos_Interface_Input_VoqInterface_Queue_TransmitOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Input_VoqInterface_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "transmit-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface_Queue).TransmitOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/transmit-octets"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/transmit-octets"
func (n *Qos_Interface_Input_VoqInterface_Queue_TransmitOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Input_VoqInterface_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "transmit-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface_Queue).TransmitOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_VoqInterface_Queue_TransmitPktsPath represents the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/transmit-pkts YANG schema element.
type Qos_Interface_Input_VoqInterface_Queue_TransmitPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_VoqInterface_Queue_TransmitPktsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/transmit-pkts YANG schema element.
type Qos_Interface_Input_VoqInterface_Queue_TransmitPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/transmit-pkts"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/transmit-pkts"
func (n *Qos_Interface_Input_VoqInterface_Queue_TransmitPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Input_VoqInterface_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "transmit-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface_Queue).TransmitPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/transmit-pkts"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/transmit-pkts"
func (n *Qos_Interface_Input_VoqInterface_Queue_TransmitPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Input_VoqInterface_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "transmit-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface_Queue).TransmitPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_VoqInterface_QueuePath represents the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue YANG schema element.
type Qos_Interface_Input_VoqInterface_QueuePath struct {
	*ygnmi.NodePath
}

// Qos_Interface_Input_VoqInterface_QueuePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue YANG schema element.
type Qos_Interface_Input_VoqInterface_QueuePathAny struct {
	*ygnmi.NodePath
}

// Qos_Interface_Input_VoqInterface_QueuePathMap represents the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue YANG schema element.
type Qos_Interface_Input_VoqInterface_QueuePathMap struct {
	*ygnmi.NodePath
}

// Qos_Interface_Input_VoqInterface_QueuePathMapAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue YANG schema element.
type Qos_Interface_Input_VoqInterface_QueuePathMapAny struct {
	*ygnmi.NodePath
}

// AvgQueueLen (leaf): Average observed queue length
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/avg-queue-len"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/avg-queue-len"
func (n *Qos_Interface_Input_VoqInterface_QueuePath) AvgQueueLen() *Qos_Interface_Input_VoqInterface_Queue_AvgQueueLenPath {
	ps := &Qos_Interface_Input_VoqInterface_Queue_AvgQueueLenPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "avg-queue-len"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AvgQueueLen (leaf): Average observed queue length
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/avg-queue-len"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/avg-queue-len"
func (n *Qos_Interface_Input_VoqInterface_QueuePathAny) AvgQueueLen() *Qos_Interface_Input_VoqInterface_Queue_AvgQueueLenPathAny {
	ps := &Qos_Interface_Input_VoqInterface_Queue_AvgQueueLenPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "avg-queue-len"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DroppedOctets (leaf): Number of octets dropped by the queue due to overrun, that is tail-drop
// or AMQ (RED, WRED, etc) induced drops as indicated by the attached
// queue-management-profile
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dropped-octets"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/dropped-octets"
func (n *Qos_Interface_Input_VoqInterface_QueuePath) DroppedOctets() *Qos_Interface_Input_VoqInterface_Queue_DroppedOctetsPath {
	ps := &Qos_Interface_Input_VoqInterface_Queue_DroppedOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dropped-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DroppedOctets (leaf): Number of octets dropped by the queue due to overrun, that is tail-drop
// or AMQ (RED, WRED, etc) induced drops as indicated by the attached
// queue-management-profile
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dropped-octets"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/dropped-octets"
func (n *Qos_Interface_Input_VoqInterface_QueuePathAny) DroppedOctets() *Qos_Interface_Input_VoqInterface_Queue_DroppedOctetsPathAny {
	ps := &Qos_Interface_Input_VoqInterface_Queue_DroppedOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dropped-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DroppedPkts (leaf): Number of packets dropped by the queue due to overrun, that is tail-drop
// or AMQ (RED, WRED, etc) induced drops as indicated by the attached
// queue-management-profile
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dropped-pkts"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/dropped-pkts"
func (n *Qos_Interface_Input_VoqInterface_QueuePath) DroppedPkts() *Qos_Interface_Input_VoqInterface_Queue_DroppedPktsPath {
	ps := &Qos_Interface_Input_VoqInterface_Queue_DroppedPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dropped-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DroppedPkts (leaf): Number of packets dropped by the queue due to overrun, that is tail-drop
// or AMQ (RED, WRED, etc) induced drops as indicated by the attached
// queue-management-profile
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dropped-pkts"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/dropped-pkts"
func (n *Qos_Interface_Input_VoqInterface_QueuePathAny) DroppedPkts() *Qos_Interface_Input_VoqInterface_Queue_DroppedPktsPathAny {
	ps := &Qos_Interface_Input_VoqInterface_Queue_DroppedPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dropped-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcnMarkedOctets (leaf): Number of octets for which ECN codepoint has been changed from ECT to CE
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-marked-octets"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/ecn-marked-octets"
func (n *Qos_Interface_Input_VoqInterface_QueuePath) EcnMarkedOctets() *Qos_Interface_Input_VoqInterface_Queue_EcnMarkedOctetsPath {
	ps := &Qos_Interface_Input_VoqInterface_Queue_EcnMarkedOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ecn-marked-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcnMarkedOctets (leaf): Number of octets for which ECN codepoint has been changed from ECT to CE
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-marked-octets"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/ecn-marked-octets"
func (n *Qos_Interface_Input_VoqInterface_QueuePathAny) EcnMarkedOctets() *Qos_Interface_Input_VoqInterface_Queue_EcnMarkedOctetsPathAny {
	ps := &Qos_Interface_Input_VoqInterface_Queue_EcnMarkedOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ecn-marked-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcnMarkedPkts (leaf): number of packets for which ECN codepoint has been changed from ECT to CE
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-marked-pkts"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/ecn-marked-pkts"
func (n *Qos_Interface_Input_VoqInterface_QueuePath) EcnMarkedPkts() *Qos_Interface_Input_VoqInterface_Queue_EcnMarkedPktsPath {
	ps := &Qos_Interface_Input_VoqInterface_Queue_EcnMarkedPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ecn-marked-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcnMarkedPkts (leaf): number of packets for which ECN codepoint has been changed from ECT to CE
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-marked-pkts"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/ecn-marked-pkts"
func (n *Qos_Interface_Input_VoqInterface_QueuePathAny) EcnMarkedPkts() *Qos_Interface_Input_VoqInterface_Queue_EcnMarkedPktsPathAny {
	ps := &Qos_Interface_Input_VoqInterface_Queue_EcnMarkedPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ecn-marked-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcnSelectedOctets (leaf): Number of octets of packets selected by AQM
//
// For RED/WRED AQM this counter counts:
// - all octets enqueued while queue utilization was greater then max-threshold
// - octets enqueued while queue utilization was between min-threshold and max-threshold, with probability derived from RED/WRED slope
//
// Octets are counted regardless of its ECN codepoint
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-selected-octets"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/ecn-selected-octets"
func (n *Qos_Interface_Input_VoqInterface_QueuePath) EcnSelectedOctets() *Qos_Interface_Input_VoqInterface_Queue_EcnSelectedOctetsPath {
	ps := &Qos_Interface_Input_VoqInterface_Queue_EcnSelectedOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ecn-selected-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcnSelectedOctets (leaf): Number of octets of packets selected by AQM
//
// For RED/WRED AQM this counter counts:
// - all octets enqueued while queue utilization was greater then max-threshold
// - octets enqueued while queue utilization was between min-threshold and max-threshold, with probability derived from RED/WRED slope
//
// Octets are counted regardless of its ECN codepoint
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-selected-octets"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/ecn-selected-octets"
func (n *Qos_Interface_Input_VoqInterface_QueuePathAny) EcnSelectedOctets() *Qos_Interface_Input_VoqInterface_Queue_EcnSelectedOctetsPathAny {
	ps := &Qos_Interface_Input_VoqInterface_Queue_EcnSelectedOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ecn-selected-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcnSelectedPkts (leaf): Number of packets selected by AQM
//
// For RED/WRED AQM this counter counts:
// - all packets enqueued while queue utilization was greater then max-threshold
// - packs enqueued while queue utilization was between min-threshold and max-threshold, with probability derived from RED/WRED slope
//
// Packets are counted regardless of its ECN codepoint
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-selected-pkts"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/ecn-selected-pkts"
func (n *Qos_Interface_Input_VoqInterface_QueuePath) EcnSelectedPkts() *Qos_Interface_Input_VoqInterface_Queue_EcnSelectedPktsPath {
	ps := &Qos_Interface_Input_VoqInterface_Queue_EcnSelectedPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ecn-selected-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcnSelectedPkts (leaf): Number of packets selected by AQM
//
// For RED/WRED AQM this counter counts:
// - all packets enqueued while queue utilization was greater then max-threshold
// - packs enqueued while queue utilization was between min-threshold and max-threshold, with probability derived from RED/WRED slope
//
// Packets are counted regardless of its ECN codepoint
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-selected-pkts"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/ecn-selected-pkts"
func (n *Qos_Interface_Input_VoqInterface_QueuePathAny) EcnSelectedPkts() *Qos_Interface_Input_VoqInterface_Queue_EcnSelectedPktsPathAny {
	ps := &Qos_Interface_Input_VoqInterface_Queue_EcnSelectedPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ecn-selected-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxQueueLen (leaf): Maximum observed queue length
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-queue-len"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/max-queue-len"
func (n *Qos_Interface_Input_VoqInterface_QueuePath) MaxQueueLen() *Qos_Interface_Input_VoqInterface_Queue_MaxQueueLenPath {
	ps := &Qos_Interface_Input_VoqInterface_Queue_MaxQueueLenPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "max-queue-len"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxQueueLen (leaf): Maximum observed queue length
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-queue-len"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/max-queue-len"
func (n *Qos_Interface_Input_VoqInterface_QueuePathAny) MaxQueueLen() *Qos_Interface_Input_VoqInterface_Queue_MaxQueueLenPathAny {
	ps := &Qos_Interface_Input_VoqInterface_Queue_MaxQueueLenPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "max-queue-len"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Reference to the queue associated with this interface.
// A queue may be explicitly configured, or implicitly created
// by the system based on default queues that are instantiated
// by a hardware component, or are assumed to be default on
// the system.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/*/name"
func (n *Qos_Interface_Input_VoqInterface_QueuePath) Name() *Qos_Interface_Input_VoqInterface_Queue_NamePath {
	ps := &Qos_Interface_Input_VoqInterface_Queue_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Reference to the queue associated with this interface.
// A queue may be explicitly configured, or implicitly created
// by the system based on default queues that are instantiated
// by a hardware component, or are assumed to be default on
// the system.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/*/name"
func (n *Qos_Interface_Input_VoqInterface_QueuePathAny) Name() *Qos_Interface_Input_VoqInterface_Queue_NamePathAny {
	ps := &Qos_Interface_Input_VoqInterface_Queue_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TransmitOctets (leaf): Number of octets trasmitted by this queue
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/transmit-octets"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/transmit-octets"
func (n *Qos_Interface_Input_VoqInterface_QueuePath) TransmitOctets() *Qos_Interface_Input_VoqInterface_Queue_TransmitOctetsPath {
	ps := &Qos_Interface_Input_VoqInterface_Queue_TransmitOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "transmit-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TransmitOctets (leaf): Number of octets trasmitted by this queue
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/transmit-octets"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/transmit-octets"
func (n *Qos_Interface_Input_VoqInterface_QueuePathAny) TransmitOctets() *Qos_Interface_Input_VoqInterface_Queue_TransmitOctetsPathAny {
	ps := &Qos_Interface_Input_VoqInterface_Queue_TransmitOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "transmit-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TransmitPkts (leaf): Number of packets transmitted by this queue
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/transmit-pkts"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/transmit-pkts"
func (n *Qos_Interface_Input_VoqInterface_QueuePath) TransmitPkts() *Qos_Interface_Input_VoqInterface_Queue_TransmitPktsPath {
	ps := &Qos_Interface_Input_VoqInterface_Queue_TransmitPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "transmit-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TransmitPkts (leaf): Number of packets transmitted by this queue
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/transmit-pkts"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/transmit-pkts"
func (n *Qos_Interface_Input_VoqInterface_QueuePathAny) TransmitPkts() *Qos_Interface_Input_VoqInterface_Queue_TransmitPktsPathAny {
	ps := &Qos_Interface_Input_VoqInterface_Queue_TransmitPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "transmit-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_VoqInterface_QueuePath) State() ygnmi.SingletonQuery[*oc.Qos_Interface_Input_VoqInterface_Queue] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Interface_Input_VoqInterface_Queue](
		"Qos_Interface_Input_VoqInterface_Queue",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_VoqInterface_QueuePathAny) State() ygnmi.WildcardQuery[*oc.Qos_Interface_Input_VoqInterface_Queue] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_Input_VoqInterface_Queue](
		"Qos_Interface_Input_VoqInterface_Queue",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_VoqInterface_QueuePath) Config() ygnmi.ConfigQuery[*oc.Qos_Interface_Input_VoqInterface_Queue] {
	return ygnmi.NewConfigQuery[*oc.Qos_Interface_Input_VoqInterface_Queue](
		"Qos_Interface_Input_VoqInterface_Queue",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_VoqInterface_QueuePathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Interface_Input_VoqInterface_Queue] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_Input_VoqInterface_Queue](
		"Qos_Interface_Input_VoqInterface_Queue",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_VoqInterface_QueuePathMap) State() ygnmi.SingletonQuery[map[string]*oc.Qos_Interface_Input_VoqInterface_Queue] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Qos_Interface_Input_VoqInterface_Queue](
		"Qos_Interface_Input_VoqInterface",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Interface_Input_VoqInterface_Queue, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface).Queue
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queues"},
			PostRelPath: []string{"openconfig-qos:queue"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_VoqInterface_QueuePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Qos_Interface_Input_VoqInterface_Queue] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_Interface_Input_VoqInterface_Queue](
		"Qos_Interface_Input_VoqInterface",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Interface_Input_VoqInterface_Queue, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface).Queue
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queues"},
			PostRelPath: []string{"openconfig-qos:queue"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_VoqInterface_QueuePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Qos_Interface_Input_VoqInterface_Queue] {
	return ygnmi.NewConfigQuery[map[string]*oc.Qos_Interface_Input_VoqInterface_Queue](
		"Qos_Interface_Input_VoqInterface",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Interface_Input_VoqInterface_Queue, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface).Queue
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queues"},
			PostRelPath: []string{"openconfig-qos:queue"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_VoqInterface_QueuePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Qos_Interface_Input_VoqInterface_Queue] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_Interface_Input_VoqInterface_Queue](
		"Qos_Interface_Input_VoqInterface",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Interface_Input_VoqInterface_Queue, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface).Queue
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queues"},
			PostRelPath: []string{"openconfig-qos:queue"},
		},
	)
}

// Qos_Interface_InterfaceRef_InterfacePath represents the /openconfig-qos/qos/interfaces/interface/interface-ref/state/interface YANG schema element.
type Qos_Interface_InterfaceRef_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/interface-ref/state/interface YANG schema element.
type Qos_Interface_InterfaceRef_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/interface"
//	Path from root:       "/qos/interfaces/interface/interface-ref/state/interface"
func (n *Qos_Interface_InterfaceRef_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/interface"
//	Path from root:       "/qos/interfaces/interface/interface-ref/state/interface"
func (n *Qos_Interface_InterfaceRef_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/interface"
//	Path from root:       "/qos/interfaces/interface/interface-ref/config/interface"
func (n *Qos_Interface_InterfaceRef_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/interface"
//	Path from root:       "/qos/interfaces/interface/interface-ref/config/interface"
func (n *Qos_Interface_InterfaceRef_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_InterfaceRef_SubinterfacePath represents the /openconfig-qos/qos/interfaces/interface/interface-ref/state/subinterface YANG schema element.
type Qos_Interface_InterfaceRef_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/interface-ref/state/subinterface YANG schema element.
type Qos_Interface_InterfaceRef_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/qos/interfaces/interface/interface-ref/state/subinterface"
func (n *Qos_Interface_InterfaceRef_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Qos_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/qos/interfaces/interface/interface-ref/state/subinterface"
func (n *Qos_Interface_InterfaceRef_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/qos/interfaces/interface/interface-ref/config/subinterface"
func (n *Qos_Interface_InterfaceRef_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Qos_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/qos/interfaces/interface/interface-ref/config/subinterface"
func (n *Qos_Interface_InterfaceRef_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_InterfaceRefPath represents the /openconfig-qos/qos/interfaces/interface/interface-ref YANG schema element.
type Qos_Interface_InterfaceRefPath struct {
	*ygnmi.NodePath
}

// Qos_Interface_InterfaceRefPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/interface-ref YANG schema element.
type Qos_Interface_InterfaceRefPathAny struct {
	*ygnmi.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/interface"
//	Path from root:       "/qos/interfaces/interface/interface-ref/*/interface"
func (n *Qos_Interface_InterfaceRefPath) Interface() *Qos_Interface_InterfaceRef_InterfacePath {
	ps := &Qos_Interface_InterfaceRef_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/interface"
//	Path from root:       "/qos/interfaces/interface/interface-ref/*/interface"
func (n *Qos_Interface_InterfaceRefPathAny) Interface() *Qos_Interface_InterfaceRef_InterfacePathAny {
	ps := &Qos_Interface_InterfaceRef_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is required, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/qos/interfaces/interface/interface-ref/*/subinterface"
func (n *Qos_Interface_InterfaceRefPath) Subinterface() *Qos_Interface_InterfaceRef_SubinterfacePath {
	ps := &Qos_Interface_InterfaceRef_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is required, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/qos/interfaces/interface/interface-ref/*/subinterface"
func (n *Qos_Interface_InterfaceRefPathAny) Subinterface() *Qos_Interface_InterfaceRef_SubinterfacePathAny {
	ps := &Qos_Interface_InterfaceRef_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_InterfaceRefPath) State() ygnmi.SingletonQuery[*oc.Qos_Interface_InterfaceRef] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Interface_InterfaceRef](
		"Qos_Interface_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_InterfaceRefPathAny) State() ygnmi.WildcardQuery[*oc.Qos_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_InterfaceRef](
		"Qos_Interface_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_InterfaceRefPath) Config() ygnmi.ConfigQuery[*oc.Qos_Interface_InterfaceRef] {
	return ygnmi.NewConfigQuery[*oc.Qos_Interface_InterfaceRef](
		"Qos_Interface_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_InterfaceRefPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_InterfaceRef](
		"Qos_Interface_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_BufferAllocationProfilePath represents the /openconfig-qos/qos/interfaces/interface/output/state/buffer-allocation-profile YANG schema element.
type Qos_Interface_Output_BufferAllocationProfilePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_BufferAllocationProfilePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/state/buffer-allocation-profile YANG schema element.
type Qos_Interface_Output_BufferAllocationProfilePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/output/state/buffer-allocation-profile"
func (n *Qos_Interface_Output_BufferAllocationProfilePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Interface_Output",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output).BufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/output/state/buffer-allocation-profile"
func (n *Qos_Interface_Output_BufferAllocationProfilePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Output",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output).BufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/output/config/buffer-allocation-profile"
func (n *Qos_Interface_Output_BufferAllocationProfilePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Interface_Output",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output).BufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/output/config/buffer-allocation-profile"
func (n *Qos_Interface_Output_BufferAllocationProfilePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Output",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output).BufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_MulticastBufferAllocationProfilePath represents the /openconfig-qos/qos/interfaces/interface/output/state/multicast-buffer-allocation-profile YANG schema element.
type Qos_Interface_Output_MulticastBufferAllocationProfilePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_MulticastBufferAllocationProfilePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/state/multicast-buffer-allocation-profile YANG schema element.
type Qos_Interface_Output_MulticastBufferAllocationProfilePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/multicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/output/state/multicast-buffer-allocation-profile"
func (n *Qos_Interface_Output_MulticastBufferAllocationProfilePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Interface_Output",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "multicast-buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output).MulticastBufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/multicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/output/state/multicast-buffer-allocation-profile"
func (n *Qos_Interface_Output_MulticastBufferAllocationProfilePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Output",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "multicast-buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output).MulticastBufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/multicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/output/config/multicast-buffer-allocation-profile"
func (n *Qos_Interface_Output_MulticastBufferAllocationProfilePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Interface_Output",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "multicast-buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output).MulticastBufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/multicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/output/config/multicast-buffer-allocation-profile"
func (n *Qos_Interface_Output_MulticastBufferAllocationProfilePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Output",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "multicast-buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output).MulticastBufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_UnicastBufferAllocationProfilePath represents the /openconfig-qos/qos/interfaces/interface/output/state/unicast-buffer-allocation-profile YANG schema element.
type Qos_Interface_Output_UnicastBufferAllocationProfilePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_UnicastBufferAllocationProfilePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/state/unicast-buffer-allocation-profile YANG schema element.
type Qos_Interface_Output_UnicastBufferAllocationProfilePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/unicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/output/state/unicast-buffer-allocation-profile"
func (n *Qos_Interface_Output_UnicastBufferAllocationProfilePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Interface_Output",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "unicast-buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output).UnicastBufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/unicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/output/state/unicast-buffer-allocation-profile"
func (n *Qos_Interface_Output_UnicastBufferAllocationProfilePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Output",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "unicast-buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output).UnicastBufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/unicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/output/config/unicast-buffer-allocation-profile"
func (n *Qos_Interface_Output_UnicastBufferAllocationProfilePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Interface_Output",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "unicast-buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output).UnicastBufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/unicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/output/config/unicast-buffer-allocation-profile"
func (n *Qos_Interface_Output_UnicastBufferAllocationProfilePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Output",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "unicast-buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output).UnicastBufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_OutputPath represents the /openconfig-qos/qos/interfaces/interface/output YANG schema element.
type Qos_Interface_OutputPath struct {
	*ygnmi.NodePath
}

// Qos_Interface_OutputPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output YANG schema element.
type Qos_Interface_OutputPathAny struct {
	*ygnmi.NodePath
}

// BufferAllocationProfile (leaf): The buffer allocation profile that is to be used for the interface.
// This profile specifies how memory that is available to the interface
// should be allocated amongst the queues that are instantiated on the
// interface.
//
// This reference specifies the policy that should be used for memory
// allocated to the output (tx) queueing.
//
// This leaf is used in deployment cases where the operator or system
// requires common allocation profiles covering unicast and multicast
// packets.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/output/*/buffer-allocation-profile"
func (n *Qos_Interface_OutputPath) BufferAllocationProfile() *Qos_Interface_Output_BufferAllocationProfilePath {
	ps := &Qos_Interface_Output_BufferAllocationProfilePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "buffer-allocation-profile"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BufferAllocationProfile (leaf): The buffer allocation profile that is to be used for the interface.
// This profile specifies how memory that is available to the interface
// should be allocated amongst the queues that are instantiated on the
// interface.
//
// This reference specifies the policy that should be used for memory
// allocated to the output (tx) queueing.
//
// This leaf is used in deployment cases where the operator or system
// requires common allocation profiles covering unicast and multicast
// packets.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/output/*/buffer-allocation-profile"
func (n *Qos_Interface_OutputPathAny) BufferAllocationProfile() *Qos_Interface_Output_BufferAllocationProfilePathAny {
	ps := &Qos_Interface_Output_BufferAllocationProfilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "buffer-allocation-profile"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ClassifierAny (list): A list of classifiers that should be applied to the interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "classifiers/classifier"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier"
func (n *Qos_Interface_OutputPath) ClassifierAny() *Qos_Interface_Output_ClassifierPathAny {
	ps := &Qos_Interface_Output_ClassifierPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"classifiers", "classifier"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
	return ps
}

// ClassifierAny (list): A list of classifiers that should be applied to the interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "classifiers/classifier"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier"
func (n *Qos_Interface_OutputPathAny) ClassifierAny() *Qos_Interface_Output_ClassifierPathAny {
	ps := &Qos_Interface_Output_ClassifierPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"classifiers", "classifier"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
	return ps
}

// Classifier (list): A list of classifiers that should be applied to the interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "classifiers/classifier"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier"
//
//	Type: oc.E_Input_Classifier_Type
func (n *Qos_Interface_OutputPath) Classifier(Type oc.E_Input_Classifier_Type) *Qos_Interface_Output_ClassifierPath {
	ps := &Qos_Interface_Output_ClassifierPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"classifiers", "classifier"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
	return ps
}

// Classifier (list): A list of classifiers that should be applied to the interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "classifiers/classifier"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier"
//
//	Type: oc.E_Input_Classifier_Type
func (n *Qos_Interface_OutputPathAny) Classifier(Type oc.E_Input_Classifier_Type) *Qos_Interface_Output_ClassifierPathAny {
	ps := &Qos_Interface_Output_ClassifierPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"classifiers", "classifier"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
	return ps
}

// ClassifierMap (list): A list of classifiers that should be applied to the interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "classifiers/classifier"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier"
func (n *Qos_Interface_OutputPath) ClassifierMap() *Qos_Interface_Output_ClassifierPathMap {
	ps := &Qos_Interface_Output_ClassifierPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"classifiers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ClassifierMap (list): A list of classifiers that should be applied to the interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "classifiers/classifier"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier"
func (n *Qos_Interface_OutputPathAny) ClassifierMap() *Qos_Interface_Output_ClassifierPathMapAny {
	ps := &Qos_Interface_Output_ClassifierPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"classifiers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MulticastBufferAllocationProfile (leaf): The buffer allocation profile that is to be used for the interface.
// This profile specifies how memory that is available to the interface
// should be allocated amongst the queues that are instantiated on the
// interface.
//
// This reference specifies the policy that should be used for memory
// allocated to the output (tx) queueing.
//
// This buffer allocation profile applies to only multicast packets on
// the interface - if specified, the unicast-buffer-allocation-profile
// governs the allocation profile used for memory dedicated to unicast.
// If a system does not support, or an operator does not require separate
// buffer-allocation-profiles, this is specified by use of the
// buffer-allocation-profile leaf.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/multicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/output/*/multicast-buffer-allocation-profile"
func (n *Qos_Interface_OutputPath) MulticastBufferAllocationProfile() *Qos_Interface_Output_MulticastBufferAllocationProfilePath {
	ps := &Qos_Interface_Output_MulticastBufferAllocationProfilePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "multicast-buffer-allocation-profile"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MulticastBufferAllocationProfile (leaf): The buffer allocation profile that is to be used for the interface.
// This profile specifies how memory that is available to the interface
// should be allocated amongst the queues that are instantiated on the
// interface.
//
// This reference specifies the policy that should be used for memory
// allocated to the output (tx) queueing.
//
// This buffer allocation profile applies to only multicast packets on
// the interface - if specified, the unicast-buffer-allocation-profile
// governs the allocation profile used for memory dedicated to unicast.
// If a system does not support, or an operator does not require separate
// buffer-allocation-profiles, this is specified by use of the
// buffer-allocation-profile leaf.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/multicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/output/*/multicast-buffer-allocation-profile"
func (n *Qos_Interface_OutputPathAny) MulticastBufferAllocationProfile() *Qos_Interface_Output_MulticastBufferAllocationProfilePathAny {
	ps := &Qos_Interface_Output_MulticastBufferAllocationProfilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "multicast-buffer-allocation-profile"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// QueueAny (list): Top-level container for the queue associated with this
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue"
func (n *Qos_Interface_OutputPath) QueueAny() *Qos_Interface_Output_QueuePathAny {
	ps := &Qos_Interface_Output_QueuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// QueueAny (list): Top-level container for the queue associated with this
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue"
func (n *Qos_Interface_OutputPathAny) QueueAny() *Qos_Interface_Output_QueuePathAny {
	ps := &Qos_Interface_Output_QueuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Queue (list): Top-level container for the queue associated with this
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue"
//
//	Name: string
func (n *Qos_Interface_OutputPath) Queue(Name string) *Qos_Interface_Output_QueuePath {
	ps := &Qos_Interface_Output_QueuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Queue (list): Top-level container for the queue associated with this
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue"
//
//	Name: string
func (n *Qos_Interface_OutputPathAny) Queue(Name string) *Qos_Interface_Output_QueuePathAny {
	ps := &Qos_Interface_Output_QueuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// QueueMap (list): Top-level container for the queue associated with this
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue"
func (n *Qos_Interface_OutputPath) QueueMap() *Qos_Interface_Output_QueuePathMap {
	ps := &Qos_Interface_Output_QueuePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// QueueMap (list): Top-level container for the queue associated with this
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue"
func (n *Qos_Interface_OutputPathAny) QueueMap() *Qos_Interface_Output_QueuePathMapAny {
	ps := &Qos_Interface_Output_QueuePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SchedulerPolicy (container): Scheduler policy associated with the interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "scheduler-policy"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy"
func (n *Qos_Interface_OutputPath) SchedulerPolicy() *Qos_Interface_Output_SchedulerPolicyPath {
	ps := &Qos_Interface_Output_SchedulerPolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"scheduler-policy"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SchedulerPolicy (container): Scheduler policy associated with the interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "scheduler-policy"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy"
func (n *Qos_Interface_OutputPathAny) SchedulerPolicy() *Qos_Interface_Output_SchedulerPolicyPathAny {
	ps := &Qos_Interface_Output_SchedulerPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"scheduler-policy"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// UnicastBufferAllocationProfile (leaf): The buffer allocation profile that is to be used for the interface.
// This profile specifies how memory that is available to the interface
// should be allocated amongst the queues that are instantiated on the
// interface.
//
// This reference specifies the policy that should be used for memory
// allocated to the output (tx) queueing.
//
// This buffer allocation profile applies to only unicast packets on
// the interface - if specified, the multicast-buffer-allocation-profile
// governs the allocation profile used for memory dedicated to multicast.
// If a system does not support, or an operator does not require separate
// buffer-allocation-profiles, this is specified by use of the
// buffer-allocation-profile leaf.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/unicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/output/*/unicast-buffer-allocation-profile"
func (n *Qos_Interface_OutputPath) UnicastBufferAllocationProfile() *Qos_Interface_Output_UnicastBufferAllocationProfilePath {
	ps := &Qos_Interface_Output_UnicastBufferAllocationProfilePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "unicast-buffer-allocation-profile"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnicastBufferAllocationProfile (leaf): The buffer allocation profile that is to be used for the interface.
// This profile specifies how memory that is available to the interface
// should be allocated amongst the queues that are instantiated on the
// interface.
//
// This reference specifies the policy that should be used for memory
// allocated to the output (tx) queueing.
//
// This buffer allocation profile applies to only unicast packets on
// the interface - if specified, the multicast-buffer-allocation-profile
// governs the allocation profile used for memory dedicated to multicast.
// If a system does not support, or an operator does not require separate
// buffer-allocation-profiles, this is specified by use of the
// buffer-allocation-profile leaf.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/unicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/output/*/unicast-buffer-allocation-profile"
func (n *Qos_Interface_OutputPathAny) UnicastBufferAllocationProfile() *Qos_Interface_Output_UnicastBufferAllocationProfilePathAny {
	ps := &Qos_Interface_Output_UnicastBufferAllocationProfilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "unicast-buffer-allocation-profile"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_OutputPath) State() ygnmi.SingletonQuery[*oc.Qos_Interface_Output] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Interface_Output](
		"Qos_Interface_Output",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_OutputPathAny) State() ygnmi.WildcardQuery[*oc.Qos_Interface_Output] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_Output](
		"Qos_Interface_Output",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_OutputPath) Config() ygnmi.ConfigQuery[*oc.Qos_Interface_Output] {
	return ygnmi.NewConfigQuery[*oc.Qos_Interface_Output](
		"Qos_Interface_Output",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_OutputPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Interface_Output] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_Output](
		"Qos_Interface_Output",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_Classifier_NamePath represents the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier/state/name YANG schema element.
type Qos_Interface_Output_Classifier_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_Classifier_NamePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier/state/name YANG schema element.
type Qos_Interface_Output_Classifier_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/state/name"
func (n *Qos_Interface_Output_Classifier_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Interface_Output_Classifier",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Classifier).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/state/name"
func (n *Qos_Interface_Output_Classifier_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Output_Classifier",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Classifier).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/config/name"
func (n *Qos_Interface_Output_Classifier_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Interface_Output_Classifier",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Classifier).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/config/name"
func (n *Qos_Interface_Output_Classifier_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Output_Classifier",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Classifier).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_Classifier_TypePath represents the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier/state/type YANG schema element.
type Qos_Interface_Output_Classifier_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_Classifier_TypePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier/state/type YANG schema element.
type Qos_Interface_Output_Classifier_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/type"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/state/type"
func (n *Qos_Interface_Output_Classifier_TypePath) State() ygnmi.SingletonQuery[oc.E_Input_Classifier_Type] {
	return ygnmi.NewSingletonQuery[oc.E_Input_Classifier_Type](
		"Qos_Interface_Output_Classifier",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Input_Classifier_Type, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Classifier).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/type"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/state/type"
func (n *Qos_Interface_Output_Classifier_TypePathAny) State() ygnmi.WildcardQuery[oc.E_Input_Classifier_Type] {
	return ygnmi.NewWildcardQuery[oc.E_Input_Classifier_Type](
		"Qos_Interface_Output_Classifier",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Input_Classifier_Type, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Classifier).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/type"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/config/type"
func (n *Qos_Interface_Output_Classifier_TypePath) Config() ygnmi.ConfigQuery[oc.E_Input_Classifier_Type] {
	return ygnmi.NewConfigQuery[oc.E_Input_Classifier_Type](
		"Qos_Interface_Output_Classifier",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Input_Classifier_Type, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Classifier).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/type"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/config/type"
func (n *Qos_Interface_Output_Classifier_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_Input_Classifier_Type] {
	return ygnmi.NewWildcardQuery[oc.E_Input_Classifier_Type](
		"Qos_Interface_Output_Classifier",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Input_Classifier_Type, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Classifier).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_ClassifierPath represents the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier YANG schema element.
type Qos_Interface_Output_ClassifierPath struct {
	*ygnmi.NodePath
}

// Qos_Interface_Output_ClassifierPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier YANG schema element.
type Qos_Interface_Output_ClassifierPathAny struct {
	*ygnmi.NodePath
}

// Qos_Interface_Output_ClassifierPathMap represents the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier YANG schema element.
type Qos_Interface_Output_ClassifierPathMap struct {
	*ygnmi.NodePath
}

// Qos_Interface_Output_ClassifierPathMapAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier YANG schema element.
type Qos_Interface_Output_ClassifierPathMapAny struct {
	*ygnmi.NodePath
}

// Name (leaf): Reference to the classifier to be applied to ingress traffic on
// the interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/*/name"
func (n *Qos_Interface_Output_ClassifierPath) Name() *Qos_Interface_Output_Classifier_NamePath {
	ps := &Qos_Interface_Output_Classifier_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Reference to the classifier to be applied to ingress traffic on
// the interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/*/name"
func (n *Qos_Interface_Output_ClassifierPathAny) Name() *Qos_Interface_Output_Classifier_NamePathAny {
	ps := &Qos_Interface_Output_Classifier_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TermAny (list): List of match terms in the classifier associated with the
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "terms/term"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/terms/term"
func (n *Qos_Interface_Output_ClassifierPath) TermAny() *Qos_Interface_Output_Classifier_TermPathAny {
	ps := &Qos_Interface_Output_Classifier_TermPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"terms", "term"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// TermAny (list): List of match terms in the classifier associated with the
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "terms/term"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/terms/term"
func (n *Qos_Interface_Output_ClassifierPathAny) TermAny() *Qos_Interface_Output_Classifier_TermPathAny {
	ps := &Qos_Interface_Output_Classifier_TermPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"terms", "term"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// Term (list): List of match terms in the classifier associated with the
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "terms/term"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/terms/term"
//
//	Id: string
func (n *Qos_Interface_Output_ClassifierPath) Term(Id string) *Qos_Interface_Output_Classifier_TermPath {
	ps := &Qos_Interface_Output_Classifier_TermPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"terms", "term"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// Term (list): List of match terms in the classifier associated with the
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "terms/term"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/terms/term"
//
//	Id: string
func (n *Qos_Interface_Output_ClassifierPathAny) Term(Id string) *Qos_Interface_Output_Classifier_TermPathAny {
	ps := &Qos_Interface_Output_Classifier_TermPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"terms", "term"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// TermMap (list): List of match terms in the classifier associated with the
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "terms/term"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/terms/term"
func (n *Qos_Interface_Output_ClassifierPath) TermMap() *Qos_Interface_Output_Classifier_TermPathMap {
	ps := &Qos_Interface_Output_Classifier_TermPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"terms"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TermMap (list): List of match terms in the classifier associated with the
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "terms/term"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/terms/term"
func (n *Qos_Interface_Output_ClassifierPathAny) TermMap() *Qos_Interface_Output_Classifier_TermPathMapAny {
	ps := &Qos_Interface_Output_Classifier_TermPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"terms"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Type (leaf): Type of packets matched by the classifier.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/type"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/*/type"
func (n *Qos_Interface_Output_ClassifierPath) Type() *Qos_Interface_Output_Classifier_TypePath {
	ps := &Qos_Interface_Output_Classifier_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Type of packets matched by the classifier.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/type"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/*/type"
func (n *Qos_Interface_Output_ClassifierPathAny) Type() *Qos_Interface_Output_Classifier_TypePathAny {
	ps := &Qos_Interface_Output_Classifier_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_ClassifierPath) State() ygnmi.SingletonQuery[*oc.Qos_Interface_Output_Classifier] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Interface_Output_Classifier](
		"Qos_Interface_Output_Classifier",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_ClassifierPathAny) State() ygnmi.WildcardQuery[*oc.Qos_Interface_Output_Classifier] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_Output_Classifier](
		"Qos_Interface_Output_Classifier",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_ClassifierPath) Config() ygnmi.ConfigQuery[*oc.Qos_Interface_Output_Classifier] {
	return ygnmi.NewConfigQuery[*oc.Qos_Interface_Output_Classifier](
		"Qos_Interface_Output_Classifier",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_ClassifierPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Interface_Output_Classifier] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_Output_Classifier](
		"Qos_Interface_Output_Classifier",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_ClassifierPathMap) State() ygnmi.SingletonQuery[map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Output_Classifier] {
	return ygnmi.NewSingletonQuery[map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Output_Classifier](
		"Qos_Interface_Output",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Output_Classifier, bool) {
			ret := gs.(*oc.Qos_Interface_Output).Classifier
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:classifiers"},
			PostRelPath: []string{"openconfig-qos:classifier"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_ClassifierPathMapAny) State() ygnmi.WildcardQuery[map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Output_Classifier] {
	return ygnmi.NewWildcardQuery[map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Output_Classifier](
		"Qos_Interface_Output",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Output_Classifier, bool) {
			ret := gs.(*oc.Qos_Interface_Output).Classifier
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:classifiers"},
			PostRelPath: []string{"openconfig-qos:classifier"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_ClassifierPathMap) Config() ygnmi.ConfigQuery[map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Output_Classifier] {
	return ygnmi.NewConfigQuery[map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Output_Classifier](
		"Qos_Interface_Output",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Output_Classifier, bool) {
			ret := gs.(*oc.Qos_Interface_Output).Classifier
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:classifiers"},
			PostRelPath: []string{"openconfig-qos:classifier"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_ClassifierPathMapAny) Config() ygnmi.WildcardQuery[map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Output_Classifier] {
	return ygnmi.NewWildcardQuery[map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Output_Classifier](
		"Qos_Interface_Output",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Output_Classifier, bool) {
			ret := gs.(*oc.Qos_Interface_Output).Classifier
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:classifiers"},
			PostRelPath: []string{"openconfig-qos:classifier"},
		},
	)
}

// Qos_Interface_Output_Classifier_Term_IdPath represents the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier/terms/term/state/id YANG schema element.
type Qos_Interface_Output_Classifier_Term_IdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_Classifier_Term_IdPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier/terms/term/state/id YANG schema element.
type Qos_Interface_Output_Classifier_Term_IdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/id"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/terms/term/state/id"
func (n *Qos_Interface_Output_Classifier_Term_IdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Interface_Output_Classifier_Term",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Classifier_Term).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Classifier_Term) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/id"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/terms/term/state/id"
func (n *Qos_Interface_Output_Classifier_Term_IdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Output_Classifier_Term",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Classifier_Term).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Classifier_Term) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "id"
//	Path from root:       ""
func (n *Qos_Interface_Output_Classifier_Term_IdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Interface_Output_Classifier_Term",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Classifier_Term).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Classifier_Term) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "id"
//	Path from root:       ""
func (n *Qos_Interface_Output_Classifier_Term_IdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Output_Classifier_Term",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Classifier_Term).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Classifier_Term) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_Classifier_Term_MatchedOctetsPath represents the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier/terms/term/state/matched-octets YANG schema element.
type Qos_Interface_Output_Classifier_Term_MatchedOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_Classifier_Term_MatchedOctetsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier/terms/term/state/matched-octets YANG schema element.
type Qos_Interface_Output_Classifier_Term_MatchedOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/terms/term/state/matched-octets"
func (n *Qos_Interface_Output_Classifier_Term_MatchedOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Output_Classifier_Term",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Classifier_Term).MatchedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Classifier_Term) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/terms/term/state/matched-octets"
func (n *Qos_Interface_Output_Classifier_Term_MatchedOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Output_Classifier_Term",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Classifier_Term).MatchedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Classifier_Term) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_Classifier_Term_MatchedPacketsPath represents the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier/terms/term/state/matched-packets YANG schema element.
type Qos_Interface_Output_Classifier_Term_MatchedPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_Classifier_Term_MatchedPacketsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier/terms/term/state/matched-packets YANG schema element.
type Qos_Interface_Output_Classifier_Term_MatchedPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/matched-packets"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/terms/term/state/matched-packets"
func (n *Qos_Interface_Output_Classifier_Term_MatchedPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Output_Classifier_Term",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Classifier_Term).MatchedPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Classifier_Term) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/matched-packets"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/terms/term/state/matched-packets"
func (n *Qos_Interface_Output_Classifier_Term_MatchedPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Output_Classifier_Term",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Classifier_Term).MatchedPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Classifier_Term) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_Classifier_TermPath represents the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier/terms/term YANG schema element.
type Qos_Interface_Output_Classifier_TermPath struct {
	*ygnmi.NodePath
}

// Qos_Interface_Output_Classifier_TermPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier/terms/term YANG schema element.
type Qos_Interface_Output_Classifier_TermPathAny struct {
	*ygnmi.NodePath
}

// Qos_Interface_Output_Classifier_TermPathMap represents the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier/terms/term YANG schema element.
type Qos_Interface_Output_Classifier_TermPathMap struct {
	*ygnmi.NodePath
}

// Qos_Interface_Output_Classifier_TermPathMapAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier/terms/term YANG schema element.
type Qos_Interface_Output_Classifier_TermPathMapAny struct {
	*ygnmi.NodePath
}

// Id (leaf): Reference to match terms in the classifier
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/id"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/terms/term/*/id"
func (n *Qos_Interface_Output_Classifier_TermPath) Id() *Qos_Interface_Output_Classifier_Term_IdPath {
	ps := &Qos_Interface_Output_Classifier_Term_IdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): Reference to match terms in the classifier
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/id"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/terms/term/*/id"
func (n *Qos_Interface_Output_Classifier_TermPathAny) Id() *Qos_Interface_Output_Classifier_Term_IdPathAny {
	ps := &Qos_Interface_Output_Classifier_Term_IdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchedOctets (leaf): Count of the number of octets (bytes) matching this
// classifier match term on the interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/terms/term/state/matched-octets"
func (n *Qos_Interface_Output_Classifier_TermPath) MatchedOctets() *Qos_Interface_Output_Classifier_Term_MatchedOctetsPath {
	ps := &Qos_Interface_Output_Classifier_Term_MatchedOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchedOctets (leaf): Count of the number of octets (bytes) matching this
// classifier match term on the interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/terms/term/state/matched-octets"
func (n *Qos_Interface_Output_Classifier_TermPathAny) MatchedOctets() *Qos_Interface_Output_Classifier_Term_MatchedOctetsPathAny {
	ps := &Qos_Interface_Output_Classifier_Term_MatchedOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchedPackets (leaf): Count of the number of packets matching this classifier
// match term on the interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/matched-packets"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/terms/term/state/matched-packets"
func (n *Qos_Interface_Output_Classifier_TermPath) MatchedPackets() *Qos_Interface_Output_Classifier_Term_MatchedPacketsPath {
	ps := &Qos_Interface_Output_Classifier_Term_MatchedPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchedPackets (leaf): Count of the number of packets matching this classifier
// match term on the interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/matched-packets"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/terms/term/state/matched-packets"
func (n *Qos_Interface_Output_Classifier_TermPathAny) MatchedPackets() *Qos_Interface_Output_Classifier_Term_MatchedPacketsPathAny {
	ps := &Qos_Interface_Output_Classifier_Term_MatchedPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_Classifier_TermPath) State() ygnmi.SingletonQuery[*oc.Qos_Interface_Output_Classifier_Term] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Interface_Output_Classifier_Term](
		"Qos_Interface_Output_Classifier_Term",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_Classifier_TermPathAny) State() ygnmi.WildcardQuery[*oc.Qos_Interface_Output_Classifier_Term] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_Output_Classifier_Term](
		"Qos_Interface_Output_Classifier_Term",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_Classifier_TermPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Qos_Interface_Output_Classifier_Term] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Qos_Interface_Output_Classifier_Term](
		"Qos_Interface_Output_Classifier",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Interface_Output_Classifier_Term, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Classifier).Term
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:terms"},
			PostRelPath: []string{"openconfig-qos:term"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_Classifier_TermPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Qos_Interface_Output_Classifier_Term] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_Interface_Output_Classifier_Term](
		"Qos_Interface_Output_Classifier",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Interface_Output_Classifier_Term, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Classifier).Term
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:terms"},
			PostRelPath: []string{"openconfig-qos:term"},
		},
	)
}

// Qos_Interface_Output_Queue_AvgQueueLenPath represents the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/avg-queue-len YANG schema element.
type Qos_Interface_Output_Queue_AvgQueueLenPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_Queue_AvgQueueLenPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/avg-queue-len YANG schema element.
type Qos_Interface_Output_Queue_AvgQueueLenPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/avg-queue-len"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/avg-queue-len"
func (n *Qos_Interface_Output_Queue_AvgQueueLenPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "avg-queue-len"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).AvgQueueLen
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/avg-queue-len"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/avg-queue-len"
func (n *Qos_Interface_Output_Queue_AvgQueueLenPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "avg-queue-len"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).AvgQueueLen
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_Queue_DroppedOctetsPath represents the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/dropped-octets YANG schema element.
type Qos_Interface_Output_Queue_DroppedOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_Queue_DroppedOctetsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/dropped-octets YANG schema element.
type Qos_Interface_Output_Queue_DroppedOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dropped-octets"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/dropped-octets"
func (n *Qos_Interface_Output_Queue_DroppedOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dropped-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).DroppedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dropped-octets"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/dropped-octets"
func (n *Qos_Interface_Output_Queue_DroppedOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dropped-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).DroppedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_Queue_DroppedPktsPath represents the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/dropped-pkts YANG schema element.
type Qos_Interface_Output_Queue_DroppedPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_Queue_DroppedPktsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/dropped-pkts YANG schema element.
type Qos_Interface_Output_Queue_DroppedPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dropped-pkts"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/dropped-pkts"
func (n *Qos_Interface_Output_Queue_DroppedPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dropped-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).DroppedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dropped-pkts"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/dropped-pkts"
func (n *Qos_Interface_Output_Queue_DroppedPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dropped-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).DroppedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_Queue_EcnMarkedOctetsPath represents the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/ecn-marked-octets YANG schema element.
type Qos_Interface_Output_Queue_EcnMarkedOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_Queue_EcnMarkedOctetsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/ecn-marked-octets YANG schema element.
type Qos_Interface_Output_Queue_EcnMarkedOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-marked-octets"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/ecn-marked-octets"
func (n *Qos_Interface_Output_Queue_EcnMarkedOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ecn-marked-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).EcnMarkedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-marked-octets"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/ecn-marked-octets"
func (n *Qos_Interface_Output_Queue_EcnMarkedOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ecn-marked-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).EcnMarkedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_Queue_EcnMarkedPktsPath represents the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/ecn-marked-pkts YANG schema element.
type Qos_Interface_Output_Queue_EcnMarkedPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_Queue_EcnMarkedPktsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/ecn-marked-pkts YANG schema element.
type Qos_Interface_Output_Queue_EcnMarkedPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-marked-pkts"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/ecn-marked-pkts"
func (n *Qos_Interface_Output_Queue_EcnMarkedPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ecn-marked-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).EcnMarkedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-marked-pkts"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/ecn-marked-pkts"
func (n *Qos_Interface_Output_Queue_EcnMarkedPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ecn-marked-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).EcnMarkedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_Queue_EcnSelectedOctetsPath represents the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/ecn-selected-octets YANG schema element.
type Qos_Interface_Output_Queue_EcnSelectedOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_Queue_EcnSelectedOctetsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/ecn-selected-octets YANG schema element.
type Qos_Interface_Output_Queue_EcnSelectedOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-selected-octets"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/ecn-selected-octets"
func (n *Qos_Interface_Output_Queue_EcnSelectedOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ecn-selected-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).EcnSelectedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-selected-octets"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/ecn-selected-octets"
func (n *Qos_Interface_Output_Queue_EcnSelectedOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ecn-selected-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).EcnSelectedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_Queue_EcnSelectedPktsPath represents the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/ecn-selected-pkts YANG schema element.
type Qos_Interface_Output_Queue_EcnSelectedPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_Queue_EcnSelectedPktsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/ecn-selected-pkts YANG schema element.
type Qos_Interface_Output_Queue_EcnSelectedPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-selected-pkts"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/ecn-selected-pkts"
func (n *Qos_Interface_Output_Queue_EcnSelectedPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ecn-selected-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).EcnSelectedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-selected-pkts"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/ecn-selected-pkts"
func (n *Qos_Interface_Output_Queue_EcnSelectedPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ecn-selected-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).EcnSelectedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_Queue_MaxQueueLenPath represents the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/max-queue-len YANG schema element.
type Qos_Interface_Output_Queue_MaxQueueLenPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_Queue_MaxQueueLenPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/max-queue-len YANG schema element.
type Qos_Interface_Output_Queue_MaxQueueLenPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-queue-len"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/max-queue-len"
func (n *Qos_Interface_Output_Queue_MaxQueueLenPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-queue-len"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).MaxQueueLen
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-queue-len"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/max-queue-len"
func (n *Qos_Interface_Output_Queue_MaxQueueLenPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-queue-len"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).MaxQueueLen
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_Queue_NamePath represents the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/name YANG schema element.
type Qos_Interface_Output_Queue_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_Queue_NamePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/name YANG schema element.
type Qos_Interface_Output_Queue_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/name"
func (n *Qos_Interface_Output_Queue_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/name"
func (n *Qos_Interface_Output_Queue_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/config/name"
func (n *Qos_Interface_Output_Queue_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Interface_Output_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/config/name"
func (n *Qos_Interface_Output_Queue_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Output_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_Queue_QueueManagementProfilePath represents the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/queue-management-profile YANG schema element.
type Qos_Interface_Output_Queue_QueueManagementProfilePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_Queue_QueueManagementProfilePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/queue-management-profile YANG schema element.
type Qos_Interface_Output_Queue_QueueManagementProfilePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/queue-management-profile"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/queue-management-profile"
func (n *Qos_Interface_Output_Queue_QueueManagementProfilePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "queue-management-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).QueueManagementProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/queue-management-profile"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/queue-management-profile"
func (n *Qos_Interface_Output_Queue_QueueManagementProfilePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "queue-management-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).QueueManagementProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/queue-management-profile"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/config/queue-management-profile"
func (n *Qos_Interface_Output_Queue_QueueManagementProfilePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Interface_Output_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "queue-management-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).QueueManagementProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/queue-management-profile"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/config/queue-management-profile"
func (n *Qos_Interface_Output_Queue_QueueManagementProfilePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Output_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "queue-management-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).QueueManagementProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_Queue_TransmitOctetsPath represents the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/transmit-octets YANG schema element.
type Qos_Interface_Output_Queue_TransmitOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_Queue_TransmitOctetsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/transmit-octets YANG schema element.
type Qos_Interface_Output_Queue_TransmitOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/transmit-octets"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/transmit-octets"
func (n *Qos_Interface_Output_Queue_TransmitOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "transmit-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).TransmitOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/transmit-octets"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/transmit-octets"
func (n *Qos_Interface_Output_Queue_TransmitOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "transmit-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).TransmitOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_Queue_TransmitPktsPath represents the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/transmit-pkts YANG schema element.
type Qos_Interface_Output_Queue_TransmitPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_Queue_TransmitPktsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/transmit-pkts YANG schema element.
type Qos_Interface_Output_Queue_TransmitPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/transmit-pkts"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/transmit-pkts"
func (n *Qos_Interface_Output_Queue_TransmitPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "transmit-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).TransmitPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/transmit-pkts"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/transmit-pkts"
func (n *Qos_Interface_Output_Queue_TransmitPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "transmit-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).TransmitPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_QueuePath represents the /openconfig-qos/qos/interfaces/interface/output/queues/queue YANG schema element.
type Qos_Interface_Output_QueuePath struct {
	*ygnmi.NodePath
}

// Qos_Interface_Output_QueuePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/queues/queue YANG schema element.
type Qos_Interface_Output_QueuePathAny struct {
	*ygnmi.NodePath
}

// Qos_Interface_Output_QueuePathMap represents the /openconfig-qos/qos/interfaces/interface/output/queues/queue YANG schema element.
type Qos_Interface_Output_QueuePathMap struct {
	*ygnmi.NodePath
}

// Qos_Interface_Output_QueuePathMapAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/queues/queue YANG schema element.
type Qos_Interface_Output_QueuePathMapAny struct {
	*ygnmi.NodePath
}

// AvgQueueLen (leaf): Average observed queue length
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/avg-queue-len"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/avg-queue-len"
func (n *Qos_Interface_Output_QueuePath) AvgQueueLen() *Qos_Interface_Output_Queue_AvgQueueLenPath {
	ps := &Qos_Interface_Output_Queue_AvgQueueLenPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "avg-queue-len"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AvgQueueLen (leaf): Average observed queue length
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/avg-queue-len"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/avg-queue-len"
func (n *Qos_Interface_Output_QueuePathAny) AvgQueueLen() *Qos_Interface_Output_Queue_AvgQueueLenPathAny {
	ps := &Qos_Interface_Output_Queue_AvgQueueLenPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "avg-queue-len"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DroppedOctets (leaf): Number of octets dropped by the queue due to overrun, that is tail-drop
// or AMQ (RED, WRED, etc) induced drops as indicated by the attached
// queue-management-profile
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dropped-octets"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/dropped-octets"
func (n *Qos_Interface_Output_QueuePath) DroppedOctets() *Qos_Interface_Output_Queue_DroppedOctetsPath {
	ps := &Qos_Interface_Output_Queue_DroppedOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dropped-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DroppedOctets (leaf): Number of octets dropped by the queue due to overrun, that is tail-drop
// or AMQ (RED, WRED, etc) induced drops as indicated by the attached
// queue-management-profile
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dropped-octets"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/dropped-octets"
func (n *Qos_Interface_Output_QueuePathAny) DroppedOctets() *Qos_Interface_Output_Queue_DroppedOctetsPathAny {
	ps := &Qos_Interface_Output_Queue_DroppedOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dropped-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DroppedPkts (leaf): Number of packets dropped by the queue due to overrun, that is tail-drop
// or AMQ (RED, WRED, etc) induced drops as indicated by the attached
// queue-management-profile
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dropped-pkts"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/dropped-pkts"
func (n *Qos_Interface_Output_QueuePath) DroppedPkts() *Qos_Interface_Output_Queue_DroppedPktsPath {
	ps := &Qos_Interface_Output_Queue_DroppedPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dropped-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DroppedPkts (leaf): Number of packets dropped by the queue due to overrun, that is tail-drop
// or AMQ (RED, WRED, etc) induced drops as indicated by the attached
// queue-management-profile
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dropped-pkts"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/dropped-pkts"
func (n *Qos_Interface_Output_QueuePathAny) DroppedPkts() *Qos_Interface_Output_Queue_DroppedPktsPathAny {
	ps := &Qos_Interface_Output_Queue_DroppedPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dropped-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcnMarkedOctets (leaf): Number of octets for which ECN codepoint has been changed from ECT to CE
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-marked-octets"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/ecn-marked-octets"
func (n *Qos_Interface_Output_QueuePath) EcnMarkedOctets() *Qos_Interface_Output_Queue_EcnMarkedOctetsPath {
	ps := &Qos_Interface_Output_Queue_EcnMarkedOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ecn-marked-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcnMarkedOctets (leaf): Number of octets for which ECN codepoint has been changed from ECT to CE
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-marked-octets"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/ecn-marked-octets"
func (n *Qos_Interface_Output_QueuePathAny) EcnMarkedOctets() *Qos_Interface_Output_Queue_EcnMarkedOctetsPathAny {
	ps := &Qos_Interface_Output_Queue_EcnMarkedOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ecn-marked-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcnMarkedPkts (leaf): number of packets for which ECN codepoint has been changed from ECT to CE
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-marked-pkts"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/ecn-marked-pkts"
func (n *Qos_Interface_Output_QueuePath) EcnMarkedPkts() *Qos_Interface_Output_Queue_EcnMarkedPktsPath {
	ps := &Qos_Interface_Output_Queue_EcnMarkedPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ecn-marked-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcnMarkedPkts (leaf): number of packets for which ECN codepoint has been changed from ECT to CE
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-marked-pkts"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/ecn-marked-pkts"
func (n *Qos_Interface_Output_QueuePathAny) EcnMarkedPkts() *Qos_Interface_Output_Queue_EcnMarkedPktsPathAny {
	ps := &Qos_Interface_Output_Queue_EcnMarkedPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ecn-marked-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcnSelectedOctets (leaf): Number of octets of packets selected by AQM
//
// For RED/WRED AQM this counter counts:
// - all octets enqueued while queue utilization was greater then max-threshold
// - octets enqueued while queue utilization was between min-threshold and max-threshold, with probability derived from RED/WRED slope
//
// Octets are counted regardless of its ECN codepoint
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-selected-octets"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/ecn-selected-octets"
func (n *Qos_Interface_Output_QueuePath) EcnSelectedOctets() *Qos_Interface_Output_Queue_EcnSelectedOctetsPath {
	ps := &Qos_Interface_Output_Queue_EcnSelectedOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ecn-selected-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcnSelectedOctets (leaf): Number of octets of packets selected by AQM
//
// For RED/WRED AQM this counter counts:
// - all octets enqueued while queue utilization was greater then max-threshold
// - octets enqueued while queue utilization was between min-threshold and max-threshold, with probability derived from RED/WRED slope
//
// Octets are counted regardless of its ECN codepoint
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-selected-octets"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/ecn-selected-octets"
func (n *Qos_Interface_Output_QueuePathAny) EcnSelectedOctets() *Qos_Interface_Output_Queue_EcnSelectedOctetsPathAny {
	ps := &Qos_Interface_Output_Queue_EcnSelectedOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ecn-selected-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcnSelectedPkts (leaf): Number of packets selected by AQM
//
// For RED/WRED AQM this counter counts:
// - all packets enqueued while queue utilization was greater then max-threshold
// - packs enqueued while queue utilization was between min-threshold and max-threshold, with probability derived from RED/WRED slope
//
// Packets are counted regardless of its ECN codepoint
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-selected-pkts"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/ecn-selected-pkts"
func (n *Qos_Interface_Output_QueuePath) EcnSelectedPkts() *Qos_Interface_Output_Queue_EcnSelectedPktsPath {
	ps := &Qos_Interface_Output_Queue_EcnSelectedPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ecn-selected-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcnSelectedPkts (leaf): Number of packets selected by AQM
//
// For RED/WRED AQM this counter counts:
// - all packets enqueued while queue utilization was greater then max-threshold
// - packs enqueued while queue utilization was between min-threshold and max-threshold, with probability derived from RED/WRED slope
//
// Packets are counted regardless of its ECN codepoint
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-selected-pkts"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/ecn-selected-pkts"
func (n *Qos_Interface_Output_QueuePathAny) EcnSelectedPkts() *Qos_Interface_Output_Queue_EcnSelectedPktsPathAny {
	ps := &Qos_Interface_Output_Queue_EcnSelectedPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ecn-selected-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxQueueLen (leaf): Maximum observed queue length
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-queue-len"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/max-queue-len"
func (n *Qos_Interface_Output_QueuePath) MaxQueueLen() *Qos_Interface_Output_Queue_MaxQueueLenPath {
	ps := &Qos_Interface_Output_Queue_MaxQueueLenPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "max-queue-len"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxQueueLen (leaf): Maximum observed queue length
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-queue-len"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/max-queue-len"
func (n *Qos_Interface_Output_QueuePathAny) MaxQueueLen() *Qos_Interface_Output_Queue_MaxQueueLenPathAny {
	ps := &Qos_Interface_Output_Queue_MaxQueueLenPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "max-queue-len"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Reference to the queue associated with this interface.
// A queue may be explicitly configured, or implicitly created
// by the system based on default queues that are instantiated
// by a hardware component, or are assumed to be default on
// the system.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/*/name"
func (n *Qos_Interface_Output_QueuePath) Name() *Qos_Interface_Output_Queue_NamePath {
	ps := &Qos_Interface_Output_Queue_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Reference to the queue associated with this interface.
// A queue may be explicitly configured, or implicitly created
// by the system based on default queues that are instantiated
// by a hardware component, or are assumed to be default on
// the system.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/*/name"
func (n *Qos_Interface_Output_QueuePathAny) Name() *Qos_Interface_Output_Queue_NamePathAny {
	ps := &Qos_Interface_Output_Queue_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// QueueManagementProfile (leaf): The queue management profile that is to be used for the queue
// on the interface.
//
// For example, the system may use a profile which specifies that
// WRED curves are used for setting an ECN mark in the IP header
// instead of dropping a packet in order to signal impending
// congestion and for determining when there is sufficient
// congestion to tail drop packets.
//
// A single profile is available per queue - which applies to all packets
// that are enqueued to the specified queue, whether they are unicast or
// multicast.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/queue-management-profile"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/*/queue-management-profile"
func (n *Qos_Interface_Output_QueuePath) QueueManagementProfile() *Qos_Interface_Output_Queue_QueueManagementProfilePath {
	ps := &Qos_Interface_Output_Queue_QueueManagementProfilePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "queue-management-profile"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// QueueManagementProfile (leaf): The queue management profile that is to be used for the queue
// on the interface.
//
// For example, the system may use a profile which specifies that
// WRED curves are used for setting an ECN mark in the IP header
// instead of dropping a packet in order to signal impending
// congestion and for determining when there is sufficient
// congestion to tail drop packets.
//
// A single profile is available per queue - which applies to all packets
// that are enqueued to the specified queue, whether they are unicast or
// multicast.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/queue-management-profile"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/*/queue-management-profile"
func (n *Qos_Interface_Output_QueuePathAny) QueueManagementProfile() *Qos_Interface_Output_Queue_QueueManagementProfilePathAny {
	ps := &Qos_Interface_Output_Queue_QueueManagementProfilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "queue-management-profile"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TransmitOctets (leaf): Number of octets trasmitted by this queue
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/transmit-octets"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/transmit-octets"
func (n *Qos_Interface_Output_QueuePath) TransmitOctets() *Qos_Interface_Output_Queue_TransmitOctetsPath {
	ps := &Qos_Interface_Output_Queue_TransmitOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "transmit-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TransmitOctets (leaf): Number of octets trasmitted by this queue
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/transmit-octets"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/transmit-octets"
func (n *Qos_Interface_Output_QueuePathAny) TransmitOctets() *Qos_Interface_Output_Queue_TransmitOctetsPathAny {
	ps := &Qos_Interface_Output_Queue_TransmitOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "transmit-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TransmitPkts (leaf): Number of packets transmitted by this queue
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/transmit-pkts"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/transmit-pkts"
func (n *Qos_Interface_Output_QueuePath) TransmitPkts() *Qos_Interface_Output_Queue_TransmitPktsPath {
	ps := &Qos_Interface_Output_Queue_TransmitPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "transmit-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TransmitPkts (leaf): Number of packets transmitted by this queue
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/transmit-pkts"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/transmit-pkts"
func (n *Qos_Interface_Output_QueuePathAny) TransmitPkts() *Qos_Interface_Output_Queue_TransmitPktsPathAny {
	ps := &Qos_Interface_Output_Queue_TransmitPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "transmit-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_QueuePath) State() ygnmi.SingletonQuery[*oc.Qos_Interface_Output_Queue] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Interface_Output_Queue](
		"Qos_Interface_Output_Queue",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_QueuePathAny) State() ygnmi.WildcardQuery[*oc.Qos_Interface_Output_Queue] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_Output_Queue](
		"Qos_Interface_Output_Queue",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_QueuePath) Config() ygnmi.ConfigQuery[*oc.Qos_Interface_Output_Queue] {
	return ygnmi.NewConfigQuery[*oc.Qos_Interface_Output_Queue](
		"Qos_Interface_Output_Queue",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_QueuePathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Interface_Output_Queue] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_Output_Queue](
		"Qos_Interface_Output_Queue",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_QueuePathMap) State() ygnmi.SingletonQuery[map[string]*oc.Qos_Interface_Output_Queue] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Qos_Interface_Output_Queue](
		"Qos_Interface_Output",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Interface_Output_Queue, bool) {
			ret := gs.(*oc.Qos_Interface_Output).Queue
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queues"},
			PostRelPath: []string{"openconfig-qos:queue"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_QueuePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Qos_Interface_Output_Queue] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_Interface_Output_Queue](
		"Qos_Interface_Output",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Interface_Output_Queue, bool) {
			ret := gs.(*oc.Qos_Interface_Output).Queue
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queues"},
			PostRelPath: []string{"openconfig-qos:queue"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_QueuePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Qos_Interface_Output_Queue] {
	return ygnmi.NewConfigQuery[map[string]*oc.Qos_Interface_Output_Queue](
		"Qos_Interface_Output",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Interface_Output_Queue, bool) {
			ret := gs.(*oc.Qos_Interface_Output).Queue
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queues"},
			PostRelPath: []string{"openconfig-qos:queue"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_QueuePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Qos_Interface_Output_Queue] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_Interface_Output_Queue](
		"Qos_Interface_Output",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Interface_Output_Queue, bool) {
			ret := gs.(*oc.Qos_Interface_Output).Queue
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queues"},
			PostRelPath: []string{"openconfig-qos:queue"},
		},
	)
}

// Qos_Interface_Output_SchedulerPolicy_NamePath represents the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/state/name YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_SchedulerPolicy_NamePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/state/name YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/state/name"
func (n *Qos_Interface_Output_SchedulerPolicy_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Interface_Output_SchedulerPolicy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/state/name"
func (n *Qos_Interface_Output_SchedulerPolicy_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Output_SchedulerPolicy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/config/name"
func (n *Qos_Interface_Output_SchedulerPolicy_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Interface_Output_SchedulerPolicy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/config/name"
func (n *Qos_Interface_Output_SchedulerPolicy_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Output_SchedulerPolicy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_SchedulerPolicyPath represents the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy YANG schema element.
type Qos_Interface_Output_SchedulerPolicyPath struct {
	*ygnmi.NodePath
}

// Qos_Interface_Output_SchedulerPolicyPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy YANG schema element.
type Qos_Interface_Output_SchedulerPolicyPathAny struct {
	*ygnmi.NodePath
}

// Name (leaf): The scheduler policy to be applied to traffic on this interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/*/name"
func (n *Qos_Interface_Output_SchedulerPolicyPath) Name() *Qos_Interface_Output_SchedulerPolicy_NamePath {
	ps := &Qos_Interface_Output_SchedulerPolicy_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): The scheduler policy to be applied to traffic on this interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/*/name"
func (n *Qos_Interface_Output_SchedulerPolicyPathAny) Name() *Qos_Interface_Output_SchedulerPolicy_NamePathAny {
	ps := &Qos_Interface_Output_SchedulerPolicy_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SchedulerAny (list): List of the schedulers that are part of the scheduler-policy
// specified.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "schedulers/scheduler"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler"
func (n *Qos_Interface_Output_SchedulerPolicyPath) SchedulerAny() *Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny {
	ps := &Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"schedulers", "scheduler"},
			map[string]interface{}{"sequence": "*"},
			n,
		),
	}
	return ps
}

// SchedulerAny (list): List of the schedulers that are part of the scheduler-policy
// specified.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "schedulers/scheduler"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler"
func (n *Qos_Interface_Output_SchedulerPolicyPathAny) SchedulerAny() *Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny {
	ps := &Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"schedulers", "scheduler"},
			map[string]interface{}{"sequence": "*"},
			n,
		),
	}
	return ps
}

// Scheduler (list): List of the schedulers that are part of the scheduler-policy
// specified.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "schedulers/scheduler"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler"
//
//	Sequence: uint32
func (n *Qos_Interface_Output_SchedulerPolicyPath) Scheduler(Sequence uint32) *Qos_Interface_Output_SchedulerPolicy_SchedulerPath {
	ps := &Qos_Interface_Output_SchedulerPolicy_SchedulerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"schedulers", "scheduler"},
			map[string]interface{}{"sequence": Sequence},
			n,
		),
	}
	return ps
}

// Scheduler (list): List of the schedulers that are part of the scheduler-policy
// specified.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "schedulers/scheduler"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler"
//
//	Sequence: uint32
func (n *Qos_Interface_Output_SchedulerPolicyPathAny) Scheduler(Sequence uint32) *Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny {
	ps := &Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"schedulers", "scheduler"},
			map[string]interface{}{"sequence": Sequence},
			n,
		),
	}
	return ps
}

// SchedulerMap (list): List of the schedulers that are part of the scheduler-policy
// specified.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "schedulers/scheduler"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler"
func (n *Qos_Interface_Output_SchedulerPolicyPath) SchedulerMap() *Qos_Interface_Output_SchedulerPolicy_SchedulerPathMap {
	ps := &Qos_Interface_Output_SchedulerPolicy_SchedulerPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"schedulers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SchedulerMap (list): List of the schedulers that are part of the scheduler-policy
// specified.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "schedulers/scheduler"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler"
func (n *Qos_Interface_Output_SchedulerPolicyPathAny) SchedulerMap() *Qos_Interface_Output_SchedulerPolicy_SchedulerPathMapAny {
	ps := &Qos_Interface_Output_SchedulerPolicy_SchedulerPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"schedulers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_SchedulerPolicyPath) State() ygnmi.SingletonQuery[*oc.Qos_Interface_Output_SchedulerPolicy] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Interface_Output_SchedulerPolicy](
		"Qos_Interface_Output_SchedulerPolicy",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_SchedulerPolicyPathAny) State() ygnmi.WildcardQuery[*oc.Qos_Interface_Output_SchedulerPolicy] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_Output_SchedulerPolicy](
		"Qos_Interface_Output_SchedulerPolicy",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_SchedulerPolicyPath) Config() ygnmi.ConfigQuery[*oc.Qos_Interface_Output_SchedulerPolicy] {
	return ygnmi.NewConfigQuery[*oc.Qos_Interface_Output_SchedulerPolicy](
		"Qos_Interface_Output_SchedulerPolicy",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_SchedulerPolicyPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Interface_Output_SchedulerPolicy] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_Output_SchedulerPolicy](
		"Qos_Interface_Output_SchedulerPolicy",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingOctetsPath represents the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-octets YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingOctetsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-octets YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/conforming-octets"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-octets"
func (n *Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Output_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "conforming-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler).ConformingOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/conforming-octets"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-octets"
func (n *Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Output_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "conforming-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler).ConformingOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingPktsPath represents the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-pkts YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingPktsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-pkts YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/conforming-pkts"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-pkts"
func (n *Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Output_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "conforming-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler).ConformingPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/conforming-pkts"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-pkts"
func (n *Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Output_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "conforming-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler).ConformingPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingOctetsPath represents the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-octets YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingOctetsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-octets YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/exceeding-octets"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-octets"
func (n *Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Output_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "exceeding-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler).ExceedingOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/exceeding-octets"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-octets"
func (n *Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Output_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "exceeding-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler).ExceedingOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingPktsPath represents the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-pkts YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingPktsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-pkts YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/exceeding-pkts"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-pkts"
func (n *Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Output_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "exceeding-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler).ExceedingPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/exceeding-pkts"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-pkts"
func (n *Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Output_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "exceeding-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler).ExceedingPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler_SequencePath represents the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/sequence YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler_SequencePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler_SequencePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/sequence YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler_SequencePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/sequence"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/sequence"
func (n *Qos_Interface_Output_SchedulerPolicy_Scheduler_SequencePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Qos_Interface_Output_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sequence"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler).Sequence
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/sequence"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/sequence"
func (n *Qos_Interface_Output_SchedulerPolicy_Scheduler_SequencePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_Interface_Output_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sequence"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler).Sequence
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "sequence"
//	Path from root:       ""
func (n *Qos_Interface_Output_SchedulerPolicy_Scheduler_SequencePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Qos_Interface_Output_SchedulerPolicy_Scheduler",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sequence"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler).Sequence
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "sequence"
//	Path from root:       ""
func (n *Qos_Interface_Output_SchedulerPolicy_Scheduler_SequencePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_Interface_Output_SchedulerPolicy_Scheduler",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sequence"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler).Sequence
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingOctetsPath represents the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-octets YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingOctetsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-octets YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/violating-octets"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-octets"
func (n *Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Output_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "violating-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler).ViolatingOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/violating-octets"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-octets"
func (n *Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Output_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "violating-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler).ViolatingOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingPktsPath represents the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-pkts YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingPktsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-pkts YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/violating-pkts"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-pkts"
func (n *Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Output_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "violating-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler).ViolatingPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/violating-pkts"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-pkts"
func (n *Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Output_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "violating-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler).ViolatingPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_SchedulerPolicy_SchedulerPath represents the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_SchedulerPath struct {
	*ygnmi.NodePath
}

// Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny struct {
	*ygnmi.NodePath
}

// Qos_Interface_Output_SchedulerPolicy_SchedulerPathMap represents the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_SchedulerPathMap struct {
	*ygnmi.NodePath
}

// Qos_Interface_Output_SchedulerPolicy_SchedulerPathMapAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_SchedulerPathMapAny struct {
	*ygnmi.NodePath
}

// ConformingOctets (leaf): The number of octets in packets that were considered
// conforming by the scheduler.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/conforming-octets"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-octets"
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPath) ConformingOctets() *Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingOctetsPath {
	ps := &Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "conforming-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConformingOctets (leaf): The number of octets in packets that were considered
// conforming by the scheduler.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/conforming-octets"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-octets"
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny) ConformingOctets() *Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingOctetsPathAny {
	ps := &Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "conforming-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConformingPkts (leaf): The number of packets that were considered conforming by
// the scheduler.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/conforming-pkts"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-pkts"
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPath) ConformingPkts() *Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingPktsPath {
	ps := &Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "conforming-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConformingPkts (leaf): The number of packets that were considered conforming by
// the scheduler.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/conforming-pkts"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-pkts"
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny) ConformingPkts() *Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingPktsPathAny {
	ps := &Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "conforming-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExceedingOctets (leaf): The number of octets in packets that were considered
// exceeding by the scheduler.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/exceeding-octets"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-octets"
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPath) ExceedingOctets() *Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingOctetsPath {
	ps := &Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "exceeding-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExceedingOctets (leaf): The number of octets in packets that were considered
// exceeding by the scheduler.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/exceeding-octets"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-octets"
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny) ExceedingOctets() *Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingOctetsPathAny {
	ps := &Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "exceeding-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExceedingPkts (leaf): The number of packets that were considered exceeding by
// the scheduler.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/exceeding-pkts"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-pkts"
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPath) ExceedingPkts() *Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingPktsPath {
	ps := &Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "exceeding-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExceedingPkts (leaf): The number of packets that were considered exceeding by
// the scheduler.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/exceeding-pkts"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-pkts"
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny) ExceedingPkts() *Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingPktsPathAny {
	ps := &Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "exceeding-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Sequence (leaf): Reference to the sequence ID of the scheduler within
// the current scheduler policy.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/sequence"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/*/sequence"
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPath) Sequence() *Qos_Interface_Output_SchedulerPolicy_Scheduler_SequencePath {
	ps := &Qos_Interface_Output_SchedulerPolicy_Scheduler_SequencePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sequence"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Sequence (leaf): Reference to the sequence ID of the scheduler within
// the current scheduler policy.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/sequence"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/*/sequence"
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny) Sequence() *Qos_Interface_Output_SchedulerPolicy_Scheduler_SequencePathAny {
	ps := &Qos_Interface_Output_SchedulerPolicy_Scheduler_SequencePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sequence"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ViolatingOctets (leaf): The number of octets in packets that were considered
// violating by the policer.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/violating-octets"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-octets"
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPath) ViolatingOctets() *Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingOctetsPath {
	ps := &Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "violating-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ViolatingOctets (leaf): The number of octets in packets that were considered
// violating by the policer.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/violating-octets"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-octets"
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny) ViolatingOctets() *Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingOctetsPathAny {
	ps := &Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "violating-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ViolatingPkts (leaf): The number of packets that were considered violating by
// the policer.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/violating-pkts"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-pkts"
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPath) ViolatingPkts() *Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingPktsPath {
	ps := &Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "violating-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ViolatingPkts (leaf): The number of packets that were considered violating by
// the policer.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/violating-pkts"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-pkts"
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny) ViolatingPkts() *Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingPktsPathAny {
	ps := &Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "violating-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPath) State() ygnmi.SingletonQuery[*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler](
		"Qos_Interface_Output_SchedulerPolicy_Scheduler",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny) State() ygnmi.WildcardQuery[*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler](
		"Qos_Interface_Output_SchedulerPolicy_Scheduler",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPathMap) State() ygnmi.SingletonQuery[map[uint32]*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler] {
	return ygnmi.NewSingletonQuery[map[uint32]*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler](
		"Qos_Interface_Output_SchedulerPolicy",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy).Scheduler
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:schedulers"},
			PostRelPath: []string{"openconfig-qos:scheduler"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPathMapAny) State() ygnmi.WildcardQuery[map[uint32]*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler](
		"Qos_Interface_Output_SchedulerPolicy",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy).Scheduler
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:schedulers"},
			PostRelPath: []string{"openconfig-qos:scheduler"},
		},
	)
}

// Qos_Queue_NamePath represents the /openconfig-qos/qos/queues/queue/state/name YANG schema element.
type Qos_Queue_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Queue_NamePathAny represents the wildcard version of the /openconfig-qos/qos/queues/queue/state/name YANG schema element.
type Qos_Queue_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/queues/queue/state/name"
func (n *Qos_Queue_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Queue).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/queues/queue/state/name"
func (n *Qos_Queue_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Queue).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/queues/queue/config/name"
func (n *Qos_Queue_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Queue).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/queues/queue/config/name"
func (n *Qos_Queue_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Queue).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Queue_QueueIdPath represents the /openconfig-qos/qos/queues/queue/state/queue-id YANG schema element.
type Qos_Queue_QueueIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Queue_QueueIdPathAny represents the wildcard version of the /openconfig-qos/qos/queues/queue/state/queue-id YANG schema element.
type Qos_Queue_QueueIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/queue-id"
//	Path from root:       "/qos/queues/queue/state/queue-id"
func (n *Qos_Queue_QueueIdPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "queue-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Queue).QueueId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/queue-id"
//	Path from root:       "/qos/queues/queue/state/queue-id"
func (n *Qos_Queue_QueueIdPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "queue-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Queue).QueueId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/queue-id"
//	Path from root:       "/qos/queues/queue/config/queue-id"
func (n *Qos_Queue_QueueIdPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "queue-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Queue).QueueId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/queue-id"
//	Path from root:       "/qos/queues/queue/config/queue-id"
func (n *Qos_Queue_QueueIdPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "queue-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Queue).QueueId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_QueuePath represents the /openconfig-qos/qos/queues/queue YANG schema element.
type Qos_QueuePath struct {
	*ygnmi.NodePath
}

// Qos_QueuePathAny represents the wildcard version of the /openconfig-qos/qos/queues/queue YANG schema element.
type Qos_QueuePathAny struct {
	*ygnmi.NodePath
}

// Qos_QueuePathMap represents the /openconfig-qos/qos/queues/queue YANG schema element.
type Qos_QueuePathMap struct {
	*ygnmi.NodePath
}

// Qos_QueuePathMapAny represents the wildcard version of the /openconfig-qos/qos/queues/queue YANG schema element.
type Qos_QueuePathMapAny struct {
	*ygnmi.NodePath
}

// Name (leaf): User-defined name of the queue
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/queues/queue/*/name"
func (n *Qos_QueuePath) Name() *Qos_Queue_NamePath {
	ps := &Qos_Queue_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): User-defined name of the queue
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/queues/queue/*/name"
func (n *Qos_QueuePathAny) Name() *Qos_Queue_NamePathAny {
	ps := &Qos_Queue_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// QueueId (leaf): An optional identifier which may be required by some hardware to map
// the named queue to a hardware queue
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/queue-id"
//	Path from root:       "/qos/queues/queue/*/queue-id"
func (n *Qos_QueuePath) QueueId() *Qos_Queue_QueueIdPath {
	ps := &Qos_Queue_QueueIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "queue-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// QueueId (leaf): An optional identifier which may be required by some hardware to map
// the named queue to a hardware queue
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/queue-id"
//	Path from root:       "/qos/queues/queue/*/queue-id"
func (n *Qos_QueuePathAny) QueueId() *Qos_Queue_QueueIdPathAny {
	ps := &Qos_Queue_QueueIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "queue-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_QueuePath) State() ygnmi.SingletonQuery[*oc.Qos_Queue] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Queue](
		"Qos_Queue",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_QueuePathAny) State() ygnmi.WildcardQuery[*oc.Qos_Queue] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Queue](
		"Qos_Queue",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_QueuePath) Config() ygnmi.ConfigQuery[*oc.Qos_Queue] {
	return ygnmi.NewConfigQuery[*oc.Qos_Queue](
		"Qos_Queue",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_QueuePathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Queue] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Queue](
		"Qos_Queue",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_QueuePathMap) State() ygnmi.SingletonQuery[map[string]*oc.Qos_Queue] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Qos_Queue](
		"Qos",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Queue, bool) {
			ret := gs.(*oc.Qos).Queue
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queues"},
			PostRelPath: []string{"openconfig-qos:queue"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_QueuePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Qos_Queue] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_Queue](
		"Qos",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Queue, bool) {
			ret := gs.(*oc.Qos).Queue
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queues"},
			PostRelPath: []string{"openconfig-qos:queue"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_QueuePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Qos_Queue] {
	return ygnmi.NewConfigQuery[map[string]*oc.Qos_Queue](
		"Qos",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Queue, bool) {
			ret := gs.(*oc.Qos).Queue
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queues"},
			PostRelPath: []string{"openconfig-qos:queue"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_QueuePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Qos_Queue] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_Queue](
		"Qos",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Queue, bool) {
			ret := gs.(*oc.Qos).Queue
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queues"},
			PostRelPath: []string{"openconfig-qos:queue"},
		},
	)
}

// Qos_QueueManagementProfile_NamePath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/state/name YANG schema element.
type Qos_QueueManagementProfile_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_QueueManagementProfile_NamePathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/state/name YANG schema element.
type Qos_QueueManagementProfile_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/state/name"
func (n *Qos_QueueManagementProfile_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_QueueManagementProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/state/name"
func (n *Qos_QueueManagementProfile_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_QueueManagementProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/config/name"
func (n *Qos_QueueManagementProfile_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_QueueManagementProfile",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/config/name"
func (n *Qos_QueueManagementProfile_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_QueueManagementProfile",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_QueueManagementProfilePath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile YANG schema element.
type Qos_QueueManagementProfilePath struct {
	*ygnmi.NodePath
}

// Qos_QueueManagementProfilePathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile YANG schema element.
type Qos_QueueManagementProfilePathAny struct {
	*ygnmi.NodePath
}

// Qos_QueueManagementProfilePathMap represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile YANG schema element.
type Qos_QueueManagementProfilePathMap struct {
	*ygnmi.NodePath
}

// Qos_QueueManagementProfilePathMapAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile YANG schema element.
type Qos_QueueManagementProfilePathMapAny struct {
	*ygnmi.NodePath
}

// Name (leaf): Unique string name used for the queue management profile.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/*/name"
func (n *Qos_QueueManagementProfilePath) Name() *Qos_QueueManagementProfile_NamePath {
	ps := &Qos_QueueManagementProfile_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Unique string name used for the queue management profile.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/*/name"
func (n *Qos_QueueManagementProfilePathAny) Name() *Qos_QueueManagementProfile_NamePathAny {
	ps := &Qos_QueueManagementProfile_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Red (container): Configuration and operational state parameters
// relating to Random Early Detection (RED).
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "red"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red"
func (n *Qos_QueueManagementProfilePath) Red() *Qos_QueueManagementProfile_RedPath {
	ps := &Qos_QueueManagementProfile_RedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"red"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Red (container): Configuration and operational state parameters
// relating to Random Early Detection (RED).
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "red"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red"
func (n *Qos_QueueManagementProfilePathAny) Red() *Qos_QueueManagementProfile_RedPathAny {
	ps := &Qos_QueueManagementProfile_RedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"red"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Wred (container): Configuration and operational state parameters relating to
// Weighted Random Early Detection (WRED).
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "wred"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred"
func (n *Qos_QueueManagementProfilePath) Wred() *Qos_QueueManagementProfile_WredPath {
	ps := &Qos_QueueManagementProfile_WredPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"wred"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Wred (container): Configuration and operational state parameters relating to
// Weighted Random Early Detection (WRED).
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "wred"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred"
func (n *Qos_QueueManagementProfilePathAny) Wred() *Qos_QueueManagementProfile_WredPathAny {
	ps := &Qos_QueueManagementProfile_WredPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"wred"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfilePath) State() ygnmi.SingletonQuery[*oc.Qos_QueueManagementProfile] {
	return ygnmi.NewSingletonQuery[*oc.Qos_QueueManagementProfile](
		"Qos_QueueManagementProfile",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfilePathAny) State() ygnmi.WildcardQuery[*oc.Qos_QueueManagementProfile] {
	return ygnmi.NewWildcardQuery[*oc.Qos_QueueManagementProfile](
		"Qos_QueueManagementProfile",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfilePath) Config() ygnmi.ConfigQuery[*oc.Qos_QueueManagementProfile] {
	return ygnmi.NewConfigQuery[*oc.Qos_QueueManagementProfile](
		"Qos_QueueManagementProfile",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfilePathAny) Config() ygnmi.WildcardQuery[*oc.Qos_QueueManagementProfile] {
	return ygnmi.NewWildcardQuery[*oc.Qos_QueueManagementProfile](
		"Qos_QueueManagementProfile",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfilePathMap) State() ygnmi.SingletonQuery[map[string]*oc.Qos_QueueManagementProfile] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Qos_QueueManagementProfile](
		"Qos",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_QueueManagementProfile, bool) {
			ret := gs.(*oc.Qos).QueueManagementProfile
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queue-management-profiles"},
			PostRelPath: []string{"openconfig-qos:queue-management-profile"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfilePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Qos_QueueManagementProfile] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_QueueManagementProfile](
		"Qos",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_QueueManagementProfile, bool) {
			ret := gs.(*oc.Qos).QueueManagementProfile
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queue-management-profiles"},
			PostRelPath: []string{"openconfig-qos:queue-management-profile"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfilePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Qos_QueueManagementProfile] {
	return ygnmi.NewConfigQuery[map[string]*oc.Qos_QueueManagementProfile](
		"Qos",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_QueueManagementProfile, bool) {
			ret := gs.(*oc.Qos).QueueManagementProfile
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queue-management-profiles"},
			PostRelPath: []string{"openconfig-qos:queue-management-profile"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfilePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Qos_QueueManagementProfile] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_QueueManagementProfile](
		"Qos",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_QueueManagementProfile, bool) {
			ret := gs.(*oc.Qos).QueueManagementProfile
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queue-management-profiles"},
			PostRelPath: []string{"openconfig-qos:queue-management-profile"},
		},
	)
}

// Qos_QueueManagementProfile_RedPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red YANG schema element.
type Qos_QueueManagementProfile_RedPath struct {
	*ygnmi.NodePath
}

// Qos_QueueManagementProfile_RedPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red YANG schema element.
type Qos_QueueManagementProfile_RedPathAny struct {
	*ygnmi.NodePath
}

// Uniform (container): Uniform RED parameters. These parameters are applied to all
// the traffic coming into system.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "uniform"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform"
func (n *Qos_QueueManagementProfile_RedPath) Uniform() *Qos_QueueManagementProfile_Red_UniformPath {
	ps := &Qos_QueueManagementProfile_Red_UniformPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"uniform"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Uniform (container): Uniform RED parameters. These parameters are applied to all
// the traffic coming into system.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "uniform"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform"
func (n *Qos_QueueManagementProfile_RedPathAny) Uniform() *Qos_QueueManagementProfile_Red_UniformPathAny {
	ps := &Qos_QueueManagementProfile_Red_UniformPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"uniform"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfile_RedPath) State() ygnmi.SingletonQuery[*oc.Qos_QueueManagementProfile_Red] {
	return ygnmi.NewSingletonQuery[*oc.Qos_QueueManagementProfile_Red](
		"Qos_QueueManagementProfile_Red",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfile_RedPathAny) State() ygnmi.WildcardQuery[*oc.Qos_QueueManagementProfile_Red] {
	return ygnmi.NewWildcardQuery[*oc.Qos_QueueManagementProfile_Red](
		"Qos_QueueManagementProfile_Red",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfile_RedPath) Config() ygnmi.ConfigQuery[*oc.Qos_QueueManagementProfile_Red] {
	return ygnmi.NewConfigQuery[*oc.Qos_QueueManagementProfile_Red](
		"Qos_QueueManagementProfile_Red",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfile_RedPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_QueueManagementProfile_Red] {
	return ygnmi.NewWildcardQuery[*oc.Qos_QueueManagementProfile_Red](
		"Qos_QueueManagementProfile_Red",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_QueueManagementProfile_Red_Uniform_DropPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red/uniform/state/drop YANG schema element.
type Qos_QueueManagementProfile_Red_Uniform_DropPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_QueueManagementProfile_Red_Uniform_DropPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red/uniform/state/drop YANG schema element.
type Qos_QueueManagementProfile_Red_Uniform_DropPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/drop"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/state/drop"
func (n *Qos_QueueManagementProfile_Red_Uniform_DropPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Qos_QueueManagementProfile_Red_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "drop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).Drop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/drop"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/state/drop"
func (n *Qos_QueueManagementProfile_Red_Uniform_DropPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Qos_QueueManagementProfile_Red_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "drop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).Drop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/drop"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/config/drop"
func (n *Qos_QueueManagementProfile_Red_Uniform_DropPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Qos_QueueManagementProfile_Red_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "drop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).Drop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/drop"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/config/drop"
func (n *Qos_QueueManagementProfile_Red_Uniform_DropPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Qos_QueueManagementProfile_Red_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "drop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).Drop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_QueueManagementProfile_Red_Uniform_EnableEcnPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red/uniform/state/enable-ecn YANG schema element.
type Qos_QueueManagementProfile_Red_Uniform_EnableEcnPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_QueueManagementProfile_Red_Uniform_EnableEcnPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red/uniform/state/enable-ecn YANG schema element.
type Qos_QueueManagementProfile_Red_Uniform_EnableEcnPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/enable-ecn"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/state/enable-ecn"
func (n *Qos_QueueManagementProfile_Red_Uniform_EnableEcnPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Qos_QueueManagementProfile_Red_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-ecn"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).EnableEcn
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/enable-ecn"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/state/enable-ecn"
func (n *Qos_QueueManagementProfile_Red_Uniform_EnableEcnPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Qos_QueueManagementProfile_Red_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-ecn"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).EnableEcn
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/enable-ecn"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/config/enable-ecn"
func (n *Qos_QueueManagementProfile_Red_Uniform_EnableEcnPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Qos_QueueManagementProfile_Red_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-ecn"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).EnableEcn
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/enable-ecn"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/config/enable-ecn"
func (n *Qos_QueueManagementProfile_Red_Uniform_EnableEcnPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Qos_QueueManagementProfile_Red_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-ecn"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).EnableEcn
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red/uniform/state/max-threshold YANG schema element.
type Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red/uniform/state/max-threshold YANG schema element.
type Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/state/max-threshold"
func (n *Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_QueueManagementProfile_Red_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).MaxThreshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/state/max-threshold"
func (n *Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_QueueManagementProfile_Red_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).MaxThreshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/max-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/config/max-threshold"
func (n *Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"Qos_QueueManagementProfile_Red_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).MaxThreshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/max-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/config/max-threshold"
func (n *Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_QueueManagementProfile_Red_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).MaxThreshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPercentPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red/uniform/state/max-threshold-percent YANG schema element.
type Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPercentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPercentPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red/uniform/state/max-threshold-percent YANG schema element.
type Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPercentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/state/max-threshold-percent"
func (n *Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPercentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_QueueManagementProfile_Red_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-threshold-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).MaxThresholdPercent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/state/max-threshold-percent"
func (n *Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPercentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_QueueManagementProfile_Red_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-threshold-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).MaxThresholdPercent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/max-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/config/max-threshold-percent"
func (n *Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPercentPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"Qos_QueueManagementProfile_Red_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-threshold-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).MaxThresholdPercent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/max-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/config/max-threshold-percent"
func (n *Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPercentPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_QueueManagementProfile_Red_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-threshold-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).MaxThresholdPercent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_QueueManagementProfile_Red_Uniform_MinThresholdPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red/uniform/state/min-threshold YANG schema element.
type Qos_QueueManagementProfile_Red_Uniform_MinThresholdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_QueueManagementProfile_Red_Uniform_MinThresholdPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red/uniform/state/min-threshold YANG schema element.
type Qos_QueueManagementProfile_Red_Uniform_MinThresholdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/min-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/state/min-threshold"
func (n *Qos_QueueManagementProfile_Red_Uniform_MinThresholdPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_QueueManagementProfile_Red_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "min-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).MinThreshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/min-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/state/min-threshold"
func (n *Qos_QueueManagementProfile_Red_Uniform_MinThresholdPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_QueueManagementProfile_Red_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "min-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).MinThreshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/min-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/config/min-threshold"
func (n *Qos_QueueManagementProfile_Red_Uniform_MinThresholdPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"Qos_QueueManagementProfile_Red_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "min-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).MinThreshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/min-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/config/min-threshold"
func (n *Qos_QueueManagementProfile_Red_Uniform_MinThresholdPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_QueueManagementProfile_Red_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "min-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).MinThreshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_QueueManagementProfile_Red_Uniform_MinThresholdPercentPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red/uniform/state/min-threshold-percent YANG schema element.
type Qos_QueueManagementProfile_Red_Uniform_MinThresholdPercentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_QueueManagementProfile_Red_Uniform_MinThresholdPercentPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red/uniform/state/min-threshold-percent YANG schema element.
type Qos_QueueManagementProfile_Red_Uniform_MinThresholdPercentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/min-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/state/min-threshold-percent"
func (n *Qos_QueueManagementProfile_Red_Uniform_MinThresholdPercentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_QueueManagementProfile_Red_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "min-threshold-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).MinThresholdPercent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/min-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/state/min-threshold-percent"
func (n *Qos_QueueManagementProfile_Red_Uniform_MinThresholdPercentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_QueueManagementProfile_Red_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "min-threshold-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).MinThresholdPercent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/min-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/config/min-threshold-percent"
func (n *Qos_QueueManagementProfile_Red_Uniform_MinThresholdPercentPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"Qos_QueueManagementProfile_Red_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "min-threshold-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).MinThresholdPercent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/min-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/config/min-threshold-percent"
func (n *Qos_QueueManagementProfile_Red_Uniform_MinThresholdPercentPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_QueueManagementProfile_Red_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "min-threshold-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).MinThresholdPercent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_QueueManagementProfile_Red_UniformPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red/uniform YANG schema element.
type Qos_QueueManagementProfile_Red_UniformPath struct {
	*ygnmi.NodePath
}

// Qos_QueueManagementProfile_Red_UniformPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red/uniform YANG schema element.
type Qos_QueueManagementProfile_Red_UniformPathAny struct {
	*ygnmi.NodePath
}

// Drop (leaf): When this leaf is true and the packet and if the ECN field in
// the packet indicates that the endpoints are not ECN capable and
// the and the WRED algorithm determines that the packet should
// have been dropped based on the drop probability, the packet
// is dropped.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/drop"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/*/drop"
func (n *Qos_QueueManagementProfile_Red_UniformPath) Drop() *Qos_QueueManagementProfile_Red_Uniform_DropPath {
	ps := &Qos_QueueManagementProfile_Red_Uniform_DropPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "drop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Drop (leaf): When this leaf is true and the packet and if the ECN field in
// the packet indicates that the endpoints are not ECN capable and
// the and the WRED algorithm determines that the packet should
// have been dropped based on the drop probability, the packet
// is dropped.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/drop"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/*/drop"
func (n *Qos_QueueManagementProfile_Red_UniformPathAny) Drop() *Qos_QueueManagementProfile_Red_Uniform_DropPathAny {
	ps := &Qos_QueueManagementProfile_Red_Uniform_DropPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "drop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EnableEcn (leaf): When this leaf is true and the number of packets in the queue
// is between the minimum threshold and the maximum threshold, if
// the ECN field on the packet indicates that the endpoints are ECN
// capable (that is, the ECT bit is set to 1 and the CE bit is set
// to 0, or the ECT bit is set to 0 and the CE bit is set to 1) and
// the WRED algorithm determines that the packet should have been
// dropped based on the drop probability, the ECT and CE bits for
// the packet are changed to 1, and the packet is transmitted.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/enable-ecn"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/*/enable-ecn"
func (n *Qos_QueueManagementProfile_Red_UniformPath) EnableEcn() *Qos_QueueManagementProfile_Red_Uniform_EnableEcnPath {
	ps := &Qos_QueueManagementProfile_Red_Uniform_EnableEcnPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-ecn"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EnableEcn (leaf): When this leaf is true and the number of packets in the queue
// is between the minimum threshold and the maximum threshold, if
// the ECN field on the packet indicates that the endpoints are ECN
// capable (that is, the ECT bit is set to 1 and the CE bit is set
// to 0, or the ECT bit is set to 0 and the CE bit is set to 1) and
// the WRED algorithm determines that the packet should have been
// dropped based on the drop probability, the ECT and CE bits for
// the packet are changed to 1, and the packet is transmitted.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/enable-ecn"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/*/enable-ecn"
func (n *Qos_QueueManagementProfile_Red_UniformPathAny) EnableEcn() *Qos_QueueManagementProfile_Red_Uniform_EnableEcnPathAny {
	ps := &Qos_QueueManagementProfile_Red_Uniform_EnableEcnPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-ecn"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxThreshold (leaf): The maximum threshold parameter for a RED-managed queue in bytes.
// When the average queue length exceeds the maxth value, all packets are
// dropped (or marked if ECN is enabled).  Mutually exclusive with
// min-threshold-percent and max-threshold-percent.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/max-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/*/max-threshold"
func (n *Qos_QueueManagementProfile_Red_UniformPath) MaxThreshold() *Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPath {
	ps := &Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxThreshold (leaf): The maximum threshold parameter for a RED-managed queue in bytes.
// When the average queue length exceeds the maxth value, all packets are
// dropped (or marked if ECN is enabled).  Mutually exclusive with
// min-threshold-percent and max-threshold-percent.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/max-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/*/max-threshold"
func (n *Qos_QueueManagementProfile_Red_UniformPathAny) MaxThreshold() *Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPathAny {
	ps := &Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxThresholdPercent (leaf): The maximum threshold parameter for a RED-managed queue in percent.
// When the average queue length exceeds the maxth value, all packets
// are dropped (or marked if ECN is enabled).  Mutually exclusive with
// min-threshold and max-threshold.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/max-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/*/max-threshold-percent"
func (n *Qos_QueueManagementProfile_Red_UniformPath) MaxThresholdPercent() *Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPercentPath {
	ps := &Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPercentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-threshold-percent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxThresholdPercent (leaf): The maximum threshold parameter for a RED-managed queue in percent.
// When the average queue length exceeds the maxth value, all packets
// are dropped (or marked if ECN is enabled).  Mutually exclusive with
// min-threshold and max-threshold.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/max-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/*/max-threshold-percent"
func (n *Qos_QueueManagementProfile_Red_UniformPathAny) MaxThresholdPercent() *Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPercentPathAny {
	ps := &Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPercentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-threshold-percent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinThreshold (leaf): The mininum threshold parameter for a RED-managed queue in bytes.
// When the average queue length is less than minth, all packets are admitted
// to the queue.  Mututally exclusive with min-threshold-percent and
// max-threshold-percent.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/min-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/*/min-threshold"
func (n *Qos_QueueManagementProfile_Red_UniformPath) MinThreshold() *Qos_QueueManagementProfile_Red_Uniform_MinThresholdPath {
	ps := &Qos_QueueManagementProfile_Red_Uniform_MinThresholdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "min-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinThreshold (leaf): The mininum threshold parameter for a RED-managed queue in bytes.
// When the average queue length is less than minth, all packets are admitted
// to the queue.  Mututally exclusive with min-threshold-percent and
// max-threshold-percent.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/min-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/*/min-threshold"
func (n *Qos_QueueManagementProfile_Red_UniformPathAny) MinThreshold() *Qos_QueueManagementProfile_Red_Uniform_MinThresholdPathAny {
	ps := &Qos_QueueManagementProfile_Red_Uniform_MinThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "min-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinThresholdPercent (leaf): The mininum threshold parameter for a RED-managed queue in percent.
// When the average queue length is less than minth, all packets are
// admitted to the queue.  Mutually exclusive with min-threshold and
// max-threshold.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/min-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/*/min-threshold-percent"
func (n *Qos_QueueManagementProfile_Red_UniformPath) MinThresholdPercent() *Qos_QueueManagementProfile_Red_Uniform_MinThresholdPercentPath {
	ps := &Qos_QueueManagementProfile_Red_Uniform_MinThresholdPercentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "min-threshold-percent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinThresholdPercent (leaf): The mininum threshold parameter for a RED-managed queue in percent.
// When the average queue length is less than minth, all packets are
// admitted to the queue.  Mutually exclusive with min-threshold and
// max-threshold.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/min-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/*/min-threshold-percent"
func (n *Qos_QueueManagementProfile_Red_UniformPathAny) MinThresholdPercent() *Qos_QueueManagementProfile_Red_Uniform_MinThresholdPercentPathAny {
	ps := &Qos_QueueManagementProfile_Red_Uniform_MinThresholdPercentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "min-threshold-percent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfile_Red_UniformPath) State() ygnmi.SingletonQuery[*oc.Qos_QueueManagementProfile_Red_Uniform] {
	return ygnmi.NewSingletonQuery[*oc.Qos_QueueManagementProfile_Red_Uniform](
		"Qos_QueueManagementProfile_Red_Uniform",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfile_Red_UniformPathAny) State() ygnmi.WildcardQuery[*oc.Qos_QueueManagementProfile_Red_Uniform] {
	return ygnmi.NewWildcardQuery[*oc.Qos_QueueManagementProfile_Red_Uniform](
		"Qos_QueueManagementProfile_Red_Uniform",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfile_Red_UniformPath) Config() ygnmi.ConfigQuery[*oc.Qos_QueueManagementProfile_Red_Uniform] {
	return ygnmi.NewConfigQuery[*oc.Qos_QueueManagementProfile_Red_Uniform](
		"Qos_QueueManagementProfile_Red_Uniform",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfile_Red_UniformPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_QueueManagementProfile_Red_Uniform] {
	return ygnmi.NewWildcardQuery[*oc.Qos_QueueManagementProfile_Red_Uniform](
		"Qos_QueueManagementProfile_Red_Uniform",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_QueueManagementProfile_WredPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred YANG schema element.
type Qos_QueueManagementProfile_WredPath struct {
	*ygnmi.NodePath
}

// Qos_QueueManagementProfile_WredPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred YANG schema element.
type Qos_QueueManagementProfile_WredPathAny struct {
	*ygnmi.NodePath
}

// Uniform (container): Uniform WRED parameters. These parameters are applied to all the
// traffic coming into system.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "uniform"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform"
func (n *Qos_QueueManagementProfile_WredPath) Uniform() *Qos_QueueManagementProfile_Wred_UniformPath {
	ps := &Qos_QueueManagementProfile_Wred_UniformPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"uniform"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Uniform (container): Uniform WRED parameters. These parameters are applied to all the
// traffic coming into system.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "uniform"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform"
func (n *Qos_QueueManagementProfile_WredPathAny) Uniform() *Qos_QueueManagementProfile_Wred_UniformPathAny {
	ps := &Qos_QueueManagementProfile_Wred_UniformPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"uniform"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfile_WredPath) State() ygnmi.SingletonQuery[*oc.Qos_QueueManagementProfile_Wred] {
	return ygnmi.NewSingletonQuery[*oc.Qos_QueueManagementProfile_Wred](
		"Qos_QueueManagementProfile_Wred",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfile_WredPathAny) State() ygnmi.WildcardQuery[*oc.Qos_QueueManagementProfile_Wred] {
	return ygnmi.NewWildcardQuery[*oc.Qos_QueueManagementProfile_Wred](
		"Qos_QueueManagementProfile_Wred",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfile_WredPath) Config() ygnmi.ConfigQuery[*oc.Qos_QueueManagementProfile_Wred] {
	return ygnmi.NewConfigQuery[*oc.Qos_QueueManagementProfile_Wred](
		"Qos_QueueManagementProfile_Wred",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfile_WredPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_QueueManagementProfile_Wred] {
	return ygnmi.NewWildcardQuery[*oc.Qos_QueueManagementProfile_Wred](
		"Qos_QueueManagementProfile_Wred",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_QueueManagementProfile_Wred_Uniform_DropPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/drop YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_DropPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_QueueManagementProfile_Wred_Uniform_DropPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/drop YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_DropPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/drop"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/drop"
func (n *Qos_QueueManagementProfile_Wred_Uniform_DropPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Qos_QueueManagementProfile_Wred_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "drop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).Drop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/drop"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/drop"
func (n *Qos_QueueManagementProfile_Wred_Uniform_DropPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Qos_QueueManagementProfile_Wred_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "drop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).Drop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/drop"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/config/drop"
func (n *Qos_QueueManagementProfile_Wred_Uniform_DropPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Qos_QueueManagementProfile_Wred_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "drop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).Drop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/drop"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/config/drop"
func (n *Qos_QueueManagementProfile_Wred_Uniform_DropPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Qos_QueueManagementProfile_Wred_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "drop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).Drop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_QueueManagementProfile_Wred_Uniform_EnableEcnPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/enable-ecn YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_EnableEcnPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_QueueManagementProfile_Wred_Uniform_EnableEcnPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/enable-ecn YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_EnableEcnPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/enable-ecn"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/enable-ecn"
func (n *Qos_QueueManagementProfile_Wred_Uniform_EnableEcnPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Qos_QueueManagementProfile_Wred_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-ecn"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).EnableEcn
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/enable-ecn"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/enable-ecn"
func (n *Qos_QueueManagementProfile_Wred_Uniform_EnableEcnPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Qos_QueueManagementProfile_Wred_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-ecn"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).EnableEcn
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/enable-ecn"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/config/enable-ecn"
func (n *Qos_QueueManagementProfile_Wred_Uniform_EnableEcnPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Qos_QueueManagementProfile_Wred_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-ecn"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).EnableEcn
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/enable-ecn"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/config/enable-ecn"
func (n *Qos_QueueManagementProfile_Wred_Uniform_EnableEcnPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Qos_QueueManagementProfile_Wred_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-ecn"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).EnableEcn
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_QueueManagementProfile_Wred_Uniform_MaxDropProbabilityPercentPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/max-drop-probability-percent YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_MaxDropProbabilityPercentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_QueueManagementProfile_Wred_Uniform_MaxDropProbabilityPercentPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/max-drop-probability-percent YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_MaxDropProbabilityPercentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-drop-probability-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/max-drop-probability-percent"
func (n *Qos_QueueManagementProfile_Wred_Uniform_MaxDropProbabilityPercentPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_QueueManagementProfile_Wred_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-drop-probability-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).MaxDropProbabilityPercent
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-drop-probability-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/max-drop-probability-percent"
func (n *Qos_QueueManagementProfile_Wred_Uniform_MaxDropProbabilityPercentPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_QueueManagementProfile_Wred_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-drop-probability-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).MaxDropProbabilityPercent
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/max-drop-probability-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/config/max-drop-probability-percent"
func (n *Qos_QueueManagementProfile_Wred_Uniform_MaxDropProbabilityPercentPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_QueueManagementProfile_Wred_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-drop-probability-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).MaxDropProbabilityPercent
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/max-drop-probability-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/config/max-drop-probability-percent"
func (n *Qos_QueueManagementProfile_Wred_Uniform_MaxDropProbabilityPercentPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_QueueManagementProfile_Wred_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-drop-probability-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).MaxDropProbabilityPercent
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/max-threshold YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/max-threshold YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/max-threshold"
func (n *Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_QueueManagementProfile_Wred_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).MaxThreshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/max-threshold"
func (n *Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_QueueManagementProfile_Wred_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).MaxThreshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/max-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/config/max-threshold"
func (n *Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"Qos_QueueManagementProfile_Wred_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).MaxThreshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/max-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/config/max-threshold"
func (n *Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_QueueManagementProfile_Wred_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).MaxThreshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPercentPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/max-threshold-percent YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPercentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPercentPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/max-threshold-percent YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPercentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/max-threshold-percent"
func (n *Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPercentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_QueueManagementProfile_Wred_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-threshold-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).MaxThresholdPercent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/max-threshold-percent"
func (n *Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPercentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_QueueManagementProfile_Wred_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-threshold-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).MaxThresholdPercent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/max-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/config/max-threshold-percent"
func (n *Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPercentPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"Qos_QueueManagementProfile_Wred_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-threshold-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).MaxThresholdPercent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/max-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/config/max-threshold-percent"
func (n *Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPercentPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_QueueManagementProfile_Wred_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-threshold-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).MaxThresholdPercent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/min-threshold YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/min-threshold YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/min-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/min-threshold"
func (n *Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_QueueManagementProfile_Wred_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "min-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).MinThreshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/min-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/min-threshold"
func (n *Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_QueueManagementProfile_Wred_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "min-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).MinThreshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/min-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/config/min-threshold"
func (n *Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"Qos_QueueManagementProfile_Wred_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "min-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).MinThreshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/min-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/config/min-threshold"
func (n *Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_QueueManagementProfile_Wred_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "min-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).MinThreshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPercentPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/min-threshold-percent YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPercentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPercentPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/min-threshold-percent YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPercentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/min-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/min-threshold-percent"
func (n *Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPercentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_QueueManagementProfile_Wred_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "min-threshold-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).MinThresholdPercent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/min-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/min-threshold-percent"
func (n *Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPercentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_QueueManagementProfile_Wred_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "min-threshold-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).MinThresholdPercent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/min-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/config/min-threshold-percent"
func (n *Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPercentPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"Qos_QueueManagementProfile_Wred_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "min-threshold-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).MinThresholdPercent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/min-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/config/min-threshold-percent"
func (n *Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPercentPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_QueueManagementProfile_Wred_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "min-threshold-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).MinThresholdPercent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_QueueManagementProfile_Wred_Uniform_WeightPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/weight YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_WeightPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_QueueManagementProfile_Wred_Uniform_WeightPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/weight YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_WeightPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/weight"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/weight"
func (n *Qos_QueueManagementProfile_Wred_Uniform_WeightPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Qos_QueueManagementProfile_Wred_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "weight"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).Weight
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/weight"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/weight"
func (n *Qos_QueueManagementProfile_Wred_Uniform_WeightPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_QueueManagementProfile_Wred_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "weight"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).Weight
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/weight"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/config/weight"
func (n *Qos_QueueManagementProfile_Wred_Uniform_WeightPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Qos_QueueManagementProfile_Wred_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "weight"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).Weight
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/weight"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/config/weight"
func (n *Qos_QueueManagementProfile_Wred_Uniform_WeightPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_QueueManagementProfile_Wred_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "weight"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).Weight
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_QueueManagementProfile_Wred_UniformPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform YANG schema element.
type Qos_QueueManagementProfile_Wred_UniformPath struct {
	*ygnmi.NodePath
}

// Qos_QueueManagementProfile_Wred_UniformPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform YANG schema element.
type Qos_QueueManagementProfile_Wred_UniformPathAny struct {
	*ygnmi.NodePath
}

// Drop (leaf): When this leaf is true and the packet and if the ECN field in
// the packet indicates that the endpoints are not ECN capable and
// the and the WRED algorithm determines that the packet should
// have been dropped based on the drop probability, the packet
// is dropped.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/drop"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/*/drop"
func (n *Qos_QueueManagementProfile_Wred_UniformPath) Drop() *Qos_QueueManagementProfile_Wred_Uniform_DropPath {
	ps := &Qos_QueueManagementProfile_Wred_Uniform_DropPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "drop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Drop (leaf): When this leaf is true and the packet and if the ECN field in
// the packet indicates that the endpoints are not ECN capable and
// the and the WRED algorithm determines that the packet should
// have been dropped based on the drop probability, the packet
// is dropped.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/drop"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/*/drop"
func (n *Qos_QueueManagementProfile_Wred_UniformPathAny) Drop() *Qos_QueueManagementProfile_Wred_Uniform_DropPathAny {
	ps := &Qos_QueueManagementProfile_Wred_Uniform_DropPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "drop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EnableEcn (leaf): When this leaf is true and the number of packets in the queue
// is between the minimum threshold and the maximum threshold, if
// the ECN field on the packet indicates that the endpoints are ECN
// capable (that is, the ECT bit is set to 1 and the CE bit is set
// to 0, or the ECT bit is set to 0 and the CE bit is set to 1) and
// the WRED algorithm determines that the packet should have been
// dropped based on the drop probability, the ECT and CE bits for
// the packet are changed to 1, and the packet is transmitted.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/enable-ecn"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/*/enable-ecn"
func (n *Qos_QueueManagementProfile_Wred_UniformPath) EnableEcn() *Qos_QueueManagementProfile_Wred_Uniform_EnableEcnPath {
	ps := &Qos_QueueManagementProfile_Wred_Uniform_EnableEcnPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-ecn"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EnableEcn (leaf): When this leaf is true and the number of packets in the queue
// is between the minimum threshold and the maximum threshold, if
// the ECN field on the packet indicates that the endpoints are ECN
// capable (that is, the ECT bit is set to 1 and the CE bit is set
// to 0, or the ECT bit is set to 0 and the CE bit is set to 1) and
// the WRED algorithm determines that the packet should have been
// dropped based on the drop probability, the ECT and CE bits for
// the packet are changed to 1, and the packet is transmitted.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/enable-ecn"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/*/enable-ecn"
func (n *Qos_QueueManagementProfile_Wred_UniformPathAny) EnableEcn() *Qos_QueueManagementProfile_Wred_Uniform_EnableEcnPathAny {
	ps := &Qos_QueueManagementProfile_Wred_Uniform_EnableEcnPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-ecn"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxDropProbabilityPercent (leaf): If the queue depth is between min and max threshold then this
// the probability with which packets are dropped or marked.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/max-drop-probability-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/*/max-drop-probability-percent"
func (n *Qos_QueueManagementProfile_Wred_UniformPath) MaxDropProbabilityPercent() *Qos_QueueManagementProfile_Wred_Uniform_MaxDropProbabilityPercentPath {
	ps := &Qos_QueueManagementProfile_Wred_Uniform_MaxDropProbabilityPercentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-drop-probability-percent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxDropProbabilityPercent (leaf): If the queue depth is between min and max threshold then this
// the probability with which packets are dropped or marked.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/max-drop-probability-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/*/max-drop-probability-percent"
func (n *Qos_QueueManagementProfile_Wred_UniformPathAny) MaxDropProbabilityPercent() *Qos_QueueManagementProfile_Wred_Uniform_MaxDropProbabilityPercentPathAny {
	ps := &Qos_QueueManagementProfile_Wred_Uniform_MaxDropProbabilityPercentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-drop-probability-percent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxThreshold (leaf): The maximum threshold parameter for a RED-managed queue in bytes.
// When the average queue length exceeds the maxth value, all packets are
// dropped (or marked if ECN is enabled).  Mutually exclusive with
// min-threshold-percent and max-threshold-percent.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/max-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/*/max-threshold"
func (n *Qos_QueueManagementProfile_Wred_UniformPath) MaxThreshold() *Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPath {
	ps := &Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxThreshold (leaf): The maximum threshold parameter for a RED-managed queue in bytes.
// When the average queue length exceeds the maxth value, all packets are
// dropped (or marked if ECN is enabled).  Mutually exclusive with
// min-threshold-percent and max-threshold-percent.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/max-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/*/max-threshold"
func (n *Qos_QueueManagementProfile_Wred_UniformPathAny) MaxThreshold() *Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPathAny {
	ps := &Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxThresholdPercent (leaf): The maximum threshold parameter for a RED-managed queue in percent.
// When the average queue length exceeds the maxth value, all packets
// are dropped (or marked if ECN is enabled).  Mutually exclusive with
// min-threshold and max-threshold.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/max-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/*/max-threshold-percent"
func (n *Qos_QueueManagementProfile_Wred_UniformPath) MaxThresholdPercent() *Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPercentPath {
	ps := &Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPercentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-threshold-percent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxThresholdPercent (leaf): The maximum threshold parameter for a RED-managed queue in percent.
// When the average queue length exceeds the maxth value, all packets
// are dropped (or marked if ECN is enabled).  Mutually exclusive with
// min-threshold and max-threshold.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/max-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/*/max-threshold-percent"
func (n *Qos_QueueManagementProfile_Wred_UniformPathAny) MaxThresholdPercent() *Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPercentPathAny {
	ps := &Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPercentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-threshold-percent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinThreshold (leaf): The mininum threshold parameter for a RED-managed queue in bytes.
// When the average queue length is less than minth, all packets are admitted
// to the queue.  Mututally exclusive with min-threshold-percent and
// max-threshold-percent.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/min-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/*/min-threshold"
func (n *Qos_QueueManagementProfile_Wred_UniformPath) MinThreshold() *Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPath {
	ps := &Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "min-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinThreshold (leaf): The mininum threshold parameter for a RED-managed queue in bytes.
// When the average queue length is less than minth, all packets are admitted
// to the queue.  Mututally exclusive with min-threshold-percent and
// max-threshold-percent.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/min-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/*/min-threshold"
func (n *Qos_QueueManagementProfile_Wred_UniformPathAny) MinThreshold() *Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPathAny {
	ps := &Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "min-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinThresholdPercent (leaf): The mininum threshold parameter for a RED-managed queue in percent.
// When the average queue length is less than minth, all packets are
// admitted to the queue.  Mutually exclusive with min-threshold and
// max-threshold.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/min-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/*/min-threshold-percent"
func (n *Qos_QueueManagementProfile_Wred_UniformPath) MinThresholdPercent() *Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPercentPath {
	ps := &Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPercentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "min-threshold-percent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinThresholdPercent (leaf): The mininum threshold parameter for a RED-managed queue in percent.
// When the average queue length is less than minth, all packets are
// admitted to the queue.  Mutually exclusive with min-threshold and
// max-threshold.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/min-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/*/min-threshold-percent"
func (n *Qos_QueueManagementProfile_Wred_UniformPathAny) MinThresholdPercent() *Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPercentPathAny {
	ps := &Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPercentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "min-threshold-percent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Weight (leaf): The average queue size depends on the previous average as well as
// the current size of the queue.
//
// average queue size = (previous average queue size)*(1-2^{-n})+
//
//	(current queue size)*(2^{-n})
//
// where n is the user-configurable exponential weight factor.
//
// The previous average is more important for high values of n. Peaks
// and lows in queue size are smoothed by a high value. For low values
// of n, the average queue size is close to the current queue size.
//
// When this leaf is not present, implementation default value is
// applied.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/weight"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/*/weight"
func (n *Qos_QueueManagementProfile_Wred_UniformPath) Weight() *Qos_QueueManagementProfile_Wred_Uniform_WeightPath {
	ps := &Qos_QueueManagementProfile_Wred_Uniform_WeightPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "weight"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Weight (leaf): The average queue size depends on the previous average as well as
// the current size of the queue.
//
// average queue size = (previous average queue size)*(1-2^{-n})+
//
//	(current queue size)*(2^{-n})
//
// where n is the user-configurable exponential weight factor.
//
// The previous average is more important for high values of n. Peaks
// and lows in queue size are smoothed by a high value. For low values
// of n, the average queue size is close to the current queue size.
//
// When this leaf is not present, implementation default value is
// applied.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/weight"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/*/weight"
func (n *Qos_QueueManagementProfile_Wred_UniformPathAny) Weight() *Qos_QueueManagementProfile_Wred_Uniform_WeightPathAny {
	ps := &Qos_QueueManagementProfile_Wred_Uniform_WeightPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "weight"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfile_Wred_UniformPath) State() ygnmi.SingletonQuery[*oc.Qos_QueueManagementProfile_Wred_Uniform] {
	return ygnmi.NewSingletonQuery[*oc.Qos_QueueManagementProfile_Wred_Uniform](
		"Qos_QueueManagementProfile_Wred_Uniform",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfile_Wred_UniformPathAny) State() ygnmi.WildcardQuery[*oc.Qos_QueueManagementProfile_Wred_Uniform] {
	return ygnmi.NewWildcardQuery[*oc.Qos_QueueManagementProfile_Wred_Uniform](
		"Qos_QueueManagementProfile_Wred_Uniform",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfile_Wred_UniformPath) Config() ygnmi.ConfigQuery[*oc.Qos_QueueManagementProfile_Wred_Uniform] {
	return ygnmi.NewConfigQuery[*oc.Qos_QueueManagementProfile_Wred_Uniform](
		"Qos_QueueManagementProfile_Wred_Uniform",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfile_Wred_UniformPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_QueueManagementProfile_Wred_Uniform] {
	return ygnmi.NewWildcardQuery[*oc.Qos_QueueManagementProfile_Wred_Uniform](
		"Qos_QueueManagementProfile_Wred_Uniform",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_NamePath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/state/name YANG schema element.
type Qos_SchedulerPolicy_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_NamePathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/state/name YANG schema element.
type Qos_SchedulerPolicy_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/state/name"
func (n *Qos_SchedulerPolicy_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_SchedulerPolicy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/state/name"
func (n *Qos_SchedulerPolicy_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_SchedulerPolicy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/config/name"
func (n *Qos_SchedulerPolicy_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_SchedulerPolicy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/config/name"
func (n *Qos_SchedulerPolicy_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_SchedulerPolicy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicyPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy YANG schema element.
type Qos_SchedulerPolicyPath struct {
	*ygnmi.NodePath
}

// Qos_SchedulerPolicyPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy YANG schema element.
type Qos_SchedulerPolicyPathAny struct {
	*ygnmi.NodePath
}

// Qos_SchedulerPolicyPathMap represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy YANG schema element.
type Qos_SchedulerPolicyPathMap struct {
	*ygnmi.NodePath
}

// Qos_SchedulerPolicyPathMapAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy YANG schema element.
type Qos_SchedulerPolicyPathMapAny struct {
	*ygnmi.NodePath
}

// Name (leaf): Name for the scheduler policy.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/*/name"
func (n *Qos_SchedulerPolicyPath) Name() *Qos_SchedulerPolicy_NamePath {
	ps := &Qos_SchedulerPolicy_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Name for the scheduler policy.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/*/name"
func (n *Qos_SchedulerPolicyPathAny) Name() *Qos_SchedulerPolicy_NamePathAny {
	ps := &Qos_SchedulerPolicy_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SchedulerAny (list): List of defined QoS traffic schedulers.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "schedulers/scheduler"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler"
func (n *Qos_SchedulerPolicyPath) SchedulerAny() *Qos_SchedulerPolicy_SchedulerPathAny {
	ps := &Qos_SchedulerPolicy_SchedulerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"schedulers", "scheduler"},
			map[string]interface{}{"sequence": "*"},
			n,
		),
	}
	return ps
}

// SchedulerAny (list): List of defined QoS traffic schedulers.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "schedulers/scheduler"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler"
func (n *Qos_SchedulerPolicyPathAny) SchedulerAny() *Qos_SchedulerPolicy_SchedulerPathAny {
	ps := &Qos_SchedulerPolicy_SchedulerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"schedulers", "scheduler"},
			map[string]interface{}{"sequence": "*"},
			n,
		),
	}
	return ps
}

// Scheduler (list): List of defined QoS traffic schedulers.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "schedulers/scheduler"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler"
//
//	Sequence: uint32
func (n *Qos_SchedulerPolicyPath) Scheduler(Sequence uint32) *Qos_SchedulerPolicy_SchedulerPath {
	ps := &Qos_SchedulerPolicy_SchedulerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"schedulers", "scheduler"},
			map[string]interface{}{"sequence": Sequence},
			n,
		),
	}
	return ps
}

// Scheduler (list): List of defined QoS traffic schedulers.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "schedulers/scheduler"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler"
//
//	Sequence: uint32
func (n *Qos_SchedulerPolicyPathAny) Scheduler(Sequence uint32) *Qos_SchedulerPolicy_SchedulerPathAny {
	ps := &Qos_SchedulerPolicy_SchedulerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"schedulers", "scheduler"},
			map[string]interface{}{"sequence": Sequence},
			n,
		),
	}
	return ps
}

// SchedulerMap (list): List of defined QoS traffic schedulers.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "schedulers/scheduler"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler"
func (n *Qos_SchedulerPolicyPath) SchedulerMap() *Qos_SchedulerPolicy_SchedulerPathMap {
	ps := &Qos_SchedulerPolicy_SchedulerPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"schedulers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SchedulerMap (list): List of defined QoS traffic schedulers.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "schedulers/scheduler"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler"
func (n *Qos_SchedulerPolicyPathAny) SchedulerMap() *Qos_SchedulerPolicy_SchedulerPathMapAny {
	ps := &Qos_SchedulerPolicy_SchedulerPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"schedulers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicyPath) State() ygnmi.SingletonQuery[*oc.Qos_SchedulerPolicy] {
	return ygnmi.NewSingletonQuery[*oc.Qos_SchedulerPolicy](
		"Qos_SchedulerPolicy",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicyPathAny) State() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy](
		"Qos_SchedulerPolicy",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicyPath) Config() ygnmi.ConfigQuery[*oc.Qos_SchedulerPolicy] {
	return ygnmi.NewConfigQuery[*oc.Qos_SchedulerPolicy](
		"Qos_SchedulerPolicy",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicyPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy](
		"Qos_SchedulerPolicy",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicyPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Qos_SchedulerPolicy] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Qos_SchedulerPolicy](
		"Qos",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_SchedulerPolicy, bool) {
			ret := gs.(*oc.Qos).SchedulerPolicy
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:scheduler-policies"},
			PostRelPath: []string{"openconfig-qos:scheduler-policy"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicyPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Qos_SchedulerPolicy] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_SchedulerPolicy](
		"Qos",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_SchedulerPolicy, bool) {
			ret := gs.(*oc.Qos).SchedulerPolicy
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:scheduler-policies"},
			PostRelPath: []string{"openconfig-qos:scheduler-policy"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicyPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Qos_SchedulerPolicy] {
	return ygnmi.NewConfigQuery[map[string]*oc.Qos_SchedulerPolicy](
		"Qos",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_SchedulerPolicy, bool) {
			ret := gs.(*oc.Qos).SchedulerPolicy
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:scheduler-policies"},
			PostRelPath: []string{"openconfig-qos:scheduler-policy"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicyPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Qos_SchedulerPolicy] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_SchedulerPolicy](
		"Qos",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_SchedulerPolicy, bool) {
			ret := gs.(*oc.Qos).SchedulerPolicy
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:scheduler-policies"},
			PostRelPath: []string{"openconfig-qos:scheduler-policy"},
		},
	)
}

// Qos_SchedulerPolicy_Scheduler_PriorityPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/priority YANG schema element.
type Qos_SchedulerPolicy_Scheduler_PriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_PriorityPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/priority YANG schema element.
type Qos_SchedulerPolicy_Scheduler_PriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/priority"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/priority"
func (n *Qos_SchedulerPolicy_Scheduler_PriorityPath) State() ygnmi.SingletonQuery[oc.E_Scheduler_Priority] {
	return ygnmi.NewSingletonQuery[oc.E_Scheduler_Priority](
		"Qos_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Scheduler_Priority, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler).Priority
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/priority"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/priority"
func (n *Qos_SchedulerPolicy_Scheduler_PriorityPathAny) State() ygnmi.WildcardQuery[oc.E_Scheduler_Priority] {
	return ygnmi.NewWildcardQuery[oc.E_Scheduler_Priority](
		"Qos_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Scheduler_Priority, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler).Priority
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/priority"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/priority"
func (n *Qos_SchedulerPolicy_Scheduler_PriorityPath) Config() ygnmi.ConfigQuery[oc.E_Scheduler_Priority] {
	return ygnmi.NewConfigQuery[oc.E_Scheduler_Priority](
		"Qos_SchedulerPolicy_Scheduler",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Scheduler_Priority, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler).Priority
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/priority"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/priority"
func (n *Qos_SchedulerPolicy_Scheduler_PriorityPathAny) Config() ygnmi.WildcardQuery[oc.E_Scheduler_Priority] {
	return ygnmi.NewWildcardQuery[oc.E_Scheduler_Priority](
		"Qos_SchedulerPolicy_Scheduler",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Scheduler_Priority, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler).Priority
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_SequencePath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/sequence YANG schema element.
type Qos_SchedulerPolicy_Scheduler_SequencePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_SequencePathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/sequence YANG schema element.
type Qos_SchedulerPolicy_Scheduler_SequencePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/sequence"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/sequence"
func (n *Qos_SchedulerPolicy_Scheduler_SequencePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sequence"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler).Sequence
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/sequence"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/sequence"
func (n *Qos_SchedulerPolicy_Scheduler_SequencePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sequence"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler).Sequence
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/sequence"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/sequence"
func (n *Qos_SchedulerPolicy_Scheduler_SequencePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "sequence"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler).Sequence
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/sequence"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/sequence"
func (n *Qos_SchedulerPolicy_Scheduler_SequencePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "sequence"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler).Sequence
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TypePath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/type YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_TypePathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/type YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/type"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/type"
func (n *Qos_SchedulerPolicy_Scheduler_TypePath) State() ygnmi.SingletonQuery[oc.E_QosTypes_QOS_SCHEDULER_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_QosTypes_QOS_SCHEDULER_TYPE](
		"Qos_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_QosTypes_QOS_SCHEDULER_TYPE, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/type"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/type"
func (n *Qos_SchedulerPolicy_Scheduler_TypePathAny) State() ygnmi.WildcardQuery[oc.E_QosTypes_QOS_SCHEDULER_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_QosTypes_QOS_SCHEDULER_TYPE](
		"Qos_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_QosTypes_QOS_SCHEDULER_TYPE, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/type"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/type"
func (n *Qos_SchedulerPolicy_Scheduler_TypePath) Config() ygnmi.ConfigQuery[oc.E_QosTypes_QOS_SCHEDULER_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_QosTypes_QOS_SCHEDULER_TYPE](
		"Qos_SchedulerPolicy_Scheduler",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_QosTypes_QOS_SCHEDULER_TYPE, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/type"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/type"
func (n *Qos_SchedulerPolicy_Scheduler_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_QosTypes_QOS_SCHEDULER_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_QosTypes_QOS_SCHEDULER_TYPE](
		"Qos_SchedulerPolicy_Scheduler",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_QosTypes_QOS_SCHEDULER_TYPE, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_SchedulerPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler YANG schema element.
type Qos_SchedulerPolicy_SchedulerPath struct {
	*ygnmi.NodePath
}

// Qos_SchedulerPolicy_SchedulerPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler YANG schema element.
type Qos_SchedulerPolicy_SchedulerPathAny struct {
	*ygnmi.NodePath
}

// Qos_SchedulerPolicy_SchedulerPathMap represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler YANG schema element.
type Qos_SchedulerPolicy_SchedulerPathMap struct {
	*ygnmi.NodePath
}

// Qos_SchedulerPolicy_SchedulerPathMapAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler YANG schema element.
type Qos_SchedulerPolicy_SchedulerPathMapAny struct {
	*ygnmi.NodePath
}

// InputAny (list): List of input sources for the scheduler.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "inputs/input"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input"
func (n *Qos_SchedulerPolicy_SchedulerPath) InputAny() *Qos_SchedulerPolicy_Scheduler_InputPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_InputPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"inputs", "input"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// InputAny (list): List of input sources for the scheduler.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "inputs/input"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input"
func (n *Qos_SchedulerPolicy_SchedulerPathAny) InputAny() *Qos_SchedulerPolicy_Scheduler_InputPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_InputPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"inputs", "input"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// Input (list): List of input sources for the scheduler.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "inputs/input"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input"
//
//	Id: string
func (n *Qos_SchedulerPolicy_SchedulerPath) Input(Id string) *Qos_SchedulerPolicy_Scheduler_InputPath {
	ps := &Qos_SchedulerPolicy_Scheduler_InputPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"inputs", "input"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// Input (list): List of input sources for the scheduler.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "inputs/input"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input"
//
//	Id: string
func (n *Qos_SchedulerPolicy_SchedulerPathAny) Input(Id string) *Qos_SchedulerPolicy_Scheduler_InputPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_InputPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"inputs", "input"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// InputMap (list): List of input sources for the scheduler.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "inputs/input"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input"
func (n *Qos_SchedulerPolicy_SchedulerPath) InputMap() *Qos_SchedulerPolicy_Scheduler_InputPathMap {
	ps := &Qos_SchedulerPolicy_Scheduler_InputPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"inputs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InputMap (list): List of input sources for the scheduler.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "inputs/input"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input"
func (n *Qos_SchedulerPolicy_SchedulerPathAny) InputMap() *Qos_SchedulerPolicy_Scheduler_InputPathMapAny {
	ps := &Qos_SchedulerPolicy_Scheduler_InputPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"inputs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// OneRateTwoColor (container): Top-level container for data related to a 1 rate, 2 color
// shaper.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "one-rate-two-color"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color"
func (n *Qos_SchedulerPolicy_SchedulerPath) OneRateTwoColor() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"one-rate-two-color"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// OneRateTwoColor (container): Top-level container for data related to a 1 rate, 2 color
// shaper.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "one-rate-two-color"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color"
func (n *Qos_SchedulerPolicy_SchedulerPathAny) OneRateTwoColor() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"one-rate-two-color"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Output (container): Top-level container for scheduler output data
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "output"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output"
func (n *Qos_SchedulerPolicy_SchedulerPath) Output() *Qos_SchedulerPolicy_Scheduler_OutputPath {
	ps := &Qos_SchedulerPolicy_Scheduler_OutputPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"output"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Output (container): Top-level container for scheduler output data
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "output"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output"
func (n *Qos_SchedulerPolicy_SchedulerPathAny) Output() *Qos_SchedulerPolicy_Scheduler_OutputPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_OutputPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"output"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Priority (leaf): Priority of the scheduler within the scheduler policy.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/priority"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/*/priority"
func (n *Qos_SchedulerPolicy_SchedulerPath) Priority() *Qos_SchedulerPolicy_Scheduler_PriorityPath {
	ps := &Qos_SchedulerPolicy_Scheduler_PriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Priority (leaf): Priority of the scheduler within the scheduler policy.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/priority"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/*/priority"
func (n *Qos_SchedulerPolicy_SchedulerPathAny) Priority() *Qos_SchedulerPolicy_Scheduler_PriorityPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_PriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Sequence (leaf): Sequence number for the scheduler within the scheduler
// policy. Schedulers are processed from lowest sequence
// to highest.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/sequence"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/*/sequence"
func (n *Qos_SchedulerPolicy_SchedulerPath) Sequence() *Qos_SchedulerPolicy_Scheduler_SequencePath {
	ps := &Qos_SchedulerPolicy_Scheduler_SequencePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sequence"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Sequence (leaf): Sequence number for the scheduler within the scheduler
// policy. Schedulers are processed from lowest sequence
// to highest.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/sequence"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/*/sequence"
func (n *Qos_SchedulerPolicy_SchedulerPathAny) Sequence() *Qos_SchedulerPolicy_Scheduler_SequencePathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_SequencePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sequence"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TwoRateThreeColor (container): Top-level container for data for a 2 rate, 3 color policer.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "two-rate-three-color"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color"
func (n *Qos_SchedulerPolicy_SchedulerPath) TwoRateThreeColor() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"two-rate-three-color"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TwoRateThreeColor (container): Top-level container for data for a 2 rate, 3 color policer.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "two-rate-three-color"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color"
func (n *Qos_SchedulerPolicy_SchedulerPathAny) TwoRateThreeColor() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"two-rate-three-color"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Type (leaf): Sets the type of scheduler, i.e. the scheduling algorithm
// used to serve inputs.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/type"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/*/type"
func (n *Qos_SchedulerPolicy_SchedulerPath) Type() *Qos_SchedulerPolicy_Scheduler_TypePath {
	ps := &Qos_SchedulerPolicy_Scheduler_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Sets the type of scheduler, i.e. the scheduling algorithm
// used to serve inputs.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/type"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/*/type"
func (n *Qos_SchedulerPolicy_SchedulerPathAny) Type() *Qos_SchedulerPolicy_Scheduler_TypePathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_SchedulerPath) State() ygnmi.SingletonQuery[*oc.Qos_SchedulerPolicy_Scheduler] {
	return ygnmi.NewSingletonQuery[*oc.Qos_SchedulerPolicy_Scheduler](
		"Qos_SchedulerPolicy_Scheduler",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_SchedulerPathAny) State() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler](
		"Qos_SchedulerPolicy_Scheduler",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_SchedulerPath) Config() ygnmi.ConfigQuery[*oc.Qos_SchedulerPolicy_Scheduler] {
	return ygnmi.NewConfigQuery[*oc.Qos_SchedulerPolicy_Scheduler](
		"Qos_SchedulerPolicy_Scheduler",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_SchedulerPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler](
		"Qos_SchedulerPolicy_Scheduler",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_SchedulerPathMap) State() ygnmi.SingletonQuery[map[uint32]*oc.Qos_SchedulerPolicy_Scheduler] {
	return ygnmi.NewSingletonQuery[map[uint32]*oc.Qos_SchedulerPolicy_Scheduler](
		"Qos_SchedulerPolicy",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.Qos_SchedulerPolicy_Scheduler, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy).Scheduler
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:schedulers"},
			PostRelPath: []string{"openconfig-qos:scheduler"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_SchedulerPathMapAny) State() ygnmi.WildcardQuery[map[uint32]*oc.Qos_SchedulerPolicy_Scheduler] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.Qos_SchedulerPolicy_Scheduler](
		"Qos_SchedulerPolicy",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.Qos_SchedulerPolicy_Scheduler, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy).Scheduler
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:schedulers"},
			PostRelPath: []string{"openconfig-qos:scheduler"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_SchedulerPathMap) Config() ygnmi.ConfigQuery[map[uint32]*oc.Qos_SchedulerPolicy_Scheduler] {
	return ygnmi.NewConfigQuery[map[uint32]*oc.Qos_SchedulerPolicy_Scheduler](
		"Qos_SchedulerPolicy",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.Qos_SchedulerPolicy_Scheduler, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy).Scheduler
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:schedulers"},
			PostRelPath: []string{"openconfig-qos:scheduler"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_SchedulerPathMapAny) Config() ygnmi.WildcardQuery[map[uint32]*oc.Qos_SchedulerPolicy_Scheduler] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.Qos_SchedulerPolicy_Scheduler](
		"Qos_SchedulerPolicy",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.Qos_SchedulerPolicy_Scheduler, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy).Scheduler
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:schedulers"},
			PostRelPath: []string{"openconfig-qos:scheduler"},
		},
	)
}

// Qos_SchedulerPolicy_Scheduler_Input_IdPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/id YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Input_IdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_Input_IdPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/id YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Input_IdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/id"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/id"
func (n *Qos_SchedulerPolicy_Scheduler_Input_IdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_SchedulerPolicy_Scheduler_Input",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Input).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/id"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/id"
func (n *Qos_SchedulerPolicy_Scheduler_Input_IdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_SchedulerPolicy_Scheduler_Input",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Input).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/id"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/id"
func (n *Qos_SchedulerPolicy_Scheduler_Input_IdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_SchedulerPolicy_Scheduler_Input",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Input).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/id"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/id"
func (n *Qos_SchedulerPolicy_Scheduler_Input_IdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_SchedulerPolicy_Scheduler_Input",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Input).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_Input_InputTypePath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/input-type YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Input_InputTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_Input_InputTypePathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/input-type YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Input_InputTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/input-type"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/input-type"
func (n *Qos_SchedulerPolicy_Scheduler_Input_InputTypePath) State() ygnmi.SingletonQuery[oc.E_Input_InputType] {
	return ygnmi.NewSingletonQuery[oc.E_Input_InputType](
		"Qos_SchedulerPolicy_Scheduler_Input",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "input-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Input_InputType, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Input).InputType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/input-type"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/input-type"
func (n *Qos_SchedulerPolicy_Scheduler_Input_InputTypePathAny) State() ygnmi.WildcardQuery[oc.E_Input_InputType] {
	return ygnmi.NewWildcardQuery[oc.E_Input_InputType](
		"Qos_SchedulerPolicy_Scheduler_Input",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "input-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Input_InputType, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Input).InputType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/input-type"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/input-type"
func (n *Qos_SchedulerPolicy_Scheduler_Input_InputTypePath) Config() ygnmi.ConfigQuery[oc.E_Input_InputType] {
	return ygnmi.NewConfigQuery[oc.E_Input_InputType](
		"Qos_SchedulerPolicy_Scheduler_Input",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "input-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Input_InputType, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Input).InputType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/input-type"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/input-type"
func (n *Qos_SchedulerPolicy_Scheduler_Input_InputTypePathAny) Config() ygnmi.WildcardQuery[oc.E_Input_InputType] {
	return ygnmi.NewWildcardQuery[oc.E_Input_InputType](
		"Qos_SchedulerPolicy_Scheduler_Input",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "input-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Input_InputType, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Input).InputType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_Input_QueuePath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/queue YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Input_QueuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_Input_QueuePathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/queue YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Input_QueuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/queue"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/queue"
func (n *Qos_SchedulerPolicy_Scheduler_Input_QueuePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_SchedulerPolicy_Scheduler_Input",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "queue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Input).Queue
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/queue"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/queue"
func (n *Qos_SchedulerPolicy_Scheduler_Input_QueuePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_SchedulerPolicy_Scheduler_Input",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "queue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Input).Queue
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/queue"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/queue"
func (n *Qos_SchedulerPolicy_Scheduler_Input_QueuePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_SchedulerPolicy_Scheduler_Input",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "queue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Input).Queue
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/queue"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/queue"
func (n *Qos_SchedulerPolicy_Scheduler_Input_QueuePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_SchedulerPolicy_Scheduler_Input",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "queue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Input).Queue
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_Input_WeightPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/weight YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Input_WeightPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_Input_WeightPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/weight YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Input_WeightPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/weight"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/weight"
func (n *Qos_SchedulerPolicy_Scheduler_Input_WeightPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_SchedulerPolicy_Scheduler_Input",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "weight"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Input).Weight
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/weight"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/weight"
func (n *Qos_SchedulerPolicy_Scheduler_Input_WeightPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_SchedulerPolicy_Scheduler_Input",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "weight"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Input).Weight
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/weight"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/weight"
func (n *Qos_SchedulerPolicy_Scheduler_Input_WeightPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"Qos_SchedulerPolicy_Scheduler_Input",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "weight"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Input).Weight
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/weight"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/weight"
func (n *Qos_SchedulerPolicy_Scheduler_Input_WeightPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_SchedulerPolicy_Scheduler_Input",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "weight"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Input).Weight
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_InputPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input YANG schema element.
type Qos_SchedulerPolicy_Scheduler_InputPath struct {
	*ygnmi.NodePath
}

// Qos_SchedulerPolicy_Scheduler_InputPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input YANG schema element.
type Qos_SchedulerPolicy_Scheduler_InputPathAny struct {
	*ygnmi.NodePath
}

// Qos_SchedulerPolicy_Scheduler_InputPathMap represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input YANG schema element.
type Qos_SchedulerPolicy_Scheduler_InputPathMap struct {
	*ygnmi.NodePath
}

// Qos_SchedulerPolicy_Scheduler_InputPathMapAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input YANG schema element.
type Qos_SchedulerPolicy_Scheduler_InputPathMapAny struct {
	*ygnmi.NodePath
}

// Id (leaf): User-defined identifier for the scheduler input
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/id"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/*/id"
func (n *Qos_SchedulerPolicy_Scheduler_InputPath) Id() *Qos_SchedulerPolicy_Scheduler_Input_IdPath {
	ps := &Qos_SchedulerPolicy_Scheduler_Input_IdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): User-defined identifier for the scheduler input
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/id"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/*/id"
func (n *Qos_SchedulerPolicy_Scheduler_InputPathAny) Id() *Qos_SchedulerPolicy_Scheduler_Input_IdPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_Input_IdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InputType (leaf): Describes the type of input source for the scheduler
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/input-type"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/*/input-type"
func (n *Qos_SchedulerPolicy_Scheduler_InputPath) InputType() *Qos_SchedulerPolicy_Scheduler_Input_InputTypePath {
	ps := &Qos_SchedulerPolicy_Scheduler_Input_InputTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "input-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InputType (leaf): Describes the type of input source for the scheduler
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/input-type"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/*/input-type"
func (n *Qos_SchedulerPolicy_Scheduler_InputPathAny) InputType() *Qos_SchedulerPolicy_Scheduler_Input_InputTypePathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_Input_InputTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "input-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Queue (leaf): Reference to a queue that is an input source for the
// scheduler
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/queue"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/*/queue"
func (n *Qos_SchedulerPolicy_Scheduler_InputPath) Queue() *Qos_SchedulerPolicy_Scheduler_Input_QueuePath {
	ps := &Qos_SchedulerPolicy_Scheduler_Input_QueuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "queue"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Queue (leaf): Reference to a queue that is an input source for the
// scheduler
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/queue"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/*/queue"
func (n *Qos_SchedulerPolicy_Scheduler_InputPathAny) Queue() *Qos_SchedulerPolicy_Scheduler_Input_QueuePathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_Input_QueuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "queue"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Weight (leaf): For priority schedulers, this indicates the priority of
// the corresponding input.  Higher values indicate higher
// priority.  For weighted round-robin schedulers, this leaf
// indicates the weight of the corresponding input.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/weight"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/*/weight"
func (n *Qos_SchedulerPolicy_Scheduler_InputPath) Weight() *Qos_SchedulerPolicy_Scheduler_Input_WeightPath {
	ps := &Qos_SchedulerPolicy_Scheduler_Input_WeightPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "weight"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Weight (leaf): For priority schedulers, this indicates the priority of
// the corresponding input.  Higher values indicate higher
// priority.  For weighted round-robin schedulers, this leaf
// indicates the weight of the corresponding input.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/weight"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/*/weight"
func (n *Qos_SchedulerPolicy_Scheduler_InputPathAny) Weight() *Qos_SchedulerPolicy_Scheduler_Input_WeightPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_Input_WeightPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "weight"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_InputPath) State() ygnmi.SingletonQuery[*oc.Qos_SchedulerPolicy_Scheduler_Input] {
	return ygnmi.NewSingletonQuery[*oc.Qos_SchedulerPolicy_Scheduler_Input](
		"Qos_SchedulerPolicy_Scheduler_Input",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_InputPathAny) State() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_Input] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_Input](
		"Qos_SchedulerPolicy_Scheduler_Input",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_InputPath) Config() ygnmi.ConfigQuery[*oc.Qos_SchedulerPolicy_Scheduler_Input] {
	return ygnmi.NewConfigQuery[*oc.Qos_SchedulerPolicy_Scheduler_Input](
		"Qos_SchedulerPolicy_Scheduler_Input",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_InputPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_Input] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_Input](
		"Qos_SchedulerPolicy_Scheduler_Input",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_InputPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Qos_SchedulerPolicy_Scheduler_Input] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Qos_SchedulerPolicy_Scheduler_Input](
		"Qos_SchedulerPolicy_Scheduler",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_SchedulerPolicy_Scheduler_Input, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler).Input
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:inputs"},
			PostRelPath: []string{"openconfig-qos:input"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_InputPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Qos_SchedulerPolicy_Scheduler_Input] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_SchedulerPolicy_Scheduler_Input](
		"Qos_SchedulerPolicy_Scheduler",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_SchedulerPolicy_Scheduler_Input, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler).Input
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:inputs"},
			PostRelPath: []string{"openconfig-qos:input"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_InputPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Qos_SchedulerPolicy_Scheduler_Input] {
	return ygnmi.NewConfigQuery[map[string]*oc.Qos_SchedulerPolicy_Scheduler_Input](
		"Qos_SchedulerPolicy_Scheduler",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_SchedulerPolicy_Scheduler_Input, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler).Input
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:inputs"},
			PostRelPath: []string{"openconfig-qos:input"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_InputPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Qos_SchedulerPolicy_Scheduler_Input] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_SchedulerPolicy_Scheduler_Input](
		"Qos_SchedulerPolicy_Scheduler",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_SchedulerPolicy_Scheduler_Input, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler).Input
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:inputs"},
			PostRelPath: []string{"openconfig-qos:input"},
		},
	)
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_BcPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/bc YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_BcPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_BcPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/bc YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_BcPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/bc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/bc"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_BcPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "bc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).Bc
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/bc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/bc"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_BcPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "bc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).Bc
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/bc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/bc"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_BcPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "bc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).Bc
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/bc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/bc"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_BcPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "bc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).Bc
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/cir"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cir"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).Cir
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/cir"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cir"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).Cir
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/cir"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/cir"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "cir"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).Cir
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/cir"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/cir"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "cir"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).Cir
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir-pct YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir-pct YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/cir-pct"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir-pct"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cir-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).CirPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/cir-pct"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir-pct"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cir-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).CirPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/cir-pct"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/cir-pct"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "cir-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).CirPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/cir-pct"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/cir-pct"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "cir-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).CirPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctRemainingPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir-pct-remaining YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctRemainingPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctRemainingPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir-pct-remaining YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctRemainingPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/cir-pct-remaining"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir-pct-remaining"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctRemainingPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cir-pct-remaining"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).CirPctRemaining
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/cir-pct-remaining"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir-pct-remaining"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctRemainingPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cir-pct-remaining"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).CirPctRemaining
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/cir-pct-remaining"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/cir-pct-remaining"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctRemainingPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "cir-pct-remaining"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).CirPctRemaining
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/cir-pct-remaining"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/cir-pct-remaining"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctRemainingPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "cir-pct-remaining"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).CirPctRemaining
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthBytesPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-bytes YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthBytesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthBytesPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-bytes YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthBytesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-queue-depth-bytes"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-bytes"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthBytesPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-queue-depth-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).MaxQueueDepthBytes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-queue-depth-bytes"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-bytes"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthBytesPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-queue-depth-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).MaxQueueDepthBytes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/max-queue-depth-bytes"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/max-queue-depth-bytes"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthBytesPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-queue-depth-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).MaxQueueDepthBytes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/max-queue-depth-bytes"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/max-queue-depth-bytes"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthBytesPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-queue-depth-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).MaxQueueDepthBytes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPacketsPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-packets YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPacketsPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-packets YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-queue-depth-packets"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-packets"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPacketsPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-queue-depth-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).MaxQueueDepthPackets
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-queue-depth-packets"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-packets"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPacketsPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-queue-depth-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).MaxQueueDepthPackets
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/max-queue-depth-packets"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/max-queue-depth-packets"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPacketsPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-queue-depth-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).MaxQueueDepthPackets
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/max-queue-depth-packets"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/max-queue-depth-packets"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPacketsPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-queue-depth-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).MaxQueueDepthPackets
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPercentPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-percent YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPercentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPercentPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-percent YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPercentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-queue-depth-percent"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-percent"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPercentPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-queue-depth-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).MaxQueueDepthPercent
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-queue-depth-percent"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-percent"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPercentPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-queue-depth-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).MaxQueueDepthPercent
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/max-queue-depth-percent"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/max-queue-depth-percent"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPercentPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-queue-depth-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).MaxQueueDepthPercent
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/max-queue-depth-percent"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/max-queue-depth-percent"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPercentPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-queue-depth-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).MaxQueueDepthPercent
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_QueuingBehaviorPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/queuing-behavior YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_QueuingBehaviorPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_QueuingBehaviorPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/queuing-behavior YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_QueuingBehaviorPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/queuing-behavior"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/queuing-behavior"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_QueuingBehaviorPath) State() ygnmi.SingletonQuery[oc.E_Qos_QueueBehavior] {
	return ygnmi.NewSingletonQuery[oc.E_Qos_QueueBehavior](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "queuing-behavior"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Qos_QueueBehavior, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).QueuingBehavior
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/queuing-behavior"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/queuing-behavior"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_QueuingBehaviorPathAny) State() ygnmi.WildcardQuery[oc.E_Qos_QueueBehavior] {
	return ygnmi.NewWildcardQuery[oc.E_Qos_QueueBehavior](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "queuing-behavior"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Qos_QueueBehavior, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).QueuingBehavior
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/queuing-behavior"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/queuing-behavior"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_QueuingBehaviorPath) Config() ygnmi.ConfigQuery[oc.E_Qos_QueueBehavior] {
	return ygnmi.NewConfigQuery[oc.E_Qos_QueueBehavior](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "queuing-behavior"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Qos_QueueBehavior, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).QueuingBehavior
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/queuing-behavior"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/queuing-behavior"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_QueuingBehaviorPathAny) Config() ygnmi.WildcardQuery[oc.E_Qos_QueueBehavior] {
	return ygnmi.NewWildcardQuery[oc.E_Qos_QueueBehavior](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "queuing-behavior"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Qos_QueueBehavior, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).QueuingBehavior
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath struct {
	*ygnmi.NodePath
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny struct {
	*ygnmi.NodePath
}

// Bc (leaf): Committed burst size for the single-rate token bucket
// scheduler.  This value represents the depth of the token
// bucket.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/bc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/*/bc"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath) Bc() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_BcPath {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_BcPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "bc"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Bc (leaf): Committed burst size for the single-rate token bucket
// scheduler.  This value represents the depth of the token
// bucket.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/bc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/*/bc"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny) Bc() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_BcPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_BcPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "bc"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Cir (leaf): Committed information rate for the single-rate token
// bucket scheduler.  This value represents the rate at which
// tokens are added to the bucket.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/cir"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/*/cir"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath) Cir() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPath {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "cir"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Cir (leaf): Committed information rate for the single-rate token
// bucket scheduler.  This value represents the rate at which
// tokens are added to the bucket.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/cir"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/*/cir"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny) Cir() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "cir"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CirPct (leaf): Committed information rate for the single-rate token
// bucket scheduler. This value represents the rate at which
// tokens are added to the bucket. It is expressed as a
// percentage of the total bandwidth allocated to the
// context in which the scheduler is referenced.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/cir-pct"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/*/cir-pct"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath) CirPct() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctPath {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "cir-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CirPct (leaf): Committed information rate for the single-rate token
// bucket scheduler. This value represents the rate at which
// tokens are added to the bucket. It is expressed as a
// percentage of the total bandwidth allocated to the
// context in which the scheduler is referenced.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/cir-pct"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/*/cir-pct"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny) CirPct() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "cir-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CirPctRemaining (leaf): Committed information rate for the single-rate token
// bucket scheduler. This value represents the rate at which
// tokens are added to the bucket. It is expressed as a
// percentage of the unallocated bandwidth available in the
// context in which the scheduled is referenced.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/cir-pct-remaining"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/*/cir-pct-remaining"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath) CirPctRemaining() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctRemainingPath {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctRemainingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "cir-pct-remaining"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CirPctRemaining (leaf): Committed information rate for the single-rate token
// bucket scheduler. This value represents the rate at which
// tokens are added to the bucket. It is expressed as a
// percentage of the unallocated bandwidth available in the
// context in which the scheduled is referenced.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/cir-pct-remaining"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/*/cir-pct-remaining"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny) CirPctRemaining() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctRemainingPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctRemainingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "cir-pct-remaining"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConformAction (container): Action to be applied to packets that are scheduled within the
// CIR of the one-rate, two-colour scheduler. Packets that receive
// a token from the in-CIR bucket are said to be conforming and
// have all of the specified actions applied.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "conform-action"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath) ConformAction() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPath {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"conform-action"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ConformAction (container): Action to be applied to packets that are scheduled within the
// CIR of the one-rate, two-colour scheduler. Packets that receive
// a token from the in-CIR bucket are said to be conforming and
// have all of the specified actions applied.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "conform-action"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny) ConformAction() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"conform-action"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ExceedAction (container): Action to be applied to packets that are scheduled above the CIR
// of the one-rate, two-colour shaper. Packets that do not receive a
// token from the in-CIR bucket are said to be exceeding, and have
// all of the specified actions applied.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "exceed-action"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath) ExceedAction() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPath {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"exceed-action"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ExceedAction (container): Action to be applied to packets that are scheduled above the CIR
// of the one-rate, two-colour shaper. Packets that do not receive a
// token from the in-CIR bucket are said to be exceeding, and have
// all of the specified actions applied.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "exceed-action"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny) ExceedAction() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"exceed-action"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MaxQueueDepthBytes (leaf): When the scheduler is specified to be a shaper - the
// maximum depth of the queue in bytes is the value
// specified by this leaf.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/max-queue-depth-bytes"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/*/max-queue-depth-bytes"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath) MaxQueueDepthBytes() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthBytesPath {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthBytesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-queue-depth-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxQueueDepthBytes (leaf): When the scheduler is specified to be a shaper - the
// maximum depth of the queue in bytes is the value
// specified by this leaf.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/max-queue-depth-bytes"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/*/max-queue-depth-bytes"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny) MaxQueueDepthBytes() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthBytesPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthBytesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-queue-depth-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxQueueDepthPackets (leaf): When the scheduler is specified to be a shaper - the
// maximum depth of the queue in packets is the value
// specified by this leaf.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/max-queue-depth-packets"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/*/max-queue-depth-packets"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath) MaxQueueDepthPackets() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPacketsPath {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-queue-depth-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxQueueDepthPackets (leaf): When the scheduler is specified to be a shaper - the
// maximum depth of the queue in packets is the value
// specified by this leaf.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/max-queue-depth-packets"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/*/max-queue-depth-packets"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny) MaxQueueDepthPackets() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPacketsPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-queue-depth-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxQueueDepthPercent (leaf): The queue depth specified as a percentage of the total
// available buffer that is avaialble.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/max-queue-depth-percent"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/*/max-queue-depth-percent"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath) MaxQueueDepthPercent() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPercentPath {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPercentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-queue-depth-percent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxQueueDepthPercent (leaf): The queue depth specified as a percentage of the total
// available buffer that is avaialble.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/max-queue-depth-percent"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/*/max-queue-depth-percent"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny) MaxQueueDepthPercent() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPercentPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPercentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-queue-depth-percent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// QueuingBehavior (leaf): The type of scheduler that is being configured.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/queuing-behavior"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/*/queuing-behavior"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath) QueuingBehavior() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_QueuingBehaviorPath {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_QueuingBehaviorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "queuing-behavior"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// QueuingBehavior (leaf): The type of scheduler that is being configured.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/queuing-behavior"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/*/queuing-behavior"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny) QueuingBehavior() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_QueuingBehaviorPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_QueuingBehaviorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "queuing-behavior"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath) State() ygnmi.SingletonQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor] {
	return ygnmi.NewSingletonQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny) State() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath) Config() ygnmi.ConfigQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor] {
	return ygnmi.NewConfigQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDot1PPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-dot1p YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDot1PPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDot1PPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-dot1p YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDot1PPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDot1PPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDot1PPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/config/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDot1PPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/config/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDot1PPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDscpPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-dscp YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDscpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDscpPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-dscp YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDscpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDscpPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDscpPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/config/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDscpPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/config/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDscpPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetMplsTcPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-mpls-tc YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetMplsTcPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetMplsTcPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-mpls-tc YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetMplsTcPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetMplsTcPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetMplsTcPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/config/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetMplsTcPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/config/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetMplsTcPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPath struct {
	*ygnmi.NodePath
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPathAny struct {
	*ygnmi.NodePath
}

// SetDot1P (leaf): Sets the 3-bit class-of-service value in the
// Ethernet packet header for 802.1Q VLAN-tagged packets,
// also known as PCP (priority code point).
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/*/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPath) SetDot1P() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDot1PPath {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDot1PPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dot1p"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetDot1P (leaf): Sets the 3-bit class-of-service value in the
// Ethernet packet header for 802.1Q VLAN-tagged packets,
// also known as PCP (priority code point).
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/*/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPathAny) SetDot1P() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDot1PPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDot1PPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dot1p"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetDscp (leaf): Sets the 6-bit DSCP (differentiated services code point)
// value in the IP packet header.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/*/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPath) SetDscp() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDscpPath {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDscpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetDscp (leaf): Sets the 6-bit DSCP (differentiated services code point)
// value in the IP packet header.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/*/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPathAny) SetDscp() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDscpPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDscpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMplsTc (leaf): Sets the 3-bit traffic class value (also referred to as EXP
// or CoS) in MPLS packets.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/*/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPath) SetMplsTc() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetMplsTcPath {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetMplsTcPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-mpls-tc"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMplsTc (leaf): Sets the 3-bit traffic class value (also referred to as EXP
// or CoS) in MPLS packets.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/*/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPathAny) SetMplsTc() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetMplsTcPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetMplsTcPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-mpls-tc"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPath) State() ygnmi.SingletonQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction] {
	return ygnmi.NewSingletonQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPathAny) State() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPath) Config() ygnmi.ConfigQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction] {
	return ygnmi.NewConfigQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_DropPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/drop YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_DropPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_DropPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/drop YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_DropPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/drop"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/drop"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_DropPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "drop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction).Drop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/drop"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/drop"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_DropPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "drop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction).Drop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/drop"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config/drop"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_DropPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "drop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction).Drop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/drop"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config/drop"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_DropPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "drop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction).Drop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDot1PPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-dot1p YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDot1PPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDot1PPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-dot1p YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDot1PPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDot1PPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDot1PPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDot1PPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDot1PPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDscpPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-dscp YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDscpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDscpPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-dscp YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDscpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDscpPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDscpPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDscpPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDscpPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetMplsTcPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-mpls-tc YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetMplsTcPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetMplsTcPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-mpls-tc YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetMplsTcPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetMplsTcPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetMplsTcPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetMplsTcPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetMplsTcPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPath struct {
	*ygnmi.NodePath
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPathAny struct {
	*ygnmi.NodePath
}

// Drop (leaf): If set to true, packets within this context are dropped.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/drop"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/*/drop"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPath) Drop() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_DropPath {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_DropPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "drop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Drop (leaf): If set to true, packets within this context are dropped.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/drop"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/*/drop"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPathAny) Drop() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_DropPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_DropPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "drop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetDot1P (leaf): Sets the 3-bit class-of-service value in the
// Ethernet packet header for 802.1Q VLAN-tagged packets,
// also known as PCP (priority code point).
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/*/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPath) SetDot1P() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDot1PPath {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDot1PPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dot1p"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetDot1P (leaf): Sets the 3-bit class-of-service value in the
// Ethernet packet header for 802.1Q VLAN-tagged packets,
// also known as PCP (priority code point).
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/*/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPathAny) SetDot1P() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDot1PPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDot1PPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dot1p"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetDscp (leaf): Sets the 6-bit DSCP (differentiated services code point)
// value in the IP packet header.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/*/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPath) SetDscp() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDscpPath {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDscpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetDscp (leaf): Sets the 6-bit DSCP (differentiated services code point)
// value in the IP packet header.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/*/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPathAny) SetDscp() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDscpPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDscpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMplsTc (leaf): Sets the 3-bit traffic class value (also referred to as EXP
// or CoS) in MPLS packets.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/*/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPath) SetMplsTc() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetMplsTcPath {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetMplsTcPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-mpls-tc"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMplsTc (leaf): Sets the 3-bit traffic class value (also referred to as EXP
// or CoS) in MPLS packets.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/*/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPathAny) SetMplsTc() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetMplsTcPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetMplsTcPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-mpls-tc"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPath) State() ygnmi.SingletonQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction] {
	return ygnmi.NewSingletonQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPathAny) State() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPath) Config() ygnmi.ConfigQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction] {
	return ygnmi.NewConfigQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_Output_ChildSchedulerPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/child-scheduler YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Output_ChildSchedulerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_Output_ChildSchedulerPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/child-scheduler YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Output_ChildSchedulerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/child-scheduler"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/child-scheduler"
func (n *Qos_SchedulerPolicy_Scheduler_Output_ChildSchedulerPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_SchedulerPolicy_Scheduler_Output",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "child-scheduler"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Output).ChildScheduler
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/child-scheduler"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/child-scheduler"
func (n *Qos_SchedulerPolicy_Scheduler_Output_ChildSchedulerPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_SchedulerPolicy_Scheduler_Output",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "child-scheduler"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Output).ChildScheduler
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/child-scheduler"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config/child-scheduler"
func (n *Qos_SchedulerPolicy_Scheduler_Output_ChildSchedulerPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_SchedulerPolicy_Scheduler_Output",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "child-scheduler"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Output).ChildScheduler
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/child-scheduler"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config/child-scheduler"
func (n *Qos_SchedulerPolicy_Scheduler_Output_ChildSchedulerPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_SchedulerPolicy_Scheduler_Output",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "child-scheduler"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Output).ChildScheduler
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_Output_OutputFwdGroupPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/output-fwd-group YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Output_OutputFwdGroupPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_Output_OutputFwdGroupPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/output-fwd-group YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Output_OutputFwdGroupPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/output-fwd-group"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/output-fwd-group"
func (n *Qos_SchedulerPolicy_Scheduler_Output_OutputFwdGroupPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_SchedulerPolicy_Scheduler_Output",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "output-fwd-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Output).OutputFwdGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/output-fwd-group"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/output-fwd-group"
func (n *Qos_SchedulerPolicy_Scheduler_Output_OutputFwdGroupPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_SchedulerPolicy_Scheduler_Output",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "output-fwd-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Output).OutputFwdGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/output-fwd-group"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config/output-fwd-group"
func (n *Qos_SchedulerPolicy_Scheduler_Output_OutputFwdGroupPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_SchedulerPolicy_Scheduler_Output",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "output-fwd-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Output).OutputFwdGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/output-fwd-group"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config/output-fwd-group"
func (n *Qos_SchedulerPolicy_Scheduler_Output_OutputFwdGroupPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_SchedulerPolicy_Scheduler_Output",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "output-fwd-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Output).OutputFwdGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_Output_OutputTypePath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/output-type YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Output_OutputTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_Output_OutputTypePathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/output-type YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Output_OutputTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/output-type"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/output-type"
func (n *Qos_SchedulerPolicy_Scheduler_Output_OutputTypePath) State() ygnmi.SingletonQuery[oc.E_Output_OutputType] {
	return ygnmi.NewSingletonQuery[oc.E_Output_OutputType](
		"Qos_SchedulerPolicy_Scheduler_Output",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "output-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Output_OutputType, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Output).OutputType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/output-type"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/output-type"
func (n *Qos_SchedulerPolicy_Scheduler_Output_OutputTypePathAny) State() ygnmi.WildcardQuery[oc.E_Output_OutputType] {
	return ygnmi.NewWildcardQuery[oc.E_Output_OutputType](
		"Qos_SchedulerPolicy_Scheduler_Output",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "output-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Output_OutputType, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Output).OutputType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/output-type"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config/output-type"
func (n *Qos_SchedulerPolicy_Scheduler_Output_OutputTypePath) Config() ygnmi.ConfigQuery[oc.E_Output_OutputType] {
	return ygnmi.NewConfigQuery[oc.E_Output_OutputType](
		"Qos_SchedulerPolicy_Scheduler_Output",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "output-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Output_OutputType, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Output).OutputType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/output-type"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config/output-type"
func (n *Qos_SchedulerPolicy_Scheduler_Output_OutputTypePathAny) Config() ygnmi.WildcardQuery[oc.E_Output_OutputType] {
	return ygnmi.NewWildcardQuery[oc.E_Output_OutputType](
		"Qos_SchedulerPolicy_Scheduler_Output",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "output-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Output_OutputType, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Output).OutputType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_OutputPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OutputPath struct {
	*ygnmi.NodePath
}

// Qos_SchedulerPolicy_Scheduler_OutputPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OutputPathAny struct {
	*ygnmi.NodePath
}

// ChildScheduler (leaf): When the scheduler output type is a child scheduler,
// this leaf provides a reference to the downstream
// scheduler.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/child-scheduler"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/*/child-scheduler"
func (n *Qos_SchedulerPolicy_Scheduler_OutputPath) ChildScheduler() *Qos_SchedulerPolicy_Scheduler_Output_ChildSchedulerPath {
	ps := &Qos_SchedulerPolicy_Scheduler_Output_ChildSchedulerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "child-scheduler"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ChildScheduler (leaf): When the scheduler output type is a child scheduler,
// this leaf provides a reference to the downstream
// scheduler.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/child-scheduler"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/*/child-scheduler"
func (n *Qos_SchedulerPolicy_Scheduler_OutputPathAny) ChildScheduler() *Qos_SchedulerPolicy_Scheduler_Output_ChildSchedulerPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_Output_ChildSchedulerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "child-scheduler"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutputFwdGroup (leaf): When the scheduler output type is a forwarding group,
// this leaf provides a reference to the forwarding group.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/output-fwd-group"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/*/output-fwd-group"
func (n *Qos_SchedulerPolicy_Scheduler_OutputPath) OutputFwdGroup() *Qos_SchedulerPolicy_Scheduler_Output_OutputFwdGroupPath {
	ps := &Qos_SchedulerPolicy_Scheduler_Output_OutputFwdGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "output-fwd-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutputFwdGroup (leaf): When the scheduler output type is a forwarding group,
// this leaf provides a reference to the forwarding group.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/output-fwd-group"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/*/output-fwd-group"
func (n *Qos_SchedulerPolicy_Scheduler_OutputPathAny) OutputFwdGroup() *Qos_SchedulerPolicy_Scheduler_Output_OutputFwdGroupPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_Output_OutputFwdGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "output-fwd-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutputType (leaf): Describes the type of output sink for the scheduler.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/output-type"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/*/output-type"
func (n *Qos_SchedulerPolicy_Scheduler_OutputPath) OutputType() *Qos_SchedulerPolicy_Scheduler_Output_OutputTypePath {
	ps := &Qos_SchedulerPolicy_Scheduler_Output_OutputTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "output-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutputType (leaf): Describes the type of output sink for the scheduler.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/output-type"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/*/output-type"
func (n *Qos_SchedulerPolicy_Scheduler_OutputPathAny) OutputType() *Qos_SchedulerPolicy_Scheduler_Output_OutputTypePathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_Output_OutputTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "output-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_OutputPath) State() ygnmi.SingletonQuery[*oc.Qos_SchedulerPolicy_Scheduler_Output] {
	return ygnmi.NewSingletonQuery[*oc.Qos_SchedulerPolicy_Scheduler_Output](
		"Qos_SchedulerPolicy_Scheduler_Output",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_OutputPathAny) State() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_Output] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_Output](
		"Qos_SchedulerPolicy_Scheduler_Output",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_OutputPath) Config() ygnmi.ConfigQuery[*oc.Qos_SchedulerPolicy_Scheduler_Output] {
	return ygnmi.NewConfigQuery[*oc.Qos_SchedulerPolicy_Scheduler_Output](
		"Qos_SchedulerPolicy_Scheduler_Output",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_OutputPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_Output] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_Output](
		"Qos_SchedulerPolicy_Scheduler_Output",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BcPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/bc YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BcPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BcPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/bc YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BcPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/bc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/bc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BcPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "bc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).Bc
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/bc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/bc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BcPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "bc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).Bc
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/bc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/bc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BcPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "bc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).Bc
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/bc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/bc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BcPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "bc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).Bc
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BePath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/be YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BePathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/be YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/be"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/be"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "be"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).Be
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/be"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/be"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "be"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).Be
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/be"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/be"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "be"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).Be
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/be"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/be"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "be"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).Be
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/cir"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cir"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).Cir
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/cir"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cir"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).Cir
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/cir"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/cir"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "cir"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).Cir
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/cir"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/cir"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "cir"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).Cir
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir-pct YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir-pct YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/cir-pct"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir-pct"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cir-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).CirPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/cir-pct"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir-pct"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cir-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).CirPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/cir-pct"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/cir-pct"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "cir-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).CirPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/cir-pct"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/cir-pct"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "cir-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).CirPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctRemainingPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir-pct-remaining YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctRemainingPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctRemainingPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir-pct-remaining YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctRemainingPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/cir-pct-remaining"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir-pct-remaining"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctRemainingPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cir-pct-remaining"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).CirPctRemaining
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/cir-pct-remaining"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir-pct-remaining"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctRemainingPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cir-pct-remaining"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).CirPctRemaining
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/cir-pct-remaining"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/cir-pct-remaining"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctRemainingPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "cir-pct-remaining"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).CirPctRemaining
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/cir-pct-remaining"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/cir-pct-remaining"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctRemainingPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "cir-pct-remaining"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).CirPctRemaining
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/pir"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "pir"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).Pir
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/pir"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "pir"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).Pir
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/pir"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/pir"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "pir"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).Pir
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/pir"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/pir"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "pir"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).Pir
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir-pct YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir-pct YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/pir-pct"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir-pct"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "pir-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).PirPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/pir-pct"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir-pct"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "pir-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).PirPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/pir-pct"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/pir-pct"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "pir-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).PirPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/pir-pct"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/pir-pct"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "pir-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).PirPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctRemainingPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir-pct-remaining YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctRemainingPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctRemainingPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir-pct-remaining YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctRemainingPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/pir-pct-remaining"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir-pct-remaining"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctRemainingPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "pir-pct-remaining"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).PirPctRemaining
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/pir-pct-remaining"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir-pct-remaining"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctRemainingPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "pir-pct-remaining"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).PirPctRemaining
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/pir-pct-remaining"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/pir-pct-remaining"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctRemainingPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "pir-pct-remaining"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).PirPctRemaining
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/pir-pct-remaining"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/pir-pct-remaining"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctRemainingPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "pir-pct-remaining"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).PirPctRemaining
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath struct {
	*ygnmi.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny struct {
	*ygnmi.NodePath
}

// Bc (leaf): Committed burst size for the dual-rate token bucket
// policer.  This value represents the depth of the token
// bucket.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/bc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/*/bc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath) Bc() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BcPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BcPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "bc"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Bc (leaf): Committed burst size for the dual-rate token bucket
// policer.  This value represents the depth of the token
// bucket.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/bc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/*/bc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny) Bc() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BcPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BcPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "bc"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Be (leaf): Excess burst size for the dual-rate token bucket policer.
// This value represents the depth of the secondary bucket.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/be"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/*/be"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath) Be() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BePath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "be"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Be (leaf): Excess burst size for the dual-rate token bucket policer.
// This value represents the depth of the secondary bucket.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/be"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/*/be"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny) Be() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BePathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "be"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Cir (leaf): Committed information rate for the dual-rate token
// bucket policer.  This value represents the rate at which
// tokens are added to the primary bucket.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/cir"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/*/cir"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath) Cir() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "cir"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Cir (leaf): Committed information rate for the dual-rate token
// bucket policer.  This value represents the rate at which
// tokens are added to the primary bucket.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/cir"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/*/cir"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny) Cir() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "cir"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CirPct (leaf): Committed information rate for the dual-rate token bucket
// policer. This value represents the rate at which tokens
// are added to the primary bucket. It is expressed as a
// percentage of the total bandwidth available within the
// context the scheduler is instantiated.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/cir-pct"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/*/cir-pct"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath) CirPct() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "cir-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CirPct (leaf): Committed information rate for the dual-rate token bucket
// policer. This value represents the rate at which tokens
// are added to the primary bucket. It is expressed as a
// percentage of the total bandwidth available within the
// context the scheduler is instantiated.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/cir-pct"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/*/cir-pct"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny) CirPct() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "cir-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CirPctRemaining (leaf): Committed information rate for the dual-rate token
// bucket policer. This value represents the rate at which
// tokens are added to the primary bucket. It is expressed
// as a percentage of the remaining bandwidth within the
// context the scheduler is instantiated.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/cir-pct-remaining"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/*/cir-pct-remaining"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath) CirPctRemaining() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctRemainingPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctRemainingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "cir-pct-remaining"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CirPctRemaining (leaf): Committed information rate for the dual-rate token
// bucket policer. This value represents the rate at which
// tokens are added to the primary bucket. It is expressed
// as a percentage of the remaining bandwidth within the
// context the scheduler is instantiated.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/cir-pct-remaining"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/*/cir-pct-remaining"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny) CirPctRemaining() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctRemainingPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctRemainingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "cir-pct-remaining"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConformAction (container): Action to be applied to the packets that are scheduled
// within the CIR of the policer. All packets that receive
// a token from this bucket have all actions specified
// applied to them
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "conform-action"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath) ConformAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"conform-action"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ConformAction (container): Action to be applied to the packets that are scheduled
// within the CIR of the policer. All packets that receive
// a token from this bucket have all actions specified
// applied to them
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "conform-action"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny) ConformAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"conform-action"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ExceedAction (container): Action to be applied to the packets that are scheduled
// within the PIR of the policer. Packets that receive a
// token from within the PIR allocation have all the
// specified actions applied to them
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "exceed-action"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath) ExceedAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"exceed-action"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ExceedAction (container): Action to be applied to the packets that are scheduled
// within the PIR of the policer. Packets that receive a
// token from within the PIR allocation have all the
// specified actions applied to them
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "exceed-action"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny) ExceedAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"exceed-action"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Pir (leaf): Peak information rate for the dual-rate token bucket
// policer.  This value represents the rate at which tokens
// are added to the secondary bucket.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/pir"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/*/pir"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath) Pir() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "pir"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Pir (leaf): Peak information rate for the dual-rate token bucket
// policer.  This value represents the rate at which tokens
// are added to the secondary bucket.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/pir"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/*/pir"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny) Pir() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "pir"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PirPct (leaf): Peak information rate for the dual-rate token bucket
// policer. This value represents the rate at which tokens
// are added to the secondary bucket. The value is expressed
// as a percentage of the total bandwidth available in the
// context in which the scheduler is instantiated.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/pir-pct"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/*/pir-pct"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath) PirPct() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "pir-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PirPct (leaf): Peak information rate for the dual-rate token bucket
// policer. This value represents the rate at which tokens
// are added to the secondary bucket. The value is expressed
// as a percentage of the total bandwidth available in the
// context in which the scheduler is instantiated.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/pir-pct"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/*/pir-pct"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny) PirPct() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "pir-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PirPctRemaining (leaf): Peak information rate for the dual-rate token
// bucket policer. This value represents the rate at which
// tokens are added to the secondary bucket. It is expressed
// as a percentage of the remaining bandwidth within the
// context the scheduler is instantiated.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/pir-pct-remaining"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/*/pir-pct-remaining"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath) PirPctRemaining() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctRemainingPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctRemainingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "pir-pct-remaining"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PirPctRemaining (leaf): Peak information rate for the dual-rate token
// bucket policer. This value represents the rate at which
// tokens are added to the secondary bucket. It is expressed
// as a percentage of the remaining bandwidth within the
// context the scheduler is instantiated.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/pir-pct-remaining"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/*/pir-pct-remaining"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny) PirPctRemaining() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctRemainingPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctRemainingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "pir-pct-remaining"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ViolateAction (container): Action to be applied to the packets that are scheduled
// above the PIR of the policer. Packets that do not receive
// a token from either bucket have all specified actions
// applied to them.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "violate-action"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath) ViolateAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"violate-action"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ViolateAction (container): Action to be applied to the packets that are scheduled
// above the PIR of the policer. Packets that do not receive
// a token from either bucket have all specified actions
// applied to them.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "violate-action"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny) ViolateAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"violate-action"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath) State() ygnmi.SingletonQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor] {
	return ygnmi.NewSingletonQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny) State() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath) Config() ygnmi.ConfigQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor] {
	return ygnmi.NewConfigQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDot1PPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-dot1p YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDot1PPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDot1PPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-dot1p YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDot1PPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDot1PPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDot1PPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/config/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDot1PPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/config/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDot1PPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDscpPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-dscp YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDscpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDscpPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-dscp YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDscpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDscpPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDscpPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/config/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDscpPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/config/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDscpPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetMplsTcPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-mpls-tc YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetMplsTcPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetMplsTcPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-mpls-tc YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetMplsTcPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetMplsTcPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetMplsTcPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/config/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetMplsTcPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/config/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetMplsTcPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPath struct {
	*ygnmi.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPathAny struct {
	*ygnmi.NodePath
}

// SetDot1P (leaf): Sets the 3-bit class-of-service value in the
// Ethernet packet header for 802.1Q VLAN-tagged packets,
// also known as PCP (priority code point).
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/*/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPath) SetDot1P() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDot1PPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDot1PPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dot1p"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetDot1P (leaf): Sets the 3-bit class-of-service value in the
// Ethernet packet header for 802.1Q VLAN-tagged packets,
// also known as PCP (priority code point).
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/*/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPathAny) SetDot1P() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDot1PPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDot1PPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dot1p"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetDscp (leaf): Sets the 6-bit DSCP (differentiated services code point)
// value in the IP packet header.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/*/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPath) SetDscp() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDscpPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDscpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetDscp (leaf): Sets the 6-bit DSCP (differentiated services code point)
// value in the IP packet header.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/*/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPathAny) SetDscp() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDscpPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDscpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMplsTc (leaf): Sets the 3-bit traffic class value (also referred to as EXP
// or CoS) in MPLS packets.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/*/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPath) SetMplsTc() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetMplsTcPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetMplsTcPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-mpls-tc"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMplsTc (leaf): Sets the 3-bit traffic class value (also referred to as EXP
// or CoS) in MPLS packets.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/*/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPathAny) SetMplsTc() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetMplsTcPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetMplsTcPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-mpls-tc"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPath) State() ygnmi.SingletonQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction] {
	return ygnmi.NewSingletonQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPathAny) State() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPath) Config() ygnmi.ConfigQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction] {
	return ygnmi.NewConfigQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_DropPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/drop YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_DropPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_DropPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/drop YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_DropPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/drop"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/drop"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_DropPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "drop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction).Drop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/drop"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/drop"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_DropPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "drop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction).Drop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/drop"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config/drop"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_DropPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "drop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction).Drop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/drop"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config/drop"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_DropPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "drop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction).Drop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDot1PPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-dot1p YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDot1PPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDot1PPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-dot1p YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDot1PPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDot1PPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDot1PPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDot1PPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDot1PPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDscpPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-dscp YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDscpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDscpPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-dscp YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDscpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDscpPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDscpPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDscpPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDscpPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetMplsTcPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-mpls-tc YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetMplsTcPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetMplsTcPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-mpls-tc YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetMplsTcPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetMplsTcPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetMplsTcPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetMplsTcPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetMplsTcPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPath struct {
	*ygnmi.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPathAny struct {
	*ygnmi.NodePath
}

// Drop (leaf): If set to true, packets within this context are dropped.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/drop"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/*/drop"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPath) Drop() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_DropPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_DropPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "drop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Drop (leaf): If set to true, packets within this context are dropped.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/drop"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/*/drop"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPathAny) Drop() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_DropPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_DropPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "drop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetDot1P (leaf): Sets the 3-bit class-of-service value in the
// Ethernet packet header for 802.1Q VLAN-tagged packets,
// also known as PCP (priority code point).
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/*/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPath) SetDot1P() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDot1PPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDot1PPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dot1p"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetDot1P (leaf): Sets the 3-bit class-of-service value in the
// Ethernet packet header for 802.1Q VLAN-tagged packets,
// also known as PCP (priority code point).
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/*/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPathAny) SetDot1P() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDot1PPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDot1PPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dot1p"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetDscp (leaf): Sets the 6-bit DSCP (differentiated services code point)
// value in the IP packet header.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/*/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPath) SetDscp() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDscpPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDscpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetDscp (leaf): Sets the 6-bit DSCP (differentiated services code point)
// value in the IP packet header.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/*/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPathAny) SetDscp() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDscpPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDscpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMplsTc (leaf): Sets the 3-bit traffic class value (also referred to as EXP
// or CoS) in MPLS packets.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/*/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPath) SetMplsTc() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetMplsTcPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetMplsTcPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-mpls-tc"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMplsTc (leaf): Sets the 3-bit traffic class value (also referred to as EXP
// or CoS) in MPLS packets.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/*/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPathAny) SetMplsTc() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetMplsTcPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetMplsTcPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-mpls-tc"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPath) State() ygnmi.SingletonQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction] {
	return ygnmi.NewSingletonQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPathAny) State() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPath) Config() ygnmi.ConfigQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction] {
	return ygnmi.NewConfigQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_DropPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/drop YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_DropPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_DropPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/drop YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_DropPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/drop"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/drop"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_DropPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "drop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction).Drop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/drop"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/drop"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_DropPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "drop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction).Drop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/drop"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config/drop"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_DropPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "drop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction).Drop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/drop"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config/drop"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_DropPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "drop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction).Drop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDot1PPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-dot1p YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDot1PPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDot1PPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-dot1p YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDot1PPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDot1PPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDot1PPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDot1PPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDot1PPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDscpPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-dscp YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDscpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDscpPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-dscp YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDscpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDscpPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDscpPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDscpPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDscpPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetMplsTcPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-mpls-tc YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetMplsTcPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetMplsTcPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-mpls-tc YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetMplsTcPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetMplsTcPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetMplsTcPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetMplsTcPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetMplsTcPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPath struct {
	*ygnmi.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPathAny struct {
	*ygnmi.NodePath
}

// Drop (leaf): If set to true, packets within this context are dropped.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/drop"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/*/drop"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPath) Drop() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_DropPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_DropPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "drop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Drop (leaf): If set to true, packets within this context are dropped.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/drop"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/*/drop"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPathAny) Drop() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_DropPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_DropPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "drop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetDot1P (leaf): Sets the 3-bit class-of-service value in the
// Ethernet packet header for 802.1Q VLAN-tagged packets,
// also known as PCP (priority code point).
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/*/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPath) SetDot1P() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDot1PPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDot1PPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dot1p"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetDot1P (leaf): Sets the 3-bit class-of-service value in the
// Ethernet packet header for 802.1Q VLAN-tagged packets,
// also known as PCP (priority code point).
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/*/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPathAny) SetDot1P() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDot1PPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDot1PPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dot1p"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetDscp (leaf): Sets the 6-bit DSCP (differentiated services code point)
// value in the IP packet header.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/*/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPath) SetDscp() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDscpPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDscpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetDscp (leaf): Sets the 6-bit DSCP (differentiated services code point)
// value in the IP packet header.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/*/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPathAny) SetDscp() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDscpPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDscpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMplsTc (leaf): Sets the 3-bit traffic class value (also referred to as EXP
// or CoS) in MPLS packets.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/*/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPath) SetMplsTc() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetMplsTcPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetMplsTcPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-mpls-tc"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMplsTc (leaf): Sets the 3-bit traffic class value (also referred to as EXP
// or CoS) in MPLS packets.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/*/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPathAny) SetMplsTc() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetMplsTcPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetMplsTcPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-mpls-tc"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPath) State() ygnmi.SingletonQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction] {
	return ygnmi.NewSingletonQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPathAny) State() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPath) Config() ygnmi.ConfigQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction] {
	return ygnmi.NewConfigQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

/*
Package terminaldevice is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.20)
using the following YANG input files:
  - gnmi-collector-metadata.yang
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-common.yang
  - public/release/models/aft/openconfig-aft-ethernet.yang
  - public/release/models/aft/openconfig-aft-ipv4.yang
  - public/release/models/aft/openconfig-aft-ipv6.yang
  - public/release/models/aft/openconfig-aft-mpls.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-pf.yang
  - public/release/models/aft/openconfig-aft-state-synced.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft-types.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/ate/openconfig-ate-flow.yang
  - public/release/models/ate/openconfig-ate-intf.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/interfaces/openconfig-if-rates.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/local-routing/openconfig-local-routing-network-instance.yang
  - public/release/models/macsec/openconfig-macsec.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/network-instance/openconfig-network-instance-l2.yang
  - public/release/models/network-instance/openconfig-network-instance-static.yang
  - public/release/models/oam/openconfig-cfm-types.yang
  - public/release/models/oam/openconfig-oam.yang
  - public/release/models/oam/openconfig-oam-cfm.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-terminal-device.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-area-interface.yang
  - public/release/models/ospf/openconfig-ospf-area.yang
  - public/release/models/ospf/openconfig-ospf-common.yang
  - public/release/models/ospf/openconfig-ospf-global.yang
  - public/release/models/ospf/openconfig-ospf-types.yang
  - public/release/models/ospf/openconfig-ospf.yang
  - public/release/models/ospf/openconfig-ospfv3-area-interface.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-pf-forwarding-policies.yang
  - public/release/models/policy-forwarding/openconfig-pf-interfaces.yang
  - public/release/models/policy-forwarding/openconfig-pf-path-groups.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-routing-policy.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package terminaldevice

import (
	"reflect"

	oc "github.com/openconfig/ondatra/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// TerminalDevicePath represents the /openconfig-terminal-device/terminal-device YANG schema element.
type TerminalDevicePath struct {
	*ygnmi.NodePath
}

// TerminalDevicePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device YANG schema element.
type TerminalDevicePathAny struct {
	*ygnmi.NodePath
}

// ChannelAny (list): List of logical channels
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "logical-channels/channel"
//	Path from root:       "/terminal-device/logical-channels/channel"
func (n *TerminalDevicePath) ChannelAny() *TerminalDevice_ChannelPathAny {
	ps := &TerminalDevice_ChannelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"logical-channels", "channel"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// ChannelAny (list): List of logical channels
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "logical-channels/channel"
//	Path from root:       "/terminal-device/logical-channels/channel"
func (n *TerminalDevicePathAny) ChannelAny() *TerminalDevice_ChannelPathAny {
	ps := &TerminalDevice_ChannelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"logical-channels", "channel"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// Channel (list): List of logical channels
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "logical-channels/channel"
//	Path from root:       "/terminal-device/logical-channels/channel"
//
//	Index: uint32
func (n *TerminalDevicePath) Channel(Index uint32) *TerminalDevice_ChannelPath {
	ps := &TerminalDevice_ChannelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"logical-channels", "channel"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// Channel (list): List of logical channels
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "logical-channels/channel"
//	Path from root:       "/terminal-device/logical-channels/channel"
//
//	Index: uint32
func (n *TerminalDevicePathAny) Channel(Index uint32) *TerminalDevice_ChannelPathAny {
	ps := &TerminalDevice_ChannelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"logical-channels", "channel"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// ChannelMap (list): List of logical channels
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "logical-channels/channel"
//	Path from root:       "/terminal-device/logical-channels/channel"
func (n *TerminalDevicePath) ChannelMap() *TerminalDevice_ChannelPathMap {
	ps := &TerminalDevice_ChannelPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"logical-channels"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ChannelMap (list): List of logical channels
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "logical-channels/channel"
//	Path from root:       "/terminal-device/logical-channels/channel"
func (n *TerminalDevicePathAny) ChannelMap() *TerminalDevice_ChannelPathMapAny {
	ps := &TerminalDevice_ChannelPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"logical-channels"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ModeAny (list): List of operational modes supported by the platform.
// The operational mode provides a platform-defined summary
// of information such as symbol rate, modulation, pulse
// shaping, etc.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "operational-modes/mode"
//	Path from root:       "/terminal-device/operational-modes/mode"
func (n *TerminalDevicePath) ModeAny() *TerminalDevice_ModePathAny {
	ps := &TerminalDevice_ModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"operational-modes", "mode"},
			map[string]interface{}{"mode-id": "*"},
			n,
		),
	}
	return ps
}

// ModeAny (list): List of operational modes supported by the platform.
// The operational mode provides a platform-defined summary
// of information such as symbol rate, modulation, pulse
// shaping, etc.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "operational-modes/mode"
//	Path from root:       "/terminal-device/operational-modes/mode"
func (n *TerminalDevicePathAny) ModeAny() *TerminalDevice_ModePathAny {
	ps := &TerminalDevice_ModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"operational-modes", "mode"},
			map[string]interface{}{"mode-id": "*"},
			n,
		),
	}
	return ps
}

// Mode (list): List of operational modes supported by the platform.
// The operational mode provides a platform-defined summary
// of information such as symbol rate, modulation, pulse
// shaping, etc.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "operational-modes/mode"
//	Path from root:       "/terminal-device/operational-modes/mode"
//
//	ModeId: uint16
func (n *TerminalDevicePath) Mode(ModeId uint16) *TerminalDevice_ModePath {
	ps := &TerminalDevice_ModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"operational-modes", "mode"},
			map[string]interface{}{"mode-id": ModeId},
			n,
		),
	}
	return ps
}

// Mode (list): List of operational modes supported by the platform.
// The operational mode provides a platform-defined summary
// of information such as symbol rate, modulation, pulse
// shaping, etc.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "operational-modes/mode"
//	Path from root:       "/terminal-device/operational-modes/mode"
//
//	ModeId: uint16
func (n *TerminalDevicePathAny) Mode(ModeId uint16) *TerminalDevice_ModePathAny {
	ps := &TerminalDevice_ModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"operational-modes", "mode"},
			map[string]interface{}{"mode-id": ModeId},
			n,
		),
	}
	return ps
}

// ModeMap (list): List of operational modes supported by the platform.
// The operational mode provides a platform-defined summary
// of information such as symbol rate, modulation, pulse
// shaping, etc.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "operational-modes/mode"
//	Path from root:       "/terminal-device/operational-modes/mode"
func (n *TerminalDevicePath) ModeMap() *TerminalDevice_ModePathMap {
	ps := &TerminalDevice_ModePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"operational-modes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ModeMap (list): List of operational modes supported by the platform.
// The operational mode provides a platform-defined summary
// of information such as symbol rate, modulation, pulse
// shaping, etc.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "operational-modes/mode"
//	Path from root:       "/terminal-device/operational-modes/mode"
func (n *TerminalDevicePathAny) ModeMap() *TerminalDevice_ModePathMapAny {
	ps := &TerminalDevice_ModePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"operational-modes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevicePath) State() ygnmi.SingletonQuery[*oc.TerminalDevice] {
	return ygnmi.NewSingletonQuery[*oc.TerminalDevice](
		"TerminalDevice",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevicePathAny) State() ygnmi.WildcardQuery[*oc.TerminalDevice] {
	return ygnmi.NewWildcardQuery[*oc.TerminalDevice](
		"TerminalDevice",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *TerminalDevicePath) Config() ygnmi.ConfigQuery[*oc.TerminalDevice] {
	return ygnmi.NewConfigQuery[*oc.TerminalDevice](
		"TerminalDevice",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *TerminalDevicePathAny) Config() ygnmi.WildcardQuery[*oc.TerminalDevice] {
	return ygnmi.NewWildcardQuery[*oc.TerminalDevice](
		"TerminalDevice",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_AdminStatePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/state/admin-state YANG schema element.
type TerminalDevice_Channel_AdminStatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_AdminStatePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/state/admin-state YANG schema element.
type TerminalDevice_Channel_AdminStatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/admin-state"
//	Path from root:       "/terminal-device/logical-channels/channel/state/admin-state"
func (n *TerminalDevice_Channel_AdminStatePath) State() ygnmi.SingletonQuery[oc.E_TerminalDevice_AdminStateType] {
	return ygnmi.NewSingletonQuery[oc.E_TerminalDevice_AdminStateType](
		"TerminalDevice_Channel",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "admin-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TerminalDevice_AdminStateType, bool) {
			ret := gs.(*oc.TerminalDevice_Channel).AdminState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/admin-state"
//	Path from root:       "/terminal-device/logical-channels/channel/state/admin-state"
func (n *TerminalDevice_Channel_AdminStatePathAny) State() ygnmi.WildcardQuery[oc.E_TerminalDevice_AdminStateType] {
	return ygnmi.NewWildcardQuery[oc.E_TerminalDevice_AdminStateType](
		"TerminalDevice_Channel",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "admin-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TerminalDevice_AdminStateType, bool) {
			ret := gs.(*oc.TerminalDevice_Channel).AdminState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/admin-state"
//	Path from root:       "/terminal-device/logical-channels/channel/config/admin-state"
func (n *TerminalDevice_Channel_AdminStatePath) Config() ygnmi.ConfigQuery[oc.E_TerminalDevice_AdminStateType] {
	return ygnmi.NewConfigQuery[oc.E_TerminalDevice_AdminStateType](
		"TerminalDevice_Channel",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "admin-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TerminalDevice_AdminStateType, bool) {
			ret := gs.(*oc.TerminalDevice_Channel).AdminState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/admin-state"
//	Path from root:       "/terminal-device/logical-channels/channel/config/admin-state"
func (n *TerminalDevice_Channel_AdminStatePathAny) Config() ygnmi.WildcardQuery[oc.E_TerminalDevice_AdminStateType] {
	return ygnmi.NewWildcardQuery[oc.E_TerminalDevice_AdminStateType](
		"TerminalDevice_Channel",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "admin-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TerminalDevice_AdminStateType, bool) {
			ret := gs.(*oc.TerminalDevice_Channel).AdminState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_ClientMappingModePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/state/client-mapping-mode YANG schema element.
type TerminalDevice_Channel_ClientMappingModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_ClientMappingModePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/state/client-mapping-mode YANG schema element.
type TerminalDevice_Channel_ClientMappingModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/client-mapping-mode"
//	Path from root:       "/terminal-device/logical-channels/channel/state/client-mapping-mode"
func (n *TerminalDevice_Channel_ClientMappingModePath) State() ygnmi.SingletonQuery[oc.E_TransportTypes_CLIENT_MAPPING_MODE] {
	return ygnmi.NewSingletonQuery[oc.E_TransportTypes_CLIENT_MAPPING_MODE](
		"TerminalDevice_Channel",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "client-mapping-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_CLIENT_MAPPING_MODE, bool) {
			ret := gs.(*oc.TerminalDevice_Channel).ClientMappingMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/client-mapping-mode"
//	Path from root:       "/terminal-device/logical-channels/channel/state/client-mapping-mode"
func (n *TerminalDevice_Channel_ClientMappingModePathAny) State() ygnmi.WildcardQuery[oc.E_TransportTypes_CLIENT_MAPPING_MODE] {
	return ygnmi.NewWildcardQuery[oc.E_TransportTypes_CLIENT_MAPPING_MODE](
		"TerminalDevice_Channel",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "client-mapping-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_CLIENT_MAPPING_MODE, bool) {
			ret := gs.(*oc.TerminalDevice_Channel).ClientMappingMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/client-mapping-mode"
//	Path from root:       "/terminal-device/logical-channels/channel/config/client-mapping-mode"
func (n *TerminalDevice_Channel_ClientMappingModePath) Config() ygnmi.ConfigQuery[oc.E_TransportTypes_CLIENT_MAPPING_MODE] {
	return ygnmi.NewConfigQuery[oc.E_TransportTypes_CLIENT_MAPPING_MODE](
		"TerminalDevice_Channel",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "client-mapping-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_CLIENT_MAPPING_MODE, bool) {
			ret := gs.(*oc.TerminalDevice_Channel).ClientMappingMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/client-mapping-mode"
//	Path from root:       "/terminal-device/logical-channels/channel/config/client-mapping-mode"
func (n *TerminalDevice_Channel_ClientMappingModePathAny) Config() ygnmi.WildcardQuery[oc.E_TransportTypes_CLIENT_MAPPING_MODE] {
	return ygnmi.NewWildcardQuery[oc.E_TransportTypes_CLIENT_MAPPING_MODE](
		"TerminalDevice_Channel",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "client-mapping-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_CLIENT_MAPPING_MODE, bool) {
			ret := gs.(*oc.TerminalDevice_Channel).ClientMappingMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_DescriptionPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/state/description YANG schema element.
type TerminalDevice_Channel_DescriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_DescriptionPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/state/description YANG schema element.
type TerminalDevice_Channel_DescriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/description"
//	Path from root:       "/terminal-device/logical-channels/channel/state/description"
func (n *TerminalDevice_Channel_DescriptionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"TerminalDevice_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/description"
//	Path from root:       "/terminal-device/logical-channels/channel/state/description"
func (n *TerminalDevice_Channel_DescriptionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"TerminalDevice_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/description"
//	Path from root:       "/terminal-device/logical-channels/channel/config/description"
func (n *TerminalDevice_Channel_DescriptionPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"TerminalDevice_Channel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/description"
//	Path from root:       "/terminal-device/logical-channels/channel/config/description"
func (n *TerminalDevice_Channel_DescriptionPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"TerminalDevice_Channel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_IndexPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/state/index YANG schema element.
type TerminalDevice_Channel_IndexPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_IndexPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/state/index YANG schema element.
type TerminalDevice_Channel_IndexPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/index"
//	Path from root:       "/terminal-device/logical-channels/channel/state/index"
func (n *TerminalDevice_Channel_IndexPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"TerminalDevice_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.TerminalDevice_Channel).Index
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/index"
//	Path from root:       "/terminal-device/logical-channels/channel/state/index"
func (n *TerminalDevice_Channel_IndexPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"TerminalDevice_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.TerminalDevice_Channel).Index
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/index"
//	Path from root:       "/terminal-device/logical-channels/channel/config/index"
func (n *TerminalDevice_Channel_IndexPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"TerminalDevice_Channel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.TerminalDevice_Channel).Index
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/index"
//	Path from root:       "/terminal-device/logical-channels/channel/config/index"
func (n *TerminalDevice_Channel_IndexPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"TerminalDevice_Channel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.TerminalDevice_Channel).Index
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_LinkStatePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/state/link-state YANG schema element.
type TerminalDevice_Channel_LinkStatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_LinkStatePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/state/link-state YANG schema element.
type TerminalDevice_Channel_LinkStatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/link-state"
//	Path from root:       "/terminal-device/logical-channels/channel/state/link-state"
func (n *TerminalDevice_Channel_LinkStatePath) State() ygnmi.SingletonQuery[oc.E_Channel_LinkState] {
	return ygnmi.NewSingletonQuery[oc.E_Channel_LinkState](
		"TerminalDevice_Channel",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "link-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Channel_LinkState, bool) {
			ret := gs.(*oc.TerminalDevice_Channel).LinkState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/link-state"
//	Path from root:       "/terminal-device/logical-channels/channel/state/link-state"
func (n *TerminalDevice_Channel_LinkStatePathAny) State() ygnmi.WildcardQuery[oc.E_Channel_LinkState] {
	return ygnmi.NewWildcardQuery[oc.E_Channel_LinkState](
		"TerminalDevice_Channel",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "link-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Channel_LinkState, bool) {
			ret := gs.(*oc.TerminalDevice_Channel).LinkState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_LogicalChannelTypePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/state/logical-channel-type YANG schema element.
type TerminalDevice_Channel_LogicalChannelTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_LogicalChannelTypePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/state/logical-channel-type YANG schema element.
type TerminalDevice_Channel_LogicalChannelTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/logical-channel-type"
//	Path from root:       "/terminal-device/logical-channels/channel/state/logical-channel-type"
func (n *TerminalDevice_Channel_LogicalChannelTypePath) State() ygnmi.SingletonQuery[oc.E_TransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_TransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE](
		"TerminalDevice_Channel",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "logical-channel-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.TerminalDevice_Channel).LogicalChannelType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/logical-channel-type"
//	Path from root:       "/terminal-device/logical-channels/channel/state/logical-channel-type"
func (n *TerminalDevice_Channel_LogicalChannelTypePathAny) State() ygnmi.WildcardQuery[oc.E_TransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_TransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE](
		"TerminalDevice_Channel",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "logical-channel-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.TerminalDevice_Channel).LogicalChannelType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/logical-channel-type"
//	Path from root:       "/terminal-device/logical-channels/channel/config/logical-channel-type"
func (n *TerminalDevice_Channel_LogicalChannelTypePath) Config() ygnmi.ConfigQuery[oc.E_TransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_TransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE](
		"TerminalDevice_Channel",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "logical-channel-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.TerminalDevice_Channel).LogicalChannelType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/logical-channel-type"
//	Path from root:       "/terminal-device/logical-channels/channel/config/logical-channel-type"
func (n *TerminalDevice_Channel_LogicalChannelTypePathAny) Config() ygnmi.WildcardQuery[oc.E_TransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_TransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE](
		"TerminalDevice_Channel",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "logical-channel-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.TerminalDevice_Channel).LogicalChannelType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_LoopbackModePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/state/loopback-mode YANG schema element.
type TerminalDevice_Channel_LoopbackModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_LoopbackModePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/state/loopback-mode YANG schema element.
type TerminalDevice_Channel_LoopbackModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/loopback-mode"
//	Path from root:       "/terminal-device/logical-channels/channel/state/loopback-mode"
func (n *TerminalDevice_Channel_LoopbackModePath) State() ygnmi.SingletonQuery[oc.E_TerminalDevice_LoopbackModeType] {
	return ygnmi.NewSingletonQuery[oc.E_TerminalDevice_LoopbackModeType](
		"TerminalDevice_Channel",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "loopback-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TerminalDevice_LoopbackModeType, bool) {
			ret := gs.(*oc.TerminalDevice_Channel).LoopbackMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/loopback-mode"
//	Path from root:       "/terminal-device/logical-channels/channel/state/loopback-mode"
func (n *TerminalDevice_Channel_LoopbackModePathAny) State() ygnmi.WildcardQuery[oc.E_TerminalDevice_LoopbackModeType] {
	return ygnmi.NewWildcardQuery[oc.E_TerminalDevice_LoopbackModeType](
		"TerminalDevice_Channel",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "loopback-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TerminalDevice_LoopbackModeType, bool) {
			ret := gs.(*oc.TerminalDevice_Channel).LoopbackMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/loopback-mode"
//	Path from root:       "/terminal-device/logical-channels/channel/config/loopback-mode"
func (n *TerminalDevice_Channel_LoopbackModePath) Config() ygnmi.ConfigQuery[oc.E_TerminalDevice_LoopbackModeType] {
	return ygnmi.NewConfigQuery[oc.E_TerminalDevice_LoopbackModeType](
		"TerminalDevice_Channel",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "loopback-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TerminalDevice_LoopbackModeType, bool) {
			ret := gs.(*oc.TerminalDevice_Channel).LoopbackMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/loopback-mode"
//	Path from root:       "/terminal-device/logical-channels/channel/config/loopback-mode"
func (n *TerminalDevice_Channel_LoopbackModePathAny) Config() ygnmi.WildcardQuery[oc.E_TerminalDevice_LoopbackModeType] {
	return ygnmi.NewWildcardQuery[oc.E_TerminalDevice_LoopbackModeType](
		"TerminalDevice_Channel",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "loopback-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TerminalDevice_LoopbackModeType, bool) {
			ret := gs.(*oc.TerminalDevice_Channel).LoopbackMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_RateClassPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/state/rate-class YANG schema element.
type TerminalDevice_Channel_RateClassPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_RateClassPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/state/rate-class YANG schema element.
type TerminalDevice_Channel_RateClassPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/rate-class"
//	Path from root:       "/terminal-device/logical-channels/channel/state/rate-class"
func (n *TerminalDevice_Channel_RateClassPath) State() ygnmi.SingletonQuery[oc.E_TransportTypes_TRIBUTARY_RATE_CLASS_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_TransportTypes_TRIBUTARY_RATE_CLASS_TYPE](
		"TerminalDevice_Channel",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "rate-class"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_TRIBUTARY_RATE_CLASS_TYPE, bool) {
			ret := gs.(*oc.TerminalDevice_Channel).RateClass
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/rate-class"
//	Path from root:       "/terminal-device/logical-channels/channel/state/rate-class"
func (n *TerminalDevice_Channel_RateClassPathAny) State() ygnmi.WildcardQuery[oc.E_TransportTypes_TRIBUTARY_RATE_CLASS_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_TransportTypes_TRIBUTARY_RATE_CLASS_TYPE](
		"TerminalDevice_Channel",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "rate-class"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_TRIBUTARY_RATE_CLASS_TYPE, bool) {
			ret := gs.(*oc.TerminalDevice_Channel).RateClass
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/rate-class"
//	Path from root:       "/terminal-device/logical-channels/channel/config/rate-class"
func (n *TerminalDevice_Channel_RateClassPath) Config() ygnmi.ConfigQuery[oc.E_TransportTypes_TRIBUTARY_RATE_CLASS_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_TransportTypes_TRIBUTARY_RATE_CLASS_TYPE](
		"TerminalDevice_Channel",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "rate-class"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_TRIBUTARY_RATE_CLASS_TYPE, bool) {
			ret := gs.(*oc.TerminalDevice_Channel).RateClass
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/rate-class"
//	Path from root:       "/terminal-device/logical-channels/channel/config/rate-class"
func (n *TerminalDevice_Channel_RateClassPathAny) Config() ygnmi.WildcardQuery[oc.E_TransportTypes_TRIBUTARY_RATE_CLASS_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_TransportTypes_TRIBUTARY_RATE_CLASS_TYPE](
		"TerminalDevice_Channel",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "rate-class"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_TRIBUTARY_RATE_CLASS_TYPE, bool) {
			ret := gs.(*oc.TerminalDevice_Channel).RateClass
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_TestSignalPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/state/test-signal YANG schema element.
type TerminalDevice_Channel_TestSignalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_TestSignalPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/state/test-signal YANG schema element.
type TerminalDevice_Channel_TestSignalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/test-signal"
//	Path from root:       "/terminal-device/logical-channels/channel/state/test-signal"
func (n *TerminalDevice_Channel_TestSignalPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"TerminalDevice_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "test-signal"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.TerminalDevice_Channel).TestSignal
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/test-signal"
//	Path from root:       "/terminal-device/logical-channels/channel/state/test-signal"
func (n *TerminalDevice_Channel_TestSignalPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"TerminalDevice_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "test-signal"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.TerminalDevice_Channel).TestSignal
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/test-signal"
//	Path from root:       "/terminal-device/logical-channels/channel/config/test-signal"
func (n *TerminalDevice_Channel_TestSignalPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"TerminalDevice_Channel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "test-signal"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.TerminalDevice_Channel).TestSignal
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/test-signal"
//	Path from root:       "/terminal-device/logical-channels/channel/config/test-signal"
func (n *TerminalDevice_Channel_TestSignalPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"TerminalDevice_Channel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "test-signal"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.TerminalDevice_Channel).TestSignal
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_TribProtocolPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/state/trib-protocol YANG schema element.
type TerminalDevice_Channel_TribProtocolPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_TribProtocolPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/state/trib-protocol YANG schema element.
type TerminalDevice_Channel_TribProtocolPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/trib-protocol"
//	Path from root:       "/terminal-device/logical-channels/channel/state/trib-protocol"
func (n *TerminalDevice_Channel_TribProtocolPath) State() ygnmi.SingletonQuery[oc.E_TransportTypes_TRIBUTARY_PROTOCOL_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_TransportTypes_TRIBUTARY_PROTOCOL_TYPE](
		"TerminalDevice_Channel",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "trib-protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_TRIBUTARY_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.TerminalDevice_Channel).TribProtocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/trib-protocol"
//	Path from root:       "/terminal-device/logical-channels/channel/state/trib-protocol"
func (n *TerminalDevice_Channel_TribProtocolPathAny) State() ygnmi.WildcardQuery[oc.E_TransportTypes_TRIBUTARY_PROTOCOL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_TransportTypes_TRIBUTARY_PROTOCOL_TYPE](
		"TerminalDevice_Channel",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "trib-protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_TRIBUTARY_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.TerminalDevice_Channel).TribProtocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/trib-protocol"
//	Path from root:       "/terminal-device/logical-channels/channel/config/trib-protocol"
func (n *TerminalDevice_Channel_TribProtocolPath) Config() ygnmi.ConfigQuery[oc.E_TransportTypes_TRIBUTARY_PROTOCOL_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_TransportTypes_TRIBUTARY_PROTOCOL_TYPE](
		"TerminalDevice_Channel",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "trib-protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_TRIBUTARY_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.TerminalDevice_Channel).TribProtocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/trib-protocol"
//	Path from root:       "/terminal-device/logical-channels/channel/config/trib-protocol"
func (n *TerminalDevice_Channel_TribProtocolPathAny) Config() ygnmi.WildcardQuery[oc.E_TransportTypes_TRIBUTARY_PROTOCOL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_TransportTypes_TRIBUTARY_PROTOCOL_TYPE](
		"TerminalDevice_Channel",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "trib-protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_TRIBUTARY_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.TerminalDevice_Channel).TribProtocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_ChannelPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel YANG schema element.
type TerminalDevice_ChannelPath struct {
	*ygnmi.NodePath
}

// TerminalDevice_ChannelPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel YANG schema element.
type TerminalDevice_ChannelPathAny struct {
	*ygnmi.NodePath
}

// TerminalDevice_ChannelPathMap represents the /openconfig-terminal-device/terminal-device/logical-channels/channel YANG schema element.
type TerminalDevice_ChannelPathMap struct {
	*ygnmi.NodePath
}

// TerminalDevice_ChannelPathMapAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel YANG schema element.
type TerminalDevice_ChannelPathMapAny struct {
	*ygnmi.NodePath
}

// AdminState (leaf): Sets the admin state of the logical channel
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/admin-state"
//	Path from root:       "/terminal-device/logical-channels/channel/*/admin-state"
func (n *TerminalDevice_ChannelPath) AdminState() *TerminalDevice_Channel_AdminStatePath {
	ps := &TerminalDevice_Channel_AdminStatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "admin-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdminState (leaf): Sets the admin state of the logical channel
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/admin-state"
//	Path from root:       "/terminal-device/logical-channels/channel/*/admin-state"
func (n *TerminalDevice_ChannelPathAny) AdminState() *TerminalDevice_Channel_AdminStatePathAny {
	ps := &TerminalDevice_Channel_AdminStatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "admin-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AssignmentAny (list): Logical channel elements may be assigned directly to
// optical channels for line-side transmission, or can be
// further groomed into additional stages of logical channel
// elements.  The grooming can multiplex (i.e., split the
// current element into multiple elements in the subsequent
// stage) or de-multiplex (i.e., combine the current element
// with other elements into the same element in the subsequent
// stage) logical elements in each stage.
//
// Note that to support the ability to groom the logical
// elements, the list of logical channel elements should be
// populated with an entry for the logical elements at
// each stage, starting with the initial assignment from the
// respective client physical port.
//
// Each logical element assignment consists of a pointer to
// an element in the next stage, or to an optical channel,
// along with a bandwidth allocation for the corresponding
// assignment (e.g., to split or combine signal).
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "logical-channel-assignments/assignment"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment"
func (n *TerminalDevice_ChannelPath) AssignmentAny() *TerminalDevice_Channel_AssignmentPathAny {
	ps := &TerminalDevice_Channel_AssignmentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"logical-channel-assignments", "assignment"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// AssignmentAny (list): Logical channel elements may be assigned directly to
// optical channels for line-side transmission, or can be
// further groomed into additional stages of logical channel
// elements.  The grooming can multiplex (i.e., split the
// current element into multiple elements in the subsequent
// stage) or de-multiplex (i.e., combine the current element
// with other elements into the same element in the subsequent
// stage) logical elements in each stage.
//
// Note that to support the ability to groom the logical
// elements, the list of logical channel elements should be
// populated with an entry for the logical elements at
// each stage, starting with the initial assignment from the
// respective client physical port.
//
// Each logical element assignment consists of a pointer to
// an element in the next stage, or to an optical channel,
// along with a bandwidth allocation for the corresponding
// assignment (e.g., to split or combine signal).
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "logical-channel-assignments/assignment"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment"
func (n *TerminalDevice_ChannelPathAny) AssignmentAny() *TerminalDevice_Channel_AssignmentPathAny {
	ps := &TerminalDevice_Channel_AssignmentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"logical-channel-assignments", "assignment"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// Assignment (list): Logical channel elements may be assigned directly to
// optical channels for line-side transmission, or can be
// further groomed into additional stages of logical channel
// elements.  The grooming can multiplex (i.e., split the
// current element into multiple elements in the subsequent
// stage) or de-multiplex (i.e., combine the current element
// with other elements into the same element in the subsequent
// stage) logical elements in each stage.
//
// Note that to support the ability to groom the logical
// elements, the list of logical channel elements should be
// populated with an entry for the logical elements at
// each stage, starting with the initial assignment from the
// respective client physical port.
//
// Each logical element assignment consists of a pointer to
// an element in the next stage, or to an optical channel,
// along with a bandwidth allocation for the corresponding
// assignment (e.g., to split or combine signal).
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "logical-channel-assignments/assignment"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment"
//
//	Index: uint32
func (n *TerminalDevice_ChannelPath) Assignment(Index uint32) *TerminalDevice_Channel_AssignmentPath {
	ps := &TerminalDevice_Channel_AssignmentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"logical-channel-assignments", "assignment"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// Assignment (list): Logical channel elements may be assigned directly to
// optical channels for line-side transmission, or can be
// further groomed into additional stages of logical channel
// elements.  The grooming can multiplex (i.e., split the
// current element into multiple elements in the subsequent
// stage) or de-multiplex (i.e., combine the current element
// with other elements into the same element in the subsequent
// stage) logical elements in each stage.
//
// Note that to support the ability to groom the logical
// elements, the list of logical channel elements should be
// populated with an entry for the logical elements at
// each stage, starting with the initial assignment from the
// respective client physical port.
//
// Each logical element assignment consists of a pointer to
// an element in the next stage, or to an optical channel,
// along with a bandwidth allocation for the corresponding
// assignment (e.g., to split or combine signal).
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "logical-channel-assignments/assignment"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment"
//
//	Index: uint32
func (n *TerminalDevice_ChannelPathAny) Assignment(Index uint32) *TerminalDevice_Channel_AssignmentPathAny {
	ps := &TerminalDevice_Channel_AssignmentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"logical-channel-assignments", "assignment"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// AssignmentMap (list): Logical channel elements may be assigned directly to
// optical channels for line-side transmission, or can be
// further groomed into additional stages of logical channel
// elements.  The grooming can multiplex (i.e., split the
// current element into multiple elements in the subsequent
// stage) or de-multiplex (i.e., combine the current element
// with other elements into the same element in the subsequent
// stage) logical elements in each stage.
//
// Note that to support the ability to groom the logical
// elements, the list of logical channel elements should be
// populated with an entry for the logical elements at
// each stage, starting with the initial assignment from the
// respective client physical port.
//
// Each logical element assignment consists of a pointer to
// an element in the next stage, or to an optical channel,
// along with a bandwidth allocation for the corresponding
// assignment (e.g., to split or combine signal).
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "logical-channel-assignments/assignment"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment"
func (n *TerminalDevice_ChannelPath) AssignmentMap() *TerminalDevice_Channel_AssignmentPathMap {
	ps := &TerminalDevice_Channel_AssignmentPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"logical-channel-assignments"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AssignmentMap (list): Logical channel elements may be assigned directly to
// optical channels for line-side transmission, or can be
// further groomed into additional stages of logical channel
// elements.  The grooming can multiplex (i.e., split the
// current element into multiple elements in the subsequent
// stage) or de-multiplex (i.e., combine the current element
// with other elements into the same element in the subsequent
// stage) logical elements in each stage.
//
// Note that to support the ability to groom the logical
// elements, the list of logical channel elements should be
// populated with an entry for the logical elements at
// each stage, starting with the initial assignment from the
// respective client physical port.
//
// Each logical element assignment consists of a pointer to
// an element in the next stage, or to an optical channel,
// along with a bandwidth allocation for the corresponding
// assignment (e.g., to split or combine signal).
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "logical-channel-assignments/assignment"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment"
func (n *TerminalDevice_ChannelPathAny) AssignmentMap() *TerminalDevice_Channel_AssignmentPathMapAny {
	ps := &TerminalDevice_Channel_AssignmentPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"logical-channel-assignments"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ClientMappingMode (leaf): The client side mapping mode internal to the device that
// specifies the number of client electrical interfaces and
// the data rate of each client electrical interface. For
// example, a ZR+ transceiver with an optical line rate of 400G
// could be configured to break out into four 100G client
// signals which might connect to an interface or a
// physical-channel. This would be configured on the aggregate
// logical channel as MODE_4X100G. This is only valid on the
// aggregate logical channel that is connected directly to the
// optical-channel.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/client-mapping-mode"
//	Path from root:       "/terminal-device/logical-channels/channel/*/client-mapping-mode"
func (n *TerminalDevice_ChannelPath) ClientMappingMode() *TerminalDevice_Channel_ClientMappingModePath {
	ps := &TerminalDevice_Channel_ClientMappingModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "client-mapping-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ClientMappingMode (leaf): The client side mapping mode internal to the device that
// specifies the number of client electrical interfaces and
// the data rate of each client electrical interface. For
// example, a ZR+ transceiver with an optical line rate of 400G
// could be configured to break out into four 100G client
// signals which might connect to an interface or a
// physical-channel. This would be configured on the aggregate
// logical channel as MODE_4X100G. This is only valid on the
// aggregate logical channel that is connected directly to the
// optical-channel.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/client-mapping-mode"
//	Path from root:       "/terminal-device/logical-channels/channel/*/client-mapping-mode"
func (n *TerminalDevice_ChannelPathAny) ClientMappingMode() *TerminalDevice_Channel_ClientMappingModePathAny {
	ps := &TerminalDevice_Channel_ClientMappingModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "client-mapping-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Description (leaf): Description of the logical channel
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/description"
//	Path from root:       "/terminal-device/logical-channels/channel/*/description"
func (n *TerminalDevice_ChannelPath) Description() *TerminalDevice_Channel_DescriptionPath {
	ps := &TerminalDevice_Channel_DescriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Description (leaf): Description of the logical channel
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/description"
//	Path from root:       "/terminal-device/logical-channels/channel/*/description"
func (n *TerminalDevice_ChannelPathAny) Description() *TerminalDevice_Channel_DescriptionPathAny {
	ps := &TerminalDevice_Channel_DescriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ethernet (container): Top level container for data related to Ethernet framing
// for the logical channel
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "ethernet"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet"
func (n *TerminalDevice_ChannelPath) Ethernet() *TerminalDevice_Channel_EthernetPath {
	ps := &TerminalDevice_Channel_EthernetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ethernet"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ethernet (container): Top level container for data related to Ethernet framing
// for the logical channel
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "ethernet"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet"
func (n *TerminalDevice_ChannelPathAny) Ethernet() *TerminalDevice_Channel_EthernetPathAny {
	ps := &TerminalDevice_Channel_EthernetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ethernet"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Index (leaf): Index of the current logical channel
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/index"
//	Path from root:       "/terminal-device/logical-channels/channel/*/index"
func (n *TerminalDevice_ChannelPath) Index() *TerminalDevice_Channel_IndexPath {
	ps := &TerminalDevice_Channel_IndexPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): Index of the current logical channel
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/index"
//	Path from root:       "/terminal-device/logical-channels/channel/*/index"
func (n *TerminalDevice_ChannelPathAny) Index() *TerminalDevice_Channel_IndexPathAny {
	ps := &TerminalDevice_Channel_IndexPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ingress (container): Top-level container for specifying references to the
// source of signal for the logical channel, either a
// transceiver, individual physical channels, or an interface
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "ingress"
//	Path from root:       "/terminal-device/logical-channels/channel/ingress"
func (n *TerminalDevice_ChannelPath) Ingress() *TerminalDevice_Channel_IngressPath {
	ps := &TerminalDevice_Channel_IngressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ingress"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ingress (container): Top-level container for specifying references to the
// source of signal for the logical channel, either a
// transceiver, individual physical channels, or an interface
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "ingress"
//	Path from root:       "/terminal-device/logical-channels/channel/ingress"
func (n *TerminalDevice_ChannelPathAny) Ingress() *TerminalDevice_Channel_IngressPathAny {
	ps := &TerminalDevice_Channel_IngressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ingress"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LinkState (leaf): Link-state of the Ethernet protocol on the logical channel,
// SONET / SDH framed signal, etc.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/link-state"
//	Path from root:       "/terminal-device/logical-channels/channel/state/link-state"
func (n *TerminalDevice_ChannelPath) LinkState() *TerminalDevice_Channel_LinkStatePath {
	ps := &TerminalDevice_Channel_LinkStatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "link-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LinkState (leaf): Link-state of the Ethernet protocol on the logical channel,
// SONET / SDH framed signal, etc.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/link-state"
//	Path from root:       "/terminal-device/logical-channels/channel/state/link-state"
func (n *TerminalDevice_ChannelPathAny) LinkState() *TerminalDevice_Channel_LinkStatePathAny {
	ps := &TerminalDevice_Channel_LinkStatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "link-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LogicalChannelType (leaf): The type / stage of the logical element determines the
// configuration and operational state parameters (PMs)
// available for the logical element
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/logical-channel-type"
//	Path from root:       "/terminal-device/logical-channels/channel/*/logical-channel-type"
func (n *TerminalDevice_ChannelPath) LogicalChannelType() *TerminalDevice_Channel_LogicalChannelTypePath {
	ps := &TerminalDevice_Channel_LogicalChannelTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "logical-channel-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LogicalChannelType (leaf): The type / stage of the logical element determines the
// configuration and operational state parameters (PMs)
// available for the logical element
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/logical-channel-type"
//	Path from root:       "/terminal-device/logical-channels/channel/*/logical-channel-type"
func (n *TerminalDevice_ChannelPathAny) LogicalChannelType() *TerminalDevice_Channel_LogicalChannelTypePathAny {
	ps := &TerminalDevice_Channel_LogicalChannelTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "logical-channel-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LoopbackMode (leaf): Sets the loopback type on the logical channel. Setting the
// mode to something besides NONE activates the loopback in
// the specified mode.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/loopback-mode"
//	Path from root:       "/terminal-device/logical-channels/channel/*/loopback-mode"
func (n *TerminalDevice_ChannelPath) LoopbackMode() *TerminalDevice_Channel_LoopbackModePath {
	ps := &TerminalDevice_Channel_LoopbackModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "loopback-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LoopbackMode (leaf): Sets the loopback type on the logical channel. Setting the
// mode to something besides NONE activates the loopback in
// the specified mode.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/loopback-mode"
//	Path from root:       "/terminal-device/logical-channels/channel/*/loopback-mode"
func (n *TerminalDevice_ChannelPathAny) LoopbackMode() *TerminalDevice_Channel_LoopbackModePathAny {
	ps := &TerminalDevice_Channel_LoopbackModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "loopback-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Otn (container): Top level container for OTU configuration when logical
// channel framing is using an OTU protocol, e.g., OTU1, OTU3,
// etc.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "otn"
//	Path from root:       "/terminal-device/logical-channels/channel/otn"
func (n *TerminalDevice_ChannelPath) Otn() *TerminalDevice_Channel_OtnPath {
	ps := &TerminalDevice_Channel_OtnPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"otn"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Otn (container): Top level container for OTU configuration when logical
// channel framing is using an OTU protocol, e.g., OTU1, OTU3,
// etc.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "otn"
//	Path from root:       "/terminal-device/logical-channels/channel/otn"
func (n *TerminalDevice_ChannelPathAny) Otn() *TerminalDevice_Channel_OtnPathAny {
	ps := &TerminalDevice_Channel_OtnPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"otn"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RateClass (leaf): Rounded bit rate of the tributary signal. Exact bit rate
// will be refined by protocol selection.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/rate-class"
//	Path from root:       "/terminal-device/logical-channels/channel/*/rate-class"
func (n *TerminalDevice_ChannelPath) RateClass() *TerminalDevice_Channel_RateClassPath {
	ps := &TerminalDevice_Channel_RateClassPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "rate-class"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RateClass (leaf): Rounded bit rate of the tributary signal. Exact bit rate
// will be refined by protocol selection.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/rate-class"
//	Path from root:       "/terminal-device/logical-channels/channel/*/rate-class"
func (n *TerminalDevice_ChannelPathAny) RateClass() *TerminalDevice_Channel_RateClassPathAny {
	ps := &TerminalDevice_Channel_RateClassPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "rate-class"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TestSignal (leaf): When enabled the logical channel's DSP will generate a pseudo
// randmon bit stream (PRBS) which can be used during testing.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/test-signal"
//	Path from root:       "/terminal-device/logical-channels/channel/*/test-signal"
func (n *TerminalDevice_ChannelPath) TestSignal() *TerminalDevice_Channel_TestSignalPath {
	ps := &TerminalDevice_Channel_TestSignalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "test-signal"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TestSignal (leaf): When enabled the logical channel's DSP will generate a pseudo
// randmon bit stream (PRBS) which can be used during testing.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/test-signal"
//	Path from root:       "/terminal-device/logical-channels/channel/*/test-signal"
func (n *TerminalDevice_ChannelPathAny) TestSignal() *TerminalDevice_Channel_TestSignalPathAny {
	ps := &TerminalDevice_Channel_TestSignalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "test-signal"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TribProtocol (leaf): Protocol framing of the tributary signal. If this
// LogicalChannel is directly connected to a Client-Port or
// Optical-Channel, this is the protocol of the associated port.
// If the LogicalChannel is connected to other LogicalChannels,
// the TributaryProtocol of the LogicalChannels will define a
// specific mapping/demapping or multiplexing/demultiplexing
// function.
//
// Not all protocols are valid, depending on the value
// of trib-rate-class.  The expectation is that the NMS
// will validate that a correct combination of rate class
// and protocol are specfied.  Basic combinations are:
//
// rate class: 1G
// protocols: 1GE
//
// rate class: 2.5G
// protocols: OC48, STM16
//
// rate class: 10G
// protocols:  10GE LAN, 10GE WAN, OC192, STM64, OTU2, OTU2e,
//
//	OTU1e, ODU2, ODU2e, ODU1e
//
// rate class: 40G
// protocols:  40GE, OC768, STM256, OTU3, ODU3
//
// rate class: 100G
// protocols:  100GE, 100G MLG, OTU4, OTUCn, ODU4
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/trib-protocol"
//	Path from root:       "/terminal-device/logical-channels/channel/*/trib-protocol"
func (n *TerminalDevice_ChannelPath) TribProtocol() *TerminalDevice_Channel_TribProtocolPath {
	ps := &TerminalDevice_Channel_TribProtocolPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "trib-protocol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TribProtocol (leaf): Protocol framing of the tributary signal. If this
// LogicalChannel is directly connected to a Client-Port or
// Optical-Channel, this is the protocol of the associated port.
// If the LogicalChannel is connected to other LogicalChannels,
// the TributaryProtocol of the LogicalChannels will define a
// specific mapping/demapping or multiplexing/demultiplexing
// function.
//
// Not all protocols are valid, depending on the value
// of trib-rate-class.  The expectation is that the NMS
// will validate that a correct combination of rate class
// and protocol are specfied.  Basic combinations are:
//
// rate class: 1G
// protocols: 1GE
//
// rate class: 2.5G
// protocols: OC48, STM16
//
// rate class: 10G
// protocols:  10GE LAN, 10GE WAN, OC192, STM64, OTU2, OTU2e,
//
//	OTU1e, ODU2, ODU2e, ODU1e
//
// rate class: 40G
// protocols:  40GE, OC768, STM256, OTU3, ODU3
//
// rate class: 100G
// protocols:  100GE, 100G MLG, OTU4, OTUCn, ODU4
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/trib-protocol"
//	Path from root:       "/terminal-device/logical-channels/channel/*/trib-protocol"
func (n *TerminalDevice_ChannelPathAny) TribProtocol() *TerminalDevice_Channel_TribProtocolPathAny {
	ps := &TerminalDevice_Channel_TribProtocolPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "trib-protocol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_ChannelPath) State() ygnmi.SingletonQuery[*oc.TerminalDevice_Channel] {
	return ygnmi.NewSingletonQuery[*oc.TerminalDevice_Channel](
		"TerminalDevice_Channel",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_ChannelPathAny) State() ygnmi.WildcardQuery[*oc.TerminalDevice_Channel] {
	return ygnmi.NewWildcardQuery[*oc.TerminalDevice_Channel](
		"TerminalDevice_Channel",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_ChannelPath) Config() ygnmi.ConfigQuery[*oc.TerminalDevice_Channel] {
	return ygnmi.NewConfigQuery[*oc.TerminalDevice_Channel](
		"TerminalDevice_Channel",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_ChannelPathAny) Config() ygnmi.WildcardQuery[*oc.TerminalDevice_Channel] {
	return ygnmi.NewWildcardQuery[*oc.TerminalDevice_Channel](
		"TerminalDevice_Channel",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_ChannelPathMap) State() ygnmi.SingletonQuery[map[uint32]*oc.TerminalDevice_Channel] {
	return ygnmi.NewSingletonQuery[map[uint32]*oc.TerminalDevice_Channel](
		"TerminalDevice",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.TerminalDevice_Channel, bool) {
			ret := gs.(*oc.TerminalDevice).Channel
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-terminal-device:logical-channels"},
			PostRelPath: []string{"openconfig-terminal-device:channel"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_ChannelPathMapAny) State() ygnmi.WildcardQuery[map[uint32]*oc.TerminalDevice_Channel] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.TerminalDevice_Channel](
		"TerminalDevice",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.TerminalDevice_Channel, bool) {
			ret := gs.(*oc.TerminalDevice).Channel
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-terminal-device:logical-channels"},
			PostRelPath: []string{"openconfig-terminal-device:channel"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_ChannelPathMap) Config() ygnmi.ConfigQuery[map[uint32]*oc.TerminalDevice_Channel] {
	return ygnmi.NewConfigQuery[map[uint32]*oc.TerminalDevice_Channel](
		"TerminalDevice",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.TerminalDevice_Channel, bool) {
			ret := gs.(*oc.TerminalDevice).Channel
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-terminal-device:logical-channels"},
			PostRelPath: []string{"openconfig-terminal-device:channel"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_ChannelPathMapAny) Config() ygnmi.WildcardQuery[map[uint32]*oc.TerminalDevice_Channel] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.TerminalDevice_Channel](
		"TerminalDevice",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.TerminalDevice_Channel, bool) {
			ret := gs.(*oc.TerminalDevice).Channel
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-terminal-device:logical-channels"},
			PostRelPath: []string{"openconfig-terminal-device:channel"},
		},
	)
}

// TerminalDevice_Channel_Assignment_AllocationPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/allocation YANG schema element.
type TerminalDevice_Channel_Assignment_AllocationPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Assignment_AllocationPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/allocation YANG schema element.
type TerminalDevice_Channel_Assignment_AllocationPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/allocation"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/allocation"
func (n *TerminalDevice_Channel_Assignment_AllocationPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"TerminalDevice_Channel_Assignment",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "allocation"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Assignment).Allocation
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Assignment) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/allocation"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/allocation"
func (n *TerminalDevice_Channel_Assignment_AllocationPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"TerminalDevice_Channel_Assignment",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "allocation"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Assignment).Allocation
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Assignment) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/allocation"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/allocation"
func (n *TerminalDevice_Channel_Assignment_AllocationPath) Config() ygnmi.ConfigQuery[float64] {
	return ygnmi.NewConfigQuery[float64](
		"TerminalDevice_Channel_Assignment",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "allocation"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Assignment).Allocation
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Assignment) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/allocation"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/allocation"
func (n *TerminalDevice_Channel_Assignment_AllocationPathAny) Config() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"TerminalDevice_Channel_Assignment",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "allocation"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Assignment).Allocation
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Assignment) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Assignment_AssignmentTypePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/assignment-type YANG schema element.
type TerminalDevice_Channel_Assignment_AssignmentTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Assignment_AssignmentTypePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/assignment-type YANG schema element.
type TerminalDevice_Channel_Assignment_AssignmentTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/assignment-type"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/assignment-type"
func (n *TerminalDevice_Channel_Assignment_AssignmentTypePath) State() ygnmi.SingletonQuery[oc.E_Assignment_AssignmentType] {
	return ygnmi.NewSingletonQuery[oc.E_Assignment_AssignmentType](
		"TerminalDevice_Channel_Assignment",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "assignment-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Assignment_AssignmentType, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Assignment).AssignmentType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Assignment) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/assignment-type"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/assignment-type"
func (n *TerminalDevice_Channel_Assignment_AssignmentTypePathAny) State() ygnmi.WildcardQuery[oc.E_Assignment_AssignmentType] {
	return ygnmi.NewWildcardQuery[oc.E_Assignment_AssignmentType](
		"TerminalDevice_Channel_Assignment",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "assignment-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Assignment_AssignmentType, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Assignment).AssignmentType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Assignment) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/assignment-type"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/assignment-type"
func (n *TerminalDevice_Channel_Assignment_AssignmentTypePath) Config() ygnmi.ConfigQuery[oc.E_Assignment_AssignmentType] {
	return ygnmi.NewConfigQuery[oc.E_Assignment_AssignmentType](
		"TerminalDevice_Channel_Assignment",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "assignment-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Assignment_AssignmentType, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Assignment).AssignmentType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Assignment) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/assignment-type"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/assignment-type"
func (n *TerminalDevice_Channel_Assignment_AssignmentTypePathAny) Config() ygnmi.WildcardQuery[oc.E_Assignment_AssignmentType] {
	return ygnmi.NewWildcardQuery[oc.E_Assignment_AssignmentType](
		"TerminalDevice_Channel_Assignment",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "assignment-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Assignment_AssignmentType, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Assignment).AssignmentType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Assignment) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Assignment_DescriptionPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/description YANG schema element.
type TerminalDevice_Channel_Assignment_DescriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Assignment_DescriptionPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/description YANG schema element.
type TerminalDevice_Channel_Assignment_DescriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/description"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/description"
func (n *TerminalDevice_Channel_Assignment_DescriptionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"TerminalDevice_Channel_Assignment",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Assignment).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Assignment) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/description"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/description"
func (n *TerminalDevice_Channel_Assignment_DescriptionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"TerminalDevice_Channel_Assignment",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Assignment).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Assignment) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/description"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/description"
func (n *TerminalDevice_Channel_Assignment_DescriptionPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"TerminalDevice_Channel_Assignment",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Assignment).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Assignment) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/description"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/description"
func (n *TerminalDevice_Channel_Assignment_DescriptionPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"TerminalDevice_Channel_Assignment",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Assignment).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Assignment) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Assignment_IndexPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/index YANG schema element.
type TerminalDevice_Channel_Assignment_IndexPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Assignment_IndexPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/index YANG schema element.
type TerminalDevice_Channel_Assignment_IndexPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/index"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/index"
func (n *TerminalDevice_Channel_Assignment_IndexPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"TerminalDevice_Channel_Assignment",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Assignment).Index
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Assignment) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/index"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/index"
func (n *TerminalDevice_Channel_Assignment_IndexPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"TerminalDevice_Channel_Assignment",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Assignment).Index
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Assignment) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/index"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/index"
func (n *TerminalDevice_Channel_Assignment_IndexPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"TerminalDevice_Channel_Assignment",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Assignment).Index
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Assignment) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/index"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/index"
func (n *TerminalDevice_Channel_Assignment_IndexPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"TerminalDevice_Channel_Assignment",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Assignment).Index
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Assignment) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Assignment_LogicalChannelPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/logical-channel YANG schema element.
type TerminalDevice_Channel_Assignment_LogicalChannelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Assignment_LogicalChannelPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/logical-channel YANG schema element.
type TerminalDevice_Channel_Assignment_LogicalChannelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/logical-channel"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/logical-channel"
func (n *TerminalDevice_Channel_Assignment_LogicalChannelPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"TerminalDevice_Channel_Assignment",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "logical-channel"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Assignment).LogicalChannel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Assignment) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/logical-channel"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/logical-channel"
func (n *TerminalDevice_Channel_Assignment_LogicalChannelPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"TerminalDevice_Channel_Assignment",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "logical-channel"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Assignment).LogicalChannel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Assignment) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/logical-channel"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/logical-channel"
func (n *TerminalDevice_Channel_Assignment_LogicalChannelPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"TerminalDevice_Channel_Assignment",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "logical-channel"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Assignment).LogicalChannel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Assignment) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/logical-channel"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/logical-channel"
func (n *TerminalDevice_Channel_Assignment_LogicalChannelPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"TerminalDevice_Channel_Assignment",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "logical-channel"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Assignment).LogicalChannel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Assignment) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Assignment_MappingPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/mapping YANG schema element.
type TerminalDevice_Channel_Assignment_MappingPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Assignment_MappingPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/mapping YANG schema element.
type TerminalDevice_Channel_Assignment_MappingPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/mapping"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/mapping"
func (n *TerminalDevice_Channel_Assignment_MappingPath) State() ygnmi.SingletonQuery[oc.E_TransportTypes_FRAME_MAPPING_PROTOCOL] {
	return ygnmi.NewSingletonQuery[oc.E_TransportTypes_FRAME_MAPPING_PROTOCOL](
		"TerminalDevice_Channel_Assignment",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mapping"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_FRAME_MAPPING_PROTOCOL, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Assignment).Mapping
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Assignment) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/mapping"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/mapping"
func (n *TerminalDevice_Channel_Assignment_MappingPathAny) State() ygnmi.WildcardQuery[oc.E_TransportTypes_FRAME_MAPPING_PROTOCOL] {
	return ygnmi.NewWildcardQuery[oc.E_TransportTypes_FRAME_MAPPING_PROTOCOL](
		"TerminalDevice_Channel_Assignment",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mapping"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_FRAME_MAPPING_PROTOCOL, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Assignment).Mapping
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Assignment) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/mapping"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/mapping"
func (n *TerminalDevice_Channel_Assignment_MappingPath) Config() ygnmi.ConfigQuery[oc.E_TransportTypes_FRAME_MAPPING_PROTOCOL] {
	return ygnmi.NewConfigQuery[oc.E_TransportTypes_FRAME_MAPPING_PROTOCOL](
		"TerminalDevice_Channel_Assignment",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mapping"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_FRAME_MAPPING_PROTOCOL, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Assignment).Mapping
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Assignment) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/mapping"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/mapping"
func (n *TerminalDevice_Channel_Assignment_MappingPathAny) Config() ygnmi.WildcardQuery[oc.E_TransportTypes_FRAME_MAPPING_PROTOCOL] {
	return ygnmi.NewWildcardQuery[oc.E_TransportTypes_FRAME_MAPPING_PROTOCOL](
		"TerminalDevice_Channel_Assignment",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mapping"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_FRAME_MAPPING_PROTOCOL, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Assignment).Mapping
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Assignment) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Assignment_OpticalChannelPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/optical-channel YANG schema element.
type TerminalDevice_Channel_Assignment_OpticalChannelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Assignment_OpticalChannelPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/optical-channel YANG schema element.
type TerminalDevice_Channel_Assignment_OpticalChannelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/optical-channel"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/optical-channel"
func (n *TerminalDevice_Channel_Assignment_OpticalChannelPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"TerminalDevice_Channel_Assignment",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "optical-channel"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Assignment).OpticalChannel
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Assignment) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/optical-channel"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/optical-channel"
func (n *TerminalDevice_Channel_Assignment_OpticalChannelPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"TerminalDevice_Channel_Assignment",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "optical-channel"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Assignment).OpticalChannel
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Assignment) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/optical-channel"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/optical-channel"
func (n *TerminalDevice_Channel_Assignment_OpticalChannelPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"TerminalDevice_Channel_Assignment",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "optical-channel"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Assignment).OpticalChannel
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Assignment) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/optical-channel"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/optical-channel"
func (n *TerminalDevice_Channel_Assignment_OpticalChannelPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"TerminalDevice_Channel_Assignment",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "optical-channel"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Assignment).OpticalChannel
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Assignment) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Assignment_TributarySlotIndexPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/tributary-slot-index YANG schema element.
type TerminalDevice_Channel_Assignment_TributarySlotIndexPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Assignment_TributarySlotIndexPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/tributary-slot-index YANG schema element.
type TerminalDevice_Channel_Assignment_TributarySlotIndexPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/tributary-slot-index"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/tributary-slot-index"
func (n *TerminalDevice_Channel_Assignment_TributarySlotIndexPath) State() ygnmi.SingletonQuery[int32] {
	return ygnmi.NewSingletonQuery[int32](
		"TerminalDevice_Channel_Assignment",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tributary-slot-index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int32, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Assignment).TributarySlotIndex
			if ret == nil {
				var zero int32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Assignment) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/tributary-slot-index"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/tributary-slot-index"
func (n *TerminalDevice_Channel_Assignment_TributarySlotIndexPathAny) State() ygnmi.WildcardQuery[int32] {
	return ygnmi.NewWildcardQuery[int32](
		"TerminalDevice_Channel_Assignment",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tributary-slot-index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int32, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Assignment).TributarySlotIndex
			if ret == nil {
				var zero int32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Assignment) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/tributary-slot-index"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/tributary-slot-index"
func (n *TerminalDevice_Channel_Assignment_TributarySlotIndexPath) Config() ygnmi.ConfigQuery[int32] {
	return ygnmi.NewConfigQuery[int32](
		"TerminalDevice_Channel_Assignment",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tributary-slot-index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int32, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Assignment).TributarySlotIndex
			if ret == nil {
				var zero int32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Assignment) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/tributary-slot-index"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/tributary-slot-index"
func (n *TerminalDevice_Channel_Assignment_TributarySlotIndexPathAny) Config() ygnmi.WildcardQuery[int32] {
	return ygnmi.NewWildcardQuery[int32](
		"TerminalDevice_Channel_Assignment",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tributary-slot-index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int32, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Assignment).TributarySlotIndex
			if ret == nil {
				var zero int32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Assignment) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_AssignmentPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment YANG schema element.
type TerminalDevice_Channel_AssignmentPath struct {
	*ygnmi.NodePath
}

// TerminalDevice_Channel_AssignmentPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment YANG schema element.
type TerminalDevice_Channel_AssignmentPathAny struct {
	*ygnmi.NodePath
}

// TerminalDevice_Channel_AssignmentPathMap represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment YANG schema element.
type TerminalDevice_Channel_AssignmentPathMap struct {
	*ygnmi.NodePath
}

// TerminalDevice_Channel_AssignmentPathMapAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment YANG schema element.
type TerminalDevice_Channel_AssignmentPathMapAny struct {
	*ygnmi.NodePath
}

// Allocation (leaf): Allocation of the logical client channel to the tributary
// or sub-channel, expressed in Gbps. Please note that if the
// assignment is to an OTN logical channel, the allocation must
// be an integer multiplication to tributary-slot-granularity
// of the OTN logical channel.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/allocation"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/*/allocation"
func (n *TerminalDevice_Channel_AssignmentPath) Allocation() *TerminalDevice_Channel_Assignment_AllocationPath {
	ps := &TerminalDevice_Channel_Assignment_AllocationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "allocation"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Allocation (leaf): Allocation of the logical client channel to the tributary
// or sub-channel, expressed in Gbps. Please note that if the
// assignment is to an OTN logical channel, the allocation must
// be an integer multiplication to tributary-slot-granularity
// of the OTN logical channel.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/allocation"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/*/allocation"
func (n *TerminalDevice_Channel_AssignmentPathAny) Allocation() *TerminalDevice_Channel_Assignment_AllocationPathAny {
	ps := &TerminalDevice_Channel_Assignment_AllocationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "allocation"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AssignmentType (leaf): Each logical channel element may be assigned to subsequent
// stages of logical elements to implement further grooming, or
// can be assigned to a line-side optical channel for
// transmission.  Each assignment also has an associated
// bandwidth allocation.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/assignment-type"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/*/assignment-type"
func (n *TerminalDevice_Channel_AssignmentPath) AssignmentType() *TerminalDevice_Channel_Assignment_AssignmentTypePath {
	ps := &TerminalDevice_Channel_Assignment_AssignmentTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "assignment-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AssignmentType (leaf): Each logical channel element may be assigned to subsequent
// stages of logical elements to implement further grooming, or
// can be assigned to a line-side optical channel for
// transmission.  Each assignment also has an associated
// bandwidth allocation.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/assignment-type"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/*/assignment-type"
func (n *TerminalDevice_Channel_AssignmentPathAny) AssignmentType() *TerminalDevice_Channel_Assignment_AssignmentTypePathAny {
	ps := &TerminalDevice_Channel_Assignment_AssignmentTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "assignment-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Description (leaf): Name assigned to the logical client channel
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/description"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/*/description"
func (n *TerminalDevice_Channel_AssignmentPath) Description() *TerminalDevice_Channel_Assignment_DescriptionPath {
	ps := &TerminalDevice_Channel_Assignment_DescriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Description (leaf): Name assigned to the logical client channel
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/description"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/*/description"
func (n *TerminalDevice_Channel_AssignmentPathAny) Description() *TerminalDevice_Channel_Assignment_DescriptionPathAny {
	ps := &TerminalDevice_Channel_Assignment_DescriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): Index of the current logical client channel to tributary
// mapping
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/index"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/*/index"
func (n *TerminalDevice_Channel_AssignmentPath) Index() *TerminalDevice_Channel_Assignment_IndexPath {
	ps := &TerminalDevice_Channel_Assignment_IndexPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): Index of the current logical client channel to tributary
// mapping
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/index"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/*/index"
func (n *TerminalDevice_Channel_AssignmentPathAny) Index() *TerminalDevice_Channel_Assignment_IndexPathAny {
	ps := &TerminalDevice_Channel_Assignment_IndexPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LogicalChannel (leaf): Reference to another stage of logical channel elements.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/logical-channel"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/*/logical-channel"
func (n *TerminalDevice_Channel_AssignmentPath) LogicalChannel() *TerminalDevice_Channel_Assignment_LogicalChannelPath {
	ps := &TerminalDevice_Channel_Assignment_LogicalChannelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "logical-channel"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LogicalChannel (leaf): Reference to another stage of logical channel elements.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/logical-channel"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/*/logical-channel"
func (n *TerminalDevice_Channel_AssignmentPathAny) LogicalChannel() *TerminalDevice_Channel_Assignment_LogicalChannelPathAny {
	ps := &TerminalDevice_Channel_Assignment_LogicalChannelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "logical-channel"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mapping (leaf): Logical channel mapping procedure. Valid only when the
// assignment is to an OTN logical channel.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/mapping"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/*/mapping"
func (n *TerminalDevice_Channel_AssignmentPath) Mapping() *TerminalDevice_Channel_Assignment_MappingPath {
	ps := &TerminalDevice_Channel_Assignment_MappingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mapping"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mapping (leaf): Logical channel mapping procedure. Valid only when the
// assignment is to an OTN logical channel.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/mapping"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/*/mapping"
func (n *TerminalDevice_Channel_AssignmentPathAny) Mapping() *TerminalDevice_Channel_Assignment_MappingPathAny {
	ps := &TerminalDevice_Channel_Assignment_MappingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mapping"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OpticalChannel (leaf): Reference to the line-side optical channel that should
// carry the current logical channel element.  Use this
// reference to exit the logical element stage.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/optical-channel"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/*/optical-channel"
func (n *TerminalDevice_Channel_AssignmentPath) OpticalChannel() *TerminalDevice_Channel_Assignment_OpticalChannelPath {
	ps := &TerminalDevice_Channel_Assignment_OpticalChannelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "optical-channel"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OpticalChannel (leaf): Reference to the line-side optical channel that should
// carry the current logical channel element.  Use this
// reference to exit the logical element stage.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/optical-channel"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/*/optical-channel"
func (n *TerminalDevice_Channel_AssignmentPathAny) OpticalChannel() *TerminalDevice_Channel_Assignment_OpticalChannelPathAny {
	ps := &TerminalDevice_Channel_Assignment_OpticalChannelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "optical-channel"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TributarySlotIndex (leaf): Indicates the first tributary slot index allocated to the
// client signal or logical channel in the assignment. Valid
// only when the assignment is to an OTN logical channel.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/tributary-slot-index"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/*/tributary-slot-index"
func (n *TerminalDevice_Channel_AssignmentPath) TributarySlotIndex() *TerminalDevice_Channel_Assignment_TributarySlotIndexPath {
	ps := &TerminalDevice_Channel_Assignment_TributarySlotIndexPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tributary-slot-index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TributarySlotIndex (leaf): Indicates the first tributary slot index allocated to the
// client signal or logical channel in the assignment. Valid
// only when the assignment is to an OTN logical channel.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/tributary-slot-index"
//	Path from root:       "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/*/tributary-slot-index"
func (n *TerminalDevice_Channel_AssignmentPathAny) TributarySlotIndex() *TerminalDevice_Channel_Assignment_TributarySlotIndexPathAny {
	ps := &TerminalDevice_Channel_Assignment_TributarySlotIndexPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tributary-slot-index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_AssignmentPath) State() ygnmi.SingletonQuery[*oc.TerminalDevice_Channel_Assignment] {
	return ygnmi.NewSingletonQuery[*oc.TerminalDevice_Channel_Assignment](
		"TerminalDevice_Channel_Assignment",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_AssignmentPathAny) State() ygnmi.WildcardQuery[*oc.TerminalDevice_Channel_Assignment] {
	return ygnmi.NewWildcardQuery[*oc.TerminalDevice_Channel_Assignment](
		"TerminalDevice_Channel_Assignment",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_AssignmentPath) Config() ygnmi.ConfigQuery[*oc.TerminalDevice_Channel_Assignment] {
	return ygnmi.NewConfigQuery[*oc.TerminalDevice_Channel_Assignment](
		"TerminalDevice_Channel_Assignment",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_AssignmentPathAny) Config() ygnmi.WildcardQuery[*oc.TerminalDevice_Channel_Assignment] {
	return ygnmi.NewWildcardQuery[*oc.TerminalDevice_Channel_Assignment](
		"TerminalDevice_Channel_Assignment",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_AssignmentPathMap) State() ygnmi.SingletonQuery[map[uint32]*oc.TerminalDevice_Channel_Assignment] {
	return ygnmi.NewSingletonQuery[map[uint32]*oc.TerminalDevice_Channel_Assignment](
		"TerminalDevice_Channel",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.TerminalDevice_Channel_Assignment, bool) {
			ret := gs.(*oc.TerminalDevice_Channel).Assignment
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-terminal-device:logical-channel-assignments"},
			PostRelPath: []string{"openconfig-terminal-device:assignment"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_AssignmentPathMapAny) State() ygnmi.WildcardQuery[map[uint32]*oc.TerminalDevice_Channel_Assignment] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.TerminalDevice_Channel_Assignment](
		"TerminalDevice_Channel",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.TerminalDevice_Channel_Assignment, bool) {
			ret := gs.(*oc.TerminalDevice_Channel).Assignment
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-terminal-device:logical-channel-assignments"},
			PostRelPath: []string{"openconfig-terminal-device:assignment"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_AssignmentPathMap) Config() ygnmi.ConfigQuery[map[uint32]*oc.TerminalDevice_Channel_Assignment] {
	return ygnmi.NewConfigQuery[map[uint32]*oc.TerminalDevice_Channel_Assignment](
		"TerminalDevice_Channel",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.TerminalDevice_Channel_Assignment, bool) {
			ret := gs.(*oc.TerminalDevice_Channel).Assignment
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-terminal-device:logical-channel-assignments"},
			PostRelPath: []string{"openconfig-terminal-device:assignment"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_AssignmentPathMapAny) Config() ygnmi.WildcardQuery[map[uint32]*oc.TerminalDevice_Channel_Assignment] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.TerminalDevice_Channel_Assignment](
		"TerminalDevice_Channel",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.TerminalDevice_Channel_Assignment, bool) {
			ret := gs.(*oc.TerminalDevice_Channel).Assignment
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-terminal-device:logical-channel-assignments"},
			PostRelPath: []string{"openconfig-terminal-device:assignment"},
		},
	)
}

// TerminalDevice_Channel_Ethernet_AlsDelayPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/als-delay YANG schema element.
type TerminalDevice_Channel_Ethernet_AlsDelayPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_AlsDelayPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/als-delay YANG schema element.
type TerminalDevice_Channel_Ethernet_AlsDelayPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/als-delay"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/als-delay"
func (n *TerminalDevice_Channel_Ethernet_AlsDelayPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "als-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).AlsDelay
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/als-delay"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/als-delay"
func (n *TerminalDevice_Channel_Ethernet_AlsDelayPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "als-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).AlsDelay
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/als-delay"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/config/als-delay"
func (n *TerminalDevice_Channel_Ethernet_AlsDelayPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"TerminalDevice_Channel_Ethernet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "als-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).AlsDelay
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/als-delay"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/config/als-delay"
func (n *TerminalDevice_Channel_Ethernet_AlsDelayPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"TerminalDevice_Channel_Ethernet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "als-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).AlsDelay
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_ClientAlsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/client-als YANG schema element.
type TerminalDevice_Channel_Ethernet_ClientAlsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_ClientAlsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/client-als YANG schema element.
type TerminalDevice_Channel_Ethernet_ClientAlsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/client-als"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/client-als"
func (n *TerminalDevice_Channel_Ethernet_ClientAlsPath) State() ygnmi.SingletonQuery[oc.E_Ethernet_ClientAls] {
	return ygnmi.NewSingletonQuery[oc.E_Ethernet_ClientAls](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "client-als"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ethernet_ClientAls, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).ClientAls
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/client-als"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/client-als"
func (n *TerminalDevice_Channel_Ethernet_ClientAlsPathAny) State() ygnmi.WildcardQuery[oc.E_Ethernet_ClientAls] {
	return ygnmi.NewWildcardQuery[oc.E_Ethernet_ClientAls](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "client-als"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ethernet_ClientAls, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).ClientAls
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/client-als"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/config/client-als"
func (n *TerminalDevice_Channel_Ethernet_ClientAlsPath) Config() ygnmi.ConfigQuery[oc.E_Ethernet_ClientAls] {
	return ygnmi.NewConfigQuery[oc.E_Ethernet_ClientAls](
		"TerminalDevice_Channel_Ethernet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "client-als"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ethernet_ClientAls, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).ClientAls
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/client-als"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/config/client-als"
func (n *TerminalDevice_Channel_Ethernet_ClientAlsPathAny) Config() ygnmi.WildcardQuery[oc.E_Ethernet_ClientAls] {
	return ygnmi.NewWildcardQuery[oc.E_Ethernet_ClientAls](
		"TerminalDevice_Channel_Ethernet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "client-als"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ethernet_ClientAls, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).ClientAls
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_FecUncorrectableBlocksPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/fec-uncorrectable-blocks YANG schema element.
type TerminalDevice_Channel_Ethernet_FecUncorrectableBlocksPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_FecUncorrectableBlocksPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/fec-uncorrectable-blocks YANG schema element.
type TerminalDevice_Channel_Ethernet_FecUncorrectableBlocksPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/fec-uncorrectable-blocks"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/fec-uncorrectable-blocks"
func (n *TerminalDevice_Channel_Ethernet_FecUncorrectableBlocksPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fec-uncorrectable-blocks"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).FecUncorrectableBlocks
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/fec-uncorrectable-blocks"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/fec-uncorrectable-blocks"
func (n *TerminalDevice_Channel_Ethernet_FecUncorrectableBlocksPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fec-uncorrectable-blocks"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).FecUncorrectableBlocks
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_In_8021QFramesPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-8021q-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_In_8021QFramesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_In_8021QFramesPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-8021q-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_In_8021QFramesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-8021q-frames"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-8021q-frames"
func (n *TerminalDevice_Channel_Ethernet_In_8021QFramesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-8021q-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).In_8021QFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-8021q-frames"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-8021q-frames"
func (n *TerminalDevice_Channel_Ethernet_In_8021QFramesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-8021q-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).In_8021QFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_InBlockErrorsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-block-errors YANG schema element.
type TerminalDevice_Channel_Ethernet_InBlockErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_InBlockErrorsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-block-errors YANG schema element.
type TerminalDevice_Channel_Ethernet_InBlockErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-block-errors"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-block-errors"
func (n *TerminalDevice_Channel_Ethernet_InBlockErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-block-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).InBlockErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-block-errors"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-block-errors"
func (n *TerminalDevice_Channel_Ethernet_InBlockErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-block-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).InBlockErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_InCarrierErrorsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-carrier-errors YANG schema element.
type TerminalDevice_Channel_Ethernet_InCarrierErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_InCarrierErrorsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-carrier-errors YANG schema element.
type TerminalDevice_Channel_Ethernet_InCarrierErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-carrier-errors"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-carrier-errors"
func (n *TerminalDevice_Channel_Ethernet_InCarrierErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-carrier-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).InCarrierErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-carrier-errors"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-carrier-errors"
func (n *TerminalDevice_Channel_Ethernet_InCarrierErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-carrier-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).InCarrierErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_InCrcErrorsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-crc-errors YANG schema element.
type TerminalDevice_Channel_Ethernet_InCrcErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_InCrcErrorsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-crc-errors YANG schema element.
type TerminalDevice_Channel_Ethernet_InCrcErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-crc-errors"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-crc-errors"
func (n *TerminalDevice_Channel_Ethernet_InCrcErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-crc-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).InCrcErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-crc-errors"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-crc-errors"
func (n *TerminalDevice_Channel_Ethernet_InCrcErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-crc-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).InCrcErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_InFragmentFramesPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-fragment-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_InFragmentFramesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_InFragmentFramesPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-fragment-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_InFragmentFramesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-fragment-frames"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-fragment-frames"
func (n *TerminalDevice_Channel_Ethernet_InFragmentFramesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-fragment-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).InFragmentFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-fragment-frames"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-fragment-frames"
func (n *TerminalDevice_Channel_Ethernet_InFragmentFramesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-fragment-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).InFragmentFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_InInterruptedTxPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-interrupted-tx YANG schema element.
type TerminalDevice_Channel_Ethernet_InInterruptedTxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_InInterruptedTxPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-interrupted-tx YANG schema element.
type TerminalDevice_Channel_Ethernet_InInterruptedTxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-interrupted-tx"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-interrupted-tx"
func (n *TerminalDevice_Channel_Ethernet_InInterruptedTxPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-interrupted-tx"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).InInterruptedTx
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-interrupted-tx"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-interrupted-tx"
func (n *TerminalDevice_Channel_Ethernet_InInterruptedTxPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-interrupted-tx"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).InInterruptedTx
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_InJabberFramesPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-jabber-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_InJabberFramesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_InJabberFramesPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-jabber-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_InJabberFramesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-jabber-frames"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-jabber-frames"
func (n *TerminalDevice_Channel_Ethernet_InJabberFramesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-jabber-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).InJabberFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-jabber-frames"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-jabber-frames"
func (n *TerminalDevice_Channel_Ethernet_InJabberFramesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-jabber-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).InJabberFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_InLateCollisionPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-late-collision YANG schema element.
type TerminalDevice_Channel_Ethernet_InLateCollisionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_InLateCollisionPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-late-collision YANG schema element.
type TerminalDevice_Channel_Ethernet_InLateCollisionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-late-collision"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-late-collision"
func (n *TerminalDevice_Channel_Ethernet_InLateCollisionPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-late-collision"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).InLateCollision
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-late-collision"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-late-collision"
func (n *TerminalDevice_Channel_Ethernet_InLateCollisionPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-late-collision"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).InLateCollision
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_InMacControlFramesPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-mac-control-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_InMacControlFramesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_InMacControlFramesPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-mac-control-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_InMacControlFramesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-mac-control-frames"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-mac-control-frames"
func (n *TerminalDevice_Channel_Ethernet_InMacControlFramesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-mac-control-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).InMacControlFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-mac-control-frames"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-mac-control-frames"
func (n *TerminalDevice_Channel_Ethernet_InMacControlFramesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-mac-control-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).InMacControlFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_InMacErrorsRxPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-mac-errors-rx YANG schema element.
type TerminalDevice_Channel_Ethernet_InMacErrorsRxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_InMacErrorsRxPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-mac-errors-rx YANG schema element.
type TerminalDevice_Channel_Ethernet_InMacErrorsRxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-mac-errors-rx"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-mac-errors-rx"
func (n *TerminalDevice_Channel_Ethernet_InMacErrorsRxPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-mac-errors-rx"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).InMacErrorsRx
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-mac-errors-rx"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-mac-errors-rx"
func (n *TerminalDevice_Channel_Ethernet_InMacErrorsRxPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-mac-errors-rx"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).InMacErrorsRx
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_InMacPauseFramesPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-mac-pause-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_InMacPauseFramesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_InMacPauseFramesPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-mac-pause-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_InMacPauseFramesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-mac-pause-frames"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-mac-pause-frames"
func (n *TerminalDevice_Channel_Ethernet_InMacPauseFramesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-mac-pause-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).InMacPauseFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-mac-pause-frames"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-mac-pause-frames"
func (n *TerminalDevice_Channel_Ethernet_InMacPauseFramesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-mac-pause-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).InMacPauseFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_InMaxsizeExceededPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-maxsize-exceeded YANG schema element.
type TerminalDevice_Channel_Ethernet_InMaxsizeExceededPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_InMaxsizeExceededPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-maxsize-exceeded YANG schema element.
type TerminalDevice_Channel_Ethernet_InMaxsizeExceededPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-maxsize-exceeded"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-maxsize-exceeded"
func (n *TerminalDevice_Channel_Ethernet_InMaxsizeExceededPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-maxsize-exceeded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).InMaxsizeExceeded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-maxsize-exceeded"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-maxsize-exceeded"
func (n *TerminalDevice_Channel_Ethernet_InMaxsizeExceededPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-maxsize-exceeded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).InMaxsizeExceeded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_InOversizeFramesPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-oversize-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_InOversizeFramesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_InOversizeFramesPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-oversize-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_InOversizeFramesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-oversize-frames"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-oversize-frames"
func (n *TerminalDevice_Channel_Ethernet_InOversizeFramesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-oversize-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).InOversizeFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-oversize-frames"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-oversize-frames"
func (n *TerminalDevice_Channel_Ethernet_InOversizeFramesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-oversize-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).InOversizeFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_InPcsBipErrorsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-pcs-bip-errors YANG schema element.
type TerminalDevice_Channel_Ethernet_InPcsBipErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_InPcsBipErrorsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-pcs-bip-errors YANG schema element.
type TerminalDevice_Channel_Ethernet_InPcsBipErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-pcs-bip-errors"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-pcs-bip-errors"
func (n *TerminalDevice_Channel_Ethernet_InPcsBipErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-pcs-bip-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).InPcsBipErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-pcs-bip-errors"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-pcs-bip-errors"
func (n *TerminalDevice_Channel_Ethernet_InPcsBipErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-pcs-bip-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).InPcsBipErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_InPcsErroredSecondsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-pcs-errored-seconds YANG schema element.
type TerminalDevice_Channel_Ethernet_InPcsErroredSecondsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_InPcsErroredSecondsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-pcs-errored-seconds YANG schema element.
type TerminalDevice_Channel_Ethernet_InPcsErroredSecondsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-pcs-errored-seconds"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-pcs-errored-seconds"
func (n *TerminalDevice_Channel_Ethernet_InPcsErroredSecondsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-pcs-errored-seconds"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).InPcsErroredSeconds
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-pcs-errored-seconds"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-pcs-errored-seconds"
func (n *TerminalDevice_Channel_Ethernet_InPcsErroredSecondsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-pcs-errored-seconds"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).InPcsErroredSeconds
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_InPcsSeverelyErroredSecondsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-pcs-severely-errored-seconds YANG schema element.
type TerminalDevice_Channel_Ethernet_InPcsSeverelyErroredSecondsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_InPcsSeverelyErroredSecondsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-pcs-severely-errored-seconds YANG schema element.
type TerminalDevice_Channel_Ethernet_InPcsSeverelyErroredSecondsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-pcs-severely-errored-seconds"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-pcs-severely-errored-seconds"
func (n *TerminalDevice_Channel_Ethernet_InPcsSeverelyErroredSecondsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-pcs-severely-errored-seconds"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).InPcsSeverelyErroredSeconds
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-pcs-severely-errored-seconds"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-pcs-severely-errored-seconds"
func (n *TerminalDevice_Channel_Ethernet_InPcsSeverelyErroredSecondsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-pcs-severely-errored-seconds"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).InPcsSeverelyErroredSeconds
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_InPcsUnavailableSecondsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-pcs-unavailable-seconds YANG schema element.
type TerminalDevice_Channel_Ethernet_InPcsUnavailableSecondsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_InPcsUnavailableSecondsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-pcs-unavailable-seconds YANG schema element.
type TerminalDevice_Channel_Ethernet_InPcsUnavailableSecondsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-pcs-unavailable-seconds"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-pcs-unavailable-seconds"
func (n *TerminalDevice_Channel_Ethernet_InPcsUnavailableSecondsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-pcs-unavailable-seconds"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).InPcsUnavailableSeconds
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-pcs-unavailable-seconds"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-pcs-unavailable-seconds"
func (n *TerminalDevice_Channel_Ethernet_InPcsUnavailableSecondsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-pcs-unavailable-seconds"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).InPcsUnavailableSeconds
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_InSingleCollisionPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-single-collision YANG schema element.
type TerminalDevice_Channel_Ethernet_InSingleCollisionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_InSingleCollisionPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-single-collision YANG schema element.
type TerminalDevice_Channel_Ethernet_InSingleCollisionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-single-collision"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-single-collision"
func (n *TerminalDevice_Channel_Ethernet_InSingleCollisionPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-single-collision"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).InSingleCollision
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-single-collision"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-single-collision"
func (n *TerminalDevice_Channel_Ethernet_InSingleCollisionPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-single-collision"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).InSingleCollision
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_InSymbolErrorPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-symbol-error YANG schema element.
type TerminalDevice_Channel_Ethernet_InSymbolErrorPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_InSymbolErrorPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-symbol-error YANG schema element.
type TerminalDevice_Channel_Ethernet_InSymbolErrorPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-symbol-error"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-symbol-error"
func (n *TerminalDevice_Channel_Ethernet_InSymbolErrorPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-symbol-error"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).InSymbolError
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-symbol-error"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-symbol-error"
func (n *TerminalDevice_Channel_Ethernet_InSymbolErrorPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-symbol-error"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).InSymbolError
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_InUndersizeFramesPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-undersize-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_InUndersizeFramesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_InUndersizeFramesPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-undersize-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_InUndersizeFramesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-undersize-frames"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-undersize-frames"
func (n *TerminalDevice_Channel_Ethernet_InUndersizeFramesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-undersize-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).InUndersizeFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-undersize-frames"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-undersize-frames"
func (n *TerminalDevice_Channel_Ethernet_InUndersizeFramesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-undersize-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).InUndersizeFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_Out_8021QFramesPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/out-8021q-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_Out_8021QFramesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_Out_8021QFramesPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/out-8021q-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_Out_8021QFramesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/out-8021q-frames"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/out-8021q-frames"
func (n *TerminalDevice_Channel_Ethernet_Out_8021QFramesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-8021q-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).Out_8021QFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/out-8021q-frames"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/out-8021q-frames"
func (n *TerminalDevice_Channel_Ethernet_Out_8021QFramesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-8021q-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).Out_8021QFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_OutBlockErrorsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/out-block-errors YANG schema element.
type TerminalDevice_Channel_Ethernet_OutBlockErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_OutBlockErrorsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/out-block-errors YANG schema element.
type TerminalDevice_Channel_Ethernet_OutBlockErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/out-block-errors"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/out-block-errors"
func (n *TerminalDevice_Channel_Ethernet_OutBlockErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-block-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).OutBlockErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/out-block-errors"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/out-block-errors"
func (n *TerminalDevice_Channel_Ethernet_OutBlockErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-block-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).OutBlockErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_OutCrcErrorsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/out-crc-errors YANG schema element.
type TerminalDevice_Channel_Ethernet_OutCrcErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_OutCrcErrorsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/out-crc-errors YANG schema element.
type TerminalDevice_Channel_Ethernet_OutCrcErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/out-crc-errors"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/out-crc-errors"
func (n *TerminalDevice_Channel_Ethernet_OutCrcErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-crc-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).OutCrcErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/out-crc-errors"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/out-crc-errors"
func (n *TerminalDevice_Channel_Ethernet_OutCrcErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-crc-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).OutCrcErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_OutMacControlFramesPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/out-mac-control-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_OutMacControlFramesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_OutMacControlFramesPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/out-mac-control-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_OutMacControlFramesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/out-mac-control-frames"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/out-mac-control-frames"
func (n *TerminalDevice_Channel_Ethernet_OutMacControlFramesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-mac-control-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).OutMacControlFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/out-mac-control-frames"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/out-mac-control-frames"
func (n *TerminalDevice_Channel_Ethernet_OutMacControlFramesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-mac-control-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).OutMacControlFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_OutMacErrorsTxPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/out-mac-errors-tx YANG schema element.
type TerminalDevice_Channel_Ethernet_OutMacErrorsTxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_OutMacErrorsTxPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/out-mac-errors-tx YANG schema element.
type TerminalDevice_Channel_Ethernet_OutMacErrorsTxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/out-mac-errors-tx"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/out-mac-errors-tx"
func (n *TerminalDevice_Channel_Ethernet_OutMacErrorsTxPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-mac-errors-tx"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).OutMacErrorsTx
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/out-mac-errors-tx"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/out-mac-errors-tx"
func (n *TerminalDevice_Channel_Ethernet_OutMacErrorsTxPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-mac-errors-tx"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).OutMacErrorsTx
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_OutMacPauseFramesPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/out-mac-pause-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_OutMacPauseFramesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_OutMacPauseFramesPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/out-mac-pause-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_OutMacPauseFramesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/out-mac-pause-frames"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/out-mac-pause-frames"
func (n *TerminalDevice_Channel_Ethernet_OutMacPauseFramesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-mac-pause-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).OutMacPauseFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/out-mac-pause-frames"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/out-mac-pause-frames"
func (n *TerminalDevice_Channel_Ethernet_OutMacPauseFramesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-mac-pause-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).OutMacPauseFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_OutPcsBipErrorsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/out-pcs-bip-errors YANG schema element.
type TerminalDevice_Channel_Ethernet_OutPcsBipErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_OutPcsBipErrorsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/out-pcs-bip-errors YANG schema element.
type TerminalDevice_Channel_Ethernet_OutPcsBipErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/out-pcs-bip-errors"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/out-pcs-bip-errors"
func (n *TerminalDevice_Channel_Ethernet_OutPcsBipErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-pcs-bip-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).OutPcsBipErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/out-pcs-bip-errors"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/out-pcs-bip-errors"
func (n *TerminalDevice_Channel_Ethernet_OutPcsBipErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-pcs-bip-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet).OutPcsBipErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_EthernetPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet YANG schema element.
type TerminalDevice_Channel_EthernetPath struct {
	*ygnmi.NodePath
}

// TerminalDevice_Channel_EthernetPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet YANG schema element.
type TerminalDevice_Channel_EthernetPathAny struct {
	*ygnmi.NodePath
}

// AlsDelay (leaf): The timer to delay the client-als actions on the client
// port when a local or remote fault is detected on the line
// port. The delay will only be valid when the client-als is
// set to LASER_SHUTDOWN
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/als-delay"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/*/als-delay"
func (n *TerminalDevice_Channel_EthernetPath) AlsDelay() *TerminalDevice_Channel_Ethernet_AlsDelayPath {
	ps := &TerminalDevice_Channel_Ethernet_AlsDelayPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "als-delay"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AlsDelay (leaf): The timer to delay the client-als actions on the client
// port when a local or remote fault is detected on the line
// port. The delay will only be valid when the client-als is
// set to LASER_SHUTDOWN
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/als-delay"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/*/als-delay"
func (n *TerminalDevice_Channel_EthernetPathAny) AlsDelay() *TerminalDevice_Channel_Ethernet_AlsDelayPathAny {
	ps := &TerminalDevice_Channel_Ethernet_AlsDelayPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "als-delay"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ClientAls (leaf): Sets the client port behavior that defines if the actions
// of automatic laser shutdown (als), ethernet fault
// propagation, or nothing will be done upon the detection
// of a failure on the line port or the upstream remote
// client port.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/client-als"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/*/client-als"
func (n *TerminalDevice_Channel_EthernetPath) ClientAls() *TerminalDevice_Channel_Ethernet_ClientAlsPath {
	ps := &TerminalDevice_Channel_Ethernet_ClientAlsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "client-als"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ClientAls (leaf): Sets the client port behavior that defines if the actions
// of automatic laser shutdown (als), ethernet fault
// propagation, or nothing will be done upon the detection
// of a failure on the line port or the upstream remote
// client port.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/client-als"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/*/client-als"
func (n *TerminalDevice_Channel_EthernetPathAny) ClientAls() *TerminalDevice_Channel_Ethernet_ClientAlsPathAny {
	ps := &TerminalDevice_Channel_Ethernet_ClientAlsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "client-als"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Esnr (container): Electrical signal to noise ratio. Baud rate
// normalized signal to noise ratio based on
// error vector magnitude in dB with two decimal
// precision. Values include the instantaneous, average,
// minimum, and maximum statistics. If avg/min/max
// statistics are not supported, the target is expected
// to just supply the instant value
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/esnr"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/esnr"
func (n *TerminalDevice_Channel_EthernetPath) Esnr() *TerminalDevice_Channel_Ethernet_EsnrPath {
	ps := &TerminalDevice_Channel_Ethernet_EsnrPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "esnr"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Esnr (container): Electrical signal to noise ratio. Baud rate
// normalized signal to noise ratio based on
// error vector magnitude in dB with two decimal
// precision. Values include the instantaneous, average,
// minimum, and maximum statistics. If avg/min/max
// statistics are not supported, the target is expected
// to just supply the instant value
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/esnr"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/esnr"
func (n *TerminalDevice_Channel_EthernetPathAny) Esnr() *TerminalDevice_Channel_Ethernet_EsnrPathAny {
	ps := &TerminalDevice_Channel_Ethernet_EsnrPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "esnr"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// FecUncorrectableBlocks (leaf): The number of blocks or frames that were uncorrectable by
// the FEC
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/fec-uncorrectable-blocks"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/fec-uncorrectable-blocks"
func (n *TerminalDevice_Channel_EthernetPath) FecUncorrectableBlocks() *TerminalDevice_Channel_Ethernet_FecUncorrectableBlocksPath {
	ps := &TerminalDevice_Channel_Ethernet_FecUncorrectableBlocksPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fec-uncorrectable-blocks"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FecUncorrectableBlocks (leaf): The number of blocks or frames that were uncorrectable by
// the FEC
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/fec-uncorrectable-blocks"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/fec-uncorrectable-blocks"
func (n *TerminalDevice_Channel_EthernetPathAny) FecUncorrectableBlocks() *TerminalDevice_Channel_Ethernet_FecUncorrectableBlocksPathAny {
	ps := &TerminalDevice_Channel_Ethernet_FecUncorrectableBlocksPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fec-uncorrectable-blocks"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// In_8021QFrames (leaf): Number of 802.1q tagged frames received on the interface
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-8021q-frames"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-8021q-frames"
func (n *TerminalDevice_Channel_EthernetPath) In_8021QFrames() *TerminalDevice_Channel_Ethernet_In_8021QFramesPath {
	ps := &TerminalDevice_Channel_Ethernet_In_8021QFramesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-8021q-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// In_8021QFrames (leaf): Number of 802.1q tagged frames received on the interface
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-8021q-frames"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-8021q-frames"
func (n *TerminalDevice_Channel_EthernetPathAny) In_8021QFrames() *TerminalDevice_Channel_Ethernet_In_8021QFramesPathAny {
	ps := &TerminalDevice_Channel_Ethernet_In_8021QFramesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-8021q-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InBlockErrors (leaf): The number of received errored blocks. Error detection codes
// are capable of detecting whether one or more errors have
// occurred in a given sequence of bits – the block. It is
// normally not possible to determine the exact number of errored
// bits within the block
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-block-errors"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-block-errors"
func (n *TerminalDevice_Channel_EthernetPath) InBlockErrors() *TerminalDevice_Channel_Ethernet_InBlockErrorsPath {
	ps := &TerminalDevice_Channel_Ethernet_InBlockErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-block-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InBlockErrors (leaf): The number of received errored blocks. Error detection codes
// are capable of detecting whether one or more errors have
// occurred in a given sequence of bits – the block. It is
// normally not possible to determine the exact number of errored
// bits within the block
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-block-errors"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-block-errors"
func (n *TerminalDevice_Channel_EthernetPathAny) InBlockErrors() *TerminalDevice_Channel_Ethernet_InBlockErrorsPathAny {
	ps := &TerminalDevice_Channel_Ethernet_InBlockErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-block-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InCarrierErrors (leaf): The number of received errored frames due to a carrier issue.
// The value refers to MIB counter for
// dot3StatsCarrierSenseErrors
// oid=1.3.6.1.2.1.10.7.2.1.11
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-carrier-errors"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-carrier-errors"
func (n *TerminalDevice_Channel_EthernetPath) InCarrierErrors() *TerminalDevice_Channel_Ethernet_InCarrierErrorsPath {
	ps := &TerminalDevice_Channel_Ethernet_InCarrierErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-carrier-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InCarrierErrors (leaf): The number of received errored frames due to a carrier issue.
// The value refers to MIB counter for
// dot3StatsCarrierSenseErrors
// oid=1.3.6.1.2.1.10.7.2.1.11
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-carrier-errors"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-carrier-errors"
func (n *TerminalDevice_Channel_EthernetPathAny) InCarrierErrors() *TerminalDevice_Channel_Ethernet_InCarrierErrorsPathAny {
	ps := &TerminalDevice_Channel_Ethernet_InCarrierErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-carrier-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InCrcErrors (leaf): The total number of frames received that
// had a length (excluding framing bits, but
// including FCS octets) of between 64 and 1518
// octets, inclusive, but had either a bad
// Frame Check Sequence (FCS) with an integral
// number of octets (FCS Error) or a bad FCS with
// a non-integral number of octets (Alignment Error)
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-crc-errors"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-crc-errors"
func (n *TerminalDevice_Channel_EthernetPath) InCrcErrors() *TerminalDevice_Channel_Ethernet_InCrcErrorsPath {
	ps := &TerminalDevice_Channel_Ethernet_InCrcErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-crc-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InCrcErrors (leaf): The total number of frames received that
// had a length (excluding framing bits, but
// including FCS octets) of between 64 and 1518
// octets, inclusive, but had either a bad
// Frame Check Sequence (FCS) with an integral
// number of octets (FCS Error) or a bad FCS with
// a non-integral number of octets (Alignment Error)
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-crc-errors"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-crc-errors"
func (n *TerminalDevice_Channel_EthernetPathAny) InCrcErrors() *TerminalDevice_Channel_Ethernet_InCrcErrorsPathAny {
	ps := &TerminalDevice_Channel_Ethernet_InCrcErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-crc-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InFragmentFrames (leaf): The total number of frames received that were less than
// 64 octets in length (excluding framing bits but including
// FCS octets) and had either a bad Frame Check Sequence
// (FCS) with an integral number of octets (FCS Error) or a
// bad FCS with a non-integral number of octets (Alignment
// Error).
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-fragment-frames"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-fragment-frames"
func (n *TerminalDevice_Channel_EthernetPath) InFragmentFrames() *TerminalDevice_Channel_Ethernet_InFragmentFramesPath {
	ps := &TerminalDevice_Channel_Ethernet_InFragmentFramesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-fragment-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InFragmentFrames (leaf): The total number of frames received that were less than
// 64 octets in length (excluding framing bits but including
// FCS octets) and had either a bad Frame Check Sequence
// (FCS) with an integral number of octets (FCS Error) or a
// bad FCS with a non-integral number of octets (Alignment
// Error).
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-fragment-frames"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-fragment-frames"
func (n *TerminalDevice_Channel_EthernetPathAny) InFragmentFrames() *TerminalDevice_Channel_Ethernet_InFragmentFramesPathAny {
	ps := &TerminalDevice_Channel_Ethernet_InFragmentFramesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-fragment-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InInterruptedTx (leaf): The number of received errored frames due to interrupted
// transmission issue. The value refers to MIB counter for
// dot3StatsDeferredTransmissions
// oid=1.3.6.1.2.1.10.7.2.1.7
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-interrupted-tx"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-interrupted-tx"
func (n *TerminalDevice_Channel_EthernetPath) InInterruptedTx() *TerminalDevice_Channel_Ethernet_InInterruptedTxPath {
	ps := &TerminalDevice_Channel_Ethernet_InInterruptedTxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-interrupted-tx"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InInterruptedTx (leaf): The number of received errored frames due to interrupted
// transmission issue. The value refers to MIB counter for
// dot3StatsDeferredTransmissions
// oid=1.3.6.1.2.1.10.7.2.1.7
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-interrupted-tx"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-interrupted-tx"
func (n *TerminalDevice_Channel_EthernetPathAny) InInterruptedTx() *TerminalDevice_Channel_Ethernet_InInterruptedTxPathAny {
	ps := &TerminalDevice_Channel_Ethernet_InInterruptedTxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-interrupted-tx"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InJabberFrames (leaf): Number of jabber frames received on the
// interface.  Jabber frames are typically defined as oversize
// frames which also have a bad CRC.  Implementations may use
// slightly different definitions of what constitutes a jabber
// frame.  Often indicative of a NIC hardware problem.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-jabber-frames"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-jabber-frames"
func (n *TerminalDevice_Channel_EthernetPath) InJabberFrames() *TerminalDevice_Channel_Ethernet_InJabberFramesPath {
	ps := &TerminalDevice_Channel_Ethernet_InJabberFramesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-jabber-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InJabberFrames (leaf): Number of jabber frames received on the
// interface.  Jabber frames are typically defined as oversize
// frames which also have a bad CRC.  Implementations may use
// slightly different definitions of what constitutes a jabber
// frame.  Often indicative of a NIC hardware problem.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-jabber-frames"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-jabber-frames"
func (n *TerminalDevice_Channel_EthernetPathAny) InJabberFrames() *TerminalDevice_Channel_Ethernet_InJabberFramesPathAny {
	ps := &TerminalDevice_Channel_Ethernet_InJabberFramesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-jabber-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InLateCollision (leaf): The number of received errored frames due to late collision
// issue. The value refers to MIB counter for
// dot3StatsLateCollisions
// oid=1.3.6.1.2.1.10.7.2.1.8
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-late-collision"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-late-collision"
func (n *TerminalDevice_Channel_EthernetPath) InLateCollision() *TerminalDevice_Channel_Ethernet_InLateCollisionPath {
	ps := &TerminalDevice_Channel_Ethernet_InLateCollisionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-late-collision"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InLateCollision (leaf): The number of received errored frames due to late collision
// issue. The value refers to MIB counter for
// dot3StatsLateCollisions
// oid=1.3.6.1.2.1.10.7.2.1.8
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-late-collision"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-late-collision"
func (n *TerminalDevice_Channel_EthernetPathAny) InLateCollision() *TerminalDevice_Channel_Ethernet_InLateCollisionPathAny {
	ps := &TerminalDevice_Channel_Ethernet_InLateCollisionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-late-collision"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMacControlFrames (leaf): MAC layer control frames received on the interface
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-mac-control-frames"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-mac-control-frames"
func (n *TerminalDevice_Channel_EthernetPath) InMacControlFrames() *TerminalDevice_Channel_Ethernet_InMacControlFramesPath {
	ps := &TerminalDevice_Channel_Ethernet_InMacControlFramesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-mac-control-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMacControlFrames (leaf): MAC layer control frames received on the interface
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-mac-control-frames"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-mac-control-frames"
func (n *TerminalDevice_Channel_EthernetPathAny) InMacControlFrames() *TerminalDevice_Channel_Ethernet_InMacControlFramesPathAny {
	ps := &TerminalDevice_Channel_Ethernet_InMacControlFramesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-mac-control-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMacErrorsRx (leaf): The number of received errored frames due to MAC errors
// received. The value refers to MIB counter for
// dot3StatsInternalMacReceiveErrors
// oid=1.3.6.1.2.1.10.7.2.1.16
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-mac-errors-rx"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-mac-errors-rx"
func (n *TerminalDevice_Channel_EthernetPath) InMacErrorsRx() *TerminalDevice_Channel_Ethernet_InMacErrorsRxPath {
	ps := &TerminalDevice_Channel_Ethernet_InMacErrorsRxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-mac-errors-rx"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMacErrorsRx (leaf): The number of received errored frames due to MAC errors
// received. The value refers to MIB counter for
// dot3StatsInternalMacReceiveErrors
// oid=1.3.6.1.2.1.10.7.2.1.16
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-mac-errors-rx"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-mac-errors-rx"
func (n *TerminalDevice_Channel_EthernetPathAny) InMacErrorsRx() *TerminalDevice_Channel_Ethernet_InMacErrorsRxPathAny {
	ps := &TerminalDevice_Channel_Ethernet_InMacErrorsRxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-mac-errors-rx"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMacPauseFrames (leaf): MAC layer PAUSE frames received on the interface
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-mac-pause-frames"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-mac-pause-frames"
func (n *TerminalDevice_Channel_EthernetPath) InMacPauseFrames() *TerminalDevice_Channel_Ethernet_InMacPauseFramesPath {
	ps := &TerminalDevice_Channel_Ethernet_InMacPauseFramesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-mac-pause-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMacPauseFrames (leaf): MAC layer PAUSE frames received on the interface
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-mac-pause-frames"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-mac-pause-frames"
func (n *TerminalDevice_Channel_EthernetPathAny) InMacPauseFrames() *TerminalDevice_Channel_Ethernet_InMacPauseFramesPathAny {
	ps := &TerminalDevice_Channel_Ethernet_InMacPauseFramesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-mac-pause-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMaxsizeExceeded (leaf): The total number frames received that are well-formed but
// dropped due to exceeding the maximum frame size on the interface
// (e.g., MTU or MRU)
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-maxsize-exceeded"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-maxsize-exceeded"
func (n *TerminalDevice_Channel_EthernetPath) InMaxsizeExceeded() *TerminalDevice_Channel_Ethernet_InMaxsizeExceededPath {
	ps := &TerminalDevice_Channel_Ethernet_InMaxsizeExceededPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-maxsize-exceeded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMaxsizeExceeded (leaf): The total number frames received that are well-formed but
// dropped due to exceeding the maximum frame size on the interface
// (e.g., MTU or MRU)
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-maxsize-exceeded"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-maxsize-exceeded"
func (n *TerminalDevice_Channel_EthernetPathAny) InMaxsizeExceeded() *TerminalDevice_Channel_Ethernet_InMaxsizeExceededPathAny {
	ps := &TerminalDevice_Channel_Ethernet_InMaxsizeExceededPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-maxsize-exceeded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InOversizeFrames (leaf): The total number of frames received that were
// longer than 1518 octets (excluding framing bits,
// but including FCS octets) and were otherwise
// well formed.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-oversize-frames"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-oversize-frames"
func (n *TerminalDevice_Channel_EthernetPath) InOversizeFrames() *TerminalDevice_Channel_Ethernet_InOversizeFramesPath {
	ps := &TerminalDevice_Channel_Ethernet_InOversizeFramesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-oversize-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InOversizeFrames (leaf): The total number of frames received that were
// longer than 1518 octets (excluding framing bits,
// but including FCS octets) and were otherwise
// well formed.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-oversize-frames"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-oversize-frames"
func (n *TerminalDevice_Channel_EthernetPathAny) InOversizeFrames() *TerminalDevice_Channel_Ethernet_InOversizeFramesPathAny {
	ps := &TerminalDevice_Channel_Ethernet_InOversizeFramesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-oversize-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPcsBipErrors (leaf): The number of received bit interleaved parity (BIP) errors
// at the physical coding sublayer (PCS). If the interface
// consists of multiple lanes, this will be the sum of all
// errors on the lane
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-pcs-bip-errors"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-pcs-bip-errors"
func (n *TerminalDevice_Channel_EthernetPath) InPcsBipErrors() *TerminalDevice_Channel_Ethernet_InPcsBipErrorsPath {
	ps := &TerminalDevice_Channel_Ethernet_InPcsBipErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-pcs-bip-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPcsBipErrors (leaf): The number of received bit interleaved parity (BIP) errors
// at the physical coding sublayer (PCS). If the interface
// consists of multiple lanes, this will be the sum of all
// errors on the lane
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-pcs-bip-errors"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-pcs-bip-errors"
func (n *TerminalDevice_Channel_EthernetPathAny) InPcsBipErrors() *TerminalDevice_Channel_Ethernet_InPcsBipErrorsPathAny {
	ps := &TerminalDevice_Channel_Ethernet_InPcsBipErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-pcs-bip-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPcsErroredSeconds (leaf): The number of seconds that physical coding sublayer (PCS)
// errors have crossed a sytem defined threshold indicating the
// link is erroring
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-pcs-errored-seconds"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-pcs-errored-seconds"
func (n *TerminalDevice_Channel_EthernetPath) InPcsErroredSeconds() *TerminalDevice_Channel_Ethernet_InPcsErroredSecondsPath {
	ps := &TerminalDevice_Channel_Ethernet_InPcsErroredSecondsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-pcs-errored-seconds"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPcsErroredSeconds (leaf): The number of seconds that physical coding sublayer (PCS)
// errors have crossed a sytem defined threshold indicating the
// link is erroring
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-pcs-errored-seconds"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-pcs-errored-seconds"
func (n *TerminalDevice_Channel_EthernetPathAny) InPcsErroredSeconds() *TerminalDevice_Channel_Ethernet_InPcsErroredSecondsPathAny {
	ps := &TerminalDevice_Channel_Ethernet_InPcsErroredSecondsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-pcs-errored-seconds"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPcsSeverelyErroredSeconds (leaf): The number of seconds that physical coding sublayer (PCS)
// errors have crossed a system defined threshold indicating the
// link is severely erroring
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-pcs-severely-errored-seconds"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-pcs-severely-errored-seconds"
func (n *TerminalDevice_Channel_EthernetPath) InPcsSeverelyErroredSeconds() *TerminalDevice_Channel_Ethernet_InPcsSeverelyErroredSecondsPath {
	ps := &TerminalDevice_Channel_Ethernet_InPcsSeverelyErroredSecondsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-pcs-severely-errored-seconds"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPcsSeverelyErroredSeconds (leaf): The number of seconds that physical coding sublayer (PCS)
// errors have crossed a system defined threshold indicating the
// link is severely erroring
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-pcs-severely-errored-seconds"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-pcs-severely-errored-seconds"
func (n *TerminalDevice_Channel_EthernetPathAny) InPcsSeverelyErroredSeconds() *TerminalDevice_Channel_Ethernet_InPcsSeverelyErroredSecondsPathAny {
	ps := &TerminalDevice_Channel_Ethernet_InPcsSeverelyErroredSecondsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-pcs-severely-errored-seconds"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPcsUnavailableSeconds (leaf): The number of seconds that physical coding sublayer (PCS)
// errors have crossed a system defined threshold indicating the
// link is unavailable
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-pcs-unavailable-seconds"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-pcs-unavailable-seconds"
func (n *TerminalDevice_Channel_EthernetPath) InPcsUnavailableSeconds() *TerminalDevice_Channel_Ethernet_InPcsUnavailableSecondsPath {
	ps := &TerminalDevice_Channel_Ethernet_InPcsUnavailableSecondsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-pcs-unavailable-seconds"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPcsUnavailableSeconds (leaf): The number of seconds that physical coding sublayer (PCS)
// errors have crossed a system defined threshold indicating the
// link is unavailable
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-pcs-unavailable-seconds"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-pcs-unavailable-seconds"
func (n *TerminalDevice_Channel_EthernetPathAny) InPcsUnavailableSeconds() *TerminalDevice_Channel_Ethernet_InPcsUnavailableSecondsPathAny {
	ps := &TerminalDevice_Channel_Ethernet_InPcsUnavailableSecondsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-pcs-unavailable-seconds"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InSingleCollision (leaf): The number of received errored frames due to single collision
// issue. The value refers to MIB counter for
// dot3StatsSingleCollisionFrames
// oid=1.3.6.1.2.1.10.7.2.1.4
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-single-collision"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-single-collision"
func (n *TerminalDevice_Channel_EthernetPath) InSingleCollision() *TerminalDevice_Channel_Ethernet_InSingleCollisionPath {
	ps := &TerminalDevice_Channel_Ethernet_InSingleCollisionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-single-collision"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InSingleCollision (leaf): The number of received errored frames due to single collision
// issue. The value refers to MIB counter for
// dot3StatsSingleCollisionFrames
// oid=1.3.6.1.2.1.10.7.2.1.4
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-single-collision"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-single-collision"
func (n *TerminalDevice_Channel_EthernetPathAny) InSingleCollision() *TerminalDevice_Channel_Ethernet_InSingleCollisionPathAny {
	ps := &TerminalDevice_Channel_Ethernet_InSingleCollisionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-single-collision"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InSymbolError (leaf): The number of received errored frames due to symbol error.
// The value refers to MIB counter for
// in-symbol-error
// oid=1.3.6.1.2.1.10.7.2.1.18
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-symbol-error"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-symbol-error"
func (n *TerminalDevice_Channel_EthernetPath) InSymbolError() *TerminalDevice_Channel_Ethernet_InSymbolErrorPath {
	ps := &TerminalDevice_Channel_Ethernet_InSymbolErrorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-symbol-error"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InSymbolError (leaf): The number of received errored frames due to symbol error.
// The value refers to MIB counter for
// in-symbol-error
// oid=1.3.6.1.2.1.10.7.2.1.18
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-symbol-error"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-symbol-error"
func (n *TerminalDevice_Channel_EthernetPathAny) InSymbolError() *TerminalDevice_Channel_Ethernet_InSymbolErrorPathAny {
	ps := &TerminalDevice_Channel_Ethernet_InSymbolErrorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-symbol-error"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InUndersizeFrames (leaf): The total number of frames received that were
// less than 64 octets long (excluding framing bits,
// but including FCS octets) and were otherwise well
// formed.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-undersize-frames"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-undersize-frames"
func (n *TerminalDevice_Channel_EthernetPath) InUndersizeFrames() *TerminalDevice_Channel_Ethernet_InUndersizeFramesPath {
	ps := &TerminalDevice_Channel_Ethernet_InUndersizeFramesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-undersize-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InUndersizeFrames (leaf): The total number of frames received that were
// less than 64 octets long (excluding framing bits,
// but including FCS octets) and were otherwise well
// formed.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/in-undersize-frames"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/in-undersize-frames"
func (n *TerminalDevice_Channel_EthernetPathAny) InUndersizeFrames() *TerminalDevice_Channel_Ethernet_InUndersizeFramesPathAny {
	ps := &TerminalDevice_Channel_Ethernet_InUndersizeFramesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-undersize-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Lldp (container): LLDP data for logical channels
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "lldp"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp"
func (n *TerminalDevice_Channel_EthernetPath) Lldp() *TerminalDevice_Channel_Ethernet_LldpPath {
	ps := &TerminalDevice_Channel_Ethernet_LldpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"lldp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Lldp (container): LLDP data for logical channels
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "lldp"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp"
func (n *TerminalDevice_Channel_EthernetPathAny) Lldp() *TerminalDevice_Channel_Ethernet_LldpPathAny {
	ps := &TerminalDevice_Channel_Ethernet_LldpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lldp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Out_8021QFrames (leaf): Number of 802.1q tagged frames sent on the interface
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/out-8021q-frames"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/out-8021q-frames"
func (n *TerminalDevice_Channel_EthernetPath) Out_8021QFrames() *TerminalDevice_Channel_Ethernet_Out_8021QFramesPath {
	ps := &TerminalDevice_Channel_Ethernet_Out_8021QFramesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-8021q-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Out_8021QFrames (leaf): Number of 802.1q tagged frames sent on the interface
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/out-8021q-frames"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/out-8021q-frames"
func (n *TerminalDevice_Channel_EthernetPathAny) Out_8021QFrames() *TerminalDevice_Channel_Ethernet_Out_8021QFramesPathAny {
	ps := &TerminalDevice_Channel_Ethernet_Out_8021QFramesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-8021q-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutBlockErrors (leaf): The number of transmitted errored blocks. Error detection
// codes are capable of detecting whether one or more errors have
// occurred in a given sequence of bits – the block. It is
// normally not possible to determine the exact number of errored
// bits within the block
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/out-block-errors"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/out-block-errors"
func (n *TerminalDevice_Channel_EthernetPath) OutBlockErrors() *TerminalDevice_Channel_Ethernet_OutBlockErrorsPath {
	ps := &TerminalDevice_Channel_Ethernet_OutBlockErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-block-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutBlockErrors (leaf): The number of transmitted errored blocks. Error detection
// codes are capable of detecting whether one or more errors have
// occurred in a given sequence of bits – the block. It is
// normally not possible to determine the exact number of errored
// bits within the block
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/out-block-errors"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/out-block-errors"
func (n *TerminalDevice_Channel_EthernetPathAny) OutBlockErrors() *TerminalDevice_Channel_Ethernet_OutBlockErrorsPathAny {
	ps := &TerminalDevice_Channel_Ethernet_OutBlockErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-block-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutCrcErrors (leaf): Number of FCS/CRC error check failures sent on the interface
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/out-crc-errors"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/out-crc-errors"
func (n *TerminalDevice_Channel_EthernetPath) OutCrcErrors() *TerminalDevice_Channel_Ethernet_OutCrcErrorsPath {
	ps := &TerminalDevice_Channel_Ethernet_OutCrcErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-crc-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutCrcErrors (leaf): Number of FCS/CRC error check failures sent on the interface
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/out-crc-errors"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/out-crc-errors"
func (n *TerminalDevice_Channel_EthernetPathAny) OutCrcErrors() *TerminalDevice_Channel_Ethernet_OutCrcErrorsPathAny {
	ps := &TerminalDevice_Channel_Ethernet_OutCrcErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-crc-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMacControlFrames (leaf): MAC layer control frames sent on the interface
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/out-mac-control-frames"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/out-mac-control-frames"
func (n *TerminalDevice_Channel_EthernetPath) OutMacControlFrames() *TerminalDevice_Channel_Ethernet_OutMacControlFramesPath {
	ps := &TerminalDevice_Channel_Ethernet_OutMacControlFramesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-mac-control-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMacControlFrames (leaf): MAC layer control frames sent on the interface
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/out-mac-control-frames"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/out-mac-control-frames"
func (n *TerminalDevice_Channel_EthernetPathAny) OutMacControlFrames() *TerminalDevice_Channel_Ethernet_OutMacControlFramesPathAny {
	ps := &TerminalDevice_Channel_Ethernet_OutMacControlFramesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-mac-control-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMacErrorsTx (leaf): The number of sent errored frames due to MAC errors
// transmitted. The value refers to MIB counter for
// dot3StatsInternalMacTransmitErrors
// oid=1.3.6.1.2.1.10.7.2.1.10
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/out-mac-errors-tx"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/out-mac-errors-tx"
func (n *TerminalDevice_Channel_EthernetPath) OutMacErrorsTx() *TerminalDevice_Channel_Ethernet_OutMacErrorsTxPath {
	ps := &TerminalDevice_Channel_Ethernet_OutMacErrorsTxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-mac-errors-tx"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMacErrorsTx (leaf): The number of sent errored frames due to MAC errors
// transmitted. The value refers to MIB counter for
// dot3StatsInternalMacTransmitErrors
// oid=1.3.6.1.2.1.10.7.2.1.10
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/out-mac-errors-tx"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/out-mac-errors-tx"
func (n *TerminalDevice_Channel_EthernetPathAny) OutMacErrorsTx() *TerminalDevice_Channel_Ethernet_OutMacErrorsTxPathAny {
	ps := &TerminalDevice_Channel_Ethernet_OutMacErrorsTxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-mac-errors-tx"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMacPauseFrames (leaf): MAC layer PAUSE frames sent on the interface
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/out-mac-pause-frames"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/out-mac-pause-frames"
func (n *TerminalDevice_Channel_EthernetPath) OutMacPauseFrames() *TerminalDevice_Channel_Ethernet_OutMacPauseFramesPath {
	ps := &TerminalDevice_Channel_Ethernet_OutMacPauseFramesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-mac-pause-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMacPauseFrames (leaf): MAC layer PAUSE frames sent on the interface
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/out-mac-pause-frames"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/out-mac-pause-frames"
func (n *TerminalDevice_Channel_EthernetPathAny) OutMacPauseFrames() *TerminalDevice_Channel_Ethernet_OutMacPauseFramesPathAny {
	ps := &TerminalDevice_Channel_Ethernet_OutMacPauseFramesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-mac-pause-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPcsBipErrors (leaf): The number of transmitted bit interleaved parity (BIP) errors
// at the physical coding sublayer (PCS). If the interface
// consists of multiple lanes, this will be the sum of all
// errors on the lane
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/out-pcs-bip-errors"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/out-pcs-bip-errors"
func (n *TerminalDevice_Channel_EthernetPath) OutPcsBipErrors() *TerminalDevice_Channel_Ethernet_OutPcsBipErrorsPath {
	ps := &TerminalDevice_Channel_Ethernet_OutPcsBipErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-pcs-bip-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPcsBipErrors (leaf): The number of transmitted bit interleaved parity (BIP) errors
// at the physical coding sublayer (PCS). If the interface
// consists of multiple lanes, this will be the sum of all
// errors on the lane
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/out-pcs-bip-errors"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/out-pcs-bip-errors"
func (n *TerminalDevice_Channel_EthernetPathAny) OutPcsBipErrors() *TerminalDevice_Channel_Ethernet_OutPcsBipErrorsPathAny {
	ps := &TerminalDevice_Channel_Ethernet_OutPcsBipErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-pcs-bip-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PostFecBer (container): Bit error rate after forward error correction -- computed
// value with 18 decimal precision. Note that decimal64
// supports values as small as i x 10^-18 where i is an
// integer. Values smaller than this should be reported as 0
// to inidicate error free or near error free performance.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/post-fec-ber"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber"
func (n *TerminalDevice_Channel_EthernetPath) PostFecBer() *TerminalDevice_Channel_Ethernet_PostFecBerPath {
	ps := &TerminalDevice_Channel_Ethernet_PostFecBerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "post-fec-ber"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PostFecBer (container): Bit error rate after forward error correction -- computed
// value with 18 decimal precision. Note that decimal64
// supports values as small as i x 10^-18 where i is an
// integer. Values smaller than this should be reported as 0
// to inidicate error free or near error free performance.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/post-fec-ber"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber"
func (n *TerminalDevice_Channel_EthernetPathAny) PostFecBer() *TerminalDevice_Channel_Ethernet_PostFecBerPathAny {
	ps := &TerminalDevice_Channel_Ethernet_PostFecBerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "post-fec-ber"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PreFecBer (container): Bit error rate before forward error correction -- computed
// value with 18 decimal precision. Note that decimal64
// supports values as small as i x 10^-18 where i is an
// integer. Values smaller than this should be reported as 0
// to inidicate error free or near error free performance.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/pre-fec-ber"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber"
func (n *TerminalDevice_Channel_EthernetPath) PreFecBer() *TerminalDevice_Channel_Ethernet_PreFecBerPath {
	ps := &TerminalDevice_Channel_Ethernet_PreFecBerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "pre-fec-ber"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PreFecBer (container): Bit error rate before forward error correction -- computed
// value with 18 decimal precision. Note that decimal64
// supports values as small as i x 10^-18 where i is an
// integer. Values smaller than this should be reported as 0
// to inidicate error free or near error free performance.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/pre-fec-ber"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber"
func (n *TerminalDevice_Channel_EthernetPathAny) PreFecBer() *TerminalDevice_Channel_Ethernet_PreFecBerPathAny {
	ps := &TerminalDevice_Channel_Ethernet_PreFecBerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "pre-fec-ber"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// QValue (container): Quality value (factor) in dB of a channel with two
// decimal precision. Values include the instantaneous,
// average, minimum, and maximum statistics. If avg/min/max
// statistics are not supported, the target is expected
// to just supply the instant value
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/q-value"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/q-value"
func (n *TerminalDevice_Channel_EthernetPath) QValue() *TerminalDevice_Channel_Ethernet_QValuePath {
	ps := &TerminalDevice_Channel_Ethernet_QValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "q-value"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// QValue (container): Quality value (factor) in dB of a channel with two
// decimal precision. Values include the instantaneous,
// average, minimum, and maximum statistics. If avg/min/max
// statistics are not supported, the target is expected
// to just supply the instant value
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/q-value"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/q-value"
func (n *TerminalDevice_Channel_EthernetPathAny) QValue() *TerminalDevice_Channel_Ethernet_QValuePathAny {
	ps := &TerminalDevice_Channel_Ethernet_QValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "q-value"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_EthernetPath) State() ygnmi.SingletonQuery[*oc.TerminalDevice_Channel_Ethernet] {
	return ygnmi.NewSingletonQuery[*oc.TerminalDevice_Channel_Ethernet](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_EthernetPathAny) State() ygnmi.WildcardQuery[*oc.TerminalDevice_Channel_Ethernet] {
	return ygnmi.NewWildcardQuery[*oc.TerminalDevice_Channel_Ethernet](
		"TerminalDevice_Channel_Ethernet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_EthernetPath) Config() ygnmi.ConfigQuery[*oc.TerminalDevice_Channel_Ethernet] {
	return ygnmi.NewConfigQuery[*oc.TerminalDevice_Channel_Ethernet](
		"TerminalDevice_Channel_Ethernet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_EthernetPathAny) Config() ygnmi.WildcardQuery[*oc.TerminalDevice_Channel_Ethernet] {
	return ygnmi.NewWildcardQuery[*oc.TerminalDevice_Channel_Ethernet](
		"TerminalDevice_Channel_Ethernet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_Esnr_AvgPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr/avg YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_Esnr_AvgPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr/avg YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/esnr/avg"
func (n *TerminalDevice_Channel_Ethernet_Esnr_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"TerminalDevice_Channel_Ethernet_Esnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Esnr).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Esnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/esnr/avg"
func (n *TerminalDevice_Channel_Ethernet_Esnr_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"TerminalDevice_Channel_Ethernet_Esnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Esnr).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Esnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_Esnr_InstantPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr/instant YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_Esnr_InstantPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr/instant YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/esnr/instant"
func (n *TerminalDevice_Channel_Ethernet_Esnr_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"TerminalDevice_Channel_Ethernet_Esnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Esnr).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Esnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/esnr/instant"
func (n *TerminalDevice_Channel_Ethernet_Esnr_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"TerminalDevice_Channel_Ethernet_Esnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Esnr).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Esnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_Esnr_IntervalPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr/interval YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_Esnr_IntervalPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr/interval YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/esnr/interval"
func (n *TerminalDevice_Channel_Ethernet_Esnr_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet_Esnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Esnr).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Esnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/esnr/interval"
func (n *TerminalDevice_Channel_Ethernet_Esnr_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet_Esnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Esnr).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Esnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_Esnr_MaxPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr/max YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_Esnr_MaxPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr/max YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/esnr/max"
func (n *TerminalDevice_Channel_Ethernet_Esnr_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"TerminalDevice_Channel_Ethernet_Esnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Esnr).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Esnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/esnr/max"
func (n *TerminalDevice_Channel_Ethernet_Esnr_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"TerminalDevice_Channel_Ethernet_Esnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Esnr).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Esnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_Esnr_MaxTimePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr/max-time YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_Esnr_MaxTimePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr/max-time YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/esnr/max-time"
func (n *TerminalDevice_Channel_Ethernet_Esnr_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet_Esnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Esnr).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Esnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/esnr/max-time"
func (n *TerminalDevice_Channel_Ethernet_Esnr_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet_Esnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Esnr).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Esnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_Esnr_MinPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr/min YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_Esnr_MinPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr/min YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/esnr/min"
func (n *TerminalDevice_Channel_Ethernet_Esnr_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"TerminalDevice_Channel_Ethernet_Esnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Esnr).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Esnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/esnr/min"
func (n *TerminalDevice_Channel_Ethernet_Esnr_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"TerminalDevice_Channel_Ethernet_Esnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Esnr).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Esnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_Esnr_MinTimePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr/min-time YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_Esnr_MinTimePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr/min-time YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/esnr/min-time"
func (n *TerminalDevice_Channel_Ethernet_Esnr_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet_Esnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Esnr).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Esnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/esnr/min-time"
func (n *TerminalDevice_Channel_Ethernet_Esnr_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet_Esnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Esnr).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Esnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_EsnrPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr YANG schema element.
type TerminalDevice_Channel_Ethernet_EsnrPath struct {
	*ygnmi.NodePath
}

// TerminalDevice_Channel_Ethernet_EsnrPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr YANG schema element.
type TerminalDevice_Channel_Ethernet_EsnrPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/esnr/avg"
func (n *TerminalDevice_Channel_Ethernet_EsnrPath) Avg() *TerminalDevice_Channel_Ethernet_Esnr_AvgPath {
	ps := &TerminalDevice_Channel_Ethernet_Esnr_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/esnr/avg"
func (n *TerminalDevice_Channel_Ethernet_EsnrPathAny) Avg() *TerminalDevice_Channel_Ethernet_Esnr_AvgPathAny {
	ps := &TerminalDevice_Channel_Ethernet_Esnr_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/esnr/instant"
func (n *TerminalDevice_Channel_Ethernet_EsnrPath) Instant() *TerminalDevice_Channel_Ethernet_Esnr_InstantPath {
	ps := &TerminalDevice_Channel_Ethernet_Esnr_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/esnr/instant"
func (n *TerminalDevice_Channel_Ethernet_EsnrPathAny) Instant() *TerminalDevice_Channel_Ethernet_Esnr_InstantPathAny {
	ps := &TerminalDevice_Channel_Ethernet_Esnr_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/esnr/interval"
func (n *TerminalDevice_Channel_Ethernet_EsnrPath) Interval() *TerminalDevice_Channel_Ethernet_Esnr_IntervalPath {
	ps := &TerminalDevice_Channel_Ethernet_Esnr_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/esnr/interval"
func (n *TerminalDevice_Channel_Ethernet_EsnrPathAny) Interval() *TerminalDevice_Channel_Ethernet_Esnr_IntervalPathAny {
	ps := &TerminalDevice_Channel_Ethernet_Esnr_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/esnr/max"
func (n *TerminalDevice_Channel_Ethernet_EsnrPath) Max() *TerminalDevice_Channel_Ethernet_Esnr_MaxPath {
	ps := &TerminalDevice_Channel_Ethernet_Esnr_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/esnr/max"
func (n *TerminalDevice_Channel_Ethernet_EsnrPathAny) Max() *TerminalDevice_Channel_Ethernet_Esnr_MaxPathAny {
	ps := &TerminalDevice_Channel_Ethernet_Esnr_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-terminal-device"
//		Path from parent:     "max-time"
//		Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/esnr/max-time"
func (n *TerminalDevice_Channel_Ethernet_EsnrPath) MaxTime() *TerminalDevice_Channel_Ethernet_Esnr_MaxTimePath {
	ps := &TerminalDevice_Channel_Ethernet_Esnr_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-terminal-device"
//		Path from parent:     "max-time"
//		Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/esnr/max-time"
func (n *TerminalDevice_Channel_Ethernet_EsnrPathAny) MaxTime() *TerminalDevice_Channel_Ethernet_Esnr_MaxTimePathAny {
	ps := &TerminalDevice_Channel_Ethernet_Esnr_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/esnr/min"
func (n *TerminalDevice_Channel_Ethernet_EsnrPath) Min() *TerminalDevice_Channel_Ethernet_Esnr_MinPath {
	ps := &TerminalDevice_Channel_Ethernet_Esnr_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/esnr/min"
func (n *TerminalDevice_Channel_Ethernet_EsnrPathAny) Min() *TerminalDevice_Channel_Ethernet_Esnr_MinPathAny {
	ps := &TerminalDevice_Channel_Ethernet_Esnr_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-terminal-device"
//		Path from parent:     "min-time"
//		Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/esnr/min-time"
func (n *TerminalDevice_Channel_Ethernet_EsnrPath) MinTime() *TerminalDevice_Channel_Ethernet_Esnr_MinTimePath {
	ps := &TerminalDevice_Channel_Ethernet_Esnr_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-terminal-device"
//		Path from parent:     "min-time"
//		Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/esnr/min-time"
func (n *TerminalDevice_Channel_Ethernet_EsnrPathAny) MinTime() *TerminalDevice_Channel_Ethernet_Esnr_MinTimePathAny {
	ps := &TerminalDevice_Channel_Ethernet_Esnr_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_Ethernet_EsnrPath) State() ygnmi.SingletonQuery[*oc.TerminalDevice_Channel_Ethernet_Esnr] {
	return ygnmi.NewSingletonQuery[*oc.TerminalDevice_Channel_Ethernet_Esnr](
		"TerminalDevice_Channel_Ethernet_Esnr",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_Ethernet_EsnrPathAny) State() ygnmi.WildcardQuery[*oc.TerminalDevice_Channel_Ethernet_Esnr] {
	return ygnmi.NewWildcardQuery[*oc.TerminalDevice_Channel_Ethernet_Esnr](
		"TerminalDevice_Channel_Ethernet_Esnr",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_Lldp_EnabledPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/enabled YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_Lldp_EnabledPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/enabled YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/enabled"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/state/enabled"
func (n *TerminalDevice_Channel_Ethernet_Lldp_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"TerminalDevice_Channel_Ethernet_Lldp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/enabled"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/state/enabled"
func (n *TerminalDevice_Channel_Ethernet_Lldp_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"TerminalDevice_Channel_Ethernet_Lldp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/enabled"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/config/enabled"
func (n *TerminalDevice_Channel_Ethernet_Lldp_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"TerminalDevice_Channel_Ethernet_Lldp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/enabled"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/config/enabled"
func (n *TerminalDevice_Channel_Ethernet_Lldp_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"TerminalDevice_Channel_Ethernet_Lldp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_Lldp_SnoopingPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/snooping YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_SnoopingPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_Lldp_SnoopingPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/snooping YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_SnoopingPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/snooping"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/state/snooping"
func (n *TerminalDevice_Channel_Ethernet_Lldp_SnoopingPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"TerminalDevice_Channel_Ethernet_Lldp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "snooping"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp).Snooping
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/snooping"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/state/snooping"
func (n *TerminalDevice_Channel_Ethernet_Lldp_SnoopingPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"TerminalDevice_Channel_Ethernet_Lldp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "snooping"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp).Snooping
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/snooping"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/config/snooping"
func (n *TerminalDevice_Channel_Ethernet_Lldp_SnoopingPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"TerminalDevice_Channel_Ethernet_Lldp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "snooping"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp).Snooping
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/snooping"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/config/snooping"
func (n *TerminalDevice_Channel_Ethernet_Lldp_SnoopingPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"TerminalDevice_Channel_Ethernet_Lldp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "snooping"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp).Snooping
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_LldpPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp YANG schema element.
type TerminalDevice_Channel_Ethernet_LldpPath struct {
	*ygnmi.NodePath
}

// TerminalDevice_Channel_Ethernet_LldpPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp YANG schema element.
type TerminalDevice_Channel_Ethernet_LldpPathAny struct {
	*ygnmi.NodePath
}

// Counters (container): LLDP counters on each interface
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/counters"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters"
func (n *TerminalDevice_Channel_Ethernet_LldpPath) Counters() *TerminalDevice_Channel_Ethernet_Lldp_CountersPath {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): LLDP counters on each interface
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/counters"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters"
func (n *TerminalDevice_Channel_Ethernet_LldpPathAny) Counters() *TerminalDevice_Channel_Ethernet_Lldp_CountersPathAny {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Enabled (leaf): Enable or disable the LLDP protocol on the logical channel.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/enabled"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/*/enabled"
func (n *TerminalDevice_Channel_Ethernet_LldpPath) Enabled() *TerminalDevice_Channel_Ethernet_Lldp_EnabledPath {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Enable or disable the LLDP protocol on the logical channel.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/enabled"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/*/enabled"
func (n *TerminalDevice_Channel_Ethernet_LldpPathAny) Enabled() *TerminalDevice_Channel_Ethernet_Lldp_EnabledPathAny {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborAny (list): List of LLDP neighbors. If the implementation only
// supports one neighbor, this would always be a list with
// one item. If the device and neighbor supported multiple
// neighbors, which can be achieved via LLDP forwarding, then
// this would be supported
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor"
func (n *TerminalDevice_Channel_Ethernet_LldpPath) NeighborAny() *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// NeighborAny (list): List of LLDP neighbors. If the implementation only
// supports one neighbor, this would always be a list with
// one item. If the device and neighbor supported multiple
// neighbors, which can be achieved via LLDP forwarding, then
// this would be supported
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor"
func (n *TerminalDevice_Channel_Ethernet_LldpPathAny) NeighborAny() *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// Neighbor (list): List of LLDP neighbors. If the implementation only
// supports one neighbor, this would always be a list with
// one item. If the device and neighbor supported multiple
// neighbors, which can be achieved via LLDP forwarding, then
// this would be supported
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor"
//
//	Id: string
func (n *TerminalDevice_Channel_Ethernet_LldpPath) Neighbor(Id string) *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_NeighborPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// Neighbor (list): List of LLDP neighbors. If the implementation only
// supports one neighbor, this would always be a list with
// one item. If the device and neighbor supported multiple
// neighbors, which can be achieved via LLDP forwarding, then
// this would be supported
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor"
//
//	Id: string
func (n *TerminalDevice_Channel_Ethernet_LldpPathAny) Neighbor(Id string) *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// NeighborMap (list): List of LLDP neighbors. If the implementation only
// supports one neighbor, this would always be a list with
// one item. If the device and neighbor supported multiple
// neighbors, which can be achieved via LLDP forwarding, then
// this would be supported
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor"
func (n *TerminalDevice_Channel_Ethernet_LldpPath) NeighborMap() *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathMap {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_NeighborPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NeighborMap (list): List of LLDP neighbors. If the implementation only
// supports one neighbor, this would always be a list with
// one item. If the device and neighbor supported multiple
// neighbors, which can be achieved via LLDP forwarding, then
// this would be supported
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor"
func (n *TerminalDevice_Channel_Ethernet_LldpPathAny) NeighborMap() *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathMapAny {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_NeighborPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Snooping (leaf): If true, LLDP PDUs are only received and processed on
// the logical-channel, but are not originated by the local
// agent. The PDUs are not dropped by the logical channel after
// processing, but relayed to the downstream link layer
// neighbors. The snooping mode is valid only when LLDP is
// enabled on the logical channel. The snooping mode is useful
// when a logical channel does not want its link layer neighbors
// to discover itself since, for example, it is a lower-layer
// logical channel.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/snooping"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/*/snooping"
func (n *TerminalDevice_Channel_Ethernet_LldpPath) Snooping() *TerminalDevice_Channel_Ethernet_Lldp_SnoopingPath {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_SnoopingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "snooping"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Snooping (leaf): If true, LLDP PDUs are only received and processed on
// the logical-channel, but are not originated by the local
// agent. The PDUs are not dropped by the logical channel after
// processing, but relayed to the downstream link layer
// neighbors. The snooping mode is valid only when LLDP is
// enabled on the logical channel. The snooping mode is useful
// when a logical channel does not want its link layer neighbors
// to discover itself since, for example, it is a lower-layer
// logical channel.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/snooping"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/*/snooping"
func (n *TerminalDevice_Channel_Ethernet_LldpPathAny) Snooping() *TerminalDevice_Channel_Ethernet_Lldp_SnoopingPathAny {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_SnoopingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "snooping"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_Ethernet_LldpPath) State() ygnmi.SingletonQuery[*oc.TerminalDevice_Channel_Ethernet_Lldp] {
	return ygnmi.NewSingletonQuery[*oc.TerminalDevice_Channel_Ethernet_Lldp](
		"TerminalDevice_Channel_Ethernet_Lldp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_Ethernet_LldpPathAny) State() ygnmi.WildcardQuery[*oc.TerminalDevice_Channel_Ethernet_Lldp] {
	return ygnmi.NewWildcardQuery[*oc.TerminalDevice_Channel_Ethernet_Lldp](
		"TerminalDevice_Channel_Ethernet_Lldp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_Ethernet_LldpPath) Config() ygnmi.ConfigQuery[*oc.TerminalDevice_Channel_Ethernet_Lldp] {
	return ygnmi.NewConfigQuery[*oc.TerminalDevice_Channel_Ethernet_Lldp](
		"TerminalDevice_Channel_Ethernet_Lldp",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_Ethernet_LldpPathAny) Config() ygnmi.WildcardQuery[*oc.TerminalDevice_Channel_Ethernet_Lldp] {
	return ygnmi.NewWildcardQuery[*oc.TerminalDevice_Channel_Ethernet_Lldp](
		"TerminalDevice_Channel_Ethernet_Lldp",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameDiscardPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-discard YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameDiscardPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameDiscardPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-discard YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameDiscardPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "frame-discard"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-discard"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameDiscardPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet_Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-discard"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Counters).FrameDiscard
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "frame-discard"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-discard"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameDiscardPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet_Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-discard"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Counters).FrameDiscard
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorInPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-error-in YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorInPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorInPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-error-in YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorInPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "frame-error-in"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-error-in"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorInPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet_Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-error-in"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Counters).FrameErrorIn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "frame-error-in"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-error-in"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorInPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet_Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-error-in"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Counters).FrameErrorIn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorOutPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-error-out YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorOutPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorOutPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-error-out YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorOutPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "frame-error-out"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-error-out"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorOutPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet_Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-error-out"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Counters).FrameErrorOut
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "frame-error-out"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-error-out"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorOutPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet_Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-error-out"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Counters).FrameErrorOut
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameInPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-in YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameInPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameInPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-in YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameInPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "frame-in"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-in"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameInPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet_Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-in"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Counters).FrameIn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "frame-in"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-in"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameInPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet_Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-in"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Counters).FrameIn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameOutPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-out YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameOutPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameOutPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-out YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameOutPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "frame-out"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-out"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameOutPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet_Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-out"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Counters).FrameOut
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "frame-out"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-out"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameOutPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet_Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-out"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Counters).FrameOut
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_LastClearPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/last-clear YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_LastClearPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_LastClearPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/last-clear YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_LastClearPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "last-clear"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/last-clear"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Counters_LastClearPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"TerminalDevice_Channel_Ethernet_Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Counters).LastClear
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "last-clear"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/last-clear"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Counters_LastClearPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"TerminalDevice_Channel_Ethernet_Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Counters).LastClear
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvDiscardPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/tlv-discard YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvDiscardPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvDiscardPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/tlv-discard YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvDiscardPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "tlv-discard"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/tlv-discard"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvDiscardPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet_Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"tlv-discard"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Counters).TlvDiscard
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "tlv-discard"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/tlv-discard"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvDiscardPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet_Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"tlv-discard"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Counters).TlvDiscard
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvUnknownPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/tlv-unknown YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvUnknownPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvUnknownPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/tlv-unknown YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvUnknownPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "tlv-unknown"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/tlv-unknown"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvUnknownPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet_Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"tlv-unknown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Counters).TlvUnknown
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "tlv-unknown"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/tlv-unknown"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvUnknownPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet_Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"tlv-unknown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Counters).TlvUnknown
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_Lldp_CountersPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_CountersPath struct {
	*ygnmi.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_CountersPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_CountersPathAny struct {
	*ygnmi.NodePath
}

// FrameDiscard (leaf): The number of LLDP frames received and discarded.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "frame-discard"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-discard"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPath) FrameDiscard() *TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameDiscardPath {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameDiscardPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-discard"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameDiscard (leaf): The number of LLDP frames received and discarded.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "frame-discard"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-discard"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPathAny) FrameDiscard() *TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameDiscardPathAny {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameDiscardPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-discard"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameErrorIn (leaf): The number of LLDP frames received with errors.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "frame-error-in"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-error-in"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPath) FrameErrorIn() *TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorInPath {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorInPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-error-in"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameErrorIn (leaf): The number of LLDP frames received with errors.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "frame-error-in"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-error-in"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPathAny) FrameErrorIn() *TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorInPathAny {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorInPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-error-in"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameErrorOut (leaf): The number of frame transmit errors on the
// interface.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "frame-error-out"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-error-out"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPath) FrameErrorOut() *TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorOutPath {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorOutPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-error-out"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameErrorOut (leaf): The number of frame transmit errors on the
// interface.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "frame-error-out"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-error-out"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPathAny) FrameErrorOut() *TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorOutPathAny {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorOutPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-error-out"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameIn (leaf): The number of lldp frames received.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "frame-in"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-in"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPath) FrameIn() *TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameInPath {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameInPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-in"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameIn (leaf): The number of lldp frames received.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "frame-in"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-in"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPathAny) FrameIn() *TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameInPathAny {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameInPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-in"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameOut (leaf): The number of frames transmitted out.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "frame-out"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-out"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPath) FrameOut() *TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameOutPath {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameOutPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-out"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameOut (leaf): The number of frames transmitted out.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "frame-out"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-out"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPathAny) FrameOut() *TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameOutPathAny {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameOutPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-out"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastClear (leaf): Indicates the last time the counters were
// cleared.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "last-clear"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/last-clear"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPath) LastClear() *TerminalDevice_Channel_Ethernet_Lldp_Counters_LastClearPath {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Counters_LastClearPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-clear"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastClear (leaf): Indicates the last time the counters were
// cleared.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "last-clear"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/last-clear"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPathAny) LastClear() *TerminalDevice_Channel_Ethernet_Lldp_Counters_LastClearPathAny {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Counters_LastClearPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-clear"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TlvDiscard (leaf): The number of TLV frames received and discarded.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "tlv-discard"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/tlv-discard"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPath) TlvDiscard() *TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvDiscardPath {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvDiscardPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"tlv-discard"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TlvDiscard (leaf): The number of TLV frames received and discarded.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "tlv-discard"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/tlv-discard"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPathAny) TlvDiscard() *TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvDiscardPathAny {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvDiscardPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tlv-discard"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TlvUnknown (leaf): The number of frames received with unknown TLV.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "tlv-unknown"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/tlv-unknown"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPath) TlvUnknown() *TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvUnknownPath {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvUnknownPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"tlv-unknown"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TlvUnknown (leaf): The number of frames received with unknown TLV.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "tlv-unknown"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/tlv-unknown"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPathAny) TlvUnknown() *TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvUnknownPathAny {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvUnknownPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tlv-unknown"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPath) State() ygnmi.SingletonQuery[*oc.TerminalDevice_Channel_Ethernet_Lldp_Counters] {
	return ygnmi.NewSingletonQuery[*oc.TerminalDevice_Channel_Ethernet_Lldp_Counters](
		"TerminalDevice_Channel_Ethernet_Lldp_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPathAny) State() ygnmi.WildcardQuery[*oc.TerminalDevice_Channel_Ethernet_Lldp_Counters] {
	return ygnmi.NewWildcardQuery[*oc.TerminalDevice_Channel_Ethernet_Lldp_Counters](
		"TerminalDevice_Channel_Ethernet_Lldp_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_AgePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/age YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_AgePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_AgePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/age YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_AgePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/age"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/age"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_AgePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "age"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor).Age
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/age"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/age"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_AgePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "age"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor).Age
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/chassis-id YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/chassis-id YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/chassis-id"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/chassis-id"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "chassis-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor).ChassisId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/chassis-id"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/chassis-id"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "chassis-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor).ChassisId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdTypePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/chassis-id-type YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdTypePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/chassis-id-type YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/chassis-id-type"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/chassis-id-type"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdTypePath) State() ygnmi.SingletonQuery[oc.E_Lldp_ChassisIdType] {
	return ygnmi.NewSingletonQuery[oc.E_Lldp_ChassisIdType](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "chassis-id-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Lldp_ChassisIdType, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor).ChassisIdType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/chassis-id-type"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/chassis-id-type"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdTypePathAny) State() ygnmi.WildcardQuery[oc.E_Lldp_ChassisIdType] {
	return ygnmi.NewWildcardQuery[oc.E_Lldp_ChassisIdType](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "chassis-id-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Lldp_ChassisIdType, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor).ChassisIdType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_IdPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/id YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_IdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_IdPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/id YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_IdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/id"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/id"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_IdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/id"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/id"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_IdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "id"
//	Path from root:       ""
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_IdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "id"
//	Path from root:       ""
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_IdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_LastUpdatePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/last-update YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_LastUpdatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_LastUpdatePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/last-update YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_LastUpdatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/last-update"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/last-update"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_LastUpdatePath) State() ygnmi.SingletonQuery[int64] {
	return ygnmi.NewSingletonQuery[int64](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-update"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor).LastUpdate
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/last-update"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/last-update"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_LastUpdatePathAny) State() ygnmi.WildcardQuery[int64] {
	return ygnmi.NewWildcardQuery[int64](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-update"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor).LastUpdate
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/management-address YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/management-address YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/management-address"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/management-address"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "management-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor).ManagementAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/management-address"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/management-address"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "management-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor).ManagementAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressTypePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/management-address-type YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressTypePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/management-address-type YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/management-address-type"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/management-address-type"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressTypePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "management-address-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor).ManagementAddressType
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/management-address-type"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/management-address-type"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressTypePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "management-address-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor).ManagementAddressType
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortDescriptionPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/port-description YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortDescriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortDescriptionPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/port-description YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortDescriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/port-description"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/port-description"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortDescriptionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "port-description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor).PortDescription
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/port-description"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/port-description"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortDescriptionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "port-description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor).PortDescription
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/port-id YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/port-id YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/port-id"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/port-id"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "port-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor).PortId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/port-id"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/port-id"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "port-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor).PortId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdTypePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/port-id-type YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdTypePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/port-id-type YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/port-id-type"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/port-id-type"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdTypePath) State() ygnmi.SingletonQuery[oc.E_Lldp_PortIdType] {
	return ygnmi.NewSingletonQuery[oc.E_Lldp_PortIdType](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "port-id-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Lldp_PortIdType, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor).PortIdType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/port-id-type"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/port-id-type"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdTypePathAny) State() ygnmi.WildcardQuery[oc.E_Lldp_PortIdType] {
	return ygnmi.NewWildcardQuery[oc.E_Lldp_PortIdType](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "port-id-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Lldp_PortIdType, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor).PortIdType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemDescriptionPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/system-description YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemDescriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemDescriptionPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/system-description YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemDescriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/system-description"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/system-description"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemDescriptionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "system-description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor).SystemDescription
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/system-description"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/system-description"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemDescriptionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "system-description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor).SystemDescription
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemNamePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/system-name YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemNamePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/system-name YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/system-name"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/system-name"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemNamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "system-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor).SystemName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/system-name"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/system-name"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemNamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "system-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor).SystemName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TtlPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/ttl YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TtlPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TtlPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/ttl YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TtlPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/ttl"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/ttl"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TtlPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ttl"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor).Ttl
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/ttl"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/ttl"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TtlPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ttl"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor).Ttl
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_Lldp_NeighborPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_NeighborPath struct {
	*ygnmi.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny struct {
	*ygnmi.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_NeighborPathMap represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_NeighborPathMap struct {
	*ygnmi.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_NeighborPathMapAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_NeighborPathMapAny struct {
	*ygnmi.NodePath
}

// Age (leaf): Age since discovery
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/age"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/age"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) Age() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_AgePath {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_AgePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "age"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Age (leaf): Age since discovery
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/age"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/age"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) Age() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_AgePathAny {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_AgePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "age"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ChassisId (leaf): The Chassis ID is a mandatory TLV which identifies the
// chassis component of the endpoint identifier associated with
// the transmitting LLDP agent
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/chassis-id"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/chassis-id"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) ChassisId() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdPath {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "chassis-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ChassisId (leaf): The Chassis ID is a mandatory TLV which identifies the
// chassis component of the endpoint identifier associated with
// the transmitting LLDP agent
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/chassis-id"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/chassis-id"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) ChassisId() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdPathAny {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "chassis-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ChassisIdType (leaf): This field identifies the format and source of the chassis
// identifier string. It is an enumerator defined by the
// LldpChassisIdSubtype object from IEEE 802.1AB MIB.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/chassis-id-type"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/chassis-id-type"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) ChassisIdType() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdTypePath {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "chassis-id-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ChassisIdType (leaf): This field identifies the format and source of the chassis
// identifier string. It is an enumerator defined by the
// LldpChassisIdSubtype object from IEEE 802.1AB MIB.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/chassis-id-type"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/chassis-id-type"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) ChassisIdType() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdTypePathAny {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "chassis-id-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): System generated identifier for the neighbor on the
// interface.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/id"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/*/id"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) Id() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_IdPath {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_IdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): System generated identifier for the neighbor on the
// interface.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/id"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/*/id"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) Id() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_IdPathAny {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_IdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastUpdate (leaf): Seconds since last update received.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/last-update"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/last-update"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) LastUpdate() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_LastUpdatePath {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_LastUpdatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-update"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastUpdate (leaf): Seconds since last update received.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/last-update"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/last-update"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) LastUpdate() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_LastUpdatePathAny {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_LastUpdatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-update"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ManagementAddress (leaf): The Management Address is a mandatory TLV which identifies a
// network address associated with the local LLDP agent, which
// can be used to reach the agent on the port identified in the
// Port ID TLV.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/management-address"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/management-address"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) ManagementAddress() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressPath {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "management-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ManagementAddress (leaf): The Management Address is a mandatory TLV which identifies a
// network address associated with the local LLDP agent, which
// can be used to reach the agent on the port identified in the
// Port ID TLV.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/management-address"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/management-address"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) ManagementAddress() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressPathAny {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "management-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ManagementAddressType (leaf): The enumerated value for the network address type
// identified in this TLV. This enumeration is defined in the
// 'Assigned Numbers' RFC [RFC3232] and the
// ianaAddressFamilyNumbers object.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/management-address-type"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/management-address-type"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) ManagementAddressType() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressTypePath {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "management-address-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ManagementAddressType (leaf): The enumerated value for the network address type
// identified in this TLV. This enumeration is defined in the
// 'Assigned Numbers' RFC [RFC3232] and the
// ianaAddressFamilyNumbers object.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/management-address-type"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/management-address-type"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) ManagementAddressType() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressTypePathAny {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "management-address-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PortDescription (leaf): The binary string containing the actual port identifier for
// the port which this LLDP PDU was transmitted. The source and
// format of this field is defined by PtopoPortId from
// RFC2922.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/port-description"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/port-description"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) PortDescription() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortDescriptionPath {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortDescriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "port-description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PortDescription (leaf): The binary string containing the actual port identifier for
// the port which this LLDP PDU was transmitted. The source and
// format of this field is defined by PtopoPortId from
// RFC2922.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/port-description"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/port-description"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) PortDescription() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortDescriptionPathAny {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortDescriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "port-description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PortId (leaf): The Port ID is a mandatory TLV which identifies the port
// component of the endpoint identifier associated with the
// transmitting LLDP agent. If the specified port is an IEEE
// 802.3 Repeater port, then this TLV is optional.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/port-id"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/port-id"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) PortId() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdPath {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "port-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PortId (leaf): The Port ID is a mandatory TLV which identifies the port
// component of the endpoint identifier associated with the
// transmitting LLDP agent. If the specified port is an IEEE
// 802.3 Repeater port, then this TLV is optional.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/port-id"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/port-id"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) PortId() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdPathAny {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "port-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PortIdType (leaf): This field identifies the format and source of the port
// identifier string. It is an enumerator defined by the
// PtopoPortIdType object from RFC2922.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/port-id-type"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/port-id-type"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) PortIdType() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdTypePath {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "port-id-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PortIdType (leaf): This field identifies the format and source of the port
// identifier string. It is an enumerator defined by the
// PtopoPortIdType object from RFC2922.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/port-id-type"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/port-id-type"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) PortIdType() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdTypePathAny {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "port-id-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SystemDescription (leaf): The system description field shall contain an alpha-numeric
// string that is the textual description of the network entity.
// The system description should include the full name and
// version identification of the system's hardware type,
// software operating system, and networking software. If
// implementations support IETF RFC 3418, the sysDescr object
// should be used for this field.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/system-description"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/system-description"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) SystemDescription() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemDescriptionPath {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemDescriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "system-description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SystemDescription (leaf): The system description field shall contain an alpha-numeric
// string that is the textual description of the network entity.
// The system description should include the full name and
// version identification of the system's hardware type,
// software operating system, and networking software. If
// implementations support IETF RFC 3418, the sysDescr object
// should be used for this field.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/system-description"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/system-description"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) SystemDescription() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemDescriptionPathAny {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemDescriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "system-description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SystemName (leaf): The system name field shall contain an alpha-numeric string
// that indicates the system's administratively assigned name.
// The system name should be the system's fully qualified domain
// name. If implementations support IETF RFC 3418, the sysName
// object should be used for this field.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/system-name"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/system-name"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) SystemName() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemNamePath {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "system-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SystemName (leaf): The system name field shall contain an alpha-numeric string
// that indicates the system's administratively assigned name.
// The system name should be the system's fully qualified domain
// name. If implementations support IETF RFC 3418, the sysName
// object should be used for this field.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/system-name"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/system-name"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) SystemName() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemNamePathAny {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "system-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TlvAny (list): List of custom LLDP TLVs from a neighbor
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "custom-tlvs/tlv"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) TlvAny() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": "*", "oui": "*", "oui-subtype": "*"},
			n,
		),
	}
	return ps
}

// TlvAny (list): List of custom LLDP TLVs from a neighbor
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "custom-tlvs/tlv"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) TlvAny() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": "*", "oui": "*", "oui-subtype": "*"},
			n,
		),
	}
	return ps
}

// WithType sets TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny's key "type" to the specified value.
// Type: int32
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny) WithType(Type int32) *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny {
	ygnmi.ModifyKey(n.NodePath, "type", Type)
	return n
}

// WithOui sets TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny's key "oui" to the specified value.
// Oui: string
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny) WithOui(Oui string) *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny {
	ygnmi.ModifyKey(n.NodePath, "oui", Oui)
	return n
}

// WithOuiSubtype sets TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny's key "oui-subtype" to the specified value.
// OuiSubtype: string
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny) WithOuiSubtype(OuiSubtype string) *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny {
	ygnmi.ModifyKey(n.NodePath, "oui-subtype", OuiSubtype)
	return n
}

// Tlv (list): List of custom LLDP TLVs from a neighbor
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "custom-tlvs/tlv"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv"
//
//	Type: int32
//	Oui: string
//	OuiSubtype: string
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) Tlv(Type int32, Oui string, OuiSubtype string) *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPath {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": Type, "oui": Oui, "oui-subtype": OuiSubtype},
			n,
		),
	}
	return ps
}

// Tlv (list): List of custom LLDP TLVs from a neighbor
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "custom-tlvs/tlv"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv"
//
//	Type: int32
//	Oui: string
//	OuiSubtype: string
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) Tlv(Type int32, Oui string, OuiSubtype string) *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": Type, "oui": Oui, "oui-subtype": OuiSubtype},
			n,
		),
	}
	return ps
}

// TlvMap (list): List of custom LLDP TLVs from a neighbor
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "custom-tlvs/tlv"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) TlvMap() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathMap {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"custom-tlvs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TlvMap (list): List of custom LLDP TLVs from a neighbor
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "custom-tlvs/tlv"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) TlvMap() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathMapAny {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"custom-tlvs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ttl (leaf): The time-to-live (TTL) is a mandatory TLV which indicates
// how long information from the neighbor should be considered
// valid.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/ttl"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/ttl"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) Ttl() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TtlPath {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TtlPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ttl"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ttl (leaf): The time-to-live (TTL) is a mandatory TLV which indicates
// how long information from the neighbor should be considered
// valid.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/ttl"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/ttl"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) Ttl() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TtlPathAny {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TtlPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ttl"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) State() ygnmi.SingletonQuery[*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor] {
	return ygnmi.NewSingletonQuery[*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) State() ygnmi.WildcardQuery[*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor] {
	return ygnmi.NewWildcardQuery[*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathMap) State() ygnmi.SingletonQuery[map[string]*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor] {
	return ygnmi.NewSingletonQuery[map[string]*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor](
		"TerminalDevice_Channel_Ethernet_Lldp",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-terminal-device:neighbors"},
			PostRelPath: []string{"openconfig-terminal-device:neighbor"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor] {
	return ygnmi.NewWildcardQuery[map[string]*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor](
		"TerminalDevice_Channel_Ethernet_Lldp",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-terminal-device:neighbors"},
			PostRelPath: []string{"openconfig-terminal-device:neighbor"},
		},
	)
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/oui YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/oui YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/oui"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/oui"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oui"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv).Oui
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/oui"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/oui"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oui"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv).Oui
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "oui"
//	Path from root:       ""
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"oui"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv).Oui
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "oui"
//	Path from root:       ""
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"oui"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv).Oui
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiSubtypePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/oui-subtype YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiSubtypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiSubtypePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/oui-subtype YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiSubtypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/oui-subtype"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/oui-subtype"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiSubtypePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oui-subtype"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv).OuiSubtype
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/oui-subtype"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/oui-subtype"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiSubtypePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oui-subtype"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv).OuiSubtype
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "oui-subtype"
//	Path from root:       ""
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiSubtypePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"oui-subtype"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv).OuiSubtype
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "oui-subtype"
//	Path from root:       ""
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiSubtypePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"oui-subtype"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv).OuiSubtype
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_TypePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/type YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_TypePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/type YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/type"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/type"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_TypePath) State() ygnmi.SingletonQuery[int32] {
	return ygnmi.NewSingletonQuery[int32](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int32, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv).Type
			if ret == nil {
				var zero int32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/type"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/type"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_TypePathAny) State() ygnmi.WildcardQuery[int32] {
	return ygnmi.NewWildcardQuery[int32](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int32, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv).Type
			if ret == nil {
				var zero int32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "type"
//	Path from root:       ""
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_TypePath) Config() ygnmi.ConfigQuery[int32] {
	return ygnmi.NewConfigQuery[int32](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int32, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv).Type
			if ret == nil {
				var zero int32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "type"
//	Path from root:       ""
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_TypePathAny) Config() ygnmi.WildcardQuery[int32] {
	return ygnmi.NewWildcardQuery[int32](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int32, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv).Type
			if ret == nil {
				var zero int32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_ValuePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/value YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_ValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_ValuePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/value YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_ValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/value"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/value"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_ValuePath) State() ygnmi.SingletonQuery[oc.Binary] {
	return ygnmi.NewSingletonQuery[oc.Binary](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Binary, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv).Value
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/value"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/value"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_ValuePathAny) State() ygnmi.WildcardQuery[oc.Binary] {
	return ygnmi.NewWildcardQuery[oc.Binary](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Binary, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv).Value
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPath struct {
	*ygnmi.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny struct {
	*ygnmi.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathMap represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathMap struct {
	*ygnmi.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathMapAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathMapAny struct {
	*ygnmi.NodePath
}

// Oui (leaf): The organizationally unique identifier field shall contain
// the organization's OUI as defined in Clause 9 of IEEE Std
// 802. The high-order octet is 0 and the low-order 3 octets
// are the SMI Network Management Private Enterprise Code of
// the Vendor in network byte order, as defined in the
// 'Assigned Numbers' RFC [RFC3232].
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/oui"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/*/oui"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPath) Oui() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiPath {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "oui"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Oui (leaf): The organizationally unique identifier field shall contain
// the organization's OUI as defined in Clause 9 of IEEE Std
// 802. The high-order octet is 0 and the low-order 3 octets
// are the SMI Network Management Private Enterprise Code of
// the Vendor in network byte order, as defined in the
// 'Assigned Numbers' RFC [RFC3232].
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/oui"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/*/oui"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny) Oui() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiPathAny {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "oui"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OuiSubtype (leaf): The organizationally defined subtype field shall contain a
// unique subtype value assigned by the defining organization.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/oui-subtype"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/*/oui-subtype"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPath) OuiSubtype() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiSubtypePath {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiSubtypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "oui-subtype"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OuiSubtype (leaf): The organizationally defined subtype field shall contain a
// unique subtype value assigned by the defining organization.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/oui-subtype"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/*/oui-subtype"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny) OuiSubtype() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiSubtypePathAny {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiSubtypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "oui-subtype"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The integer value identifying the type of information
// contained in the value field.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/type"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/*/type"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPath) Type() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_TypePath {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The integer value identifying the type of information
// contained in the value field.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/type"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/*/type"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny) Type() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_TypePathAny {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Value (leaf): A variable-length octet-string containing the
// instance-specific information for this TLV.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/value"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/value"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPath) Value() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_ValuePath {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_ValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Value (leaf): A variable-length octet-string containing the
// instance-specific information for this TLV.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/value"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/value"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny) Value() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_ValuePathAny {
	ps := &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_ValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPath) State() ygnmi.SingletonQuery[*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv] {
	return ygnmi.NewSingletonQuery[*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny) State() ygnmi.WildcardQuery[*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv] {
	return ygnmi.NewWildcardQuery[*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathMap) State() ygnmi.SingletonQuery[map[oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_Key]*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv] {
	return ygnmi.NewSingletonQuery[map[oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_Key]*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_Key]*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor).Tlv
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-terminal-device:custom-tlvs"},
			PostRelPath: []string{"openconfig-terminal-device:tlv"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathMapAny) State() ygnmi.WildcardQuery[map[oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_Key]*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv] {
	return ygnmi.NewWildcardQuery[map[oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_Key]*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv](
		"TerminalDevice_Channel_Ethernet_Lldp_Neighbor",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_Key]*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor).Tlv
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_Lldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-terminal-device:custom-tlvs"},
			PostRelPath: []string{"openconfig-terminal-device:tlv"},
		},
	)
}

// TerminalDevice_Channel_Ethernet_PostFecBer_AvgPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/avg YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_PostFecBer_AvgPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/avg YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/avg"
func (n *TerminalDevice_Channel_Ethernet_PostFecBer_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"TerminalDevice_Channel_Ethernet_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_PostFecBer).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/avg"
func (n *TerminalDevice_Channel_Ethernet_PostFecBer_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"TerminalDevice_Channel_Ethernet_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_PostFecBer).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_PostFecBer_InstantPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/instant YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_PostFecBer_InstantPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/instant YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/instant"
func (n *TerminalDevice_Channel_Ethernet_PostFecBer_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"TerminalDevice_Channel_Ethernet_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_PostFecBer).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/instant"
func (n *TerminalDevice_Channel_Ethernet_PostFecBer_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"TerminalDevice_Channel_Ethernet_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_PostFecBer).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_PostFecBer_IntervalPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/interval YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_PostFecBer_IntervalPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/interval YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/interval"
func (n *TerminalDevice_Channel_Ethernet_PostFecBer_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_PostFecBer).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/interval"
func (n *TerminalDevice_Channel_Ethernet_PostFecBer_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_PostFecBer).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_PostFecBer_MaxPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/max YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_PostFecBer_MaxPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/max YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/max"
func (n *TerminalDevice_Channel_Ethernet_PostFecBer_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"TerminalDevice_Channel_Ethernet_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_PostFecBer).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/max"
func (n *TerminalDevice_Channel_Ethernet_PostFecBer_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"TerminalDevice_Channel_Ethernet_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_PostFecBer).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_PostFecBer_MaxTimePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/max-time YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_PostFecBer_MaxTimePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/max-time YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/max-time"
func (n *TerminalDevice_Channel_Ethernet_PostFecBer_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_PostFecBer).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/max-time"
func (n *TerminalDevice_Channel_Ethernet_PostFecBer_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_PostFecBer).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_PostFecBer_MinPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/min YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_PostFecBer_MinPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/min YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/min"
func (n *TerminalDevice_Channel_Ethernet_PostFecBer_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"TerminalDevice_Channel_Ethernet_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_PostFecBer).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/min"
func (n *TerminalDevice_Channel_Ethernet_PostFecBer_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"TerminalDevice_Channel_Ethernet_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_PostFecBer).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_PostFecBer_MinTimePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/min-time YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_PostFecBer_MinTimePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/min-time YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/min-time"
func (n *TerminalDevice_Channel_Ethernet_PostFecBer_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_PostFecBer).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/min-time"
func (n *TerminalDevice_Channel_Ethernet_PostFecBer_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_PostFecBer).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_PostFecBerPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBerPath struct {
	*ygnmi.NodePath
}

// TerminalDevice_Channel_Ethernet_PostFecBerPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBerPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/avg"
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPath) Avg() *TerminalDevice_Channel_Ethernet_PostFecBer_AvgPath {
	ps := &TerminalDevice_Channel_Ethernet_PostFecBer_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/avg"
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPathAny) Avg() *TerminalDevice_Channel_Ethernet_PostFecBer_AvgPathAny {
	ps := &TerminalDevice_Channel_Ethernet_PostFecBer_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/instant"
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPath) Instant() *TerminalDevice_Channel_Ethernet_PostFecBer_InstantPath {
	ps := &TerminalDevice_Channel_Ethernet_PostFecBer_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/instant"
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPathAny) Instant() *TerminalDevice_Channel_Ethernet_PostFecBer_InstantPathAny {
	ps := &TerminalDevice_Channel_Ethernet_PostFecBer_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/interval"
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPath) Interval() *TerminalDevice_Channel_Ethernet_PostFecBer_IntervalPath {
	ps := &TerminalDevice_Channel_Ethernet_PostFecBer_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/interval"
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPathAny) Interval() *TerminalDevice_Channel_Ethernet_PostFecBer_IntervalPathAny {
	ps := &TerminalDevice_Channel_Ethernet_PostFecBer_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/max"
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPath) Max() *TerminalDevice_Channel_Ethernet_PostFecBer_MaxPath {
	ps := &TerminalDevice_Channel_Ethernet_PostFecBer_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/max"
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPathAny) Max() *TerminalDevice_Channel_Ethernet_PostFecBer_MaxPathAny {
	ps := &TerminalDevice_Channel_Ethernet_PostFecBer_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-terminal-device"
//		Path from parent:     "max-time"
//		Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/max-time"
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPath) MaxTime() *TerminalDevice_Channel_Ethernet_PostFecBer_MaxTimePath {
	ps := &TerminalDevice_Channel_Ethernet_PostFecBer_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-terminal-device"
//		Path from parent:     "max-time"
//		Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/max-time"
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPathAny) MaxTime() *TerminalDevice_Channel_Ethernet_PostFecBer_MaxTimePathAny {
	ps := &TerminalDevice_Channel_Ethernet_PostFecBer_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/min"
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPath) Min() *TerminalDevice_Channel_Ethernet_PostFecBer_MinPath {
	ps := &TerminalDevice_Channel_Ethernet_PostFecBer_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/min"
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPathAny) Min() *TerminalDevice_Channel_Ethernet_PostFecBer_MinPathAny {
	ps := &TerminalDevice_Channel_Ethernet_PostFecBer_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-terminal-device"
//		Path from parent:     "min-time"
//		Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/min-time"
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPath) MinTime() *TerminalDevice_Channel_Ethernet_PostFecBer_MinTimePath {
	ps := &TerminalDevice_Channel_Ethernet_PostFecBer_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-terminal-device"
//		Path from parent:     "min-time"
//		Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/min-time"
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPathAny) MinTime() *TerminalDevice_Channel_Ethernet_PostFecBer_MinTimePathAny {
	ps := &TerminalDevice_Channel_Ethernet_PostFecBer_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPath) State() ygnmi.SingletonQuery[*oc.TerminalDevice_Channel_Ethernet_PostFecBer] {
	return ygnmi.NewSingletonQuery[*oc.TerminalDevice_Channel_Ethernet_PostFecBer](
		"TerminalDevice_Channel_Ethernet_PostFecBer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPathAny) State() ygnmi.WildcardQuery[*oc.TerminalDevice_Channel_Ethernet_PostFecBer] {
	return ygnmi.NewWildcardQuery[*oc.TerminalDevice_Channel_Ethernet_PostFecBer](
		"TerminalDevice_Channel_Ethernet_PostFecBer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_PreFecBer_AvgPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/avg YANG schema element.
type TerminalDevice_Channel_Ethernet_PreFecBer_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_PreFecBer_AvgPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/avg YANG schema element.
type TerminalDevice_Channel_Ethernet_PreFecBer_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/avg"
func (n *TerminalDevice_Channel_Ethernet_PreFecBer_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"TerminalDevice_Channel_Ethernet_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_PreFecBer).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/avg"
func (n *TerminalDevice_Channel_Ethernet_PreFecBer_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"TerminalDevice_Channel_Ethernet_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_PreFecBer).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_PreFecBer_InstantPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/instant YANG schema element.
type TerminalDevice_Channel_Ethernet_PreFecBer_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_PreFecBer_InstantPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/instant YANG schema element.
type TerminalDevice_Channel_Ethernet_PreFecBer_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/instant"
func (n *TerminalDevice_Channel_Ethernet_PreFecBer_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"TerminalDevice_Channel_Ethernet_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_PreFecBer).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/instant"
func (n *TerminalDevice_Channel_Ethernet_PreFecBer_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"TerminalDevice_Channel_Ethernet_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_PreFecBer).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_PreFecBer_IntervalPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/interval YANG schema element.
type TerminalDevice_Channel_Ethernet_PreFecBer_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_PreFecBer_IntervalPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/interval YANG schema element.
type TerminalDevice_Channel_Ethernet_PreFecBer_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/interval"
func (n *TerminalDevice_Channel_Ethernet_PreFecBer_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_PreFecBer).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/interval"
func (n *TerminalDevice_Channel_Ethernet_PreFecBer_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_PreFecBer).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_PreFecBer_MaxPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/max YANG schema element.
type TerminalDevice_Channel_Ethernet_PreFecBer_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_PreFecBer_MaxPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/max YANG schema element.
type TerminalDevice_Channel_Ethernet_PreFecBer_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/max"
func (n *TerminalDevice_Channel_Ethernet_PreFecBer_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"TerminalDevice_Channel_Ethernet_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_PreFecBer).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/max"
func (n *TerminalDevice_Channel_Ethernet_PreFecBer_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"TerminalDevice_Channel_Ethernet_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_PreFecBer).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_PreFecBer_MaxTimePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/max-time YANG schema element.
type TerminalDevice_Channel_Ethernet_PreFecBer_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_PreFecBer_MaxTimePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/max-time YANG schema element.
type TerminalDevice_Channel_Ethernet_PreFecBer_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/max-time"
func (n *TerminalDevice_Channel_Ethernet_PreFecBer_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_PreFecBer).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/max-time"
func (n *TerminalDevice_Channel_Ethernet_PreFecBer_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_PreFecBer).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_PreFecBer_MinPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/min YANG schema element.
type TerminalDevice_Channel_Ethernet_PreFecBer_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_PreFecBer_MinPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/min YANG schema element.
type TerminalDevice_Channel_Ethernet_PreFecBer_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/min"
func (n *TerminalDevice_Channel_Ethernet_PreFecBer_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"TerminalDevice_Channel_Ethernet_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_PreFecBer).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/min"
func (n *TerminalDevice_Channel_Ethernet_PreFecBer_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"TerminalDevice_Channel_Ethernet_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_PreFecBer).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_PreFecBer_MinTimePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/min-time YANG schema element.
type TerminalDevice_Channel_Ethernet_PreFecBer_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_PreFecBer_MinTimePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/min-time YANG schema element.
type TerminalDevice_Channel_Ethernet_PreFecBer_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/min-time"
func (n *TerminalDevice_Channel_Ethernet_PreFecBer_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_PreFecBer).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/min-time"
func (n *TerminalDevice_Channel_Ethernet_PreFecBer_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_PreFecBer).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_PreFecBerPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber YANG schema element.
type TerminalDevice_Channel_Ethernet_PreFecBerPath struct {
	*ygnmi.NodePath
}

// TerminalDevice_Channel_Ethernet_PreFecBerPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber YANG schema element.
type TerminalDevice_Channel_Ethernet_PreFecBerPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/avg"
func (n *TerminalDevice_Channel_Ethernet_PreFecBerPath) Avg() *TerminalDevice_Channel_Ethernet_PreFecBer_AvgPath {
	ps := &TerminalDevice_Channel_Ethernet_PreFecBer_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/avg"
func (n *TerminalDevice_Channel_Ethernet_PreFecBerPathAny) Avg() *TerminalDevice_Channel_Ethernet_PreFecBer_AvgPathAny {
	ps := &TerminalDevice_Channel_Ethernet_PreFecBer_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/instant"
func (n *TerminalDevice_Channel_Ethernet_PreFecBerPath) Instant() *TerminalDevice_Channel_Ethernet_PreFecBer_InstantPath {
	ps := &TerminalDevice_Channel_Ethernet_PreFecBer_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/instant"
func (n *TerminalDevice_Channel_Ethernet_PreFecBerPathAny) Instant() *TerminalDevice_Channel_Ethernet_PreFecBer_InstantPathAny {
	ps := &TerminalDevice_Channel_Ethernet_PreFecBer_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/interval"
func (n *TerminalDevice_Channel_Ethernet_PreFecBerPath) Interval() *TerminalDevice_Channel_Ethernet_PreFecBer_IntervalPath {
	ps := &TerminalDevice_Channel_Ethernet_PreFecBer_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/interval"
func (n *TerminalDevice_Channel_Ethernet_PreFecBerPathAny) Interval() *TerminalDevice_Channel_Ethernet_PreFecBer_IntervalPathAny {
	ps := &TerminalDevice_Channel_Ethernet_PreFecBer_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/max"
func (n *TerminalDevice_Channel_Ethernet_PreFecBerPath) Max() *TerminalDevice_Channel_Ethernet_PreFecBer_MaxPath {
	ps := &TerminalDevice_Channel_Ethernet_PreFecBer_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/max"
func (n *TerminalDevice_Channel_Ethernet_PreFecBerPathAny) Max() *TerminalDevice_Channel_Ethernet_PreFecBer_MaxPathAny {
	ps := &TerminalDevice_Channel_Ethernet_PreFecBer_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-terminal-device"
//		Path from parent:     "max-time"
//		Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/max-time"
func (n *TerminalDevice_Channel_Ethernet_PreFecBerPath) MaxTime() *TerminalDevice_Channel_Ethernet_PreFecBer_MaxTimePath {
	ps := &TerminalDevice_Channel_Ethernet_PreFecBer_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-terminal-device"
//		Path from parent:     "max-time"
//		Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/max-time"
func (n *TerminalDevice_Channel_Ethernet_PreFecBerPathAny) MaxTime() *TerminalDevice_Channel_Ethernet_PreFecBer_MaxTimePathAny {
	ps := &TerminalDevice_Channel_Ethernet_PreFecBer_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/min"
func (n *TerminalDevice_Channel_Ethernet_PreFecBerPath) Min() *TerminalDevice_Channel_Ethernet_PreFecBer_MinPath {
	ps := &TerminalDevice_Channel_Ethernet_PreFecBer_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/min"
func (n *TerminalDevice_Channel_Ethernet_PreFecBerPathAny) Min() *TerminalDevice_Channel_Ethernet_PreFecBer_MinPathAny {
	ps := &TerminalDevice_Channel_Ethernet_PreFecBer_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-terminal-device"
//		Path from parent:     "min-time"
//		Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/min-time"
func (n *TerminalDevice_Channel_Ethernet_PreFecBerPath) MinTime() *TerminalDevice_Channel_Ethernet_PreFecBer_MinTimePath {
	ps := &TerminalDevice_Channel_Ethernet_PreFecBer_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-terminal-device"
//		Path from parent:     "min-time"
//		Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/min-time"
func (n *TerminalDevice_Channel_Ethernet_PreFecBerPathAny) MinTime() *TerminalDevice_Channel_Ethernet_PreFecBer_MinTimePathAny {
	ps := &TerminalDevice_Channel_Ethernet_PreFecBer_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_Ethernet_PreFecBerPath) State() ygnmi.SingletonQuery[*oc.TerminalDevice_Channel_Ethernet_PreFecBer] {
	return ygnmi.NewSingletonQuery[*oc.TerminalDevice_Channel_Ethernet_PreFecBer](
		"TerminalDevice_Channel_Ethernet_PreFecBer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_Ethernet_PreFecBerPathAny) State() ygnmi.WildcardQuery[*oc.TerminalDevice_Channel_Ethernet_PreFecBer] {
	return ygnmi.NewWildcardQuery[*oc.TerminalDevice_Channel_Ethernet_PreFecBer](
		"TerminalDevice_Channel_Ethernet_PreFecBer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_QValue_AvgPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/q-value/avg YANG schema element.
type TerminalDevice_Channel_Ethernet_QValue_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_QValue_AvgPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/q-value/avg YANG schema element.
type TerminalDevice_Channel_Ethernet_QValue_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/q-value/avg"
func (n *TerminalDevice_Channel_Ethernet_QValue_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"TerminalDevice_Channel_Ethernet_QValue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_QValue).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_QValue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/q-value/avg"
func (n *TerminalDevice_Channel_Ethernet_QValue_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"TerminalDevice_Channel_Ethernet_QValue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_QValue).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_QValue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_QValue_InstantPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/q-value/instant YANG schema element.
type TerminalDevice_Channel_Ethernet_QValue_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_QValue_InstantPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/q-value/instant YANG schema element.
type TerminalDevice_Channel_Ethernet_QValue_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/q-value/instant"
func (n *TerminalDevice_Channel_Ethernet_QValue_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"TerminalDevice_Channel_Ethernet_QValue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_QValue).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_QValue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/q-value/instant"
func (n *TerminalDevice_Channel_Ethernet_QValue_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"TerminalDevice_Channel_Ethernet_QValue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_QValue).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_QValue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_QValue_IntervalPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/q-value/interval YANG schema element.
type TerminalDevice_Channel_Ethernet_QValue_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_QValue_IntervalPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/q-value/interval YANG schema element.
type TerminalDevice_Channel_Ethernet_QValue_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/q-value/interval"
func (n *TerminalDevice_Channel_Ethernet_QValue_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet_QValue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_QValue).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_QValue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/q-value/interval"
func (n *TerminalDevice_Channel_Ethernet_QValue_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet_QValue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_QValue).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_QValue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_QValue_MaxPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/q-value/max YANG schema element.
type TerminalDevice_Channel_Ethernet_QValue_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_QValue_MaxPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/q-value/max YANG schema element.
type TerminalDevice_Channel_Ethernet_QValue_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/q-value/max"
func (n *TerminalDevice_Channel_Ethernet_QValue_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"TerminalDevice_Channel_Ethernet_QValue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_QValue).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_QValue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/q-value/max"
func (n *TerminalDevice_Channel_Ethernet_QValue_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"TerminalDevice_Channel_Ethernet_QValue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_QValue).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_QValue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_QValue_MaxTimePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/q-value/max-time YANG schema element.
type TerminalDevice_Channel_Ethernet_QValue_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_QValue_MaxTimePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/q-value/max-time YANG schema element.
type TerminalDevice_Channel_Ethernet_QValue_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/q-value/max-time"
func (n *TerminalDevice_Channel_Ethernet_QValue_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet_QValue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_QValue).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_QValue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/q-value/max-time"
func (n *TerminalDevice_Channel_Ethernet_QValue_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet_QValue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_QValue).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_QValue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_QValue_MinPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/q-value/min YANG schema element.
type TerminalDevice_Channel_Ethernet_QValue_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_QValue_MinPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/q-value/min YANG schema element.
type TerminalDevice_Channel_Ethernet_QValue_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/q-value/min"
func (n *TerminalDevice_Channel_Ethernet_QValue_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"TerminalDevice_Channel_Ethernet_QValue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_QValue).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_QValue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/q-value/min"
func (n *TerminalDevice_Channel_Ethernet_QValue_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"TerminalDevice_Channel_Ethernet_QValue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_QValue).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_QValue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_QValue_MinTimePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/q-value/min-time YANG schema element.
type TerminalDevice_Channel_Ethernet_QValue_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ethernet_QValue_MinTimePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/q-value/min-time YANG schema element.
type TerminalDevice_Channel_Ethernet_QValue_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/q-value/min-time"
func (n *TerminalDevice_Channel_Ethernet_QValue_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Ethernet_QValue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_QValue).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_QValue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/q-value/min-time"
func (n *TerminalDevice_Channel_Ethernet_QValue_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Ethernet_QValue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ethernet_QValue).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ethernet_QValue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ethernet_QValuePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/q-value YANG schema element.
type TerminalDevice_Channel_Ethernet_QValuePath struct {
	*ygnmi.NodePath
}

// TerminalDevice_Channel_Ethernet_QValuePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/q-value YANG schema element.
type TerminalDevice_Channel_Ethernet_QValuePathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/q-value/avg"
func (n *TerminalDevice_Channel_Ethernet_QValuePath) Avg() *TerminalDevice_Channel_Ethernet_QValue_AvgPath {
	ps := &TerminalDevice_Channel_Ethernet_QValue_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/q-value/avg"
func (n *TerminalDevice_Channel_Ethernet_QValuePathAny) Avg() *TerminalDevice_Channel_Ethernet_QValue_AvgPathAny {
	ps := &TerminalDevice_Channel_Ethernet_QValue_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/q-value/instant"
func (n *TerminalDevice_Channel_Ethernet_QValuePath) Instant() *TerminalDevice_Channel_Ethernet_QValue_InstantPath {
	ps := &TerminalDevice_Channel_Ethernet_QValue_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/q-value/instant"
func (n *TerminalDevice_Channel_Ethernet_QValuePathAny) Instant() *TerminalDevice_Channel_Ethernet_QValue_InstantPathAny {
	ps := &TerminalDevice_Channel_Ethernet_QValue_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/q-value/interval"
func (n *TerminalDevice_Channel_Ethernet_QValuePath) Interval() *TerminalDevice_Channel_Ethernet_QValue_IntervalPath {
	ps := &TerminalDevice_Channel_Ethernet_QValue_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/q-value/interval"
func (n *TerminalDevice_Channel_Ethernet_QValuePathAny) Interval() *TerminalDevice_Channel_Ethernet_QValue_IntervalPathAny {
	ps := &TerminalDevice_Channel_Ethernet_QValue_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/q-value/max"
func (n *TerminalDevice_Channel_Ethernet_QValuePath) Max() *TerminalDevice_Channel_Ethernet_QValue_MaxPath {
	ps := &TerminalDevice_Channel_Ethernet_QValue_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/q-value/max"
func (n *TerminalDevice_Channel_Ethernet_QValuePathAny) Max() *TerminalDevice_Channel_Ethernet_QValue_MaxPathAny {
	ps := &TerminalDevice_Channel_Ethernet_QValue_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-terminal-device"
//		Path from parent:     "max-time"
//		Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/q-value/max-time"
func (n *TerminalDevice_Channel_Ethernet_QValuePath) MaxTime() *TerminalDevice_Channel_Ethernet_QValue_MaxTimePath {
	ps := &TerminalDevice_Channel_Ethernet_QValue_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-terminal-device"
//		Path from parent:     "max-time"
//		Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/q-value/max-time"
func (n *TerminalDevice_Channel_Ethernet_QValuePathAny) MaxTime() *TerminalDevice_Channel_Ethernet_QValue_MaxTimePathAny {
	ps := &TerminalDevice_Channel_Ethernet_QValue_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/q-value/min"
func (n *TerminalDevice_Channel_Ethernet_QValuePath) Min() *TerminalDevice_Channel_Ethernet_QValue_MinPath {
	ps := &TerminalDevice_Channel_Ethernet_QValue_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/q-value/min"
func (n *TerminalDevice_Channel_Ethernet_QValuePathAny) Min() *TerminalDevice_Channel_Ethernet_QValue_MinPathAny {
	ps := &TerminalDevice_Channel_Ethernet_QValue_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-terminal-device"
//		Path from parent:     "min-time"
//		Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/q-value/min-time"
func (n *TerminalDevice_Channel_Ethernet_QValuePath) MinTime() *TerminalDevice_Channel_Ethernet_QValue_MinTimePath {
	ps := &TerminalDevice_Channel_Ethernet_QValue_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-terminal-device"
//		Path from parent:     "min-time"
//		Path from root:       "/terminal-device/logical-channels/channel/ethernet/state/q-value/min-time"
func (n *TerminalDevice_Channel_Ethernet_QValuePathAny) MinTime() *TerminalDevice_Channel_Ethernet_QValue_MinTimePathAny {
	ps := &TerminalDevice_Channel_Ethernet_QValue_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_Ethernet_QValuePath) State() ygnmi.SingletonQuery[*oc.TerminalDevice_Channel_Ethernet_QValue] {
	return ygnmi.NewSingletonQuery[*oc.TerminalDevice_Channel_Ethernet_QValue](
		"TerminalDevice_Channel_Ethernet_QValue",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_Ethernet_QValuePathAny) State() ygnmi.WildcardQuery[*oc.TerminalDevice_Channel_Ethernet_QValue] {
	return ygnmi.NewWildcardQuery[*oc.TerminalDevice_Channel_Ethernet_QValue](
		"TerminalDevice_Channel_Ethernet_QValue",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ingress_InterfacePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ingress/state/interface YANG schema element.
type TerminalDevice_Channel_Ingress_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ingress_InterfacePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ingress/state/interface YANG schema element.
type TerminalDevice_Channel_Ingress_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/interface"
//	Path from root:       "/terminal-device/logical-channels/channel/ingress/state/interface"
func (n *TerminalDevice_Channel_Ingress_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"TerminalDevice_Channel_Ingress",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ingress).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/interface"
//	Path from root:       "/terminal-device/logical-channels/channel/ingress/state/interface"
func (n *TerminalDevice_Channel_Ingress_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"TerminalDevice_Channel_Ingress",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ingress).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/interface"
//	Path from root:       "/terminal-device/logical-channels/channel/ingress/config/interface"
func (n *TerminalDevice_Channel_Ingress_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"TerminalDevice_Channel_Ingress",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ingress).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/interface"
//	Path from root:       "/terminal-device/logical-channels/channel/ingress/config/interface"
func (n *TerminalDevice_Channel_Ingress_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"TerminalDevice_Channel_Ingress",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ingress).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ingress_PhysicalChannelPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ingress/state/physical-channel YANG schema element.
type TerminalDevice_Channel_Ingress_PhysicalChannelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ingress_PhysicalChannelPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ingress/state/physical-channel YANG schema element.
type TerminalDevice_Channel_Ingress_PhysicalChannelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/physical-channel"
//	Path from root:       "/terminal-device/logical-channels/channel/ingress/state/physical-channel"
func (n *TerminalDevice_Channel_Ingress_PhysicalChannelPath) State() ygnmi.SingletonQuery[[]uint16] {
	return ygnmi.NewSingletonQuery[[]uint16](
		"TerminalDevice_Channel_Ingress",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "physical-channel"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint16, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ingress).PhysicalChannel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/physical-channel"
//	Path from root:       "/terminal-device/logical-channels/channel/ingress/state/physical-channel"
func (n *TerminalDevice_Channel_Ingress_PhysicalChannelPathAny) State() ygnmi.WildcardQuery[[]uint16] {
	return ygnmi.NewWildcardQuery[[]uint16](
		"TerminalDevice_Channel_Ingress",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "physical-channel"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint16, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ingress).PhysicalChannel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/physical-channel"
//	Path from root:       "/terminal-device/logical-channels/channel/ingress/config/physical-channel"
func (n *TerminalDevice_Channel_Ingress_PhysicalChannelPath) Config() ygnmi.ConfigQuery[[]uint16] {
	return ygnmi.NewConfigQuery[[]uint16](
		"TerminalDevice_Channel_Ingress",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "physical-channel"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint16, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ingress).PhysicalChannel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/physical-channel"
//	Path from root:       "/terminal-device/logical-channels/channel/ingress/config/physical-channel"
func (n *TerminalDevice_Channel_Ingress_PhysicalChannelPathAny) Config() ygnmi.WildcardQuery[[]uint16] {
	return ygnmi.NewWildcardQuery[[]uint16](
		"TerminalDevice_Channel_Ingress",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "physical-channel"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint16, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ingress).PhysicalChannel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Ingress_TransceiverPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ingress/state/transceiver YANG schema element.
type TerminalDevice_Channel_Ingress_TransceiverPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Ingress_TransceiverPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ingress/state/transceiver YANG schema element.
type TerminalDevice_Channel_Ingress_TransceiverPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/transceiver"
//	Path from root:       "/terminal-device/logical-channels/channel/ingress/state/transceiver"
func (n *TerminalDevice_Channel_Ingress_TransceiverPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"TerminalDevice_Channel_Ingress",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "transceiver"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ingress).Transceiver
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/transceiver"
//	Path from root:       "/terminal-device/logical-channels/channel/ingress/state/transceiver"
func (n *TerminalDevice_Channel_Ingress_TransceiverPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"TerminalDevice_Channel_Ingress",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "transceiver"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ingress).Transceiver
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/transceiver"
//	Path from root:       "/terminal-device/logical-channels/channel/ingress/config/transceiver"
func (n *TerminalDevice_Channel_Ingress_TransceiverPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"TerminalDevice_Channel_Ingress",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "transceiver"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ingress).Transceiver
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/transceiver"
//	Path from root:       "/terminal-device/logical-channels/channel/ingress/config/transceiver"
func (n *TerminalDevice_Channel_Ingress_TransceiverPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"TerminalDevice_Channel_Ingress",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "transceiver"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Ingress).Transceiver
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_IngressPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ingress YANG schema element.
type TerminalDevice_Channel_IngressPath struct {
	*ygnmi.NodePath
}

// TerminalDevice_Channel_IngressPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ingress YANG schema element.
type TerminalDevice_Channel_IngressPathAny struct {
	*ygnmi.NodePath
}

// Interface (leaf): Reference to the interface carrying the input signal
// for the logical channel. The ingress will specify an interface
// in the case of a transceiver being utilized directly in a
// router and bypassing a dedicated terminal device. When
// specified, the other leaves in the ingress config must be
// empty.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/interface"
//	Path from root:       "/terminal-device/logical-channels/channel/ingress/*/interface"
func (n *TerminalDevice_Channel_IngressPath) Interface() *TerminalDevice_Channel_Ingress_InterfacePath {
	ps := &TerminalDevice_Channel_Ingress_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to the interface carrying the input signal
// for the logical channel. The ingress will specify an interface
// in the case of a transceiver being utilized directly in a
// router and bypassing a dedicated terminal device. When
// specified, the other leaves in the ingress config must be
// empty.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/interface"
//	Path from root:       "/terminal-device/logical-channels/channel/ingress/*/interface"
func (n *TerminalDevice_Channel_IngressPathAny) Interface() *TerminalDevice_Channel_Ingress_InterfacePathAny {
	ps := &TerminalDevice_Channel_Ingress_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PhysicalChannel (leaf-list): This list should be populated with references
// to the client physical channels that feed this logical
// channel from the transceiver specified in the 'transceiver'
// leaf, which must be specified.  If this leaf-list is empty,
// all physical channels in the transceiver are assumed to be
// mapped to the logical channel.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/physical-channel"
//	Path from root:       "/terminal-device/logical-channels/channel/ingress/*/physical-channel"
func (n *TerminalDevice_Channel_IngressPath) PhysicalChannel() *TerminalDevice_Channel_Ingress_PhysicalChannelPath {
	ps := &TerminalDevice_Channel_Ingress_PhysicalChannelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "physical-channel"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PhysicalChannel (leaf-list): This list should be populated with references
// to the client physical channels that feed this logical
// channel from the transceiver specified in the 'transceiver'
// leaf, which must be specified.  If this leaf-list is empty,
// all physical channels in the transceiver are assumed to be
// mapped to the logical channel.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/physical-channel"
//	Path from root:       "/terminal-device/logical-channels/channel/ingress/*/physical-channel"
func (n *TerminalDevice_Channel_IngressPathAny) PhysicalChannel() *TerminalDevice_Channel_Ingress_PhysicalChannelPathAny {
	ps := &TerminalDevice_Channel_Ingress_PhysicalChannelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "physical-channel"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Transceiver (leaf): Reference to the transceiver carrying the input signal
// for the logical channel.  If specific physical channels
// are mapped to the logical channel (as opposed to all
// physical channels carried by the transceiver), they can be
// specified in the list of physical channel references.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/transceiver"
//	Path from root:       "/terminal-device/logical-channels/channel/ingress/*/transceiver"
func (n *TerminalDevice_Channel_IngressPath) Transceiver() *TerminalDevice_Channel_Ingress_TransceiverPath {
	ps := &TerminalDevice_Channel_Ingress_TransceiverPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "transceiver"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Transceiver (leaf): Reference to the transceiver carrying the input signal
// for the logical channel.  If specific physical channels
// are mapped to the logical channel (as opposed to all
// physical channels carried by the transceiver), they can be
// specified in the list of physical channel references.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/transceiver"
//	Path from root:       "/terminal-device/logical-channels/channel/ingress/*/transceiver"
func (n *TerminalDevice_Channel_IngressPathAny) Transceiver() *TerminalDevice_Channel_Ingress_TransceiverPathAny {
	ps := &TerminalDevice_Channel_Ingress_TransceiverPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "transceiver"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_IngressPath) State() ygnmi.SingletonQuery[*oc.TerminalDevice_Channel_Ingress] {
	return ygnmi.NewSingletonQuery[*oc.TerminalDevice_Channel_Ingress](
		"TerminalDevice_Channel_Ingress",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_IngressPathAny) State() ygnmi.WildcardQuery[*oc.TerminalDevice_Channel_Ingress] {
	return ygnmi.NewWildcardQuery[*oc.TerminalDevice_Channel_Ingress](
		"TerminalDevice_Channel_Ingress",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_IngressPath) Config() ygnmi.ConfigQuery[*oc.TerminalDevice_Channel_Ingress] {
	return ygnmi.NewConfigQuery[*oc.TerminalDevice_Channel_Ingress](
		"TerminalDevice_Channel_Ingress",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_IngressPathAny) Config() ygnmi.WildcardQuery[*oc.TerminalDevice_Channel_Ingress] {
	return ygnmi.NewWildcardQuery[*oc.TerminalDevice_Channel_Ingress](
		"TerminalDevice_Channel_Ingress",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_BackgroundBlockErrorsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/background-block-errors YANG schema element.
type TerminalDevice_Channel_Otn_BackgroundBlockErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_BackgroundBlockErrorsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/background-block-errors YANG schema element.
type TerminalDevice_Channel_Otn_BackgroundBlockErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/background-block-errors"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/background-block-errors"
func (n *TerminalDevice_Channel_Otn_BackgroundBlockErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Otn",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "background-block-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn).BackgroundBlockErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/background-block-errors"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/background-block-errors"
func (n *TerminalDevice_Channel_Otn_BackgroundBlockErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Otn",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "background-block-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn).BackgroundBlockErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_CodeViolationsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/code-violations YANG schema element.
type TerminalDevice_Channel_Otn_CodeViolationsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_CodeViolationsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/code-violations YANG schema element.
type TerminalDevice_Channel_Otn_CodeViolationsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/code-violations"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/code-violations"
func (n *TerminalDevice_Channel_Otn_CodeViolationsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Otn",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "code-violations"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn).CodeViolations
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/code-violations"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/code-violations"
func (n *TerminalDevice_Channel_Otn_CodeViolationsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Otn",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "code-violations"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn).CodeViolations
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_ErroredBlocksPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/errored-blocks YANG schema element.
type TerminalDevice_Channel_Otn_ErroredBlocksPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_ErroredBlocksPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/errored-blocks YANG schema element.
type TerminalDevice_Channel_Otn_ErroredBlocksPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/errored-blocks"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/errored-blocks"
func (n *TerminalDevice_Channel_Otn_ErroredBlocksPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Otn",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "errored-blocks"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn).ErroredBlocks
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/errored-blocks"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/errored-blocks"
func (n *TerminalDevice_Channel_Otn_ErroredBlocksPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Otn",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "errored-blocks"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn).ErroredBlocks
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_ErroredSecondsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/errored-seconds YANG schema element.
type TerminalDevice_Channel_Otn_ErroredSecondsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_ErroredSecondsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/errored-seconds YANG schema element.
type TerminalDevice_Channel_Otn_ErroredSecondsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/errored-seconds"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/errored-seconds"
func (n *TerminalDevice_Channel_Otn_ErroredSecondsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Otn",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "errored-seconds"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn).ErroredSeconds
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/errored-seconds"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/errored-seconds"
func (n *TerminalDevice_Channel_Otn_ErroredSecondsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Otn",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "errored-seconds"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn).ErroredSeconds
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_FecCorrectedBitsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/fec-corrected-bits YANG schema element.
type TerminalDevice_Channel_Otn_FecCorrectedBitsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_FecCorrectedBitsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/fec-corrected-bits YANG schema element.
type TerminalDevice_Channel_Otn_FecCorrectedBitsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/fec-corrected-bits"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/fec-corrected-bits"
func (n *TerminalDevice_Channel_Otn_FecCorrectedBitsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Otn",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fec-corrected-bits"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn).FecCorrectedBits
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/fec-corrected-bits"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/fec-corrected-bits"
func (n *TerminalDevice_Channel_Otn_FecCorrectedBitsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Otn",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fec-corrected-bits"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn).FecCorrectedBits
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_FecCorrectedBytesPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/fec-corrected-bytes YANG schema element.
type TerminalDevice_Channel_Otn_FecCorrectedBytesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_FecCorrectedBytesPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/fec-corrected-bytes YANG schema element.
type TerminalDevice_Channel_Otn_FecCorrectedBytesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/fec-corrected-bytes"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/fec-corrected-bytes"
func (n *TerminalDevice_Channel_Otn_FecCorrectedBytesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Otn",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fec-corrected-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn).FecCorrectedBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/fec-corrected-bytes"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/fec-corrected-bytes"
func (n *TerminalDevice_Channel_Otn_FecCorrectedBytesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Otn",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fec-corrected-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn).FecCorrectedBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_FecUncorrectableBlocksPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/fec-uncorrectable-blocks YANG schema element.
type TerminalDevice_Channel_Otn_FecUncorrectableBlocksPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_FecUncorrectableBlocksPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/fec-uncorrectable-blocks YANG schema element.
type TerminalDevice_Channel_Otn_FecUncorrectableBlocksPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/fec-uncorrectable-blocks"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/fec-uncorrectable-blocks"
func (n *TerminalDevice_Channel_Otn_FecUncorrectableBlocksPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Otn",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fec-uncorrectable-blocks"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn).FecUncorrectableBlocks
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/fec-uncorrectable-blocks"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/fec-uncorrectable-blocks"
func (n *TerminalDevice_Channel_Otn_FecUncorrectableBlocksPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Otn",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fec-uncorrectable-blocks"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn).FecUncorrectableBlocks
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_FecUncorrectableWordsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/fec-uncorrectable-words YANG schema element.
type TerminalDevice_Channel_Otn_FecUncorrectableWordsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_FecUncorrectableWordsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/fec-uncorrectable-words YANG schema element.
type TerminalDevice_Channel_Otn_FecUncorrectableWordsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/fec-uncorrectable-words"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/fec-uncorrectable-words"
func (n *TerminalDevice_Channel_Otn_FecUncorrectableWordsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Otn",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fec-uncorrectable-words"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn).FecUncorrectableWords
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/fec-uncorrectable-words"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/fec-uncorrectable-words"
func (n *TerminalDevice_Channel_Otn_FecUncorrectableWordsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Otn",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fec-uncorrectable-words"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn).FecUncorrectableWords
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_RdiMsgPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/rdi-msg YANG schema element.
type TerminalDevice_Channel_Otn_RdiMsgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_RdiMsgPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/rdi-msg YANG schema element.
type TerminalDevice_Channel_Otn_RdiMsgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/rdi-msg"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/rdi-msg"
func (n *TerminalDevice_Channel_Otn_RdiMsgPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"TerminalDevice_Channel_Otn",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "rdi-msg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn).RdiMsg
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/rdi-msg"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/rdi-msg"
func (n *TerminalDevice_Channel_Otn_RdiMsgPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"TerminalDevice_Channel_Otn",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "rdi-msg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn).RdiMsg
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_SeverelyErroredSecondsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/severely-errored-seconds YANG schema element.
type TerminalDevice_Channel_Otn_SeverelyErroredSecondsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_SeverelyErroredSecondsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/severely-errored-seconds YANG schema element.
type TerminalDevice_Channel_Otn_SeverelyErroredSecondsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/severely-errored-seconds"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/severely-errored-seconds"
func (n *TerminalDevice_Channel_Otn_SeverelyErroredSecondsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Otn",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "severely-errored-seconds"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn).SeverelyErroredSeconds
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/severely-errored-seconds"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/severely-errored-seconds"
func (n *TerminalDevice_Channel_Otn_SeverelyErroredSecondsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Otn",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "severely-errored-seconds"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn).SeverelyErroredSeconds
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_TributarySlotGranularityPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/tributary-slot-granularity YANG schema element.
type TerminalDevice_Channel_Otn_TributarySlotGranularityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_TributarySlotGranularityPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/tributary-slot-granularity YANG schema element.
type TerminalDevice_Channel_Otn_TributarySlotGranularityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/tributary-slot-granularity"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/tributary-slot-granularity"
func (n *TerminalDevice_Channel_Otn_TributarySlotGranularityPath) State() ygnmi.SingletonQuery[oc.E_TransportTypes_TRIBUTARY_SLOT_GRANULARITY] {
	return ygnmi.NewSingletonQuery[oc.E_TransportTypes_TRIBUTARY_SLOT_GRANULARITY](
		"TerminalDevice_Channel_Otn",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tributary-slot-granularity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_TRIBUTARY_SLOT_GRANULARITY, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn).TributarySlotGranularity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/tributary-slot-granularity"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/tributary-slot-granularity"
func (n *TerminalDevice_Channel_Otn_TributarySlotGranularityPathAny) State() ygnmi.WildcardQuery[oc.E_TransportTypes_TRIBUTARY_SLOT_GRANULARITY] {
	return ygnmi.NewWildcardQuery[oc.E_TransportTypes_TRIBUTARY_SLOT_GRANULARITY](
		"TerminalDevice_Channel_Otn",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tributary-slot-granularity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_TRIBUTARY_SLOT_GRANULARITY, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn).TributarySlotGranularity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/tributary-slot-granularity"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/config/tributary-slot-granularity"
func (n *TerminalDevice_Channel_Otn_TributarySlotGranularityPath) Config() ygnmi.ConfigQuery[oc.E_TransportTypes_TRIBUTARY_SLOT_GRANULARITY] {
	return ygnmi.NewConfigQuery[oc.E_TransportTypes_TRIBUTARY_SLOT_GRANULARITY](
		"TerminalDevice_Channel_Otn",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tributary-slot-granularity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_TRIBUTARY_SLOT_GRANULARITY, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn).TributarySlotGranularity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/tributary-slot-granularity"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/config/tributary-slot-granularity"
func (n *TerminalDevice_Channel_Otn_TributarySlotGranularityPathAny) Config() ygnmi.WildcardQuery[oc.E_TransportTypes_TRIBUTARY_SLOT_GRANULARITY] {
	return ygnmi.NewWildcardQuery[oc.E_TransportTypes_TRIBUTARY_SLOT_GRANULARITY](
		"TerminalDevice_Channel_Otn",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tributary-slot-granularity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_TRIBUTARY_SLOT_GRANULARITY, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn).TributarySlotGranularity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_TtiMsgAutoPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/tti-msg-auto YANG schema element.
type TerminalDevice_Channel_Otn_TtiMsgAutoPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_TtiMsgAutoPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/tti-msg-auto YANG schema element.
type TerminalDevice_Channel_Otn_TtiMsgAutoPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/tti-msg-auto"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/tti-msg-auto"
func (n *TerminalDevice_Channel_Otn_TtiMsgAutoPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"TerminalDevice_Channel_Otn",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tti-msg-auto"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn).TtiMsgAuto
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/tti-msg-auto"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/tti-msg-auto"
func (n *TerminalDevice_Channel_Otn_TtiMsgAutoPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"TerminalDevice_Channel_Otn",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tti-msg-auto"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn).TtiMsgAuto
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/tti-msg-auto"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/config/tti-msg-auto"
func (n *TerminalDevice_Channel_Otn_TtiMsgAutoPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"TerminalDevice_Channel_Otn",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tti-msg-auto"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn).TtiMsgAuto
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/tti-msg-auto"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/config/tti-msg-auto"
func (n *TerminalDevice_Channel_Otn_TtiMsgAutoPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"TerminalDevice_Channel_Otn",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tti-msg-auto"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn).TtiMsgAuto
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_TtiMsgExpectedPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/tti-msg-expected YANG schema element.
type TerminalDevice_Channel_Otn_TtiMsgExpectedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_TtiMsgExpectedPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/tti-msg-expected YANG schema element.
type TerminalDevice_Channel_Otn_TtiMsgExpectedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/tti-msg-expected"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/tti-msg-expected"
func (n *TerminalDevice_Channel_Otn_TtiMsgExpectedPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"TerminalDevice_Channel_Otn",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tti-msg-expected"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn).TtiMsgExpected
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/tti-msg-expected"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/tti-msg-expected"
func (n *TerminalDevice_Channel_Otn_TtiMsgExpectedPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"TerminalDevice_Channel_Otn",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tti-msg-expected"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn).TtiMsgExpected
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/tti-msg-expected"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/config/tti-msg-expected"
func (n *TerminalDevice_Channel_Otn_TtiMsgExpectedPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"TerminalDevice_Channel_Otn",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tti-msg-expected"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn).TtiMsgExpected
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/tti-msg-expected"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/config/tti-msg-expected"
func (n *TerminalDevice_Channel_Otn_TtiMsgExpectedPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"TerminalDevice_Channel_Otn",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tti-msg-expected"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn).TtiMsgExpected
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_TtiMsgRecvPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/tti-msg-recv YANG schema element.
type TerminalDevice_Channel_Otn_TtiMsgRecvPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_TtiMsgRecvPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/tti-msg-recv YANG schema element.
type TerminalDevice_Channel_Otn_TtiMsgRecvPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/tti-msg-recv"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/tti-msg-recv"
func (n *TerminalDevice_Channel_Otn_TtiMsgRecvPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"TerminalDevice_Channel_Otn",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tti-msg-recv"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn).TtiMsgRecv
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/tti-msg-recv"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/tti-msg-recv"
func (n *TerminalDevice_Channel_Otn_TtiMsgRecvPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"TerminalDevice_Channel_Otn",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tti-msg-recv"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn).TtiMsgRecv
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_TtiMsgTransmitPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/tti-msg-transmit YANG schema element.
type TerminalDevice_Channel_Otn_TtiMsgTransmitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_TtiMsgTransmitPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/tti-msg-transmit YANG schema element.
type TerminalDevice_Channel_Otn_TtiMsgTransmitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/tti-msg-transmit"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/tti-msg-transmit"
func (n *TerminalDevice_Channel_Otn_TtiMsgTransmitPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"TerminalDevice_Channel_Otn",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tti-msg-transmit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn).TtiMsgTransmit
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/tti-msg-transmit"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/tti-msg-transmit"
func (n *TerminalDevice_Channel_Otn_TtiMsgTransmitPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"TerminalDevice_Channel_Otn",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tti-msg-transmit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn).TtiMsgTransmit
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/tti-msg-transmit"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/config/tti-msg-transmit"
func (n *TerminalDevice_Channel_Otn_TtiMsgTransmitPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"TerminalDevice_Channel_Otn",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tti-msg-transmit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn).TtiMsgTransmit
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "config/tti-msg-transmit"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/config/tti-msg-transmit"
func (n *TerminalDevice_Channel_Otn_TtiMsgTransmitPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"TerminalDevice_Channel_Otn",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tti-msg-transmit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn).TtiMsgTransmit
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_UnavailableSecondsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/unavailable-seconds YANG schema element.
type TerminalDevice_Channel_Otn_UnavailableSecondsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_UnavailableSecondsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/unavailable-seconds YANG schema element.
type TerminalDevice_Channel_Otn_UnavailableSecondsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/unavailable-seconds"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/unavailable-seconds"
func (n *TerminalDevice_Channel_Otn_UnavailableSecondsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Otn",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "unavailable-seconds"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn).UnavailableSeconds
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/unavailable-seconds"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/unavailable-seconds"
func (n *TerminalDevice_Channel_Otn_UnavailableSecondsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Otn",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "unavailable-seconds"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn).UnavailableSeconds
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_OtnPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn YANG schema element.
type TerminalDevice_Channel_OtnPath struct {
	*ygnmi.NodePath
}

// TerminalDevice_Channel_OtnPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn YANG schema element.
type TerminalDevice_Channel_OtnPathAny struct {
	*ygnmi.NodePath
}

// BackgroundBlockErrors (leaf): The number of background block errors
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/background-block-errors"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/background-block-errors"
func (n *TerminalDevice_Channel_OtnPath) BackgroundBlockErrors() *TerminalDevice_Channel_Otn_BackgroundBlockErrorsPath {
	ps := &TerminalDevice_Channel_Otn_BackgroundBlockErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "background-block-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BackgroundBlockErrors (leaf): The number of background block errors
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/background-block-errors"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/background-block-errors"
func (n *TerminalDevice_Channel_OtnPathAny) BackgroundBlockErrors() *TerminalDevice_Channel_Otn_BackgroundBlockErrorsPathAny {
	ps := &TerminalDevice_Channel_Otn_BackgroundBlockErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "background-block-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CodeViolations (leaf): For ethernet or fiberchannel links, the number of 8b/10b
// coding violations. For SONET/SDH, the number of BIP (bit
// interleaved parity) errors
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/code-violations"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/code-violations"
func (n *TerminalDevice_Channel_OtnPath) CodeViolations() *TerminalDevice_Channel_Otn_CodeViolationsPath {
	ps := &TerminalDevice_Channel_Otn_CodeViolationsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "code-violations"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CodeViolations (leaf): For ethernet or fiberchannel links, the number of 8b/10b
// coding violations. For SONET/SDH, the number of BIP (bit
// interleaved parity) errors
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/code-violations"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/code-violations"
func (n *TerminalDevice_Channel_OtnPathAny) CodeViolations() *TerminalDevice_Channel_Otn_CodeViolationsPathAny {
	ps := &TerminalDevice_Channel_Otn_CodeViolationsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "code-violations"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ErroredBlocks (leaf): The number of errored blocks. Error detection codes are
// capable to detect whether one or more errors have occurred
// in a given sequence of bits – the block. It is normally not
// possible to determine the exact number of errored bits within
// the block.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/errored-blocks"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/errored-blocks"
func (n *TerminalDevice_Channel_OtnPath) ErroredBlocks() *TerminalDevice_Channel_Otn_ErroredBlocksPath {
	ps := &TerminalDevice_Channel_Otn_ErroredBlocksPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "errored-blocks"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ErroredBlocks (leaf): The number of errored blocks. Error detection codes are
// capable to detect whether one or more errors have occurred
// in a given sequence of bits – the block. It is normally not
// possible to determine the exact number of errored bits within
// the block.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/errored-blocks"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/errored-blocks"
func (n *TerminalDevice_Channel_OtnPathAny) ErroredBlocks() *TerminalDevice_Channel_Otn_ErroredBlocksPathAny {
	ps := &TerminalDevice_Channel_Otn_ErroredBlocksPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "errored-blocks"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ErroredSeconds (leaf): The number of seconds that at least one errored blocks
// occurs, at least one code violation occurs, loss of sync is
// detected or loss of signal is detected
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/errored-seconds"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/errored-seconds"
func (n *TerminalDevice_Channel_OtnPath) ErroredSeconds() *TerminalDevice_Channel_Otn_ErroredSecondsPath {
	ps := &TerminalDevice_Channel_Otn_ErroredSecondsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "errored-seconds"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ErroredSeconds (leaf): The number of seconds that at least one errored blocks
// occurs, at least one code violation occurs, loss of sync is
// detected or loss of signal is detected
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/errored-seconds"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/errored-seconds"
func (n *TerminalDevice_Channel_OtnPathAny) ErroredSeconds() *TerminalDevice_Channel_Otn_ErroredSecondsPathAny {
	ps := &TerminalDevice_Channel_Otn_ErroredSecondsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "errored-seconds"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Esnr (container): Electrical signal to noise ratio. Baud rate
// normalized signal to noise ratio based on
// error vector magnitude in dB with two decimal
// precision. Values include the instantaneous, average,
// minimum, and maximum statistics. If avg/min/max
// statistics are not supported, the target is expected
// to just supply the instant value
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/esnr"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/esnr"
func (n *TerminalDevice_Channel_OtnPath) Esnr() *TerminalDevice_Channel_Otn_EsnrPath {
	ps := &TerminalDevice_Channel_Otn_EsnrPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "esnr"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Esnr (container): Electrical signal to noise ratio. Baud rate
// normalized signal to noise ratio based on
// error vector magnitude in dB with two decimal
// precision. Values include the instantaneous, average,
// minimum, and maximum statistics. If avg/min/max
// statistics are not supported, the target is expected
// to just supply the instant value
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/esnr"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/esnr"
func (n *TerminalDevice_Channel_OtnPathAny) Esnr() *TerminalDevice_Channel_Otn_EsnrPathAny {
	ps := &TerminalDevice_Channel_Otn_EsnrPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "esnr"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// FecCorrectedBits (leaf): The number of bits that were corrected by the FEC
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/fec-corrected-bits"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/fec-corrected-bits"
func (n *TerminalDevice_Channel_OtnPath) FecCorrectedBits() *TerminalDevice_Channel_Otn_FecCorrectedBitsPath {
	ps := &TerminalDevice_Channel_Otn_FecCorrectedBitsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fec-corrected-bits"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FecCorrectedBits (leaf): The number of bits that were corrected by the FEC
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/fec-corrected-bits"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/fec-corrected-bits"
func (n *TerminalDevice_Channel_OtnPathAny) FecCorrectedBits() *TerminalDevice_Channel_Otn_FecCorrectedBitsPathAny {
	ps := &TerminalDevice_Channel_Otn_FecCorrectedBitsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fec-corrected-bits"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FecCorrectedBytes (leaf): The number of bytes that were corrected by the FEC
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/fec-corrected-bytes"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/fec-corrected-bytes"
func (n *TerminalDevice_Channel_OtnPath) FecCorrectedBytes() *TerminalDevice_Channel_Otn_FecCorrectedBytesPath {
	ps := &TerminalDevice_Channel_Otn_FecCorrectedBytesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fec-corrected-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FecCorrectedBytes (leaf): The number of bytes that were corrected by the FEC
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/fec-corrected-bytes"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/fec-corrected-bytes"
func (n *TerminalDevice_Channel_OtnPathAny) FecCorrectedBytes() *TerminalDevice_Channel_Otn_FecCorrectedBytesPathAny {
	ps := &TerminalDevice_Channel_Otn_FecCorrectedBytesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fec-corrected-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FecUncorrectableBlocks (leaf): The number of blocks or frames that were uncorrectable by
// the FEC
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/fec-uncorrectable-blocks"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/fec-uncorrectable-blocks"
func (n *TerminalDevice_Channel_OtnPath) FecUncorrectableBlocks() *TerminalDevice_Channel_Otn_FecUncorrectableBlocksPath {
	ps := &TerminalDevice_Channel_Otn_FecUncorrectableBlocksPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fec-uncorrectable-blocks"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FecUncorrectableBlocks (leaf): The number of blocks or frames that were uncorrectable by
// the FEC
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/fec-uncorrectable-blocks"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/fec-uncorrectable-blocks"
func (n *TerminalDevice_Channel_OtnPathAny) FecUncorrectableBlocks() *TerminalDevice_Channel_Otn_FecUncorrectableBlocksPathAny {
	ps := &TerminalDevice_Channel_Otn_FecUncorrectableBlocksPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fec-uncorrectable-blocks"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FecUncorrectableWords (leaf): The number of words that were uncorrectable by the FEC
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/fec-uncorrectable-words"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/fec-uncorrectable-words"
func (n *TerminalDevice_Channel_OtnPath) FecUncorrectableWords() *TerminalDevice_Channel_Otn_FecUncorrectableWordsPath {
	ps := &TerminalDevice_Channel_Otn_FecUncorrectableWordsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fec-uncorrectable-words"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FecUncorrectableWords (leaf): The number of words that were uncorrectable by the FEC
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/fec-uncorrectable-words"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/fec-uncorrectable-words"
func (n *TerminalDevice_Channel_OtnPathAny) FecUncorrectableWords() *TerminalDevice_Channel_Otn_FecUncorrectableWordsPathAny {
	ps := &TerminalDevice_Channel_Otn_FecUncorrectableWordsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fec-uncorrectable-words"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PostFecBer (container): Bit error rate after forward error correction -- computed
// value with 18 decimal precision. Note that decimal64
// supports values as small as i x 10^-18 where i is an
// integer. Values smaller than this should be reported as 0
// to inidicate error free or near error free performance.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/post-fec-ber"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/post-fec-ber"
func (n *TerminalDevice_Channel_OtnPath) PostFecBer() *TerminalDevice_Channel_Otn_PostFecBerPath {
	ps := &TerminalDevice_Channel_Otn_PostFecBerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "post-fec-ber"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PostFecBer (container): Bit error rate after forward error correction -- computed
// value with 18 decimal precision. Note that decimal64
// supports values as small as i x 10^-18 where i is an
// integer. Values smaller than this should be reported as 0
// to inidicate error free or near error free performance.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/post-fec-ber"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/post-fec-ber"
func (n *TerminalDevice_Channel_OtnPathAny) PostFecBer() *TerminalDevice_Channel_Otn_PostFecBerPathAny {
	ps := &TerminalDevice_Channel_Otn_PostFecBerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "post-fec-ber"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PreFecBer (container): Bit error rate before forward error correction -- computed
// value with 18 decimal precision. Note that decimal64
// supports values as small as i x 10^-18 where i is an
// integer. Values smaller than this should be reported as 0
// to inidicate error free or near error free performance.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/pre-fec-ber"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber"
func (n *TerminalDevice_Channel_OtnPath) PreFecBer() *TerminalDevice_Channel_Otn_PreFecBerPath {
	ps := &TerminalDevice_Channel_Otn_PreFecBerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "pre-fec-ber"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PreFecBer (container): Bit error rate before forward error correction -- computed
// value with 18 decimal precision. Note that decimal64
// supports values as small as i x 10^-18 where i is an
// integer. Values smaller than this should be reported as 0
// to inidicate error free or near error free performance.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/pre-fec-ber"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber"
func (n *TerminalDevice_Channel_OtnPathAny) PreFecBer() *TerminalDevice_Channel_Otn_PreFecBerPathAny {
	ps := &TerminalDevice_Channel_Otn_PreFecBerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "pre-fec-ber"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// QValue (container): Quality value (factor) in dB of a channel with two
// decimal precision. Values include the instantaneous,
// average, minimum, and maximum statistics. If avg/min/max
// statistics are not supported, the target is expected
// to just supply the instant value
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/q-value"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/q-value"
func (n *TerminalDevice_Channel_OtnPath) QValue() *TerminalDevice_Channel_Otn_QValuePath {
	ps := &TerminalDevice_Channel_Otn_QValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "q-value"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// QValue (container): Quality value (factor) in dB of a channel with two
// decimal precision. Values include the instantaneous,
// average, minimum, and maximum statistics. If avg/min/max
// statistics are not supported, the target is expected
// to just supply the instant value
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/q-value"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/q-value"
func (n *TerminalDevice_Channel_OtnPathAny) QValue() *TerminalDevice_Channel_Otn_QValuePathAny {
	ps := &TerminalDevice_Channel_Otn_QValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "q-value"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RdiMsg (leaf): Remote defect indication (RDI) message received
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/rdi-msg"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/rdi-msg"
func (n *TerminalDevice_Channel_OtnPath) RdiMsg() *TerminalDevice_Channel_Otn_RdiMsgPath {
	ps := &TerminalDevice_Channel_Otn_RdiMsgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "rdi-msg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RdiMsg (leaf): Remote defect indication (RDI) message received
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/rdi-msg"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/rdi-msg"
func (n *TerminalDevice_Channel_OtnPathAny) RdiMsg() *TerminalDevice_Channel_Otn_RdiMsgPathAny {
	ps := &TerminalDevice_Channel_Otn_RdiMsgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "rdi-msg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SeverelyErroredSeconds (leaf): The number of seconds that loss of frame is detected OR
// the number of errored blocks, code violations, loss of sync
// or loss of signal is detected exceeds a predefined
// threshold
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/severely-errored-seconds"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/severely-errored-seconds"
func (n *TerminalDevice_Channel_OtnPath) SeverelyErroredSeconds() *TerminalDevice_Channel_Otn_SeverelyErroredSecondsPath {
	ps := &TerminalDevice_Channel_Otn_SeverelyErroredSecondsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "severely-errored-seconds"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SeverelyErroredSeconds (leaf): The number of seconds that loss of frame is detected OR
// the number of errored blocks, code violations, loss of sync
// or loss of signal is detected exceeds a predefined
// threshold
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/severely-errored-seconds"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/severely-errored-seconds"
func (n *TerminalDevice_Channel_OtnPathAny) SeverelyErroredSeconds() *TerminalDevice_Channel_Otn_SeverelyErroredSecondsPathAny {
	ps := &TerminalDevice_Channel_Otn_SeverelyErroredSecondsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "severely-errored-seconds"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TributarySlotGranularity (leaf): Granularity value of OPUk or OPUCn tributary slots for OTN
// signal allocation. The currently defined values follow the
// existing ITU-T G.709 standard, which can be extended as
// needed in future.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/tributary-slot-granularity"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/*/tributary-slot-granularity"
func (n *TerminalDevice_Channel_OtnPath) TributarySlotGranularity() *TerminalDevice_Channel_Otn_TributarySlotGranularityPath {
	ps := &TerminalDevice_Channel_Otn_TributarySlotGranularityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tributary-slot-granularity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TributarySlotGranularity (leaf): Granularity value of OPUk or OPUCn tributary slots for OTN
// signal allocation. The currently defined values follow the
// existing ITU-T G.709 standard, which can be extended as
// needed in future.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/tributary-slot-granularity"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/*/tributary-slot-granularity"
func (n *TerminalDevice_Channel_OtnPathAny) TributarySlotGranularity() *TerminalDevice_Channel_Otn_TributarySlotGranularityPathAny {
	ps := &TerminalDevice_Channel_Otn_TributarySlotGranularityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tributary-slot-granularity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TtiMsgAuto (leaf): Trail trace identifier (TTI) transmit message automatically
// created.  If true, then setting a custom transmit message
// would be invalid.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/tti-msg-auto"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/*/tti-msg-auto"
func (n *TerminalDevice_Channel_OtnPath) TtiMsgAuto() *TerminalDevice_Channel_Otn_TtiMsgAutoPath {
	ps := &TerminalDevice_Channel_Otn_TtiMsgAutoPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tti-msg-auto"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TtiMsgAuto (leaf): Trail trace identifier (TTI) transmit message automatically
// created.  If true, then setting a custom transmit message
// would be invalid.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/tti-msg-auto"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/*/tti-msg-auto"
func (n *TerminalDevice_Channel_OtnPathAny) TtiMsgAuto() *TerminalDevice_Channel_Otn_TtiMsgAutoPathAny {
	ps := &TerminalDevice_Channel_Otn_TtiMsgAutoPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tti-msg-auto"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TtiMsgExpected (leaf): Trail trace identifier (TTI) message expected
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/tti-msg-expected"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/*/tti-msg-expected"
func (n *TerminalDevice_Channel_OtnPath) TtiMsgExpected() *TerminalDevice_Channel_Otn_TtiMsgExpectedPath {
	ps := &TerminalDevice_Channel_Otn_TtiMsgExpectedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tti-msg-expected"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TtiMsgExpected (leaf): Trail trace identifier (TTI) message expected
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/tti-msg-expected"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/*/tti-msg-expected"
func (n *TerminalDevice_Channel_OtnPathAny) TtiMsgExpected() *TerminalDevice_Channel_Otn_TtiMsgExpectedPathAny {
	ps := &TerminalDevice_Channel_Otn_TtiMsgExpectedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tti-msg-expected"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TtiMsgRecv (leaf): Trail trace identifier (TTI) message received
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/tti-msg-recv"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/tti-msg-recv"
func (n *TerminalDevice_Channel_OtnPath) TtiMsgRecv() *TerminalDevice_Channel_Otn_TtiMsgRecvPath {
	ps := &TerminalDevice_Channel_Otn_TtiMsgRecvPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "tti-msg-recv"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TtiMsgRecv (leaf): Trail trace identifier (TTI) message received
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/tti-msg-recv"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/tti-msg-recv"
func (n *TerminalDevice_Channel_OtnPathAny) TtiMsgRecv() *TerminalDevice_Channel_Otn_TtiMsgRecvPathAny {
	ps := &TerminalDevice_Channel_Otn_TtiMsgRecvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "tti-msg-recv"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TtiMsgTransmit (leaf): Trail trace identifier (TTI) message transmitted
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/tti-msg-transmit"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/*/tti-msg-transmit"
func (n *TerminalDevice_Channel_OtnPath) TtiMsgTransmit() *TerminalDevice_Channel_Otn_TtiMsgTransmitPath {
	ps := &TerminalDevice_Channel_Otn_TtiMsgTransmitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tti-msg-transmit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TtiMsgTransmit (leaf): Trail trace identifier (TTI) message transmitted
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/tti-msg-transmit"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/*/tti-msg-transmit"
func (n *TerminalDevice_Channel_OtnPathAny) TtiMsgTransmit() *TerminalDevice_Channel_Otn_TtiMsgTransmitPathAny {
	ps := &TerminalDevice_Channel_Otn_TtiMsgTransmitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tti-msg-transmit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnavailableSeconds (leaf): The number of seconds during which the link is unavailable
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/unavailable-seconds"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/unavailable-seconds"
func (n *TerminalDevice_Channel_OtnPath) UnavailableSeconds() *TerminalDevice_Channel_Otn_UnavailableSecondsPath {
	ps := &TerminalDevice_Channel_Otn_UnavailableSecondsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "unavailable-seconds"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnavailableSeconds (leaf): The number of seconds during which the link is unavailable
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/unavailable-seconds"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/unavailable-seconds"
func (n *TerminalDevice_Channel_OtnPathAny) UnavailableSeconds() *TerminalDevice_Channel_Otn_UnavailableSecondsPathAny {
	ps := &TerminalDevice_Channel_Otn_UnavailableSecondsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "unavailable-seconds"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_OtnPath) State() ygnmi.SingletonQuery[*oc.TerminalDevice_Channel_Otn] {
	return ygnmi.NewSingletonQuery[*oc.TerminalDevice_Channel_Otn](
		"TerminalDevice_Channel_Otn",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_OtnPathAny) State() ygnmi.WildcardQuery[*oc.TerminalDevice_Channel_Otn] {
	return ygnmi.NewWildcardQuery[*oc.TerminalDevice_Channel_Otn](
		"TerminalDevice_Channel_Otn",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_OtnPath) Config() ygnmi.ConfigQuery[*oc.TerminalDevice_Channel_Otn] {
	return ygnmi.NewConfigQuery[*oc.TerminalDevice_Channel_Otn](
		"TerminalDevice_Channel_Otn",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_OtnPathAny) Config() ygnmi.WildcardQuery[*oc.TerminalDevice_Channel_Otn] {
	return ygnmi.NewWildcardQuery[*oc.TerminalDevice_Channel_Otn](
		"TerminalDevice_Channel_Otn",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_Esnr_AvgPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/esnr/avg YANG schema element.
type TerminalDevice_Channel_Otn_Esnr_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_Esnr_AvgPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/esnr/avg YANG schema element.
type TerminalDevice_Channel_Otn_Esnr_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/esnr/avg"
func (n *TerminalDevice_Channel_Otn_Esnr_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"TerminalDevice_Channel_Otn_Esnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_Esnr).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_Esnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/esnr/avg"
func (n *TerminalDevice_Channel_Otn_Esnr_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"TerminalDevice_Channel_Otn_Esnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_Esnr).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_Esnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_Esnr_InstantPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/esnr/instant YANG schema element.
type TerminalDevice_Channel_Otn_Esnr_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_Esnr_InstantPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/esnr/instant YANG schema element.
type TerminalDevice_Channel_Otn_Esnr_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/esnr/instant"
func (n *TerminalDevice_Channel_Otn_Esnr_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"TerminalDevice_Channel_Otn_Esnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_Esnr).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_Esnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/esnr/instant"
func (n *TerminalDevice_Channel_Otn_Esnr_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"TerminalDevice_Channel_Otn_Esnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_Esnr).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_Esnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_Esnr_IntervalPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/esnr/interval YANG schema element.
type TerminalDevice_Channel_Otn_Esnr_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_Esnr_IntervalPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/esnr/interval YANG schema element.
type TerminalDevice_Channel_Otn_Esnr_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/esnr/interval"
func (n *TerminalDevice_Channel_Otn_Esnr_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Otn_Esnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_Esnr).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_Esnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/esnr/interval"
func (n *TerminalDevice_Channel_Otn_Esnr_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Otn_Esnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_Esnr).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_Esnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_Esnr_MaxPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/esnr/max YANG schema element.
type TerminalDevice_Channel_Otn_Esnr_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_Esnr_MaxPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/esnr/max YANG schema element.
type TerminalDevice_Channel_Otn_Esnr_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/esnr/max"
func (n *TerminalDevice_Channel_Otn_Esnr_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"TerminalDevice_Channel_Otn_Esnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_Esnr).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_Esnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/esnr/max"
func (n *TerminalDevice_Channel_Otn_Esnr_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"TerminalDevice_Channel_Otn_Esnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_Esnr).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_Esnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_Esnr_MaxTimePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/esnr/max-time YANG schema element.
type TerminalDevice_Channel_Otn_Esnr_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_Esnr_MaxTimePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/esnr/max-time YANG schema element.
type TerminalDevice_Channel_Otn_Esnr_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/esnr/max-time"
func (n *TerminalDevice_Channel_Otn_Esnr_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Otn_Esnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_Esnr).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_Esnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/esnr/max-time"
func (n *TerminalDevice_Channel_Otn_Esnr_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Otn_Esnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_Esnr).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_Esnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_Esnr_MinPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/esnr/min YANG schema element.
type TerminalDevice_Channel_Otn_Esnr_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_Esnr_MinPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/esnr/min YANG schema element.
type TerminalDevice_Channel_Otn_Esnr_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/esnr/min"
func (n *TerminalDevice_Channel_Otn_Esnr_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"TerminalDevice_Channel_Otn_Esnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_Esnr).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_Esnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/esnr/min"
func (n *TerminalDevice_Channel_Otn_Esnr_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"TerminalDevice_Channel_Otn_Esnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_Esnr).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_Esnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_Esnr_MinTimePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/esnr/min-time YANG schema element.
type TerminalDevice_Channel_Otn_Esnr_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_Esnr_MinTimePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/esnr/min-time YANG schema element.
type TerminalDevice_Channel_Otn_Esnr_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/esnr/min-time"
func (n *TerminalDevice_Channel_Otn_Esnr_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Otn_Esnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_Esnr).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_Esnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/esnr/min-time"
func (n *TerminalDevice_Channel_Otn_Esnr_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Otn_Esnr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_Esnr).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_Esnr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_EsnrPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/esnr YANG schema element.
type TerminalDevice_Channel_Otn_EsnrPath struct {
	*ygnmi.NodePath
}

// TerminalDevice_Channel_Otn_EsnrPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/esnr YANG schema element.
type TerminalDevice_Channel_Otn_EsnrPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/esnr/avg"
func (n *TerminalDevice_Channel_Otn_EsnrPath) Avg() *TerminalDevice_Channel_Otn_Esnr_AvgPath {
	ps := &TerminalDevice_Channel_Otn_Esnr_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/esnr/avg"
func (n *TerminalDevice_Channel_Otn_EsnrPathAny) Avg() *TerminalDevice_Channel_Otn_Esnr_AvgPathAny {
	ps := &TerminalDevice_Channel_Otn_Esnr_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/esnr/instant"
func (n *TerminalDevice_Channel_Otn_EsnrPath) Instant() *TerminalDevice_Channel_Otn_Esnr_InstantPath {
	ps := &TerminalDevice_Channel_Otn_Esnr_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/esnr/instant"
func (n *TerminalDevice_Channel_Otn_EsnrPathAny) Instant() *TerminalDevice_Channel_Otn_Esnr_InstantPathAny {
	ps := &TerminalDevice_Channel_Otn_Esnr_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/esnr/interval"
func (n *TerminalDevice_Channel_Otn_EsnrPath) Interval() *TerminalDevice_Channel_Otn_Esnr_IntervalPath {
	ps := &TerminalDevice_Channel_Otn_Esnr_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/esnr/interval"
func (n *TerminalDevice_Channel_Otn_EsnrPathAny) Interval() *TerminalDevice_Channel_Otn_Esnr_IntervalPathAny {
	ps := &TerminalDevice_Channel_Otn_Esnr_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/esnr/max"
func (n *TerminalDevice_Channel_Otn_EsnrPath) Max() *TerminalDevice_Channel_Otn_Esnr_MaxPath {
	ps := &TerminalDevice_Channel_Otn_Esnr_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/esnr/max"
func (n *TerminalDevice_Channel_Otn_EsnrPathAny) Max() *TerminalDevice_Channel_Otn_Esnr_MaxPathAny {
	ps := &TerminalDevice_Channel_Otn_Esnr_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-terminal-device"
//		Path from parent:     "max-time"
//		Path from root:       "/terminal-device/logical-channels/channel/otn/state/esnr/max-time"
func (n *TerminalDevice_Channel_Otn_EsnrPath) MaxTime() *TerminalDevice_Channel_Otn_Esnr_MaxTimePath {
	ps := &TerminalDevice_Channel_Otn_Esnr_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-terminal-device"
//		Path from parent:     "max-time"
//		Path from root:       "/terminal-device/logical-channels/channel/otn/state/esnr/max-time"
func (n *TerminalDevice_Channel_Otn_EsnrPathAny) MaxTime() *TerminalDevice_Channel_Otn_Esnr_MaxTimePathAny {
	ps := &TerminalDevice_Channel_Otn_Esnr_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/esnr/min"
func (n *TerminalDevice_Channel_Otn_EsnrPath) Min() *TerminalDevice_Channel_Otn_Esnr_MinPath {
	ps := &TerminalDevice_Channel_Otn_Esnr_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/esnr/min"
func (n *TerminalDevice_Channel_Otn_EsnrPathAny) Min() *TerminalDevice_Channel_Otn_Esnr_MinPathAny {
	ps := &TerminalDevice_Channel_Otn_Esnr_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-terminal-device"
//		Path from parent:     "min-time"
//		Path from root:       "/terminal-device/logical-channels/channel/otn/state/esnr/min-time"
func (n *TerminalDevice_Channel_Otn_EsnrPath) MinTime() *TerminalDevice_Channel_Otn_Esnr_MinTimePath {
	ps := &TerminalDevice_Channel_Otn_Esnr_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-terminal-device"
//		Path from parent:     "min-time"
//		Path from root:       "/terminal-device/logical-channels/channel/otn/state/esnr/min-time"
func (n *TerminalDevice_Channel_Otn_EsnrPathAny) MinTime() *TerminalDevice_Channel_Otn_Esnr_MinTimePathAny {
	ps := &TerminalDevice_Channel_Otn_Esnr_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_Otn_EsnrPath) State() ygnmi.SingletonQuery[*oc.TerminalDevice_Channel_Otn_Esnr] {
	return ygnmi.NewSingletonQuery[*oc.TerminalDevice_Channel_Otn_Esnr](
		"TerminalDevice_Channel_Otn_Esnr",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_Otn_EsnrPathAny) State() ygnmi.WildcardQuery[*oc.TerminalDevice_Channel_Otn_Esnr] {
	return ygnmi.NewWildcardQuery[*oc.TerminalDevice_Channel_Otn_Esnr](
		"TerminalDevice_Channel_Otn_Esnr",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_PostFecBer_AvgPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/post-fec-ber/avg YANG schema element.
type TerminalDevice_Channel_Otn_PostFecBer_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_PostFecBer_AvgPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/post-fec-ber/avg YANG schema element.
type TerminalDevice_Channel_Otn_PostFecBer_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/post-fec-ber/avg"
func (n *TerminalDevice_Channel_Otn_PostFecBer_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"TerminalDevice_Channel_Otn_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_PostFecBer).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/post-fec-ber/avg"
func (n *TerminalDevice_Channel_Otn_PostFecBer_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"TerminalDevice_Channel_Otn_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_PostFecBer).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_PostFecBer_InstantPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/post-fec-ber/instant YANG schema element.
type TerminalDevice_Channel_Otn_PostFecBer_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_PostFecBer_InstantPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/post-fec-ber/instant YANG schema element.
type TerminalDevice_Channel_Otn_PostFecBer_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/post-fec-ber/instant"
func (n *TerminalDevice_Channel_Otn_PostFecBer_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"TerminalDevice_Channel_Otn_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_PostFecBer).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/post-fec-ber/instant"
func (n *TerminalDevice_Channel_Otn_PostFecBer_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"TerminalDevice_Channel_Otn_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_PostFecBer).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_PostFecBer_IntervalPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/post-fec-ber/interval YANG schema element.
type TerminalDevice_Channel_Otn_PostFecBer_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_PostFecBer_IntervalPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/post-fec-ber/interval YANG schema element.
type TerminalDevice_Channel_Otn_PostFecBer_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/post-fec-ber/interval"
func (n *TerminalDevice_Channel_Otn_PostFecBer_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Otn_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_PostFecBer).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/post-fec-ber/interval"
func (n *TerminalDevice_Channel_Otn_PostFecBer_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Otn_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_PostFecBer).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_PostFecBer_MaxPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/post-fec-ber/max YANG schema element.
type TerminalDevice_Channel_Otn_PostFecBer_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_PostFecBer_MaxPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/post-fec-ber/max YANG schema element.
type TerminalDevice_Channel_Otn_PostFecBer_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/post-fec-ber/max"
func (n *TerminalDevice_Channel_Otn_PostFecBer_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"TerminalDevice_Channel_Otn_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_PostFecBer).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/post-fec-ber/max"
func (n *TerminalDevice_Channel_Otn_PostFecBer_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"TerminalDevice_Channel_Otn_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_PostFecBer).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_PostFecBer_MaxTimePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/post-fec-ber/max-time YANG schema element.
type TerminalDevice_Channel_Otn_PostFecBer_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_PostFecBer_MaxTimePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/post-fec-ber/max-time YANG schema element.
type TerminalDevice_Channel_Otn_PostFecBer_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/post-fec-ber/max-time"
func (n *TerminalDevice_Channel_Otn_PostFecBer_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Otn_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_PostFecBer).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/post-fec-ber/max-time"
func (n *TerminalDevice_Channel_Otn_PostFecBer_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Otn_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_PostFecBer).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_PostFecBer_MinPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/post-fec-ber/min YANG schema element.
type TerminalDevice_Channel_Otn_PostFecBer_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_PostFecBer_MinPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/post-fec-ber/min YANG schema element.
type TerminalDevice_Channel_Otn_PostFecBer_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/post-fec-ber/min"
func (n *TerminalDevice_Channel_Otn_PostFecBer_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"TerminalDevice_Channel_Otn_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_PostFecBer).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/post-fec-ber/min"
func (n *TerminalDevice_Channel_Otn_PostFecBer_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"TerminalDevice_Channel_Otn_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_PostFecBer).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_PostFecBer_MinTimePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/post-fec-ber/min-time YANG schema element.
type TerminalDevice_Channel_Otn_PostFecBer_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_PostFecBer_MinTimePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/post-fec-ber/min-time YANG schema element.
type TerminalDevice_Channel_Otn_PostFecBer_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/post-fec-ber/min-time"
func (n *TerminalDevice_Channel_Otn_PostFecBer_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Otn_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_PostFecBer).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/post-fec-ber/min-time"
func (n *TerminalDevice_Channel_Otn_PostFecBer_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Otn_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_PostFecBer).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_PostFecBerPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/post-fec-ber YANG schema element.
type TerminalDevice_Channel_Otn_PostFecBerPath struct {
	*ygnmi.NodePath
}

// TerminalDevice_Channel_Otn_PostFecBerPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/post-fec-ber YANG schema element.
type TerminalDevice_Channel_Otn_PostFecBerPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/post-fec-ber/avg"
func (n *TerminalDevice_Channel_Otn_PostFecBerPath) Avg() *TerminalDevice_Channel_Otn_PostFecBer_AvgPath {
	ps := &TerminalDevice_Channel_Otn_PostFecBer_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/post-fec-ber/avg"
func (n *TerminalDevice_Channel_Otn_PostFecBerPathAny) Avg() *TerminalDevice_Channel_Otn_PostFecBer_AvgPathAny {
	ps := &TerminalDevice_Channel_Otn_PostFecBer_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/post-fec-ber/instant"
func (n *TerminalDevice_Channel_Otn_PostFecBerPath) Instant() *TerminalDevice_Channel_Otn_PostFecBer_InstantPath {
	ps := &TerminalDevice_Channel_Otn_PostFecBer_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/post-fec-ber/instant"
func (n *TerminalDevice_Channel_Otn_PostFecBerPathAny) Instant() *TerminalDevice_Channel_Otn_PostFecBer_InstantPathAny {
	ps := &TerminalDevice_Channel_Otn_PostFecBer_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/post-fec-ber/interval"
func (n *TerminalDevice_Channel_Otn_PostFecBerPath) Interval() *TerminalDevice_Channel_Otn_PostFecBer_IntervalPath {
	ps := &TerminalDevice_Channel_Otn_PostFecBer_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/post-fec-ber/interval"
func (n *TerminalDevice_Channel_Otn_PostFecBerPathAny) Interval() *TerminalDevice_Channel_Otn_PostFecBer_IntervalPathAny {
	ps := &TerminalDevice_Channel_Otn_PostFecBer_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/post-fec-ber/max"
func (n *TerminalDevice_Channel_Otn_PostFecBerPath) Max() *TerminalDevice_Channel_Otn_PostFecBer_MaxPath {
	ps := &TerminalDevice_Channel_Otn_PostFecBer_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/post-fec-ber/max"
func (n *TerminalDevice_Channel_Otn_PostFecBerPathAny) Max() *TerminalDevice_Channel_Otn_PostFecBer_MaxPathAny {
	ps := &TerminalDevice_Channel_Otn_PostFecBer_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-terminal-device"
//		Path from parent:     "max-time"
//		Path from root:       "/terminal-device/logical-channels/channel/otn/state/post-fec-ber/max-time"
func (n *TerminalDevice_Channel_Otn_PostFecBerPath) MaxTime() *TerminalDevice_Channel_Otn_PostFecBer_MaxTimePath {
	ps := &TerminalDevice_Channel_Otn_PostFecBer_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-terminal-device"
//		Path from parent:     "max-time"
//		Path from root:       "/terminal-device/logical-channels/channel/otn/state/post-fec-ber/max-time"
func (n *TerminalDevice_Channel_Otn_PostFecBerPathAny) MaxTime() *TerminalDevice_Channel_Otn_PostFecBer_MaxTimePathAny {
	ps := &TerminalDevice_Channel_Otn_PostFecBer_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/post-fec-ber/min"
func (n *TerminalDevice_Channel_Otn_PostFecBerPath) Min() *TerminalDevice_Channel_Otn_PostFecBer_MinPath {
	ps := &TerminalDevice_Channel_Otn_PostFecBer_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/post-fec-ber/min"
func (n *TerminalDevice_Channel_Otn_PostFecBerPathAny) Min() *TerminalDevice_Channel_Otn_PostFecBer_MinPathAny {
	ps := &TerminalDevice_Channel_Otn_PostFecBer_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-terminal-device"
//		Path from parent:     "min-time"
//		Path from root:       "/terminal-device/logical-channels/channel/otn/state/post-fec-ber/min-time"
func (n *TerminalDevice_Channel_Otn_PostFecBerPath) MinTime() *TerminalDevice_Channel_Otn_PostFecBer_MinTimePath {
	ps := &TerminalDevice_Channel_Otn_PostFecBer_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-terminal-device"
//		Path from parent:     "min-time"
//		Path from root:       "/terminal-device/logical-channels/channel/otn/state/post-fec-ber/min-time"
func (n *TerminalDevice_Channel_Otn_PostFecBerPathAny) MinTime() *TerminalDevice_Channel_Otn_PostFecBer_MinTimePathAny {
	ps := &TerminalDevice_Channel_Otn_PostFecBer_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_Otn_PostFecBerPath) State() ygnmi.SingletonQuery[*oc.TerminalDevice_Channel_Otn_PostFecBer] {
	return ygnmi.NewSingletonQuery[*oc.TerminalDevice_Channel_Otn_PostFecBer](
		"TerminalDevice_Channel_Otn_PostFecBer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_Otn_PostFecBerPathAny) State() ygnmi.WildcardQuery[*oc.TerminalDevice_Channel_Otn_PostFecBer] {
	return ygnmi.NewWildcardQuery[*oc.TerminalDevice_Channel_Otn_PostFecBer](
		"TerminalDevice_Channel_Otn_PostFecBer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_PreFecBer_AvgPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/avg YANG schema element.
type TerminalDevice_Channel_Otn_PreFecBer_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_PreFecBer_AvgPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/avg YANG schema element.
type TerminalDevice_Channel_Otn_PreFecBer_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/avg"
func (n *TerminalDevice_Channel_Otn_PreFecBer_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"TerminalDevice_Channel_Otn_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_PreFecBer).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/avg"
func (n *TerminalDevice_Channel_Otn_PreFecBer_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"TerminalDevice_Channel_Otn_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_PreFecBer).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_PreFecBer_InstantPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/instant YANG schema element.
type TerminalDevice_Channel_Otn_PreFecBer_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_PreFecBer_InstantPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/instant YANG schema element.
type TerminalDevice_Channel_Otn_PreFecBer_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/instant"
func (n *TerminalDevice_Channel_Otn_PreFecBer_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"TerminalDevice_Channel_Otn_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_PreFecBer).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/instant"
func (n *TerminalDevice_Channel_Otn_PreFecBer_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"TerminalDevice_Channel_Otn_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_PreFecBer).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_PreFecBer_IntervalPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/interval YANG schema element.
type TerminalDevice_Channel_Otn_PreFecBer_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_PreFecBer_IntervalPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/interval YANG schema element.
type TerminalDevice_Channel_Otn_PreFecBer_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/interval"
func (n *TerminalDevice_Channel_Otn_PreFecBer_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Otn_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_PreFecBer).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/interval"
func (n *TerminalDevice_Channel_Otn_PreFecBer_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Otn_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_PreFecBer).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_PreFecBer_MaxPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/max YANG schema element.
type TerminalDevice_Channel_Otn_PreFecBer_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_PreFecBer_MaxPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/max YANG schema element.
type TerminalDevice_Channel_Otn_PreFecBer_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/max"
func (n *TerminalDevice_Channel_Otn_PreFecBer_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"TerminalDevice_Channel_Otn_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_PreFecBer).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/max"
func (n *TerminalDevice_Channel_Otn_PreFecBer_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"TerminalDevice_Channel_Otn_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_PreFecBer).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_PreFecBer_MaxTimePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/max-time YANG schema element.
type TerminalDevice_Channel_Otn_PreFecBer_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_PreFecBer_MaxTimePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/max-time YANG schema element.
type TerminalDevice_Channel_Otn_PreFecBer_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/max-time"
func (n *TerminalDevice_Channel_Otn_PreFecBer_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Otn_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_PreFecBer).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/max-time"
func (n *TerminalDevice_Channel_Otn_PreFecBer_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Otn_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_PreFecBer).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_PreFecBer_MinPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/min YANG schema element.
type TerminalDevice_Channel_Otn_PreFecBer_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_PreFecBer_MinPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/min YANG schema element.
type TerminalDevice_Channel_Otn_PreFecBer_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/min"
func (n *TerminalDevice_Channel_Otn_PreFecBer_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"TerminalDevice_Channel_Otn_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_PreFecBer).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/min"
func (n *TerminalDevice_Channel_Otn_PreFecBer_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"TerminalDevice_Channel_Otn_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_PreFecBer).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_PreFecBer_MinTimePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/min-time YANG schema element.
type TerminalDevice_Channel_Otn_PreFecBer_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_PreFecBer_MinTimePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/min-time YANG schema element.
type TerminalDevice_Channel_Otn_PreFecBer_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/min-time"
func (n *TerminalDevice_Channel_Otn_PreFecBer_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Otn_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_PreFecBer).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/min-time"
func (n *TerminalDevice_Channel_Otn_PreFecBer_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Otn_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_PreFecBer).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_PreFecBerPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/pre-fec-ber YANG schema element.
type TerminalDevice_Channel_Otn_PreFecBerPath struct {
	*ygnmi.NodePath
}

// TerminalDevice_Channel_Otn_PreFecBerPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/pre-fec-ber YANG schema element.
type TerminalDevice_Channel_Otn_PreFecBerPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/avg"
func (n *TerminalDevice_Channel_Otn_PreFecBerPath) Avg() *TerminalDevice_Channel_Otn_PreFecBer_AvgPath {
	ps := &TerminalDevice_Channel_Otn_PreFecBer_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/avg"
func (n *TerminalDevice_Channel_Otn_PreFecBerPathAny) Avg() *TerminalDevice_Channel_Otn_PreFecBer_AvgPathAny {
	ps := &TerminalDevice_Channel_Otn_PreFecBer_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/instant"
func (n *TerminalDevice_Channel_Otn_PreFecBerPath) Instant() *TerminalDevice_Channel_Otn_PreFecBer_InstantPath {
	ps := &TerminalDevice_Channel_Otn_PreFecBer_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/instant"
func (n *TerminalDevice_Channel_Otn_PreFecBerPathAny) Instant() *TerminalDevice_Channel_Otn_PreFecBer_InstantPathAny {
	ps := &TerminalDevice_Channel_Otn_PreFecBer_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/interval"
func (n *TerminalDevice_Channel_Otn_PreFecBerPath) Interval() *TerminalDevice_Channel_Otn_PreFecBer_IntervalPath {
	ps := &TerminalDevice_Channel_Otn_PreFecBer_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/interval"
func (n *TerminalDevice_Channel_Otn_PreFecBerPathAny) Interval() *TerminalDevice_Channel_Otn_PreFecBer_IntervalPathAny {
	ps := &TerminalDevice_Channel_Otn_PreFecBer_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/max"
func (n *TerminalDevice_Channel_Otn_PreFecBerPath) Max() *TerminalDevice_Channel_Otn_PreFecBer_MaxPath {
	ps := &TerminalDevice_Channel_Otn_PreFecBer_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/max"
func (n *TerminalDevice_Channel_Otn_PreFecBerPathAny) Max() *TerminalDevice_Channel_Otn_PreFecBer_MaxPathAny {
	ps := &TerminalDevice_Channel_Otn_PreFecBer_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-terminal-device"
//		Path from parent:     "max-time"
//		Path from root:       "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/max-time"
func (n *TerminalDevice_Channel_Otn_PreFecBerPath) MaxTime() *TerminalDevice_Channel_Otn_PreFecBer_MaxTimePath {
	ps := &TerminalDevice_Channel_Otn_PreFecBer_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-terminal-device"
//		Path from parent:     "max-time"
//		Path from root:       "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/max-time"
func (n *TerminalDevice_Channel_Otn_PreFecBerPathAny) MaxTime() *TerminalDevice_Channel_Otn_PreFecBer_MaxTimePathAny {
	ps := &TerminalDevice_Channel_Otn_PreFecBer_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/min"
func (n *TerminalDevice_Channel_Otn_PreFecBerPath) Min() *TerminalDevice_Channel_Otn_PreFecBer_MinPath {
	ps := &TerminalDevice_Channel_Otn_PreFecBer_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/min"
func (n *TerminalDevice_Channel_Otn_PreFecBerPathAny) Min() *TerminalDevice_Channel_Otn_PreFecBer_MinPathAny {
	ps := &TerminalDevice_Channel_Otn_PreFecBer_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-terminal-device"
//		Path from parent:     "min-time"
//		Path from root:       "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/min-time"
func (n *TerminalDevice_Channel_Otn_PreFecBerPath) MinTime() *TerminalDevice_Channel_Otn_PreFecBer_MinTimePath {
	ps := &TerminalDevice_Channel_Otn_PreFecBer_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-terminal-device"
//		Path from parent:     "min-time"
//		Path from root:       "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/min-time"
func (n *TerminalDevice_Channel_Otn_PreFecBerPathAny) MinTime() *TerminalDevice_Channel_Otn_PreFecBer_MinTimePathAny {
	ps := &TerminalDevice_Channel_Otn_PreFecBer_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_Otn_PreFecBerPath) State() ygnmi.SingletonQuery[*oc.TerminalDevice_Channel_Otn_PreFecBer] {
	return ygnmi.NewSingletonQuery[*oc.TerminalDevice_Channel_Otn_PreFecBer](
		"TerminalDevice_Channel_Otn_PreFecBer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_Otn_PreFecBerPathAny) State() ygnmi.WildcardQuery[*oc.TerminalDevice_Channel_Otn_PreFecBer] {
	return ygnmi.NewWildcardQuery[*oc.TerminalDevice_Channel_Otn_PreFecBer](
		"TerminalDevice_Channel_Otn_PreFecBer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_QValue_AvgPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/q-value/avg YANG schema element.
type TerminalDevice_Channel_Otn_QValue_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_QValue_AvgPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/q-value/avg YANG schema element.
type TerminalDevice_Channel_Otn_QValue_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/q-value/avg"
func (n *TerminalDevice_Channel_Otn_QValue_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"TerminalDevice_Channel_Otn_QValue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_QValue).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_QValue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/q-value/avg"
func (n *TerminalDevice_Channel_Otn_QValue_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"TerminalDevice_Channel_Otn_QValue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_QValue).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_QValue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_QValue_InstantPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/q-value/instant YANG schema element.
type TerminalDevice_Channel_Otn_QValue_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_QValue_InstantPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/q-value/instant YANG schema element.
type TerminalDevice_Channel_Otn_QValue_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/q-value/instant"
func (n *TerminalDevice_Channel_Otn_QValue_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"TerminalDevice_Channel_Otn_QValue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_QValue).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_QValue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/q-value/instant"
func (n *TerminalDevice_Channel_Otn_QValue_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"TerminalDevice_Channel_Otn_QValue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_QValue).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_QValue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_QValue_IntervalPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/q-value/interval YANG schema element.
type TerminalDevice_Channel_Otn_QValue_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_QValue_IntervalPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/q-value/interval YANG schema element.
type TerminalDevice_Channel_Otn_QValue_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/q-value/interval"
func (n *TerminalDevice_Channel_Otn_QValue_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Otn_QValue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_QValue).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_QValue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/q-value/interval"
func (n *TerminalDevice_Channel_Otn_QValue_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Otn_QValue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_QValue).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_QValue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_QValue_MaxPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/q-value/max YANG schema element.
type TerminalDevice_Channel_Otn_QValue_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_QValue_MaxPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/q-value/max YANG schema element.
type TerminalDevice_Channel_Otn_QValue_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/q-value/max"
func (n *TerminalDevice_Channel_Otn_QValue_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"TerminalDevice_Channel_Otn_QValue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_QValue).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_QValue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/q-value/max"
func (n *TerminalDevice_Channel_Otn_QValue_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"TerminalDevice_Channel_Otn_QValue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_QValue).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_QValue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_QValue_MaxTimePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/q-value/max-time YANG schema element.
type TerminalDevice_Channel_Otn_QValue_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_QValue_MaxTimePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/q-value/max-time YANG schema element.
type TerminalDevice_Channel_Otn_QValue_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/q-value/max-time"
func (n *TerminalDevice_Channel_Otn_QValue_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Otn_QValue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_QValue).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_QValue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max-time"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/q-value/max-time"
func (n *TerminalDevice_Channel_Otn_QValue_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Otn_QValue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_QValue).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_QValue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_QValue_MinPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/q-value/min YANG schema element.
type TerminalDevice_Channel_Otn_QValue_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_QValue_MinPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/q-value/min YANG schema element.
type TerminalDevice_Channel_Otn_QValue_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/q-value/min"
func (n *TerminalDevice_Channel_Otn_QValue_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"TerminalDevice_Channel_Otn_QValue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_QValue).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_QValue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/q-value/min"
func (n *TerminalDevice_Channel_Otn_QValue_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"TerminalDevice_Channel_Otn_QValue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_QValue).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_QValue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_QValue_MinTimePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/q-value/min-time YANG schema element.
type TerminalDevice_Channel_Otn_QValue_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Channel_Otn_QValue_MinTimePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/q-value/min-time YANG schema element.
type TerminalDevice_Channel_Otn_QValue_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/q-value/min-time"
func (n *TerminalDevice_Channel_Otn_QValue_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"TerminalDevice_Channel_Otn_QValue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_QValue).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_QValue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min-time"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/q-value/min-time"
func (n *TerminalDevice_Channel_Otn_QValue_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"TerminalDevice_Channel_Otn_QValue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.TerminalDevice_Channel_Otn_QValue).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Channel_Otn_QValue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Channel_Otn_QValuePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/q-value YANG schema element.
type TerminalDevice_Channel_Otn_QValuePath struct {
	*ygnmi.NodePath
}

// TerminalDevice_Channel_Otn_QValuePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/q-value YANG schema element.
type TerminalDevice_Channel_Otn_QValuePathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/q-value/avg"
func (n *TerminalDevice_Channel_Otn_QValuePath) Avg() *TerminalDevice_Channel_Otn_QValue_AvgPath {
	ps := &TerminalDevice_Channel_Otn_QValue_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "avg"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/q-value/avg"
func (n *TerminalDevice_Channel_Otn_QValuePathAny) Avg() *TerminalDevice_Channel_Otn_QValue_AvgPathAny {
	ps := &TerminalDevice_Channel_Otn_QValue_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/q-value/instant"
func (n *TerminalDevice_Channel_Otn_QValuePath) Instant() *TerminalDevice_Channel_Otn_QValue_InstantPath {
	ps := &TerminalDevice_Channel_Otn_QValue_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "instant"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/q-value/instant"
func (n *TerminalDevice_Channel_Otn_QValuePathAny) Instant() *TerminalDevice_Channel_Otn_QValue_InstantPathAny {
	ps := &TerminalDevice_Channel_Otn_QValue_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/q-value/interval"
func (n *TerminalDevice_Channel_Otn_QValuePath) Interval() *TerminalDevice_Channel_Otn_QValue_IntervalPath {
	ps := &TerminalDevice_Channel_Otn_QValue_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "interval"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/q-value/interval"
func (n *TerminalDevice_Channel_Otn_QValuePathAny) Interval() *TerminalDevice_Channel_Otn_QValue_IntervalPathAny {
	ps := &TerminalDevice_Channel_Otn_QValue_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/q-value/max"
func (n *TerminalDevice_Channel_Otn_QValuePath) Max() *TerminalDevice_Channel_Otn_QValue_MaxPath {
	ps := &TerminalDevice_Channel_Otn_QValue_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "max"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/q-value/max"
func (n *TerminalDevice_Channel_Otn_QValuePathAny) Max() *TerminalDevice_Channel_Otn_QValue_MaxPathAny {
	ps := &TerminalDevice_Channel_Otn_QValue_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-terminal-device"
//		Path from parent:     "max-time"
//		Path from root:       "/terminal-device/logical-channels/channel/otn/state/q-value/max-time"
func (n *TerminalDevice_Channel_Otn_QValuePath) MaxTime() *TerminalDevice_Channel_Otn_QValue_MaxTimePath {
	ps := &TerminalDevice_Channel_Otn_QValue_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-terminal-device"
//		Path from parent:     "max-time"
//		Path from root:       "/terminal-device/logical-channels/channel/otn/state/q-value/max-time"
func (n *TerminalDevice_Channel_Otn_QValuePathAny) MaxTime() *TerminalDevice_Channel_Otn_QValue_MaxTimePathAny {
	ps := &TerminalDevice_Channel_Otn_QValue_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/q-value/min"
func (n *TerminalDevice_Channel_Otn_QValuePath) Min() *TerminalDevice_Channel_Otn_QValue_MinPath {
	ps := &TerminalDevice_Channel_Otn_QValue_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "min"
//	Path from root:       "/terminal-device/logical-channels/channel/otn/state/q-value/min"
func (n *TerminalDevice_Channel_Otn_QValuePathAny) Min() *TerminalDevice_Channel_Otn_QValue_MinPathAny {
	ps := &TerminalDevice_Channel_Otn_QValue_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-terminal-device"
//		Path from parent:     "min-time"
//		Path from root:       "/terminal-device/logical-channels/channel/otn/state/q-value/min-time"
func (n *TerminalDevice_Channel_Otn_QValuePath) MinTime() *TerminalDevice_Channel_Otn_QValue_MinTimePath {
	ps := &TerminalDevice_Channel_Otn_QValue_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-terminal-device"
//		Path from parent:     "min-time"
//		Path from root:       "/terminal-device/logical-channels/channel/otn/state/q-value/min-time"
func (n *TerminalDevice_Channel_Otn_QValuePathAny) MinTime() *TerminalDevice_Channel_Otn_QValue_MinTimePathAny {
	ps := &TerminalDevice_Channel_Otn_QValue_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_Otn_QValuePath) State() ygnmi.SingletonQuery[*oc.TerminalDevice_Channel_Otn_QValue] {
	return ygnmi.NewSingletonQuery[*oc.TerminalDevice_Channel_Otn_QValue](
		"TerminalDevice_Channel_Otn_QValue",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_Channel_Otn_QValuePathAny) State() ygnmi.WildcardQuery[*oc.TerminalDevice_Channel_Otn_QValue] {
	return ygnmi.NewWildcardQuery[*oc.TerminalDevice_Channel_Otn_QValue](
		"TerminalDevice_Channel_Otn_QValue",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Mode_DescriptionPath represents the /openconfig-terminal-device/terminal-device/operational-modes/mode/state/description YANG schema element.
type TerminalDevice_Mode_DescriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Mode_DescriptionPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/operational-modes/mode/state/description YANG schema element.
type TerminalDevice_Mode_DescriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/description"
//	Path from root:       "/terminal-device/operational-modes/mode/state/description"
func (n *TerminalDevice_Mode_DescriptionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"TerminalDevice_Mode",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Mode).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Mode) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/description"
//	Path from root:       "/terminal-device/operational-modes/mode/state/description"
func (n *TerminalDevice_Mode_DescriptionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"TerminalDevice_Mode",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Mode).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Mode) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Mode_ModeIdPath represents the /openconfig-terminal-device/terminal-device/operational-modes/mode/state/mode-id YANG schema element.
type TerminalDevice_Mode_ModeIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Mode_ModeIdPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/operational-modes/mode/state/mode-id YANG schema element.
type TerminalDevice_Mode_ModeIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/mode-id"
//	Path from root:       "/terminal-device/operational-modes/mode/state/mode-id"
func (n *TerminalDevice_Mode_ModeIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"TerminalDevice_Mode",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mode-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.TerminalDevice_Mode).ModeId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Mode) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/mode-id"
//	Path from root:       "/terminal-device/operational-modes/mode/state/mode-id"
func (n *TerminalDevice_Mode_ModeIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"TerminalDevice_Mode",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mode-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.TerminalDevice_Mode).ModeId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Mode) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "mode-id"
//	Path from root:       ""
func (n *TerminalDevice_Mode_ModeIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"TerminalDevice_Mode",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"mode-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.TerminalDevice_Mode).ModeId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Mode) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "mode-id"
//	Path from root:       ""
func (n *TerminalDevice_Mode_ModeIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"TerminalDevice_Mode",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"mode-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.TerminalDevice_Mode).ModeId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Mode) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_Mode_VendorIdPath represents the /openconfig-terminal-device/terminal-device/operational-modes/mode/state/vendor-id YANG schema element.
type TerminalDevice_Mode_VendorIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// TerminalDevice_Mode_VendorIdPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/operational-modes/mode/state/vendor-id YANG schema element.
type TerminalDevice_Mode_VendorIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/vendor-id"
//	Path from root:       "/terminal-device/operational-modes/mode/state/vendor-id"
func (n *TerminalDevice_Mode_VendorIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"TerminalDevice_Mode",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vendor-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Mode).VendorId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Mode) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/vendor-id"
//	Path from root:       "/terminal-device/operational-modes/mode/state/vendor-id"
func (n *TerminalDevice_Mode_VendorIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"TerminalDevice_Mode",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vendor-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.TerminalDevice_Mode).VendorId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice_Mode) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// TerminalDevice_ModePath represents the /openconfig-terminal-device/terminal-device/operational-modes/mode YANG schema element.
type TerminalDevice_ModePath struct {
	*ygnmi.NodePath
}

// TerminalDevice_ModePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/operational-modes/mode YANG schema element.
type TerminalDevice_ModePathAny struct {
	*ygnmi.NodePath
}

// TerminalDevice_ModePathMap represents the /openconfig-terminal-device/terminal-device/operational-modes/mode YANG schema element.
type TerminalDevice_ModePathMap struct {
	*ygnmi.NodePath
}

// TerminalDevice_ModePathMapAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/operational-modes/mode YANG schema element.
type TerminalDevice_ModePathMapAny struct {
	*ygnmi.NodePath
}

// Description (leaf): Vendor-supplied textual description of the characteristics
// of this operational mode to enable operators to select the
// appropriate mode for the application.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/description"
//	Path from root:       "/terminal-device/operational-modes/mode/state/description"
func (n *TerminalDevice_ModePath) Description() *TerminalDevice_Mode_DescriptionPath {
	ps := &TerminalDevice_Mode_DescriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Description (leaf): Vendor-supplied textual description of the characteristics
// of this operational mode to enable operators to select the
// appropriate mode for the application.
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/description"
//	Path from root:       "/terminal-device/operational-modes/mode/state/description"
func (n *TerminalDevice_ModePathAny) Description() *TerminalDevice_Mode_DescriptionPathAny {
	ps := &TerminalDevice_Mode_DescriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ModeId (leaf): Two-octet encoding of the vendor-defined operational
// mode
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/mode-id"
//	Path from root:       "/terminal-device/operational-modes/mode/*/mode-id"
func (n *TerminalDevice_ModePath) ModeId() *TerminalDevice_Mode_ModeIdPath {
	ps := &TerminalDevice_Mode_ModeIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mode-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ModeId (leaf): Two-octet encoding of the vendor-defined operational
// mode
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "*/mode-id"
//	Path from root:       "/terminal-device/operational-modes/mode/*/mode-id"
func (n *TerminalDevice_ModePathAny) ModeId() *TerminalDevice_Mode_ModeIdPathAny {
	ps := &TerminalDevice_Mode_ModeIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mode-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VendorId (leaf): Identifier to represent the vendor / supplier of the
// platform and the associated operational mode information
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/vendor-id"
//	Path from root:       "/terminal-device/operational-modes/mode/state/vendor-id"
func (n *TerminalDevice_ModePath) VendorId() *TerminalDevice_Mode_VendorIdPath {
	ps := &TerminalDevice_Mode_VendorIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "vendor-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VendorId (leaf): Identifier to represent the vendor / supplier of the
// platform and the associated operational mode information
//
//	Defining module:      "openconfig-terminal-device"
//	Instantiating module: "openconfig-terminal-device"
//	Path from parent:     "state/vendor-id"
//	Path from root:       "/terminal-device/operational-modes/mode/state/vendor-id"
func (n *TerminalDevice_ModePathAny) VendorId() *TerminalDevice_Mode_VendorIdPathAny {
	ps := &TerminalDevice_Mode_VendorIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "vendor-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_ModePath) State() ygnmi.SingletonQuery[*oc.TerminalDevice_Mode] {
	return ygnmi.NewSingletonQuery[*oc.TerminalDevice_Mode](
		"TerminalDevice_Mode",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_ModePathAny) State() ygnmi.WildcardQuery[*oc.TerminalDevice_Mode] {
	return ygnmi.NewWildcardQuery[*oc.TerminalDevice_Mode](
		"TerminalDevice_Mode",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_ModePathMap) State() ygnmi.SingletonQuery[map[uint16]*oc.TerminalDevice_Mode] {
	return ygnmi.NewSingletonQuery[map[uint16]*oc.TerminalDevice_Mode](
		"TerminalDevice",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint16]*oc.TerminalDevice_Mode, bool) {
			ret := gs.(*oc.TerminalDevice).Mode
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-terminal-device:operational-modes"},
			PostRelPath: []string{"openconfig-terminal-device:mode"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *TerminalDevice_ModePathMapAny) State() ygnmi.WildcardQuery[map[uint16]*oc.TerminalDevice_Mode] {
	return ygnmi.NewWildcardQuery[map[uint16]*oc.TerminalDevice_Mode](
		"TerminalDevice",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint16]*oc.TerminalDevice_Mode, bool) {
			ret := gs.(*oc.TerminalDevice).Mode
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.TerminalDevice) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-terminal-device:operational-modes"},
			PostRelPath: []string{"openconfig-terminal-device:mode"},
		},
	)
}
